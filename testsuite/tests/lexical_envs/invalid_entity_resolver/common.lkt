import lexer_example

@with_lexer(foo_lexer)
grammar foo_grammar {
    @main_rule main_rule <- list+(decl)
    decl <- Decl(Name(@Identifier) "(" list*(ref) ")")
    ref <- Ref(Name(@Identifier))
}

class Name: FooNode implements TokenNode {
}

class Decl: FooNode {
    @parse_field name: Name
    @parse_field refs: ASTList[Ref]

    env_spec {
        add_to_env_kv(node.name.symbol, node)
        add_env()
    }
}

class Ref: FooNode {
    @parse_field name: Name

    env_spec {
        add_to_env_kv(node.name.symbol, node, resolver=FooNode.resolve_ref)
    }

    @exported fun resolve(): Entity[FooNode] = node.node_env.get(node.name)?[0]
}
