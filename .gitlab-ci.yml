# This bit is used to make sure we don't run too many pipelines:
# run on a triggered pipeline, on a merge request, or on a push to a branch,
# but do not run in reaction to a push to a branch if there is also
# a merge request for it.
workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "pipeline"'
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS'
      when: never
    - if: '$CI_COMMIT_BRANCH'

variables:
  PACKAGE: $CI_PROJECT_DIR/langkit.tar.gz
  CI_FRAGMENTS: ci_fragments
  CI_FRAGMENTS_GIT: https://gitlab-ci-token:${CI_JOB_TOKEN}@${CI_SERVER_HOST}:${CI_SERVER_PORT}/setton/$CI_FRAGMENTS
  LIBADALANG_GIT: https://gitlab-ci-token:${CI_JOB_TOKEN}@${CI_SERVER_HOST}:${CI_SERVER_PORT}/eng/libadalang/libadalang

stages:
  - stage1  # langkit_build
  - stage2  # langkit_test,  libadalang_build_and_test,  package

#########
# BUILD #
#########

langkit_build:
  services:
     - image:libadalang
     - cpu:8
     - mem:16
  stage: stage1
  rules:
    # Triggers on a push or pipeline
    - if: ($CI_PIPELINE_SOURCE == "pipeline" || $CI_PIPELINE_SOURCE == "push")
  script:
    - export PATH=/it/e3/bin:$PATH
    - cd /it/wave

    # Build using anod
    - anod vcs --add-repo langkit $CI_PROJECT_DIR
    - anod build --minimal --disable-cathod langkit

    # Create the langkit package
    - (cd / ; tar czf $PACKAGE it/wave/x86_64-linux/langkit/install)

  artifacts:
    paths:
      - $PACKAGE

########
# TEST #
########

langkit_test:
  services:
     - image:libadalang
     - cpu:8
     - mem:16
  stage: stage2
  rules:
    # Triggers on a push or pipeline
    - if: ($CI_PIPELINE_SOURCE == "pipeline" || $CI_PIPELINE_SOURCE == "push")
  script:
    - export PATH=/it/e3/bin:$PATH

    # Unpack langkit
    - (cd / ; tar zxf $PACKAGE)
    - rm $PACKAGE

    # Run the testsuite
    - cd /it/wave
    - anod vcs --add-repo langkit $CI_PROJECT_DIR
    - touch fingerprints/x86_64-linux.langkit.build.json.assume-unchanged
    - anod test --minimal --disable-cathod langkit

    # This call to e3-testsuite-report raise an error if there is one failure
    - e3-testsuite-report --failure-exit-code 1 --xunit-output xunit_output.xml x86_64-linux/langkit-test/results/new/
    - cp xunit_output.xml $CI_PROJECT_DIR

  artifacts:
    paths:
      - xunit_output.xml
    reports:
      junit: xunit_output.xml

#############################
# LIBADALANG BUILD AND TEST #
#############################

libadalang_build_and_test:
  services:
     - image:libadalang
     - cpu:8
     - mem:16
  stage: stage2
  rules:
    # Triggers on a push or pipeline
    - if: ($CI_PIPELINE_SOURCE == "pipeline" || $CI_PIPELINE_SOURCE == "push")
  script:
    - export PATH=/it/e3/bin:$PATH

    # Unpack langkit
    - (cd / ; tar zxf $PACKAGE)
    - rm $PACKAGE

    # Get libadalang. Use this branch if it's a "/sync/" branch.
    - cd /tmp
    - LAL_BRANCH=master
    - if [[ $CI_COMMIT_BRANCH =~ ^/sync/* ]]; then
         LAL_BRANCH=$CI_COMMIT_BRANCH;
      elif [[ $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ ^/sync/* ]]; then
         LAL_BRANCH=$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME;
      fi
    - git clone $LIBADALANG_GIT -b $LAL_BRANCH

    # Build and test libadalang
    - cd /it/wave
    - anod vcs --add-repo libadalang /tmp/libadalang
    - touch fingerprints/x86_64-linux.langkit.build.json.assume-unchanged
    - anod build --minimal --disable-cathod libadalang
    - anod test  --minimal --disable-cathod libadalang

    # This call to e3-testsuite-report raise an error if there is one failure
    - e3-testsuite-report --failure-exit-code 1 --xunit-output xunit_output.xml x86_64-linux/libadalang-test/results/new/
    - cp xunit_output.xml $CI_PROJECT_DIR

  artifacts:
    paths:
      - xunit_output.xml
    reports:
      junit: xunit_output.xml

###########
# PACKAGE #
###########

# This job uploads the package to the package registry.
# This is launched on a push on the master branch.
# We put this in the "test" stage so that it gets triggered systematically
# after a push on the main branch, not waiting for tests to pass.
package:
  services:
     - image:libadalang
     - cpu:8
     - mem:16
  stage: stage2
  rules:
     # This triggers only after a push on the master branch, or from an upstream pipeline
     - if: ($CI_PIPELINE_SOURCE == "pipeline" || $CI_PIPELINE_SOURCE == "push") && $CI_COMMIT_BRANCH == "master"
  script:
    - export PATH=/it/e3/bin:$PATH

    # Upload the package
    - git clone $CI_FRAGMENTS_GIT
    - GITLAB_TOKEN=$GITLAB_RW_TOKEN ./$CI_FRAGMENTS/upload_generic_package $CI_PROJECT_PATH $PACKAGE