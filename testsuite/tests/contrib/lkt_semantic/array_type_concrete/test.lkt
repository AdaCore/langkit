val i: Int = 1
val a1 = [i, 2, 3]
val b1 = [2, 3, i]

val s: String = "str1"
val a2 = [s, "str2"]

fun foo(): Int = 1
val a3 = [foo(), 2, 3]
val b3 = [2, 3, foo()]

fun bar(): String = "str1"
val a4 = [bar(), "str2", "str3"]
val b4 = ["str2", "str3", bar()]

# Invalid expression since foo() and bar() have different types
@invalid val a5 = [foo(), bar()]
@invalid val a6 = [1, '2', "3", foo(), bar()]

val a7 = [[foo(), 2, 3]]
val a8 = [[[[[foo(), 2, 3]]]]]
val b7 = [[2, 3, foo()]]
val b8 = [[[[[2, 3, foo()]]]]]

val a9 = [[foo(), 2], []]
val a10 = [[foo(), 2], [1, 2]]
val b9 = [[2], [foo()]]
val b10 = [[2], [1, 2, foo()]]

# Nested arrays have different types
@invalid val a11 = [[bar(), "2"], [1, 2]]

# TODO: fix type resolution of generic CallExpr::
#
#   generic [T] fun identity(self: T): T = self
#   val a12 = [i, identity(15)]
