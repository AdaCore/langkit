@spacing(alphanumericals, alphanumericals)
lexer foo_lexer {

    @text whitespace <- p"[ \n\r\t]+"

    family alphanumericals {
        @text def <- "def"
    }

    @text var <- "var"

    family alphanumericals {
        @text error <- "error"
        @text example <- "example"
        @text null_tok <- "null"
    }

    @text comma <- ","
    @text dot <- "."
    @text semicolon <- ";"
    @text l_par <- "("
    @text r_par <- ")"
    @text l_brace <- "{"
    @text r_brace <- "}"
    @text equal <- "="
    @text plus <- "+"
    @text minus <- "-"
    @text less_than <- "<"

    family alphanumericals {
        @text number <- p"[0-9]+"
        @symbol identifier <- p"[a-zA-Z_][a-zA-Z0-9_]*"
    }

    @text string <- p"\"[^\"]*\""
    @newline_after @text comment <- p"#(.?)+"
}
grammar foo_grammar {
    @main_rule main_rule <- Sequence+(node)
    node <- or(example | null_node)
    example <- Example("example")
    null_node <- NullNode("null")

}

@root_node class FooNode {

    @export fun count (seq : Array[Example]): Int = seq.length
}

class Example : FooNode {
}

## This list node can contain one of the following nodes:
##
## * ${node_name(T.Example)}
## * ${node_name(T.NullNode)}
class Sequence : ASTList[FooNode] {

    @export fun all_items (): Array[FooNode] = self.map((i) => i)

    @export fun example_items (): Array[Example] = self.filter_map(
        (i) => i.to[Example]!, (i) => i isa Example
    )
}

class NullNode : FooNode {
}
