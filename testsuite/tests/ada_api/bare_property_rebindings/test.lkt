# Test in the public Ada API that a property declared to return a bare node
# called with an entity with rebindings returns an entity with the same
# rebindings and a coherent safety net. The code in the test used to raise
# a `Stale_Reference` exception.

import lexer_example

@with_lexer(foo_lexer)
grammar foo_grammar {
    @main_rule main_rule <- list*(example)
    example <- Example(@Example)
}

@abstract
class FooNode implements Node[FooNode] {
}

class Example: FooNode implements TokenNode {
    @exported
    fun rebind(
        from_node: Entity[FooNode],
        to_node: Entity[FooNode]
    ): Entity[Example] = {
        val rbdng = self.info.rebindings.append_rebinding(
            from_node.children_env, to_node.children_env
        );
        val e_info = EntityInfo(
            md=self.info.md, rebindings=rbdng, from_rebound=false
        );

        Entity[Example](node=node, info=e_info)
    }

    @exported
    fun foo(): Example = node

    env_spec {
        add_env()
    }
}

