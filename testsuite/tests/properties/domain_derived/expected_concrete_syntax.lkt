import lexer_example
grammar foo_grammar {
    name <- Name(@identifier)
    @main_rule main_rule <- list+(or(Definition("def" name) | name), ",")

}

@root_node class FooNode {
}

class Definition : FooNode {
    @parse_field name : Name
}

class Name : FooNode {
    ref_var : LogicVar

    @export fun resolve (): Bool =
    %domain(node.ref_var, node.node_env().get(node).map((d) => d.as[Definition])).solve()

    @export fun definition (): Definition =
    node.ref_var.get_value().as[Definition]
}

struct EnvAssoc {
    key : Symbol
    value : FooNode
    dest_env : LexicalEnv
    metadata : Metadata
}
