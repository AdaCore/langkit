@spacing("alphanumericals", "alphanumericals")
lexer foo_lexer {

    @text whitespace <- p"[ \n\r\t]+"
    @family("alphanumericals") @text def <- "def"
    @text var <- "var"
    @family("alphanumericals") @text error <- "error"
    @family("alphanumericals") @text example <- "example"
    @family("alphanumericals") @text null_tok <- "null"
    @text comma <- ","
    @text dot <- "."
    @text semicolon <- ";"
    @text l_par <- "("
    @text r_par <- ")"
    @text l_brace <- "{"
    @text r_brace <- "}"
    @text equal <- "="
    @text plus <- "+"
    @text minus <- "-"
    @text less_than <- "<"
    @family("alphanumericals") @text number <- p"[0-9]+"
    @family("alphanumericals") @symbol identifier <- p"[a-zA-Z_][a-zA-Z0-9_]*"
    @text string <- p"\"[^\"]*\""
    @newline_after @text comment <- p"#(.?)+"

}
grammar foo_grammar {
    @main_rule main_rule <- ASTList[Def]+(def_rule)
    name <- Name(@identifier)
    def_rule <- Def(
        "def"
        name ?pick("(" ASTList[Name]+(name, ",") ")") "=" expr
    )
    expr <- or(
        | Plus(expr "+" expr)
        | ParentExpr("(" expr ")")
        | Ref(name)
        | Literal(@number)
    )

}

@root_node class FooNode {
}

class Def : FooNode {
    @parse_field name : Name
    @parse_field args : ASTList[Name]
    @parse_field expr : Expr
}

@abstract class Expr : FooNode {
}

class Literal : Expr {
}

class ParentExpr : Expr {
    @parse_field expr : Expr
}

class Plus : Expr {
    @parse_field lhs : Expr
    @parse_field rhs : Expr
}

class Ref : Expr {
    @parse_field name : Name
}

class Name : FooNode {
}
