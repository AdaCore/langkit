import lexer_example

@with_lexer(foo_lexer)
grammar foo_grammar {
    @main_rule main_rule <- list+(decl)
    decl <- Decl(
        HasPlus("+") Name(@identifier) "(" ref_list ")"
    )
    ref_list <- list*(ref)
    ref <- Ref(Name(@identifier))
}

@abstract class FooNode implements Node[FooNode] {
    @export fun b_set(): Bool = self.info.md.b
}

class Decl: FooNode {
    @parse_field has_plus: HasPlus
    @parse_field name: Name
    @parse_field items: ASTList[FooNode, Ref]

    @export fun entity_items(): Array[Entity[Ref]] =
    node.as_entity.items.map((i) => i)

    env_spec {
        add_to_env_kv(
            node.name.symbol, node, metadata=Metadata(b=node.has_plus.as_bool())
        )
    }
}

@qualifier enum class HasPlus: FooNode {
}

class Name: FooNode implements TokenNode {
}

class Ref: FooNode {
    @parse_field name: Name

    @export fun decl(): Entity[Decl] =
    node.children_env().get(node.name)?[0].as![Decl]
}

@metadata struct Metadata {
    @use_in_equality b: Bool
}
