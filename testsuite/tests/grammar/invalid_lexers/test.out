== bad_rule_1.lkt ==
bad_rule_1.lkt:4:5: error: Unexpected declaration in lexer
4 |     lexer bar_lexer {
  |     ^


== case_1.lkt ==
case_1.lkt:5:11: error: Expected 'discard', got Number
5 |     match 1 {
  |           ^


== case_2.lkt ==
case_2.lkt:5:5: error: Invalid case rule topology
5 |     match p"foo" {
  |     ^


== case_3.lkt ==
case_3.lkt:5:5: error: Invalid case rule topology
5 |     match p"foo" {
  |     ^


== case_4.lkt ==
case_4.lkt:5:5: error: Invalid case rule topology
5 |     match p"foo" {
  |     ^


== case_5.lkt ==
case_5.lkt:6:36: error: Unknown token: Bar
6 |         if previous_token is Foo | Bar then send(Foo, 3)
  |                                    ^^^


== case_6.lkt ==
case_6.lkt:7:24: error: Expected Number, got Identifier
7 |         else send(Foo, Foo)
  |                        ^^^


== case_7.lkt ==
case_7.lkt:7:19: error: Unknown token: Bar
7 |         else send(Bar, 3)
  |                   ^^^


== family_1.lkt ==
family_1.lkt:4:5: error: Only lexer rules allowed in family blocks
4 |     family keywords {
  |     ^


== foo.lkt ==
Code generation was successful

== or_1.lkt ==
or_1.lkt:4:19: error: exactly one matcher expected
4 |     Example <- or("example" "foo" | "bar")
  |                   ^^^^^^^^^^^^^^^


== or_2.lkt ==
or_2.lkt:4:43: error: Invalid lexing expression
4 |     Example <- or("example" | or ("foo" | /))
  |                                           ^


== pattern_1.lkt ==
pattern_1.lkt:4:16: error: unbalanced square bracket
4 |     Example <- p"["
  |                ^^^^


== pattern_2.lkt ==
pattern_2.lkt:4:16: error: unknown pattern: no_such_pattern
4 |     Example <- p"{no_such_pattern}"
  |                ^^^^^^^^^^^^^^^^^^^^


== pattern_3.lkt ==
pattern_3.lkt:6:16: error: infinite recursion in pat1
6 |     Example <- p"{pat1}"
  |                ^^^^^^^^^


== pattern_4.lkt ==
pattern_4.lkt:4:5: error: unbalanced square bracket
4 |     val pat = p"["
  |     ^^^^^^^^^^^^^^


== pattern_5.lkt ==
pattern_5.lkt:6:12: error: nothing to repeat
6 |     Ex3 <- p"+"
  |            ^^^^


== pattern_6.lkt ==
pattern_6.lkt:4:16: error: unbalanced parentheses
4 |     Example <- p"a)"
  |                ^^^^^


== pattern_7.lkt ==
pattern_7.lkt:5:5: error: Duplicate pattern name
5 |     val pat = p"example"
  |     ^^^^^^^^^^^^^^^^^^^^


== pattern_8.lkt ==
pattern_8.lkt:4:14: error: Types are not allowed in lexer declarations
4 |     val pat: Int = p"example"
  |              ^^^


== pattern_9.lkt ==
pattern_9.lkt:4:15: error: static pattern value expected
4 |     val pat = 1
  |               ^


== rule_1.lkt ==
rule_1.lkt:4:5: error: Termination is a reserved token name
4 |     Termination <- "def"
  |     ^^^^^^^^^^^^^^^^^^^^


== rule_2.lkt ==
rule_2.lkt:4:5: error: LexingFailure is a reserved token name
4 |     LexingFailure <- "example"
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^


== spacing_1.lkt ==
spacing_1.lkt:4:6: error: Missing "with" argument
4 |     @unparsing_spacing() family ids {
  |      ^^^^^^^^^^^^^^^^^


== spacing_2.lkt ==
spacing_2.lkt:4:29: error: Token family name expected
4 |     @unparsing_spacing(with=1)
  |                             ^


== spacing_3.lkt ==
spacing_3.lkt:4:29: error: Unknown token family: foo
4 |     @unparsing_spacing(with=foo)
  |                             ^^^


== token_action_1.lkt ==
token_action_1.lkt:4:6: error: Arguments required for this annotation
4 |     @text Example <- "example"
  |      ^^^^


== token_action_2.lkt ==
token_action_2.lkt:4:6: error: No positional argument allowed
4 |     @text(1) Example <- "example"
  |      ^^^^


== token_action_3.lkt ==
token_action_3.lkt:4:11: error: Invalid argument
4 |     @text(bar=true) Example <- "example"
  |           ^^^


== token_action_4.lkt ==
token_action_4.lkt:4:31: error: static bool value expected
4 |     @text(start_ignore_layout=1) Example <- "example"
  |                               ^


== token_action_5.lkt ==
token_action_5.lkt:4:5: error: At most one token action allowed
4 |     @ignored @text() Example <- "example"
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


== token_action_6.lkt ==
token_action_6.lkt:4:11: error: Invalid argument
4 |     @text(comment=false) Example <- "example"
  |           ^^^^^^^


== token_matcher.lkt ==
token_matcher.lkt:4:16: error: Invalid lexing expression
4 |     Example <- /
  |                ^


== token_name.lkt ==
token_name.lkt:5:5: error: Duplicate token name
5 |     Example <- "null"
  |     ^^^^^^^^^^^^^^^^^


lkt_compile: Done
