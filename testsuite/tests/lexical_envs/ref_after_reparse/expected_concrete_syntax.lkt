@spacing(alphanumericals, alphanumericals)
lexer foo_lexer {

    @text whitespace <- p"[ \n\r\t]+"

    family alphanumericals {
        @text def <- "def"
    }

    @text var <- "var"

    family alphanumericals {
        @text error <- "error"
        @text example <- "example"
        @text null_tok <- "null"
    }

    @text comma <- ","
    @text dot <- "."
    @text semicolon <- ";"
    @text l_par <- "("
    @text r_par <- ")"
    @text l_brace <- "{"
    @text r_brace <- "}"
    @text equal <- "="
    @text plus <- "+"
    @text minus <- "-"
    @text less_than <- "<"

    family alphanumericals {
        @text number <- p"[0-9]+"
        @symbol identifier <- p"[a-zA-Z_][a-zA-Z0-9_]*"
    }

    @text string <- p"\"[^\"]*\""
    @newline_after @text comment <- p"#(.?)+"
}
grammar foo_grammar {
    @main_rule main_rule <- ASTList[Block]+(block)
    name <- Name(@identifier)
    block <- Block(
        name decl_list "{" using_list ref_list "}"
    )
    decl_list <- pick("(" ASTList[Decl]*(decl) ")")
    using_list <- pick("(" ASTList[Using]*(using) ")")
    ref_list <- ASTList[Ref]*(ref)
    decl <- Decl(name)
    using <- Using(name)
    ref <- Ref(name)

}

@root_node class FooNode {
}

class Block : FooNode {
    @parse_field name : Name
    @parse_field decls : ASTList[Decl]
    @parse_field usings : ASTList[Using]
    @parse_field refs : ASTList[Ref]
}

class Decl : FooNode {
    @parse_field name : Name
}

class Name : FooNode {

    fun ambiant_entity (): FooNode = env.get(node)?(0)

    fun designated_env (): LexicalEnv =
    node.unit.root.node_env.get(node)?(0).children_env

    @export fun entity (): FooNode = {
        bind env = node.node_env;

        node.ambiant_entity
    }
}

class Ref : FooNode {
    @parse_field name : Name

    @export fun entity (): FooNode = node.as_entity.name.entity
}

class Using : FooNode {
    @parse_field name : Name
}

struct EnvAssoc {
    key : SymbolType
    value : FooNode
    dest_env : LexicalEnv
    metadata : Metadata
}
