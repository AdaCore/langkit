== main.adb -c config.json example.txt ==
var v1: Int = 2;
null var v2: Int = 0;

def f1(a: Int, b: Int=0): Int
{
    print(a, b);
    very_long_call(
        aaaaaaaaa,
        bbbbbbb,
        cccccccc,
        dddddddd,
        eeeeeee,
        fffffffff,
        ggggggggg,
        hhhhhhhh
    );
    a + b + 1;

    n1, n2, n2 = foo(a, b);
}

def f2(a: Int, ): Int
{
    a + 1;
}

== main.adb -c config.json param_spec.txt -r param_spec ==
a: Int=2

== invalid_config.adb ==
== Errors outside of templates ==

# no_such_file.json
    cannot read no_such_file.json
# invalid_syntax.json
    1:2: string expected
# missing_node_configs.json
    missing "node_configs" key
# invalid_type_name.json
    invalid node name: NoSuchNode
# invalid_node_name.json
    invalid node name: Int
# invalid_member_name.json
    invalid field for VarDecl: f_no_such_field
# invalid_field_name.json
    parent is not a syntax field for VarDecl
# invalid_node_sep.json
    VarDecl is not a list node, invalid "sep" configuration
# invalid_leading_sep.json
    Name.list does not allow trailing separators: invalid "trailing_sep" configuration
# invalid_trailing_sep.json
    ParamSpec.list does not allow leading separators: invalid "leading_sep" configuration
# invalid_max_empty_lines_1.json
    invalid "max_empty lines" entry: natural integer expected
# invalid_max_empty_lines_2.json
    invalid "max_empty lines" entry: natural integer expected
# invalid_flush_before_children_1.json
    VarDecl is not a list node, invalid "flush_before_children" configuration
# invalid_flush_before_children_2.json
    invalid "flush_before_children" entry for Decl.list: boolean expected

== Decoding errors in templates ==

# invalid_template.json
    template for VarDecl.f_name: invalid template JSON node: JSON_INT_TYPE
# invalid_string_template.json
    template for VarDecl.f_name: invalid string template document kind: foo
# invalid_kind_template.json
    template for VarDecl.f_name: missing "kind" key
# invalid_kind_template2.json
    template for VarDecl.f_name: invalid "kind": JSON_INT_TYPE
# invalid_kind_template3.json
    template for VarDecl.f_name: invalid template document kind: foo
# invalid_whitespace.json
    template for VarDecl.f_name: invalid whitespace length: JSON_STRING_TYPE
# invalid_whitespace2.json
    template for VarDecl.f_name: missing "length" key
# invalid_align.json
    template for VarDecl.f_name: missing "width" key for align
# invalid_align2.json
    template for VarDecl.f_name: invalid "width" key for align
# invalid_dedent.json
    template for VarDecl.f_name: missing "contents" key for dedent
# invalid_dedenttoroot.json
    template for VarDecl.f_name: missing "contents" key for dedentToRoot
# invalid_fill.json
    template for VarDecl.f_name: missing "document" key for fill
# invalid_group.json
    template for VarDecl.f_name: missing "document" key for group
# invalid_group2.json
    template for VarDecl.f_name: invalid group shouldBreak: JSON_INT_TYPE
# invalid_group3.json
    template for VarDecl.f_name: invalid group id: JSON_INT_TYPE
# invalid_group4.json
    template for VarDecl.f_name: duplicate group id: myGroup
# invalid_group5.json
    template for VarDecl.f_name: duplicate group id: myGroup
# invalid_group6.json
    VarDecl: group id myGroup in the "node" template is duplicated in the "Decl.f_name" template
# invalid_group7.json
    "sep" template for DeclList: duplicate group id: myGroup
# invalid_ifbreak.json
    template for VarDecl.f_name: missing "breakContents" key for ifBreak
# invalid_ifbreak2.json
    template for VarDecl.f_name: invalid group id: JSON_INT_TYPE
# invalid_ifbreak3.json
    template for VarDecl.f_name: undefined symbol: myGroup
# invalid_ifbreak4.json
    VarDecl: group id myGroup is referenced in the "Decl.f_name" template but not defined in the "node" template
# invalid_ifempty.json
    template for VarDecl.f_name: missing "else" key for ifEmpty
# invalid_ifempty2.json
    template for VarDecl.f_name: missing "then" key for ifEmpty
# invalid_ifempty3.json
    "node" template for VarDecl: "ifEmpty" is valid only in field templates
# invalid_ifkind.json
    "node" template for Addition: ifKind matcher "Number" has an inconsistent recurse structure
# invalid_ifkind2.json
    "node" template for Addition: missing field f_rhs
    Expected:
    * field f_lhs
    * token "+"
    * field f_rhs
# invalid_ifkind3.json
    "node" template for Addition: missing "field" key for ifKind
# invalid_ifkind4.json
    "node" template for Addition: missing "matchers" key for ifKind
# invalid_ifkind5.json
    "node" template for Addition: missing "default" key for ifKind
# invalid_ifkind6.json
    "node" template for Addition: invalid "field" key kind for ifKind: found JSON_ARRAY_TYPE; expected JSON_STRING_TYPE
# invalid_ifkind7.json
    "node" template for Addition: invalid "matchers" key kind for ifKind: found JSON_OBJECT_TYPE; expected JSON_ARRAY_TYPE
# invalid_ifkind8.json
    "node" template for Addition: invalid string template document kind: invalid
# invalid_ifkind9.json
    invalid field for Addition: f_invalid
# invalid_ifkind10.json
    "sep" template for FooNodeList: "ifKind" is valid in node templates and field templates only
# invalid_ifkind11.json
    template for VarDecl.f_name: invalid "field" key for ifKind
# invalid_indent.json
    template for VarDecl.f_name: missing "contents" key for indent
# invalid_markasroot.json
    template for VarDecl.f_name: missing "contents" key for markAsRoot
# invalid_innerroot.json
    template for VarDecl.f_name: missing "contents" key for innerRoot
# invalid_continuationlineindent.json
    template for VarDecl.f_name: missing "contents" key for continuationLineIndent
# invalid_recurse_field.json
    template for VarDecl.f_name: recurse_field cannot appear in a "recurse" template
# invalid_recurse_field2.json
    "node" template for ExprStmt: missing "field" key for recurse_field
# invalid_recurse_field3.json
    "node" template for ExprStmt: invalid recurse_field field: JSON_NULL_TYPE
# invalid_recurse_field4.json
    "node" template for Decl: text/recurse_field are valid for concrete nodes only
# invalid_recurse_field5.json
    "node" template for StmtList: text/recurse_field are not valid for list nodes
# invalid_recurse_field6.json
    invalid field for ExprStmt: f_foo
# invalid_recurse_field7.json
    "node" template for Name: text/recurse_field are not valid for token nodes
# invalid_recurse_field8.json
    "node" template for VarDecl: using "recurse"/"recurse_flatten" in the same template as "recurse_field"/"text" is invalid
# invalid_recurse_field9.json
    "node" template for VarDecl: token "var" expected, got field f_name
    Expected:
    * field f_is_null
    * token "var"
    * field f_name
    * token ":"
    * field f_type_expr
    * token "="
    * field f_value
    * token ";"
# invalid_recurse_field10.json
    "node" template for VarDecl: missing token ";"
    Expected:
    * field f_is_null
    * token "var"
    * field f_name
    * token ":"
    * field f_type_expr
    * token "="
    * field f_value
    * token ";"
# invalid_recurse_field11.json
    "node" template for VarDecl: unexpected extra template item: token "def"
    Expected:
    * field f_is_null
    * token "var"
    * field f_name
    * token ":"
    * field f_type_expr
    * token "="
    * field f_value
    * token ";"
# invalid_recurse_flatten.json
    template for VarDecl.f_name: invalid recurse_flatten if: JSON_NULL_TYPE
# invalid_recurse_flatten2.json
    template for VarDecl.f_name: invalid item in recurse_flatten if: JSON_NULL_TYPE
# invalid_recurse_flatten3.json
    template for VarDecl.f_name: invalid node type in recurse_flatten if: NoSuchNode
# invalid_table_join.json
    FooNode has no p_no_such_predicate member
# invalid_table_join2.json
    parent must return a boolean
# invalid_table_join3.json
    p_table_join_bad_args must take no argument
# invalid_table_join4.json
    p_table_join_bad_rtype must return a boolean
# invalid_table_join5.json
    f_name is not a property for Decl
# invalid_bubble_up.json
    template for VarDecl.f_name: invalid bubbleUpLeadingTrivias: JSON_INT_TYPE

== Invalid templates (too many/few "recurse") ==

# recurse_in_field_too_many.json
    template for CallArg.f_name: unexpected extra template item: recurse
    Expected:
    * recurse
    * token "="
# recurse_list_too_few.json
    "sep" template for StmtList: recursion is missing
# recurse_list_too_many.json
    "sep" template for StmtList: too many recursions
# recurse_line.json
    "sep" template for StmtList: recursion is missing
# recurse_whitespace.json
    "sep" template for StmtList: recursion is missing
# recurse_indent_too_few.json
    "sep" template for StmtList: recursion is missing
# recurse_indent_too_many.json
    "sep" template for StmtList: too many recursions
# recurse_if_empty.json
    template for VarDecl.f_name: ifEmpty alternatives have inconsistent recurse structure

== Node config completeness ==

# root_node.json
    Success
# missing_nodes.json
    missing node config for AnnotatedDecl
missing node config for PlusBlock
missing node config for LabeledStmts.list
missing node config for Stmt.list
missing node config for AssignStmt

Done.

== commands.adb ==
== cmd_align.json ==

{
  "command": {
    "alignContents": {
      "id": 2,
      "kind": "list",
      "list": [
        {
          "kind": "text",
          "text": "var i:Int=0;"
        }
      ]
    },
    "alignData": {
      "kind": "width",
      "n": 2
    },
    "command": "align"
  },
  "id": 1,
  "kind": "command"
}

== cmd_align2.json ==

{
  "command": {
    "alignContents": {
      "id": 2,
      "kind": "list",
      "list": [
        {
          "id": 3,
          "kind": "text",
          "text": "var i:Int=0;"
        }
      ]
    },
    "alignData": {
      "kind": "text",
      "t": "  "
    },
    "command": "align"
  },
  "id": 1,
  "kind": "command"
}

== cmd_breakparent.json ==

{
  "id": 1,
  "kind": "list",
  "list": [
    {
      "command": {
        "command": "breakParent"
      },
      "id": 2,
      "kind": "command"
    },
    {
      "id": 3,
      "kind": "text",
      "text": "var i:Int=0;"
    }
  ]
}

== cmd_dedent.json ==

{
  "command": {
    "alignContents": {
      "id": 2,
      "kind": "list",
      "list": [
        {
          "command": {
            "command": "line",
            "hard": false,
            "literal": false,
            "soft": false
          },
          "id": 3,
          "kind": "command"
        },
        {
          "id": 4,
          "kind": "text",
          "text": "var i:Int=0;"
        }
      ]
    },
    "alignData": {
      "kind": "dedent"
    },
    "command": "align"
  },
  "id": 1,
  "kind": "command"
}

== cmd_dedenttoroot.json ==

{
  "command": {
    "alignContents": {
      "id": 2,
      "kind": "list",
      "list": [
        {
          "command": {
            "command": "line",
            "hard": false,
            "literal": false,
            "soft": false
          },
          "id": 3,
          "kind": "command"
        },
        {
          "id": 4,
          "kind": "text",
          "text": "var i:Int=0;"
        }
      ]
    },
    "alignData": {
      "kind": "dedentToRoot"
    },
    "command": "align"
  },
  "id": 1,
  "kind": "command"
}

== cmd_emptytablesep.json ==

{
  "command": {
    "breakParents": true,
    "command": "alignmentTable",
    "elements": [
      [
        {
          "id": 2,
          "kind": "list",
          "list": [
            {
              "id": 3,
              "kind": "text",
              "text": "var"
            },
            {
              "id": 4,
              "kind": "text",
              "text": " "
            },
            {
              "id": 5,
              "kind": "text",
              "text": "v1"
            },
            {
              "id": 6,
              "kind": "text",
              "text": " "
            }
          ]
        },
        {
          "id": 7,
          "kind": "list",
          "list": [
            {
              "id": 8,
              "kind": "text",
              "text": ":"
            },
            {
              "id": 9,
              "kind": "text",
              "text": " "
            },
            {
              "id": 10,
              "kind": "text",
              "text": "T"
            },
            {
              "id": 11,
              "kind": "text",
              "text": " "
            },
            {
              "id": 12,
              "kind": "text",
              "text": "="
            },
            {
              "id": 13,
              "kind": "text",
              "text": " "
            },
            {
              "id": 14,
              "kind": "text",
              "text": "0"
            },
            {
              "id": 15,
              "kind": "text",
              "text": ";"
            }
          ]
        }
      ],
      [
        {
          "id": 16,
          "kind": "list",
          "list": [
            {
              "id": 17,
              "kind": "text",
              "text": "var"
            },
            {
              "id": 18,
              "kind": "text",
              "text": " "
            },
            {
              "id": 19,
              "kind": "text",
              "text": "v2"
            },
            {
              "id": 20,
              "kind": "text",
              "text": " "
            }
          ]
        },
        {
          "id": 21,
          "kind": "list",
          "list": [
            {
              "id": 22,
              "kind": "text",
              "text": ":"
            },
            {
              "id": 23,
              "kind": "text",
              "text": " "
            },
            {
              "id": 24,
              "kind": "text",
              "text": "T"
            },
            {
              "id": 25,
              "kind": "text",
              "text": " "
            },
            {
              "id": 26,
              "kind": "text",
              "text": "="
            },
            {
              "id": 27,
              "kind": "text",
              "text": " "
            },
            {
              "id": 28,
              "kind": "text",
              "text": "1"
            },
            {
              "id": 29,
              "kind": "text",
              "text": ";"
            }
          ]
        }
      ]
    ],
    "mustBreak": true,
    "separators": [
      [
        {
          "command": {
            "command": "alignmentTableSeparator",
            "text": ""
          },
          "id": 30,
          "kind": "command"
        }
      ],
      [
        {
          "command": {
            "command": "alignmentTableSeparator",
            "text": ""
          },
          "id": 31,
          "kind": "command"
        }
      ]
    ]
  },
  "id": 1,
  "kind": "command"
}

== cmd_fill.json ==

{
  "command": {
    "command": "fill",
    "parts": {
      "id": 2,
      "kind": "list",
      "list": [
        {
          "command": {
            "command": "line",
            "hard": false,
            "literal": false,
            "soft": false
          },
          "id": 3,
          "kind": "command"
        },
        {
          "id": 4,
          "kind": "text",
          "text": "var i:Int=0;"
        },
        {
          "command": {
            "command": "line",
            "hard": false,
            "literal": false,
            "soft": false
          },
          "id": 5,
          "kind": "command"
        }
      ]
    }
  },
  "id": 1,
  "kind": "command"
}

== cmd_no_flush_line_breaks.json ==

{
  "id": 1,
  "kind": "list",
  "list": [
    {
      "id": 2,
      "kind": "text",
      "text": "var v:T="
    },
    {
      "command": {
        "break": true,
        "command": "group",
        "expandedStates": null,
        "groupContents": {
          "id": 4,
          "kind": "list",
          "list": [
            {
              "id": 5,
              "kind": "list",
              "list": [
                {
                  "command": {
                    "command": "line",
                    "hard": true,
                    "literal": false,
                    "soft": false
                  },
                  "id": 6,
                  "kind": "command"
                },
                {
                  "command": {
                    "command": "breakParent"
                  },
                  "id": 7,
                  "kind": "command"
                }
              ]
            },
            {
              "id": 8,
              "kind": "list",
              "list": [
                {
                  "command": {
                    "command": "line",
                    "hard": true,
                    "literal": false,
                    "soft": false
                  },
                  "id": 9,
                  "kind": "command"
                },
                {
                  "command": {
                    "command": "breakParent"
                  },
                  "id": 10,
                  "kind": "command"
                }
              ]
            },
            {
              "id": 11,
              "kind": "text",
              "text": "0"
            }
          ]
        }
      },
      "id": 3,
      "kind": "command"
    },
    {
      "id": 12,
      "kind": "text",
      "text": ";"
    }
  ]
}

== cmd_flush_line_breaks.json ==

{
  "id": 1,
  "kind": "list",
  "list": [
    {
      "id": 2,
      "kind": "text",
      "text": "var v:T="
    },
    {
      "id": 3,
      "kind": "list",
      "list": [
        {
          "command": {
            "command": "line",
            "hard": true,
            "literal": false,
            "soft": false
          },
          "id": 4,
          "kind": "command"
        },
        {
          "command": {
            "command": "breakParent"
          },
          "id": 5,
          "kind": "command"
        }
      ]
    },
    {
      "id": 6,
      "kind": "list",
      "list": [
        {
          "command": {
            "command": "line",
            "hard": true,
            "literal": false,
            "soft": false
          },
          "id": 7,
          "kind": "command"
        },
        {
          "command": {
            "command": "breakParent"
          },
          "id": 8,
          "kind": "command"
        }
      ]
    },
    {
      "command": {
        "break": false,
        "command": "group",
        "expandedStates": null,
        "groupContents": {
          "id": 10,
          "kind": "text",
          "text": "0"
        }
      },
      "id": 9,
      "kind": "command"
    },
    {
      "id": 11,
      "kind": "text",
      "text": ";"
    }
  ]
}

== cmd_group.json ==

{
  "id": 1,
  "kind": "list",
  "list": [
    {
      "command": {
        "break": false,
        "command": "group",
        "expandedStates": null,
        "groupContents": {
          "command": {
            "command": "line",
            "hard": false,
            "literal": false,
            "soft": false
          },
          "id": 3,
          "kind": "command"
        }
      },
      "id": 2,
      "kind": "command"
    },
    {
      "id": 4,
      "kind": "text",
      "text": "var i:Int=0;"
    },
    {
      "command": {
        "break": true,
        "command": "group",
        "expandedStates": null,
        "groupContents": {
          "command": {
            "command": "line",
            "hard": false,
            "literal": false,
            "soft": false
          },
          "id": 6,
          "kind": "command"
        }
      },
      "id": 5,
      "kind": "command"
    }
  ]
}

== cmd_group_id.json ==

{
  "id": 1,
  "kind": "list",
  "list": [
    {
      "command": {
        "break": false,
        "command": "group",
        "expandedStates": null,
        "groupContents": {
          "command": {
            "command": "line",
            "hard": false,
            "literal": false,
            "soft": false
          },
          "id": 4,
          "kind": "command"
        },
        "id": 3
      },
      "id": 2,
      "kind": "command"
    },
    {
      "id": 5,
      "kind": "text",
      "text": "var v1:T=0;"
    },
    {
      "command": {
        "break": true,
        "command": "group",
        "expandedStates": null,
        "groupContents": {
          "command": {
            "command": "line",
            "hard": false,
            "literal": false,
            "soft": false
          },
          "id": 7,
          "kind": "command"
        }
      },
      "id": 6,
      "kind": "command"
    },
    {
      "command": {
        "breakContents": {
          "command": {
            "command": "line",
            "hard": false,
            "literal": false,
            "soft": false
          },
          "id": 9,
          "kind": "command"
        },
        "command": "ifBreak",
        "flatContents": {
          "command": {
            "command": "line",
            "hard": false,
            "literal": false,
            "soft": false
          },
          "id": 10,
          "kind": "command"
        },
        "ifBreakGroupId": 3
      },
      "id": 8,
      "kind": "command"
    },
    {
      "command": {
        "break": false,
        "command": "group",
        "expandedStates": null,
        "groupContents": {
          "command": {
            "command": "line",
            "hard": false,
            "literal": false,
            "soft": false
          },
          "id": 13,
          "kind": "command"
        },
        "id": 12
      },
      "id": 11,
      "kind": "command"
    },
    {
      "id": 14,
      "kind": "text",
      "text": "var v2:T=1;"
    },
    {
      "command": {
        "break": true,
        "command": "group",
        "expandedStates": null,
        "groupContents": {
          "command": {
            "command": "line",
            "hard": false,
            "literal": false,
            "soft": false
          },
          "id": 16,
          "kind": "command"
        }
      },
      "id": 15,
      "kind": "command"
    },
    {
      "command": {
        "breakContents": {
          "command": {
            "command": "line",
            "hard": false,
            "literal": false,
            "soft": false
          },
          "id": 18,
          "kind": "command"
        },
        "command": "ifBreak",
        "flatContents": {
          "command": {
            "command": "line",
            "hard": false,
            "literal": false,
            "soft": false
          },
          "id": 19,
          "kind": "command"
        },
        "ifBreakGroupId": 12
      },
      "id": 17,
      "kind": "command"
    }
  ]
}

== cmd_group_id2.json ==

{
  "id": 1,
  "kind": "list",
  "list": [
    {
      "command": {
        "break": false,
        "command": "group",
        "expandedStates": null,
        "groupContents": {
          "id": 4,
          "kind": "list",
          "list": [
          ]
        },
        "id": 3
      },
      "id": 2,
      "kind": "command"
    },
    {
      "id": 5,
      "kind": "text",
      "text": "var"
    },
    {
      "command": {
        "breakContents": {
          "id": 7,
          "kind": "list",
          "list": [
            {
              "id": 8,
              "kind": "text",
              "text": " v1"
            }
          ]
        },
        "command": "ifBreak",
        "flatContents": {
          "id": 9,
          "kind": "list",
          "list": [
            {
              "id": 10,
              "kind": "text",
              "text": " v1"
            }
          ]
        },
        "ifBreakGroupId": 3
      },
      "id": 6,
      "kind": "command"
    },
    {
      "id": 11,
      "kind": "text",
      "text": ":"
    },
    {
      "command": {
        "breakContents": {
          "id": 13,
          "kind": "text",
          "text": "T"
        },
        "command": "ifBreak",
        "flatContents": {
          "id": 14,
          "kind": "text",
          "text": "T"
        },
        "ifBreakGroupId": 3
      },
      "id": 12,
      "kind": "command"
    },
    {
      "id": 15,
      "kind": "text",
      "text": "=0;"
    },
    {
      "command": {
        "break": false,
        "command": "group",
        "expandedStates": null,
        "groupContents": {
          "id": 18,
          "kind": "list",
          "list": [
          ]
        },
        "id": 17
      },
      "id": 16,
      "kind": "command"
    },
    {
      "id": 19,
      "kind": "text",
      "text": "var"
    },
    {
      "command": {
        "breakContents": {
          "id": 21,
          "kind": "list",
          "list": [
            {
              "id": 22,
              "kind": "text",
              "text": " v2"
            }
          ]
        },
        "command": "ifBreak",
        "flatContents": {
          "id": 23,
          "kind": "list",
          "list": [
            {
              "id": 24,
              "kind": "text",
              "text": " v2"
            }
          ]
        },
        "ifBreakGroupId": 17
      },
      "id": 20,
      "kind": "command"
    },
    {
      "id": 25,
      "kind": "text",
      "text": ":"
    },
    {
      "command": {
        "breakContents": {
          "id": 27,
          "kind": "text",
          "text": "T"
        },
        "command": "ifBreak",
        "flatContents": {
          "id": 28,
          "kind": "text",
          "text": "T"
        },
        "ifBreakGroupId": 17
      },
      "id": 26,
      "kind": "command"
    },
    {
      "id": 29,
      "kind": "text",
      "text": "=1;"
    }
  ]
}

== cmd_group_id3.json ==

{
  "id": 1,
  "kind": "list",
  "list": [
  ]
}

== cmd_hardline.json ==

{
  "id": 1,
  "kind": "list",
  "list": [
    {
      "id": 2,
      "kind": "list",
      "list": [
        {
          "command": {
            "command": "line",
            "hard": true,
            "literal": false,
            "soft": false
          },
          "id": 3,
          "kind": "command"
        },
        {
          "command": {
            "command": "breakParent"
          },
          "id": 4,
          "kind": "command"
        }
      ]
    },
    {
      "id": 5,
      "kind": "text",
      "text": "var i:Int=0;"
    }
  ]
}

== cmd_hardlinewithoutbreakparent.json ==

{
  "id": 1,
  "kind": "list",
  "list": [
    {
      "command": {
        "command": "line",
        "hard": true,
        "literal": false,
        "soft": false
      },
      "id": 2,
      "kind": "command"
    },
    {
      "id": 3,
      "kind": "text",
      "text": "var i:Int=0;"
    }
  ]
}

== cmd_ifbreak.json ==

{
  "id": 1,
  "kind": "list",
  "list": [
    {
      "command": {
        "command": "line",
        "hard": false,
        "literal": false,
        "soft": false
      },
      "id": 2,
      "kind": "command"
    },
    {
      "id": 3,
      "kind": "text",
      "text": "var i:Int=0;"
    },
    {
      "command": {
        "command": "line",
        "hard": false,
        "literal": false,
        "soft": false
      },
      "id": 4,
      "kind": "command"
    }
  ]
}

== cmd_ifempty.json ==

{
  "id": 1,
  "kind": "list",
  "list": [
    {
      "id": 2,
      "kind": "text",
      "text": "def f("
    },
    {
      "command": {
        "command": "line",
        "hard": false,
        "literal": false,
        "soft": true
      },
      "id": 3,
      "kind": "command"
    },
    {
      "id": 4,
      "kind": "text",
      "text": "):Int{i;}"
    }
  ]
}

== cmd_ifempty.json ==

{
  "id": 1,
  "kind": "list",
  "list": [
    {
      "id": 2,
      "kind": "text",
      "text": "def f("
    },
    {
      "command": {
        "command": "indent",
        "indentContents": {
          "id": 4,
          "kind": "list",
          "list": [
            {
              "id": 5,
              "kind": "list",
              "list": [
                {
                  "command": {
                    "command": "line",
                    "hard": true,
                    "literal": false,
                    "soft": false
                  },
                  "id": 6,
                  "kind": "command"
                },
                {
                  "command": {
                    "command": "breakParent"
                  },
                  "id": 7,
                  "kind": "command"
                }
              ]
            },
            {
              "id": 8,
              "kind": "text",
              "text": "i:Int"
            }
          ]
        }
      },
      "id": 3,
      "kind": "command"
    },
    {
      "id": 9,
      "kind": "list",
      "list": [
        {
          "command": {
            "command": "line",
            "hard": true,
            "literal": false,
            "soft": false
          },
          "id": 10,
          "kind": "command"
        },
        {
          "command": {
            "command": "breakParent"
          },
          "id": 11,
          "kind": "command"
        }
      ]
    },
    {
      "id": 12,
      "kind": "text",
      "text": "):Int{i;}"
    }
  ]
}

== cmd_ifkind.json ==

{
  "id": 1,
  "kind": "list",
  "list": [
    {
      "id": 2,
      "kind": "text",
      "text": "var i:Int="
    },
    {
      "command": {
        "break": true,
        "command": "group",
        "expandedStates": null,
        "groupContents": {
          "id": 4,
          "kind": "list",
          "list": [
            {
              "id": 5,
              "kind": "text",
              "text": "2"
            },
            {
              "id": 6,
              "kind": "list",
              "list": [
                {
                  "command": {
                    "command": "line",
                    "hard": true,
                    "literal": false,
                    "soft": false
                  },
                  "id": 7,
                  "kind": "command"
                },
                {
                  "command": {
                    "command": "breakParent"
                  },
                  "id": 8,
                  "kind": "command"
                }
              ]
            },
            {
              "id": 9,
              "kind": "text",
              "text": "+2"
            }
          ]
        }
      },
      "id": 3,
      "kind": "command"
    },
    {
      "id": 10,
      "kind": "text",
      "text": ";"
    }
  ]
}

== cmd_ifkind.json ==

{
  "id": 1,
  "kind": "list",
  "list": [
    {
      "id": 2,
      "kind": "text",
      "text": "var i:Int="
    },
    {
      "command": {
        "break": true,
        "command": "group",
        "expandedStates": null,
        "groupContents": {
          "id": 4,
          "kind": "list",
          "list": [
            {
              "id": 5,
              "kind": "text",
              "text": "2+"
            },
            {
              "id": 6,
              "kind": "list",
              "list": [
                {
                  "command": {
                    "command": "line",
                    "hard": true,
                    "literal": false,
                    "soft": false
                  },
                  "id": 7,
                  "kind": "command"
                },
                {
                  "command": {
                    "command": "breakParent"
                  },
                  "id": 8,
                  "kind": "command"
                }
              ]
            },
            {
              "id": 9,
              "kind": "text",
              "text": "j"
            }
          ]
        }
      },
      "id": 3,
      "kind": "command"
    },
    {
      "id": 10,
      "kind": "text",
      "text": ";"
    }
  ]
}

== cmd_ifkind2.json ==

{
  "id": 1,
  "kind": "list",
  "list": [
    {
      "id": 2,
      "kind": "text",
      "text": "var i:Int="
    },
    {
      "command": {
        "break": true,
        "command": "group",
        "expandedStates": null,
        "groupContents": {
          "id": 4,
          "kind": "list",
          "list": [
            {
              "id": 5,
              "kind": "text",
              "text": "2"
            },
            {
              "command": {
                "break": true,
                "command": "group",
                "expandedStates": null,
                "groupContents": {
                  "id": 7,
                  "kind": "list",
                  "list": [
                    {
                      "id": 8,
                      "kind": "text",
                      "text": "+"
                    },
                    {
                      "id": 9,
                      "kind": "list",
                      "list": [
                        {
                          "command": {
                            "command": "line",
                            "hard": true,
                            "literal": false,
                            "soft": false
                          },
                          "id": 10,
                          "kind": "command"
                        },
                        {
                          "command": {
                            "command": "breakParent"
                          },
                          "id": 11,
                          "kind": "command"
                        }
                      ]
                    },
                    {
                      "id": 12,
                      "kind": "text",
                      "text": "j"
                    }
                  ]
                }
              },
              "id": 6,
              "kind": "command"
            }
          ]
        }
      },
      "id": 3,
      "kind": "command"
    },
    {
      "id": 13,
      "kind": "text",
      "text": ";"
    }
  ]
}

== cmd_ifkind3.json ==

{
  "id": 1,
  "kind": "list",
  "list": [
    {
      "id": 2,
      "kind": "text",
      "text": "var i:Int="
    },
    {
      "command": {
        "break": false,
        "command": "group",
        "expandedStates": null,
        "groupContents": {
          "id": 4,
          "kind": "list",
          "list": [
            {
              "id": 5,
              "kind": "text",
              "text": "2 +j"
            }
          ]
        }
      },
      "id": 3,
      "kind": "command"
    },
    {
      "id": 6,
      "kind": "text",
      "text": ";"
    }
  ]
}

== cmd_ifkind4.json ==

{
  "id": 1,
  "kind": "list",
  "list": [
    {
      "id": 2,
      "kind": "text",
      "text": "var v:Int=f("
    },
    {
      "command": {
        "break": true,
        "command": "group",
        "expandedStates": null,
        "groupContents": {
          "id": 4,
          "kind": "list",
          "list": [
            {
              "id": 5,
              "kind": "list",
              "list": [
                {
                  "command": {
                    "command": "line",
                    "hard": true,
                    "literal": false,
                    "soft": false
                  },
                  "id": 6,
                  "kind": "command"
                },
                {
                  "command": {
                    "command": "breakParent"
                  },
                  "id": 7,
                  "kind": "command"
                }
              ]
            },
            {
              "id": 8,
              "kind": "text",
              "text": "1"
            }
          ]
        }
      },
      "id": 3,
      "kind": "command"
    },
    {
      "id": 9,
      "kind": "text",
      "text": ");"
    }
  ]
}

== cmd_ifkind5.json ==

{
  "id": 1,
  "kind": "list",
  "list": [
    {
      "id": 2,
      "kind": "text",
      "text": "var v:Int=f("
    },
    {
      "command": {
        "break": false,
        "command": "group",
        "expandedStates": null,
        "groupContents": {
          "id": 4,
          "kind": "list",
          "list": [
            {
              "id": 5,
              "kind": "text",
              "text": "  1"
            }
          ]
        }
      },
      "id": 3,
      "kind": "command"
    },
    {
      "id": 6,
      "kind": "text",
      "text": ");"
    }
  ]
}

== cmd_ifkind6.json ==

{
  "id": 1,
  "kind": "list",
  "list": [
    {
      "id": 2,
      "kind": "text",
      "text": "null"
    },
    {
      "id": 3,
      "kind": "list",
      "list": [
        {
          "command": {
            "command": "line",
            "hard": true,
            "literal": false,
            "soft": false
          },
          "id": 4,
          "kind": "command"
        },
        {
          "command": {
            "command": "breakParent"
          },
          "id": 5,
          "kind": "command"
        }
      ]
    },
    {
      "id": 6,
      "kind": "text",
      "text": "var v1:T=1; var v2:T=2;"
    }
  ]
}

== cmd_ifkind7.json ==

{
  "id": 1,
  "kind": "list",
  "list": [
    {
      "id": 2,
      "kind": "text",
      "text": "var v1:T= 1;var v2:T= 1+2;var v3:T=a.b;"
    }
  ]
}

== cmd_indent.json ==

{
  "command": {
    "command": "indent",
    "indentContents": {
      "id": 2,
      "kind": "list",
      "list": [
        {
          "command": {
            "command": "line",
            "hard": false,
            "literal": false,
            "soft": false
          },
          "id": 3,
          "kind": "command"
        },
        {
          "id": 4,
          "kind": "text",
          "text": "var i:Int=0;"
        }
      ]
    }
  },
  "id": 1,
  "kind": "command"
}

== cmd_line.json ==

{
  "id": 1,
  "kind": "list",
  "list": [
    {
      "command": {
        "command": "line",
        "hard": false,
        "literal": false,
        "soft": false
      },
      "id": 2,
      "kind": "command"
    },
    {
      "id": 3,
      "kind": "text",
      "text": "var i:Int=0;"
    }
  ]
}

== cmd_list.json ==

{
  "id": 1,
  "kind": "list",
  "list": [
    {
      "command": {
        "command": "line",
        "hard": false,
        "literal": false,
        "soft": false
      },
      "id": 2,
      "kind": "command"
    },
    {
      "id": 3,
      "kind": "text",
      "text": "var i:Int=0;"
    },
    {
      "command": {
        "command": "line",
        "hard": false,
        "literal": false,
        "soft": false
      },
      "id": 4,
      "kind": "command"
    }
  ]
}

== cmd_literalline.json ==

{
  "id": 1,
  "kind": "list",
  "list": [
    {
      "id": 2,
      "kind": "list",
      "list": [
        {
          "command": {
            "command": "line",
            "hard": false,
            "literal": true,
            "soft": false
          },
          "id": 3,
          "kind": "command"
        },
        {
          "command": {
            "command": "breakParent"
          },
          "id": 4,
          "kind": "command"
        }
      ]
    },
    {
      "id": 5,
      "kind": "text",
      "text": "var i:Int=0;"
    }
  ]
}

== cmd_markasroot.json ==

{
  "command": {
    "alignContents": {
      "id": 2,
      "kind": "list",
      "list": [
        {
          "command": {
            "command": "line",
            "hard": false,
            "literal": false,
            "soft": false
          },
          "id": 3,
          "kind": "command"
        },
        {
          "id": 4,
          "kind": "text",
          "text": "var i:Int=0;"
        }
      ]
    },
    "alignData": {
      "kind": "root"
    },
    "command": "align"
  },
  "id": 1,
  "kind": "command"
}

== cmd_innerroot.json ==

{
  "command": {
    "alignContents": {
      "id": 2,
      "kind": "list",
      "list": [
        {
          "command": {
            "command": "line",
            "hard": false,
            "literal": false,
            "soft": false
          },
          "id": 3,
          "kind": "command"
        },
        {
          "id": 4,
          "kind": "text",
          "text": "var i:Int=0;"
        }
      ]
    },
    "alignData": {
      "kind": "innerRoot"
    },
    "command": "align"
  },
  "id": 1,
  "kind": "command"
}

== cmd_continuationlineindent.json ==

{
  "command": {
    "alignContents": {
      "id": 2,
      "kind": "list",
      "list": [
        {
          "command": {
            "command": "line",
            "hard": false,
            "literal": false,
            "soft": false
          },
          "id": 3,
          "kind": "command"
        },
        {
          "id": 4,
          "kind": "text",
          "text": "var i:Int=0;"
        }
      ]
    },
    "alignData": {
      "kind": "continuationLineIndent"
    },
    "command": "align"
  },
  "id": 1,
  "kind": "command"
}

== cmd_recurse.json ==

{
  "id": 1,
  "kind": "list",
  "list": [
    {
      "id": 2,
      "kind": "text",
      "text": "var i:Int=0;"
    }
  ]
}

== cmd_recurse_in_field.json ==

{
  "id": 1,
  "kind": "list",
  "list": [
    {
      "id": 2,
      "kind": "text",
      "text": "var v:Int=f(a =  1);"
    }
  ]
}

== cmd_recurse_field.json ==

{
  "id": 1,
  "kind": "list",
  "list": [
    {
      "command": {
        "break": false,
        "command": "group",
        "expandedStates": null,
        "groupContents": {
          "id": 3,
          "kind": "list",
          "list": [
            {
              "id": 4,
              "kind": "text",
              "text": "var i:"
            }
          ]
        }
      },
      "id": 2,
      "kind": "command"
    },
    {
      "id": 5,
      "kind": "text",
      "text": "Int="
    },
    {
      "command": {
        "command": "indent",
        "indentContents": {
          "id": 7,
          "kind": "text",
          "text": "0"
        }
      },
      "id": 6,
      "kind": "command"
    },
    {
      "id": 8,
      "kind": "text",
      "text": ";def f(i"
    },
    {
      "command": {
        "command": "line",
        "hard": false,
        "literal": false,
        "soft": true
      },
      "id": 9,
      "kind": "command"
    },
    {
      "id": 10,
      "kind": "text",
      "text": ":"
    },
    {
      "command": {
        "command": "line",
        "hard": false,
        "literal": false,
        "soft": true
      },
      "id": 11,
      "kind": "command"
    },
    {
      "id": 12,
      "kind": "text",
      "text": "Int"
    },
    {
      "command": {
        "command": "line",
        "hard": false,
        "literal": false,
        "soft": false
      },
      "id": 13,
      "kind": "command"
    },
    {
      "id": 14,
      "kind": "text",
      "text": "):Int{i;}"
    }
  ]
}

== cmd_recurse_flatten.json ==

{
  "id": 1,
  "kind": "list",
  "list": [
    {
      "id": 2,
      "kind": "text",
      "text": "var i:Int="
    },
    {
      "command": {
        "command": "fill",
        "parts": {
          "id": 4,
          "kind": "list",
          "list": [
            {
              "command": {
                "break": false,
                "command": "group",
                "expandedStates": null,
                "groupContents": {
                  "id": 6,
                  "kind": "list",
                  "list": [
                    {
                      "id": 7,
                      "kind": "text",
                      "text": "AAAAAAAAAAAAAAAAAA("
                    },
                    {
                      "command": {
                        "command": "fill",
                        "parts": {
                          "id": 9,
                          "kind": "list",
                          "list": [
                            {
                              "id": 10,
                              "kind": "text",
                              "text": "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
                            },
                            {
                              "command": {
                                "command": "line",
                                "hard": false,
                                "literal": false,
                                "soft": true
                              },
                              "id": 11,
                              "kind": "command"
                            },
                            {
                              "id": 12,
                              "kind": "text",
                              "text": ".YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY"
                            },
                            {
                              "command": {
                                "command": "line",
                                "hard": false,
                                "literal": false,
                                "soft": true
                              },
                              "id": 13,
                              "kind": "command"
                            },
                            {
                              "id": 14,
                              "kind": "text",
                              "text": ".ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ"
                            }
                          ]
                        }
                      },
                      "id": 8,
                      "kind": "command"
                    },
                    {
                      "id": 15,
                      "kind": "text",
                      "text": ")"
                    },
                    {
                      "command": {
                        "command": "line",
                        "hard": false,
                        "literal": false,
                        "soft": false
                      },
                      "id": 16,
                      "kind": "command"
                    }
                  ]
                }
              },
              "id": 5,
              "kind": "command"
            },
            {
              "command": {
                "command": "line",
                "hard": false,
                "literal": false,
                "soft": true
              },
              "id": 17,
              "kind": "command"
            },
            {
              "id": 18,
              "kind": "text",
              "text": ".DDDDDDDDDDDDDDDD"
            },
            {
              "command": {
                "command": "line",
                "hard": false,
                "literal": false,
                "soft": true
              },
              "id": 19,
              "kind": "command"
            },
            {
              "id": 20,
              "kind": "text",
              "text": ".EEEEEEEEEEEEEEEE"
            },
            {
              "command": {
                "command": "line",
                "hard": false,
                "literal": false,
                "soft": true
              },
              "id": 21,
              "kind": "command"
            },
            {
              "id": 22,
              "kind": "text",
              "text": ".FFFFFFFFFFFFFFFF"
            },
            {
              "command": {
                "command": "line",
                "hard": false,
                "literal": false,
                "soft": true
              },
              "id": 23,
              "kind": "command"
            },
            {
              "id": 24,
              "kind": "text",
              "text": ".GGGGGGGGGGGGGGGG"
            }
          ]
        }
      },
      "id": 3,
      "kind": "command"
    },
    {
      "id": 25,
      "kind": "text",
      "text": ";"
    }
  ]
}

== cmd_softline.json ==

{
  "id": 1,
  "kind": "list",
  "list": [
    {
      "command": {
        "command": "line",
        "hard": false,
        "literal": false,
        "soft": true
      },
      "id": 2,
      "kind": "command"
    },
    {
      "id": 3,
      "kind": "text",
      "text": "var i:Int=0;"
    }
  ]
}

== cmd_trim.json ==

{
  "id": 1,
  "kind": "list",
  "list": [
    {
      "command": {
        "command": "trim"
      },
      "id": 2,
      "kind": "command"
    },
    {
      "id": 3,
      "kind": "text",
      "text": "var i:Int=0;"
    }
  ]
}

== cmd_whitespace_3.json ==

{
  "id": 1,
  "kind": "list",
  "list": [
    {
      "id": 2,
      "kind": "text",
      "text": "   var i:Int=0;"
    }
  ]
}

== cmd_whitespace_default.json ==

{
  "id": 1,
  "kind": "list",
  "list": [
    {
      "id": 2,
      "kind": "text",
      "text": " var i:Int=0;"
    }
  ]
}

Done.

== default_config.adb ==
var v1:Int=2;null var v2:Int=0;

def f1(a:Int,b:Int=0):Int{print(a,b);

very_long_call(aaaaaaaaa,bbbbbbb,cccccccc,dddddddd,eeeeeee,fffffffff,ggggggggg,hhhhhhhh);

a+b+1;

n1,n2,n2=foo(a,b);}

def f2(a:Int,):Int{a+1;}

main.adb: done

== main.adb -c config.json trivias/block_comments_only.txt ==
{
    # There are only comments
    # in this box

    # We expect comments and empty lines
    # to be preserved

    # But it should still be re-indented
}

== main.adb -c config.json trivias/block_empty.txt ==
{
}

== main.adb -c config.json trivias/block_first_empty_line.txt ==
{

    # Block comment after an empty line
}

== main.adb -c config.json trivias/block_mixed.txt ==
# Comment before the block

{
    # First block comment
    var v0: Int = 0;

    var v1: Int = 0; # Second block (trailing) comment

    # Intermediate comments (1)
    # Intermediate comments (2)

    var v2: Int = 0;
    # Third block comment

    # Last comment
}

# Comment after the block

== main.adb -c config.json trivias/block_trailing.txt ==
{
    # Trailing comment
}

== main.adb -c config.json trivias/list_nested_reattach.txt ==
def f(): T
{
    # First comment

    a, b = c(); # Suffix comment

    # Second comment

    d, e = f();

    # Third comment
}

== main.adb -c config.json trivias/list_nested_reattach_2.txt ==
def f(): T
{
    label0:
        a = f1();
        # Comment 1

    label1:
        a = f2();
        # Comment 2
}

== main.adb -c config.json trivias/list_ghost_before_trailing.txt ==
def f(): T
{

    print();
}

== main.adb -c config.json trivias/list_separator.txt ==
var v: T = foo(
    # Comment for a
    a,

    # Comment for b
    b
);

== main.adb -c config.json trivias/list_separator_trailing.txt ==
var v: T = foo(
    a, # Comment for a
    b  # Comment for b
);

== main.adb -c config.json trivias/unit_comments_only.txt ==
# First...
# A comment block

# Then...
# Another (originially indented)
# comment block

# Last comment

== main.adb -c config.json trivias/unit_empty.txt ==

== main.adb -c trivias/wrapped_list_item.json trivias/wrapped_list_item.txt ==
# Comment 1
foo var v1: T = 1;

# Comment 2
var v2: T = 2;

# Comment 3
foo,bar var v3: T = 3;

== main.adb -c trivias/var_group_config.json trivias/var_decls.txt ==
# Comment 1
var v1: T = 1;

# Comment 2
var v2: T = 2;

# Comment 3
var v3: T = 3;

== main.adb -c trivias/var_group_config.json trivias/list_nested_reattach.txt -s 5:4^1 ==
a,b=c();

== main.adb -c trivias/var_group_config.json trivias/list_nested_reattach.txt -s 9:4^1 ==
d,e=f();

== main.adb -c bubble_up/align.json bubble_up/src.txt ==
{
# Leading comment
var v1:T=11111111; var v2:T=22222222; var v3:T=33333333;
}

{
var v1:T=11111111;
    # Middle comment
    var v2:T=22222222;
    var v3:T=33333333;
}

{
var v1:T=11111111;
    var v2:T=22222222;
    var v3:T=33333333;
    # Trailing comment
}

== main.adb -c bubble_up/fill.json bubble_up/src.txt ==
{
# Leading comment
var v1:T=11111111; var v2:T=22222222; var v3:T=33333333;
}

{
var v1:T=11111111;
# Middle comment
var v2:T=22222222;
var v3:T=33333333;
}

{
var v1:T=11111111; var v2:T=22222222; var v3:T=33333333;
# Trailing comment
}

== main.adb -c bubble_up/group.json bubble_up/src.txt ==
{
# Leading comment
var v1:T=11111111; var v2:T=22222222; var v3:T=33333333;
}

{
var v1:T=11111111;
# Middle comment
var v2:T=22222222;
var v3:T=33333333;
}

{
var v1:T=11111111; var v2:T=22222222; var v3:T=33333333;
# Trailing comment
}

== main.adb -c bubble_up/indent.json bubble_up/src.txt ==
{
# Leading comment
var v1:T=11111111; var v2:T=22222222; var v3:T=33333333;
}

{
var v1:T=11111111;
    # Middle comment
    var v2:T=22222222;
    var v3:T=33333333;
}

{
var v1:T=11111111;
    var v2:T=22222222;
    var v3:T=33333333;
    # Trailing comment
}

== main.adb -c bubble_up/group_no_leading.json bubble_up/src.txt ==
{
# Leading comment
var v1:T=11111111;
var v2:T=22222222;
var v3:T=33333333;
}

{
var v1:T=11111111;
# Middle comment
var v2:T=22222222;
var v3:T=33333333;
}

{
var v1:T=11111111; var v2:T=22222222; var v3:T=33333333;
# Trailing comment
}

== main.adb -c bubble_up/group_no_trailing.json bubble_up/src.txt ==
{
# Leading comment
var v1:T=11111111; var v2:T=22222222; var v3:T=33333333;
}

{
var v1:T=11111111;
# Middle comment
var v2:T=22222222;
var v3:T=33333333;
}

{
var v1:T=11111111;
var v2:T=22222222;
var v3:T=33333333;
# Trailing comment
}

== main.adb -c bubble_up/group_none.json bubble_up/src.txt ==
{
# Leading comment
var v1:T=11111111;
var v2:T=22222222;
var v3:T=33333333;
}

{
var v1:T=11111111;
# Middle comment
var v2:T=22222222;
var v3:T=33333333;
}

{
var v1:T=11111111;
var v2:T=22222222;
var v3:T=33333333;
# Trailing comment
}

== main.adb -c list_extra_sep/default.json list_extra_sep/assign.txt ==
def f():T{
    c,d=1;
    ,a,b=1;
}

== main.adb -c list_extra_sep/default.json list_extra_sep/params.txt ==
def f(a:T,b:T,):T{

}def f(a:T,b:T):T{

}

== main.adb -c list_extra_sep/same_as_regular.json list_extra_sep/assign.txt ==
def f():T{
    c, d=1;
    , a, b=1;
}

== main.adb -c list_extra_sep/same_as_regular.json list_extra_sep/params.txt ==
def f(a:T, b:T, ):T{

}def f(a:T, b:T):T{

}

== main.adb -c list_extra_sep/override.json list_extra_sep/assign.txt ==
def f():T{
    c, d=1;
    ,
    a, b=1;
}

== main.adb -c list_extra_sep/override.json list_extra_sep/params.txt ==
def f(a:T, b:T,
):T{

}def f(a:T, b:T):T{

}

== main.adb -c max_empty_lines_none.json trivias/max_empty_lines.txt ==
var v0:T=0;var v1:T=1;

var v2:T=2;


var v3:T=3;



var v4:T=4;var v5:T=


5;

== main.adb -c max_empty_lines_0.json trivias/max_empty_lines.txt ==
var v0:T=0;var v1:T=1;
var v2:T=2;
var v3:T=3;
var v4:T=4;var v5:T=
5;

== main.adb -c max_empty_lines_1.json trivias/max_empty_lines.txt ==
var v0:T=0;var v1:T=1;

var v2:T=2;

var v3:T=3;

var v4:T=4;var v5:T=

5;

== main.adb -c max_empty_lines_2.json trivias/max_empty_lines.txt ==
var v0:T=0;var v1:T=1;

var v2:T=2;


var v3:T=3;


var v4:T=4;var v5:T=


5;

== main.adb -c breaking/fill.json breaking/one_var.txt -t final ==
[LANGKIT.UNPARSING.FINAL] list:
[LANGKIT.UNPARSING.FINAL] | hardline
[LANGKIT.UNPARSING.FINAL] | fill:
[LANGKIT.UNPARSING.FINAL] |   list:
[LANGKIT.UNPARSING.FINAL] |   | token[Var]: var
[LANGKIT.UNPARSING.FINAL] |   | softline
[LANGKIT.UNPARSING.FINAL] |   | list:
[LANGKIT.UNPARSING.FINAL] |   | | whitespace( 1)
[LANGKIT.UNPARSING.FINAL] |   | | token[Identifier]: v
[LANGKIT.UNPARSING.FINAL] |   | token[Colon]: :
[LANGKIT.UNPARSING.FINAL] |   | token[Identifier]: Int
[LANGKIT.UNPARSING.FINAL] |   | token[Equal]: =
[LANGKIT.UNPARSING.FINAL] |   | token[Number]: 1
[LANGKIT.UNPARSING.FINAL] |   | token[Semicolon]: ;

var v:Int=1;

== main.adb -c breaking/group.json breaking/one_var.txt -t final ==
[LANGKIT.UNPARSING.FINAL] list:
[LANGKIT.UNPARSING.FINAL] | hardline
[LANGKIT.UNPARSING.FINAL] | group:
[LANGKIT.UNPARSING.FINAL] |   shouldBreak: FALSE
[LANGKIT.UNPARSING.FINAL] |   id: 0
[LANGKIT.UNPARSING.FINAL] |   list:
[LANGKIT.UNPARSING.FINAL] |   | token[Var]: var
[LANGKIT.UNPARSING.FINAL] |   | softline
[LANGKIT.UNPARSING.FINAL] |   | list:
[LANGKIT.UNPARSING.FINAL] |   | | whitespace( 1)
[LANGKIT.UNPARSING.FINAL] |   | | token[Identifier]: v
[LANGKIT.UNPARSING.FINAL] |   | token[Colon]: :
[LANGKIT.UNPARSING.FINAL] |   | token[Identifier]: Int
[LANGKIT.UNPARSING.FINAL] |   | token[Equal]: =
[LANGKIT.UNPARSING.FINAL] |   | token[Number]: 1
[LANGKIT.UNPARSING.FINAL] |   | token[Semicolon]: ;

var v:Int=1;

== main.adb -c breaking/ifbreak.json breaking/one_var.txt -t final ==
[LANGKIT.UNPARSING.FINAL] list:
[LANGKIT.UNPARSING.FINAL] | hardline
[LANGKIT.UNPARSING.FINAL] | indent:
[LANGKIT.UNPARSING.FINAL] |   list:
[LANGKIT.UNPARSING.FINAL] |   | token[Var]: var
[LANGKIT.UNPARSING.FINAL] |   | list:
[LANGKIT.UNPARSING.FINAL] |   | | whitespace( 1)
[LANGKIT.UNPARSING.FINAL] |   | | token[Identifier]: v
[LANGKIT.UNPARSING.FINAL] |   | token[Colon]: :
[LANGKIT.UNPARSING.FINAL] |   | token[Identifier]: Int
[LANGKIT.UNPARSING.FINAL] |   | token[Equal]: =
[LANGKIT.UNPARSING.FINAL] |   | list:
[LANGKIT.UNPARSING.FINAL] |   | | line
[LANGKIT.UNPARSING.FINAL] |   | | token[Number]: 1
[LANGKIT.UNPARSING.FINAL] |   | token[Semicolon]: ;

var v:Int=
    1;

== main.adb -c breaking/table.json breaking/one_var.txt -t final ==
[LANGKIT.UNPARSING.FINAL] list:
[LANGKIT.UNPARSING.FINAL] | hardline
[LANGKIT.UNPARSING.FINAL] | table:
[LANGKIT.UNPARSING.FINAL] |   must_break: FALSE
[LANGKIT.UNPARSING.FINAL] |   row:
[LANGKIT.UNPARSING.FINAL] |   | list:
[LANGKIT.UNPARSING.FINAL] |   | | token[Var]: var
[LANGKIT.UNPARSING.FINAL] |   | | softline
[LANGKIT.UNPARSING.FINAL] |   | | list:
[LANGKIT.UNPARSING.FINAL] |   | | | whitespace( 1)
[LANGKIT.UNPARSING.FINAL] |   | | | token[Identifier]: v
[LANGKIT.UNPARSING.FINAL] |   | | token[Colon]: :
[LANGKIT.UNPARSING.FINAL] |   | | token[Identifier]: Int
[LANGKIT.UNPARSING.FINAL] |   | | token[Equal]: =
[LANGKIT.UNPARSING.FINAL] |   | | token[Number]: 1
[LANGKIT.UNPARSING.FINAL] |   | | token[Semicolon]: ;

var
 v:Int=1;

== main.adb -c breaking/root.json breaking/one_var.txt -t final ==
[LANGKIT.UNPARSING.FINAL] list:
[LANGKIT.UNPARSING.FINAL] | token[Var]: var
[LANGKIT.UNPARSING.FINAL] | softline
[LANGKIT.UNPARSING.FINAL] | token[Identifier]: v
[LANGKIT.UNPARSING.FINAL] | token[Colon]: :
[LANGKIT.UNPARSING.FINAL] | token[Identifier]: Int
[LANGKIT.UNPARSING.FINAL] | token[Equal]: =
[LANGKIT.UNPARSING.FINAL] | token[Number]: 1
[LANGKIT.UNPARSING.FINAL] | token[Semicolon]: ;
var
v:Int=1;

== main.adb -c breaking/table.json breaking/comment_in_vars.txt -t final ==
[LANGKIT.UNPARSING.FINAL] list:
[LANGKIT.UNPARSING.FINAL] | hardline
[LANGKIT.UNPARSING.FINAL] | table:
[LANGKIT.UNPARSING.FINAL] |   must_break: TRUE
[LANGKIT.UNPARSING.FINAL] |   row:
[LANGKIT.UNPARSING.FINAL] |   | list:
[LANGKIT.UNPARSING.FINAL] |   | | token[Var]: var
[LANGKIT.UNPARSING.FINAL] |   | | softline
[LANGKIT.UNPARSING.FINAL] |   | | token[Identifier]: v1
[LANGKIT.UNPARSING.FINAL] |   | | token[Colon]: :
[LANGKIT.UNPARSING.FINAL] |   | | token[Identifier]: Int
[LANGKIT.UNPARSING.FINAL] |   | | token[Equal]: =
[LANGKIT.UNPARSING.FINAL] |   | | list:
[LANGKIT.UNPARSING.FINAL] |   | | | whitespace( 1)
[LANGKIT.UNPARSING.FINAL] |   | | | token[Comment]: # comment 1
[LANGKIT.UNPARSING.FINAL] |   | | list:
[LANGKIT.UNPARSING.FINAL] |   | | | hardline
[LANGKIT.UNPARSING.FINAL] |   | | | token[Number]: 1
[LANGKIT.UNPARSING.FINAL] |   | | token[Semicolon]: ;
[LANGKIT.UNPARSING.FINAL] |   row:
[LANGKIT.UNPARSING.FINAL] |   | list:
[LANGKIT.UNPARSING.FINAL] |   | | token[Var]: var
[LANGKIT.UNPARSING.FINAL] |   | | softline
[LANGKIT.UNPARSING.FINAL] |   | | token[Identifier]: v2
[LANGKIT.UNPARSING.FINAL] |   | | token[Colon]: :
[LANGKIT.UNPARSING.FINAL] |   | | token[Identifier]: Int
[LANGKIT.UNPARSING.FINAL] |   | | token[Equal]: =
[LANGKIT.UNPARSING.FINAL] |   | | list:
[LANGKIT.UNPARSING.FINAL] |   | | | whitespace( 1)
[LANGKIT.UNPARSING.FINAL] |   | | | token[Comment]: # comment 2
[LANGKIT.UNPARSING.FINAL] |   | | list:
[LANGKIT.UNPARSING.FINAL] |   | | | hardline
[LANGKIT.UNPARSING.FINAL] |   | | | token[Number]: 2
[LANGKIT.UNPARSING.FINAL] |   | | token[Semicolon]: ;

var
v1:Int= # comment 1
1;
var
v2:Int= # comment 2
2;

== main.adb -c breaking/table_must_break.json breaking/comment_in_vars.txt -t final ==
[LANGKIT.UNPARSING.FINAL] group:
[LANGKIT.UNPARSING.FINAL]   shouldBreak: TRUE
[LANGKIT.UNPARSING.FINAL]   id: 0
[LANGKIT.UNPARSING.FINAL]   table:
[LANGKIT.UNPARSING.FINAL]     must_break: TRUE
[LANGKIT.UNPARSING.FINAL]     row:
[LANGKIT.UNPARSING.FINAL]     | list:
[LANGKIT.UNPARSING.FINAL]     | | token[Var]: var
[LANGKIT.UNPARSING.FINAL]     | | softline
[LANGKIT.UNPARSING.FINAL]     | | token[Identifier]: v1
[LANGKIT.UNPARSING.FINAL]     | | token[Colon]: :
[LANGKIT.UNPARSING.FINAL]     | | token[Identifier]: Int
[LANGKIT.UNPARSING.FINAL]     | | token[Equal]: =
[LANGKIT.UNPARSING.FINAL]     | | list:
[LANGKIT.UNPARSING.FINAL]     | | | whitespace( 1)
[LANGKIT.UNPARSING.FINAL]     | | | token[Comment]: # comment 1
[LANGKIT.UNPARSING.FINAL]     | | list:
[LANGKIT.UNPARSING.FINAL]     | | | line
[LANGKIT.UNPARSING.FINAL]     | | | token[Number]: 1
[LANGKIT.UNPARSING.FINAL]     | | token[Semicolon]: ;
[LANGKIT.UNPARSING.FINAL]     row:
[LANGKIT.UNPARSING.FINAL]     | list:
[LANGKIT.UNPARSING.FINAL]     | | token[Var]: var
[LANGKIT.UNPARSING.FINAL]     | | softline
[LANGKIT.UNPARSING.FINAL]     | | token[Identifier]: v2
[LANGKIT.UNPARSING.FINAL]     | | token[Colon]: :
[LANGKIT.UNPARSING.FINAL]     | | token[Identifier]: Int
[LANGKIT.UNPARSING.FINAL]     | | token[Equal]: =
[LANGKIT.UNPARSING.FINAL]     | | list:
[LANGKIT.UNPARSING.FINAL]     | | | whitespace( 1)
[LANGKIT.UNPARSING.FINAL]     | | | token[Comment]: # comment 2
[LANGKIT.UNPARSING.FINAL]     | | list:
[LANGKIT.UNPARSING.FINAL]     | | | line
[LANGKIT.UNPARSING.FINAL]     | | | token[Number]: 2
[LANGKIT.UNPARSING.FINAL]     | | token[Semicolon]: ;
var
v1:Int= # comment 1
1;
var
v2:Int= # comment 2
2;

== main.adb -c breaking/table_must_break.json breaking/one_var.txt -t final ==
[LANGKIT.UNPARSING.FINAL] group:
[LANGKIT.UNPARSING.FINAL]   shouldBreak: TRUE
[LANGKIT.UNPARSING.FINAL]   id: 0
[LANGKIT.UNPARSING.FINAL]   table:
[LANGKIT.UNPARSING.FINAL]     must_break: TRUE
[LANGKIT.UNPARSING.FINAL]     row:
[LANGKIT.UNPARSING.FINAL]     | list:
[LANGKIT.UNPARSING.FINAL]     | | token[Var]: var
[LANGKIT.UNPARSING.FINAL]     | | softline
[LANGKIT.UNPARSING.FINAL]     | | token[Identifier]: v
[LANGKIT.UNPARSING.FINAL]     | | token[Colon]: :
[LANGKIT.UNPARSING.FINAL]     | | token[Identifier]: Int
[LANGKIT.UNPARSING.FINAL]     | | token[Equal]: =
[LANGKIT.UNPARSING.FINAL]     | | list:
[LANGKIT.UNPARSING.FINAL]     | | | line
[LANGKIT.UNPARSING.FINAL]     | | | token[Number]: 1
[LANGKIT.UNPARSING.FINAL]     | | token[Semicolon]: ;
var
v:Int=
1;

== main.adb -c breaking/table_must_break_not_parent.json breaking/one_var.txt -t final ==
[LANGKIT.UNPARSING.FINAL] group:
[LANGKIT.UNPARSING.FINAL]   shouldBreak: FALSE
[LANGKIT.UNPARSING.FINAL]   id: 0
[LANGKIT.UNPARSING.FINAL]   list:
[LANGKIT.UNPARSING.FINAL]   | softline
[LANGKIT.UNPARSING.FINAL]   | table:
[LANGKIT.UNPARSING.FINAL]   |   must_break: TRUE
[LANGKIT.UNPARSING.FINAL]   |   row:
[LANGKIT.UNPARSING.FINAL]   |   | list:
[LANGKIT.UNPARSING.FINAL]   |   | | token[Var]: var
[LANGKIT.UNPARSING.FINAL]   |   | | list:
[LANGKIT.UNPARSING.FINAL]   |   | | | whitespace( 1)
[LANGKIT.UNPARSING.FINAL]   |   | | | token[Identifier]: v
[LANGKIT.UNPARSING.FINAL]   |   | | token[Colon]: :
[LANGKIT.UNPARSING.FINAL]   |   | | token[Identifier]: Int
[LANGKIT.UNPARSING.FINAL]   |   | | token[Equal]: =
[LANGKIT.UNPARSING.FINAL]   |   | | token[Number]: 1
[LANGKIT.UNPARSING.FINAL]   |   | | token[Semicolon]: ;
var v:Int=1;

== main.adb -c breaking/fill_broken.json breaking/comment_in_var.txt -t final ==
[LANGKIT.UNPARSING.FINAL] fill:
[LANGKIT.UNPARSING.FINAL]   list:
[LANGKIT.UNPARSING.FINAL]   | list:
[LANGKIT.UNPARSING.FINAL]   | | token[Var]: var
[LANGKIT.UNPARSING.FINAL]   | | list:
[LANGKIT.UNPARSING.FINAL]   | | | whitespace( 1)
[LANGKIT.UNPARSING.FINAL]   | | | token[Identifier]: v1
[LANGKIT.UNPARSING.FINAL]   | | token[Colon]: :
[LANGKIT.UNPARSING.FINAL]   | | list:
[LANGKIT.UNPARSING.FINAL]   | | | line
[LANGKIT.UNPARSING.FINAL]   | | | token[Identifier]: T
[LANGKIT.UNPARSING.FINAL]   | | token[Equal]: =
[LANGKIT.UNPARSING.FINAL]   | | token[Number]: 1
[LANGKIT.UNPARSING.FINAL]   | | token[Semicolon]: ;
[LANGKIT.UNPARSING.FINAL]   | list:
[LANGKIT.UNPARSING.FINAL]   | | hardline
[LANGKIT.UNPARSING.FINAL]   | | list:
[LANGKIT.UNPARSING.FINAL]   | | | token[Def]: def
[LANGKIT.UNPARSING.FINAL]   | | | list:
[LANGKIT.UNPARSING.FINAL]   | | | | whitespace( 1)
[LANGKIT.UNPARSING.FINAL]   | | | | token[Identifier]: f
[LANGKIT.UNPARSING.FINAL]   | | | token[LPar]: (
[LANGKIT.UNPARSING.FINAL]   | | | token[RPar]: )
[LANGKIT.UNPARSING.FINAL]   | | | token[Colon]: :
[LANGKIT.UNPARSING.FINAL]   | | | token[Identifier]: T
[LANGKIT.UNPARSING.FINAL]   | | | token[LBrace]: {
[LANGKIT.UNPARSING.FINAL]   | | | token[RBrace]: }
[LANGKIT.UNPARSING.FINAL]   | list:
[LANGKIT.UNPARSING.FINAL]   | | token[Var]: var
[LANGKIT.UNPARSING.FINAL]   | | list:
[LANGKIT.UNPARSING.FINAL]   | | | whitespace( 1)
[LANGKIT.UNPARSING.FINAL]   | | | token[Identifier]: v2
[LANGKIT.UNPARSING.FINAL]   | | token[Colon]: :
[LANGKIT.UNPARSING.FINAL]   | | list:
[LANGKIT.UNPARSING.FINAL]   | | | hardline
[LANGKIT.UNPARSING.FINAL]   | | | token[Comment]: # Comment
[LANGKIT.UNPARSING.FINAL]   | | list:
[LANGKIT.UNPARSING.FINAL]   | | | line
[LANGKIT.UNPARSING.FINAL]   | | | list:
[LANGKIT.UNPARSING.FINAL]   | | | | hardline
[LANGKIT.UNPARSING.FINAL]   | | | | token[Identifier]: T
[LANGKIT.UNPARSING.FINAL]   | | token[Equal]: =
[LANGKIT.UNPARSING.FINAL]   | | token[Number]: 2
[LANGKIT.UNPARSING.FINAL]   | | token[Semicolon]: ;
var v1: T=1;
def f():T{}var v2:
# Comment
T=2;

== main.adb -c table_align/no_split.json table_align/var_decls.txt ==
null var v1 : Int = 1;
var v22     : Int = 2;

var v333    : Bool = true;
# Comment
var v4444   : Int = 4;

== main.adb -c table_align/split_all.json table_align/var_decls.txt ==
null var v1 : Int = 1;
var v22     : Int = 2;

var v333 : Bool = true;
# Comment
var v4444 : Int = 4;

== main.adb -c table_align/split_comments.json table_align/var_decls.txt ==
null var v1 : Int = 1;
var v22     : Int = 2;

var v333    : Bool = true;
# Comment
var v4444 : Int = 4;

== main.adb -c table_align/split_empty_lines.json table_align/var_decls.txt ==
null var v1 : Int = 1;
var v22     : Int = 2;

var v333  : Bool = true;
# Comment
var v4444 : Int = 4;

== main.adb -c table_align/sep_before_missing.json table_align/fun_decls.txt ==
def f(
    a1   : Int,
    a22  : Int

    ,
    a333 : Int,
    a4444: Int,

    a5555: Int
):T{}

== main.adb -c table_align/sep_before_true.json table_align/fun_decls.txt ==
def f(
    a1   : Int,
    a22  : Int

    ,
    a333 : Int,
    a4444: Int,

    a5555: Int
):T{}

== main.adb -c table_align/sep_before_false.json table_align/fun_decls.txt ==
def f(
    a1     : Int
    , a22  : Int

    , a333 : Int
    , a4444: Int
    ,

    a5555: Int
):T{}

== main.adb -c table_align/table_sep_in_field.json table_align/calls.txt ==
var v1:T=f(
    a  =A,
    bb =B,
    ccc=C
);

== main.adb -c table_align/inherit.json table_align/blocks.txt ==
{
var v0  : T = 0;
var vv1 : T = 1;
}

+{
var v0  : T = 0;
var vv1 : T = 1;
}

== main.adb -c table_align/inherit_null.json table_align/blocks.txt ==
{
var v0  : T = 0;
var vv1 : T = 1;
}

+{
var v0 : T = 0;var vv1 : T = 1;
}

== main.adb -c table_join/config.json table_join/big.txt ==
var v0:T=0;
var v1:T=1;
var left:T=2;       var right:T=3;
var left:T=4;
var looooooooooooooong:T=5;
var right:T=6;
var left:TTTTTTT=2; var right:T=3;

var looooooooooooooong:T=0;
var left:T=1;   var right:T=2;
var left:TTT=3; var right:T=4;

var left:T=3;
# Comment
var right:T=4;

== main.adb -c table_join/config.json table_join/error.txt ==
error.txt:4:1: predicate FooNode.p_table_join_needed raised LANGKIT_SUPPORT.ERRORS.PROPERTY_ERROR: predicate bug
var v0:T=0;
var v1:T=1;
var left:T=2;
foo,bar var right:T=3;
var left:T=4;

== main.adb -A --charset iso-8859-1 latin1.txt ==
# é

== main.adb -A trivias/trailing_whitespaces.txt ==
# Comment
var v:T=1;
Done
