@spacing(alphanumericals, alphanumericals)
lexer foo_lexer {

    @text whitespace <- p"[ \n\r\t]+"

    family alphanumericals {
        @text def <- "def"
    }

    @text var <- "var"

    family alphanumericals {
        @text error <- "error"
        @text example <- "example"
        @text null_tok <- "null"
    }

    @text comma <- ","
    @text dot <- "."
    @text semicolon <- ";"
    @text l_par <- "("
    @text r_par <- ")"
    @text l_brace <- "{"
    @text r_brace <- "}"
    @text equal <- "="
    @text plus <- "+"
    @text minus <- "-"
    @text less_than <- "<"

    family alphanumericals {
        @text number <- p"[0-9]+"
        @symbol identifier <- p"[a-zA-Z_][a-zA-Z0-9_]*"
    }

    @text string <- p"\"[^\"]*\""
    @newline_after @text comment <- p"#(.?)+"
}
grammar foo_grammar {
    @main_rule main_rule <- ASTList[FooNode]+(or(scope | self_decl | foreign_decl))
    scope <- Scope(
        simple_identifier "{" ASTList[Scope]*(scope) "}"
    )
    identifier <- or(
        | ScopedId(identifier "." simple_identifier)
        | simple_identifier
    )
    simple_identifier <- SimpleId(@identifier)
    foreign_decl <- ForeignDecl(identifier)
    self_decl <- SelfDecl(
        "+" identifier ?pick("(" identifier ")")
    )

}

@root_node class FooNode {
}

class ForeignDecl : FooNode {
    @parse_field id : Id
}

@abstract class Id : FooNode {

    fun simple_name (): SimpleId

    fun resolve (base_env : LexicalEnv): Scope
}

class ScopedId : Id {
    @parse_field scope : Id
    @parse_field name : SimpleId

    fun simple_name (): SimpleId = node.name

    fun resolve (base_env : LexicalEnv): Scope =
    node.scope.resolve(base_env).children_env.get(node.name.symbol, only_first=true).node.to[Scope]
}

class SimpleId : Id {

    fun simple_name (): SimpleId = node

    fun resolve (base_env : LexicalEnv): Scope =
    base_env.get(node.symbol, only_first=true).node.to[Scope]
}

class Scope : FooNode {
    @parse_field name : SimpleId
    @parse_field content : ASTList[Scope]
}

class SelfDecl : FooNode {
    @parse_field id : Id
    @parse_field md_node : Id
}

struct EnvAssoc {
    key : SymbolType
    value : FooNode
    dest_env : LexicalEnv
    metadata : Metadata
}
