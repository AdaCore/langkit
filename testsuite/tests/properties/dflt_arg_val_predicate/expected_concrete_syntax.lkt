@spacing(alphanumericals, alphanumericals)
lexer foo_lexer {

    whitespace <- p"[ \n\r\t]+"

    family alphanumericals {
        def <- "def"
    }

    var <- "var"

    family alphanumericals {
        error <- "error"
        example <- "example"
        null_tok <- "null"
    }

    comma <- ","
    dot <- "."
    semicolon <- ";"
    l_par <- "("
    r_par <- ")"
    l_brace <- "{"
    r_brace <- "}"
    equal <- "="
    plus <- "+"
    minus <- "-"
    less_than <- "<"

    family alphanumericals {
        number <- p"[0-9]+"
        @symbol identifier <- p"[a-zA-Z_][a-zA-Z0-9_]*"
    }

    string <- p"\"[^\"]*\""
    @newline_after comment <- p"#(.?)+"
}
grammar foo_grammar {
    @main_rule main_rule <- Example("example")

}

@root_node class FooNode {
}

class Example : FooNode {
    var1 : LogicVar
    var2 : LogicVar

    fun predicate (n : FooNode, flag1 : Boolean = false, flag2 : Boolean = true): Boolean =
    (flag1 and (n.is_null)) and flag2

    @export fun prop (): Example = {
        val _ = %predicate(BareExample.predicate, node.var1, node.var2);

        node.as_bare_entity
    }
}
