import expected_concrete_syntax

lexer foo_lexer {

    match p"'.'" {
        if previous_token is Id then send(Tick, 1)
        else send(Char, 3)
    }

    match "access" {
        if previous_token is Tick then send(Id, 6)
        else send(Access, 6)
    }

    Access
    Char
    Dot <- "."
    Id <- p"[a-zA-ZÃ©ðŸ™‚]+"
    Tick <- "'"
    @trivia() Whitespace <- p"[ \n]+"
}

@with_lexer(foo_lexer)
grammar foo_grammar {
    @main_rule expr <- or(
        | DotExpr(expr "." name)
        | AttrRef(expr "'" name)
        | AccessType("access" name)
        | char_lit
        | name
    )
    char_lit <- CharLit(@Char)
    name <- Name(@Id)
}
