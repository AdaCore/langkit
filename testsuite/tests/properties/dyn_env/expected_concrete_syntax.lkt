import lexer_example
@with_lexer(foo_lexer)
grammar foo_grammar {
    @main_rule main_rule <- list*(stmt)
    stmt <- or(cons_decl | fun_decl | call_expr)
    cons_decl <- ConsDecl(id "=" expr)
    fun_decl <- FunDecl("def" id "(" list*(argspec) ")")
    argspec <- ArgSpec(id "=" expr)
    call_expr <- CallExpr(id "(" list*(expr) ")")
    expr <- or(Literal(@number) | Ref(id))
    id <- Identifier(@identifier)

}

@abstract class FooNode implements Node[FooNode] {
}

class ArgSpec : FooNode {
    @parse_field name: Identifier
    @parse_field arg_expr: Expr
}

class CallExpr : FooNode {
    @parse_field name: Identifier
    @parse_field args: ASTList[Expr]

    @lazy args_env: LexicalEnv[FooNode] =
    DynamicLexicalEnv(BareCallExpr.args_assocs_getter)

    @lazy arg_exprs_env: LexicalEnv[FooNode] =
    DynamicLexicalEnv(BareCallExpr.arg_exprs_assocs_getter, assoc_resolver=BareExpr.resolve)

    ## For each argument, associate its name to the expression passed in this
    ## call.
    fun args_assocs_getter(): Array[InnerEnvAssoc] = {
        val decl = node.node_env().get_first(node.name).as[FunDecl];

        decl.args.map(
            (a, i) => InnerEnvAssoc(
                key=a.name.symbol, value=node.args?(i), metadata=null
            )
        )
    }

    ## For each argument, associate its name to its default expression.
    fun arg_exprs_assocs_getter(): Array[InnerEnvAssoc] = {
        val decl = node.node_env().get_first(node.name).as[FunDecl];

        decl.args.map(
            (a) => InnerEnvAssoc(
                key=a.name.symbol, value=a.arg_expr.node, metadata=null
            )
        )
    }

    @export fun get_arg(name: Symbol): Expr =
    node.args_env().get_first(name).as[Expr]

    @export fun get_arg_expr(name: Symbol): Expr =
    node.arg_exprs_env().get_first(name).as[Expr]
}

class ConsDecl : FooNode {
    @parse_field name: Identifier
    @parse_field cons_expr: Expr
}

@abstract class Expr : FooNode {

    fun resolve(): Expr = match self {
        case l : Literal => l
        case r : Ref => self.node_env().get_first(r.name.symbol).as[ConsDecl].cons_expr.resolve()
    }
}

class Literal : Expr implements TokenNode {
}

class Ref : Expr {
    @parse_field name: Identifier
}

class FunDecl : FooNode {
    @parse_field name: Identifier
    @parse_field args: ASTList[ArgSpec]
}

class Identifier : FooNode implements TokenNode {
}
