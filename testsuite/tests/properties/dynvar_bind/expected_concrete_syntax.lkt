grammar FooGrammar {
    @main_rule main_rule <- list*(decl)
    decl <- Decl(Name(@Identifier) "(" list+(ref) ")")
    ref <- Ref(Name(@Identifier))

}

@root_node class FooNode {
}

class Decl : FooNode {
    @parse_field name : Name
    @parse_field refs : ASTList[Ref]
}

class Name : FooNode {
}

class Ref : FooNode {
    @parse_field name : Name

    @export fun resolve (): FooNode = {
        bind env = node.parent.parent.node_env;

        env.get(node.name.symbol)?(0)
    }
}

struct EnvAssoc {
    key : SymbolType
    value : FooNode
    dest_env : LexicalEnv
    metadata : Metadata
}
