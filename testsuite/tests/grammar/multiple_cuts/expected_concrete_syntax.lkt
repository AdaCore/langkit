import lexer_example

@with_lexer(foo_lexer)
grammar foo_grammar {
    @main_rule stmt_rule <- list*(or(def | var | dot | comma))
    id <- Id(@Identifier)
    def <- Def(
        "def"
        / id ?pick("(" / id ")") ?pick("{" / id "}")
    )
    var <- Var(
        "var" / id ?pick("(" / list+(id, ",") ")")
    )
    dot <- Dot(
        "." id ?pick("(" / id ")") ?pick("{" / id "}")
    )
    comma <- Comma(?pick("(" / id ")") "," id id)
}

@abstract
class FooNode implements Node[FooNode] {
}

class Comma: FooNode {
    @parse_field @nullable id1: Id
    @parse_field id2: Id
    @parse_field id3: Id
}

class Def: FooNode {
    @parse_field id1: Id
    @parse_field @nullable id2: Id
    @parse_field @nullable id3: Id
}

class Dot: FooNode {
    @parse_field id1: Id
    @parse_field @nullable id2: Id
    @parse_field @nullable id3: Id
}

class Id: FooNode implements TokenNode {
}

class Var: FooNode {
    @parse_field id: Id
    @parse_field ids: ASTList[Id]
}
