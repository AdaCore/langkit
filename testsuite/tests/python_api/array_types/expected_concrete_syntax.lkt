grammar FooGrammar {
    @main_rule main_rule <- list*(node)
    node <- or(example | null_node)
    example <- Example("example")
    null_node <- NullNode("null")

}

@root_node class FooNode {

    @export fun count (seq : Array[Example]): Int = seq.length
}

class Example : FooNode {
}

## This list node can contain one of the following nodes:
##
## * ${node_name(T.Example)}
## * ${node_name(T.NullNode)}
class Sequence : ASTList[FooNode] {

    @export fun all_items (): Array[FooNode] = self.map((i) => i)

    @export fun example_items (): Array[Example] = self.filter_map(
        (i) => i.to[Example]!, (i) => i isa Example
    )
}

class NullNode : FooNode {
}
