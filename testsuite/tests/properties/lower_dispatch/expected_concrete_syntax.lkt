@spacing("alphanumericals", "alphanumericals")
lexer foo_lexer {

    @text whitespace <- p"[ \n\r\t]+"
    @family("alphanumericals") @text def <- "def"
    @text var <- "var"
    @family("alphanumericals") @text error <- "error"
    @family("alphanumericals") @text example <- "example"
    @family("alphanumericals") @text null_tok <- "null"
    @text comma <- ","
    @text dot <- "."
    @text semicolon <- ";"
    @text l_par <- "("
    @text r_par <- ")"
    @text l_brace <- "{"
    @text r_brace <- "}"
    @text equal <- "="
    @text plus <- "+"
    @text minus <- "-"
    @text less_than <- "<"
    @family("alphanumericals") @text number <- p"[0-9]+"
    @family("alphanumericals") @symbol identifier <- p"[a-zA-Z_][a-zA-Z0-9_]*"
    @text string <- p"\"[^\"]*\""
    @newline_after @text comment <- p"#(.?)+"

}
grammar foo_grammar {
    name <- Name(@identifier)
    @main_rule main_rule <- list+(or(Def("def" name expr) | expr))
    expr <- or(atom | plus)
    atom <- or(lit | ref)
    lit <- Lit(@number)
    ref <- Ref(name)
    plus <- ("(" Plus(expr "+" expr) ")")

}

@root_node class FooNode {
}

class Def : FooNode {
    @parse_field name : Name
    @parse_field expr : Expr
}

@abstract class Expr : FooNode {

    @export fun evaluate_abstract (): Int

    @export fun evaluate_rtcheck (): Int

    @export fun evaluate_concrete (): Int = 1

    @export fun evaluate_entity (): Int

    fun evaluate_rtcheck (): Int

    fun evaluate_concrete (): Int
}

@abstract class Atom : Expr {
}

class Lit : Atom {

    fun evaluate_abstract (): Int = 1

    fun evaluate_rtcheck (): Int = 1

    fun evaluate_entity (): Int = 1
}

class Ref : Atom {
    @parse_field name : Name

    @export fun resolve (): Def =
    node.node_env.get(node.name.symbol, only_first=true).to[Def]!

    fun evaluate_abstract (): Int = node.resolve.expr.evaluate_abstract

    fun evaluate_concrete (): Int = node.resolve.expr.evaluate_concrete

    fun evaluate_entity (): Int = self.resolve.expr.evaluate_entity
}

class Plus : Expr {
    @parse_field lhs : Expr
    @parse_field rhs : Expr

    fun evaluate_abstract (): Int =
    node.lhs.evaluate_abstract + node.rhs.evaluate_abstract

    fun evaluate_rtcheck (): Int =
    node.lhs.evaluate_rtcheck + node.rhs.evaluate_rtcheck

    fun evaluate_concrete (): Int =
    node.lhs.evaluate_concrete + node.rhs.evaluate_concrete

    fun evaluate_entity (): Int =
    self.lhs.evaluate_entity + self.rhs.evaluate_entity
}

class Name : FooNode {
}

struct EnvAssoc {
    key : SymbolType
    value : FooNode
    dest_env : LexicalEnv
    metadata : Metadata
}
