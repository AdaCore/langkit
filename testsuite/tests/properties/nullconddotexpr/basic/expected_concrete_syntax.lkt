import lexer_example

@with_lexer(foo_lexer)
grammar foo_grammar {
    @main_rule cons <- or(
        | Cons(cons "." name)
        | Cons(null(Cons) name)
    )
    name <- Name(@Identifier)
}

@abstract
class FooNode implements Node[FooNode] {
    @exported
    fun field_1(n: Cons): Cons = n?.prefix

    @exported
    fun field_2(n: Cons): Cons = n?.prefix.prefix

    @exported
    fun field_3(n: Cons): Cons = n.prefix?.prefix

    @exported
    fun field_4(n: Cons): Cons = n?.prefix?.prefix

    @exported
    fun call_1(n: Cons): Cons = n?.get_prefix(node)

    @exported
    fun call_2(n: Cons): Cons = n?.get_prefix(node).get_prefix(node)

    @exported
    fun call_3(n: Cons): Cons = n.get_prefix(node)?.get_prefix(node)

    @exported
    fun call_4(n: Cons): Cons = n?.get_prefix(node)?.get_prefix(node)
}

class Cons: FooNode {
    @parse_field @nullable prefix: Cons
    @parse_field suffix: Name

    fun get_prefix(@ignored n: FooNode): Cons = node.prefix
}

class Name: FooNode implements TokenNode {
}
