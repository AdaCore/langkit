import lexer_example

@with_lexer(foo_lexer)
grammar foo_grammar {
    @main_rule main_rule <- list+(Example("example"))
}

@abstract class FooNode implements Node[FooNode] {
}

class Example: FooNode {

    @export fun test_contains(): Bool =
    null[ASTList[FooNode, Example]].contains(node)

    @export fun test_filter(): Array[Entity[Example]] =
    null[ASTList[FooNode, Example]].filter((n) => n.is_null).map((n) => n.as_bare_entity)

    @export fun test_filtermap(): Array[Entity[Example]] =
    null[ASTList[FooNode, Example]].filtermap(
        (n) => n.as_bare_entity, (n) => n.is_null
    )

    @export fun test_map(): Array[Entity[Example]] =
    null[ASTList[FooNode, Example]].map((n) => n.as_bare_entity)

    @export fun test_mapcat(): Array[Entity[Example]] =
    null[ASTList[FooNode, Example]].mapcat((n) => [n.as_bare_entity])

    @export fun test_takewhile(): Array[Entity[Example]] =
    null[ASTList[FooNode, Example]].take_while((n) => n.is_null).map((n) => n.as_bare_entity)

    @export fun test_as_array(): Array[Entity[Example]] =
    null[ASTList[FooNode, Example]].as_array().map((n) => n.as_bare_entity)

    @export fun test_all(): Bool =
    null[ASTList[FooNode, Example]].all((n) => n.is_null)

    @export fun test_any(): Bool =
    null[ASTList[FooNode, Example]].any((n) => n.is_null)

    @export fun test_at(): Entity[Example] =
    null[ASTList[FooNode, Example]]?[0].as_bare_entity

    @export fun test_at_or_raise(): Entity[Example] =
    null[ASTList[FooNode, Example]][0].as_bare_entity

    @export fun test_length(): Int = null[ASTList[FooNode, Example]].length()
}
