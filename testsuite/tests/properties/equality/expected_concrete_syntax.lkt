grammar FooGrammar {
    decl <- Decl(
        ?"+" Name(@Identifier) "(" ref_list ")"
    )
    main_rule <- list*(decl)
    ref <- Ref(Name(@Identifier))
    ref_list <- list+(ref)

}

@root_node class FooNode {

    fun env_struct (): EnvStruct = EnvStruct(env=node.children_env.env_orphan)

    fun env_array (): Array[LexicalEnv] = [node.children_env.env_orphan]
}

class Decl : FooNode {
    @parse_field has_plus : HasPlus
    @parse_field name : Name
    @parse_field items : ASTList[Ref]

    @export fun test_env (other : FooNode): Boolean =
    node.children_env.env_orphan = other.children_env.env_orphan

    @export fun test_struct (other : FooNode): Boolean =
    node.env_struct = other.env_struct

    @export fun test_array (other : FooNode): Boolean =
    node.env_array = other.env_array
}

@abstract @qualifier class HasPlus : FooNode {

    ## Return whether this is an instance of HasPlusPresent
    @export fun as_bool (): Boolean
}

class Name : FooNode {
}

class Ref : FooNode {
    @parse_field name : Name
}

struct EnvAssoc {
    key : SymbolType
    value : FooNode
    dest_env : LexicalEnv
    metadata : Metadata
}

struct EnvStruct {
    env : LexicalEnv
}
