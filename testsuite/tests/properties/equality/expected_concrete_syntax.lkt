import lexer_example
grammar foo_grammar {
    @main_rule main_rule <- list+(decl)
    decl <- Decl(
        HasPlus("+") Name(@identifier) "(" ref_list ")"
    )
    ref_list <- list*(ref)
    ref <- Ref(Name(@identifier))

}

@abstract class FooNode implements Node {

    fun env_struct (): EnvStruct =
    EnvStruct(env=node.children_env().env_orphan())

    fun env_array (): Array[LexicalEnv] = [node.children_env().env_orphan()]
}

class Decl : FooNode {
    @parse_field has_plus : HasPlus
    @parse_field name : Name
    @parse_field items : ASTList[Ref]

    @export fun test_env (other : FooNode): Bool =
    node.children_env().env_orphan() = other.children_env().env_orphan()

    @export fun test_struct (other : FooNode): Bool =
    node.env_struct() = other.env_struct()

    @export fun test_array (other : FooNode): Bool =
    node.env_array() = other.env_array()
}

@qualifier enum class HasPlus : FooNode {
}

class Name : FooNode implements SymbolNode {
}

class Ref : FooNode {
    @parse_field name : Name
}

struct EnvStruct {
    env : LexicalEnv
}
