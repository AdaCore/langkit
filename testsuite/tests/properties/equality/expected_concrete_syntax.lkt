grammar None_grammar {
    decl <- Decl(
        ?"+" Name(@Identifier) "(" ref_list ")"
    )
    main_rule <- list*(decl)
    ref <- Ref(Name(@Identifier))
    ref_list <- list+(ref)

}

@abstract class FooNode {

    fun env_struct (): EnvStruct = EnvStruct(env=self.children_env.env_orphan)

    fun env_array (): Array[LexicalEnv] = [self.children_env.env_orphan]
}

class Decl : FooNode {
    @parse_field has_plus : HasPlus
    @parse_field name : Name
    @parse_field items : ASTList[Ref]

    @export fun test_env (other : Entity[FooNode]): Boolean =
    self.children_env.env_orphan = other.children_env.env_orphan

    @export fun test_struct (other : Entity[FooNode]): Boolean =
    self.env_struct = other.env_struct

    @export fun test_array (other : Entity[FooNode]): Boolean =
    self.env_array = other.env_array
}

@abstract @qualifier class HasPlus : FooNode {

    ## Return whether this is an instance of HasPlusPresent
    @export fun as_bool (): Boolean
}

class Name : FooNode {
}

class Ref : FooNode {
    @parse_field name : Name
}
