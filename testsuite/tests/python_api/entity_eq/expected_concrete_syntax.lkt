import lexer_example
grammar foo_grammar {
    @main_rule main_rule <- list+(block)
    name <- Name(@identifier)
    block <- Block(params name vars)
    params <- pick("(" Params+(param) ")")
    param <- Param(name)
    vars <- pick("{" list+(var) "}")
    var <- BlockVar(name)

}

@root_node class FooNode {
}

@abstract class DefNode : FooNode {

    @export fun name (): Symbol
}

class Block : DefNode {
    @parse_field params : Params
    @parse_field name_field : Name
    @parse_field vars : ASTList[BlockVar]

    fun name (): Symbol = node.name_field.symbol

    @export fun rebind (from_block : Block, to_block : Block): Block = {
        val rbdng = self.info.rebindings.append_rebinding(
            from_block.params.children_env(), to_block.children_env()
        );
        val e_info = EntityInfo(
            md=self.info.md, from_rebound=false, rebindings=rbdng
        );

        Block(info=e_info, node=node)
    }
}

class BlockVar : DefNode {
    @parse_field name_field : Name

    fun name (): Symbol = node.name_field.symbol
}

class Param : DefNode {
    @parse_field name_field : Name

    fun name (): Symbol = node.name_field.symbol
}

class Params : ASTList[Param] {
}

class Name : FooNode {
}
