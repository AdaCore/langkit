# Check that .rebindings related built-in properties behave as expected

import lexer_example

@with_lexer(foo_lexer)
grammar foo_grammar {
    @main_rule main_rule <- list+(block)
    block <- Block(
        "def" Name(@Identifier) ?pick("{" main_rule "}")
    )
}

@abstract
class FooNode implements Node[FooNode] {
}

@rebindable
class Block: FooNode {
    @parse_field name: Name
    @parse_field inner: ASTList[Block]

    |" Helper to create a new entity from ``Entity`` but with the given
    |" rebindings.
    fun create_entity(rbdng: EnvRebindings): Entity[Block] = {
        val e_info = EntityInfo(
            md=self.info.md, rebindings=rbdng, from_rebound=false
        );

        Entity[Block](node=node, info=e_info)
    }

    @exported
    fun rebind(
        from_block: Entity[Block],
        to_block: Entity[Block]
    ): Entity[Block] = self.create_entity(
        self.info.rebindings.append_rebinding(
            from_block.children_env, to_block.children_env
        )
    )

    @exported
    fun concat_rebindings(other: Entity[Block]): Entity[Block] =
        self.create_entity(
            self.info.rebindings.concat_rebindings(other.info.rebindings)
        )

    @exported
    fun shed_rebindings(from_block: Entity[Block]): Entity[Block] =
        self.create_entity(
            from_block.children_env.shed_rebindings(self.info).rebindings
        )

    # Accessors so that main.py can explore the rebindings chain
    @exported
    fun parent_rebindings(): Entity[Block] =
        self.create_entity(self.info.rebindings.get_parent)

    @exported
    fun new(): Entity[FooNode] =
        self.info.rebindings.new_env.env_node.as_bare_entity

    @exported
    fun old(): Entity[FooNode] =
        self.info.rebindings.old_env.env_node.as_bare_entity

    env_spec {
        add_env()
    }
}

class Name: FooNode implements TokenNode {
}
