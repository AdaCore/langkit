grammar None_grammar is
    main_rule <- expression
    expression <- or(
        | @LPar expression @RPar
        | Plus(atom @Plus main_rule)
        | atom
    )
    atom <- or(Literal(@Number) | Name(@Identifier))

end
class FooNode is

    public fun null_unit (): InternalUnit = null

    public fun null_node (): Entity[Expression] = null

    public fun deref_null_unit (): Entity[FooNode] = self.null_unit.root.as_bare_entity

    public fun deref_null_node (): Entity[Expression] = self.null_node.null_node

    public fun null_node_unit (): InternalUnit = self.null_node.unit

    public fun cast_null_node (): Entity[Name] = self.null_node.to[Name]

    public fun match_null_node (): Entity[Expression] =
        match self.null_node.node do
            case l : Literal => l
            case n : Name => n
            case others => others

        end.as_bare_entity

end

class Expression : FooNode is
end

class Literal : Expression is
end

class Name : Expression is

    fun env_element (): Entity[FooNode] = self.children_env.get(self.symbol)?[0]

    public fun deref_env_element (): Entity[Expression] = self.env_element.null_node

    public fun match_env_element (): Entity[FooNode] =
        match self.env_element do
            case l : Entity[Literal] => l
            case n : Entity[Name] => n
            case others => others

        end

end

class Plus : Expression is
    parse field left : Expression
    parse field right : Expression
end

