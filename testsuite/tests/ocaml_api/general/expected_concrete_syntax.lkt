grammar None_grammar {
    node <- or(example | null | var | ident | string)
    ident <- Ident(@Identifier)
    string <- StringLiteral(@String)
    main_rule <- list*(node)
    var <- Var(@Var @LPar main_rule @RPar)
    null <- Null(@Null)
    example <- Example(@Example)

}

class FooNode {

    @export fun count (seq : Array[Entity[Example]]): Integer = seq.length

    @export fun get_a (c : CharacterType = 'a'): CharacterType = c

    @export fun get_eacute (c : CharacterType = '\xe9'): CharacterType = c

    @export fun identity (c : CharacterType): CharacterType = c

    @export fun double (c : CharacterType): Array[CharacterType] = [c, c]

    @export fun same_color (c : Color): Color = c

    @export fun same_color_dflt (c : Color = Color.Red): Color = c

    @export fun int_double (c : BigIntegerType): BigIntegerType = c + c

    @export fun me (b : Boolean): FooNodeStruct =
    new FooNodeStruct(node=if b then entity else (null))

    @export fun get_node (node_struct : FooNodeStruct): Entity[FooNode] =
    node_struct.node
}

class Example : FooNode {
}

## List of FooNode.
##
## This list node can contain one of the following nodes:
##
## * ${node_name(T.Example)}
## * ${node_name(T.Ident)}
## * ${node_name(T.Null)}
## * ${node_name(T.StringLiteral)}
## * ${node_name(T.Var)}
class ASTList[FooNode] : FooNodeBaseList {
}

## This list node can contain one of the following nodes:
##
## * ${node_name(T.Example)}
## * ${node_name(T.Ident)}
## * ${node_name(T.Null)}
## * ${node_name(T.StringLiteral)}
## * ${node_name(T.Var)}
class ASTList[FooNode] : ASTList[FooNode] {

    @export fun all_items (): Array[Entity[FooNode]] = entity.map((i) => i)

    @export fun example_items (): Array[Entity[Example]] = entity.filter_map(
        (i) => i.to![Example], (i) => i is_a Example
    )
}

class Ident : FooNode {

    @export fun sym (sym : SymbolType): SymbolType = sym
}

class Null : FooNode {
}

class StringLiteral : FooNode {
}

class Var : FooNode {
    @parse_field arg : ASTList[FooNode]
}
