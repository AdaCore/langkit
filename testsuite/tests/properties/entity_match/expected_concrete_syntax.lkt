import lexer_example
grammar foo_grammar {
    @main_rule main_rule <- or(literal | example)
    literal <- Literal(@number)
    example <- Example("example")

}

@abstract class FooNode implements Node {

    fun get_num (): Int
}

class Example : FooNode {

    fun get_num (): Int = 2
}

class Literal : FooNode implements TokenNode {

    fun get_num (): Int = 3

    fun a (): FooNode

    @export fun b (): Int = match node.a() {
        case e : Example => e.get_num()
        case c : FooNode => c.get_num()
    }

    @export fun c (): Int = match node.a() {
        case e : Example => e.get_num()
        case c : FooNode => c.get_num()
    }

    fun a (): FooNode
}
