Resolving test.lkt
==================
Expr <Id "with_abstract_list" test.lkt:1:2-1:20>
     has_type None

Expr <SingleLineStringLit test.lkt:1:21-1:31>
     has_type None

Id   <RefId "Node" test.lkt:2:27-2:31>
     has_type None
     references <TraitDecl prelude: "Node[T]">

Id   <RefId "BaseNode" test.lkt:2:32-2:40>
     has_type None
     references <ClassDecl "BaseNode" test.lkt:2:1-3:2>

Id   <RefId "ASTList" test.lkt:5:18-5:25>
     has_type None
     references <ClassDecl prelude: "ASTList[T]">

Id   <RefId "BaseNode" test.lkt:5:26-5:34>
     has_type None
     references <ClassDecl "BaseNode" test.lkt:2:1-3:2>

Decl <FunDecl "f" test.lkt:6:5-6:59>
     has_type <FunctionType "() -> Array[Entity[BaseNode]]" test.lkt>

   Id   <RefId "Array" test.lkt:6:15-6:20>
        has_type None
        references <StructDecl prelude: "Array[T]">

   Id   <RefId "Entity" test.lkt:6:21-6:27>
        has_type None
        references <StructDecl prelude: "Entity[N]">

   Id   <RefId "BaseNode" test.lkt:6:28-6:36>
        has_type None
        references <ClassDecl "BaseNode" test.lkt:2:1-3:2>

   Expr <CallExpr test.lkt:6:41-6:59>
        has_type <StructDecl prelude: "Array[Entity[BaseNode]]">

      Expr <DotExpr test.lkt:6:41-6:49>
           has_type <FunctionType prelude: "((Entity[BaseNode]) -> Entity[BaseNode]) -> Array[Entity[BaseNode]]">

         Id   <RefId "self" test.lkt:6:41-6:45>
              has_type <StructDecl prelude: "Entity[Sequence]">
              references <SelfDecl "self" test.lkt:5:1-11:2>

         Id   <RefId "map" test.lkt:6:46-6:49>
              has_type <FunctionType prelude: "((Entity[BaseNode]) -> Entity[BaseNode]) -> Array[Entity[BaseNode]]">
              references <FunDecl prelude: "map[U]">

      Expr <LambdaExpr test.lkt:6:50-6:58>
           has_type <FunctionType prelude: "(Entity[BaseNode]) -> Entity[BaseNode]">

         Decl <LambdaParamDecl "i" test.lkt:6:51-6:52>
              has_type <StructDecl prelude: "Entity[BaseNode]">

         Id   <RefId "i" test.lkt:6:57-6:58>
              has_type <StructDecl prelude: "Entity[BaseNode]">
              references <LambdaParamDecl "i" test.lkt:6:51-6:52>

<FunDecl "g" test.lkt:8:5-10:6> failed nameres:
test.lkt:8:38-8:52: error: could not determine callee type
 8 |     fun g() : Array[Entity[Child]] = self.filtermap(
   |                                      ^^^^^^^^^^^^^^ 

Decl <FunDecl "g" test.lkt:8:5-10:6>
     has_type None

<GenericTypeRef test.lkt:8:15-8:35> failed nameres:
test.lkt:8:28-8:33: error: undefined entity
 8 |     fun g() : Array[Entity[Child]] = self.filtermap(
   |                            ^^^^^ 

   Id   <RefId "Array" test.lkt:8:15-8:20>
        has_type None
        references None

   Id   <RefId "Entity" test.lkt:8:21-8:27>
        has_type None
        references None

   Id   <RefId "Child" test.lkt:8:28-8:33>
        has_type None
        references None

   Expr <CallExpr test.lkt:8:38-10:6>
        has_type None

      Expr <DotExpr test.lkt:8:38-8:52>
           has_type None

         Id   <RefId "self" test.lkt:8:38-8:42>
              has_type <StructDecl prelude: "Entity[Sequence]">
              references <SelfDecl "self" test.lkt:5:1-11:2>

         Id   <RefId "filtermap" test.lkt:8:43-8:52>
              has_type None
              references None

      Expr <LambdaExpr test.lkt:9:9-9:28>
           has_type None

         Decl <LambdaParamDecl "i" test.lkt:9:10-9:11>
              has_type <StructDecl prelude: "Entity[BaseNode]">

<CastExpr test.lkt:9:16-9:28> failed nameres:
test.lkt:9:22-9:27: error: undefined entity
 9 |         (i) => i.as![Child], (i) => i is Child
   |                      ^^^^^ 

         Expr <CastExpr test.lkt:9:16-9:28>
              has_type None

            Id   <RefId "i" test.lkt:9:16-9:17>
                 has_type <StructDecl prelude: "Entity[BaseNode]">
                 references <LambdaParamDecl "i" test.lkt:9:10-9:11>

<SimpleTypeRef test.lkt:9:22-9:27> failed nameres:
test.lkt:9:22-9:27: error: undefined entity
 9 |         (i) => i.as![Child], (i) => i is Child
   |                      ^^^^^ 

            Id   <RefId "Child" test.lkt:9:22-9:27>
                 has_type None
                 references None

      Expr <LambdaExpr test.lkt:9:30-9:47>
           has_type <FunctionType prelude: "(Entity[BaseNode]) -> Bool">

         Decl <LambdaParamDecl "i" test.lkt:9:31-9:32>
              has_type <StructDecl prelude: "Entity[BaseNode]">

         Expr <Isa test.lkt:9:37-9:47>
              has_type <EnumTypeDecl prelude: "Bool">

            Id   <RefId "i" test.lkt:9:37-9:38>
                 has_type <StructDecl prelude: "Entity[BaseNode]">
                 references <LambdaParamDecl "i" test.lkt:9:31-9:32>

<SimpleTypeRef test.lkt:9:42-9:47> failed nameres:
test.lkt:9:42-9:47: error: undefined entity
 9 |         (i) => i.as![Child], (i) => i is Child
   |                                          ^^^^^ 

            Id   <RefId "Child" test.lkt:9:42-9:47>
                 has_type None
                 references None

