import lexer_example

@with_lexer(foo_lexer)
grammar foo_grammar {
    @main_rule main_rule <- Example("example")
}

@abstract class FooNode implements Node[FooNode] {
}

class Example: FooNode {
    fun dummy_entries(count: Int, base: String): Array[EnvAssoc] = {
        val next_base = base & "o";

        [EnvAssoc(
            key=base.to_symbol, value=node, dest_env=DesignatedEnv(
                kind=DesignatedEnvKind.current_env, env_name=null[Symbol], direct_env=null[LexicalEnv]
            ), metadata=null[Metadata]
        )] & (
            if (count == 0) then null[Array[EnvAssoc]] else node.dummy_entries(count - 1, next_base)
        )
    }

    @exported fun lookup(sym: Symbol): Entity[Example] =
    node.children_env().get_first(sym).as[Example]

    env_spec {
        add_env()
        add_to_env(node.dummy_entries(100, "foo"))
    }
}
