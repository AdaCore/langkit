@spacing("alphanumericals", "alphanumericals")
lexer foo_lexer {

    @text whitespace <- p"[ \n\r\t]+"
    @family("alphanumericals") @text def <- "def"
    @text var <- "var"
    @family("alphanumericals") @text error <- "error"
    @family("alphanumericals") @text example <- "example"
    @family("alphanumericals") @text null_tok <- "null"
    @text comma <- ","
    @text dot <- "."
    @text semicolon <- ";"
    @text l_par <- "("
    @text r_par <- ")"
    @text l_brace <- "{"
    @text r_brace <- "}"
    @text equal <- "="
    @text plus <- "+"
    @text minus <- "-"
    @text less_than <- "<"
    @family("alphanumericals") @text number <- p"[0-9]+"
    @family("alphanumericals") @symbol identifier <- p"[a-zA-Z_][a-zA-Z0-9_]*"
    @text string <- p"\"[^\"]*\""
    @newline_after @text comment <- p"#(.?)+"

}
grammar foo_grammar {
    deps <- list*((Dep(("+" name)) ";"))
    defs <- list*((or(scope | var) ";"))
    @main_rule scope <- Scope(name "{" deps defs "}")
    var <- Var(id "=" name)
    id <- Id(@identifier)
    name <- or(Prefix(name "." id) | id)

}

@root_node class FooNode {
}

class Dep : FooNode {
    @parse_field name : Name
}

@abstract class Name : FooNode {

    @export fun resolve (): FooNode

    @export fun suffix_symbol (): SymbolType

    fun referenced_unit_or_error (or_error : Boolean): InternalUnit

    @export fun referenced_unit (): InternalUnit =
    node.referenced_unit_or_error(false)
}

class Id : Name {

    fun resolve (): FooNode = node.node_env.get(node, only_first=true)

    fun suffix_symbol (): SymbolType = node.symbol
}

class Prefix : Name {
    @parse_field prefix : Name
    @parse_field suffix : Id

    fun resolve (): FooNode =
    node.prefix.resolve.children_env.get(node.suffix.symbol, only_first=true)

    fun suffix_symbol (): SymbolType = node.suffix.symbol
}

class Scope : FooNode {
    @parse_field name : Name
    @parse_field deps : ASTList[Dep]
    @parse_field defs : ASTList[FooNode]

    fun initial_env (): LexicalEnv = match node.name {
        case p : Prefix => p.prefix.referenced_unit.root.children_env
        case _ => node.children_env
    }
}

class Var : FooNode {
    @parse_field name : Id
    @parse_field value : Name
}

struct EnvAssoc {
    key : SymbolType
    value : FooNode
    dest_env : LexicalEnv
    metadata : Metadata
}
