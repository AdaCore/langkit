@spacing("alphanumericals", "alphanumericals")
lexer foo_lexer {

    @text whitespace <- p"[ \n\r\t]+"
    @family("alphanumericals") @text def <- "def"
    @text var <- "var"
    @family("alphanumericals") @text error <- "error"
    @family("alphanumericals") @text example <- "example"
    @family("alphanumericals") @text null_tok <- "null"
    @text comma <- ","
    @text dot <- "."
    @text semicolon <- ";"
    @text l_par <- "("
    @text r_par <- ")"
    @text l_brace <- "{"
    @text r_brace <- "}"
    @text equal <- "="
    @text plus <- "+"
    @text minus <- "-"
    @text less_than <- "<"
    @family("alphanumericals") @text number <- p"[0-9]+"
    @family("alphanumericals") @symbol identifier <- p"[a-zA-Z_][a-zA-Z0-9_]*"
    @text string <- p"\"[^\"]*\""
    @newline_after @text comment <- p"#(.?)+"

}
grammar foo_grammar {
    @main_rule main_rule <- item
    item <- or(couple | literal)
    couple <- Couple("(" item "," item ")")
    literal <- Literal(@number)

}

@root_node class FooNode {

    @export fun first_set (): Boolean = self.info.md.is_first

    @export fun second_set (): Boolean = self.info.md.is_second

    @export fun test_main (): FooNode =
    node.as_entity.to[Couple].first_entity.first
}

class Couple : FooNode {
    @parse_field first : FooNode
    @parse_field second : FooNode

    fun first_entity (): Couple =
    node.as_entity.get_entity(Metadata(is_first=true, is_second=false))

    fun get_entity (md : Metadata): Couple = Couple(
        info=EntityInfo(
            md=md, from_rebound=false, rebindings=null
        ), node=node
    )

    @export fun property_on_entity (): Couple =
    # Check that we can do ".get_entity" even when the prefix is an entity
    node.as_entity.get_entity(node.as_entity.info.md)
}

class Literal : FooNode {
}
