Resolving test.lkt
==================
Id   <RefId "Node" test.lkt:1:27-1:31>
     references <GenericDecl prelude: "Node">

Id   <RefId "RootNode" test.lkt:1:32-1:40>
     references <ClassDecl "RootNode" test.lkt:1:1-1:44>

Id   <RefId "RootNode" test.lkt:2:19-2:27>
     references <ClassDecl "RootNode" test.lkt:1:1-1:44>

Id   <RefId "ASTList" test.lkt:3:18-3:25>
     references <GenericDecl prelude: "ASTList">

Id   <RefId "RootNode" test.lkt:3:26-3:34>
     references <ClassDecl "RootNode" test.lkt:1:1-1:44>

Id   <RefId "ChildNode" test.lkt:3:36-3:45>
     references <ClassDecl "ChildNode" test.lkt:2:1-2:30>

Id   <RefId "RootNode" test.lkt:5:4-5:12>
     references <ClassDecl "RootNode" test.lkt:1:1-1:44>

Id   <RefId "ChildNode" test.lkt:6:4-6:13>
     references <ClassDecl "ChildNode" test.lkt:2:1-2:30>

Id   <RefId "a" test.lkt:6:16-6:17>
     references <FieldDecl "a" test.lkt:5:1-5:12>

Expr <RefId "a" test.lkt:6:16-6:17>
     has type <ClassDecl "RootNode" test.lkt:1:1-1:44>

Id   <RefId "ChildNode" test.lkt:6:21-6:30>
     references <ClassDecl "ChildNode" test.lkt:2:1-2:30>

Expr <CastExpr test.lkt:6:16-6:31>
     has type <ClassDecl "ChildNode" test.lkt:2:1-2:30>

Id   <RefId "Int" test.lkt:7:13-7:16>
     references <StructDecl prelude: "Int">

Id   <RefId "a" test.lkt:7:19-7:20>
     references <FieldDecl "a" test.lkt:5:1-5:12>

Expr <RefId "a" test.lkt:7:19-7:20>
     has type <ClassDecl "RootNode" test.lkt:1:1-1:44>

Id   <RefId "ChildNode" test.lkt:7:24-7:33>
     references <ClassDecl "ChildNode" test.lkt:2:1-2:30>

test.lkt:7:19: error: Mismatched types: expected `Int`, got `ChildNode`
7 | @invalid c: Int = a.as[ChildNode]
  |                   ^^^^^^^^^^^^^^^

Id   <RefId "Int" test.lkt:8:13-8:16>
     references <StructDecl prelude: "Int">

Id   <RefId "a" test.lkt:8:19-8:20>
     references <FieldDecl "a" test.lkt:5:1-5:12>

Expr <RefId "a" test.lkt:8:19-8:20>
     has type <ClassDecl "RootNode" test.lkt:1:1-1:44>

Id   <RefId "Int" test.lkt:8:24-8:27>
     references <StructDecl prelude: "Int">

Expr <CastExpr test.lkt:8:19-8:28>
     has type <StructDecl prelude: "Int">

test.lkt:8:19: error: Invalid cast: only up/down casting allowed
8 | @invalid d: Int = a.as[Int]
  |                   ^^^^^^^^^

Id   <RefId "Children" test.lkt:9:4-9:12>
     references <ClassDecl "Children" test.lkt:3:1-3:49>

Id   <RefId "a" test.lkt:9:15-9:16>
     references <FieldDecl "a" test.lkt:5:1-5:12>

Expr <RefId "a" test.lkt:9:15-9:16>
     has type <ClassDecl "RootNode" test.lkt:1:1-1:44>

Id   <RefId "Children" test.lkt:9:20-9:28>
     references <ClassDecl "Children" test.lkt:3:1-3:49>

Expr <CastExpr test.lkt:9:15-9:29>
     has type <ClassDecl "Children" test.lkt:3:1-3:49>

Id   <RefId "Children" test.lkt:10:13-10:21>
     references <ClassDecl "Children" test.lkt:3:1-3:49>

Id   <RefId "b" test.lkt:10:24-10:25>
     references <FieldDecl "b" test.lkt:6:1-6:31>

Expr <RefId "b" test.lkt:10:24-10:25>
     has type <ClassDecl "ChildNode" test.lkt:2:1-2:30>

Id   <RefId "Children" test.lkt:10:29-10:37>
     references <ClassDecl "Children" test.lkt:3:1-3:49>

Expr <CastExpr test.lkt:10:24-10:38>
     has type <ClassDecl "Children" test.lkt:3:1-3:49>

test.lkt:10:24: error: Invalid cast: only up/down casting allowed
10 | @invalid f: Children = b.as[Children]
   |                        ^^^^^^^^^^^^^^

