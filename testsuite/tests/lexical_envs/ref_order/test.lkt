# Check that when declaring a sequence of referenced envs, the resolver of each
# env can only depend on referenced envs added *before* itself. Thanks to this
# property, also check that a certain kind of lookup that used to take forever
# now completes instantaneously.

import lexer_example

@with_lexer(foo_lexer)
grammar foo_grammar {
    @main_rule main_rule <- list+(scope)
    scope <- Scope(
        "def" identifier "{" list*(or(scope | ref_clause)) "}"
    )
    identifier <- Id(@Identifier)
    ref_clause <- RefClause("+" identifier)
}

@abstract
class FooNode implements Node[FooNode] {
    @exported
    fun lookup(sym: Symbol): Entity[FooNode] =
        self.children_env.get_first(sym)

    @exported
    fun with_rebindings(): Entity[FooNode] = {
        val rbs =
            self
            .info
            .rebindings
            .append_rebinding(node.children_env, node.children_env);
        val e_info = EntityInfo(
            md=self.info.md,
            rebindings=rbs,
            from_rebound=self.info.from_rebound
        );

        Entity[FooNode](node=node, info=e_info)
    }
}

class Id: FooNode implements TokenNode {
}

class RefClause: FooNode {
    @parse_field ref_id: Id

    fun resolve(): LexicalEnv = self.lookup(node.ref_id.symbol)?.children_env

    env_spec {
        reference([node.as[FooNode]], RefClause.resolve)
    }
}

class Scope: FooNode {
    @parse_field name: Id
    @parse_field content: ASTList[FooNode]

    env_spec {
        add_to_env_kv(node.name.symbol, node)
        add_env()
    }
}
