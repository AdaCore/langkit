grammar None_grammar {
    decl <- Decl(Name(@Identifier) @LPar list+(ref) @RPar)
    main_rule <- list*(decl)
    ref <- Ref(Name(@Identifier))

}

class FooNode {

    fun resolve_ref (): Entity[FooNode] = match self {
        case r : Ref => r.parent.parent.node_env.get(r.name)?(0)
        case _ => null

    }
}

class Decl : FooNode {
    @parse_field name : Name
    @parse_field refs : ASTList[Ref]
}

class Name : FooNode {
}

class Ref : FooNode {
    @parse_field name : Name

    @export fun resolve (): Entity[FooNode] = self.node_env.get(self.name)?(0)
}
