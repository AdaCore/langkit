grammar None_grammar {
    name <- Name(@Identifier)
    vars <- ("{" list+(var) "}")
    main_rule <- list*(or(
        | Def("def" name imports vars expr)
        | expr
    ))
    atom <- or(lit | ref)
    expr <- or(atom | plus)
    lit <- Lit(@Number)
    plus <- ("(" Plus(expr "+" expr) ")")
    imports <- ("(" list+(derived_ref) ")")
    var <- Var(name "=" expr)
    derived_ref <- DerivedRef(name)
    ref <- Ref(name)

}

class FooNode {
}

class Def : FooNode {
    @parse_field name : Name
    @parse_field imports : ASTList[DerivedRef]
    @parse_field vars : ASTList[Var]
    @parse_field expr : Expr
}

class Expr : FooNode {
}

class Atom : Expr {
}

class Lit : Atom {
}

class Ref : Atom {
    @parse_field name : Name

    @export fun resolve (): Entity[FooNode] =
    self.node_env.get(self.name.symbol, only_first=true)

    @export fun dummy (): Array[Entity[FooNode]] =
    self.referenced_env.get(self.name.symbol)

    fun referenced_env (): LexicalEnv = null.to[LexicalEnv]

    fun referenced_env (): LexicalEnv
}

class MiddleRef : Ref {

    fun referenced_env (): LexicalEnv = null.to[LexicalEnv]
}

class DerivedRef : MiddleRef {

    fun referenced_env (): LexicalEnv =
    self.unit.root.node_env.get(self.name.symbol, only_first=true).children_env
}

class Plus : Expr {
    @parse_field lhs : Expr
    @parse_field rhs : Expr
}

class Name : FooNode {
}

class Var : FooNode {
    @parse_field name : Name
    @parse_field expr : Expr
}
