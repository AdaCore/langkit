grammar FooGrammar {
    @main_rule main_rule <- Block(
        Name(@Identifier) ("(" list+(Ref(Name(@Identifier))) ")")
    )

}

@root_node class FooNode {
}

class Block : FooNode {
    @parse_field name : Name
    @parse_field content : ASTList[Ref]
}

class Name : FooNode {
}

class Ref : FooNode {
    @parse_field name : Name

    @export fun referenced (): FooNode =
    node.referenced_env.env_node.as_bare_entity

    @memoized fun referenced_env (): LexicalEnv =
    node.node_env.get(node.name.symbol)?(0).children_env
}

struct EnvAssoc {
    key : SymbolType
    value : FooNode
    dest_env : LexicalEnv
    metadata : Metadata
}
