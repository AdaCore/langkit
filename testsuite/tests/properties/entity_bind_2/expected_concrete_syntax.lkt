import lexer_example

@with_lexer(foo_lexer)
grammar foo_grammar {
    @main_rule main_rule <- list+(or(Literal(@number) | Identifier(@identifier)))

}

@abstract class FooNode implements Node[FooNode] {
}

@abstract class RootNode : FooNode {
    var: LogicVar

    @abstract fun xref_eq(arg1: FooNode, arg2: FooNode): Equation

    @export fun solve_eq(arg1: FooNode, arg2: FooNode): Bool =
    node.xref_eq(arg1, arg2).solve()
}

class Identifier : RootNode implements TokenNode {

    fun xref_eq(arg1: FooNode, arg2: FooNode): Equation =
    %domain(node.var, [node])
}

class Literal : RootNode implements TokenNode {

    fun conv(): Literal = self

    fun xref_eq(arg1: FooNode, arg2: FooNode): Equation =
    (%domain(node.var, [arg1])) and (
        %eq(node.var, arg2, conv_prop=BareLiteral.conv)
    )
}
