@spacing(alphanumericals, alphanumericals)
lexer foo_lexer {

    whitespace <- p"[ \n\r\t]+"

    family alphanumericals {
        def <- "def"
    }

    var <- "var"

    family alphanumericals {
        error <- "error"
        example <- "example"
        null_tok <- "null"
    }

    comma <- ","
    dot <- "."
    semicolon <- ";"
    l_par <- "("
    r_par <- ")"
    l_brace <- "{"
    r_brace <- "}"
    equal <- "="
    plus <- "+"
    minus <- "-"
    less_than <- "<"

    family alphanumericals {
        number <- p"[0-9]+"
        @symbol() identifier <- p"[a-zA-Z_][a-zA-Z0-9_]*"
    }

    string <- p"\"[^\"]*\""
    @newline_after comment <- p"#(.?)+"
}
grammar foo_grammar {
    @main_rule main_rule <- list+(or(Literal(@number) | Identifier(@identifier)))

}

@root_node class FooNode {
}

@abstract class RootNode : FooNode {
    var : LogicVar

    fun xref_eq (arg1 : FooNode, arg2 : FooNode): LogicEquation

    @export fun solve_eq (arg1 : FooNode, arg2 : FooNode): Bool =
    node.xref_eq(arg1, arg2).solve
}

class Identifier : RootNode {

    fun xref_eq (arg1 : FooNode, arg2 : FooNode): LogicEquation =
    %domain(node.var, [node])
}

class Literal : RootNode {

    fun is_eq (other : Literal): Bool = node.as_entity = other

    fun xref_eq (arg1 : FooNode, arg2 : FooNode): LogicEquation =
    (%domain(node.var, [arg1])) and (
        %eq(node.var, arg2, eq_prop=BareLiteral.is_eq)
    )
}
