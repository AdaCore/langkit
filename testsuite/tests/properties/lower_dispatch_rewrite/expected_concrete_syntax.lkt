import lexer_example
grammar foo_grammar {
    name <- Name(@identifier)
    @main_rule main_rule <- list+(or(
        | Def("def" name imports vars expr)
        | expr
    ))
    imports <- pick("(" list*(derived_ref) ")")
    var <- Var(name "=" expr)
    vars <- pick("{" list*(var) "}")
    expr <- or(atom | plus)
    atom <- or(lit | ref)
    lit <- Lit(@number)
    ref <- Ref(name)
    derived_ref <- DerivedRef(name)
    plus <- pick("(" Plus(expr "+" expr) ")")

}

@root_node class FooNode {
}

class Def : FooNode {
    @parse_field name : Name
    @parse_field imports : ASTList[DerivedRef]
    @parse_field vars : ASTList[Var]
    @parse_field expr : Expr
}

@abstract class Expr : FooNode {
}

@abstract class Atom : Expr {
}

class Lit : Atom {
}

class Ref : Atom {
    @parse_field name : Name

    @export fun resolve (): FooNode =
    node.node_env.get(node.name.symbol, only_first=true)

    @export fun dummy (): Array[FooNode] =
    node.referenced_env.get(node.name.symbol)

    fun referenced_env (): LexicalEnv = null

    fun referenced_env (): LexicalEnv
}

class MiddleRef : Ref {

    fun referenced_env (): LexicalEnv = null
}

class DerivedRef : MiddleRef {

    fun referenced_env (): LexicalEnv =
    node.unit.root.node_env.get(node.name.symbol, only_first=true).children_env
}

class Plus : Expr {
    @parse_field lhs : Expr
    @parse_field rhs : Expr
}

class Name : FooNode {
}

class Var : FooNode {
    @parse_field name : Name
    @parse_field expr : Expr
}

struct EnvAssoc {
    key : Symbol
    value : FooNode
    dest_env : LexicalEnv
    metadata : Metadata
}
