== bad_rule_1.lkt ==
bad_rule_1.lkt:4:5: error: Unexpected declaration in lexer
4 |     lexer bar_lexer {
  |     ^


== case_1.lkt ==
case_1.lkt:5:11-5:12: Expected 'discard', got Number

== case_2.lkt ==
case_2.lkt:5:5: error: Invalid case rule topology
5 |     match p"foo" {
  |     ^


== case_3.lkt ==
case_3.lkt:5:5: error: Invalid case rule topology
5 |     match p"foo" {
  |     ^


== case_4.lkt ==
case_4.lkt:5:5: error: Invalid case rule topology
5 |     match p"foo" {
  |     ^


== case_5.lkt ==
case_5.lkt:6:36: error: Unknown token: bar
6 |         if previous_token is foo | bar then send(foo, 3)
  |                                    ^^^


== case_6.lkt ==
case_6.lkt:7:24-7:27: Expected Number, got Identifier

== case_7.lkt ==
case_7.lkt:7:19: error: Unknown token: bar
7 |         else send(bar, 3)
  |                   ^^^


== family_1.lkt ==
family_1.lkt:4:5: error: Only lexer rules allowed in family blocks
4 |     family keywords {
  |     ^


== foo.lkt ==
Code generation was successful

== pattern_1.lkt ==
pattern_1.lkt:4:16: error: unbalanced square bracket
4 |     example <- p"["
  |                ^^^^


== pattern_2.lkt ==
pattern_2.lkt:4:16: error: unknown pattern: no_such_pattern
4 |     example <- p"{no_such_pattern}"
  |                ^^^^^^^^^^^^^^^^^^^^


== pattern_3.lkt ==
pattern_3.lkt:6:16: error: infinite recursion in pat1
6 |     example <- p"{pat1}"
  |                ^^^^^^^^^


== pattern_4.lkt ==
pattern_4.lkt:4:5: error: unbalanced square bracket
4 |     val pat = p"["
  |     ^^^^^^^^^^^^^^


== pattern_5.lkt ==
pattern_5.lkt:6:12: error: nothing to repeat
6 |     ex3 <- p"+"
  |            ^^^^


== pattern_6.lkt ==
pattern_6.lkt:4:16: error: unbalanced parentheses
4 |     example <- p"a)"
  |                ^^^^^


== pattern_7.lkt ==
pattern_7.lkt:5:5: error: Duplicate pattern name
5 |     val pat = p"example"
  |     ^^^^^^^^^^^^^^^^^^^^


== pattern_8.lkt ==
pattern_8.lkt:4:14: error: Types are not allowed in lexer declarations
4 |     val pat: Int = p"example"
  |              ^^^


== pattern_9.lkt ==
pattern_9.lkt:4:5: error: Pattern string literal expected
4 |     val pat = 1
  |     ^^^^^^^^^^^


== rule_1.lkt ==
rule_1.lkt:4:5: error: termination is a reserved token name
4 |     termination <- "def"
  |     ^^^^^^^^^^^^^^^^^^^^


== rule_2.lkt ==
rule_2.lkt:4:5: error: lexing_failure is a reserved token name
4 |     lexing_failure <- "example"
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^


== spacing_1.lkt ==
spacing_1.lkt:4:5: error: Missing "with" argument
4 |     @unparse_spacing() family ids {
  |     ^^^^^^^^^^^^^^^^^^


== spacing_2.lkt ==
spacing_2.lkt:4:5: error: Token family name expected
4 |     @unparse_spacing(with=1)
  |     ^^^^^^^^^^^^^^^^^^^^^^^^


== spacing_3.lkt ==
spacing_3.lkt:4:27: error: Unknown token family: foo
4 |     @unparse_spacing(with=foo)
  |                           ^^^


== token_action_1.lkt ==
token_action_1.lkt:4:5: error: Arguments required for this annotation
4 |     @text example <- "example"
  |     ^^^^^


== token_action_2.lkt ==
token_action_2.lkt:4:5: error: No positional argument allowed
4 |     @text(1) example <- "example"
  |     ^^^^^^^^


== token_action_3.lkt ==
token_action_3.lkt:4:5: error: Invalid arguments: bar
4 |     @text(bar=true) example <- "example"
  |     ^^^^^^^^^^^^^^^


== token_action_4.lkt ==
token_action_4.lkt:4:31: error: Boolean literal expected
4 |     @text(start_ignore_layout=1) example <- "example"
  |                               ^


== token_action_5.lkt ==
token_action_5.lkt:4:5: error: At most one token action allowed
4 |     @ignore @text() example <- "example"
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


== token_matcher.lkt ==
token_matcher.lkt:4:16: error: Invalid lexing expression
4 |     example <- /
  |                ^


== token_name.lkt ==
token_name.lkt:5:5: error: Duplicate token name
5 |     example <- "null"
  |     ^^^^^^^^^^^^^^^^^


Done
