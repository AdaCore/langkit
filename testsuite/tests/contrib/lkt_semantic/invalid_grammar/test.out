Resolving test.lkt
==================
Id   <RefId "foo_lexer" test.lkt:3:22-3:31>
     references <LexerDecl "foo_lexer" lexer_example.lkt:1:1-52:2>

Id   <RefId "Int" test.lkt:4:12-4:15>
     references <StructDecl prelude: "Int">

Expr <NumLit test.lkt:4:18-4:19>
     has type <StructDecl prelude: "Int">

test.lkt:4:5: error: value declaration forbidden in grammar declaration
4 |     val i: Int = 0
  |     ^^^^^^^^^^^^^^

Id   <RefId "foo_lexer" test.lkt:9:22-9:31>
     references <LexerDecl "foo_lexer" lexer_example.lkt:1:1-52:2>

test.lkt:12:5: error: only one main rule allowed
12 |     @main_rule foobar <- "foobar"
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

test.lkt:13:5: error: only one main rule allowed
13 |     @main_rule baz <- "baz"
   |     ^^^^^^^^^^^^^^^^^^^^^^^

Id   <RefId "foo_lexer" test.lkt:16:22-16:31>
     references <LexerDecl "foo_lexer" lexer_example.lkt:1:1-52:2>

test.lkt:16:33: error: main rule missing (@main_rule annotation)
16 |  @invalid @with_lexer(foo_lexer) grammar main_missing {
   | _________________________________^
   ||
   || ~~~ 1 other lines ~~~
   ||
18 || }
   ||_^

test.lkt:20:10: error: exactly 1 positional argument expected
20 | @invalid @with_lexer grammar invalid_with_lexer {
   |          ^^^^^^^^^^^

test.lkt:23:10: error: missing mandatory "@with_lexer" annotation
23 |  @invalid grammar with_lexer_missing {
   | __________^
24 || }
   ||_^

