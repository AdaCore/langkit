import lexer_example
grammar foo_grammar {
    @main_rule main_rule <- list+(decl)
    decl <- Decl(Name(@identifier) "(" list*(ref) ")")
    ref <- Ref(Name(@identifier))

}

@abstract class FooNode implements Node {
}

class Decl : FooNode {
    @parse_field name : Name
    @parse_field refs : ASTList[Ref]
}

class Name : FooNode implements TokenNode {
}

class Ref : FooNode {
    @parse_field name : Name

    @export fun resolve (): FooNode = {
        bind env = node.parent.parent.node_env();

        env.get(node.name.symbol)?(0)
    }
}
