grammar None_grammar {
    node <- or(example | null_node)
    main_rule <- list*(node)
    example <- Example(@Example)
    null_node <- NullNode(@Null)

}

class FooNode {

    @export fun count (seq : Array[Entity[Example]]): Integer = seq.length
}

class Example : FooNode {
}

## This list node can contain one of the following nodes:
##
## * ${node_name(T.Example)}
## * ${node_name(T.NullNode)}
class Sequence : ASTList[FooNode] {

    @export fun all_items (): Array[Entity[FooNode]] = entity.map((i) => i)

    @export fun example_items (): Array[Entity[Example]] = entity.filter_map(
        (i) => i.to[Example]!, (i) => i is_a Example
    )
}

class NullNode : FooNode {
}
