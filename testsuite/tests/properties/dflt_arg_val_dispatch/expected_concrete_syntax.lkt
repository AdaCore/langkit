@spacing("alphanumericals", "alphanumericals")
lexer foo_lexer {

    @text whitespace <- p"[ \n\r\t]+"
    @family("alphanumericals") @text def <- "def"
    @text var <- "var"
    @family("alphanumericals") @text error <- "error"
    @family("alphanumericals") @text example <- "example"
    @family("alphanumericals") @text null_tok <- "null"
    @text comma <- ","
    @text dot <- "."
    @text semicolon <- ";"
    @text l_par <- "("
    @text r_par <- ")"
    @text l_brace <- "{"
    @text r_brace <- "}"
    @text equal <- "="
    @text plus <- "+"
    @text minus <- "-"
    @text less_than <- "<"
    @family("alphanumericals") @text number <- p"[0-9]+"
    @family("alphanumericals") @symbol identifier <- p"[a-zA-Z_][a-zA-Z0-9_]*"
    @text string <- p"\"[^\"]*\""
    @newline_after @text comment <- p"#(.?)+"

}
grammar foo_grammar {
    @main_rule main_rule <- ASTList[Decl]+(or(var_decl | fun_decl))
    var_decl <- VarDecl("var" identifier)
    fun_decl <- FunDecl("def" identifier)
    identifier <- Identifier(@identifier)

}

@root_node class FooNode {
}

@abstract class Decl : FooNode {
    @parse_field name : Identifier

    @export fun prop (arg : Boolean = false): Boolean = arg

    fun prop (arg : Boolean = false): Boolean
}

class FunDecl : Decl {
}

class VarDecl : Decl {

    fun prop (arg : Boolean = false): Boolean = not arg
}

class Identifier : FooNode {
}
