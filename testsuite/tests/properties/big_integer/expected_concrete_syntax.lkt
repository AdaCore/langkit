grammar None_grammar {
    decl <- Decl(@Def name @Equal expr)
    name <- Identifier(@Identifier)
    main_rule <- list*(decl)
    expr <- or(op | atom)
    literal <- Literal(@Number)
    atom <- or(ref | literal)
    ref <- Ref(name)
    op <- or(
        | Plus(atom @Plus expr)
        | Minus(atom @Minus expr)
        | Equal(atom @Equal expr)
        | LessThan(atom @LessThan expr)
    )

}

class FooNode {

    public fun identity (value : BigIntegerType): BigIntegerType = value
}

class Decl : FooNode {
    parse field name : Identifier
    parse field expr_tree : Expr
}

class Expr : FooNode {

    public fun evaluate (): BigIntegerType

    public fun evaluate_as_int (): Integer = <as_int(<FieldAccess .evaluate>)>
}

class Equal : Expr {
    parse field left : Expr
    parse field right : Expr

    fun evaluate (): BigIntegerType = <BigInteger <If>>
}

class LessThan : Expr {
    parse field left : Expr
    parse field right : Expr

    fun evaluate (): BigIntegerType = <BigInteger <If>>
}

class Literal : Expr {

    fun evaluate (): BigIntegerType
}

class Minus : Expr {
    parse field left : Expr
    parse field right : Expr

    fun evaluate (): BigIntegerType = self.left.evaluate - self.right.evaluate
}

class Plus : Expr {
    parse field left : Expr
    parse field right : Expr

    fun evaluate (): BigIntegerType = self.left.evaluate + self.right.evaluate
}

class Ref : Expr {
    parse field name : Identifier

    fun evaluate (): BigIntegerType =
    self.node_env.get(self.name.symbol, only_first=true).to[Decl].expr_tree.evaluate
}

"""
List of Decl.
"""
class ASTList[Decl] : FooNodeBaseList {
}

class Identifier : FooNode {
}
