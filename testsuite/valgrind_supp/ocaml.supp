# V328-009: libgnarl has memory leaks when pragma Interrupt_State (SIGSEGV,
# System) is active.
{
   GNAT tasking runtime
   Memcheck:Leak
   ...
   fun:system__interrupts___elabs
   fun:langkit_sigsegv_handlerinit
   ...
}
{
   GNAT tasking runtime
   Memcheck:Leak
   ...
   fun:system__interrupts___elabb
   fun:langkit_sigsegv_handlerinit
   ...
}

{
   allocate_n implementation is supposed to free the allocated pointer itself
   Memcheck:Leak
   fun:calloc
   fun:ctypes_allocate
   fun:camlCtypes_memory__allocate_n_*
   ...
}
{
   false positives with camlForeign
   Memcheck:Leak
   fun:malloc
   ...
   fun:caml_stat_alloc
   fun:ctypes_prep_callspec
   ...
}
{
   false positives with camlForeign
   Memcheck:Leak
   fun:malloc
   ...
   fun:caml_stat_resize
   fun:ctypes_add_argument
   ...
}
{
   false positives with camlForeign
   Memcheck:Leak
   fun:realloc
   ...
   fun:caml_stat_resize
   fun:ctypes_add_argument
   ...
}
{
   false positives with caml mutex
   Memcheck:Leak
   fun:malloc
   ...
   fun:caml_mutex_new
   ...
}
{
   false positives with caml thread
   Memcheck:Leak
   fun:malloc
   fun:caml_thread_new_descriptor
   fun:caml_thread_initialize
   ...
}
{
   caml is managing the memory, suppress caml_alloc_for_heap calls
   Memcheck:Leak
   fun:malloc
   fun:caml_stat_alloc_aligned_noexc
   fun:caml_alloc_for_heap
   ...
}
{
   false positives in caml startup code
   Memcheck:Leak
   fun:malloc
   fun:caml_stat_alloc*
   fun:caml_init_atom_table
   fun:init_static
   ...
}

# Thread-local storage support seems to produce memory leaks with GNAT 24.3, at
# least when running inside an OCaml program.
{
   tls_get_addr_leak
   Memcheck:Leak
   match-leak-kinds: possible
   fun:memalign
   fun:tls_get_addr_tail
   fun:__tls_get_addr
   fun:system__task_primitives__operations__enter_task
   fun:system__tasking__stages__task_wrapper
   fun:start_thread
   fun:clone
}
