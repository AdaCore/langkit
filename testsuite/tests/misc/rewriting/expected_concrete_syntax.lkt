grammar None_grammar {
    main_rule <- list+(def_rule)
    def_rule <- Def(
        @Def name ?@LPar list*(name, @Comma) @RPar @Equal expr
    )
    name <- Name(@Identifier)
    expr <- or(
        | Plus(expr @Plus expr)
        | ParenExpr(@LPar expr @RPar)
        | Ref(name)
        | Literal(@Number)
    )

}

class FooNode {
}

class Def : FooNode {
    parse field name : Name
    parse field args : ASTList[Name]
    parse field expr : Expr
}

class Expr : FooNode {
}

class Literal : Expr {
}

class ParenExpr : Expr {
    parse field expr : Expr
}

class Plus : Expr {
    parse field lhs : Expr
    parse field rhs : Expr
}

class Ref : Expr {
    parse field name : Name
}

"""
List of Def.
"""
class ASTList[Def] : FooNodeBaseList {
}

"""
List of Name.
"""
class ASTList[Name] : FooNodeBaseList {
}

class Name : FooNode {
}
