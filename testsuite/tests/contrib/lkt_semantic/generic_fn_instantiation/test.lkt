#
# Generic functions instantiation tests
#

# Support generics

@external generic [T]
fun convert_int(var: Int): T

@external generic [T]
fun identity(var: T): T

@external generic [T]
fun singleton(var: T): Array[T]

@external generic [T]
fun apply (fn: (T) -> T, v: T): T

# Explicit instantiations
fun test_explicit_int_to(): String = convert_int[String](12)
fun test_explicit_identity(): Int = identity[Int](12)
fun test_explicit_singleton(): Array[Int] = singleton[Int](12)

# Explicit generic instantiation with function argument
fun double (arg: Int): Int = arg * 2
fun test_apply(): Int = apply[Int](double, 12)

# Test paren expr
fun test_paren_expr(): Int = (if true then 12 else null)

# Test null exclusion expr
fun test_null_excl_expr(): Int = (if true then 12 else null)!

# Implicit instantiations

# Check that we can instantiate a function depending on its target type,
# without any dependent parameters.
fun test_int_to(): String = convert_int(12)

# Check that we can instantiate a function depending on its target type, and
# properly resolve parameters with types that depend on the generic formal
# types.
fun test_identity(): Int = identity(12)

# Check that we can instantiate a function with a more complex return type that
# is a composed generic type.
fun test_singleton(): Array[Int] = singleton(12)

# Implicit generic instantiation with function argument
fun test_implicit_apply(): Int = apply(double, 12)

# Ambiguous generic instantiation
@external generic [T]
fun fooz(x: T, y: T): Int

@invalid fun test_ambiguous_generic_instantiation(): Int = fooz(1, "lol")

# Instantiation is fine, wrong param
@invalid fun test_invalid_singleton(): Array[Int] = singleton("lol")

# Instantiation with wrong expected type 1
@invalid fun test_invalid_singleton_2(): Int = singleton("lol")

generic [T, U]
struct Dummy {}

# Instantiation with wrong expected type 1
@invalid fun test_invalid_singleton_3(): Dummy[Int, String] = singleton("lol")

# Test rel operator
fun test_rel(a: Int): Bool = (a = 15) or (a = 18)

# Test that labda params don't leak in their outside env
@external fun test_lambda_leak_support(a: (Int) -> Int, b: (Int) -> Int): Int

@invalid fun test_lambda_leak(): Int =
    test_lambda_leak_support(
        (xxx) => xxx * 2,
        (yyy) => xxx * yyy
#                ^ should be undefined
    )
