import lexer_example

@with_lexer(foo_lexer)
grammar foo_grammar {
    @main_rule main_rule <- Example("example")
}

dynvar my_var: Int

@abstract class FooNode implements Node[FooNode] {
}

class Example : FooNode {
    var1: LogicVar
    var2: LogicVar

    fun predicate1(n: Entity[FooNode], flag1: Bool = false, flag2: Bool = true): Bool =
    flag1 and (n.is_null) and flag2

    @export fun prop1(): Bool = {
        val eq = %predicate(BareExample.predicate1, node.var1, node.var2);

        eq.solve()
    }

    @with_dynvars(my_var) fun predicate2(n: Entity[FooNode], flag: Bool = false): Bool =
    (n.is_null) and false and flag

    @export fun prop2(): Bool = {
        val eq = {
            bind my_var = 1;

            %predicate(BareExample.predicate2, node.var1, node.var2)
        };

        eq.solve()
    }

    @with_dynvars(my_var=0) fun predicate3(n: Entity[FooNode], flag: Bool = false): Bool =
    (n.is_null) and false and flag

    @export fun prop3(): Bool = {
        val eq = {
            bind my_var = 1;

            %predicate(BareExample.predicate3, node.var1, node.var2)
        };

        eq.solve()
    }
}
