grammar foo_grammar {
    @main_rule main_rule <- list+(or(scope | self_decl | foreign_decl))
    scope <- Scope(simple_identifier "{" list*(scope) "}")
    identifier <- or(
        | ScopedId(identifier "." simple_identifier)
        | simple_identifier
    )
    simple_identifier <- SimpleId(@Identifier)
    foreign_decl <- ForeignDecl(identifier)
    self_decl <- SelfDecl("+" identifier ?("(" identifier ")"))

}

@root_node class FooNode {
}

class ForeignDecl : FooNode {
    @parse_field id : Id
}

@abstract class Id : FooNode {

    fun simple_name (): SimpleId

    fun resolve (base_env : LexicalEnv): Scope
}

class ScopedId : Id {
    @parse_field scope : Id
    @parse_field name : SimpleId

    fun simple_name (): SimpleId = node.name

    fun resolve (base_env : LexicalEnv): Scope =
    node.scope.resolve(base_env).children_env.get(node.name.symbol, only_first=true).node.to[Scope]
}

class SimpleId : Id {

    fun simple_name (): SimpleId = node

    fun resolve (base_env : LexicalEnv): Scope =
    base_env.get(node.symbol, only_first=true).node.to[Scope]
}

class Scope : FooNode {
    @parse_field name : SimpleId
    @parse_field content : ASTList[Scope]
}

class SelfDecl : FooNode {
    @parse_field id : Id
    @parse_field md_node : Id
}

struct EnvAssoc {
    key : SymbolType
    value : FooNode
    dest_env : LexicalEnv
    metadata : Metadata
}
