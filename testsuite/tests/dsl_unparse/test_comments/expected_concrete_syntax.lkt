@spacing(alphanumericals, alphanumericals)
lexer foo_lexer {

    whitespace <- p"[ \n\r\t]+"

    family alphanumericals {
        def <- "def"
    }

    var <- "var"

    family alphanumericals {
        error <- "error"
        example <- "example"
        null_tok <- "null"
    }

    comma <- ","
    dot <- "."
    semicolon <- ";"
    l_par <- "("
    r_par <- ")"
    l_brace <- "{"
    r_brace <- "}"
    equal <- "="
    plus <- "+"
    minus <- "-"
    less_than <- "<"

    family alphanumericals {
        number <- p"[0-9]+"
        @symbol identifier <- p"[a-zA-Z_][a-zA-Z0-9_]*"
    }

    string <- p"\"[^\"]*\""
    @newline_after comment <- p"#(.?)+"
}
grammar foo_grammar {
    @main_rule main_rule <- ExampleNode("example")

}

## Root node class for Test AST nodes.
@root_node class TestNode {
}

## Example node.
##
## Second line.
class ExampleNode : TestNode {

    ## docstring.
    @export fun test_no_var (): Int = # hello
    42

    @export fun prop_inline (): Int = 43

    @export fun prop_lambda (x : Int): Int = # identity
    # yep
    x

    @export fun test_cond (x : Int): Int = # incredible function
    # case 0
    if (x = 0) then (
        # identity
        x
    )
    # case 1
    elif (x = 1) then (
        # increment
        x + (1)
    )
    # otherwise double
    else (x + x)

    @export fun test_if (): Int = {
        # define x
        # let's see... maybe 24?
        val x = 24;

        # call foo
        # no way!
        if (true) then (
            # haha
            # second
            if (false) then (
                # nope
                12
            ) else (
                # finally!
                node.test_cond(x)
            )
        ) else (
            # hoho
            24
        )
    }

    @export fun test_match (): Int = match node {
        # first case
        case x : NodeType1 => 0

        # node type 2!
        case y : NodeType2 => 1

        # well otherwise...
        case _ => 2
    }

    @export fun test_let (): Int = # let it go!!!
    # where is this comment?
    {
        # define x
        val x = 42;
        # define y
        val y = 24;

        # compute
        x + y
    }
}

class NodeType1 : ExampleNode {
}

class NodeType2 : ExampleNode {
}
