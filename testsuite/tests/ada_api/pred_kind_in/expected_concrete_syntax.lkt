grammar None_grammar {
    decl <- or(var_decl | fun_decl)
    name <- Name(@Identifier)
    main_rule <- list*(decl)
    number <- Number(@Number)
    var_decl <- VarDecl(
        VarKeyword(@Var) name @Equal expr @Semicolon
    )
    fun_decl <- FunDecl(@Def name @Semicolon)
    expr <- or(number | ref)
    ref <- Ref(name)

}

class FooNode {
}

class Decl : FooNode {
    parse field name : Name
    parse field value : Expr
}

class FunDecl : Decl {
    parse field name : Name
    parse field value : Expr
}

class VarDecl : Decl {
    parse field var_kw : VarKeyword
    parse field name : Name
    parse field value : Expr
}

class Expr : FooNode {
}

class Number : Expr {
}

class Ref : Expr {
    parse field name : Name
}

"""
List of Decl.
"""
class ASTList[Decl] : FooNodeBaseList {
}

class Name : FooNode {
}

class VarKeyword : FooNode {
}
