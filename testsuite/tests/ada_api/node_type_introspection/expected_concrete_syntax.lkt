@spacing(alphanumericals, alphanumericals)
lexer foo_lexer {

    @text whitespace <- p"[ \n\r\t]+"

    family alphanumericals {
        @text def <- "def"
    }

    @text var <- "var"

    family alphanumericals {
        @text error <- "error"
        @text example <- "example"
        @text null_tok <- "null"
    }

    @text comma <- ","
    @text dot <- "."
    @text semicolon <- ";"
    @text l_par <- "("
    @text r_par <- ")"
    @text l_brace <- "{"
    @text r_brace <- "}"
    @text equal <- "="
    @text plus <- "+"
    @text minus <- "-"
    @text less_than <- "<"

    family alphanumericals {
        @text number <- p"[0-9]+"
        @symbol identifier <- p"[a-zA-Z_][a-zA-Z0-9_]*"
    }

    @text string <- p"\"[^\"]*\""
    @newline_after @text comment <- p"#(.?)+"
}
grammar foo_grammar {
    @main_rule main_rule <- ASTList[VarDecl]+(var_decl)
    var_decl <- VarDecl("var" name "=" expr ";")
    expr <- or(Addition(expr "+" expr) | atom)
    atom <- or(number | ref)
    number <- Number(@number)
    ref <- Ref(Null("null") name)
    name <- Name(@identifier)

}

@root_node class FooNode {
}

@abstract class Expr : FooNode {
}

class Addition : Expr {
    @parse_field lhs : Expr
    @parse_field rhs : Expr
}

class Number : Expr {
}

class Ref : Expr {
    @parse_field null_qual : Null
    @parse_field name : Name
}

class Name : FooNode {
}

@qualifier class Null : FooNode {

    ## Return whether this is an instance of NullPresent
    @export fun as_bool (): Boolean
}

class VarDecl : FooNode {
    @parse_field name : Name
    @parse_field value : Expr
}
