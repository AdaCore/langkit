Resolving test.lkt
==================
Id   <RefId "Int" test.lkt:3:9-3:12>
     references <StructDecl prelude: "Int">

Expr <NumLit test.lkt:3:15-3:16>
     has type <StructDecl prelude: "Int">

Id   <RefId "Int" test.lkt:4:9-4:12>
     references <StructDecl prelude: "Int">

Expr <NumLit test.lkt:4:15-4:16>
     has type <StructDecl prelude: "Int">

Id   <RefId "Int" test.lkt:5:9-5:12>
     references <StructDecl prelude: "Int">

Expr <NumLit test.lkt:5:15-5:16>
     has type <StructDecl prelude: "Int">

Id   <RefId "true" test.lkt:8:13-8:17>
     references <EnumLitDecl prelude: "true">

Expr <RefId "true" test.lkt:8:13-8:17>
     has type <EnumTypeDecl prelude: "Bool">

Id   <RefId "i1" test.lkt:8:23-8:25>
     references <ValDecl "i1" test.lkt:3:1-3:16>

Expr <RefId "i1" test.lkt:8:23-8:25>
     has type <StructDecl prelude: "Int">

Id   <RefId "i2" test.lkt:8:31-8:33>
     references <ValDecl "i2" test.lkt:4:1-4:16>

Expr <RefId "i2" test.lkt:8:31-8:33>
     has type <StructDecl prelude: "Int">

Expr <IfExpr test.lkt:8:10-8:33>
     has type <StructDecl prelude: "Int">

Id   <RefId "false" test.lkt:9:13-9:18>
     references <EnumLitDecl prelude: "false">

Expr <RefId "false" test.lkt:9:13-9:18>
     has type <EnumTypeDecl prelude: "Bool">

Id   <RefId "i1" test.lkt:9:25-9:27>
     references <ValDecl "i1" test.lkt:3:1-3:16>

Expr <RefId "i1" test.lkt:9:25-9:27>
     has type <StructDecl prelude: "Int">

Id   <RefId "true" test.lkt:10:15-10:19>
     references <EnumLitDecl prelude: "true">

Expr <RefId "true" test.lkt:10:15-10:19>
     has type <EnumTypeDecl prelude: "Bool">

Id   <RefId "i2" test.lkt:10:25-10:27>
     references <ValDecl "i2" test.lkt:4:1-4:16>

Expr <RefId "i2" test.lkt:10:25-10:27>
     has type <StructDecl prelude: "Int">

Id   <RefId "i3" test.lkt:11:15-11:17>
     references <ValDecl "i3" test.lkt:5:1-5:16>

Expr <RefId "i3" test.lkt:11:15-11:17>
     has type <StructDecl prelude: "Int">

Expr <IfExpr test.lkt:9:10-11:17>
     has type <StructDecl prelude: "Int">

Id   <RefId "Array" test.lkt:14:9-14:14>
     references <GenericDecl prelude: "Array">

Id   <RefId "Int" test.lkt:14:15-14:18>
     references <StructDecl prelude: "Int">

Id   <RefId "true" test.lkt:14:25-14:29>
     references <EnumLitDecl prelude: "true">

Expr <RefId "true" test.lkt:14:25-14:29>
     has type <EnumTypeDecl prelude: "Bool">

Expr <ArrayLiteral test.lkt:14:35-14:37>
     has type <InstantiatedGenericType prelude: "Array[Int]">

Expr <ArrayLiteral test.lkt:14:43-14:45>
     has type <InstantiatedGenericType prelude: "Array[Int]">

Expr <IfExpr test.lkt:14:22-14:45>
     has type <InstantiatedGenericType prelude: "Array[Int]">

test.lkt:17:22: error: Mismatched types: expected `Bool`, got a character literal
17 | @invalid val v3 = if 'C' then i1 else i2
   |                      ^^^

Id   <RefId "i1" test.lkt:17:31-17:33>
     references <ValDecl "i1" test.lkt:3:1-3:16>

Expr <RefId "i1" test.lkt:17:31-17:33>
     has type <StructDecl prelude: "Int">

Id   <RefId "i2" test.lkt:17:39-17:41>
     references <ValDecl "i2" test.lkt:4:1-4:16>

Expr <RefId "i2" test.lkt:17:39-17:41>
     has type <StructDecl prelude: "Int">

Expr <IfExpr test.lkt:17:19-17:41>
     has type <StructDecl prelude: "Int">

Id   <RefId "true" test.lkt:18:22-18:26>
     references <EnumLitDecl prelude: "true">

Expr <RefId "true" test.lkt:18:22-18:26>
     has type <EnumTypeDecl prelude: "Bool">

Id   <RefId "i1" test.lkt:18:32-18:34>
     references <ValDecl "i1" test.lkt:3:1-3:16>

Expr <RefId "i1" test.lkt:18:32-18:34>
     has type <StructDecl prelude: "Int">

test.lkt:18:40: error: Mismatched types: expected `Bool`, got a character literal
18 | @invalid val v4 = if true then i1 elif 'C' then i2 else i3
   |                                        ^^^

Id   <RefId "i2" test.lkt:18:49-18:51>
     references <ValDecl "i2" test.lkt:4:1-4:16>

Expr <RefId "i2" test.lkt:18:49-18:51>
     has type <StructDecl prelude: "Int">

Id   <RefId "i3" test.lkt:18:57-18:59>
     references <ValDecl "i3" test.lkt:5:1-5:16>

Expr <RefId "i3" test.lkt:18:57-18:59>
     has type <StructDecl prelude: "Int">

Expr <IfExpr test.lkt:18:19-18:59>
     has type <StructDecl prelude: "Int">

Id   <RefId "true" test.lkt:21:22-21:26>
     references <EnumLitDecl prelude: "true">

Expr <RefId "true" test.lkt:21:22-21:26>
     has type <EnumTypeDecl prelude: "Bool">

Id   <RefId "i1" test.lkt:21:32-21:34>
     references <ValDecl "i1" test.lkt:3:1-3:16>

Expr <RefId "i1" test.lkt:21:32-21:34>
     has type <StructDecl prelude: "Int">

test.lkt:21:40: error: Mismatched types: expected `Int`, got a character literal
21 | @invalid val v5 = if true then i1 else 'A'
   |                                        ^^^

Expr <IfExpr test.lkt:21:19-21:43>
     has type <StructDecl prelude: "Int">

Id   <RefId "Int" test.lkt:22:18-22:21>
     references <StructDecl prelude: "Int">

Id   <RefId "true" test.lkt:22:27-22:31>
     references <EnumLitDecl prelude: "true">

Expr <RefId "true" test.lkt:22:27-22:31>
     has type <EnumTypeDecl prelude: "Bool">

Id   <RefId "i1" test.lkt:22:37-22:39>
     references <ValDecl "i1" test.lkt:3:1-3:16>

Expr <RefId "i1" test.lkt:22:37-22:39>
     has type <StructDecl prelude: "Int">

test.lkt:22:45: error: Mismatched types: expected `Int`, got a character literal
22 | @invalid val v6: Int = if true then i1 else 'A'
   |                                             ^^^

Expr <IfExpr test.lkt:22:24-22:48>
     has type <StructDecl prelude: "Int">

Id   <RefId "Int" test.lkt:23:18-23:21>
     references <StructDecl prelude: "Int">

Id   <RefId "true" test.lkt:23:27-23:31>
     references <EnumLitDecl prelude: "true">

Expr <RefId "true" test.lkt:23:27-23:31>
     has type <EnumTypeDecl prelude: "Bool">

Id   <RefId "i1" test.lkt:23:37-23:39>
     references <ValDecl "i1" test.lkt:3:1-3:16>

Expr <RefId "i1" test.lkt:23:37-23:39>
     has type <StructDecl prelude: "Int">

Id   <RefId "false" test.lkt:23:45-23:50>
     references <EnumLitDecl prelude: "false">

Expr <RefId "false" test.lkt:23:45-23:50>
     has type <EnumTypeDecl prelude: "Bool">

test.lkt:23:56: error: Mismatched types: expected `Int`, got a character literal
23 | @invalid val v7: Int = if true then i1 elif false then 'A' else i2
   |                                                        ^^^

Id   <RefId "i2" test.lkt:23:65-23:67>
     references <ValDecl "i2" test.lkt:4:1-4:16>

Expr <RefId "i2" test.lkt:23:65-23:67>
     has type <StructDecl prelude: "Int">

Expr <IfExpr test.lkt:23:24-23:67>
     has type <StructDecl prelude: "Int">

