import lexer_example
grammar foo_grammar {
    deps <- list*(pick(Dep(pick("+" name)) ";"))
    defs <- list*(pick(or(scope | var) ";"))
    @main_rule scope <- Scope(name "{" deps defs "}")
    var <- Var(id "=" name)
    id <- Id(@identifier)
    name <- or(Prefix(name "." id) | id)

}

@root_node class FooNode {
}

class Dep : FooNode {
    @parse_field name : Name
}

@abstract class Name : FooNode {

    @export fun resolve (): FooNode

    @export fun suffix_symbol (): Symbol

    fun referenced_unit_or_error (or_error : Bool): InternalUnit

    @export fun referenced_unit (): InternalUnit =
    node.referenced_unit_or_error(false)
}

class Id : Name {

    fun resolve (): FooNode = node.node_env().get_first(node)

    fun suffix_symbol (): Symbol = node.symbol
}

class Prefix : Name {
    @parse_field prefix : Name
    @parse_field suffix : Id

    fun resolve (): FooNode =
    node.prefix.resolve().children_env().get_first(node.suffix.symbol)

    fun suffix_symbol (): Symbol = node.suffix.symbol
}

class Scope : FooNode {
    @parse_field name : Name
    @parse_field deps : ASTList[Dep]
    @parse_field defs : ASTList[FooNode]

    fun initial_env (): LexicalEnv = match node.name {
        case p : Prefix => p.prefix.referenced_unit().root.children_env()
        case _ => node.children_env()
    }
}

class Var : FooNode {
    @parse_field name : Id
    @parse_field value : Name
}
