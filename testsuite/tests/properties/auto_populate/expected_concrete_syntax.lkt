grammar None_grammar {
    decl <- Decl(Name(@Identifier) @LPar ref_list @RPar)
    main_rule <- list*(decl)
    ref <- Ref(Name(@Identifier))
    ref_list <- list+(ref)

}

class FooNode {
}

class Decl : FooNode {
    parse field name : Name
    parse field items : ASTList[Ref]
}

"""
List of Decl.
"""
class ASTList[Decl] : FooNodeBaseList {
}

"""
List of Ref.
"""
class ASTList[Ref] : FooNodeBaseList {
}

class Name : FooNode {
}

class Ref : FooNode {
    parse field name : Name

    public fun decl_wrapper (): Entity[Decl] = entity.decl

    public fun decl (): Entity[Decl] = self.children_env.get(self.name, only_first=true).to![Decl]
}
