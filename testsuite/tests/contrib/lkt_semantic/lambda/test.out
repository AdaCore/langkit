Resolving test.lkt
==================
Decl <ValDecl "identity" test.lkt:3:1-3:35>
     has_type <StructDecl prelude: "Int">

   Id   <RefId "Int" test.lkt:3:16-3:19>
        has_type None
        references <StructDecl prelude: "Int">

   Expr <CallExpr test.lkt:3:22-3:35>
        has_type <StructDecl prelude: "Int">

      Expr <ParenExpr test.lkt:3:22-3:32>
           has_type <FunctionType prelude: "(Int) -> Int">

         Expr <LambdaExpr test.lkt:3:23-3:31>
              has_type <FunctionType prelude: "(Int) -> Int">

            Decl <LambdaArgDecl "i" test.lkt:3:24-3:25>
                 has_type <StructDecl prelude: "Int">

            Id   <RefId "i" test.lkt:3:30-3:31>
                 has_type <StructDecl prelude: "Int">
                 references <LambdaArgDecl "i" test.lkt:3:24-3:25>

      Expr <NumLit test.lkt:3:33-3:34>
           has_type <StructDecl prelude: "Int">

<ValDecl "half_decl_type" test.lkt:4:1-4:62> failed nameres:
test.lkt:4:5-4:19: error: could not determine type
 4 | val half_decl_type : (Int, Int) -> Int = (i: Int, j) => i + j
   |     ^^^^^^^^^^^^^^ 

Decl <ValDecl "half_decl_type" test.lkt:4:1-4:62>
     has_type <FunctionType prelude: "(Int, Int) -> Int">

   Id   <RefId "Int" test.lkt:4:23-4:26>
        has_type None
        references <StructDecl prelude: "Int">

   Id   <RefId "Int" test.lkt:4:28-4:31>
        has_type None
        references <StructDecl prelude: "Int">

   Id   <RefId "Int" test.lkt:4:36-4:39>
        has_type None
        references <StructDecl prelude: "Int">

   Expr <LambdaExpr test.lkt:4:42-4:62>
        has_type None

      Decl <LambdaArgDecl "i" test.lkt:4:43-4:49>
           has_type <StructDecl prelude: "Int">

         Id   <RefId "Int" test.lkt:4:46-4:49>
              has_type None
              references <StructDecl prelude: "Int">

      Decl <LambdaArgDecl "j" test.lkt:4:51-4:52>
           has_type None

      Expr <BinOp test.lkt:4:57-4:62>
           has_type <StructDecl prelude: "Int">

         Id   <RefId "i" test.lkt:4:57-4:58>
              has_type <StructDecl prelude: "Int">
              references <LambdaArgDecl "i" test.lkt:4:43-4:49>

         Id   <RefId "j" test.lkt:4:61-4:62>
              has_type None
              references <LambdaArgDecl "j" test.lkt:4:51-4:52>

<ValDecl "no_decl_type" test.lkt:5:1-5:55> failed nameres:
test.lkt:5:5-5:17: error: could not determine type
 5 | val no_decl_type : (Int, Int) -> Int = (i, j) => i + j
   |     ^^^^^^^^^^^^ 

Decl <ValDecl "no_decl_type" test.lkt:5:1-5:55>
     has_type <FunctionType prelude: "(Int, Int) -> Int">

   Id   <RefId "Int" test.lkt:5:21-5:24>
        has_type None
        references <StructDecl prelude: "Int">

   Id   <RefId "Int" test.lkt:5:26-5:29>
        has_type None
        references <StructDecl prelude: "Int">

   Id   <RefId "Int" test.lkt:5:34-5:37>
        has_type None
        references <StructDecl prelude: "Int">

   Expr <LambdaExpr test.lkt:5:40-5:55>
        has_type None

      Decl <LambdaArgDecl "i" test.lkt:5:41-5:42>
           has_type None

      Decl <LambdaArgDecl "j" test.lkt:5:44-5:45>
           has_type None

      Expr <BinOp test.lkt:5:50-5:55>
           has_type None

         Id   <RefId "i" test.lkt:5:50-5:51>
              has_type None
              references <LambdaArgDecl "i" test.lkt:5:41-5:42>

         Id   <RefId "j" test.lkt:5:54-5:55>
              has_type None
              references <LambdaArgDecl "j" test.lkt:5:44-5:45>

