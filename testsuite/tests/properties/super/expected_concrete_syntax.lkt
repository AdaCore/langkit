import lexer_example
@with_lexer(foo_lexer)
grammar foo_grammar {
    @main_rule main_rule <- Name(@identifier)

}

@abstract class FooNode : Node {

    @export fun root1 (): Array[Int] = [1]

    @export fun root2 (a : String, b : String): String = (a & (" + ")) & b
}

@abstract class Expr : FooNode {

    fun root1 (): Array[Int] = super() & ([2])
}

class Name : Expr implements TokenNode {

    fun root1 (): Array[Int] = super() & ([3])

    fun root2 (a : String, b : String): String = (
        ("<") & (
            super((("[") & a) & ("]"), b=(("{") & b) & ("}"))
        )
    ) & (">")
}
