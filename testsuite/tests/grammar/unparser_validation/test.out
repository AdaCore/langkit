== ambiguous-lists.lkt ==
error: Inconsistent separation token for FooNode.list: , and <none>

== ignore.lkt ==
ignore.lkt:3:5: error: Ignore() tokens are incompatible with unparsers. Consider using WithTrivia() instead.
3 |     @ignored Whitespace <- p"[ \t]+"
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


== lexing_failure.lkt ==
Code generation was successful

== list-extra.lkt ==
error: Inconsistent extra separation token for FooNode.list: allow_leading and allow_none

== null-decidability-1.lkt ==
null-decidability-1.lkt:23:29: error: field parser for Root.f may yield a null node, so unparsers cannot decide when to include tokens associated to that field
23 |     main_rule <- Root("def" ?("example" id_or_null))
   |                             ^^^^^^^^^^^^^^^^^^^^^^^


== null-decidability-2.lkt ==
null-decidability-2.lkt:25:29: error: field parser for Root.f may yield a null node, so unparsers cannot decide when to include tokens associated to that field
25 |     main_rule <- Root("def" ?("example" atom_list))
   |                             ^^^^^^^^^^^^^^^^^^^^^^


== null-decidability-3.lkt ==
null-decidability-3.lkt:25:29: error: This parsing rule can assign a null value to Root.f: a @nullable annotation is required for that field
25 |     main_rule <- Root("def" ?("example" field_parser))
   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^


== pick-in-list.lkt ==
pick-in-list.lkt:6:29: error: Unparsers generation require list parsers to directly build nodes for each list item
6 |     @main_rule main_rule <- list+("example" Root(or(


== pick-in-or-1.lkt ==
pick-in-or-1.lkt:7:9: error: Pick parser cannot appear as an Or subparser
7 |         pick("example" Identifier(@Identifier))
  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


== pick-in-or-2.lkt ==
pick-in-or-2.lkt:20:11: error: Pick parser cannot appear as an Or subparser
20 |         | pick("example" null(FooNode))
   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


== several-1.lkt ==
several-1.lkt:7:9: error: Unsupported token node parser for unparsers generation, only direct token parsers are accepted
7 |         Identifier(or(@Identifier | @Example))
  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


== several-2.lkt ==
several-2.lkt:8:11: error: The Identifier token node can be associated to only one token kind: here we have Example, but we already had Identifier
8 |         | Identifier(@Example)
  |           ^^^^^^^^^^^^^^^^^^^^


== termination.lkt ==
Code generation was successful

== toplevel-cut.lkt ==
Code generation was successful

== toplevel-pick.lkt ==
toplevel-pick.lkt:6:29: error: Top-level information loss prevents unparsers generation
6 |     @main_rule main_rule <- pick("example" Root(item))
  |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^


== trailing.lkt ==
error: Inconsistent postfix tokens for Assignment:
      ;
    and:
      <no token>

lkt_compile: Done
