import lexer_example

@with_lexer(foo_lexer)
grammar foo_grammar {
    @main_rule main_rule <- or(rule_1 | rule_2 | rule_3 | rule_4 | rule_5)

    rule_1 <- ParserTest(
        ?Example("example")
        or(Example("example") | null(Example))
        sub_rule
        null(Example)
        ?(Example("example")).dont_skip(sub_rule)

        ?pick("(" list+(Example("example")) ")")
        null(ASTList[Example])
        or(Example("example") | null(ASTList[Example]))

        HasExample(Example("example"))
        Example("example")
    )

    rule_2 <- ParserTest(
        Example("example")
        Example("example")
        Example("example")
        Example("example")
        Example("example")

        pick("(" list+(Example("example")) ")")
        pick("(" list+(Example("example")) ")")
        pick("(" list+(Example("example")) ")")

        HasExample("example")
        Example("example")
    )

    sub_rule <- ?Example("example")

    rule_3 <- SynthParent(Example("example"))
    rule_4 <- NullFieldChild(Example("example"))
    rule_5 <- OptionalByAnnotation(Example("example"))
}

class FooNode implements Node[FooNode] {
}

class Example : FooNode {
}

# All abstract fields that are overriden by null nodes are optional
@abstract class NullFieldParent : FooNode {
    @abstract @parse_field f1: Example
    @abstract @nullable @parse_field f2: Example
}
class NullFieldChild : NullFieldParent {
    @parse_field f1: Example
    @parse_field @null_field f2: Example
}

# Test optionality inferred from the grammar
class ParserTest : FooNode {
    # Optional fields
    @parse_field @nullable field_opt: Example
    @parse_field @nullable field_or: Example
    @parse_field @nullable field_defer: Example
    @parse_field @nullable field_null: Example
    @parse_field @nullable field_dont_skip: Example

    # Optional fields that return a list node
    @parse_field field_list_opt: ASTList[Example]
    @parse_field field_list_null: ASTList[Example]
    @parse_field field_list_or: FooNode

    # Non optional fields
    @parse_field field_opt_bool: HasExample
    @parse_field field_transform: Example
}

# By default, fields that are inherited by synthetic nodes are not optional
class SynthParent : FooNode {
    @parse_field f: Example
}
@synthetic class SynthChild : SynthParent {
}

# Fields specifically annotated are optional
class OptionalByAnnotation : FooNode {
    @nullable @parse_field f: Example
}

@qualifier enum class HasExample : FooNode {
}
