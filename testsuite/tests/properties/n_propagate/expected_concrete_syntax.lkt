import lexer_example

@with_lexer(foo_lexer)
grammar foo_grammar {
    @main_rule main_rule <- Plus(literal "+" literal)
    literal <- Literal(@number)
}

@abstract class FooNode implements Node[FooNode] {
    v: LogicVar
}

class Literal: FooNode implements TokenNode {
    fun static_combiner(other: Entity[Literal]): Entity[Literal] = other

    fun dynamic_combiner(lits: Array[Entity[Literal]]): Entity[Literal] =
    lits?[0]
}

class Plus: FooNode {
    @parse_field lhs: Literal
    @parse_field rhs: Literal

    @export fun resolve(lhs: Entity[FooNode], rhs: Entity[FooNode], use_dynamic_combiner: Bool): Entity[FooNode] =
    {
        val propagator = if use_dynamic_combiner then %propagate(node.v, Literal.dynamic_combiner, [node.lhs.v, node.rhs.v]) else %propagate(node.v, Literal.static_combiner, node.lhs.v, node.rhs.v);
        val eq = %all([propagator, %eq(node.lhs.v, lhs), %eq(node.rhs.v, rhs)]);

        if eq.solve() then node.v.get_value() else raise[Entity[FooNode]] PropertyError("unreachable")
    }
}
