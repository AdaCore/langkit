grammar FooGrammar {
    @main_rule main_rule <- list*(node)
    node <- or(example | null_node | var | ident | string)
    example <- Example("example")
    null_node <- Null("null")
    var <- Var("var" "(" main_rule ")")
    ident <- Ident(@Identifier)
    string <- StringLiteral(@String)

}

@root_node class FooNode {

    @export fun count (seq : Array[Example]): Int = seq.length

    @export fun get_a (c : CharacterType = 'a'): CharacterType = c

    @export fun get_eacute (c : CharacterType = '\xe9'): CharacterType = c

    @export fun identity (c : CharacterType): CharacterType = c

    @export fun double (c : CharacterType): Array[CharacterType] = [c, c]

    @export fun same_color (c : Color): Color = c

    @export fun same_color_dflt (c : Color = Color.Red): Color = c

    @export fun int_double (c : BigInt): BigInt = c + c

    @export fun me (b : Boolean): FooNodeStruct =
    FooNodeStruct(node=if b then self else (null))

    @export fun get_node (node_struct : FooNodeStruct): FooNode =
    node_struct.node
}

class Example : FooNode {
}

## This list node can contain one of the following nodes:
##
## * ${node_name(T.Example)}
## * ${node_name(T.Ident)}
## * ${node_name(T.Null)}
## * ${node_name(T.StringLiteral)}
## * ${node_name(T.Var)}
class Sequence : ASTList[FooNode] {

    @export fun all_items (): Array[FooNode] = self.map((i) => i)

    @export fun example_items (): Array[Example] = self.filter_map(
        (i) => i.to[Example]!, (i) => i isa Example
    )
}

class Ident : FooNode {

    @export fun sym (sym : SymbolType): SymbolType = sym
}

class Null : FooNode {
}

class StringLiteral : FooNode {
}

class Var : FooNode {
    @parse_field arg : Sequence
}

struct FooNodeStruct {
    node : FooNode
}
