@root_node class A {
    fun identity(): A = self

    fun test_int(): Int = 12

    fun test_int_invalid(): A = 12

    fun test_int_add(): Int = 12 + 15

    fun test_int_add_invalid_1(): Int = "12" + 15

    fun test_int_add_invalid_2(): Int = 15 + self

    fun test_int_add_invalid_3(): A = 15 + self

    fun test_regexp_1(): Regexp = p"[a-z]"

    fun test_regexp_2(): Regexp = {
        val rg = p"[A-Z]";
        rg
    }

    fun test_if_1(): Int = if true then 1 else 2

    fun test_if_invalid_1(): Int = if true then 1 else "2"
}

generic [C] struct Pair {
    a : C
    b : C
}

generic [C, D] struct Tuple2 {
    a : C
    b : D

    fun test(): C
}

class B : A {
    fun test_generic_constructor(): Pair[Int] = Pair[Int](12, 15)
    fun test_generic_component_access(): Int = Pair[Int](12,  15).a
    fun test_invalid_generic_type(): Pair[Int] = Pair[Int](12, 15).a
    fun test_generic_component_access_2(): Bool = Tuple2[Int, Bool](12, true).b
    fun test_invalid_generic_type_2(): Tuple2[Int, Bool] = true
    fun test_fun_call(arg : A): Int = arg.test_int_add()
    fun test_struct_fun(arg: Tuple2[Int, Bool]): Int = arg.test()
    fun test_array_indexing(arg: Array[Int]): Int = arg (12)
}

val a : Int = 12

struct Foo {
    # Test that you cannot access toplevel declarations from a nested scope.
    fun test_identifier_leak_invalid(): Int = self.a
}

enum class C (D, E) {
    fun wot(): D
}

# Test function types
fun add (a : Int, b : Int): Int = a + b
fun get_fn(): (Int, Int) -> Int = add
fun get_method(b_inst: B): (B) -> Int = b_inst.test_generic_component_access
fun get_method_invalid(b_inst: B): (B) -> Int = b_inst.test_fun_call

# Test Array/ASTList primitives

fun test_astlist_len(self: ASTList[String]): Int = self.length()
fun test_array_len(self: Array[String]): Int = self.length()
fun test_astlist_indexing(self: ASTList[String]): String = self (12)

# Test that errors flowing from a subtree to its children don't raise an
# exception

# Here, self doesn't exist. Since we're going to try to resolve the type of
# `12` first, it's going to need to resolve `self, which doesn't exist. This
# shouldn't crash.
fun test_astlist_indexing(a: ASTList[String]): String = self (12)

# Test traits, part 1: test that trait methods are visible in types
# implementing them.

trait WithLength {
    @builtin fun length(): Int
}

generic [T] trait WithIndex {
    @builtin fun __call__(index : Int): T
}

generic [T] class Vec implements WithLength, WithIndex[T] {
}

val vec : Vec[String] = null
val vec_length : Int = vec.length()
val vec_item : String = vec (1)

# Test resolution of named parameters

fun test_named_parameters(a: Int): Int = a
val ss : Int = test_named_parameters(a=12)

# Test resolution of enum class subclasses (should be accessible via dot
# notation on the root enum class type).

enum class EnClass (SubclassA, SubclassB, SubclassC) {}

val en_class_inst : EnClass.SubclassB = EnClass.SubclassB()
# Test that those classes don't leak
val invalid_en_class : SubclassB = SubclassB()

# Test errors for mismatched actuals & formals in function calls

fun test(a: Int, b: Int): Int = a + b

val t : Int = test(12, 15) # Correct call
val u : Int = test(12) # Missing params
val v : Int = test(b=12) # Missing params in call with kwargs
val x : Int = test(12, 15, 17) # Too many params
val y : Int = test(a=1, b=12, c=15) # Too many params kwargs
val z : Int = test(a=1, b=12, c=foo) # Invalid kwarg with wrong value: check that there is an error message for the expr

# Regression test for semantic failure over dotted names

val a : Int = 1
val b : Int = a.plus(2)

 # Test that LKNode.bool_type resolves correctly
fun test_if_2(a: Int, b: Int): Int = if a = b then a else b

#
# Test lambda expressions and parameters
#

fun lambda_test_helper(int: Int, fn: (Int, Int) -> Int): Int

# Test 1: test that type of parameters is correctly infered
fun lambda_test_1(): Int = lambda_test_helper(12, (x, y) => x + y * 2)

# Test 2: test that either all or no lambda params have type annotations
fun lambda_test_incorrect_1(): Int = lambda_test_helper(12, (x : Int, y) => x + y * 2)

# Test 3: Errors on mismatching lambda type
fun lambda_test_incorrect_2(): Int = lambda_test_helper(12, (x : String, y : String): Int => 12)

#
# Test availability of base type's methods
#

class Foo {
    fun bar(): Int
}

class Baz : Foo {}

fun test_base_type_methods(arg: Baz): Int = arg.bar()

#
# Generic functions instantiation tests
#

# Support generics
generic [T] fun convert_int(var: Int): T
generic [T] fun identity(var: T): T
generic [T] fun singleton(var: T): Array[T]
generic [T] fun apply (fn: (T) -> T, v: T): T

# Explicit instantiations
fun test_explicit_int_to(): String = convert_int[String](12)
fun test_explicit_identity(): Int = identity[Int](12)
fun test_explicit_singleton(): Array[Int] = singleton[Int](12)

# Explicit generic instantiation with function argument
fun double (arg: Int): Int = arg * 2
fun test_apply(): Int = apply[Int](double, 12)

# Test paren expr
fun test_paren_expr(): Int = (if true then 12 else null)

# Test null exclusion expr
fun test_null_excl_expr(): Int = (if true then 12 else null)!

# Implicit instantiations

# Check that we can instantiate a function depending on its target type,
# without any dependent parameters.
fun test_int_to(): String = convert_int(12)

# Check that we can instantiate a function depending on its target type, and
# properly resolve parameters with types that depend on the generic formal
# types.
fun test_identity(): Int = identity(12)

# Check that we can instantiate a function with a more complex return type that
# is a composed generic type.
fun test_singleton(): Array[Int] = singleton(12)

# Implicit generic instantiation with function argument
fun test_implicit_apply(): Int = apply(double, 12)

# Ambiguous generic instantiation
generic [T] fun fooz(x: T, y: T): Int
fun test_ambiguous_generic_instantiation(): Int = fooz(1, "lol")

# Instantiation is fine, wrong param
fun test_invalid_singleton(): Array[Int] = singleton("lol")

# Instantiation with wrong expected type 1
fun test_invalid_singleton_2(): Int = singleton("lol")

generic [T, U] struct Dummy {}

# Instantiation with wrong expected type 1
fun test_invalid_singleton_3(): Dummy[Int, String] = singleton("lol")

# Test rel operator
fun test_rel(a : Int): Bool = (a = 15) or (a = 18)

# Test that lambda params don't leak in their outside env
fun test_lambda_leak_support(a: (Int) -> Int, b: (Int) -> Int): Int
fun test_lambda_leak(): Int =
    test_lambda_leak_support(
        (xxx) => xxx * 2,
        (yyy) => xxx * yyy
#                ^ should be undefined
    )

# Implicit instantiations 2

# Test the built-in map function
fun test_map(ints: Array[Int]): Array[String] = ints.map((i) => convert_int[String](i))

# Test the built-in filtermap function
fun test_filtermap(ints: Array[Int]): Array[String] =
    ints.filtermap(
        (i) => convert_int[String](i),
        (i) => i = 0
    )

# Check that errors are handled correctly even for a call with a dotexpr prefix
fun test_handle_ce_error(arg : A): Int = arg.method_doesnt_exist()
# The method call should emit an error but not crash

# Check that conflicting actuals are correctly flagged
generic [T] fun mkPair(x: T): Pair[T, T]
fun test_conflicting_actuals(): Pair[Int, Bool] = mkPair(1)

#
# Basic subtyping
#
class Baseclass {
    fun foo(): Int
}

class Subclass : Baseclass {}

class Subsubclass : Subclass {}

class Subclass2 : Baseclass {}

fun test_subtyping_1 (a : Subclass): Baseclass = a
fun test_subtyping_2 (a : Subclass, b: Baseclass): Bool = (a = b)
fun test_subtyping_3 (a : Baseclass, b: Subsubclass): Bool =
  test_subtyping_2(b, b)
fun test_subtyping_invalid_1 (a : Subclass): Subclass2 = a
