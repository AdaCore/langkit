import lexer_example

@with_lexer(foo_lexer)
grammar foo_grammar {
    @main_rule main_rule <- list+(decl)
    decl <- Decl(Name(@Identifier) "(" ref_list ")")
    ref_list <- list*(ref)
    ref <- Ref(Name(@Identifier))
}

@abstract class FooNode implements Node[FooNode] {
}

class Decl: FooNode {
    @parse_field name: Name
    @parse_field items: ASTList[FooNode, Ref]

    env_spec {
        add_to_env_kv(node.name.symbol, node)
    }
}

class Name: FooNode implements TokenNode {
}

class Ref: FooNode {
    @parse_field name: Name

    @exported fun decl_wrapper(): Entity[Decl] = self.decl()

    @exported fun decl(): Entity[Decl] =
    node.children_env().get_first(node.name).as![Decl]
}
