import lexer_example

@with_lexer(foo_lexer)
grammar foo_grammar {
    @main_rule main_rule <- Example(@example)
}

@abstract class FooNode implements Node[FooNode] {
    @exported fun is_flag_enabled(): Bool = self.info.md.flag

    @exported fun with_flag(flag: Bool): Entity[FooNode] = Entity[FooNode](
        node=node, info=EntityInfo(
            md=Metadata(flag=flag), rebindings=self.info.rebindings, from_rebound=self.info.from_rebound
        )
    )
}

class Example: FooNode {
    @exported @lazy my_field: SynthNode = SynthNode()
}

@synthetic class SynthNode: FooNode {
}

@metadata struct Metadata {
    @used_in_equality flag: Bool
}
