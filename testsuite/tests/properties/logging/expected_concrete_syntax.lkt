import lexer_example
grammar foo_grammar {
    @main_rule main_rule <- list+(decl)
    decl <- Decl(HasPlus("+") name "(" ref_list ")")
    ref_list <- list*(ref)
    ref <- Ref(name)
    name <- Name(@identifier)

}

@root_node class FooNode {
}

class Decl : FooNode {
    @parse_field has_plus : HasPlus
    @parse_field name : Name
    @parse_field items : ASTList[Ref]

    @export fun entity_items (): Array[Ref] = node.as_entity.items.map((i) => i)
}

@qualifier enum class HasPlus : FooNode {
}

@token_node class Name : FooNode {
}

class Ref : FooNode {
    @parse_field name : Name
}
