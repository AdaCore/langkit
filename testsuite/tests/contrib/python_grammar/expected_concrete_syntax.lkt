@track_indent
lexer foo_lexer {
    val STRING_DBQ = p"\"(\\\"|[^\n\"])*\""
    val STRING_SQ = p"'(\\'|[^\n'])*'"
    val MLSTRING_DBQ = p"\"\"\"([^\"]|(\"[^\"])|(\"\"[^\"])|\n)*\"\"\""
    val MLSTRING_SQ = p"'''([^']|('[^'])|(''[^'])|\n)*'''"

    @pre_rule @ignore _ <- p"\\\n[ \r\t]*"
    string <- p"(u|U)?(r|R)?({MLSTRING_SQ}|{MLSTRING_DBQ}|{STRING_SQ}|{STRING_DBQ})"
    @ignore _ <- p"[ \r\t]+"
    @trivia() comment <- p"#(.?)+"
    rsh_assign <- ">>="
    is_tok <- "is"
    equals <- "=="
    def <- "def"
    lte <- "<="
    raise_tok <- "raise"
    mod <- "%"
    yield <- "yield"
    xor_assign <- "^="
    as <- "as"
    lambda <- "lambda"
    backtick <- "`"
    try_tok <- "try"
    divide <- "/"
    invert <- "~"
    return <- "return"
    assert <- "assert"
    xor <- "^"
    break <- "break"
    @text(end_ignore_layout=true) rbrack <- "]"
    power_assign <- "**="
    import <- "import"
    exec <- "exec"
    comma <- ","
    @text(start_ignore_layout=true) l_par <- "("
    dot <- "."
    gte <- ">="
    floordiv_assign <- "//="
    multiply <- "*"
    div_assign <- "/="
    at <- "@"
    assign <- "="
    floordiv <- "//"
    notequal <- "!="
    mult_assign <- "*="
    mod_assign <- "%="
    gt <- ">"
    power <- "**"
    amp <- "&"
    not_tok <- "not"
    colon <- ":"
    diamond <- "<>"
    in_tok <- "in"
    @text(start_ignore_layout=true) l_curl <- "{"
    class_tok <- "class"
    or_assign <- "|="
    elif_tok <- "elif"
    and_tok <- "and"
    semicolon <- ";"
    add_asign <- "+="
    print <- "print"
    lsh <- "<<"
    continue <- "continue"
    while <- "while"
    except <- "except"
    if_tok <- "if"
    else_tok <- "else"
    del <- "del"
    minus_assign <- "-="
    or_tok <- "or"
    minus <- "-"
    @text(start_ignore_layout=true) lbrack <- "["
    and_assign <- "&="
    @text(end_ignore_layout=true) r_par <- ")"
    global <- "global"
    for <- "for"
    from <- "from"
    rsh <- ">>"
    finally <- "finally"
    pass <- "pass"
    lsh_assign <- "<<="
    bin_or <- "|"
    @text(end_ignore_layout=true) rcurl <- "}"
    with <- "with"
    plus <- "+"
    lt <- "<"
    number <- p"[0-9]+"
    @symbol() identifier <- p"[a-zA-Z_][a-zA-Z0-9_]*"
}
grammar foo_grammar {
    name <- Id(@identifier)
    number <- NumberLit(@number)
    string <- StringLit(@string)
    cat_string <- ConcatStringLit(string list+(string))
    nl <- NL(@newline)
    @main_rule main_rule <- FileNode(
        list+(pick(discard(list*(nl))
        stmt discard(list*(nl)))) @termination
    )
    decorator <- Decorator(
        "@" dotted_name ?pick("(" arg_list ")") @newline
    )
    decorators <- list+(decorator)
    decorated <- Decorated(decorators or(class_def | func_def))
    func_def <- FuncDef("def" name parameters ":" suite)
    parameters <- pick("(" ?varargslist ")")
    varargslist <- Params(
        list*(SingleParam(
            VarArgsFlag("*") KwArgsFlag("**") fpdef ?pick("=" test)
        ), ",")
    )
    fpdef <- or(name | pick("(" name_list ")"))
    name_list <- pick(list+(name, ",") ?",")
    stmt <- or(simple_stmt | compound_stmt)
    simple_stmt <- pick(or(small_stmt | pick(list+(small_stmt, ";")
    ?";")) @newline)
    small_stmt <- or(
        | expr_stmt
        | print_stmt
        | del_stmt
        | pass_stmt
        | flow_stmt
        | import_stmt
        | global_stmt
        | exec_stmt
        | assert_stmt
    )
    expr_stmt <- or(
        | AugAssignStmt(
            test_list Op(
                or(
                    | "+="
                    | "-="
                    | "*="
                    | "/="
                    | "%="
                    | "&="
                    | "|="
                    | "^="
                    | "<<="
                    | ">>="
                    | "**="
                    | "//="
                )
            ) or(yield_expr | test_list)
        )
        | AssignStmt(
            test_list list+(pick("=" or(yield_expr | test_list)))
        )
        | test_list
    )
    print_stmt <- or(
        | PrintStmt("print" test_list)
        | StreamPrintStmt("print" ">>" test "," test_list)
    )
    del_stmt <- DelStmt("del" expr_list)
    pass_stmt <- PassStmt("pass")
    flow_stmt <- or(
        | break_stmt
        | continue_stmt
        | return_stmt
        | raise_stmt
        | yield_stmt
    )
    break_stmt <- BreakStmt("break")
    continue_stmt <- ContinueStmt("continue")
    return_stmt <- ReturnStmt("return" ?test_list)
    yield_stmt <- yield_expr
    raise_stmt <- RaiseStmt("raise" ?test_list)
    import_stmt <- or(import_name | import_from)
    import_name <- ImportName("import" dotted_as_names)
    dot <- Dot(".")
    import_from <- ImportFrom(
        "from"
        or(dotted_name | RelName(list+(dot) ?dotted_name)) "import" or(
            | ImportStar("*")
            | pick("(" import_as_names ")")
            | import_as_names
        )
    )
    as_name <- AsNameNode(name "as" name)
    dotted_as_name <- AsNameNode(dotted_name "as" name)
    import_as_names <- pick(list+(or(as_name | name), ",") ?",")
    dotted_as_names <- pick(list+(or(dotted_as_name | dotted_name), ",") ?",")
    dotted_name <- or(DottedName(dotted_name "." name) | name)
    global_stmt <- GlobalStmt("global" name_list)
    exec_stmt <- ExecStmt("exec" expr ?pick("in" test_list))
    assert_stmt <- AssertStmt("assert" test ?pick("," test))
    compound_stmt <- or(
        | if_stmt
        | while_stmt
        | for_stmt
        | try_stmt
        | with_stmt
        | func_def
        | class_def
        | decorated
    )
    else_part <- ElsePart("else" ":" suite)
    if_stmt <- IfStmt(
        "if"
        test
        ":"
        suite
        list*(pick("elif" ElifBranch(test ":" suite))) ?else_part
    )
    while_stmt <- WhileStmt("while" test ":" suite ?else_part)
    for_stmt <- ForStmt(
        "for" expr_list "in" test_list ":" suite ?else_part
    )
    try_stmt <- TryStmt(
        "try" ":" suite list*(ExceptPart(
            "except" ?AsNameNode(test ?pick("as" test)) ":" suite
        )) ?else_part ?pick("finally" ":" suite)
    )
    with_stmt <- WithStmt("with" list+(with_item, ",") ":" suite)
    with_item <- AsNameNode(test ?pick("as" expr))
    suite <- or(
        | pick(discard(list*(nl))
        @indent
        list+(pick(discard(list*(nl)) stmt discard(list*(nl)))) @dedent)
        | simple_stmt
    )
    test <- or(
        | lambdef
        | IfExpr(or_test "if" or_test "else" test)
        | or_test
    )
    or_test <- or(OrOp(or_test "or" and_test) | and_test)
    and_test <- or(AndOp(and_test "and" not_test) | not_test)
    not_test <- or(NotOp("not" not_test) | comparison)
    comparison <- or(
        | CompOp(
            comparison or(
                | CompOpKind.Lt("<")
                | CompOpKind.Gt(">")
                | CompOpKind.Eq("==")
                | CompOpKind.Gte(">=")
                | CompOpKind.Lte("<=")
                | CompOpKind.Diamond("<>")
                | CompOpKind.Noteq("!=")
                | CompOpKind.In("in")
                | CompOpKind.Notin("not" "in")
                | CompOpKind.Isnot("is" "not")
                | CompOpKind.Is("is")
            ) expr
        )
        | expr
    )
    expr <- or(OrExpr(expr "|" xor_expr) | xor_expr)
    xor_expr <- or(XorExpr(xor_expr "^" and_expr) | and_expr)
    and_expr <- or(
        | AndExpr(and_expr "&" shift_expr)
        | shift_expr
    )
    shift_expr <- or(
        | ShiftExpr(shift_expr Op(or("<<" | ">>")) arith_expr)
        | arith_expr
    )
    arith_expr <- or(
        | ArithExpr(arith_expr Op(or("+" | "-")) term)
        | term
    )
    term <- or(
        | Term(term Op(or("*" | "/" | "%" | "//")) factor)
        | factor
    )
    factor <- or(Factor(Op(or("+" | "-" | "~")) factor) | power)
    power <- or(Power(atom_expr "**" factor) | atom_expr)
    atom_expr <- or(
        | DottedName(atom_expr "." name)
        | CallExpr(atom_expr "(" arg_list ")")
        | SubscriptExpr(atom_expr "[" subscript_list "]")
        | atom
    )
    dict_assoc <- DictAssoc(test ":" test)
    yield_expr <- YieldExpr("yield" ?test_list)
    atom <- or(
        | pick("(" yield_expr ")")
        | ListGen("(" test list_for ")")
        | TupleLit("(" ?test_list ")")
        | ListComp("[" test list_for "]")
        | ListLit("[" empty_test_list "]")
        | SetComp("{" test comp_for "}")
        | set_lit
        | DictComp("{" dict_assoc comp_for "}")
        | DictLit("{" pick(list+(dict_assoc, ",") ?",") "}")
        | InlineEval("`" test_list "`")
        | name
        | number
        | cat_string
        | string
    )
    set_lit <- SetLit("{" empty_test_list "}")
    lambdef <- LambdaDef("lambda" varargslist ":" test)
    subscript_list <- pick(list+(subscript, ",") ?",")
    subscript <- or(
        | EllipsisExpr("." "." ".")
        | ExtSliceExpr(?test ":" ?test ":" ?test)
        | SliceExpr(?test ":" ?test)
        | test
    )
    expr_list <- pick(list+(expr, ",") ?",")
    test_list <- pick(list+(test, ",") ?",")
    empty_test_list <- pick(list*(test, ",") ?",")
    class_def <- ClassDef(
        "class" name ?pick("(" ?test_list ")") ":" suite
    )
    arg_list <- pick(list*(or(
        | ArgGen(test comp_for)
        | ArgAssoc(?pick(test "=") test)
        | VarArgs("*" test)
        | KwArgs("**" test)
    ), ",") ?",")
    list_iter <- or(list_for | list_if)
    list_for <- CompForL(
        "for" expr_list "in" test_list ?list_iter
    )
    list_if <- CompIf("if" test ?list_iter)
    comp_iter <- or(comp_for | comp_if)
    comp_for <- CompFor(
        "for" expr_list "in" or_test ?comp_iter
    )
    comp_if <- CompIf("if" test ?comp_iter)

}

@root_node class PythonNode {
}

@abstract class Arg : PythonNode {
}

class ArgAssoc : Arg {
    @parse_field name : Expr
    @parse_field expr : Expr
}

class ArgGen : Arg {
    @parse_field expr : Expr
    @parse_field comprehension : CompFor
}

class KwArgs : Arg {
    @parse_field expr : Expr
}

class VarArgs : Arg {
    @parse_field expr : Expr
}

class AsNameNode : PythonNode {
    @parse_field imported : Expr
    @parse_field as_name : Expr
}

class CompIf : PythonNode {
    @parse_field test : Expr
    @parse_field comp : PythonNode
}

enum class CompOpKind : PythonNode {
    case Lt,
    Gt,
    Eq, Gte, Lte, Diamond, Noteq, In, Notin, Is, Isnot
}

@abstract class Comprehension : PythonNode {
}

class CompFor : Comprehension {
    @parse_field exprs : ASTList[Expr]
    @parse_field target : Expr
    @parse_field comp : PythonNode
}

class CompForL : Comprehension {
    @parse_field exprs : ASTList[Expr]
    @parse_field target : ASTList[Expr]
    @parse_field comp : PythonNode
}

class Decorator : PythonNode {
    @parse_field dec_name : Name
    @parse_field arg_list : ASTList[Arg]
}

class DictAssoc : PythonNode {
    @parse_field key : Expr
    @parse_field value : Expr
}

class ElsePart : PythonNode {
    @parse_field statements : PythonNode
}

class ExceptPart : PythonNode {
    @parse_field as_name : AsNameNode
    @parse_field statements : PythonNode
}

@abstract class Expr : PythonNode {
}

class AndExpr : Expr {
    @parse_field left : Expr
    @parse_field right : Expr
}

class AndOp : Expr {
    @parse_field left : Expr
    @parse_field right : Expr
}

@abstract class BinOp : Expr {
    @parse_field left : Expr
    @parse_field op : Op
    @parse_field right : Expr
}

class ArithExpr : BinOp {
}

class ShiftExpr : BinOp {
}

class Term : BinOp {
}

class CallExpr : Expr {
    @parse_field prefix : Expr
    @parse_field suffix : ASTList[Arg]
}

class CompOp : Expr {
    @parse_field left : Expr
    @parse_field op : CompOpKind
    @parse_field right : Expr
}

class ConcatStringLit : Expr {
    @parse_field first_str : StringLit
    @parse_field subsequent_str : ASTList[StringLit]
}

class DictComp : Expr {
    @parse_field assoc : DictAssoc
    @parse_field comprehension : CompFor
}

class DictLit : Expr {
    @parse_field assocs : ASTList[DictAssoc]
}

class Dot : Expr {
}

class EllipsisExpr : Expr {
}

class Factor : Expr {
    @parse_field op : Op
    @parse_field expr : Expr
}

class IfExpr : Expr {
    @parse_field expr : Expr
    @parse_field cond : Expr
    @parse_field else_expr : Expr
}

class InlineEval : Expr {
    @parse_field exprs : ASTList[Expr]
}

class LambdaDef : Expr {
    @parse_field args : Params
    @parse_field expr : Expr
}

class ListComp : Expr {
    @parse_field expr : Expr
    @parse_field comprehension : CompForL
}

class ListGen : Expr {
    @parse_field expr : Expr
    @parse_field comprehension : CompForL
}

class ListLit : Expr {
    @parse_field exprs : ASTList[Expr]
}

@abstract class Name : Expr {
}

class DottedName : Name {
    @parse_field prefix : Expr
    @parse_field suffix : Id
}

@token_node class Id : Name {

    ## Shortcut to get the symbol of this node
    fun sym (): Symbol = node.symbol
}

class NotOp : Expr {
    @parse_field expr : Expr
}

@token_node class NumberLit : Expr {
}

class OrExpr : Expr {
    @parse_field left : Expr
    @parse_field right : Expr
}

class OrOp : Expr {
    @parse_field left : Expr
    @parse_field right : Expr
}

class Power : Expr {
    @parse_field left : Expr
    @parse_field right : Expr
}

class SetComp : Expr {
    @parse_field expr : Expr
    @parse_field comprehension : CompFor
}

class SetLit : Expr {
    @parse_field exprs : ASTList[Expr]
}

class SliceExpr : Expr {
    @parse_field first : Expr
    @parse_field last : Expr
}

class ExtSliceExpr : SliceExpr {
    @parse_field stride : Expr
}

@token_node class StringLit : Expr {
}

class SubscriptExpr : Expr {
    @parse_field prefix : Expr
    @parse_field suffix : ASTList[Expr]
}

class TupleLit : Expr {
    @parse_field exprs : ASTList[Expr]
}

class XorExpr : Expr {
    @parse_field left : Expr
    @parse_field right : Expr
}

class YieldExpr : Expr {
    @parse_field exprs : ASTList[Expr]
}

class FileNode : PythonNode {
    @parse_field statements : ASTList[PythonNode]
}

class ImportStar : PythonNode {
}

@qualifier class KwArgsFlag : PythonNode {
}

class NL : PythonNode {
}

@token_node class Op : PythonNode {
}

class Params : PythonNode {
    @parse_field single_params : ASTList[SingleParam]
}

class RelName : PythonNode {
    @parse_field dots : ASTList[Dot]
    @parse_field name : Name
}

class SingleParam : PythonNode {
    @parse_field is_varargs : VarArgsFlag
    @parse_field is_kwargs : KwArgsFlag
    @parse_field name : PythonNode
    @parse_field default_value : Expr
}

@abstract class Stmt : PythonNode {
}

class AssertStmt : Stmt {
    @parse_field test_expr : Expr
    @parse_field msg : Expr
}

class AssignStmt : Stmt {
    @parse_field l_value : ASTList[Expr]
    @parse_field r_values : ASTList[PythonNode]
}

class AugAssignStmt : Stmt {
    @parse_field l_value : ASTList[Expr]
    @parse_field op : Op
    @parse_field r_value : PythonNode
}

class BreakStmt : Stmt {
}

class ContinueStmt : Stmt {
}

class Decorated : Stmt {
    @parse_field decorators : ASTList[Decorator]
    @parse_field defn : DefStmt
}

@abstract class DefStmt : Stmt {
}

class ClassDef : DefStmt {
    @parse_field name : Id
    @parse_field bases : ASTList[Expr]
    @parse_field statements : PythonNode
}

class FuncDef : DefStmt {
    @parse_field name : Id
    @parse_field parameters : Params
    @parse_field body : PythonNode
}

class DelStmt : Stmt {
    @parse_field exprs : ASTList[Expr]
}

class ElifBranch : Stmt {
    @parse_field cond_test : Expr
    @parse_field statements : PythonNode
}

class ExecStmt : Stmt {
    @parse_field expr : Expr
    @parse_field in_list : ASTList[Expr]
}

class ForStmt : Stmt {
    @parse_field bindings : ASTList[Expr]
    @parse_field expr : ASTList[Expr]
    @parse_field statements : PythonNode
    @parse_field else_part : ElsePart
}

class GlobalStmt : Stmt {
    @parse_field names : ASTList[Id]
}

class IfStmt : Stmt {
    @parse_field cond_test : Expr
    @parse_field statements : PythonNode
    @parse_field elif_branchs : ASTList[ElifBranch]
    @parse_field else_part : ElsePart
}

class ImportFrom : Stmt {
    @parse_field rel_name : PythonNode
    @parse_field imported : PythonNode
}

class ImportName : Stmt {
    @parse_field imported_names : ASTList[PythonNode]
}

class PassStmt : Stmt {
}

class PrintStmt : Stmt {
    @parse_field exprs : ASTList[Expr]
}

class RaiseStmt : Stmt {
    @parse_field exprs : ASTList[Expr]
}

class ReturnStmt : Stmt {
    @parse_field exprs : ASTList[Expr]
}

class StreamPrintStmt : Stmt {
    @parse_field stream_expr : Expr
    @parse_field exprs : ASTList[Expr]
}

class TryStmt : Stmt {
    @parse_field statements : PythonNode
    @parse_field except_parts : ASTList[ExceptPart]
    @parse_field else_part : ElsePart
    @parse_field finally_part : PythonNode
}

class WhileStmt : Stmt {
    @parse_field cond_test : Expr
    @parse_field statements : PythonNode
    @parse_field else_part : ElsePart
}

class WithStmt : Stmt {
    @parse_field bindings : ASTList[AsNameNode]
    @parse_field statements : PythonNode
}

@qualifier class VarArgsFlag : PythonNode {
}
