@root_node class A {
    fun identity(): A = self

    fun test_int(): Int = 12

    fun test_int_invalid(): A = 12

    fun test_int_add(): Int = 12 + 15

    fun test_int_add_invalid_1(): Int = "12" + 15

    fun test_int_add_invalid_2(): Int = 15 + self

    fun test_int_add_invalid_3(): A = 15 + self

    fun test_regexp_1(): Regexp = p"[a-z]"

    fun test_regexp_2(): Regexp = {
        val rg = p"[A-Z]";
        rg
    }

    fun test_if_1(): Int = if true then 1 else 2

    fun test_if_invalid_1(): Int = if true then 1 else "2"
}

generic [C] struct Pair {
    a : C
    b : C
}

generic [C, D] struct Tuple2 {
    a : C
    b : D

    fun test(): C
}

class B : A {
    fun test_generic_constructor(): Pair[Int] = Pair[Int](12, 15)
    fun test_generic_component_access(): Int = Pair[Int](12,  15).a
    fun test_invalid_generic_type(): Pair[Int] = Pair[Int](12, 15).a
    fun test_generic_component_access_2(): Bool = Tuple2[Int, Bool](12, true).b
    fun test_invalid_generic_type_2(): Tuple2[Int, Bool] = true
    fun test_fun_call(arg : A): Int = arg.test_int_add()
    fun test_struct_fun(arg: Tuple2[Int, Bool]): Int = arg.test()
    fun test_array_indexing(arg: Array[Int]): Int = arg (12)
}

val a : Int = 12

struct Foo {
    # Test that you cannot access toplevel declarations from a nested scope.
    fun test_identifier_leak_invalid(): Int = self.a
}

enum class C (D, E) {
    fun wot(): D
}

# Test function types
fun add (a : Int, b : Int): Int = a + b
fun get_fn(): (Int, Int) -> Int = add
fun get_method(b_inst: B): (B) -> Int = b_inst.test_generic_component_access
fun get_method_invalid(b_inst: B): (B) -> Int = b_inst.test_fun_call

# Test Array/ASTList primitives

fun test_astlist_len(self: ASTList[String]): Int = self.length()
fun test_array_len(self: Array[String]): Int = self.length()
fun test_astlist_indexing(self: ASTList[String]): String = self (12)

# Test that errors flowing from a subtree to its children don't raise an
# exception

# Here, self doesn't exist. Since we're going to try to resolve the type of
# `12` first, it's going to need to resolve `self, which doesn't exist. This
# shouldn't crash.
fun test_astlist_indexing(a: ASTList[String]): String = self (12)

# Test traits, part 1: test that trait methods are visible in types
# implementing them.

trait WithLength {
    @builtin fun length(): Int
}

generic [T] trait WithIndex {
    @builtin fun __call__(index : Int): T
}

generic [T] class Vec implements WithLength, WithIndex[T] {
}

val vec : Vec[String] = null
val vec_length : Int = vec.length()
val vec_item : String = vec (1)

# Test resolution of named parameters

fun test_named_parameters(a: Int): Int = a
val ss : Int = test_named_parameters(a=12)

# Test resolution of enum class subclasses (should be accessible via dot
# notation on the root enum class type).

enum class EnClass (SubclassA, SubclassB, SubclassC) {}

val en_class_inst : EnClass.SubclassB = EnClass.SubclassB()
# Test that those classes don't leak
val invalid_en_class : SubclassB = SubclassB()

# Test errors for mismatched actuals & formals in function calls

fun test(a: Int, b: Int): Int = a + b

val t : Int = test(12, 15) # Correct call
val u : Int = test(12) # Missing params
val v : Int = test(b=12) # Missing params in call with kwargs
val x : Int = test(12, 15, 17) # Too many params
val y : Int = test(a=1, b=12, c=15) # Too many params kwargs
val z : Int = test(a=1, b=12, c=foo) # Invalid kwarg with wrong value: check that there is an error message for the expr

# Regression test for semantic failure over dotted names

val a : Int = 1
val b : Int = a.plus(2)
