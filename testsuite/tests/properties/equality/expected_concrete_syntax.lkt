grammar None_grammar {
    decl <- Decl(
        ?@Plus Name(@Identifier) @LPar ref_list @RPar
    )
    main_rule <- list*(decl)
    ref <- Ref(Name(@Identifier))
    ref_list <- list+(ref)

}

class FooNode {

    fun env_struct (): EnvStruct = new EnvStruct(
        env=<env_orphan(<FieldAccess .children_env>)>
    )

    fun env_array (): Array[LexicalEnv] =
    [<env_orphan(<FieldAccess .children_env>)>]
}

class Decl : FooNode {
    @parse_field has_plus : HasPlus
    @parse_field name : Name
    @parse_field items : ASTList[Ref]

    @export fun test_env (other : Entity[FooNode]): Boolean =
    <env_orphan(<FieldAccess .children_env>)> == <env_orphan(<FieldAccess .children_env>)>

    @export fun test_struct (other : Entity[FooNode]): Boolean =
    self.env_struct == other.env_struct

    @export fun test_array (other : Entity[FooNode]): Boolean =
    self.env_array == other.env_array
}

@qualifier class HasPlus : FooNode {

    ## Return whether this is an instance of HasPlusPresent
    @export fun as_bool (): Boolean
}

class Name : FooNode {
}

class Ref : FooNode {
    @parse_field name : Name
}
