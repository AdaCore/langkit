grammar None_grammar {
    list_rule <- LiteralSequence(
        @LPar Name(@Identifier) list*(list_item, @Comma) @RPar
    )
    main_rule <- list_rule
    list_item <- Literal(@Number)

}

class FooNode {
}

"""
List of Literal.
"""
class ASTList[Literal] : FooNodeBaseList {
}

class Literal : FooNode {
}

class LiteralSequence : FooNode {
    parse field name : Name
    parse field items : ASTList[Literal]

    memoized fun new_node (): SynthNode = new SynthNode(items=self.items, name=self.name)

    public fun prop (): Entity[SynthNode] = self.new_node.as_bare_entity
}

class Name : FooNode {
}

class SynthNode : FooNode {
    parse field name : Name
    parse field items : ASTList[Literal]
}
