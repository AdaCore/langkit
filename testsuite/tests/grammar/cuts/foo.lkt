import lexer_example
@with_lexer(foo_lexer)
grammar foo_grammar {
    @main_rule stmt_rule <- list*(or(def | blk))

    # This case is artifically engineered to need `stop_cut`: we put the `def`
    # *before* the `var_def` in the `or`, even though all would work if you put
    # them the other way around.
    #
    # But the stop_cut around the def guarantees that we will backtrack if the
    # `def` fails, and thus makes this order valid.
    blk <- Block("{" or(stop_cut(def) | var_def) "}")

    id <- Id(@identifier)

    # This is a simple testcase for cut: If we parse "def" and then something
    # that is not an id, parsing should fail and not backtrack, and we should
    # get an incomplete node.
    def <- Def("def" / id)

    var_def <- VarDef("def" "var" / id)

}

@abstract class FooNode implements Node[FooNode] {
}

class Block : FooNode {
    @parse_field el: FooNode
}

class Def : FooNode {
    @parse_field id: Id
}

class Id : FooNode implements TokenNode {
}

class VarDef : FooNode {
    @parse_field id: Id
}
