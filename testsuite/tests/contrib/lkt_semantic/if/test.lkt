# Check that `if` expressions are correctly validated

val i1: Int = 1
val i2: Int = 2
val i3: Int = 3

# Simple correct cases
val v1 = if true then i1 else i2
val v2 = if false  then i1
         elif true then i2
         else i3

# Check that type inference from the context works as expected
val v3: Array[Int] = if true then [] else []

# Invalid types for conditions
@invalid val v3 = if 'C' then i1 else i2
@invalid val v4 = if true then i1 elif 'C' then i2 else i3

# Mismatching result types
@invalid val v5 = if true then i1 else 'A'
@invalid val v6: Int = if true then i1 else 'A'
@invalid val v7: Int = if true then i1 elif false then 'A' else i2
