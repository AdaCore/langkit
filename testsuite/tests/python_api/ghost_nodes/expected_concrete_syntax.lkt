import lexer_example
grammar foo_grammar {
    @main_rule main_rule <- list+(Param(name mode plus))
    name <- Name(@identifier)
    mode <- or(
        | Enum.Null("null")
        | Enum.Example("example")
        | Enum.Default()
    )
    plus <- PlusQualifier("+")

}

@abstract class FooNode implements Node {
}

enum class Enum : FooNode {
    case Null, Example, Default
}

class Name : FooNode implements SymbolNode {
}

class Param : FooNode {
    @parse_field name : Name
    @parse_field mode : Enum
    @parse_field has_plus : PlusQualifier
}

@qualifier enum class PlusQualifier : FooNode {
}
