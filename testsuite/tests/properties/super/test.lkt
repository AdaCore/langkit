# Check that the ".super()" DSL construct works as expected

import lexer_example

@with_lexer(foo_lexer)
grammar foo_grammar {
    @main_rule main_rule <- Name(@Identifier)
}

@abstract
class FooNode implements Node[FooNode] {
    @exported
    fun root1(): Array[Int] = [1]

    @exported
    fun root2(a: String, b: String): String = a & " + " & b

    @exported
    fun root3(): Bool = self.info.rebindings != null[EnvRebindings]
}

@abstract
class Expr: FooNode {
    fun root1(): Array[Int] = node.super() & [2]
}

class Name: Expr implements TokenNode {
    fun root1(): Array[Int] = node.super() & [3]

    fun root2(a: String, b: String): String =
        "<" & node.super("[" & a & "]", b="{" & b & "}") & ">"

    fun root3(): Bool = self.super()
}
