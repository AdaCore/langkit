import lexer_example

@with_lexer(foo_lexer)
grammar foo_grammar {
    @main_rule main_rule <- list+(decl)
    decl <- Decl("def" list+(name))
    name <- Name(@identifier)
}

@abstract class FooNode implements Node[FooNode] {
}

class Decl : FooNode {
    @parse_field names: ASTList[FooNode, Name]

    @export fun lookup(n: Name): FooNode = self.node_env().get_first(n.symbol)
}

class Name : FooNode implements TokenNode {
}
