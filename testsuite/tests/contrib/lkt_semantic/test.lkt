@root_node class A {
    fun identity(): A = self

    fun test_int(): Int = 12

    fun test_int_invalid(): A = 12

    fun test_int_add(): Int = 12 + 15

    fun test_int_add_invalid_1(): Int = "12" + 15

    fun test_int_add_invalid_2(): Int = 15 + self

    fun test_int_add_invalid_3(): A = 15 + self

    fun test_if_1(): Int = if true then 1 else 2

    fun test_if_invalid_1(): Int = if true then 1 else "2"
}

generic [C] struct Pair {
    a : C
    b : C
}

generic [C, D] struct Tuple2 {
    a : C
    b : D
}

class B : A {
    fun test_generic_constructor(): Pair[Int] = Pair[Int](12, 15)
    fun test_generic_component_access(): Int = Pair[Int](12,  15).a
    fun test_invalid_generic_type(): Pair[Int] = Pair[Int](12, 15).a
    fun test_generic_component_access_2(): Bool = Tuple2[Int, Bool](12, true).b
    fun test_invalid_generic_type_2(): Tuple2[Int, Bool] = true
}
