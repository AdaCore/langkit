# Check that ``NPropagate`` expressions work as expected

import lexer_example

@with_lexer(foo_lexer)
grammar foo_grammar {
    @main_rule main_rule <- Plus(literal "+" literal)
    literal <- Literal(@Number)
}

@abstract
class FooNode implements Node[FooNode] {
    v: LogicVar
}

class Literal: FooNode implements TokenNode {
    fun static_combiner(other: Entity[Literal]): Entity[Literal] = other

    fun variadic_combiner(lits: Array[Entity[Literal]]): Entity[Literal] =
        lits?[0]
}

class Plus: FooNode {
    @parse_field lhs: Literal
    @parse_field rhs: Literal

    @exported
    fun resolve(
        lhs: Entity[FooNode],
        rhs: Entity[FooNode],
        use_variadic_combiner: Bool
    ): Entity[FooNode] = {
        val arr = [node.lhs.v, node.rhs.v];
        val propagator =
            if use_variadic_combiner
            then
                node.v <- Literal.variadic_combiner%([node.lhs.v, node.rhs.v])
                # Check that array passed to the variadic combiner need not be
                # an array literal.
                %and node.v <- Literal.variadic_combiner%(arr)
            else node.v <- Literal.static_combiner%(node.lhs.v, node.rhs.v);
        val eq = propagator %and node.lhs.v <- lhs %and node.rhs.v <- rhs;

        if eq.solve()
        then node.v.get_value()
        else raise[Entity[FooNode]] PropertyError("unreachable")
    }
}
