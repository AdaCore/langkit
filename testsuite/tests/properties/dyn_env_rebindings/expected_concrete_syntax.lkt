import lexer_example

@with_lexer(foo_lexer)
grammar foo_grammar {
    @main_rule main_rule <- list*(type_decl)
    type_decl <- or(type_alias | generic_struct | bare_struct)
    generic_struct <- GenericStruct(
        "def" id "(" GenericFormalTypeDecl(id) ")"
    )
    bare_struct <- BareStruct("def" id)
    type_alias <- TypeAlias("def" id "=" type_expr)
    type_expr <- or(
        | TypeInstantiation(type_expr "(" type_expr ")")
        | TypeRef(id)
    )
    id <- Identifier(@identifier)
}

@abstract class FooNode implements Node[FooNode] {
}

class Identifier: FooNode implements TokenNode {
}

@abstract class TypeDecl: FooNode {
    @parse_field name: Identifier

    env_spec {
        add_to_env(
            EnvAssoc(
                key=node.name.symbol, value=node, dest_env=DesignatedEnv(
                    kind=DesignatedEnvKind.current_env, env_name=null[Symbol], direct_env=null[LexicalEnv[FooNode]]
                ), metadata=null[Metadata]
            )
        )
        add_env()
    }
}

class BareStruct: TypeDecl {
}

class GenericFormalTypeDecl: TypeDecl {
}

@rebindable class GenericStruct: TypeDecl {
    @parse_field type_param: GenericFormalTypeDecl

    @exported fun actual_type(): Entity[TypeDecl] =
    self.children_env().get_first(node.type_param.name.symbol).as[TypeDecl]
}

class TypeAlias: TypeDecl {
    @parse_field type_expr: TypeExpr
}

@abstract class TypeExpr: FooNode {
    @exported @abstract fun resolve(): Entity[TypeDecl]
}

class TypeInstantiation: TypeExpr {
    @parse_field generic_type: TypeExpr
    @parse_field actual_type: TypeExpr

    @lazy instantiation_env: LexicalEnv[FooNode] =
    dynamic_lexical_env(TypeInstantiation.instantiation_bindings)

    @memoized fun instantiation_bindings(): Array[InnerEnvAssoc] = {
        val ent = node.as_bare_entity;
        val gen = ent.generic_type.resolve().as[GenericStruct];
        val act = ent.actual_type.resolve();

        [InnerEnvAssoc(
            key=gen.type_param.name.symbol, value=act.node, rebindings=act.info.rebindings
        )]
    }

    fun resolve(): Entity[TypeDecl] = {
        val gen = self.generic_type.resolve().as[GenericStruct];

        Entity[GenericStruct](
            node=gen.node, info=EntityInfo(
                md=gen.info.md, rebindings=gen.info.rebindings.append_rebinding(
                    gen.node.children_env(), node.instantiation_env()
                ), from_rebound=gen.info.from_rebound
            )
        )
    }
}

class TypeRef: TypeExpr {
    @parse_field name: Identifier

    fun resolve(): Entity[TypeDecl] =
    match self.children_env().get_first(node.name.symbol) {
        case alias: Entity[TypeAlias] => alias.type_expr.resolve()
        case other => other.as[TypeDecl]
    }
}
