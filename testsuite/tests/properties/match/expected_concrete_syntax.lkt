import lexer_example

@with_lexer(foo_lexer)
grammar foo_grammar {
    @main_rule main_rule <- list+(or(Def("def"
    Name(@identifier) expr) | expr))
    expr <- or(atom | plus)
    atom <- or(lit | ref)
    lit <- Lit(@number)
    ref <- Ref(@identifier)
    plus <- pick("(" Plus(expr "+" expr) ")")
}

@abstract class FooNode implements Node[FooNode] {

    @export fun find_atoms(): Array[Entity[Atom]] = (
        match self {
            # This should match Lit .. Ref
            case a: Atom => [a]

            # This should match Def | Plus .. FooNode.list
            case _ => null[Array[Entity[Atom]]]
        }
    ) & (
        self.children.mapcat((c) => c.find_atoms())
    )

    @export fun find_atoms_or_exprs(): Array[Entity[Expr]] = (
        match self {
            # This should match Lit .. Ref
            case a: Atom => [a.as[Expr]]

            # This should match the only remaining expression: Plus
            case e: Expr => [e]

            # This should match Def | FooNode.list
            case _ => null[Array[Entity[Expr]]]
        }
    ) & (
        self.children.mapcat((c) => c.find_atoms_or_exprs())
    )

    @export fun find_exprs(): Array[Entity[Expr]] = (
        match self {
            # This should match Lit .. Plus
            case e: Expr => [e]

            # This should match nothing (Atom is an Expr subclass), so emit a
            # warning.
            case a: Atom => [a.as[Expr]]

            # This should match Def | FooNode.list
            case _ => null[Array[Entity[Expr]]]
        }
    ) & (
        self.children.mapcat((c) => c.find_exprs())
    )
}

class Def: FooNode {
    @parse_field name: Name
    @parse_field expr: Expr
}

@abstract class Expr: FooNode {

    @export fun find_refs(): Array[Entity[Ref]] = (
        match self {
            # This should match Ref
            case r: Ref => [r]

            # This should match Lit
            case _ => null[Array[Entity[Ref]]]
        }
    ) & (
        self.children.mapcat((c) => c.as[Expr]!.find_refs())
    )
}

@abstract class Atom: Expr implements TokenNode {
}

class Lit: Atom implements TokenNode {
}

class Ref: Atom implements TokenNode {
}

class Plus: Expr {
    @parse_field lhs: Expr
    @parse_field rhs: Expr
}

class Name: FooNode implements TokenNode {
}
