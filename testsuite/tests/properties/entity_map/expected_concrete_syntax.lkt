import lexer_example
grammar foo_grammar {
    @main_rule main_rule <- list+(decl)
    decl <- Decl(
        HasPlus("+") Name(@identifier) "(" ref_list ")"
    )
    ref_list <- list*(ref)
    ref <- Ref(Name(@identifier))

}

@root_node class FooNode {

    @export fun b_set (): Bool = self.info.md.b
}

class Decl : FooNode {
    @parse_field has_plus : HasPlus
    @parse_field name : Name
    @parse_field items : ASTList[Ref]

    @export fun entity_items (): Array[Ref] = node.as_entity.items.map((i) => i)
}

@qualifier class HasPlus : FooNode {
}

class Name : FooNode {
}

class Ref : FooNode {
    @parse_field name : Name

    @export fun decl (): Decl = node.children_env().get(node.name)?(0).to[Decl]!
}

struct EnvAssoc {
    key : Symbol
    value : FooNode
    dest_env : LexicalEnv
    metadata : Metadata
}
