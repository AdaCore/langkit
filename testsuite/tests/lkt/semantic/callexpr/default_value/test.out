Resolving test.lkt
==================
Decl <FunDecl "f" test.lkt:1:1-1:59>
     has_type <FunctionType "(Int, Int, Int) -> Int" test.lkt>

   Decl <FunArgDecl "i" test.lkt:1:7-1:17>
        has_type <StructDecl prelude: "Int">

      Id   <RefId "Int" test.lkt:1:10-1:13>
           has_type None
           references <StructDecl prelude: "Int">

      Expr <NumLit test.lkt:1:16-1:17>
           has_type <StructDecl prelude: "Int">

   Decl <FunArgDecl "j" test.lkt:1:19-1:29>
        has_type <StructDecl prelude: "Int">

      Id   <RefId "Int" test.lkt:1:22-1:25>
           has_type None
           references <StructDecl prelude: "Int">

      Expr <NumLit test.lkt:1:28-1:29>
           has_type <StructDecl prelude: "Int">

   Decl <FunArgDecl "k" test.lkt:1:31-1:41>
        has_type <StructDecl prelude: "Int">

      Id   <RefId "Int" test.lkt:1:34-1:37>
           has_type None
           references <StructDecl prelude: "Int">

      Expr <NumLit test.lkt:1:40-1:41>
           has_type <StructDecl prelude: "Int">

   Id   <RefId "Int" test.lkt:1:44-1:47>
        has_type None
        references <StructDecl prelude: "Int">

   Expr <BinOp test.lkt:1:50-1:59>
        has_type <StructDecl prelude: "Int">

      Expr <BinOp test.lkt:1:50-1:55>
           has_type <StructDecl prelude: "Int">

         Id   <RefId "i" test.lkt:1:50-1:51>
              has_type <StructDecl prelude: "Int">
              references <FunArgDecl "i" test.lkt:1:7-1:17>

         Id   <RefId "j" test.lkt:1:54-1:55>
              has_type <StructDecl prelude: "Int">
              references <FunArgDecl "j" test.lkt:1:19-1:29>

      Id   <RefId "k" test.lkt:1:58-1:59>
           has_type <StructDecl prelude: "Int">
           references <FunArgDecl "k" test.lkt:1:31-1:41>

Decl <ValDecl "v1" test.lkt:3:1-3:13>
     has_type <StructDecl prelude: "Int">

   Expr <CallExpr test.lkt:3:10-3:13>
        has_type <StructDecl prelude: "Int">

      Id   <RefId "f" test.lkt:3:10-3:11>
           has_type <FunctionType "(Int, Int, Int) -> Int" test.lkt>
           references <FunDecl "f" test.lkt:1:1-1:59>

Decl <ValDecl "v2" test.lkt:4:1-4:14>
     has_type <StructDecl prelude: "Int">

   Expr <CallExpr test.lkt:4:10-4:14>
        has_type <StructDecl prelude: "Int">

      Id   <RefId "f" test.lkt:4:10-4:11>
           has_type <FunctionType "(Int, Int, Int) -> Int" test.lkt>
           references <FunDecl "f" test.lkt:1:1-1:59>

      Expr <NumLit test.lkt:4:12-4:13>
           has_type <StructDecl prelude: "Int">

Decl <ValDecl "v3" test.lkt:5:1-5:17>
     has_type <StructDecl prelude: "Int">

   Expr <CallExpr test.lkt:5:10-5:17>
        has_type <StructDecl prelude: "Int">

      Id   <RefId "f" test.lkt:5:10-5:11>
           has_type <FunctionType "(Int, Int, Int) -> Int" test.lkt>
           references <FunDecl "f" test.lkt:1:1-1:59>

      Expr <NumLit test.lkt:5:12-5:13>
           has_type <StructDecl prelude: "Int">

      Expr <NumLit test.lkt:5:15-5:16>
           has_type <StructDecl prelude: "Int">

Decl <ValDecl "v4" test.lkt:6:1-6:20>
     has_type <StructDecl prelude: "Int">

   Expr <CallExpr test.lkt:6:10-6:20>
        has_type <StructDecl prelude: "Int">

      Id   <RefId "f" test.lkt:6:10-6:11>
           has_type <FunctionType "(Int, Int, Int) -> Int" test.lkt>
           references <FunDecl "f" test.lkt:1:1-1:59>

      Expr <NumLit test.lkt:6:12-6:13>
           has_type <StructDecl prelude: "Int">

      Expr <NumLit test.lkt:6:15-6:16>
           has_type <StructDecl prelude: "Int">

      Expr <NumLit test.lkt:6:18-6:19>
           has_type <StructDecl prelude: "Int">

