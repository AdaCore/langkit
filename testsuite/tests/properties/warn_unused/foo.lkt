import lexer_example

@with_lexer(foo_lexer)
grammar foo_grammar {
    @main_rule item <- or(example | example_list)
    example <- Example("example")
    example_list <- ExampleList("(" list+(item) ")")
}

class FooNode implements Node[FooNode] {
}

class Example: FooNode {
    @exported fun prop(): Bool = true
}

class ExampleList: FooNode {
    @parse_field items: ASTList[FooNode, FooNode]

    @exported fun unused_param(
        ex_param: Entity[FooNode],
        @ignored ex_used_param: Entity[FooNode],
        @ignored ex_wrongly_used_param: Entity[FooNode]
    ): Entity[FooNode] = ex_wrongly_used_param

    @exported fun unused_block_var(): Entity[FooNode] = {
       val ex_var = node;
       node.items.as_bare_entity
    }

    @exported fun unused_let_var(): Entity[FooNode] = {
        val ex_list = node.items;
        node.items.as_bare_entity
    }

    @exported fun unused_loop_var(): Array[Bool] =
        node.items.map((ex_item) => true)

    @exported fun unused_then_var(): Entity[FooNode] =
        node.items.do((ex_items) => node.items.at(0).as_bare_entity)

    @exported fun unused_match_var(): Array[Bool] =
        node.items.map((item) => match item {
            case ex: Example => true
            case ex_list: ExampleList =>
                ex_list.unused_match_var.all((b) => b)
            case _ => false
        })
}
