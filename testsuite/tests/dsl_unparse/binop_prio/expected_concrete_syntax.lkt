import lexer_example

@with_lexer(foo_lexer)
grammar foo_grammar {
    @main_rule main_rule <- list*(Example("example"))
}

@abstract class FooNode implements Node[FooNode] {
    @exported fun p1(b: Array[Bool]): Bool = {
        val v1 = (b?[0] or b?[1]) and (b?[2] or b?[3]);
        val v2 = (b?[0] and b?[1]) and b?[2];
        val v3 = (b?[0] and b?[1]) or (b?[2] and b?[3]);

        (v1 and v2) and v3
    }

    @exported fun p2(): Bool =
    (node is Example and node.parent.is_null) or node.parent.parent.is_null

    @exported fun p3(): Bool = node is Example and (
        node.parent.is_null or node.parent.parent.is_null
    )
}

class Example: FooNode implements TokenNode {
}
