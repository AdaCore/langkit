@spacing("alphanumericals", "alphanumericals")
lexer foo_lexer {

    @text whitespace <- p"[ \n\r\t]+"
    @family("alphanumericals") @text def <- "def"
    @text var <- "var"
    @family("alphanumericals") @text error <- "error"
    @family("alphanumericals") @text example <- "example"
    @family("alphanumericals") @text null_tok <- "null"
    @text comma <- ","
    @text dot <- "."
    @text semicolon <- ";"
    @text l_par <- "("
    @text r_par <- ")"
    @text l_brace <- "{"
    @text r_brace <- "}"
    @text equal <- "="
    @text plus <- "+"
    @text minus <- "-"
    @text less_than <- "<"
    @family("alphanumericals") @text number <- p"[0-9]+"
    @family("alphanumericals") @symbol identifier <- p"[a-zA-Z_][a-zA-Z0-9_]*"
    @text string <- p"\"[^\"]*\""
    @newline_after @text comment <- p"#(.?)+"

}
grammar foo_grammar {
    @main_rule main_rule <- list+(or(Literal(@number) | Identifier(@identifier)))

}

@root_node class FooNode {
}

@abstract class RootNode : FooNode {
    var : LogicVar

    fun xref_eq (arg1 : FooNode, arg2 : FooNode): LogicEquation

    @export fun solve_eq (arg1 : FooNode, arg2 : FooNode): Boolean =
    node.xref_eq(arg1, arg2).solve
}

class Identifier : RootNode {

    fun xref_eq (arg1 : FooNode, arg2 : FooNode): LogicEquation =
    %domain(node.var, [node])
}

class Literal : RootNode {

    fun is_eq (other : Literal): Boolean = node.as_entity = other

    fun xref_eq (arg1 : FooNode, arg2 : FooNode): LogicEquation =
    (%domain(node.var, [arg1])) and (
        %eq(node.var, arg2, eq_prop=BareLiteral.is_eq)
    )
}
