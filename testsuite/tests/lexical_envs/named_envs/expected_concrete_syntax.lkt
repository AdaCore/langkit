lexer foo_lexer {

    @trivia() Whitespace <- p"[ \n\r\t]+"
    Package <- "package"
    Procedure <- "procedure"
    Task <- "task"
    Type <- "type"
    Body <- "body"
    IsKw <- "is"
    PrivateKw <- "private"
    EndKw <- "end"
    Separate <- "separate"
    Ref <- "ref"
    Declare <- "declare"
    Begin <- "begin"
    Dot <- "."
    Semicolon <- ";"
    LPar <- "("
    RPar <- ")"
    Number <- p"[0-9]+"
    @symbol() Identifier <- p"[a-zA-Z_][a-zA-Z0-9_]*"
    String <- p"\"[^\"]*\""
}
@with_lexer(foo_lexer)
grammar foo_grammar {
    @main_rule main_rule <- list*(top_level_decl)
    top_level_decl <- or(
        | package_decl
        | package_body
        | subp_decl
        | subp_body
    )
    decl_part <- DeclarativePart(decls)
    decls <- list*(or(
        | package_decl
        | package_body
        | subp_decl
        | subp_body
        | incomplete_type_decl
        | type_decl
        | ref
    ))
    package_decl <- PackageDecl(
        "package"
        name
        "is"
        PublicPart(decls)
        ?pick("private" PrivatePart(decls)) "end" ";"
    )
    package_body <- PackageBody(
        "package" "body" name "is" decl_part "end" ";"
    )
    subp_decl <- SubpDecl("procedure" name ";")
    subp_body <- SubpBody(
        "procedure"
        name "is" SubpBodyDecls(decls) "begin" stmts "end" ";"
    )
    incomplete_type_decl <- IncompleteTypeDecl("type" identifier ";")
    type_decl <- TypeDecl("type" identifier "is" "end" ";")
    identifier <- Identifier(@Identifier)
    name <- or(DottedName(name "." identifier) | identifier)
    stmts <- list*(or(declare_block | ref))
    declare_block <- DeclareBlock(
        "declare" DeclarativePart(decls) "begin" stmts "end" ";"
    )
    ref <- Ref("ref" name ";")
}

@abstract
class FooNode implements Node[FooNode] {
    |" Return whether this node is in the top-level decl list.
    fun is_toplevel(): Bool =
        not node.parent.is_null and node.parent.parent.is_null

    |" Return whether this node can define a named environment.
    @memoized
    fun can_have_name(): Bool =
        if node is PackageDecl | PackageBody | SubpDecl | SubpBody | SubpBodyDecls then (
            # All nodes that can define a named environment are supposed to
            # live in lists, so use Self.parent.parent to get the node that
            # owns that list.
            node.parent is ASTList[FooNode] and (
                node.parent.parent.is_null or node.parent.parent.can_have_name()
            )
        ) else false

    |" Assuming this node can define a named environment (see
    |" ``can_have_name``), return its fully qualified namem.
    fun full_name(): String = node.name_parent().do(
        (np) => np.full_name() & "." & node.self_name().as[Identifier].base_name(), default_val=node.self_name().scope_name()
    )

    fun suffixed_full_name(suffix: String): String =
        node.full_name().do((n) => n & "." & suffix)

    |" Assuming this node can define a named environment, return the syntactic
    |" parent node that defines the parent scope for Self. If there is no such
    |" node (because Self is in the root list), return null.
    fun name_parent(): FooNode = if (
        (
            (
                node.parent.is_null or not node.parent is ASTList[FooNode]
            ) or node.parent.parent.is_null
        ) or not node.parent.parent is DeclarativePart
    ) or node.parent.parent.parent.is_null then null[FooNode] else # All nodes that can define a named environment are supposed to
    # live in lists (Self.parent is a list), so Self.parent.parent is
    # supposed to be a declarative part, and finally Self.parent.parent
    # gets the node that owns that declarative part.
    {
        val owner = node.parent.parent.parent;

        if owner is PackageDecl | PackageBody | SubpDecl | SubpBody | SubpBodyDecls | PublicPart | PrivatePart then match owner {
            case pp: PublicPart => pp.parent
            case pp: PrivatePart => pp.parent
            case n => n
        } else null[FooNode]
    }

    |" If this node can define a named environment (see ``can_have_name``),
    |" return the name of its parent scope. Return a null symbol otherwise.
    @memoized
    fun decl_parent_scope_name(): Symbol =
        if node.can_have_name() then node.name_parent().do(
            (np) => np.full_name(), default_val=node.self_name().parent_scope_name()
        ).to_symbol else null[Symbol]

    fun initial_env(): DesignatedEnv = node.decl_parent_scope_name().do(
        (name) => DesignatedEnv(
            kind=DesignatedEnvKind.named_env, env_name=name, direct_env=null[LexicalEnv]
        ), default_val=DesignatedEnv(
            kind=DesignatedEnvKind.direct_env, env_name=null[Symbol], direct_env=node.parent.children_env()
        )
    )

    |" Assuming this node can define a named environment (see
    |" ``can_have_name``), return its syntactic name.
    fun self_name(): Name = raise[Name] PropertyError("Property FooNode.self_name not implemented")
}

class DeclarativePart: FooNode {
    @parse_field decls: ASTList[FooNode]
}

class PrivatePart: DeclarativePart {
    env_spec {
        add_env(
            transitive_parent=true, names=[node.parent.suffixed_full_name("__privatepart").to_symbol]
        )
    }
}

class PublicPart: DeclarativePart {
}

|" Top-level list of declaration in a subprogam body.
class SubpBodyDecls: DeclarativePart {
    env_spec {
        # The only case where we need a declarative part to have a name is when
        # it is top-level in subprogram body (A), so that separate subprogram
        # bodies (B) can use this environment as their initial env. Note that
        # this case is legal only when that (A) is the syntactic root.
        add_env(
            names=if node.parent is SubpBody and node.parent.parent.is_null then [node.parent.as[SubpBody].name.scope_name().to_symbol] else null[Array[Symbol]]
        )
    }
}

class DeclareBlock: FooNode {
    @parse_field decls: DeclarativePart
    @parse_field stmts: ASTList[FooNode]
}

class IncompleteTypeDecl: FooNode {
    @parse_field name: Identifier

    env_spec {
        add_to_env_kv(node.name.symbol, node)
    }
}

@abstract
class Name: FooNode {
    |" Innermost suffix for this name.
    fun base_name(): String = match node {
        case id: Identifier => id.text()
        case dn: DottedName => dn.suffix.base_name()
    }

    |" Absolute name of the scope that this name defines, assuming that
    |" ``prefix`` is the implicit prefix for that name.
    fun scope_name(): String = match node {
        case id: Identifier => id.text()
        case dn: DottedName => dn.prefix.scope_name() & "." & dn.suffix.text()
    }

    |" Absolute name of the scope that defines this name, assuming that
    |" ``prefix`` is the implicit prefix for that name.
    fun parent_scope_name(): String = match node {
        case _: Identifier => null[String]
        case dn: DottedName => dn.prefix.scope_name()
    }

    |" Innermost scope for this name. The lookup starts from the given
    |" environment.
    fun scope(from_env: LexicalEnv): LexicalEnv =
        node.resolve(from_env).children_env()

    |" Return the scope that contains the declaration that this name defines.
    fun parent_scope(from_env: LexicalEnv): LexicalEnv = match node {
        case _: Identifier => from_env
        case dn: DottedName => dn.prefix.scope(from_env)
    }

    |" Return the list of declarations that define this name. The lookup
    |" starts from the given environment.
    fun resolve(from_env: LexicalEnv): Entity[FooNode] =
        node.parent_scope(from_env).get_first(node.base_name().to_symbol)
}

class DottedName: Name {
    @parse_field prefix: Name
    @parse_field suffix: Identifier
}

class Identifier: Name implements TokenNode {
}

class PackageBody: FooNode {
    @parse_field name: Name
    @parse_field decls: DeclarativePart

    fun self_name(): Name = node.name

    |" Assuming this PackageBody is not in the top-level list, return the
    |" environment of its PackageDecl that it should reference.
    fun body_decl_scope(): LexicalEnv = {
        val pkg_decl = node.lookup_decl_part();

        if pkg_decl.private_part.is_null then pkg_decl.children_env() else pkg_decl.private_part.children_env()
    }

    |" Assuming this PackageBody is not in the top-level list, return the
    |" the corresponding package declaration.
    fun lookup_decl_part(): PackageDecl =
        node.parent.children_env().get_first(node.name.base_name().to_symbol).as[PackageDecl].node

    |" Return the PackageDecl node corresponding to this PackageBody.
    @exported
    fun decl_part(): Entity[PackageDecl] = {
        val env = node.parent.children_env();

        node.name.resolve(env).as[PackageDecl]
    }

    env_spec {
        # The initial environment for package bodies is the private part of the
        # corresponding package specs (or the public part if there is no
        # private part).
        set_initial_env(
            if node.is_toplevel() then DesignatedEnv(
                kind=DesignatedEnvKind.named_env, env_name=node.suffixed_full_name("__privatepart").to_symbol, direct_env=null[LexicalEnv]
            ) else DesignatedEnv(
                kind=DesignatedEnvKind.direct_env, env_name=null[Symbol], direct_env=node.parent.children_env()
            )
        )
        add_to_env_kv(
            s"__nextpart", node, dest_env=if node.can_have_name() then DesignatedEnv(
                kind=DesignatedEnvKind.named_env, env_name=node.suffixed_full_name("__privatepart").to_symbol, direct_env=null[LexicalEnv]
            ) else DesignatedEnv(
                kind=DesignatedEnvKind.direct_env, env_name=null[Symbol], direct_env=node.body_decl_scope()
            )
        )
        add_env(
            names=[node.suffixed_full_name("__body").to_symbol]
        )
        reference(
            [node.as[FooNode]], PackageBody.body_decl_scope, kind=prioritary, cond=not node.is_toplevel()
        )
    }
}

class PackageDecl: FooNode {
    @parse_field name: Name
    @parse_field public_part: PublicPart
    @parse_field @nullable private_part: PrivatePart

    fun self_name(): Name = node.name

    |" Return the names for the environment that this package creates.
    fun new_env_names(): Array[Symbol] =
        # Always register the "regular" name for this package
        # If there is a private part, that's all we need. Otherwise, register
        # this environment with the name of the private part as well, so that
        # package bodies can assume there is always a private part.
        if node.full_name() == "" then null[Array[Symbol]] else (
            if node.private_part.is_null then [node.full_name(), node.full_name() & ".__privatepart"] else [node.full_name()]
        ).map((s) => s.to_symbol)

    |" Return the PackageBody node corresponding to this PackageDecl.
    @exported
    fun body_part(): Entity[PackageBody] =
        node.private_part.do((pp) => pp, default_val=node).children_env().get_first(s"__nextpart").as[PackageBody]

    env_spec {
        set_initial_env(
            (
                if node.is_toplevel() then node.decl_parent_scope_name() else null[Symbol]
            ).do(
                (name) => DesignatedEnv(
                    kind=DesignatedEnvKind.named_env, env_name=name, direct_env=null[LexicalEnv]
                ), default_val=DesignatedEnv(
                    kind=DesignatedEnvKind.direct_env, env_name=null[Symbol], direct_env=node.parent.children_env()
                )
            )
        )
        add_to_env_kv(node.name.base_name().to_symbol, node)
        add_env(names=node.new_env_names())
    }
}

class Ref: FooNode {
    @parse_field name: Name

    @exported
    fun resolve(): Entity[FooNode] = node.name.resolve(node.node_env())
}

class SubpBody: FooNode {
    @parse_field name: Name
    @parse_field decls: SubpBodyDecls
    @parse_field stmts: ASTList[FooNode]

    fun self_name(): Name = node.name

    env_spec {
        set_initial_env(node.initial_env())
    }
}

class SubpDecl: FooNode {
    @parse_field name: Name

    fun self_name(): Name = node.name

    env_spec {
        set_initial_env(node.initial_env())
        add_to_env_kv(node.name.base_name().to_symbol, node)
    }
}

class TypeDecl: FooNode {
    @parse_field name: Identifier

    env_spec {
        add_to_env_kv(node.name.symbol, node)
    }
}
