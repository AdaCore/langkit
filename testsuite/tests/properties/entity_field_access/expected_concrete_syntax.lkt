import lexer_example

@with_lexer(foo_lexer)
grammar foo_grammar {
    @main_rule main_rule <- item
    item <- or(couple | literal)
    couple <- Couple("(" item "," item ")")
    literal <- Literal(@Number)
}

@abstract
class FooNode implements Node[FooNode] {
    @exported
    fun first_set(): Bool = self.info.md.is_first

    @exported
    fun second_set(): Bool = self.info.md.is_second

    @exported
    fun test_main(): Entity[FooNode] =
        node.as_entity.as[Couple].first_entity().first
}

class Couple: FooNode {
    @parse_field first: FooNode
    @parse_field second: FooNode

    fun first_entity(): Entity[Couple] =
        node.as_entity.get_entity(Metadata(is_first=true, is_second=false))

    fun get_entity(md: Metadata): Entity[Couple] = Entity[Couple](
        node=node, info=EntityInfo(
            md=md, rebindings=null[EnvRebindings], from_rebound=false
        )
    )

    @exported
    fun property_on_entity(): Entity[Couple] =
        # Check that we can do ".get_entity" even when the prefix is an entity
        node.as_entity.get_entity(node.as_entity.info.md)
}

class Literal: FooNode implements TokenNode {
}

@metadata
struct Metadata {
    @used_in_equality is_first: Bool
    @used_in_equality is_second: Bool
}
