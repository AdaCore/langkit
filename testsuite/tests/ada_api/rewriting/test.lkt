# Test that basic rewriting API usage behaves as expected

import lexer_example

@with_lexer(foo_lexer)
@with_unparsers
grammar foo_grammar {
    @main_rule main_rule <- list*(
        or(def_rule | var_rule | id_num_list | skip(ErrorDecl))
    )
    name <- Name(@Identifier)
    def_rule <- Def(
        "def"
        name
        ?pick("(" list+(name, ",", allow_trailing) ")")
        "="
        expr
    )
    var_rule <- or(
        InitializedVar("var" name null(ASTList[Name]) "=" expr)
        | Var("var" name null(ASTList[Name]))
    )
    expr <- or(
        | Plus(expr "+" expr)
        | ParenExpr("(" expr ")")
        | Ref(name)
        | Literal(@Number)
        | Match("<" expr ">" "{" list*(match_arm, ";", allow_leading) "}")
    )
    match_arm <- MatchArm(expr ":" expr)
    id_num_list <- IdNumList(
        "(" IdOrNumList*(Literal(@Number)) IdOrNumList*(name) ")"
    )
}

@abstract
@with_abstract_list
class FooNode implements Node[FooNode] {
}

@abstract
class AbstractDecl: FooNode {
}

@abstract
class Decl: AbstractDecl {
    @abstract @parse_field name: Name
    @abstract @parse_field args: ASTList[Name]
    @abstract @nullable @parse_field expr: Expr
}

class Def: Decl {
    @parse_field name: Name
    @parse_field args: ASTList[Name]
    @parse_field expr: Expr
}

class InitializedVar: Decl {
    @parse_field name: Name
    @parse_field args: ASTList[Name]
    @parse_field expr: Expr
}

class Var: Decl {
    @parse_field name: Name
    @parse_field args: ASTList[Name]
    @null_field @parse_field expr: Expr
}

class ErrorDecl: AbstractDecl implements ErrorNode {
}

@abstract
class Expr: FooNode {
}

@custom_short_image
class Literal: Expr implements TokenNode {
}

class ParenExpr: Expr {
    @parse_field expr: Expr
}

class Plus: Expr {
    @parse_field lhs: Expr
    @parse_field rhs: Expr
}

class Ref: Expr {
    @parse_field name: Name
}

@custom_short_image
class Name: FooNode implements TokenNode {
}

class IdOrNumList: ASTList[FooNode] {
}

class IdNumList: AbstractDecl {
   @parse_field nums: IdOrNumList
   @parse_field names: IdOrNumList
}

class Match: Expr {
   @parse_field selector: Expr
   @parse_field arms: ASTList[MatchArm]
}

class MatchArm: FooNode {
   @parse_field pattern: Expr
   @parse_field result: Expr
}
