@spacing(alphanumericals, alphanumericals)
lexer foo_lexer {

    whitespace <- p"[ \n\r\t]+"

    family alphanumericals {
        def <- "def"
    }

    var <- "var"

    family alphanumericals {
        error <- "error"
        example <- "example"
        null_tok <- "null"
    }

    comma <- ","
    dot <- "."
    semicolon <- ";"
    l_par <- "("
    r_par <- ")"
    l_brace <- "{"
    r_brace <- "}"
    equal <- "="
    plus <- "+"
    minus <- "-"
    less_than <- "<"

    family alphanumericals {
        number <- p"[0-9]+"
        @symbol identifier <- p"[a-zA-Z_][a-zA-Z0-9_]*"
    }

    string <- p"\"[^\"]*\""
    @newline_after comment <- p"#(.?)+"
}
grammar foo_grammar {
    @main_rule main_rule <- RootNode(list+(or(decl | subdecl | other_decl), ";"))
    decl <- Decl("def" name)
    other_decl <- OtherDecl("def" "var" name)
    subdecl <- SubDecl("var" name)
    name <- Name(@identifier)

}

@root_node class FooNode {
}

@abstract class BaseDecl : FooNode {

    @export fun lookup (n : SymbolType): FooNode =
    node.env_lookup(node.node_env, n)

    fun env_lookup (env : LexicalEnv, n : SymbolType): FooNode =
    env.get(n, only_first=true)
}

class Decl : BaseDecl {
    @parse_field name : Name
}

class SubDecl : Decl {
}

class OtherDecl : BaseDecl {
    @parse_field name : Name
}

class Name : FooNode {
}

class RootNode : FooNode {
    @parse_field decls : ASTList[BaseDecl]
}

struct EnvAssoc {
    key : SymbolType
    value : FooNode
    dest_env : LexicalEnv
    metadata : Metadata
}
