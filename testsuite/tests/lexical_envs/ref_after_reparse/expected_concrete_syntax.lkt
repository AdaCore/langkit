grammar None_grammar {
    decl <- Decl(name)
    ref_list <- list+(ref)
    name <- Name(@Identifier)
    main_rule <- list*(block)
    decl_list <- @LPar list+(decl) @RPar
    using_list <- @LPar list+(using) @RPar
    using <- Using(name)
    ref <- Ref(name)
    block <- Block(
        name decl_list @LBrace using_list ref_list @RBrace
    )

}

class FooNode {
}

class Block : FooNode {
    @parse_field name : Name
    @parse_field decls : ASTList[Decl]
    @parse_field usings : ASTList[Using]
    @parse_field refs : ASTList[Ref]
}

class Decl : FooNode {
    @parse_field name : Name
}

"""
List of Block.
"""
class ASTList[Block] : FooNodeBaseList {
}

"""
List of Decl.
"""
class ASTList[Decl] : FooNodeBaseList {
}

"""
List of Ref.
"""
class ASTList[Ref] : FooNodeBaseList {
}

"""
List of Using.
"""
class ASTList[Using] : FooNodeBaseList {
}

class Name : FooNode {

    fun ambiant_entity (): Entity[FooNode] = env.get(self)?[0]

    fun designated_env (): LexicalEnv =
    self.unit.root.node_env.get(self)?[0].children_env

    public fun entity (): Entity[FooNode] = bind env=self.node_env in
        self.ambiant_entity
    end
}

class Ref : FooNode {
    @parse_field name : Name

    public fun entity (): Entity[FooNode] = self.as_entity.name.entity
}

class Using : FooNode {
    @parse_field name : Name
}
