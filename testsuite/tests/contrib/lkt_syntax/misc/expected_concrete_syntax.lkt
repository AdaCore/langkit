lexer foo_lexer {

    @ignored _ <- p"[ \n\r\t]+"
    example <- "example"
    @trivia() comment <- p"#(.?)+"
}
@with_lexer(foo_lexer)
grammar foo_grammar {
    @main_rule main_rule <- list+(Example("example"))
}

@abstract class FooNode implements Node[FooNode] {
}

class Example: FooNode {
    |" Test that null conditional + match expr expands correctly.
    @exported fun null_match(): Example = node.do(
        (v1) => match v1 {
            case e: Example => e
        }
    )

    |" Test that sym literals with quotes in them are properly unparsed.
    @exported fun test_symlit_escape(): Symbol = s"\"=\""

    |" Test various valid dotexpr's LHS.
    @exported fun test_dotexpr_lhs(): Int = {
        val a = [1].find((v) => v == 1);
        val _ = {
            val b = [1, 2];

            b
        }.find((v) => v == 1);
        val _ = "hello" & " world";

        a
    }

    |" Tests that block delimiter prevents a syntactic ambiguity.
    @exported fun test_1(): Array[Int] = {
        val a = 12;

        [a]
    }

    |" Tests that reserved names are properly avoided in constructor syntax.
    @exported fun test_2(): KV = KV(key=s"hey", value=s"you")
}

struct KV {
    key: Symbol
    value: Symbol
}
