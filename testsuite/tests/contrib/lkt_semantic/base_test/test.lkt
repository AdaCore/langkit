@root_node class A {
    fun identity(): A = self

    fun test_int(): Int = 12

    @invalid fun test_int_invalid(): A = 12

    fun test_int_add(): Int = 12 + 15

    @invalid fun test_int_add_invalid_1(): Int = "12" + 15

    @invalid fun test_int_add_invalid_2(): Int = 15 + self

    @invalid fun test_int_add_invalid_3(): A = 15 + self

    fun test_regexp_1(): Regexp = p"[a-z]"

    fun test_regexp_2(): Regexp = {
        val rg = p"[A-Z]";
        rg
    }

    fun test_if_1(): Int = if true then 1 else 2

    @invalid fun test_if_invalid_1(): Int = if true then 1 else "2"
}

generic [C]
struct Pair {
    a: C
    b: C
}

generic [C, D]
struct Tuple2 {
    a: C
    b: D

    @external fun test(): C
}

class B : A {
    fun test_generic_constructor(): Pair[Int] = Pair[Int](12, 15)
    fun test_generic_component_access(): Int = Pair[Int](12,  15).a
    @invalid fun test_invalid_generic_type(): Pair[Int] = Pair[Int](12, 15).a
    fun test_generic_component_access_2(): Bool = Tuple2[Int, Bool](12, true).b
    @invalid fun test_invalid_generic_type_2(): Tuple2[Int, Bool] = true
    fun test_fun_call(arg: A): Int = arg.test_int_add()
    fun test_struct_fun(arg: Tuple2[Int, Bool]): Int = arg.test()
    fun test_array_indexing(arg: Array[Int]): Int = arg(12)
}

val a: Int = 12

struct Foo {
    # Test that you cannot access toplevel declarations from a nested scope.
    @invalid fun test_identifier_leak_invalid(): Int = self.a
}

enum class C {
    case D, E
    @external fun wot(): D
}

# Test function types
fun add(a: Int, b: Int): Int = a + b
fun get_fn(): (Int, Int) -> Int = add
fun get_method(b_inst: B): () -> Int = b_inst.test_generic_component_access
@invalid fun get_method_invalid(b_inst: B): (B) -> Int = b_inst.test_fun_call
