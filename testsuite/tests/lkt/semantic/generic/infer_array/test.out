Resolving test.lkt
==================
Decl <ValDecl "arr" test.lkt:1:1-1:20>
     has_type <StructDecl prelude: "Array[Int]">

   Expr <ArrayLiteral test.lkt:1:11-1:20>
        has_type <StructDecl prelude: "Array[Int]">

      Expr <NumLit test.lkt:1:12-1:13>
           has_type <StructDecl prelude: "Int">

      Expr <NumLit test.lkt:1:15-1:16>
           has_type <StructDecl prelude: "Int">

      Expr <NumLit test.lkt:1:18-1:19>
           has_type <StructDecl prelude: "Int">

Decl <ValDecl "map" test.lkt:3:1-3:28>
     has_type <StructDecl prelude: "Array[Int]">

   Expr <CallExpr test.lkt:3:11-3:28>
        has_type <StructDecl prelude: "Array[Int]">

      Expr <DotExpr test.lkt:3:11-3:18>
           has_type <FunctionType prelude: "((Int) -> Int) -> Array[Int]">

         Id   <RefId "arr" test.lkt:3:11-3:14>
              has_type <StructDecl prelude: "Array[Int]">
              references <ValDecl "arr" test.lkt:1:1-1:20>

         Id   <RefId "map" test.lkt:3:15-3:18>
              has_type <FunctionType prelude: "((Int) -> Int) -> Array[Int]">
              references <FunDecl prelude: "map[U]">

      Expr <LambdaExpr test.lkt:3:19-3:27>
           has_type <FunctionType prelude: "(Int) -> Int">

         Decl <LambdaParamDecl "i" test.lkt:3:20-3:21>
              has_type <StructDecl prelude: "Int">

         Id   <RefId "i" test.lkt:3:26-3:27>
              has_type <StructDecl prelude: "Int">
              references <LambdaParamDecl "i" test.lkt:3:20-3:21>

Decl <ValDecl "map" test.lkt:4:1-4:29>
     has_type <StructDecl prelude: "Array[String]">

   Expr <CallExpr test.lkt:4:11-4:29>
        has_type <StructDecl prelude: "Array[String]">

      Expr <DotExpr test.lkt:4:11-4:18>
           has_type <FunctionType prelude: "((Int) -> String) -> Array[String]">

         Id   <RefId "arr" test.lkt:4:11-4:14>
              has_type <StructDecl prelude: "Array[Int]">
              references <ValDecl "arr" test.lkt:1:1-1:20>

         Id   <RefId "map" test.lkt:4:15-4:18>
              has_type <FunctionType prelude: "((Int) -> String) -> Array[String]">
              references <FunDecl prelude: "map[U]">

      Expr <LambdaExpr test.lkt:4:19-4:28>
           has_type <FunctionType prelude: "(Int) -> String">

         Decl <LambdaParamDecl "i" test.lkt:4:20-4:21>
              has_type <StructDecl prelude: "Int">

         Expr <SingleLineStringLit test.lkt:4:26-4:28>
              has_type <StructDecl prelude: "String">

