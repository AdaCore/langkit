Resolving test.lkt
==================
Id   <RefId "Int" test.lkt:3:13-3:16>
     references <StructDecl prelude: "Int">

Id   <RefId "Int" test.lkt:3:21-3:24>
     references <StructDecl prelude: "Int">

Id   <RefId "Int" test.lkt:3:27-3:30>
     references <StructDecl prelude: "Int">

Id   <RefId "a" test.lkt:3:33-3:34>
     references <FunArgDecl "a" test.lkt:3:10-3:16>

Expr <RefId "a" test.lkt:3:33-3:34>
     has type <StructDecl prelude: "Int">

Id   <RefId "b" test.lkt:3:37-3:38>
     references <FunArgDecl "b" test.lkt:3:18-3:24>

Expr <RefId "b" test.lkt:3:37-3:38>
     has type <StructDecl prelude: "Int">

Expr <BinOp test.lkt:3:33-3:38>
     has type <StructDecl prelude: "Int">

Id   <RefId "Int" test.lkt:5:8-5:11>
     references <StructDecl prelude: "Int">

Id   <RefId "test" test.lkt:5:14-5:18>
     references <FunDecl "test" test.lkt:3:1-3:38>

Expr <RefId "test" test.lkt:5:14-5:18>
     has type <FunctionType prelude: "(Int, Int) -> Int">

Expr <NumLit test.lkt:5:19-5:21>
     has type <StructDecl prelude: "Int">

Expr <NumLit test.lkt:5:23-5:25>
     has type <StructDecl prelude: "Int">

Expr <CallExpr test.lkt:5:14-5:26>
     has type <StructDecl prelude: "Int">

Id   <RefId "Int" test.lkt:6:17-6:20>
     references <StructDecl prelude: "Int">

test.lkt:6:23: error: No value for parameter `b` in call to `test`
6 | @invalid val u: Int = test(12) # Missing params
  |                       ^^^^^^^^

Id   <RefId "test" test.lkt:6:23-6:27>
     references <FunDecl "test" test.lkt:3:1-3:38>

Expr <RefId "test" test.lkt:6:23-6:27>
     has type <FunctionType prelude: "(Int, Int) -> Int">

Expr <NumLit test.lkt:6:28-6:30>
     has type <StructDecl prelude: "Int">

Expr <CallExpr test.lkt:6:23-6:31>
     has type <StructDecl prelude: "Int">

Id   <RefId "Int" test.lkt:7:17-7:20>
     references <StructDecl prelude: "Int">

test.lkt:7:23: error: No value for parameter `a` in call to `test`
7 | @invalid val v: Int = test(b=12) # Missing params in call with kwargs
  |                       ^^^^^^^^^^

Id   <RefId "test" test.lkt:7:23-7:27>
     references <FunDecl "test" test.lkt:3:1-3:38>

Expr <RefId "test" test.lkt:7:23-7:27>
     has type <FunctionType prelude: "(Int, Int) -> Int">

Id   <RefId "b" test.lkt:7:28-7:29>
     references <FunArgDecl "b" test.lkt:3:18-3:24>

Expr <RefId "b" test.lkt:7:28-7:29>
     has type <StructDecl prelude: "Int">

Expr <NumLit test.lkt:7:30-7:32>
     has type <StructDecl prelude: "Int">

Expr <CallExpr test.lkt:7:23-7:33>
     has type <StructDecl prelude: "Int">

Id   <RefId "Int" test.lkt:8:17-8:20>
     references <StructDecl prelude: "Int">

test.lkt:8:36: error: Unmatched actual in call to `test`
8 | @invalid val x: Int = test(12, 15, 17) # Too many params
  |                                    ^^

Id   <RefId "test" test.lkt:8:23-8:27>
     references <FunDecl "test" test.lkt:3:1-3:38>

Expr <RefId "test" test.lkt:8:23-8:27>
     has type <FunctionType prelude: "(Int, Int) -> Int">

Expr <NumLit test.lkt:8:28-8:30>
     has type <StructDecl prelude: "Int">

Expr <NumLit test.lkt:8:32-8:34>
     has type <StructDecl prelude: "Int">

test.lkt:8:36: error: ambiguous type for expression
8 | @invalid val x: Int = test(12, 15, 17) # Too many params
  |                                    ^^

Expr <CallExpr test.lkt:8:23-8:39>
     has type <StructDecl prelude: "Int">

Id   <RefId "Int" test.lkt:9:17-9:20>
     references <StructDecl prelude: "Int">

test.lkt:9:39: error: Unmatched actual in call to `test`
9 | @invalid val y: Int = test(a=1, b=12, c=15) # Too many params kwargs
  |                                       ^^^^

Id   <RefId "test" test.lkt:9:23-9:27>
     references <FunDecl "test" test.lkt:3:1-3:38>

Expr <RefId "test" test.lkt:9:23-9:27>
     has type <FunctionType prelude: "(Int, Int) -> Int">

Id   <RefId "a" test.lkt:9:28-9:29>
     references <FunArgDecl "a" test.lkt:3:10-3:16>

Expr <RefId "a" test.lkt:9:28-9:29>
     has type <StructDecl prelude: "Int">

Expr <NumLit test.lkt:9:30-9:31>
     has type <StructDecl prelude: "Int">

Id   <RefId "b" test.lkt:9:33-9:34>
     references <FunArgDecl "b" test.lkt:3:18-3:24>

Expr <RefId "b" test.lkt:9:33-9:34>
     has type <StructDecl prelude: "Int">

Expr <NumLit test.lkt:9:35-9:37>
     has type <StructDecl prelude: "Int">

test.lkt:9:41: error: ambiguous type for expression
9 | @invalid val y: Int = test(a=1, b=12, c=15) # Too many params kwargs
  |                                         ^^

Expr <CallExpr test.lkt:9:23-9:44>
     has type <StructDecl prelude: "Int">

Id   <RefId "Int" test.lkt:10:17-10:20>
     references <StructDecl prelude: "Int">

test.lkt:10:39: error: Unmatched actual in call to `test`
10 | @invalid val z: Int = test(a=1, b=12, c=foo) # Invalid kwarg with wrong value: check that there is an error message for the expr
   |                                       ^^^^^

Id   <RefId "test" test.lkt:10:23-10:27>
     references <FunDecl "test" test.lkt:3:1-3:38>

Expr <RefId "test" test.lkt:10:23-10:27>
     has type <FunctionType prelude: "(Int, Int) -> Int">

Id   <RefId "a" test.lkt:10:28-10:29>
     references <FunArgDecl "a" test.lkt:3:10-3:16>

Expr <RefId "a" test.lkt:10:28-10:29>
     has type <StructDecl prelude: "Int">

Expr <NumLit test.lkt:10:30-10:31>
     has type <StructDecl prelude: "Int">

Id   <RefId "b" test.lkt:10:33-10:34>
     references <FunArgDecl "b" test.lkt:3:18-3:24>

Expr <RefId "b" test.lkt:10:33-10:34>
     has type <StructDecl prelude: "Int">

Expr <NumLit test.lkt:10:35-10:37>
     has type <StructDecl prelude: "Int">

test.lkt:10:41: error: Cannot find entity `foo` in this scope
10 | @invalid val z: Int = test(a=1, b=12, c=foo) # Invalid kwarg with wrong value: check that there is an error message for the expr
   |                                         ^^^

Expr <CallExpr test.lkt:10:23-10:45>
     has type <StructDecl prelude: "Int">

