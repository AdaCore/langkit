@spacing(alphanumericals, alphanumericals)
lexer foo_lexer {

    whitespace <- p"[ \n\r\t]+"

    family alphanumericals {
        def <- "def"
    }

    var <- "var"

    family alphanumericals {
        error <- "error"
        example <- "example"
        null_tok <- "null"
    }

    comma <- ","
    dot <- "."
    semicolon <- ";"
    l_par <- "("
    r_par <- ")"
    l_brace <- "{"
    r_brace <- "}"
    equal <- "="
    plus <- "+"
    minus <- "-"
    less_than <- "<"

    family alphanumericals {
        number <- p"[0-9]+"
        @symbol identifier <- p"[a-zA-Z_][a-zA-Z0-9_]*"
    }

    string <- p"\"[^\"]*\""
    @newline_after comment <- p"#(.?)+"
}
grammar foo_grammar {
    @main_rule main_rule <- ASTList[Decl]+(decl)
    decl <- Decl("def" name "=" expr)
    expr <- or(op | atom)
    op <- or(
        | Plus(atom "+" expr)
        | Minus(atom "-" expr)
        | Equal(atom "=" expr)
        | LessThan(atom "<" expr)
    )
    atom <- or(ref | literal)
    ref <- Ref(name)
    name <- Identifier(@identifier)
    literal <- Literal(@number)

}

@root_node class FooNode {

    @export fun identity (value : BigInt): BigInt = value
}

class Decl : FooNode {
    @parse_field name : Identifier
    @parse_field expr_tree : Expr
}

@abstract class Expr : FooNode {

    @export fun evaluate (): BigInt

    @export fun evaluate_as_int (): Int = node.evaluate.as_int
}

class Equal : Expr {
    @parse_field left : Expr
    @parse_field right : Expr

    fun evaluate (): BigInt =
    BigInt(if (node.left.evaluate = node.right.evaluate) then (1) else (0))
}

class LessThan : Expr {
    @parse_field left : Expr
    @parse_field right : Expr

    fun evaluate (): BigInt =
    BigInt(if (node.left.evaluate < node.right.evaluate) then (1) else (0))
}

class Literal : Expr {

    fun evaluate (): BigInt
}

class Minus : Expr {
    @parse_field left : Expr
    @parse_field right : Expr

    fun evaluate (): BigInt = node.left.evaluate - node.right.evaluate
}

class Plus : Expr {
    @parse_field left : Expr
    @parse_field right : Expr

    fun evaluate (): BigInt = node.left.evaluate + node.right.evaluate
}

class Ref : Expr {
    @parse_field name : Identifier

    fun evaluate (): BigInt =
    node.node_env.get(node.name.symbol, only_first=true).to[Decl].expr_tree.evaluate
}

class Identifier : FooNode {
}

struct EnvAssoc {
    key : SymbolType
    value : FooNode
    dest_env : LexicalEnv
    metadata : Metadata
}
