import lexer_example
@with_lexer(foo_lexer)
grammar foo_grammar {
    @main_rule main_rule <- list+(Example(@example))

}

@abstract class FooNode implements Node[FooNode] {

    fun get_bigint(): BigInt = BigInt(1)

    @export fun check(): Bool = node.children.all(
        (c) => # This condition is always False, so we have a loop early exit,
        # which used to leave the result of "c.get_bigint" (big integers
        # are ref-counted) allocated when exitting the scope: the finalizer
        # for that scope was not called in that case.
        c.get_bigint() = BigInt(0)
    )
}

class Example : FooNode implements TokenNode {
}
