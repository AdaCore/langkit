grammar None_grammar is
    decl <- Decl(
        ?@Plus Name(@Identifier) @LPar ref_list @RPar
    )
    main_rule <- list*(decl)
    ref <- Ref(Name(@Identifier))
    ref_list <- list+(ref)

end

class FooNode is

    fun env_struct (): EnvStruct =
        new EnvStruct(
            env=<env_orphan(<FieldAccess .children_env>)>
        )


    fun env_array (): Array[LexicalEnv] =
        [<env_orphan(<FieldAccess .children_env>)>]

end

class Decl : FooNode is
    parse field has_plus : HasPlus
    parse field name : Name
    parse field items : ASTList[Ref]

    public fun test_env (other : Entity[FooNode]): Boolean =
        <env_orphan(<FieldAccess .children_env>)> == <env_orphan(<FieldAccess .children_env>)>


    public fun test_struct (other : Entity[FooNode]): Boolean = self.env_struct == other.env_struct

    public fun test_array (other : Entity[FooNode]): Boolean = self.env_array == other.env_array
end

"""
List of Decl.
"""
class ASTList[Decl] : FooNodeBaseList is
end

"""
List of Ref.
"""
class ASTList[Ref] : FooNodeBaseList is
end

qualifier class HasPlus : FooNode is

    """
    Return whether this is an instance of HasPlusPresent
    """
    public fun as_bool (): Boolean
end

class Name : FooNode is
end

class Ref : FooNode is
    parse field name : Name
end
