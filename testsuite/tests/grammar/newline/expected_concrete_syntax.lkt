@track_indent
lexer foo_lexer {

    @ignore _ <- p"[ \r\t]+"
    example <- "example"
    null_tok <- "null"
    comma <- ","
    l_par <- "("
    r_par <- ")"
    l_brace <- "{"
    r_brace <- "}"
    plus <- "+"
    number <- p"[0-9]+"
    @symbol() identifier <- p"[a-zA-Z_][a-zA-Z0-9_]*"
}
@with_lexer(foo_lexer)
grammar foo_grammar {
    lit <- Literal(@number)
    nl <- NewLineNode(lit @newline lit)
    ind <- IndentNode(lit @newline @indent lit @dedent)
    comp <- CompositeNode(
        lit
        @newline
        lit @newline @indent lit @newline @dedent lit
    )
    @main_rule main_rule <- or(comp | ind | nl)

}

@abstract class FooNode implements Node[FooNode] {
}

class CompositeNode : FooNode {
    @parse_field lit_1 : Literal
    @parse_field lit_2 : Literal
    @parse_field lit_3 : Literal
    @parse_field lit_4 : Literal
}

class IndentNode : FooNode {
    @parse_field lit_1 : Literal
    @parse_field lit_2 : Literal
}

class Literal : FooNode implements TokenNode {
}

class NewLineNode : FooNode {
    @parse_field lit_1 : Literal
    @parse_field lit_2 : Literal
}
