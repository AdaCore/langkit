import lexer_example

@with_lexer(foo_lexer)
grammar foo_grammar {
    @main_rule main_rule <- NameSequence("(" list*(Name(@identifier)) ")")
}

@abstract class FooNode implements Node[FooNode] {
}

class Name: FooNode implements TokenNode {
    var: LogicVar

    fun predicate(): Bool = node.symbol == s"foo"
}

class NameSequence: FooNode {
    @parse_field names: ASTList[FooNode, Name]

    fun domains(): Equation = node.names.logic_all((n) => %domain(n.var, [n]))

    |" Return whether at least one name is "foo".
    @exported fun any_foo(): Bool = (
        node.domains() and node.names.logic_any((n) => %predicate(Name.predicate, n.var))
    ).solve()

    |" Return whether all names are "foo".
    @exported fun all_foo(): Bool = (
        node.domains() and node.names.logic_all((n) => %predicate(Name.predicate, n.var))
    ).solve()
}
