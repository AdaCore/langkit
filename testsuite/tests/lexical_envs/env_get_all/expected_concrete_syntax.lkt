grammar FooGrammar {
    main_rule <- list*(insert)
    ident <- Id(@Identifier)
    insert <- Insert("def" ident ident)

}

@root_node class FooNode {

    @export fun env_get_all (): Array[FooNode] = node.children_env.get(null)

    @memoized fun make_id (s : SymbolType): FooNode = SynthId(sym=s)

    fun unique_id (s : SymbolType): FooNode = node.unit.root.make_id(s)
}

class Program : ASTList[Insert] {
}

class Id : FooNode {
}

class Insert : FooNode {
    @parse_field sym : Id
    @parse_field node : Id
}

class SynthId : FooNode {
    sym : SymbolType

    @export fun get_sym (): Array[CharacterType] = node.sym.image
}

struct EnvAssoc {
    key : SymbolType
    value : FooNode
    dest_env : LexicalEnv
    metadata : Metadata
}
