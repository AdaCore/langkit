grammar None_grammar {
    name <- Name(@Identifier)
    main_rule <- Def(
        "def" name "{" cat1 cat2 Example("example") "}"
    )
    cat1 <- Cat1(@Identifier("cat1") "{" decls "}")
    cat2 <- Cat2(@Identifier("cat2") "{" decls "}")
    var <- Var(name)
    decls <- list+(var)

}

@abstract class FooNode {
}

class Cat1 : FooNode {
    @parse_field decls : ASTList[Var]
}

class Cat2 : FooNode {
    @parse_field decls : ASTList[Var]
}

class Def : FooNode {
    @parse_field name : Name
    @parse_field cat1 : Cat1
    @parse_field cat2 : Cat2
    @parse_field example : Example
}

class Example : FooNode {

    @export fun lookup_all (name : SymbolType): Array[Entity[FooNode]] =
    self.children_env.get(name)

    @export fun lookup_1 (name : SymbolType): Array[Entity[FooNode]] =
    self.children_env.get(
        name, categories=RefCats(cat1=true, others=false)
    )

    @export fun lookup_2 (name : SymbolType): Array[Entity[FooNode]] =
    self.children_env.get(
        name, categories=RefCats(cat2=true, others=false)
    )
}

class Name : FooNode {
}

class Var : FooNode {
    @parse_field name : Name
}
