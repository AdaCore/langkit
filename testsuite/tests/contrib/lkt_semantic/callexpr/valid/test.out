Resolving test.lkt
==================
Decl <FunDecl "f1" test.lkt:1:1-1:18>
     has_type <FunctionType "() -> Int" test.lkt>

   Id   <RefId "Int" test.lkt:1:11-1:14>
        has_type None
        references <StructDecl prelude: "Int">

   Expr <NumLit test.lkt:1:17-1:18>
        has_type <StructDecl prelude: "Int">

Decl <FunDecl "f2" test.lkt:2:1-2:28>
     has_type <FunctionType "(Int) -> Int" test.lkt>

   Decl <FunArgDecl "i" test.lkt:2:8-2:14>
        has_type <StructDecl prelude: "Int">

      Id   <RefId "Int" test.lkt:2:11-2:14>
           has_type None
           references <StructDecl prelude: "Int">

   Id   <RefId "Int" test.lkt:2:17-2:20>
        has_type None
        references <StructDecl prelude: "Int">

   Expr <BinOp test.lkt:2:23-2:28>
        has_type <StructDecl prelude: "Int">

      Id   <RefId "i" test.lkt:2:23-2:24>
           has_type <StructDecl prelude: "Int">
           references <FunArgDecl "i" test.lkt:2:8-2:14>

      Expr <NumLit test.lkt:2:27-2:28>
           has_type <StructDecl prelude: "Int">

Decl <FunDecl "f3" test.lkt:3:1-3:48>
     has_type <FunctionType "(Int, Int, Int) -> Int" test.lkt>

   Decl <FunArgDecl "i" test.lkt:3:8-3:14>
        has_type <StructDecl prelude: "Int">

      Id   <RefId "Int" test.lkt:3:11-3:14>
           has_type None
           references <StructDecl prelude: "Int">

   Decl <FunArgDecl "j" test.lkt:3:16-3:22>
        has_type <StructDecl prelude: "Int">

      Id   <RefId "Int" test.lkt:3:19-3:22>
           has_type None
           references <StructDecl prelude: "Int">

   Decl <FunArgDecl "k" test.lkt:3:24-3:30>
        has_type <StructDecl prelude: "Int">

      Id   <RefId "Int" test.lkt:3:27-3:30>
           has_type None
           references <StructDecl prelude: "Int">

   Id   <RefId "Int" test.lkt:3:33-3:36>
        has_type None
        references <StructDecl prelude: "Int">

   Expr <BinOp test.lkt:3:39-3:48>
        has_type <StructDecl prelude: "Int">

      Expr <BinOp test.lkt:3:39-3:44>
           has_type <StructDecl prelude: "Int">

         Id   <RefId "i" test.lkt:3:39-3:40>
              has_type <StructDecl prelude: "Int">
              references <FunArgDecl "i" test.lkt:3:8-3:14>

         Id   <RefId "j" test.lkt:3:43-3:44>
              has_type <StructDecl prelude: "Int">
              references <FunArgDecl "j" test.lkt:3:16-3:22>

      Id   <RefId "k" test.lkt:3:47-3:48>
           has_type <StructDecl prelude: "Int">
           references <FunArgDecl "k" test.lkt:3:24-3:30>

Decl <ValDecl "valid1" test.lkt:5:1-5:18>
     has_type <StructDecl prelude: "Int">

   Expr <CallExpr test.lkt:5:14-5:18>
        has_type <StructDecl prelude: "Int">

      Id   <RefId "f1" test.lkt:5:14-5:16>
           has_type <FunctionType "() -> Int" test.lkt>
           references <FunDecl "f1" test.lkt:1:1-1:18>

Decl <ValDecl "valid2" test.lkt:6:1-6:19>
     has_type <StructDecl prelude: "Int">

   Expr <CallExpr test.lkt:6:14-6:19>
        has_type <StructDecl prelude: "Int">

      Id   <RefId "f2" test.lkt:6:14-6:16>
           has_type <FunctionType "(Int) -> Int" test.lkt>
           references <FunDecl "f2" test.lkt:2:1-2:28>

      Expr <NumLit test.lkt:6:17-6:18>
           has_type <StructDecl prelude: "Int">

Decl <ValDecl "valid3" test.lkt:7:1-7:25>
     has_type <StructDecl prelude: "Int">

   Expr <CallExpr test.lkt:7:14-7:25>
        has_type <StructDecl prelude: "Int">

      Id   <RefId "f3" test.lkt:7:14-7:16>
           has_type <FunctionType "(Int, Int, Int) -> Int" test.lkt>
           references <FunDecl "f3" test.lkt:3:1-3:48>

      Expr <NumLit test.lkt:7:17-7:18>
           has_type <StructDecl prelude: "Int">

      Expr <NumLit test.lkt:7:20-7:21>
           has_type <StructDecl prelude: "Int">

      Expr <NumLit test.lkt:7:23-7:24>
           has_type <StructDecl prelude: "Int">

Decl <ValDecl "named1" test.lkt:9:1-9:23>
     has_type <StructDecl prelude: "Int">

   Expr <CallExpr test.lkt:9:14-9:23>
        has_type <StructDecl prelude: "Int">

      Id   <RefId "f2" test.lkt:9:14-9:16>
           has_type <FunctionType "(Int) -> Int" test.lkt>
           references <FunDecl "f2" test.lkt:2:1-2:28>

      Id   <RefId "i" test.lkt:9:17-9:18>
           has_type None
           references <FunArgDecl "i" test.lkt:2:8-2:14>

      Expr <NumLit test.lkt:9:21-9:22>
           has_type <StructDecl prelude: "Int">

Decl <ValDecl "named2" test.lkt:10:1-10:29>
     has_type <StructDecl prelude: "Int">

   Expr <CallExpr test.lkt:10:14-10:29>
        has_type <StructDecl prelude: "Int">

      Id   <RefId "f3" test.lkt:10:14-10:16>
           has_type <FunctionType "(Int, Int, Int) -> Int" test.lkt>
           references <FunDecl "f3" test.lkt:3:1-3:48>

      Expr <NumLit test.lkt:10:17-10:18>
           has_type <StructDecl prelude: "Int">

      Id   <RefId "j" test.lkt:10:20-10:21>
           has_type None
           references <FunArgDecl "j" test.lkt:3:16-3:22>

      Expr <NumLit test.lkt:10:22-10:23>
           has_type <StructDecl prelude: "Int">

      Id   <RefId "k" test.lkt:10:25-10:26>
           has_type None
           references <FunArgDecl "k" test.lkt:3:24-3:30>

      Expr <NumLit test.lkt:10:27-10:28>
           has_type <StructDecl prelude: "Int">

