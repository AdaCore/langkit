# In the GNAT runtime, the secondary stack management system allocates chunks
# with maximum alignment. As a result, code handles pointers inside the blocks
# allocated by malloc, so we have these "possible leaks". These are really
# false-positive leaks. Account for two possible symbol names (depending on the
# version of GNAT used to build the Langkit-generated library).
{
   ada_secondary_stack_allocation:1
   Memcheck:Leak
   match-leak-kinds: possible
   fun:malloc
   fun:__gnat_malloc
   fun:system__secondary_stack__ss_allocate
}
{
   ada_secondary_stack_allocation:2
   Memcheck:Leak
   match-leak-kinds: possible
   fun:malloc
   fun:__gnat_malloc
   fun:system__secondary_stack__allocate_dynamic
}

# The module cache in GNAT's s-trasym__dwarf.adb is a global variable that
# contains cached information about the current process. It is allocated the
# first time the process tries to symbolize its stack traces and purposefully
# never released after (just in case a symbolization request comes later), so
# ignore the leak it causes.
{
   ada_system_traceback_symbolic
   Memcheck:Leak
   match-leak-kinds: definite
   fun:malloc
   fun:__gnat_malloc
   fun:system__mmap__read
   fun:system__object_reader__create_stream__2
   fun:system__dwarf_lines__open
   fun:system__traceback__symbolic__init_module
   fun:system__traceback__symbolic__multi_module_symbolic_traceback
}
