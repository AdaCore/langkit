@spacing(alphanumericals, alphanumericals)
lexer foo_lexer {

    @text whitespace <- p"[ \n\r\t]+"

    family alphanumericals {
        @text def <- "def"
    }

    @text var <- "var"

    family alphanumericals {
        @text error <- "error"
        @text example <- "example"
        @text null_tok <- "null"
    }

    @text comma <- ","
    @text dot <- "."
    @text semicolon <- ";"
    @text l_par <- "("
    @text r_par <- ")"
    @text l_brace <- "{"
    @text r_brace <- "}"
    @text equal <- "="
    @text plus <- "+"
    @text minus <- "-"
    @text less_than <- "<"

    family alphanumericals {
        @text number <- p"[0-9]+"
        @symbol identifier <- p"[a-zA-Z_][a-zA-Z0-9_]*"
    }

    @text string <- p"\"[^\"]*\""
    @newline_after @text comment <- p"#(.?)+"
}
grammar foo_grammar {
    @main_rule main_rule <- ASTList[Decl]+(pick(decl ";"))
    decl <- or(
        | VarDecl("def" name "=" expr)
        | FuncDecl(
            "def"
            name "(" ASTList[Name]+(name, ",") ")" "=" expr
        )
    )
    expr <- or(Plus(atom "+" expr) | atom)
    atom <- or(Literal(@number) | name)
    name <- Name(@identifier)

}

@root_node class FooNode {

    @export fun identity (k : DeclKind): DeclKind = k
}

@abstract class Decl : FooNode {

    @export fun decl_kind (): DeclKind
}

class FuncDecl : Decl {
    @parse_field name : Name
    @parse_field args : ASTList[Name]
    @parse_field expr : Expression

    fun decl_kind (): DeclKind = DeclKind.func
}

class VarDecl : Decl {
    @parse_field name : Name
    @parse_field expr : Expression

    fun decl_kind (): DeclKind = DeclKind.var
}

@abstract class Expression : FooNode {
}

class Literal : Expression {
}

class Name : Expression {
}

class Plus : Expression {
    @parse_field left : Expression
    @parse_field right : Expression
}
