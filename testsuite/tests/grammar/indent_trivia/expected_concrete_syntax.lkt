@track_indent
lexer foo_lexer {

    @ignore _ <- p"[ \r\t]+"
    @text def <- "def"
    @text comma <- ","
    @text l_par <- "("
    @text r_par <- ")"
    @symbol identifier <- p"[a-zA-Z_][a-zA-Z0-9_]*"
    @text comment <- p"#.*"

}
grammar foo_grammar {
    newline <- Newline(@newline)
    expr <- or(call | identifier | indented)
    identifier <- Identifier(@identifier)
    call <- Call(
        identifier
        "("
        discard(ASTList[Newline]*(newline))
        ASTList[Call]*(call, ",") discard(ASTList[Newline]*(newline)) ")"
    )
    indented <- Indented(
        discard(ASTList[Newline]*(newline))
        @indent
        ASTList[FooNode]+((discard(ASTList[Newline]*(newline))
        expr discard(ASTList[Newline]*(newline))), @newline) @dedent
    )
    def_node <- Def(
        "def" identifier @newline ASTList[Indented]+(indented)
    )
    @main_rule main_rule <- ASTList[Def]+((discard(ASTList[Newline]*(newline))
    def_node discard(ASTList[Newline]*(newline))))

}

@root_node class FooNode {
}

class Call : FooNode {
    @parse_field name : Identifier
    @parse_field args : ASTList[Call]
}

class Def : FooNode {
    @parse_field name : Identifier
    @parse_field stmts : ASTList[Indented]
}

class Identifier : FooNode {
}

class Indented : FooNode {
    @parse_field inner : ASTList[FooNode]
}

class Newline : FooNode {
}
