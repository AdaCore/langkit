@spacing(alphanumericals, alphanumericals)
lexer foo_lexer {

    whitespace <- p"[ \n\r\t]+"

    family alphanumericals {
        def <- "def"
    }

    var <- "var"

    family alphanumericals {
        error <- "error"
        example <- "example"
        null_tok <- "null"
    }

    comma <- ","
    dot <- "."
    semicolon <- ";"
    l_par <- "("
    r_par <- ")"
    l_brace <- "{"
    r_brace <- "}"
    equal <- "="
    plus <- "+"
    minus <- "-"
    less_than <- "<"

    family alphanumericals {
        number <- p"[0-9]+"
        @symbol() identifier <- p"[a-zA-Z_][a-zA-Z0-9_]*"
    }

    string <- p"\"[^\"]*\""
    @newline_after comment <- p"#(.?)+"
}
grammar foo_grammar {
    @main_rule main_rule <- or(Plus(atom "+" main_rule) | atom)
    atom <- or(Literal(@number) | Name(@identifier))

}

@root_node class FooNode {

    @export fun eval_unit (u : InternalUnit): Int = u.root.to[Expression].result
}

@abstract class Expression : FooNode {

    @export fun result (): Int
}

class Literal : Expression {

    fun result (): Int
}

class Name : Expression {

    fun designated_unit (): InternalUnit

    fun result (): Int = node.designated_unit.root.to[Expression].result
}

class Plus : Expression {
    @parse_field left : Expression
    @parse_field right : Expression

    fun result (): Int = node.left.result + node.right.result
}
