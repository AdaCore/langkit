Resolving test.lkt
==================
Id   <RefId "Int" test.lkt:1:8-1:11>
     references <StructDecl prelude: "Int">

Expr <NumLit test.lkt:1:14-1:15>
     has type <StructDecl prelude: "Int">

Id   <RefId "i" test.lkt:2:11-2:12>
     references <ValDecl "i" test.lkt:1:1-1:15>

Expr <RefId "i" test.lkt:2:11-2:12>
     has type <StructDecl prelude: "Int">

Expr <NumLit test.lkt:2:14-2:15>
     has type <StructDecl prelude: "Int">

Expr <NumLit test.lkt:2:17-2:18>
     has type <StructDecl prelude: "Int">

Expr <ArrayLiteral test.lkt:2:10-2:19>
     has type <InstantiatedGenericType prelude: "Array[Int]">

Id   <RefId "String" test.lkt:4:8-4:14>
     references <StructDecl prelude: "String">

Expr <StringLit test.lkt:4:17-4:23>
     has type <StructDecl prelude: "String">

Id   <RefId "s" test.lkt:5:11-5:12>
     references <ValDecl "s" test.lkt:4:1-4:23>

Expr <RefId "s" test.lkt:5:11-5:12>
     has type <StructDecl prelude: "String">

Expr <StringLit test.lkt:5:14-5:20>
     has type <StructDecl prelude: "String">

Expr <ArrayLiteral test.lkt:5:10-5:21>
     has type <InstantiatedGenericType prelude: "Array[String]">

Id   <RefId "Int" test.lkt:7:12-7:15>
     references <StructDecl prelude: "Int">

Expr <NumLit test.lkt:7:18-7:19>
     has type <StructDecl prelude: "Int">

Id   <RefId "foo" test.lkt:8:11-8:14>
     references <FunDecl "foo" test.lkt:7:1-7:19>

Expr <RefId "foo" test.lkt:8:11-8:14>
     has type <FunctionType prelude: "() -> Int">

Expr <CallExpr test.lkt:8:11-8:16>
     has type <StructDecl prelude: "Int">

Expr <NumLit test.lkt:8:18-8:19>
     has type <StructDecl prelude: "Int">

Expr <NumLit test.lkt:8:21-8:22>
     has type <StructDecl prelude: "Int">

Expr <ArrayLiteral test.lkt:8:10-8:23>
     has type <InstantiatedGenericType prelude: "Array[Int]">

Id   <RefId "String" test.lkt:10:12-10:18>
     references <StructDecl prelude: "String">

Expr <StringLit test.lkt:10:21-10:27>
     has type <StructDecl prelude: "String">

Id   <RefId "bar" test.lkt:11:11-11:14>
     references <FunDecl "bar" test.lkt:10:1-10:27>

Expr <RefId "bar" test.lkt:11:11-11:14>
     has type <FunctionType prelude: "() -> String">

Expr <CallExpr test.lkt:11:11-11:16>
     has type <StructDecl prelude: "String">

Expr <StringLit test.lkt:11:18-11:24>
     has type <StructDecl prelude: "String">

Expr <StringLit test.lkt:11:26-11:32>
     has type <StructDecl prelude: "String">

Expr <ArrayLiteral test.lkt:11:10-11:33>
     has type <InstantiatedGenericType prelude: "Array[String]">

Id   <RefId "foo" test.lkt:14:20-14:23>
     references <FunDecl "foo" test.lkt:7:1-7:19>

Expr <RefId "foo" test.lkt:14:20-14:23>
     has type <FunctionType prelude: "() -> Int">

Expr <CallExpr test.lkt:14:20-14:25>
     has type <StructDecl prelude: "Int">

Id   <RefId "bar" test.lkt:14:27-14:30>
     references <FunDecl "bar" test.lkt:10:1-10:27>

Expr <RefId "bar" test.lkt:14:27-14:30>
     has type <FunctionType prelude: "() -> String">

Expr <CallExpr test.lkt:14:27-14:32>
     has type <StructDecl prelude: "String">

test.lkt:14:19: error: ambiguous type for expression
13 | @invalid val a5 = [foo(), bar()]
   |                   ^^^^^^^^^^^^^^

test.lkt:15:20: error: ambiguous type for expression
14 | @invalid val a6 = [1, '2', "3", foo(), bar()]
   |                    ^                         

test.lkt:15:23: error: ambiguous type for expression
14 | @invalid val a6 = [1, '2', "3", foo(), bar()]
   |                       ^^^                    

test.lkt:15:28: error: ambiguous type for expression
14 | @invalid val a6 = [1, '2', "3", foo(), bar()]
   |                            ^^^               

Id   <RefId "foo" test.lkt:15:33-15:36>
     references <FunDecl "foo" test.lkt:7:1-7:19>

Expr <RefId "foo" test.lkt:15:33-15:36>
     has type <FunctionType prelude: "() -> Int">

Expr <CallExpr test.lkt:15:33-15:38>
     has type <StructDecl prelude: "Int">

Id   <RefId "bar" test.lkt:15:40-15:43>
     references <FunDecl "bar" test.lkt:10:1-10:27>

Expr <RefId "bar" test.lkt:15:40-15:43>
     has type <FunctionType prelude: "() -> String">

Expr <CallExpr test.lkt:15:40-15:45>
     has type <StructDecl prelude: "String">

test.lkt:15:19: error: ambiguous type for expression
14 | @invalid val a6 = [1, '2', "3", foo(), bar()]
   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^

Id   <RefId "foo" test.lkt:17:12-17:15>
     references <FunDecl "foo" test.lkt:7:1-7:19>

Expr <RefId "foo" test.lkt:17:12-17:15>
     has type <FunctionType prelude: "() -> Int">

Expr <CallExpr test.lkt:17:12-17:17>
     has type <StructDecl prelude: "Int">

Expr <NumLit test.lkt:17:19-17:20>
     has type <StructDecl prelude: "Int">

Expr <NumLit test.lkt:17:22-17:23>
     has type <StructDecl prelude: "Int">

Expr <ArrayLiteral test.lkt:17:11-17:24>
     has type <InstantiatedGenericType prelude: "Array[Int]">

Expr <ArrayLiteral test.lkt:17:10-17:25>
     has type <InstantiatedGenericType prelude: "Array[Array[Int]]">

Id   <RefId "foo" test.lkt:18:15-18:18>
     references <FunDecl "foo" test.lkt:7:1-7:19>

Expr <RefId "foo" test.lkt:18:15-18:18>
     has type <FunctionType prelude: "() -> Int">

Expr <CallExpr test.lkt:18:15-18:20>
     has type <StructDecl prelude: "Int">

Expr <NumLit test.lkt:18:22-18:23>
     has type <StructDecl prelude: "Int">

Expr <NumLit test.lkt:18:25-18:26>
     has type <StructDecl prelude: "Int">

Expr <ArrayLiteral test.lkt:18:14-18:27>
     has type <InstantiatedGenericType prelude: "Array[Int]">

Expr <ArrayLiteral test.lkt:18:13-18:28>
     has type <InstantiatedGenericType prelude: "Array[Array[Int]]">

Expr <ArrayLiteral test.lkt:18:12-18:29>
     has type <InstantiatedGenericType prelude: "Array[Array[Array[Int]]]">

Expr <ArrayLiteral test.lkt:18:11-18:30>
     has type <InstantiatedGenericType prelude: "Array[Array[Array[Array[Int]]]]">

Expr <ArrayLiteral test.lkt:18:10-18:31>
     has type <InstantiatedGenericType prelude: "Array[Array[Array[Array[Array[Int]]]]]">

Id   <RefId "foo" test.lkt:21:21-21:24>
     references <FunDecl "foo" test.lkt:7:1-7:19>

Expr <RefId "foo" test.lkt:21:21-21:24>
     has type <FunctionType prelude: "() -> Int">

Expr <CallExpr test.lkt:21:21-21:26>
     has type <StructDecl prelude: "Int">

Expr <NumLit test.lkt:21:28-21:29>
     has type <StructDecl prelude: "Int">

Expr <ArrayLiteral test.lkt:21:20-21:30>
     has type <InstantiatedGenericType prelude: "Array[Int]">

test.lkt:21:32: error: ambiguous type for expression
20 | @invalid val a9 = [[foo(), 2], []]
   |                                ^^ 

Expr <ArrayLiteral test.lkt:21:19-21:35>
     has type <InstantiatedGenericType prelude: "Array[Array[Int]]">

Id   <RefId "foo" test.lkt:22:22-22:25>
     references <FunDecl "foo" test.lkt:7:1-7:19>

Expr <RefId "foo" test.lkt:22:22-22:25>
     has type <FunctionType prelude: "() -> Int">

Expr <CallExpr test.lkt:22:22-22:27>
     has type <StructDecl prelude: "Int">

Expr <NumLit test.lkt:22:29-22:30>
     has type <StructDecl prelude: "Int">

Expr <ArrayLiteral test.lkt:22:21-22:31>
     has type <InstantiatedGenericType prelude: "Array[Int]">

test.lkt:22:34: error: ambiguous type for expression
21 | @invalid val a10 = [[foo(), 2], [1, 2]]
   |                                  ^     

test.lkt:22:37: error: ambiguous type for expression
21 | @invalid val a10 = [[foo(), 2], [1, 2]]
   |                                     ^  

test.lkt:22:33: error: ambiguous type for expression
21 | @invalid val a10 = [[foo(), 2], [1, 2]]
   |                                 ^^^^^^ 

Expr <ArrayLiteral test.lkt:22:20-22:40>
     has type <InstantiatedGenericType prelude: "Array[Array[Int]]">

Id   <RefId "bar" test.lkt:23:22-23:25>
     references <FunDecl "bar" test.lkt:10:1-10:27>

Expr <RefId "bar" test.lkt:23:22-23:25>
     has type <FunctionType prelude: "() -> String">

Expr <CallExpr test.lkt:23:22-23:27>
     has type <StructDecl prelude: "String">

Expr <StringLit test.lkt:23:29-23:32>
     has type <StructDecl prelude: "String">

Expr <ArrayLiteral test.lkt:23:21-23:33>
     has type <InstantiatedGenericType prelude: "Array[String]">

test.lkt:23:36: error: ambiguous type for expression
22 | @invalid val a11 = [[bar(), "2"], [1, 2]]
   |                                    ^     

test.lkt:23:39: error: ambiguous type for expression
22 | @invalid val a11 = [[bar(), "2"], [1, 2]]
   |                                       ^  

test.lkt:23:35: error: ambiguous type for expression
22 | @invalid val a11 = [[bar(), "2"], [1, 2]]
   |                                   ^^^^^^ 

Expr <ArrayLiteral test.lkt:23:20-23:42>
     has type <InstantiatedGenericType prelude: "Array[Array[String]]">

