grammar None_grammar {
    decl <- Decl(?@Plus name @LPar ref_list @RPar)
    main_rule <- list*(decl)
    ref <- Ref(name)
    name <- Name(@Identifier)
    ref_list <- list+(ref)

}

class FooNode {
}

class Decl : FooNode {
    @parse_field has_plus : HasPlus
    @parse_field name : Name
    @parse_field items : ASTList[Ref]

    @export fun entity_items (): Array[Entity[Ref]] =
    self.as_entity.items.map((i) => i)
}

## List of Decl.
class ASTList[Decl] : FooNodeBaseList {
}

## List of Ref.
class ASTList[Ref] : FooNodeBaseList {
}

@qualifier class HasPlus : FooNode {

    ## Return whether this is an instance of HasPlusPresent
    @export fun as_bool (): Boolean
}

class Name : FooNode {
}

class Ref : FooNode {
    @parse_field name : Name
}
