@spacing(alphanumericals, alphanumericals)
lexer foo_lexer {

    whitespace <- p"[ \n\r\t]+"

    family alphanumericals {
        def <- "def"
    }

    var <- "var"

    family alphanumericals {
        error <- "error"
        example <- "example"
        null_tok <- "null"
    }

    comma <- ","
    dot <- "."
    semicolon <- ";"
    l_par <- "("
    r_par <- ")"
    l_brace <- "{"
    r_brace <- "}"
    equal <- "="
    plus <- "+"
    minus <- "-"
    less_than <- "<"

    family alphanumericals {
        number <- p"[0-9]+"
        @symbol() identifier <- p"[a-zA-Z_][a-zA-Z0-9_]*"
    }

    string <- p"\"[^\"]*\""
    @newline_after comment <- p"#(.?)+"
}
grammar foo_grammar {
    @main_rule main_rule <- Example("example")

}

@root_node class FooNode {
}

class Example : FooNode {

    fun identity (b : Bool): Bool = b

    @export fun cond1 (b : Bool): Int = if node.identity(b) then (1)
    else (2)

    @export fun cond2 (b1 : Bool, b2 : Bool): Int =
    if node.identity(b1) then (1)
    elif node.identity(b2) then (2)
    else (3)

    @export fun cond3 (b1 : Bool, b2 : Bool, b3 : Bool): Int =
    if node.identity(b1) then (1)
    elif node.identity(b2) then (2)
    elif node.identity(b3) then (3)
    else (3)

    @export fun cond_node (b : Bool): FooNode = if node.identity(b) then node
    else (null).as_bare_entity
}
