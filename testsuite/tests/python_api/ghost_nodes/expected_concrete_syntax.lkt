grammar None_grammar {
    main_rule <- list*(Param(name mode plus))
    plus <- ?@Plus
    name <- Name(@Identifier)
    mode <- or(
        | EnumNull(@Null)
        | EnumExample(@Example)
        | EnumDefault()
    )

}

class FooNode {
}

@enum class Enum : FooNode {
    case Null, Example, Default
}

## List of Param.
class ASTList[Param] : FooNodeBaseList {
}

class Name : FooNode {
}

class Param : FooNode {
    @parse_field name : Name
    @parse_field mode : Enum
    @parse_field has_plus : PlusQualifier
}

@qualifier class PlusQualifier : FooNode {

    ## Return whether this is an instance of PlusQualifierPresent
    @export fun as_bool (): Boolean
}
