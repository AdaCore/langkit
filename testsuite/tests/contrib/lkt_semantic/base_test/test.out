Resolving test.lkt
==================
Id   <RefId "A" test.lkt:2:21-2:22>
     references <ClassDecl "A" test.lkt:1:12-26:2>

Id   <RefId "self" test.lkt:2:25-2:29>
     references <SelfDecl "self" test.lkt:1:12-26:2>

Expr <RefId "self" test.lkt:2:25-2:29>
     has type <ClassDecl "A" test.lkt:1:12-26:2>

Id   <RefId "Int" test.lkt:4:21-4:24>
     references <StructDecl prelude: "Int">

Expr <NumLit test.lkt:4:27-4:29>
     has type <StructDecl prelude: "Int">

Id   <RefId "A" test.lkt:6:29-6:30>
     references <ClassDecl "A" test.lkt:1:12-26:2>

test.lkt:6:33: error: Mismatched types: expected `A`, got a number literal
5 |     fun test_int_invalid(): A = 12
  |                                 ^^

Id   <RefId "Int" test.lkt:8:25-8:28>
     references <StructDecl prelude: "Int">

Expr <NumLit test.lkt:8:31-8:33>
     has type <StructDecl prelude: "Int">

Expr <NumLit test.lkt:8:36-8:38>
     has type <StructDecl prelude: "Int">

Expr <BinOp test.lkt:8:31-8:38>
     has type <StructDecl prelude: "Int">

Id   <RefId "Int" test.lkt:10:35-10:38>
     references <StructDecl prelude: "Int">

test.lkt:10:41: error: Mismatched types: expected `Int`, got a string literal
 9 |     fun test_int_add_invalid_1(): Int = "12" + 15
   |                                         ^^^^     

Expr <NumLit test.lkt:10:48-10:50>
     has type <StructDecl prelude: "Int">

Expr <BinOp test.lkt:10:41-10:50>
     has type <StructDecl prelude: "Int">

Id   <RefId "Int" test.lkt:12:35-12:38>
     references <StructDecl prelude: "Int">

Expr <NumLit test.lkt:12:41-12:43>
     has type <StructDecl prelude: "Int">

Id   <RefId "self" test.lkt:12:46-12:50>
     references <SelfDecl "self" test.lkt:1:12-26:2>

test.lkt:12:46: error: Mismatched types: expected `Int`, got `A`
11 |     fun test_int_add_invalid_2(): Int = 15 + self
   |                                              ^^^^

Expr <BinOp test.lkt:12:41-12:50>
     has type <StructDecl prelude: "Int">

Id   <RefId "A" test.lkt:14:35-14:36>
     references <ClassDecl "A" test.lkt:1:12-26:2>

test.lkt:14:39: error: Mismatched types: expected `A`, got a number literal
13 |     fun test_int_add_invalid_3(): A = 15 + self
   |                                       ^^       

Id   <RefId "self" test.lkt:14:44-14:48>
     references <SelfDecl "self" test.lkt:1:12-26:2>

Expr <RefId "self" test.lkt:14:44-14:48>
     has type <ClassDecl "A" test.lkt:1:12-26:2>

Expr <BinOp test.lkt:14:39-14:48>
     has type <ClassDecl "A" test.lkt:1:12-26:2>

Id   <RefId "Regexp" test.lkt:16:26-16:32>
     references <StructDecl prelude: "Regexp">

Expr <StringLit test.lkt:16:35-16:43>
     has type <StructDecl prelude: "Regexp">

Id   <RefId "Regexp" test.lkt:18:26-18:32>
     references <StructDecl prelude: "Regexp">

Expr <StringLit test.lkt:19:18-19:26>
     has type <StructDecl prelude: "Regexp">

Id   <RefId "rg" test.lkt:20:9-20:11>
     references <ValDecl "rg" test.lkt:19:9-19:26>

Expr <RefId "rg" test.lkt:20:9-20:11>
     has type <StructDecl prelude: "Regexp">

Expr <BlockExpr test.lkt:18:35-21:6>
     has type <StructDecl prelude: "Regexp">

Id   <RefId "Int" test.lkt:23:22-23:25>
     references <StructDecl prelude: "Int">

Id   <RefId "true" test.lkt:23:31-23:35>
     references <EnumLitDecl prelude: "true">

Expr <RefId "true" test.lkt:23:31-23:35>
     has type <EnumTypeDecl prelude: "Bool">

Expr <NumLit test.lkt:23:41-23:42>
     has type <StructDecl prelude: "Int">

Expr <NumLit test.lkt:23:48-23:49>
     has type <StructDecl prelude: "Int">

Expr <IfExpr test.lkt:23:28-23:49>
     has type <StructDecl prelude: "Int">

Id   <RefId "Int" test.lkt:25:30-25:33>
     references <StructDecl prelude: "Int">

Id   <RefId "true" test.lkt:25:39-25:43>
     references <EnumLitDecl prelude: "true">

Expr <RefId "true" test.lkt:25:39-25:43>
     has type <EnumTypeDecl prelude: "Bool">

Expr <NumLit test.lkt:25:49-25:50>
     has type <StructDecl prelude: "Int">

test.lkt:25:56: error: Mismatched types: expected `Int`, got a string literal
24 |     fun test_if_invalid_1(): Int = if true then 1 else "2"
   |                                                        ^^^

Expr <IfExpr test.lkt:25:36-25:59>
     has type <StructDecl prelude: "Int">

Id   <RefId "C" test.lkt:30:8-30:9>
     references <GenericFormalTypeDecl "C" test.lkt:28:10-28:11>

Id   <RefId "C" test.lkt:31:8-31:9>
     references <GenericFormalTypeDecl "C" test.lkt:28:10-28:11>

Id   <RefId "C" test.lkt:36:8-36:9>
     references <GenericFormalTypeDecl "C" test.lkt:34:10-34:11>

Id   <RefId "D" test.lkt:37:8-37:9>
     references <GenericFormalTypeDecl "D" test.lkt:34:13-34:14>

Id   <RefId "C" test.lkt:39:17-39:18>
     references <GenericFormalTypeDecl "C" test.lkt:34:10-34:11>

Id   <RefId "A" test.lkt:42:11-42:12>
     references <ClassDecl "A" test.lkt:1:12-26:2>

Id   <RefId "Pair" test.lkt:43:37-43:41>
     references <GenericDecl "Pair" test.lkt:28:1-32:2>

Id   <RefId "Int" test.lkt:43:42-43:45>
     references <StructDecl prelude: "Int">

Id   <RefId "Pair" test.lkt:43:49-43:53>
     references <GenericDecl "Pair" test.lkt:28:1-32:2>

Id   <RefId "Int" test.lkt:43:54-43:57>
     references <StructDecl prelude: "Int">

Expr <NumLit test.lkt:43:59-43:61>
     has type <StructDecl prelude: "Int">

Expr <NumLit test.lkt:43:63-43:65>
     has type <StructDecl prelude: "Int">

Expr <CallExpr test.lkt:43:49-43:66>
     has type <InstantiatedGenericType "Pair[Int]" test.lkt:28:1-32:2>

Id   <RefId "Int" test.lkt:44:42-44:45>
     references <StructDecl prelude: "Int">

Id   <RefId "Pair" test.lkt:44:48-44:52>
     references <GenericDecl "Pair" test.lkt:28:1-32:2>

Id   <RefId "Int" test.lkt:44:53-44:56>
     references <StructDecl prelude: "Int">

Expr <NumLit test.lkt:44:58-44:60>
     has type <StructDecl prelude: "Int">

Expr <NumLit test.lkt:44:63-44:65>
     has type <StructDecl prelude: "Int">

Expr <CallExpr test.lkt:44:48-44:66>
     has type <InstantiatedGenericType "Pair[Int]" test.lkt:28:1-32:2>

Id   <RefId "a" test.lkt:44:67-44:68>
     references <FieldDecl "a" test.lkt:30:5-30:9>

Expr <RefId "a" test.lkt:44:67-44:68>
     has type <StructDecl prelude: "Int">

Expr <DotExpr test.lkt:44:48-44:68>
     has type <StructDecl prelude: "Int">

Id   <RefId "Pair" test.lkt:45:38-45:42>
     references <GenericDecl "Pair" test.lkt:28:1-32:2>

Id   <RefId "Int" test.lkt:45:43-45:46>
     references <StructDecl prelude: "Int">

Id   <RefId "Pair" test.lkt:45:50-45:54>
     references <GenericDecl "Pair" test.lkt:28:1-32:2>

Id   <RefId "Int" test.lkt:45:55-45:58>
     references <StructDecl prelude: "Int">

Expr <NumLit test.lkt:45:60-45:62>
     has type <StructDecl prelude: "Int">

Expr <NumLit test.lkt:45:64-45:66>
     has type <StructDecl prelude: "Int">

Expr <CallExpr test.lkt:45:50-45:67>
     has type <InstantiatedGenericType "Pair[Int]" test.lkt:28:1-32:2>

Id   <RefId "a" test.lkt:45:68-45:69>
     references <FieldDecl "a" test.lkt:30:5-30:9>

Expr <RefId "a" test.lkt:45:68-45:69>
     has type <StructDecl prelude: "Int">

test.lkt:45:50: error: Mismatched types: expected `Pair[Int]`, got `Int`
44 |     fun test_invalid_generic_type(): Pair[Int] = Pair[Int](12, 15).a
   |                                                  ^^^^^^^^^^^^^^^^^^^

Id   <RefId "Bool" test.lkt:46:44-46:48>
     references <EnumTypeDecl prelude: "Bool">

Id   <RefId "Tuple2" test.lkt:46:51-46:57>
     references <GenericDecl "Tuple2" test.lkt:34:1-40:2>

Id   <RefId "Int" test.lkt:46:58-46:61>
     references <StructDecl prelude: "Int">

Id   <RefId "Bool" test.lkt:46:63-46:67>
     references <EnumTypeDecl prelude: "Bool">

Expr <NumLit test.lkt:46:69-46:71>
     has type <StructDecl prelude: "Int">

Id   <RefId "true" test.lkt:46:73-46:77>
     references <EnumLitDecl prelude: "true">

Expr <RefId "true" test.lkt:46:73-46:77>
     has type <EnumTypeDecl prelude: "Bool">

Expr <CallExpr test.lkt:46:51-46:78>
     has type <InstantiatedGenericType "Tuple2[Int, Bool]" test.lkt:34:1-40:2>

Id   <RefId "b" test.lkt:46:79-46:80>
     references <FieldDecl "b" test.lkt:37:5-37:9>

Expr <RefId "b" test.lkt:46:79-46:80>
     has type <EnumTypeDecl prelude: "Bool">

Expr <DotExpr test.lkt:46:51-46:80>
     has type <EnumTypeDecl prelude: "Bool">

Id   <RefId "Tuple2" test.lkt:47:40-47:46>
     references <GenericDecl "Tuple2" test.lkt:34:1-40:2>

Id   <RefId "Int" test.lkt:47:47-47:50>
     references <StructDecl prelude: "Int">

Id   <RefId "Bool" test.lkt:47:52-47:56>
     references <EnumTypeDecl prelude: "Bool">

Id   <RefId "true" test.lkt:47:60-47:64>
     references <EnumLitDecl prelude: "true">

test.lkt:47:60: error: Mismatched types: expected `Tuple2[Int, Bool]`, got `Bool`
46 |     fun test_invalid_generic_type_2(): Tuple2[Int, Bool] = true
   |                                                            ^^^^

Id   <RefId "A" test.lkt:48:28-48:29>
     references <ClassDecl "A" test.lkt:1:12-26:2>

Id   <RefId "Int" test.lkt:48:32-48:35>
     references <StructDecl prelude: "Int">

Id   <RefId "arg" test.lkt:48:38-48:41>
     references <FunArgDecl "arg" test.lkt:48:23-48:29>

Expr <RefId "arg" test.lkt:48:38-48:41>
     has type <ClassDecl "A" test.lkt:1:12-26:2>

Id   <RefId "test_int_add" test.lkt:48:42-48:54>
     references <FunDecl "test_int_add" test.lkt:8:5-8:38>

Expr <RefId "test_int_add" test.lkt:48:42-48:54>
     has type <FunctionType prelude: "() -> Int">

Expr <DotExpr test.lkt:48:38-48:54>
     has type <FunctionType prelude: "() -> Int">

Expr <CallExpr test.lkt:48:38-48:56>
     has type <StructDecl prelude: "Int">

Id   <RefId "Tuple2" test.lkt:49:30-49:36>
     references <GenericDecl "Tuple2" test.lkt:34:1-40:2>

Id   <RefId "Int" test.lkt:49:37-49:40>
     references <StructDecl prelude: "Int">

Id   <RefId "Bool" test.lkt:49:42-49:46>
     references <EnumTypeDecl prelude: "Bool">

Id   <RefId "Int" test.lkt:49:50-49:53>
     references <StructDecl prelude: "Int">

Id   <RefId "arg" test.lkt:49:56-49:59>
     references <FunArgDecl "arg" test.lkt:49:25-49:47>

Expr <RefId "arg" test.lkt:49:56-49:59>
     has type <InstantiatedGenericType "Tuple2[Int, Bool]" test.lkt:34:1-40:2>

Id   <RefId "test" test.lkt:49:60-49:64>
     references <FunDecl "test" test.lkt:39:5-39:18>

Expr <RefId "test" test.lkt:49:60-49:64>
     has type <FunctionType prelude: "() -> Int">

Expr <DotExpr test.lkt:49:56-49:64>
     has type <FunctionType prelude: "() -> Int">

Expr <CallExpr test.lkt:49:56-49:66>
     has type <StructDecl prelude: "Int">

Id   <RefId "Array" test.lkt:50:34-50:39>
     references <GenericDecl prelude: "Array">

Id   <RefId "Int" test.lkt:50:40-50:43>
     references <StructDecl prelude: "Int">

Id   <RefId "Int" test.lkt:50:47-50:50>
     references <StructDecl prelude: "Int">

Id   <RefId "arg" test.lkt:50:53-50:56>
     references <FunArgDecl "arg" test.lkt:50:29-50:44>

Expr <RefId "arg" test.lkt:50:53-50:56>
     has type <InstantiatedGenericType prelude: "Array[Int]">

Expr <NumLit test.lkt:50:57-50:59>
     has type <StructDecl prelude: "Int">

Expr <CallExpr test.lkt:50:53-50:60>
     has type <StructDecl prelude: "Int">

Id   <RefId "Int" test.lkt:53:8-53:11>
     references <StructDecl prelude: "Int">

Expr <NumLit test.lkt:53:14-53:16>
     has type <StructDecl prelude: "Int">

Id   <RefId "Int" test.lkt:57:41-57:44>
     references <StructDecl prelude: "Int">

Id   <RefId "self" test.lkt:57:47-57:51>
     references <SelfDecl "self" test.lkt:55:1-58:2>

Expr <RefId "self" test.lkt:57:47-57:51>
     has type <StructDecl "Foo" test.lkt:55:1-58:2>

test.lkt:57:52: error: Cannot find entity `a` in this scope
56 |     fun test_identifier_leak_invalid(): Int = self.a
   |                                                    ^

Id   <RefId "D" test.lkt:62:16-62:17>
     references <EnumClassAltDecl "D" test.lkt:61:10-61:11>

Id   <RefId "Int" test.lkt:66:12-66:15>
     references <StructDecl prelude: "Int">

Id   <RefId "Int" test.lkt:66:20-66:23>
     references <StructDecl prelude: "Int">

Id   <RefId "Int" test.lkt:66:26-66:29>
     references <StructDecl prelude: "Int">

Id   <RefId "a" test.lkt:66:32-66:33>
     references <FunArgDecl "a" test.lkt:66:9-66:15>

Expr <RefId "a" test.lkt:66:32-66:33>
     has type <StructDecl prelude: "Int">

Id   <RefId "b" test.lkt:66:36-66:37>
     references <FunArgDecl "b" test.lkt:66:17-66:23>

Expr <RefId "b" test.lkt:66:36-66:37>
     has type <StructDecl prelude: "Int">

Expr <BinOp test.lkt:66:32-66:37>
     has type <StructDecl prelude: "Int">

Id   <RefId "Int" test.lkt:67:16-67:19>
     references <StructDecl prelude: "Int">

Id   <RefId "Int" test.lkt:67:21-67:24>
     references <StructDecl prelude: "Int">

Id   <RefId "Int" test.lkt:67:29-67:32>
     references <StructDecl prelude: "Int">

Id   <RefId "add" test.lkt:67:35-67:38>
     references <FunDecl "add" test.lkt:66:1-66:37>

Expr <RefId "add" test.lkt:67:35-67:38>
     has type <FunctionType prelude: "(Int, Int) -> Int">

Id   <RefId "B" test.lkt:68:24-68:25>
     references <ClassDecl "B" test.lkt:42:1-51:2>

Id   <RefId "Int" test.lkt:68:34-68:37>
     references <StructDecl prelude: "Int">

Id   <RefId "b_inst" test.lkt:68:40-68:46>
     references <FunArgDecl "b_inst" test.lkt:68:16-68:25>

Expr <RefId "b_inst" test.lkt:68:40-68:46>
     has type <ClassDecl "B" test.lkt:42:1-51:2>

Id   <RefId "test_generic_component_access" test.lkt:68:47-68:76>
     references <FunDecl "test_generic_component_access" test.lkt:44:5-44:68>

Expr <RefId "test_generic_component_access" test.lkt:68:47-68:76>
     has type <FunctionType prelude: "() -> Int">

Expr <DotExpr test.lkt:68:40-68:76>
     has type <FunctionType prelude: "() -> Int">

Id   <RefId "B" test.lkt:69:41-69:42>
     references <ClassDecl "B" test.lkt:42:1-51:2>

Id   <RefId "B" test.lkt:69:46-69:47>
     references <ClassDecl "B" test.lkt:42:1-51:2>

Id   <RefId "Int" test.lkt:69:52-69:55>
     references <StructDecl prelude: "Int">

Id   <RefId "b_inst" test.lkt:69:58-69:64>
     references <FunArgDecl "b_inst" test.lkt:69:33-69:42>

Expr <RefId "b_inst" test.lkt:69:58-69:64>
     has type <ClassDecl "B" test.lkt:42:1-51:2>

Id   <RefId "test_fun_call" test.lkt:69:65-69:78>
     references <FunDecl "test_fun_call" test.lkt:48:5-48:56>

Expr <RefId "test_fun_call" test.lkt:69:65-69:78>
     has type <FunctionType prelude: "(A) -> Int">

test.lkt:69:58: error: Mismatched types: expected `(B) -> Int`, got `(A) -> Int`
68 | @invalid fun get_method_invalid(b_inst: B): (B) -> Int = b_inst.test_fun_call
   |                                                          ^^^^^^^^^^^^^^^^^^^^

