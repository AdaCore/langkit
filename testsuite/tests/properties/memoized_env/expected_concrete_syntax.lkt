grammar None_grammar {
    main_rule <- Block(
        Name(@Identifier) @LPar list*(Ref(Name(@Identifier))) @RPar
    )

}

class FooNode {
}

class Block : FooNode {
    @parse_field name : Name
    @parse_field content : ASTList[Ref]
}

"""
List of Ref.
"""
class ASTList[Ref] : FooNodeBaseList {
}

class Name : FooNode {
}

class Ref : FooNode {
    @parse_field name : Name

    @export fun referenced (): Entity[FooNode] =
    self.referenced_env.env_node.as_bare_entity

    memoized fun referenced_env (): LexicalEnv =
    self.node_env.get(self.name.symbol)?[0].children_env
}
