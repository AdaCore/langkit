== general_api.adb ==
Get a unit rewriting handle out of a rewriting session
  LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: Handle (Unit.Context) must not be null
Get a node rewriting handle out of a rewriting session
  LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: Handle (Node.Unit.Context) must not be null
Create a rewriting handle
Create a second rewriting handle
  LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: Handle (Context) must be null
Call Get_From_File (Reparse => False)
Call Get_From_File (Reparse => True)
  LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: cannot reparse during tree rewriting
Call Get_From_Buffer_Str
  LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: cannot parse from buffer during tree rewriting
Call Get_From_Buffer_Unb_Str
  LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: cannot parse from buffer during tree rewriting
Call Get_With_Error
Get a rewriting handle for the analysis unit
Apply the rewriting
Create a second rewriting handler
Apply the rewriting

# Rewriting with a file reader

Original source:
"def a = 1\x0adef b = 1\x0a# regular comment\x0a"

Rewritten source:
"def b = 1\x0a# regular comment\x0a"

Handle (No_Analysis_Context)
  LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: Context must not be null
Context (No_Rewriting_Handle)
  LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: Handle must not be null
Start_Rewriting (No_Analysis_Context)
  LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: Context must not be null
Abort_Rewriting (No_Rewriting_Handle)
  LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: Handle must not be null
Apply (No_Rewriting_Handle)
  LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: Handle must not be null
Unit_Handles (No_Rewriting_Handle)
  LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: Handle must not be null

Handle (No_Analysis_Unit)
  LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: null unit
Unit (No_Unit_Rewriting_Handle)
  LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: Handle must not be null
Root (No_Unit_Rewriting_Handle)
  LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: Handle must not be null
Set_Root (No_Unit_Rewriting_Handle, ...)
  LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: Handle must not be null
Unparse (No_Unit_Rewriting_Handle)
  LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: Handle must not be null

Handle (No_Foo_Node)
  LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: null node
Node (No_Node_Rewriting_Handle)
  LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: Handle must not be null
Context (No_Node_Rewriting_Handle)
  LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: Handle must not be null
Unparse (No_Node_Rewriting_Handle)
  LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: Handle must not be null
Kind (No_Node_Rewriting_Handle)
  LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: Handle must not be null
Image (No_Node_Rewriting_Handle)
  None
Tied (No_Node_Rewriting_Handle)
  LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: Handle must not be null
Parent (No_Node_Rewriting_Handle)
  LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: Handle must not be null
Children_Count (No_Node_Rewriting_Handle)
  LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: Handle must not be null
Child (No_Node_Rewriting_Handle, ...)
  LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: Handle must not be null
Child (..., No_Struct_Member_Ref)
  LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: Field must not be null
Children (No_Node_Rewriting_Handle)
  LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: Handle must not be null
Set_Child (No_Node_Rewriting_Handle, ...)
  LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: Handle must not be null
Set_Child (..., No_Struct_Member_Ref, ...)
  LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: Field must not be null
Set_Child (..., Tied_Node)
  LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: Child must not be tied to another rewriting context
Set_Child (..., From_Other_Context)
  LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: Child should be associated to the right rewriting context
Text (No_Node_Rewriting_Handle)
  LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: Handle must not be null
Text (Non_Token_Node)
  LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: Handle.Type_Of must be a token node, got ASTList[AbstractDecl]
Set_Text (No_Node_Rewriting_Handle, ...)
  LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: Handle must not be null
Set_Text (Non_Token_Node, ...)
  LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: Handle.Type_Of must be a token node, got ASTList[AbstractDecl]
Replace (..., Node_From_Other_Ctx)
  LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: New_Node should be associated to the right rewriting context
Rotate (Node present twice)
  LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: non-null handles can be present at most once
Rotate ((..., Node_From_Other_Ctx))
  LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: New_Node should be associated to the right rewriting context
Is_List_Node (No_Node_Rewriting_Handle)
  LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: Handle must not be null

First_Child (No_Node_Rewriting_Handle)
  LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: Handle must not be null
First_Child (Non_List_Node)
  LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: Handle.Type_Of must be a list node, got Def
Last_Child (No_Node_Rewriting_Handle)
  LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: Handle must not be null
Last_Child (Non_List_Node)
  LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: Handle.Type_Of must be a list node, got Def
Next_Child (No_Node_Rewriting_Handle)
  LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: Handle must not be null
Next_Child (Null_Parent)
  LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: Handle.Parent must not be null
Next_Child (Non_List_Children)
  LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: Handle.Parent.Type_Of must be a list node, got Def
Previous_Child (No_Node_Rewriting_Handle)
  LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: Handle must not be null
Previous_Child (Null_Parent)
  LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: Handle.Parent must not be null
Previous_Child (Non_List_Children)
  LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: Handle.Parent.Type_Of must be a list node, got Def
Insert_Before (No_Node_Rewriting_Handle, ...)
  LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: Handle must not be null
Insert_Before (Non_List_Children, ...)
  LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: Handle.Parent.Type_Of must be a list node, got Def
Insert_Before (..., Tied_Node)
  LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: New_Sibling must not be tied to another rewriting context
Insert_Before (..., Node_From_Other_Ctx)
  LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: New_Sibling should be associated to the right rewriting context
Insert_After (No_Node_Rewriting_Handle, ...)
  LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: Handle must not be null
Insert_After (Non_List_Children, ...)
  LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: Handle.Parent.Type_Of must be a list node, got Def
Insert_After (..., Tied_Node)
  LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: New_Sibling must not be tied to another rewriting context
Insert_After (..., Node_From_Other_Ctx)
  LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: New_Sibling should be associated to the right rewriting context
Insert_First (No_Node_Rewriting_Handle, ...)
  LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: Handle must not be null
Insert_First (Non_List_Node, ...)
  LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: Handle.Type_Of must be a list node, got Def
Insert_First (..., Tied_Node)
  LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: New_Child must not be tied to another rewriting context
Insert_First (..., Node_From_Other_Ctx)
  LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: New_Child should be associated to the right rewriting context
Insert_Last (No_Node_Rewriting_Handle, ...)
  LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: Handle must not be null
Insert_Last (Non_List_Node, ...)
  LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: Handle.Type_Of must be a list node, got Def
Insert_Last (..., Tied_Node)
  LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: New_Child must not be tied to another rewriting context
Insert_Last (..., Node_From_Other_Ctx)
  LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: New_Child should be associated to the right rewriting context

Create_Node (No_Rewriting_Handle, ...)
  LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: Handle must not be null
Create_Node (..., Error_Node_Kind)
  LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: Kind must not be an error node, got ErrorDecl
Create_Token_Node (No_Rewriting_Handle, ...)
  LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: Handle must not be null
Create_Token_Node (..., Non_Token_Node, ...)
  LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: Kind must be a token node, got Plus
Create_Regular_Node (No_Rewriting_Handle, ...)
  LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: Handle must not be null
Create_Regular_Node (..., Non_Regular_Node, ...)
  LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: Kind must not be a token node, got Name
Create_Regular_Node (..., Wrong_Children_Count)
  LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE:  1 children expected, got 2
Create_Regular_Node (..., Tied_Node)
  LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: Children ( 2) must not be tied to another rewriting context
Create_Regular_Node (..., Node_From_Other_Context)
  LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: Children ( 1) should be associated to the right rewriting context

Create_From_Template (No_Rewriting_Handle, ...)
  LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: Handle must not be null
Create_From_Template (..., Standalone_Open, ...)
  LANGKIT_SUPPORT.ERRORS.REWRITING.TEMPLATE_FORMAT_ERROR: standalone "{" character
Create_From_Template (..., Standalone_Close, ...)
  LANGKIT_SUPPORT.ERRORS.REWRITING.TEMPLATE_FORMAT_ERROR: standalone "}" character
Create_From_Template (..., Invalid_Syntax, ...)
  LANGKIT_SUPPORT.ERRORS.REWRITING.TEMPLATE_INSTANTIATION_ERROR: got parsing errors
Create_From_Template (..., Too_Few_Args ...)
  LANGKIT_SUPPORT.ERRORS.REWRITING.TEMPLATE_ARGS_ERROR: not enough arguments provided
Create_From_Template (..., Too_Many_Args ...)
  LANGKIT_SUPPORT.ERRORS.REWRITING.TEMPLATE_ARGS_ERROR: too many arguments provided
Create_From_Template (..., Node_From_Other_Context)
  LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: Arguments ( 1) should be associated to the right rewriting context

main.adb: Done.

== revert.adb ==
AbstractDeclList[1:1-5:10]
|  Def[1:1-1:10]
|  |f_name:
|  |  Name[1:5-1:6]: a
|  |f_args:
|  |  NameList[1:6-1:6]: <empty list>
|  |f_expr:
|  |  Literal[1:9-1:10]: 1
|  Def[2:1-2:20]
|  |f_name:
|  |  Name[2:5-2:6]: b
|  |f_args:
|  |  NameList[2:6-2:6]: <empty list>
|  |f_expr:
|  |  Plus[2:9-2:20]
|  |  |f_lhs:
|  |  |  ParenExpr[2:9-2:16]
|  |  |  |f_expr:
|  |  |  |  Plus[2:10-2:15]
|  |  |  |  |f_lhs:
|  |  |  |  |  Literal[2:10-2:11]: 2
|  |  |  |  |f_rhs:
|  |  |  |  |  Ref[2:14-2:15]
|  |  |  |  |  |f_name:
|  |  |  |  |  |  Name[2:14-2:15]: a
|  |  |f_rhs:
|  |  |  Literal[2:19-2:20]: 3
|  Def[3:1-3:14]
|  |f_name:
|  |  Name[3:5-3:6]: c
|  |f_args:
|  |  NameList[3:6-3:6]: <empty list>
|  |f_expr:
|  |  Plus[3:9-3:14]
|  |  |f_lhs:
|  |  |  Ref[3:9-3:10]
|  |  |  |f_name:
|  |  |  |  Name[3:9-3:10]: a
|  |  |f_rhs:
|  |  |  Ref[3:13-3:14]
|  |  |  |f_name:
|  |  |  |  Name[3:13-3:14]: b
|  Def[4:1-4:10]
|  |f_name:
|  |  Name[4:5-4:6]: d
|  |f_args:
|  |  NameList[4:6-4:6]: <empty list>
|  |f_expr:
|  |  Literal[4:9-4:10]: 4
|  Def[5:1-5:10]
|  |f_name:
|  |  Name[5:5-5:6]: e
|  |f_args:
|  |  NameList[5:6-5:6]: <empty list>
|  |f_expr:
|  |  Literal[5:9-5:10]: 5
revert.adb: Done.

== rewrite.adb ==
Node type for the root: ASTList[AbstractDecl]
Try assigning a child that is already tied to a tree...
   Got a precondition failure
Try creating an error node (Create_Node)...
   Got a precondition failure
Try creating an error node (Create_Regular_Node)...
   Got a precondition failure

Create a clone (c2) of the last definition (c)
C: <Def u1.txt:3:1-3:14 (tied)>
C2: <Def u1.txt:3:1-3:14>
C2 parent: None
C2 name: <Name "c" u1.txt:3:5-3:6 (tied)>
C2 name parent: <Def u1.txt:3:1-3:14>

Replace the middle definition (b) with (c2)
Try to get the node rewriting handle for a null field...
   Got a precondition failure
Try to set the node rewriting handle for a null field...
   Got a precondition failure
Children of <InitializedVar u1.txt:6:1-6:10 (tied)>:
  <Name "f" u1.txt:6:5-6:6 (tied)>
  <NameList u1.txt:6:6-6:6 (tied)>
  <Literal "6" u1.txt:6:9-6:10 (tied)>

Creating a tree from a template:
  Tree: def foo=1+2 (<Def>)
  F_Name child: foo (<Name "foo" (tied)>)
  F_Expr/F_LHS child: 1 (<Literal "1" (tied)>)

Swap first and fourth defs

Replace the expression of the fifth definition

Replace the root of unit 2

Applying the diff...

u1.txt:
AbstractDeclList
|  Def
|  |f_name:
|  |  Name: d
|  |f_args:
|  |  NameList: <empty list>
|  |f_expr:
|  |  Literal: 4
|  Def
|  |f_name:
|  |  Name: c
|  |f_args:
|  |  NameList: <empty list>
|  |f_expr:
|  |  Plus
|  |  |f_lhs:
|  |  |  Ref
|  |  |  |f_name:
|  |  |  |  Name: a
|  |  |f_rhs:
|  |  |  Ref
|  |  |  |f_name:
|  |  |  |  Name: b
|  Def
|  |f_name:
|  |  Name: c
|  |f_args:
|  |  NameList: <empty list>
|  |f_expr:
|  |  Plus
|  |  |f_lhs:
|  |  |  Ref
|  |  |  |f_name:
|  |  |  |  Name: a
|  |  |f_rhs:
|  |  |  Ref
|  |  |  |f_name:
|  |  |  |  Name: b
|  Def
|  |f_name:
|  |  Name: a
|  |f_args:
|  |  NameList: <empty list>
|  |f_expr:
|  |  Literal: 1
|  Def
|  |f_name:
|  |  Name: e
|  |f_args:
|  |  NameList: <empty list>
|  |f_expr:
|  |  Literal: 5
|  InitializedVar
|  |f_name:
|  |  Name: f
|  |f_args:
|  |  NameList: <empty list>
|  |f_expr:
|  |  ParenExpr
|  |  |f_expr:
|  |  |  Plus
|  |  |  |f_lhs:
|  |  |  |  Ref
|  |  |  |  |f_name:
|  |  |  |  |  Name: d
|  |  |  |f_rhs:
|  |  |  |  ParenExpr
|  |  |  |  |f_expr:
|  |  |  |  |  Plus
|  |  |  |  |  |f_lhs:
|  |  |  |  |  |  Literal: 5
|  |  |  |  |  |f_rhs:
|  |  |  |  |  |  Ref
|  |  |  |  |  |  |f_name:
|  |  |  |  |  |  |  Name: c
|  Var
|  |f_name:
|  |  Name: g
|  |f_args:
|  |  NameList: <empty list>

u2.txt:
AbstractDeclList
|  Def
|  |f_name:
|  |  Name: zz
|  |f_args:
|  |  NameList: <empty list>
|  |f_expr:
|  |  Literal: 111
|  Def
|  |f_name:
|  |  Name: yy
|  |f_args:
|  |  NameList: <empty list>
|  |f_expr:
|  |  Literal: 333
rewrite.adb: Done.

== rewrite_lists.adb ==
fresh empty list
   ... list of 0 nodes:
  <empty>

fresh 1-item list
   ... list of 1 nodes:
  <Name "n1" (tied)>

fresh 2-items list
   ... list of 2 nodes:
  <Name "n1" (tied)>
  <Name "n2" (tied)>

empty + insert_first
   ... list of 1 nodes:
  <Name "n1" (tied)>

empty + 2 insert_first
   ... list of 2 nodes:
  <Name "n1" (tied)>
  <Name "n2" (tied)>

empty + insert_last
   ... list of 1 nodes:
  <Name "n1" (tied)>

empty + 2 insert_last
   ... list of 2 nodes:
  <Name "n1" (tied)>
  <Name "n2" (tied)>

insert_before on the first
   ... list of 2 nodes:
  <Name "n1" (tied)>
  <Name "n2" (tied)>

insert_before on the second
   ... list of 3 nodes:
  <Name "n1" (tied)>
  <Name "n2" (tied)>
  <Name "n3" (tied)>

insert_after on the first
   ... list of 2 nodes:
  <Name "n1" (tied)>
  <Name "n2" (tied)>

insert_after on the second
   ... list of 3 nodes:
  <Name "n1" (tied)>
  <Name "n2" (tied)>
  <Name "n3" (tied)>

replace single element
   ... list of 1 nodes:
  <Name "after" (tied)>

replace first element
   ... list of 2 nodes:
  <Name "after" (tied)>
  <Name "sibling" (tied)>

replace middle element
   ... list of 3 nodes:
  <Name "first" (tied)>
  <Name "after" (tied)>
  <Name "last" (tied)>

replace last element
   ... list of 2 nodes:
  <Name "sibling" (tied)>
  <Name "after" (tied)>

remove_child on child 1
   ... list of 2 nodes:
  <Name "n2" (tied)>
  <Name "n3" (tied)>

remove_child on child 2
   ... list of 2 nodes:
  <Name "n1" (tied)>
  <Name "n3" (tied)>

remove_child on child 3
   ... list of 2 nodes:
  <Name "n1" (tied)>
  <Name "n2" (tied)>

remove_child on the only child
   ... list of 0 nodes:
  <empty>

create_from_template (empty list)
   ... list of 0 nodes:
  <empty>

clone (empty list)
   ... list of 0 nodes:
  <empty>

create_from_template (non-empty list)
   ... list of 3 nodes:
  <Name "n1" (tied)>
  <Name "n2" (tied)>
  <Name "n3" (tied)>

clone (non-empty list)
   ... list of 3 nodes:
  <Name "n1" (tied)>
  <Name "n2" (tied)>
  <Name "n3" (tied)>

expanded (empty list)
   ... list of 0 nodes:
  <empty>

expanded (non-empty list)
   ... list of 3 nodes:
  <Name "n1" main.txt:1:8-1:10 (tied)>
  <Name "n2" main.txt:1:12-1:14 (tied)>
  <Name "n3" main.txt:1:16-1:18 (tied)>

Applying the diff...
AbstractDeclList
|  Def
|  |f_name:
|  |  Name: a
|  |f_args:
|  |  NameList: <empty list>
|  |f_expr:
|  |  Literal: 1
|  Def
|  |f_name:
|  |  Name: c
|  |f_args:
|  |  NameList: <empty list>
|  |f_expr:
|  |  Literal: 3
rewrite_lists.adb: Done.

== rewrite_non_ascii.adb ==
Appending a def node...

Applying the diff...

main.txt:
def a = 1 # H\xe9llo\x0adef b=1
rewrite_non_ascii.adb: Done.

== iter_units.adb ==
Rewritten unit a.txt: def a = 11
Rewritten unit b.txt: def b = 22
iter_units.adb: Done.

== apply_error.adb ==
# Put an integer literal instead of an indentifier
Could not apply diff on the main.txt unit:
  1:1: Skipped token def
  1:5: Skipped token 1
  1:6: Skipped token =
  1:7: Skipped token a
def 1=a

apply_error.adb: Done.

== templates.adb ==
Test various template instantiation errors...
* standalone {
  Got a LANGKIT_SUPPORT.ERRORS.REWRITING.TEMPLATE_FORMAT_ERROR
* trailing standalone {
  Got a LANGKIT_SUPPORT.ERRORS.REWRITING.TEMPLATE_FORMAT_ERROR
* standalone }
  Got a LANGKIT_SUPPORT.ERRORS.REWRITING.TEMPLATE_FORMAT_ERROR
* too many args (1)
  Got a LANGKIT_SUPPORT.ERRORS.REWRITING.TEMPLATE_ARGS_ERROR
* too many args (2)
  Got a LANGKIT_SUPPORT.ERRORS.REWRITING.TEMPLATE_ARGS_ERROR
* missing args (0)
  Got a LANGKIT_SUPPORT.ERRORS.REWRITING.TEMPLATE_ARGS_ERROR
* missing args (1)
  Got a LANGKIT_SUPPORT.ERRORS.REWRITING.TEMPLATE_ARGS_ERROR
* cannot reparse
  Got a LANGKIT_SUPPORT.ERRORS.REWRITING.TEMPLATE_INSTANTIATION_ERROR

Use templates to create trees of node rewriting handles...

Applying the diff...
AbstractDeclList
|  Def
|  |f_name:
|  |  Name: a
|  |f_args:
|  |  NameList: <empty list>
|  |f_expr:
|  |  Literal: 1
|  Def
|  |f_name:
|  |  Name: b
|  |f_args:
|  |  NameList: <empty list>
|  |f_expr:
|  |  ParenExpr
|  |  |f_expr:
|  |  |  Plus
|  |  |  |f_lhs:
|  |  |  |  Ref
|  |  |  |  |f_name:
|  |  |  |  |  Name: b
|  |  |  |f_rhs:
|  |  |  |  ParenExpr
|  |  |  |  |f_expr:
|  |  |  |  |  Plus
|  |  |  |  |  |f_lhs:
|  |  |  |  |  |  Ref
|  |  |  |  |  |  |f_name:
|  |  |  |  |  |  |  Name: a
|  |  |  |  |  |f_rhs:
|  |  |  |  |  |  Literal: 3
templates.adb: Done.

== preserve_formatting.adb ==
Running the double text substitution...

Running the unit's Unparse...
# First comment
def aa =
   # Middle "a" comment
   11
# Post "a" comment

def bb (xx, # Separator comment
       yy) =
   ((11
     + (22
        + 33))
    + (xx + yy))
# Trailing comment


Applying the diff...

Quoting source buffer for rewritten unit...
# First comment
def aa =
   # Middle "a" comment
   11
# Post "a" comment

def bb (xx, # Separator comment
       yy) =
   ((11
     + (22
        + 33))
    + (xx + yy))
# Trailing comment

preserve_formatting.adb: Done.

== preserve_formatting_wrap.adb ==
Wrap a's expression in a parenthesized expression...

Applying the diff...

Quoting source buffer for rewritten unit...
def a = ((
   # Some comment

      # Some other comment

      1
)
)
preserve_formatting.adb: Done.

== clone_synthetic.adb ==
Applying the diff...

u.txt:
AbstractDeclList
|  Def
|  |f_name:
|  |  Name: B
|  |f_args:
|  |  NameList: <empty list>
|  |f_expr:
|  |  Ref
|  |  |f_name:
|  |  |  Name: A
clone_synthetic.adb: Done.

== check_rotate.adb ==
== [field] Swap ==

Done with no precondition failure:
<AbstractDeclList main.txt:1:1-3:10 (tied)>
  <Def main.txt:1:1-1:10 (tied)>
    <Name "b" main.txt:2:5-2:6 (tied)>
    <NameList main.txt:1:6-1:6 (tied)>
    <Literal "1" main.txt:1:9-1:10 (tied)>
  <Def main.txt:2:1-2:10 (tied)>
    <Name "a" main.txt:1:5-1:6 (tied)>
    <NameList main.txt:2:6-2:6 (tied)>
    <Literal "2" main.txt:2:9-2:10 (tied)>
  <Def main.txt:3:1-3:10 (tied)>
    <Name "c" main.txt:3:5-3:6 (tied)>
    <NameList main.txt:3:6-3:6 (tied)>
    <Literal "3" main.txt:3:9-3:10 (tied)>

== [field] Rotate with null ==

Done with no precondition failure:
<AbstractDeclList main.txt:1:1-3:10 (tied)>
  <Def main.txt:1:1-1:10 (tied)>
    <Name "a" main.txt:1:5-1:6 (tied)>
    <NameList main.txt:1:6-1:6 (tied)>
    None
  <Def main.txt:2:1-2:10 (tied)>
    <Name "b" main.txt:2:5-2:6 (tied)>
    <NameList main.txt:2:6-2:6 (tied)>
    <Literal "2" main.txt:2:9-2:10 (tied)>
  <Def main.txt:3:1-3:10 (tied)>
    <Name "c" main.txt:3:5-3:6 (tied)>
    <NameList main.txt:3:6-3:6 (tied)>
    <Literal "3" main.txt:3:9-3:10 (tied)>

== [list] Swap ==

Done with no precondition failure:
<AbstractDeclList main.txt:1:1-3:10 (tied)>
  <Def main.txt:2:1-2:10 (tied)>
    <Name "b" main.txt:2:5-2:6 (tied)>
    <NameList main.txt:2:6-2:6 (tied)>
    <Literal "2" main.txt:2:9-2:10 (tied)>
  <Def main.txt:1:1-1:10 (tied)>
    <Name "a" main.txt:1:5-1:6 (tied)>
    <NameList main.txt:1:6-1:6 (tied)>
    <Literal "1" main.txt:1:9-1:10 (tied)>
  <Def main.txt:3:1-3:10 (tied)>
    <Name "c" main.txt:3:5-3:6 (tied)>
    <NameList main.txt:3:6-3:6 (tied)>
    <Literal "3" main.txt:3:9-3:10 (tied)>

== [list] Tri-rotate ==

Done with no precondition failure:
<AbstractDeclList main.txt:1:1-3:10 (tied)>
  <Def main.txt:2:1-2:10 (tied)>
    <Name "b" main.txt:2:5-2:6 (tied)>
    <NameList main.txt:2:6-2:6 (tied)>
    <Literal "2" main.txt:2:9-2:10 (tied)>
  <Def main.txt:3:1-3:10 (tied)>
    <Name "c" main.txt:3:5-3:6 (tied)>
    <NameList main.txt:3:6-3:6 (tied)>
    <Literal "3" main.txt:3:9-3:10 (tied)>
  <Def main.txt:1:1-1:10 (tied)>
    <Name "a" main.txt:1:5-1:6 (tied)>
    <NameList main.txt:1:6-1:6 (tied)>
    <Literal "1" main.txt:1:9-1:10 (tied)>

== [list] Swap with null ==

Done with no precondition failure:
<AbstractDeclList main.txt:1:1-3:10 (tied)>
  <Def main.txt:2:1-2:10 (tied)>
    <Name "b" main.txt:2:5-2:6 (tied)>
    <NameList main.txt:2:6-2:6 (tied)>
    <Literal "2" main.txt:2:9-2:10 (tied)>
  <Def main.txt:3:1-3:10 (tied)>
    <Name "c" main.txt:3:5-3:6 (tied)>
    <NameList main.txt:3:6-3:6 (tied)>
    <Literal "3" main.txt:3:9-3:10 (tied)>

== [list] Tri-rotate with nulls ==

Done with no precondition failure:
<AbstractDeclList main.txt:1:1-3:10 (tied)>
  <Def main.txt:1:1-1:10 (tied)>
    <Name "a" main.txt:1:5-1:6 (tied)>
    <NameList main.txt:1:6-1:6 (tied)>
    <Literal "1" main.txt:1:9-1:10 (tied)>

== [nop] No handle ==

No error:
<AbstractDeclList main.txt:1:1-3:10 (tied)>
  <Def main.txt:1:1-1:10 (tied)>
    <Name "a" main.txt:1:5-1:6 (tied)>
    <NameList main.txt:1:6-1:6 (tied)>
    <Literal "1" main.txt:1:9-1:10 (tied)>
  <Def main.txt:2:1-2:10 (tied)>
    <Name "b" main.txt:2:5-2:6 (tied)>
    <NameList main.txt:2:6-2:6 (tied)>
    <Literal "2" main.txt:2:9-2:10 (tied)>
  <Def main.txt:3:1-3:10 (tied)>
    <Name "c" main.txt:3:5-3:6 (tied)>
    <NameList main.txt:3:6-3:6 (tied)>
    <Literal "3" main.txt:3:9-3:10 (tied)>

== [nop] One handle ==

No error:
<AbstractDeclList main.txt:1:1-3:10 (tied)>
  <Def main.txt:1:1-1:10 (tied)>
    <Name "a" main.txt:1:5-1:6 (tied)>
    <NameList main.txt:1:6-1:6 (tied)>
    <Literal "1" main.txt:1:9-1:10 (tied)>
  <Def main.txt:2:1-2:10 (tied)>
    <Name "b" main.txt:2:5-2:6 (tied)>
    <NameList main.txt:2:6-2:6 (tied)>
    <Literal "2" main.txt:2:9-2:10 (tied)>
  <Def main.txt:3:1-3:10 (tied)>
    <Name "c" main.txt:3:5-3:6 (tied)>
    <NameList main.txt:3:6-3:6 (tied)>
    <Literal "3" main.txt:3:9-3:10 (tied)>

== [nop] Two null handles ==

No error:
<AbstractDeclList main.txt:1:1-3:10 (tied)>
  <Def main.txt:1:1-1:10 (tied)>
    <Name "a" main.txt:1:5-1:6 (tied)>
    <NameList main.txt:1:6-1:6 (tied)>
    <Literal "1" main.txt:1:9-1:10 (tied)>
  <Def main.txt:2:1-2:10 (tied)>
    <Name "b" main.txt:2:5-2:6 (tied)>
    <NameList main.txt:2:6-2:6 (tied)>
    <Literal "2" main.txt:2:9-2:10 (tied)>
  <Def main.txt:3:1-3:10 (tied)>
    <Name "c" main.txt:3:5-3:6 (tied)>
    <NameList main.txt:3:6-3:6 (tied)>
    <Literal "3" main.txt:3:9-3:10 (tied)>

== [nop] Three untied handles ==

No error:
<AbstractDeclList main.txt:1:1-3:10 (tied)>
  <Def main.txt:1:1-1:10 (tied)>
    <Name "a" main.txt:1:5-1:6 (tied)>
    <NameList main.txt:1:6-1:6 (tied)>
    <Literal "1" main.txt:1:9-1:10 (tied)>
  <Def main.txt:2:1-2:10 (tied)>
    <Name "b" main.txt:2:5-2:6 (tied)>
    <NameList main.txt:2:6-2:6 (tied)>
    <Literal "2" main.txt:2:9-2:10 (tied)>
  <Def main.txt:3:1-3:10 (tied)>
    <Name "c" main.txt:3:5-3:6 (tied)>
    <NameList main.txt:3:6-3:6 (tied)>
    <Literal "3" main.txt:3:9-3:10 (tied)>

== [error] Duplicate handles ==

Precondition failure: non-null handles can be present at most once

check_rotate.adb: Done.
Done
