import lexer_example
@with_lexer(foo_lexer)
grammar foo_grammar {
    @main_rule main_rule <- or(literal | example)
    literal <- Literal(@number)
    example <- Example("example")

}

@abstract class FooNode implements Node[FooNode] {

    @abstract fun get_num(): Int
}

class Example : FooNode {

    fun get_num(): Int = 2
}

class Literal : FooNode implements TokenNode {

    fun get_num(): Int = 3

    @export fun b(): Int = match node.a() {
        case e : Example => e.get_num()
        case c : FooNode => c.get_num()
    }

    @export fun c(): Int = match node.a() {
        case e : Example => e.get_num()
        case c : FooNode => c.get_num()
    }

    @not_implemented fun a(): FooNode
}
