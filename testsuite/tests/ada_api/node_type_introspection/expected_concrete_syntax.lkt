grammar FooGrammar {
    name <- Name(@Identifier)
    main_rule <- list*(var_decl)
    number <- Number(@Number)
    var_decl <- VarDecl("var" name "=" expr ";")
    expr <- or(Addition(expr "+" expr) | atom)
    atom <- or(number | ref)
    ref <- Ref(?"null" name)

}

@root_node class FooNode {
}

@abstract class Expr : FooNode {
}

class Addition : Expr {
    @parse_field lhs : Expr
    @parse_field rhs : Expr
}

class Number : Expr {
}

class Ref : Expr {
    @parse_field null_qual : Null
    @parse_field name : Name
}

class Name : FooNode {
}

@abstract @qualifier class Null : FooNode {

    ## Return whether this is an instance of NullPresent
    @export fun as_bool (): Boolean
}

class VarDecl : FooNode {
    @parse_field name : Name
    @parse_field value : Expr
}
