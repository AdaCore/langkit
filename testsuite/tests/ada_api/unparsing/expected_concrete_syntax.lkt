import lexer_example

@with_lexer(foo_lexer)
grammar foo_grammar {
    @main_rule main_rule <- list*(or(var_decl | fun_decl | block))
    name <- Name(@Identifier)
    type_ref <- name
    null_qual <- NullQual("null")
    var_decl <- VarDecl(
        null_qual "var" name ":" type_ref "=" expr ";"
    )
    param_spec <- ParamSpec(name ":" type_ref ?pick("=" expr))
    fun_decl <- FunDecl(
        "def"
        name
        pick("("
        list*(param_spec, ",", allow_trailing)
        ")") ":" type_ref null_qual "{" list*(stmt) "}"
    )
    stmt <- or(
        | ExprStmt(expr ";")
        | AssignStmt(
            list+(name, ",", allow_leading) "=" expr ";"
        )
    )
    expr <- or(
        | DottedName(expr "." name)
        | Addition(expr "+" expr)
        | call
        | atom
    )
    atom <- or(number | ref)
    number <- Number(@Number)
    ref <- Ref(name)
    call_arg <- CallArg(?pick(name "=") expr)
    call <- or(
        | Call(name "(" list*(call_arg, ",") ")")
        | ExampleCall(
            "example" null(Name) "(" list*(call_arg, ",") ")"
        )
    )
    block <- Block("{" list*(or(var_decl | fun_decl)) "}")
}

@abstract
class FooNode implements Node[FooNode] {
}

class Block: FooNode {
    @parse_field items: ASTList[Decl]
}

class CallArg: FooNode {
    @parse_field @nullable name: Name
    @parse_field expr: Expr
}

@abstract
class Decl: FooNode {
    @abstract @parse_field name: Name
}

class FunDecl: Decl {
    @parse_field name: Name
    @parse_field args: ASTList[ParamSpec]
    @parse_field return_type: Name
    @parse_field is_null: NullQual
    @parse_field body: ASTList[Stmt]
}

class VarDecl: Decl {
    @parse_field is_null: NullQual
    @parse_field name: Name
    @parse_field type_expr: Name
    @parse_field value: Expr
}

@abstract
class Expr: FooNode {
}

class Addition: Expr {
    @parse_field lhs: Expr
    @parse_field rhs: Expr
}

class Call: Expr {
    @parse_field @nullable callee: Name
    @parse_field args: ASTList[CallArg]
}

class ExampleCall: Call {
}

class DottedName: Expr {
    @parse_field prefix: Expr
    @parse_field suffix: Name
}

class Number: Expr implements TokenNode {
}

class Ref: Expr {
    @parse_field name: Name
}

class Name: FooNode implements TokenNode {
}

@qualifier
enum class NullQual: FooNode {
}

class ParamSpec: FooNode {
    @parse_field name: Name
    @parse_field type_expr: Name
    @parse_field @nullable default_expr: Expr
}

@abstract
class Stmt: FooNode {
}

class AssignStmt: Stmt {
    @parse_field names: ASTList[Name]
    @parse_field expr: Expr
}

class ExprStmt: Stmt {
    @parse_field expr: Expr
}
