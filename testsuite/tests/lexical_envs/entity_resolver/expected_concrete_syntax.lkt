grammar FooGrammar {
    @main_rule main_rule <- list*(decl)
    decl <- Decl(Name(@Identifier) "(" list+(ref) ")")
    ref <- Ref(Name(@Identifier))

}

@root_node class FooNode {

    fun resolve_ref (): FooNode = match node {
        case r : Ref => r.parent.parent.node_env.get(r.name)?(0)
        case _ => null
    }
}

class Decl : FooNode {
    @parse_field name : Name
    @parse_field refs : ASTList[Ref]
}

class Name : FooNode {
}

class Ref : FooNode {
    @parse_field name : Name

    @export fun resolve (): FooNode = node.node_env.get(node.name)?(0)
}

struct EnvAssoc {
    key : SymbolType
    value : FooNode
    dest_env : LexicalEnv
    metadata : Metadata
}
