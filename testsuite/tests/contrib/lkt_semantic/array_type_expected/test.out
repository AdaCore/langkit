Resolving test.lkt
==================
Id   <RefId "Array" test.lkt:1:9-1:14>
     references <GenericDecl prelude: "Array">

Id   <RefId "Int" test.lkt:1:15-1:18>
     references <StructDecl prelude: "Int">

Expr <ArrayLiteral test.lkt:1:22-1:24>
     has type <InstantiatedGenericType prelude: "Array[Int]">

Id   <RefId "Array" test.lkt:2:9-2:14>
     references <GenericDecl prelude: "Array">

Id   <RefId "Int" test.lkt:2:15-2:18>
     references <StructDecl prelude: "Int">

Expr <NumLit test.lkt:2:23-2:24>
     has type <StructDecl prelude: "Int">

Expr <ArrayLiteral test.lkt:2:22-2:25>
     has type <InstantiatedGenericType prelude: "Array[Int]">

Id   <RefId "Array" test.lkt:3:9-3:14>
     references <GenericDecl prelude: "Array">

Id   <RefId "Int" test.lkt:3:15-3:18>
     references <StructDecl prelude: "Int">

Expr <NumLit test.lkt:3:23-3:24>
     has type <StructDecl prelude: "Int">

Expr <NumLit test.lkt:3:26-3:27>
     has type <StructDecl prelude: "Int">

Expr <NumLit test.lkt:3:29-3:30>
     has type <StructDecl prelude: "Int">

Expr <ArrayLiteral test.lkt:3:22-3:31>
     has type <InstantiatedGenericType prelude: "Array[Int]">

Id   <RefId "LexicalEnv" test.lkt:6:19-6:29>
     references <GenericDecl prelude: "LexicalEnv">

Id   <RefId "Int" test.lkt:6:30-6:33>
     references <StructDecl prelude: "Int">

Expr <NumLit test.lkt:6:38-6:39>
     has type <StructDecl prelude: "Int">

test.lkt:6:37: error: Mismatched types: expected `LexicalEnv[Int]`, got `Array[Int]`
6 | @invalid val foo: LexicalEnv[Int] = [1]
  |                                     ^^^

test.lkt:10:19: error: ambiguous type for expression
10 | @invalid val a2 = []
   |                   ^^

test.lkt:12:19: error: ambiguous type for expression
12 | @invalid val a3 = ["foo"]
   |                   ^^^^^^^

Id   <RefId "Array" test.lkt:14:9-14:14>
     references <GenericDecl prelude: "Array">

Id   <RefId "String" test.lkt:14:15-14:21>
     references <StructDecl prelude: "String">

Expr <ArrayLiteral test.lkt:14:25-14:27>
     has type <InstantiatedGenericType prelude: "Array[String]">

Id   <RefId "Array" test.lkt:15:9-15:14>
     references <GenericDecl prelude: "Array">

Id   <RefId "String" test.lkt:15:15-15:21>
     references <StructDecl prelude: "String">

Expr <SingleLineStringLit test.lkt:15:26-15:29>
     has type <StructDecl prelude: "String">

Expr <ArrayLiteral test.lkt:15:25-15:30>
     has type <InstantiatedGenericType prelude: "Array[String]">

Id   <RefId "Array" test.lkt:16:9-16:14>
     references <GenericDecl prelude: "Array">

Id   <RefId "String" test.lkt:16:15-16:21>
     references <StructDecl prelude: "String">

Expr <SingleLineStringLit test.lkt:16:26-16:29>
     has type <StructDecl prelude: "String">

Expr <SingleLineStringLit test.lkt:16:31-16:34>
     has type <StructDecl prelude: "String">

Expr <SingleLineStringLit test.lkt:16:36-16:39>
     has type <StructDecl prelude: "String">

Expr <ArrayLiteral test.lkt:16:25-16:40>
     has type <InstantiatedGenericType prelude: "Array[String]">

Id   <RefId "Array" test.lkt:19:18-19:23>
     references <GenericDecl prelude: "Array">

Id   <RefId "Int" test.lkt:19:24-19:27>
     references <StructDecl prelude: "Int">

test.lkt:19:32: error: Mismatched types: expected `Int`, got a character literal
19 | @invalid val a5: Array[Int] = ['!']
   |                                ^^^

test.lkt:19:31: error: Mismatched types: expected `Array[Int]`, got an array
19 | @invalid val a5: Array[Int] = ['!']
   |                               ^^^^^

Id   <RefId "Array" test.lkt:21:9-21:14>
     references <GenericDecl prelude: "Array">

Id   <RefId "Array" test.lkt:21:15-21:20>
     references <GenericDecl prelude: "Array">

Id   <RefId "Int" test.lkt:21:21-21:24>
     references <StructDecl prelude: "Int">

Expr <ArrayLiteral test.lkt:21:30-21:32>
     has type <InstantiatedGenericType prelude: "Array[Int]">

Expr <ArrayLiteral test.lkt:21:29-21:33>
     has type <InstantiatedGenericType prelude: "Array[Array[Int]]">

Id   <RefId "Array" test.lkt:22:9-22:14>
     references <GenericDecl prelude: "Array">

Id   <RefId "Array" test.lkt:22:15-22:20>
     references <GenericDecl prelude: "Array">

Id   <RefId "Int" test.lkt:22:21-22:24>
     references <StructDecl prelude: "Int">

Expr <NumLit test.lkt:22:31-22:32>
     has type <StructDecl prelude: "Int">

Expr <ArrayLiteral test.lkt:22:30-22:33>
     has type <InstantiatedGenericType prelude: "Array[Int]">

Expr <ArrayLiteral test.lkt:22:29-22:34>
     has type <InstantiatedGenericType prelude: "Array[Array[Int]]">

Id   <RefId "Array" test.lkt:23:9-23:14>
     references <GenericDecl prelude: "Array">

Id   <RefId "Array" test.lkt:23:15-23:20>
     references <GenericDecl prelude: "Array">

Id   <RefId "Int" test.lkt:23:21-23:24>
     references <StructDecl prelude: "Int">

Expr <NumLit test.lkt:23:31-23:32>
     has type <StructDecl prelude: "Int">

Expr <NumLit test.lkt:23:34-23:35>
     has type <StructDecl prelude: "Int">

Expr <NumLit test.lkt:23:37-23:38>
     has type <StructDecl prelude: "Int">

Expr <ArrayLiteral test.lkt:23:30-23:39>
     has type <InstantiatedGenericType prelude: "Array[Int]">

Expr <ArrayLiteral test.lkt:23:29-23:40>
     has type <InstantiatedGenericType prelude: "Array[Array[Int]]">

Id   <RefId "Array" test.lkt:25:9-25:14>
     references <GenericDecl prelude: "Array">

Id   <RefId "Array" test.lkt:25:15-25:20>
     references <GenericDecl prelude: "Array">

Id   <RefId "Int" test.lkt:25:21-25:24>
     references <StructDecl prelude: "Int">

Expr <ArrayLiteral test.lkt:25:30-25:32>
     has type <InstantiatedGenericType prelude: "Array[Int]">

Expr <ArrayLiteral test.lkt:25:34-25:36>
     has type <InstantiatedGenericType prelude: "Array[Int]">

Expr <ArrayLiteral test.lkt:25:29-25:37>
     has type <InstantiatedGenericType prelude: "Array[Array[Int]]">

Id   <RefId "Array" test.lkt:26:9-26:14>
     references <GenericDecl prelude: "Array">

Id   <RefId "Array" test.lkt:26:15-26:20>
     references <GenericDecl prelude: "Array">

Id   <RefId "Int" test.lkt:26:21-26:24>
     references <StructDecl prelude: "Int">

Expr <NumLit test.lkt:26:31-26:32>
     has type <StructDecl prelude: "Int">

Expr <ArrayLiteral test.lkt:26:30-26:33>
     has type <InstantiatedGenericType prelude: "Array[Int]">

Expr <NumLit test.lkt:26:36-26:37>
     has type <StructDecl prelude: "Int">

Expr <ArrayLiteral test.lkt:26:35-26:38>
     has type <InstantiatedGenericType prelude: "Array[Int]">

Expr <ArrayLiteral test.lkt:26:29-26:39>
     has type <InstantiatedGenericType prelude: "Array[Array[Int]]">

Id   <RefId "Array" test.lkt:27:9-27:14>
     references <GenericDecl prelude: "Array">

Id   <RefId "Array" test.lkt:27:15-27:20>
     references <GenericDecl prelude: "Array">

Id   <RefId "Int" test.lkt:27:21-27:24>
     references <StructDecl prelude: "Int">

Expr <NumLit test.lkt:27:31-27:32>
     has type <StructDecl prelude: "Int">

Expr <NumLit test.lkt:27:34-27:35>
     has type <StructDecl prelude: "Int">

Expr <NumLit test.lkt:27:37-27:38>
     has type <StructDecl prelude: "Int">

Expr <ArrayLiteral test.lkt:27:30-27:39>
     has type <InstantiatedGenericType prelude: "Array[Int]">

Expr <NumLit test.lkt:27:42-27:43>
     has type <StructDecl prelude: "Int">

Expr <NumLit test.lkt:27:45-27:46>
     has type <StructDecl prelude: "Int">

Expr <NumLit test.lkt:27:48-27:49>
     has type <StructDecl prelude: "Int">

Expr <ArrayLiteral test.lkt:27:41-27:50>
     has type <InstantiatedGenericType prelude: "Array[Int]">

Expr <ArrayLiteral test.lkt:27:29-27:51>
     has type <InstantiatedGenericType prelude: "Array[Array[Int]]">

Id   <RefId "Array" test.lkt:29:9-29:14>
     references <GenericDecl prelude: "Array">

Id   <RefId "Array" test.lkt:29:15-29:20>
     references <GenericDecl prelude: "Array">

Id   <RefId "Array" test.lkt:29:21-29:26>
     references <GenericDecl prelude: "Array">

Id   <RefId "Array" test.lkt:29:27-29:32>
     references <GenericDecl prelude: "Array">

Id   <RefId "Int" test.lkt:29:33-29:36>
     references <StructDecl prelude: "Int">

Expr <ArrayLiteral test.lkt:29:46-29:48>
     has type <InstantiatedGenericType prelude: "Array[Int]">

Expr <ArrayLiteral test.lkt:29:49-29:51>
     has type <InstantiatedGenericType prelude: "Array[Int]">

Expr <ArrayLiteral test.lkt:29:45-29:52>
     has type <InstantiatedGenericType prelude: "Array[Array[Int]]">

Expr <ArrayLiteral test.lkt:29:53-29:55>
     has type <InstantiatedGenericType prelude: "Array[Array[Int]]">

Expr <ArrayLiteral test.lkt:29:44-29:56>
     has type <InstantiatedGenericType prelude: "Array[Array[Array[Int]]]">

Expr <ArrayLiteral test.lkt:29:57-29:59>
     has type <InstantiatedGenericType prelude: "Array[Array[Array[Int]]]">

Expr <ArrayLiteral test.lkt:29:43-29:60>
     has type <InstantiatedGenericType prelude: "Array[Array[Array[Array[Int]]]]">

Id   <RefId "Array" test.lkt:32:18-32:23>
     references <GenericDecl prelude: "Array">

Id   <RefId "Array" test.lkt:32:24-32:29>
     references <GenericDecl prelude: "Array">

Id   <RefId "Int" test.lkt:32:30-32:33>
     references <StructDecl prelude: "Int">

Expr <NumLit test.lkt:32:39-32:40>
     has type <StructDecl prelude: "Int">

test.lkt:32:38: error: Mismatched types: expected `Array[Array[Int]]`, got `Array[Int]`
32 | @invalid val a9: Array[Array[Int]] = [1]
   |                                      ^^^

Id   <RefId "Array" test.lkt:33:19-33:24>
     references <GenericDecl prelude: "Array">

Id   <RefId "Array" test.lkt:33:25-33:30>
     references <GenericDecl prelude: "Array">

Id   <RefId "Int" test.lkt:33:31-33:34>
     references <StructDecl prelude: "Int">

Expr <NumLit test.lkt:33:42-33:43>
     has type <StructDecl prelude: "Int">

Expr <ArrayLiteral test.lkt:33:41-33:44>
     has type <InstantiatedGenericType prelude: "Array[Int]">

Expr <ArrayLiteral test.lkt:33:40-33:45>
     has type <InstantiatedGenericType prelude: "Array[Array[Int]]">

test.lkt:33:39: error: Mismatched types: expected `Array[Array[Int]]`, got `Array[Array[Array[Int]]]`
33 | @invalid val a10: Array[Array[Int]] = [[[1]]]
   |                                       ^^^^^^^

