grammar None_grammar {
    name <- Name(@Identifier)
    main_rule <- list*(var_decl)
    number <- Number(@Number)
    var_decl <- VarDecl(@Var name @Equal expr @Semicolon)
    expr <- or(Addition(expr @Plus expr) | atom)
    atom <- or(number | ref)
    ref <- Ref(?@Null name)

}

class FooNode {
}

class Expr : FooNode {
}

class Addition : Expr {
    parse field lhs : Expr
    parse field rhs : Expr
}

class Number : Expr {
}

class Ref : Expr {
    parse field null_qual : Null
    parse field name : Name
}

"""
List of VarDecl.
"""
class ASTList[VarDecl] : FooNodeBaseList {
}

class Name : FooNode {
}

qualifier class Null : FooNode {

    """
    Return whether this is an instance of NullPresent
    """
    public fun as_bool (): Boolean
}

class VarDecl : FooNode {
    parse field name : Name
    parse field value : Expr
}
