grammar None_grammar {
    main_rule <- list*(or(Def(@Def Name(@Identifier) expr) | expr))
    expr <- or(atom | plus)
    lit <- Lit(@Number)
    plus <- @LPar Plus(expr @Plus expr) @RPar
    atom <- or(lit | ref)
    ref <- Ref(@Identifier)

}

class FooNode {

    public fun find_atoms (): Array[Entity[Atom]] = (
        match entity {
            case a : Atom => [a]
            case _ => null

        }
    ) & (
        entity.children.mapcat((c) => c.find_atoms)
    )

    public fun find_atoms_or_exprs (): Array[Entity[Expr]] = (
        match entity {
            case a : Atom => [a.to[Expr]]
            case e : Expr => [e]
            case _ => null

        }
    ) & (
        entity.children.mapcat((c) => c.find_atoms_or_exprs)
    )

    public fun find_exprs (): Array[Entity[Expr]] = (
        match entity {
            case e : Expr => [e]
            case a : Atom => [a.to[Expr]]
            case _ => null

        }
    ) & (
        entity.children.mapcat((c) => c.find_exprs)
    )
}

class Def : FooNode {
    @parse_field name : Name
    @parse_field expr : Expr
}

class Expr : FooNode {

    public fun find_refs (): Array[Entity[Ref]] = (
        match entity {
            case r : Ref => [r]
            case _ => null

        }
    ) & (
        entity.children.mapcat((c) => c.to![Expr].find_refs)
    )
}

class Atom : Expr {
}

class Lit : Atom {
}

class Ref : Atom {
}

class Plus : Expr {
    @parse_field lhs : Expr
    @parse_field rhs : Expr
}

"""
List of FooNode.

This list node can contain one of the following nodes:

* ${node_name(T.Def)}
* ${node_name(T.Expr)}
"""
class ASTList[FooNode] : FooNodeBaseList {
}

class Name : FooNode {
}
