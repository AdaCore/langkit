# Test basic features for enumeration types

import lexer_example

@with_lexer(foo_lexer)
grammar foo_grammar {
    @main_rule main_rule <- list+(pick(decl ";"))
    decl <- or(
        | VarDecl("def" name "=" expr)
        | FuncDecl(
            "def" name "(" list+(name, ",") ")" "=" expr
        )
    )
    expr <- or(Plus(atom "+" expr) | atom)
    atom <- or(Literal(@Number) | name)
    name <- Name(@Identifier)
}

enum DeclKind {
    case func, var
}

@abstract
class FooNode implements Node[FooNode] {
    @exported
    fun identity(k: DeclKind): DeclKind = k
}

@abstract
class Decl: FooNode {
    @exported
    @abstract
    fun decl_kind(): DeclKind

    @exported
    @abstract
    fun completion_kind(): Int
}

class FuncDecl: Decl {
    @parse_field name: Name
    @parse_field args: ASTList[Name]
    @parse_field expr: Expression

    fun decl_kind(): DeclKind = DeclKind.func

    fun completion_kind(): Int =
        self.completion_item_kind_to_int(CompletionItemKind.function_kind)
}

class VarDecl: Decl {
    @parse_field name: Name
    @parse_field expr: Expression

    fun decl_kind(): DeclKind = DeclKind.var

    fun completion_kind(): Int =
        self.completion_item_kind_to_int(CompletionItemKind.variable_kind)
}

@abstract
class Expression: FooNode {
}

class Literal: Expression implements TokenNode {
}

class Name: Expression implements TokenNode {
}

class Plus: Expression {
    @parse_field left: Expression
    @parse_field right: Expression
}
