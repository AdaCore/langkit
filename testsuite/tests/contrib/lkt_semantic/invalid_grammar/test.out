Resolving test.lkt
==================
Id   <RefId "foo_lexer" test.lkt:5:22-5:31>
     references <LexerDecl "foo_lexer" test.lkt:1:1-3:2>

Id   <RefId "Int" test.lkt:6:12-6:15>
     references <StructDecl prelude: "Int">

Expr <NumLit test.lkt:6:18-6:19>
     has type <StructDecl prelude: "Int">

test.lkt:6:5: error: value declaration forbidden in grammar declaration
6 |     val i: Int = 0
  |     ^^^^^^^^^^^^^^

Id   <RefId "foo_lexer" test.lkt:11:22-11:31>
     references <LexerDecl "foo_lexer" test.lkt:1:1-3:2>

test.lkt:14:5: error: only one main rule allowed
14 |     @main_rule foobar <- "foobar"
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

test.lkt:15:5: error: only one main rule allowed
15 |     @main_rule baz <- "baz"
   |     ^^^^^^^^^^^^^^^^^^^^^^^

Id   <RefId "foo_lexer" test.lkt:18:22-18:31>
     references <LexerDecl "foo_lexer" test.lkt:1:1-3:2>

test.lkt:18:33: error: main rule missing (@main_rule annotation)
18 |  @invalid @with_lexer(foo_lexer) grammar main_missing {
   | _________________________________^
   ||
   || ~~~ 1 other lines ~~~
   ||
20 || }
   ||_^

test.lkt:22:10: error: exactly 1 positional argument expected
22 | @invalid @with_lexer grammar invalid_with_lexer {
   |          ^^^^^^^^^^^

test.lkt:25:10: error: missing mandatory "@with_lexer" annotation
25 |  @invalid grammar with_lexer_missing {
   | __________^
26 || }
   ||_^

