









with Ada.Containers;                  use Ada.Containers;
with Ada.Containers.Hashed_Maps;
with Ada.Containers.Vectors;
with Ada.Directories;
with Ada.Exceptions;
with Ada.Finalization;
with Ada.Strings.Unbounded;           use Ada.Strings.Unbounded;
with Ada.Strings.Wide_Wide_Unbounded; use Ada.Strings.Wide_Wide_Unbounded;

pragma Warnings (Off, "internal");
with Ada.Strings.Wide_Wide_Unbounded.Aux;
use Ada.Strings.Wide_Wide_Unbounded.Aux;
pragma Warnings (On, "internal");

with Ada.Text_IO;                     use Ada.Text_IO;
with Ada.Unchecked_Conversion;
with Ada.Unchecked_Deallocation;
with System;

with GNAT.Task_Lock;
with GNAT.Traceback.Symbolic;

with GNATCOLL.Traces;

with Liblktlang_Support.Adalog.Debug;
with Liblktlang_Support.Generic_API.Analysis;
with Liblktlang_Support.Generic_API.Introspection;
with Liblktlang_Support.Hashes; use Liblktlang_Support.Hashes;
with Liblktlang_Support.Images; use Liblktlang_Support.Images;
with Liblktlang_Support.Names;  use Liblktlang_Support.Names;
with Liblktlang_Support.Relative_Get;

with Liblktlang.Private_Converters;
use Liblktlang.Private_Converters;

pragma Warnings (Off, "referenced");

          with Liblktlang.Default_Provider;
          with Liblktlang.Implementation.Extensions;
            use Liblktlang.Implementation.Extensions;

pragma Warnings (On, "referenced");



package body Liblktlang.Implementation is

   use Precomputed_Symbols;

   pragma Warnings (Off, "has no effect");
   use Solver;
   pragma Warnings (On, "has no effect");

   package Context_Vectors is new Ada.Containers.Vectors
     (Index_Type   => Positive,
      Element_Type => Internal_Context);

   type Contexts_Destructor is limited
      new Ada.Finalization.Limited_Controlled with null record;
   overriding procedure Finalize (CD : in out Contexts_Destructor);
   --  Helper to destroy all contexts when terminating the process

   package Context_Pool is

      procedure Acquire (Context : out Internal_Context)
         with Post => Context /= null;
      --  If a context is free for reuse, increment its serial number and
      --  return it. Otherwise, allocate a new one. In any case, this does not
      --  initialize it, except for the Serial_Number field.

      procedure Release (Context : in out Internal_Context)
         with Pre  => Context /= null,
              Post => Context = null;
      --  Tag Context as free for reuse and set it to null

      procedure Free;
      --  Free all contexts in this pool. Intended to be called only when the
      --  process is terminating, to avoid reported memory leaks.

   private

      Available : Context_Vectors.Vector;
      --  List of allocated contexts that can be re-used right now

      CD : Contexts_Destructor with Unreferenced;
      --  Singleton whose only purpose is to free all contexts in Available
      --  when finalized.

   end Context_Pool;

   procedure Register_Destroyable_Helper
     (Unit    : Internal_Unit;
      Object  : System.Address;
      Destroy : Destroy_Procedure);
   --  Common underlying implementation for Register_Destroyable_Gen

   pragma Warnings (Off, "referenced");
   function Construct_Entity_Array
     (V : AST_Envs.Entity_Vectors.Vector) return Internal_Entity_Array_Access;
   pragma Warnings (On, "referenced");

   procedure Reset_Envs_Caches (Unit : Internal_Unit);
   --  Reset the env caches of all lexical environments created for ``Unit``

   procedure Destroy (Env : in out Lexical_Env_Access);

   function Snaps_At_Start (Self : Bare_Lkt_Node) return Boolean;
   function Snaps_At_End (Self : Bare_Lkt_Node) return Boolean;

   --  Those maps are used to give unique ids to lexical envs while pretty
   --  printing them.

   package Address_To_Id_Maps is new Ada.Containers.Hashed_Maps
     (Lexical_Env, Integer, Hash, "=");

   type Dump_Lexical_Env_State is record
      Env_Ids : Address_To_Id_Maps.Map;
      --  Mapping: Lexical_Env -> Integer, used to remember which unique Ids we
      --  assigned to the lexical environments we found.

      Next_Id : Positive := 1;
      --  Id to assign to the next unknown lexical environment

      Root_Env : Lexical_Env;
      --  Lexical environment we consider a root (this is the Root_Scope from
      --  the current analysis context), or null if unknown.
   end record;
   --  Holder for the state of lexical environment dumpers

   function Get_Env_Id
     (E : Lexical_Env; State : in out Dump_Lexical_Env_State) return String;
   --  If E is known, return its unique Id from State. Otherwise, assign it a
   --  new unique Id and return it.

   procedure Print
     (Node        : Liblktlang_Support.Generic_API.Analysis.Lk_Node;
      Show_Slocs  : Boolean;
      Line_Prefix : String := "");
   --  Helper for the public overload, but working on the generic API node type

   ------------------------
   -- Precomputed_Symbol --
   ------------------------

   pragma Warnings (Off, "referenced");
   function Precomputed_Symbol
     (Index : Precomputed_Symbol_Index) return Text_Type is
   pragma Warnings (On, "referenced");
   begin
         declare
            Raw_Text : constant Text_Type := (case Index is
            
               when Precomputed_Sym_Abstract => "abstract",
               when Precomputed_Sym_All => "all",
               when Precomputed_Sym_Analysisunit => "AnalysisUnit",
               when Precomputed_Sym_Any => "any",
               when Precomputed_Sym_Array => "Array",
               when Precomputed_Sym_As => "as",
               when Precomputed_Sym_As_Bool => "as_bool",
               when Precomputed_Sym_Astlist => "ASTList",
               when Precomputed_Sym_Basictrait => "BasicTrait",
               when Precomputed_Sym_Bigint => "BigInt",
               when Precomputed_Sym_Bool => "Bool",
               when Precomputed_Sym_Builder => "builder",
               when Precomputed_Sym_Call => "__call__",
               when Precomputed_Sym_Char => "Char",
               when Precomputed_Sym_Dedent => "dedent",
               when Precomputed_Sym_Domain => "domain",
               when Precomputed_Sym_Dont_Skip => "dont_skip",
               when Precomputed_Sym_Entity => "Entity",
               when Precomputed_Sym_Env_Spec => "env_spec",
               when Precomputed_Sym_Envaction => "EnvAction",
               when Precomputed_Sym_Equation => "Equation",
               when Precomputed_Sym_Errornode => "ErrorNode",
               when Precomputed_Sym_Family => "family",
               when Precomputed_Sym_Ignore_Constructor_Arg => "ignore_constructor_arg",
               when Precomputed_Sym_Indent => "indent",
               when Precomputed_Sym_Indexable => "Indexable",
               when Precomputed_Sym_Int => "Int",
               when Precomputed_Sym_Internal => "__internal",
               when Precomputed_Sym_Invalid => "invalid",
               when Precomputed_Sym_Iterator => "Iterator",
               when Precomputed_Sym_Keep => "keep",
               when Precomputed_Sym_Lazy => "lazy",
               when Precomputed_Sym_List => "list",
               when Precomputed_Sym_Logicvar => "LogicVar",
               when Precomputed_Sym_Metadata => "Metadata",
               when Precomputed_Sym_Metadata_44 => "metadata",
               when Precomputed_Sym_Newline => "newline",
               when Precomputed_Sym_No_Case => "no_case",
               when Precomputed_Sym_Node => "Node",
               when Precomputed_Sym_Node_47 => "node",
               when Precomputed_Sym_Nodebuilder => "NodeBuilder",
               when Precomputed_Sym_Null_Field => "null_field",
               when Precomputed_Sym_Nullable => "nullable",
               when Precomputed_Sym_Open => "open",
               when Precomputed_Sym_Parse_Field => "parse_field",
               when Precomputed_Sym_Pick => "pick",
               when Precomputed_Sym_Previous_Token => "previous_token",
               when Precomputed_Sym_Property => "property",
               when Precomputed_Sym_Propertyerror => "PropertyError",
               when Precomputed_Sym_Qualifier => "qualifier",
               when Precomputed_Sym_Regexp => "Regexp",
               when Precomputed_Sym_Root_Node => "root_node",
               when Precomputed_Sym_Rootnode => "RootNode__",
               when Precomputed_Sym_Self => "self",
               when Precomputed_Sym_Send => "send",
               when Precomputed_Sym_Skip => "skip",
               when Precomputed_Sym_Stop_Cut => "stop_cut",
               when Precomputed_Sym_String => "String",
               when Precomputed_Sym_Super => "super",
               when Precomputed_Sym_Symbol => "Symbol",
               when Precomputed_Sym_Synthetic => "synthetic",
               when Precomputed_Sym_T => "T",
               when Precomputed_Sym_Tokennode => "TokenNode",
               when Precomputed_Sym_Update => "update",
               when Precomputed_Sym_Var => "var",
               when Precomputed_Sym_When => "when",
               when Precomputed_Sym_With_Dynvars => "with_dynvars"
            );

            Symbol : constant Symbolization_Result :=
                  Create_Symbol (Raw_Text)
            ;
         begin
            if Symbol.Success then
               return Symbol.Symbol;
            else
               raise Program_Error with
                 "Cannot canonicalize symbol literal: " & Image (Raw_Text);
            end if;
         end;
   end Precomputed_Symbol;

   ----------------------------
   -- Construct_Entity_Array --
   ----------------------------

   function Construct_Entity_Array
     (V : AST_Envs.Entity_Vectors.Vector) return Internal_Entity_Array_Access
   is
      Ret : Internal_Entity_Array_Access :=
        Create_Internal_Entity_Array (V.Length);
   begin
      for J in V.First_Index .. V.Last_Index loop
         Ret.Items (J) := V.Get (J);
      end loop;

      declare
         Tmp : AST_Envs.Entity_Vectors.Vector := V;
      begin
         Tmp.Destroy;
      end;

      return Ret;
   end Construct_Entity_Array;

   -----------
   -- Image --
   -----------

   function Image (Self : Symbol_Type) return String_Type is
   begin
      return Create_String (Image (Self));
   end Image;

   ------------------
   -- Context_Pool --
   ------------------

   package body Context_Pool is

      -------------
      -- Acquire --
      -------------

      procedure Acquire (Context : out Internal_Context) is
      begin
         GNAT.Task_Lock.Lock;

         if Available.Is_Empty then
            Context := new Analysis_Context_Type;
            Context.Serial_Number := 1;
         else
            Context := Available.Last_Element;
            Available.Delete_Last;
         end if;

         GNAT.Task_Lock.Unlock;

         Context.Initialized := False;
         Context.Ref_Count := 1;

      exception
         when others =>
            GNAT.Task_Lock.Unlock;
            raise;
      end Acquire;

      -------------
      -- Release --
      -------------

      procedure Release (Context : in out Internal_Context) is
      begin
         GNAT.Task_Lock.Lock;

         Available.Append (Context);
         Context.Serial_Number := Context.Serial_Number + 1;
         Context := null;

         GNAT.Task_Lock.Unlock;

      exception
         when others =>
            GNAT.Task_Lock.Unlock;
            raise;
      end Release;

      ----------
      -- Free --
      ----------

      procedure Free is
      begin
         GNAT.Task_Lock.Lock;

         for C of Available loop
            Free (C);
         end loop;

         GNAT.Task_Lock.Unlock;

      exception
         when others =>
            GNAT.Task_Lock.Unlock;
            raise;
      end Free;

   end Context_Pool;

   --------------
   -- Finalize --
   --------------

   overriding procedure Finalize (CD : in out Contexts_Destructor) is
      pragma Unreferenced (CD);
   begin
      Context_Pool.Free;
   end Finalize;

   -------------
   -- Dec_Ref --
   -------------

   procedure Dec_Ref (File_Reader : in out Internal_File_Reader_Access) is
      procedure Destroy is new Ada.Unchecked_Deallocation
        (Internal_File_Reader'Class, Internal_File_Reader_Access);
   begin
      if File_Reader /= null and then File_Reader.all.Dec_Ref then
         Destroy (File_Reader);
      end if;
   end Dec_Ref;

   -------------
   -- Dec_Ref --
   -------------

   procedure Dec_Ref (Self : in out Internal_Event_Handler_Access) is
      procedure Destroy is new Ada.Unchecked_Deallocation
        (Internal_Event_Handler'Class, Internal_Event_Handler_Access);
   begin
      if Self /= null and then Self.all.Dec_Ref then
         Destroy (Self);
      end if;
   end Dec_Ref;

   -------------
   -- Dec_Ref --
   -------------

   procedure Dec_Ref (Provider : in out Internal_Unit_Provider_Access) is
      procedure Destroy is new Ada.Unchecked_Deallocation
        (Internal_Unit_Provider'Class, Internal_Unit_Provider_Access);
   begin
      if Provider /= null and then Provider.all.Dec_Ref then
         Destroy (Provider);
      end if;
   end Dec_Ref;

   ----------------
   -- Get_Env_Id --
   ----------------

   function Get_Env_Id
     (E : Lexical_Env; State : in out Dump_Lexical_Env_State) return String
   is
      C        : Address_To_Id_Maps.Cursor;
      Inserted : Boolean;
   begin
      if E = Null_Lexical_Env then
         return "$null";

      elsif E = State.Root_Env then
         --  Insert root env with a special Id so that we only print it once
         State.Env_Ids.Insert (E, -1, C, Inserted);
         return "$root";
      end if;

      State.Env_Ids.Insert (E, State.Next_Id, C, Inserted);
      if Inserted then
         State.Next_Id := State.Next_Id + 1;
      end if;

      return '@' & Stripped_Image (Address_To_Id_Maps.Element (C));
   end Get_Env_Id;

   pragma Warnings (Off, "referenced");
   function To_Lookup_Kind_Type (K : Lookup_Kind) return Lookup_Kind_Type
   is
     (Lookup_Kind_Type'Val (Lookup_Kind'Pos (K)));
   pragma Warnings (On, "referenced");

   ----------------------
   -- Allocate_Context --
   ----------------------

   function Allocate_Context return Internal_Context is
   begin
      return Context : Internal_Context do
         Context_Pool.Acquire (Context);
      end return;
   end Allocate_Context;

   ------------------------
   -- Initialize_Context --
   ------------------------

   procedure Initialize_Context
     (Context        : Internal_Context;
      Charset        : String;
      File_Reader    : Internal_File_Reader_Access;
      Unit_Provider  : Internal_Unit_Provider_Access;
      Event_Handler  : Internal_Event_Handler_Access;
      With_Trivia    : Boolean;
      Tab_Stop       : Positive)
   is
      Actual_Charset : constant String :=
        (if Charset = "" then Default_Charset else Charset);
      Symbols        : constant Precomputed_Symbol_Table
        := Create_Symbol_Table;
   begin
      Context.Initialized := True;
      Context.Symbols := Symbol_Table (Symbols);
      Context.Charset := To_Unbounded_String (Actual_Charset);
      Context.Tab_Stop := Tab_Stop;
      Context.With_Trivia := With_Trivia;
      Context.Root_Scope := Create_Static_Lexical_Env
        (Parent    => Null_Lexical_Env,
         Node      => null,
         Sym_Table => Context.Symbols);

      --  Create a new ownership share for Event_Handler so that it lives at
      --  least as long as this analysis context.
      Context.Event_Handler := Event_Handler;
      if Context.Event_Handler /= null then
         Context.Event_Handler.Inc_Ref;
      end if;

      --  Create a new ownership share for File_Reader so that it lives at
      --  least as long as this analysis context.
      Context.File_Reader := File_Reader;
      if Context.File_Reader /= null then
         Context.File_Reader.Inc_Ref;
      end if;

      --  Create a new ownership share for Unit_Provider so that it lives at
      --  least as long as this analysis context.
      Context.Unit_Provider := Unit_Provider;
      if Context.Unit_Provider /= null then
         Context.Unit_Provider.Inc_Ref;
      end if;

         if Context.Unit_Provider = null then
            Context.Unit_Provider := Liblktlang.Default_Provider.Create;
         end if;

      Initialize (Context.Parser);

      Context.Discard_Errors_In_Populate_Lexical_Env := True;
      Context.Logic_Resolution_Timeout :=
        Liblktlang_Support.Adalog.Default_Timeout_Ticks_Number;
      Context.In_Populate_Lexical_Env := False;
      Context.Cache_Version := 0;
      Context.Reparse_Cache_Version := 0;

      Context.Rewriting_Handle := No_Rewriting_Handle_Pointer;
      Context.Templates_Unit := No_Analysis_Unit;

      Context.Available_Rebindings := Env_Rebindings_Vectors.Empty_Vector;

      

   end Initialize_Context;

   -----------------
   -- Create_Unit --
   -----------------

   function Create_Unit
     (Context             : Internal_Context;
      Normalized_Filename : Virtual_File;
      Charset             : String;
      Rule                : Grammar_Rule) return Internal_Unit
   is
      use Units_Maps;

      Unit : Internal_Unit;
   begin
      Unit := Create_Special_Unit
        (Context, Normalized_Filename, Charset, Rule);
      Context.Units.Insert (Normalized_Filename, Unit);
      return Unit;
   end Create_Unit;

   --------------
   -- Get_Unit --
   --------------

   function Get_Unit
     (Context           : Internal_Context;
      Filename, Charset : String;
      Reparse           : Boolean;
      Input             : Internal_Lexer_Input;
      Rule              : Grammar_Rule;
      Is_Internal       : Boolean := False) return Internal_Unit
   is
      use Units_Maps;

      Normalized_Filename : constant GNATCOLL.VFS.Virtual_File :=
         Normalized_Unit_Filename (Context, Filename);

      Cur     : constant Cursor :=
         Context.Units.Find (Normalized_Filename);
      Created : constant Boolean := Cur = No_Element;
      Unit    : Internal_Unit;

      Actual_Charset : Unbounded_String;
      Refined_Input  : Internal_Lexer_Input := Input;

      Parsing_Happened : Boolean := False;

   begin
      --  Determine which encoding to use. Use the Charset parameter (if
      --  provided), otherwise use the context-wide default.

      Actual_Charset := (if Charset'Length /= 0
                         then To_Unbounded_String (Charset)
                         else Context.Charset);

      if Refined_Input.Kind = File then
         Refined_Input.Filename := Normalized_Filename;
      end if;

      if Refined_Input.Kind in File | Bytes_Buffer then
         Refined_Input.Charset := Actual_Charset;

         --  Unless the caller requested a specific charset for this unit,
         --  allow the lexer to automatically discover the source file encoding
         --  before defaulting to the context-specific one. We do this trying
         --  to match a byte order mark.

         Refined_Input.Read_BOM := Charset'Length = 0;
      end if;

      --  Create the Internal_Unit if needed

      Unit :=
        (if Created
         then Create_Unit (Context, Normalized_Filename,
                           To_String (Actual_Charset), Rule)
         else Element (Cur));

      --  If an internal unit is requested, set the corresponding flag.
      --  Otherwise, make sure that the unit we return isn't internal.

      if Is_Internal then
         Unit.Is_Internal := True;
      end if;

      --  (Re)parse it if needed

      if Created or else Reparse then

         --  It is illegal to reparse an internal unit for public API users.
         --  Since public APIs do not allow to pass True to Is_Internal, we can
         --  check here that only the implementation can ask to reparse an
         --  internal unit.

         if Unit.Is_Internal and then not Is_Internal then
            raise Precondition_Failure with "cannot reparse an internal unit";
         end if;

         declare
            Reparsed : Reparsed_Unit;
         begin
            Do_Parsing (Unit, Refined_Input, Reparsed);
            Parsing_Happened := Reparsed.Present;
            Update_After_Reparse (Unit, Reparsed);
         end;

         --  Now that we have removed reparsed the unit, update its current
         --  charset.

         Unit.Charset := Actual_Charset;
      end if;

      if Context.Event_Handler /= null then
         Context.Event_Handler.Unit_Parsed_Callback
           (Context  => Context,
            Unit     => Unit,
            Reparsed => Parsing_Happened and then not Created);
      end if;

      return Unit;
   end Get_Unit;

   --------------
   -- Has_Unit --
   --------------

   function Has_Unit
     (Context : Internal_Context; Unit_Filename : String) return Boolean is
   begin
      return Context.Units.Contains
        (Normalized_Unit_Filename (Context, Unit_Filename));
   end Has_Unit;

   -------------------
   -- Get_From_File --
   -------------------

   function Get_From_File
     (Context  : Internal_Context;
      Filename : String;
      Charset  : String;
      Reparse  : Boolean;
      Rule     : Grammar_Rule) return Internal_Unit
   is
      Input : constant Internal_Lexer_Input :=
        (Kind     => File,
         Charset  => <>,
         Read_BOM => False,
         Filename => <>);
   begin
      if Reparse and then Has_Rewriting_Handle (Context) then
         raise Precondition_Failure with
            "cannot reparse during tree rewriting";
      end if;

      return Get_Unit (Context, Filename, Charset, Reparse, Input, Rule);
   end Get_From_File;

   ---------------------
   -- Get_From_Buffer --
   ---------------------

   function Get_From_Buffer
     (Context  : Internal_Context;
      Filename : String;
      Charset  : String;
      Buffer   : String;
      Rule     : Grammar_Rule) return Internal_Unit
   is
      Input : constant Internal_Lexer_Input :=
        (Kind        => Bytes_Buffer,
         Charset     => <>,
         Read_BOM    => False,
         Bytes       => Buffer'Address,
         Bytes_Count => Buffer'Length);
   begin
      if Has_Rewriting_Handle (Context) then
         raise Precondition_Failure with
            "cannot parse from buffer during tree rewriting";

      elsif Context.File_Reader /= null then
         raise Precondition_Failure with
            "cannot parse from buffer with a file reader";
      end if;

      return Get_Unit (Context, Filename, Charset, True, Input, Rule);
   end Get_From_Buffer;

   --------------------
   -- Get_With_Error --
   --------------------

   function Get_With_Error
     (Context  : Internal_Context;
      Filename : String;
      Error    : Text_Type;
      Charset  : String;
      Rule     : Grammar_Rule) return Internal_Unit
   is
      use Units_Maps;

      Normalized_Filename : constant Virtual_File :=
         Normalized_Unit_Filename (Context, Filename);
      Cur                 : constant Cursor :=
         Context.Units.Find (Normalized_Filename);
   begin
      if Cur = No_Element then
         declare
            Unit : constant Internal_Unit := Create_Unit
              (Context, Normalized_Filename, Charset, Rule);
         begin
            Append (Unit.Diagnostics, No_Source_Location_Range, Error);
            return Unit;
         end;
      else
         return Element (Cur);
      end if;
   end Get_With_Error;


   -----------------------
   -- Get_From_Provider --
   -----------------------

   function Get_From_Provider
     (Context : Internal_Context;
      Name    : Text_Type;
      Kind    : Analysis_Unit_Kind;
      Charset : String;
      Reparse : Boolean) return Internal_Unit is
   begin
      if Reparse and then Has_Rewriting_Handle (Context) then
         raise Precondition_Failure with
            "cannot reparse during tree rewriting";
      end if;

      declare
         Result      : Internal_Unit;
         Dummy_Index : Positive;
      begin
         Context.Unit_Provider.Get_Unit_And_PLE_Root
           (Context, Name, Kind, Charset, Reparse, Result, Dummy_Index);
         return Result;
      exception
         when Property_Error =>
            raise Invalid_Unit_Name_Error with
               "Invalid unit name: " & Image (Name, With_Quotes => True)
               & " (" & Analysis_Unit_Kind'Image (Kind) & ")";
      end;
   end Get_From_Provider;


   -------------------
   -- Unit_Provider --
   -------------------

   function Unit_Provider
     (Context : Internal_Context) return Internal_Unit_Provider_Access
   is (Context.Unit_Provider);

   ------------------
   -- Resolve_Unit --
   ------------------

   procedure Resolve_Unit
     (Context : Internal_Context;
      Name    : Text_Type;
      Kind    : Analysis_Unit_Kind;
      Unit    : out Resolved_Unit)
   is
      --  Look for the cache entry corresponding to Unit; create one if needed

      Dummy    : Resolved_Unit_Array;
      Key      : constant Symbol_Type := Find (Context.Symbols, Name);
      Pos      : Unit_Provider_Cache_Maps.Cursor;
      Inserted : Boolean;
   begin
      Context.Unit_Provider_Cache.Insert (Key, Dummy, Pos, Inserted);
      declare
         Units : Resolved_Unit_Array renames
           Context.Unit_Provider_Cache.Reference (Pos);
         U     : Resolved_Unit renames Units (Kind);
      begin
         --  If the cache entry is not populated for the requested kind, run
         --  the query and save the result for later requests.

         if U.Filename = null then
            declare
               Provider : Internal_Unit_Provider'Class renames
                 Context.Unit_Provider.all;
               Filename : Unbounded_String;
            begin
               Provider.Get_Unit_Location
                 (Name           => Name,
                  Kind           => Kind,
                  Filename       => Filename,
                  PLE_Root_Index => U.PLE_Root_Index);
               Provider.Get_Unit_And_PLE_Root
                 (Context        => Context,
                  Name           => Name,
                  Kind           => Kind,
                  Unit           => U.Unit,
                  PLE_Root_Index => U.PLE_Root_Index);
               U.Filename := new String'(To_String (Filename));
            end;
         end if;

         Unit := U;
      end;
   end Resolve_Unit;

   -----------------------
   -- Get_Unit_Location --
   -----------------------

   procedure Get_Unit_Location
     (Context        : Internal_Context;
      Name           : Text_Type;
      Kind           : Analysis_Unit_Kind;
      Filename       : out String_Access;
      PLE_Root_Index : out Positive)
   is
      U : Resolved_Unit;
   begin
      Resolve_Unit (Context, Name, Kind, U);
      Filename := U.Filename;
      PLE_Root_Index := U.PLE_Root_Index;
   end Get_Unit_Location;

   ---------------------------
   -- Get_Unit_And_PLE_Root --
   ---------------------------

   procedure Get_Unit_And_PLE_Root
     (Context        : Internal_Context;
      Name           : Text_Type;
      Kind           : Analysis_Unit_Kind;
      Unit           : out Internal_Unit;
      PLE_Root_Index : out Positive)
   is
      U : Resolved_Unit;
   begin
      Resolve_Unit (Context, Name, Kind, U);
      Unit := U.Unit;
      PLE_Root_Index := U.PLE_Root_Index;
   end Get_Unit_And_PLE_Root;

   ----------
   -- Hash --
   ----------

   function Hash (Context : Internal_Context) return Hash_Type is
      function H is new Hash_Access (Analysis_Context_Type, Internal_Context);
   begin
      return H (Context);
   end Hash;

   ---------------------
   -- Has_With_Trivia --
   ---------------------

   function Has_With_Trivia (Context : Internal_Context) return Boolean is
   begin
      return Context.With_Trivia;
   end Has_With_Trivia;

   --------------------------------------------
   -- Discard_Errors_In_Populate_Lexical_Env --
   --------------------------------------------

   procedure Discard_Errors_In_Populate_Lexical_Env
     (Context : Internal_Context; Discard : Boolean) is
   begin
      Context.Discard_Errors_In_Populate_Lexical_Env := Discard;
   end Discard_Errors_In_Populate_Lexical_Env;

   ----------------------------------
   -- Set_Logic_Resolution_Timeout --
   ----------------------------------

   procedure Set_Logic_Resolution_Timeout
     (Context : Internal_Context; Timeout : Natural) is
   begin
      Context.Logic_Resolution_Timeout := Timeout;
   end Set_Logic_Resolution_Timeout;

   --------------------------
   -- Has_Rewriting_Handle --
   --------------------------

   function Has_Rewriting_Handle (Context : Internal_Context) return Boolean is
   begin
      return Context.Rewriting_Handle /= No_Rewriting_Handle_Pointer;
   end Has_Rewriting_Handle;

   -------------
   -- Inc_Ref --
   -------------

   procedure Inc_Ref (Context : Internal_Context) is
   begin
      if Context /= null then
         Context.Ref_Count := Context.Ref_Count + 1;
      end if;
   end Inc_Ref;

   -------------
   -- Dec_Ref --
   -------------

   procedure Dec_Ref (Context : in out Internal_Context) is
   begin
      if Context /= null then
         Context.Ref_Count := Context.Ref_Count - 1;
         if Context.Ref_Count = 0 then

            --  If this context was not completely initialized, just release
            --  the allocated object. Do the full destruction otherwise.
            if Context.Initialized then
               Destroy (Context);
            end if;
            Context_Pool.Release (Context);
         end if;
      end if;
   end Dec_Ref;

   -------------
   -- Destroy --
   -------------

   procedure Destroy (Context : Internal_Context) is
   begin
      --  Destroy all named environment data structures
      for Desc of Context.Named_Envs loop
         for V of Desc.Foreign_Nodes loop
            V.Destroy;
         end loop;
         Destroy (Desc);
      end loop;
      Context.Named_Envs.Clear;

      --  If we are asked to free this context, it means that no one else have
      --  references to its analysis units, so it's safe to destroy these.
      for Unit of Context.Units loop
         Destroy (Unit);
      end loop;
      Context.Units := Units_Maps.Empty_Map;
      Context.Filenames := Virtual_File_Maps.Empty_Map;

      declare
         procedure Destroy is new Ada.Unchecked_Deallocation
           (Env_Rebindings_Type, Env_Rebindings);

         AR : Env_Rebindings_Vectors.Vector renames
            Context.Available_Rebindings;
         R  : Env_Rebindings;
      begin
         for I in AR.First_Index .. AR.Last_Index loop
            R := AR.Get (I);
            Destroy (R);
         end loop;
         AR.Destroy;
      end;

      for Pos in Context.Unit_Provider_Cache.Iterate loop
         declare
            Units : Resolved_Unit_Array renames
              Context.Unit_Provider_Cache.Reference (Pos);
         begin
            for U of Units loop
               Free (U.Filename);
            end loop;
         end;
      end loop;
      Context.Unit_Provider_Cache.Clear;

      Destroy (Context.Templates_Unit);
      AST_Envs.Destroy (Context.Root_Scope);
      Destroy (Context.Symbols);
      Destroy (Context.Parser);
      Dec_Ref (Context.File_Reader);
      Dec_Ref (Context.Unit_Provider);
      Dec_Ref (Context.Event_Handler);
   end Destroy;

   -------------
   -- Context --
   -------------

   function Context (Unit : Internal_Unit) return Internal_Context is
   begin
      return Unit.Context;
   end Context;

   ----------
   -- Hash --
   ----------

   function Hash (Unit : Internal_Unit) return Hash_Type is
      function H is new Hash_Access (Analysis_Unit_Type, Internal_Unit);
   begin
      return H (Unit);
   end Hash;

   -------------
   -- Reparse --
   -------------

   procedure Reparse (Unit : Internal_Unit; Charset : String) is
      Dummy : constant Internal_Unit := Get_From_File
        (Unit.Context, +Unit.Filename.Full_Name, Charset,
         Reparse => True,
         Rule    => Unit.Rule);
   begin
      null;
   end Reparse;

   -------------
   -- Reparse --
   -------------

   procedure Reparse (Unit : Internal_Unit; Charset : String; Buffer : String)
   is
      Dummy : constant Internal_Unit := Get_From_Buffer
        (Unit.Context, +Unit.Filename.Full_Name, Charset, Buffer, Unit.Rule);
   begin
      null;
   end Reparse;

   -----------------------
   -- Reset_Envs_Caches --
   -----------------------

   procedure Reset_Envs_Caches (Unit : Internal_Unit) is
      procedure Internal (Node : Bare_Lkt_Node);
      --  Reset env caches in ``Node`` and then in its children recursively

      Generic_Unit : constant Generic_Unit_Ptr := Convert_Unit (Unit);

      --------------
      -- Internal --
      --------------

      procedure Internal (Node : Bare_Lkt_Node) is
      begin
         if Node = null then
            return;
         end if;
         --  Make sure to only reset caches of envs belonging to this unit
         if Node.Self_Env.Owner = Generic_Unit then
            Reset_Caches (Node.Self_Env);
         end if;
         for I in 1 .. Children_Count (Node) loop
            Internal (Child (Node, I));
         end loop;
      end Internal;
   begin
      Internal (Unit.Ast_Root);
   end Reset_Envs_Caches;

   --------------------------
   -- Populate_Lexical_Env --
   --------------------------

   procedure Populate_Lexical_Env
     (Unit           : Internal_Unit;
      PLE_Root_Index : Positive
         := 1
   ) is
      Context : constant Internal_Context := Unit.Context;

      Saved_In_Populate_Lexical_Env : constant Boolean :=
        Context.In_Populate_Lexical_Env;

      Has_Errors : Boolean := False;
      --  Whether at least one Property_Error occurred during this PLE pass

   begin
      --  TODO??? Handle env invalidation when reparsing a unit and when a
      --  previous call raised a Property_Error.

      --  If we have already run PLE on this root, there is nothing to do.
      --  Otherwise, keep track of the fact that PLE was requested for it,
      --  possibly extending the vector if needed.

      if Unit.Env_Populated_Roots.Last_Index >= PLE_Root_Index
         and then Unit.Env_Populated_Roots.Get (PLE_Root_Index)
      then
         return;
      end if;
      for Dummy in Unit.Env_Populated_Roots.Last_Index + 1 .. PLE_Root_Index
      loop
         Unit.Env_Populated_Roots.Append (False);
      end loop;
      Unit.Env_Populated_Roots.Set (PLE_Root_Index, True);

      --  Create context for the PLE run: all exit points must call the Cleanup
      --  procedure above first to clean this context.

      Context.In_Populate_Lexical_Env := True;
      if Main_Trace.Active then
         Main_Trace.Trace
           ("Populating lexical envs for"
            & " unit: " & Basename (Unit));
         Main_Trace.Increase_Indent;
      end if;

      --  Fetch the node on which to run PLE: it's the unit root node, or one
      --  of its children if PLE roots are enabled and the unit has a list of
      --  PLE roots. Then run PLE itself.

      declare
         PLE_Root : Bare_Lkt_Node := Unit.Ast_Root;
      begin

         if PLE_Root /= null then
            Has_Errors := Populate_Lexical_Env (PLE_Root);
         end if;
      end;

      --  Restore the context for PLE run (undo what was done above)

      Context.In_Populate_Lexical_Env := Saved_In_Populate_Lexical_Env;
      if Main_Trace.Active then
         Main_Trace.Decrease_Indent;
         Main_Trace.Trace
           ("Finished populating lexical envs for"
            & " unit: " & Basename (Unit));
      end if;

      Reset_Envs_Caches (Unit);

      if Has_Errors and then not Context.Discard_Errors_In_Populate_Lexical_Env
      then
         raise Property_Error with
            "errors occurred in Populate_Lexical_Env";
      end if;
   end Populate_Lexical_Env;

   -----------------------------------
   -- Populate_Lexical_Env_For_Unit --
   -----------------------------------

   procedure Populate_Lexical_Env_For_Unit (Node : Bare_Lkt_Node) is
      Root  : Bare_Lkt_Node;
      Index : Natural;
   begin
      Lookup_PLE_Root (Node, Root, Index);
      if Index = 0 then
         Index := 1;
      end if;
      Populate_Lexical_Env (Node.Unit, Index);
   end Populate_Lexical_Env_For_Unit;

   ------------------
   -- Get_Filename --
   ------------------

   function Get_Filename (Unit : Internal_Unit) return String is
     (+Unit.Filename.Full_Name);

   -----------------
   -- Get_Charset --
   -----------------

   function Get_Charset (Unit : Internal_Unit) return String is
   begin
      return To_String (Unit.Charset);
   end Get_Charset;

   ---------------------
   -- Has_Diagnostics --
   ---------------------

   function Has_Diagnostics (Unit : Internal_Unit) return Boolean is
   begin
      return not Unit.Diagnostics.Is_Empty;
   end Has_Diagnostics;

   -----------------
   -- Diagnostics --
   -----------------

   function Diagnostics (Unit : Internal_Unit) return Diagnostics_Array is
      Result : Diagnostics_Array (1 .. Natural (Unit.Diagnostics.Length));
      I      : Natural := 1;
   begin
      for D of Unit.Diagnostics loop
         Result (I) := D;
         I := I + 1;
      end loop;
      return Result;
   end Diagnostics;

   ---------------------------
   -- Format_GNU_Diagnostic --
   ---------------------------

   function Format_GNU_Diagnostic
     (Unit : Internal_Unit; D : Diagnostic) return String
   is
      Filename : constant String := Basename (Unit);
      Sloc     : constant Source_Location := Start_Sloc (D.Sloc_Range);
      Msg      : constant String :=
         Image
           (Ada.Strings.Wide_Wide_Unbounded.To_Wide_Wide_String (D.Message));
   begin
      return (Filename
              & (if Sloc = No_Source_Location then "" else ":" & Image (Sloc))
              & ": " & Msg);
   end Format_GNU_Diagnostic;

   ----------
   -- Root --
   ----------

   function Root (Unit : Internal_Unit) return Bare_Lkt_Node is
     (Unit.Ast_Root);

   -----------------
   -- First_Token --
   -----------------

   function First_Token (Unit : Internal_Unit) return Token_Reference is
     (Wrap_Token_Reference (Unit.Context,
                            Unit.TDH'Access,
                            First_Token_Or_Trivia (Unit.TDH)));

   ----------------
   -- Last_Token --
   ----------------

   function Last_Token (Unit : Internal_Unit) return Token_Reference is
     (Wrap_Token_Reference (Unit.Context,
                            Unit.TDH'Access,
                            Last_Token_Or_Trivia (Unit.TDH)));

   -----------------
   -- Token_Count --
   -----------------

   function Token_Count (Unit : Internal_Unit) return Natural is
     (Unit.TDH.Tokens.Length);

   ------------------
   -- Trivia_Count --
   ------------------

   function Trivia_Count (Unit : Internal_Unit) return Natural is
     (Unit.TDH.Trivias.Length);

   ----------
   -- Text --
   ----------

   function Text (Unit : Internal_Unit) return Text_Type is
   begin
      return Text (First_Token (Unit), Last_Token (Unit));
   end Text;

   ------------------
   -- Lookup_Token --
   ------------------

   function Lookup_Token
     (Unit : Internal_Unit; Sloc : Source_Location) return Token_Reference
   is
      Result : constant Token_Or_Trivia_Index := Lookup_Token (Unit.TDH, Sloc);
   begin
      return Wrap_Token_Reference (Unit.Context, Unit.TDH'Access, Result);
   end Lookup_Token;

   ---------------------
   -- Lookup_PLE_Root --
   ---------------------

   procedure Lookup_PLE_Root
     (Node  : Bare_Lkt_Node;
      Root  : out Bare_Lkt_Node;
      Index : out Natural)
   is
      Unit : constant Internal_Unit := Node.Unit;
   begin
      --  If this unit does not contain a list of PLE roots, just return the
      --  unit root node.

      if Unit.PLE_Roots_Starting_Token.Is_Empty then
         Root := Unit.Ast_Root;
         Index := 0;
         return;
      end if;

      --  Otherwise, look for the last PLE root whose first token (in
      --  Unit.PLE_Roots_Starting_Token) appears before Node's (T). This vector
      --  is sorted by construction, so we can perform a binary search.

      declare
         T      : constant Token_Index := Node.Token_Start_Index;
         Tokens : Token_Index_Vectors.Vector renames
           Unit.PLE_Roots_Starting_Token;

         First : Positive := Tokens.First_Index;
         Last  : Positive := Tokens.Last_Index;
         I     : Positive;
      begin
         while First < Last loop

            --  Because we look for the "floor" (last element that is <= T), we
            --  need to look at the value in Last when there are only two
            --  elements left to look at. If we did not do that, then we would
            --  go into an infinite loop when Tokens[First] < T.

            I := (if First + 1 = Last
                  then Last
                  else (First + Last) / 2);
            declare
               I_T : constant Token_Index := Tokens.Get (I);
            begin
               if I_T <= T then
                  First := I;
               else
                  Last := I - 1;
               end if;
            end;
         end loop;

         Root := Child (Unit.Ast_Root, First);
         Index := First;
      end;
   end Lookup_PLE_Root;

   --------------
   -- Ple_Root --
   --------------

   function Ple_Root
     (Node : Bare_Lkt_Node) return Bare_Lkt_Node
   is
      Root        : Bare_Lkt_Node;
      Dummy_Index : Natural;
   begin
      if Node = null then
         raise Property_Error with "null node dereference";
      end if;
      Lookup_PLE_Root (Node, Root, Dummy_Index);
      return Root;
   end Ple_Root;

   ----------------------
   -- Dump_Lexical_Env --
   ----------------------

   procedure Dump_Lexical_Env (Unit : Internal_Unit) is
      Node     : constant Bare_Lkt_Node := Unit.Ast_Root;
      Root_Env : constant Lexical_Env := Unit.Context.Root_Scope;
      State    : Dump_Lexical_Env_State := (Root_Env => Root_Env, others => <>);

      function Get_Parent (Env : Lexical_Env) return Lexical_Env
      is (Unwrap (Env).Parent);

      --------------------------
      -- Explore_Parent_Chain --
      --------------------------

      procedure Explore_Parent_Chain (Env : Lexical_Env) is
         P : Lexical_Env;
      begin
         if Env /= Null_Lexical_Env then
            P := Get_Parent (Env);
            Dump_One_Lexical_Env
              (Env, Get_Env_Id (Env, State), Get_Env_Id (P, State));
            Explore_Parent_Chain (P);
         end if;
      end Explore_Parent_Chain;

      --------------
      -- Internal --
      --------------

      procedure Internal (Current : Bare_Lkt_Node) is
         Explore_Parent : Boolean := False;
         Env, Parent    : Lexical_Env;
      begin
         if Current = null then
            return;
         end if;

         --  We only dump environments that we haven't dumped before. This way
         --  we'll only dump environments at the site of their creation, and
         --  not in any subsequent link. We use the Env_Ids map to check which
         --  envs we have already seen or not.
         if not State.Env_Ids.Contains (Current.Self_Env) then
            Env := Current.Self_Env;
            Parent := Get_Parent (Env);
            Explore_Parent := not State.Env_Ids.Contains (Parent);

            Dump_One_Lexical_Env
              (Env, Get_Env_Id (Env, State), Get_Env_Id (Parent, State));

            if Explore_Parent then
               Explore_Parent_Chain (Parent);
            end if;
         end if;

         for Child of Internal_Bare_Lkt_Node_Array'(Children (Current))
         loop
            Internal (Child);
         end loop;
      end Internal;
      --  This procedure implements the main recursive logic of dumping the
      --  environments.
   begin
      Internal (Bare_Lkt_Node (Node));
   end Dump_Lexical_Env;

   --------------
   -- Get_Line --
   --------------

   function Get_Line
     (Unit : Internal_Unit; Line_Number : Positive) return Text_Type
   is
   begin
      return Get_Line (Unit.TDH, Line_Number);
   end Get_Line;

   -----------
   -- Print --
   -----------

   procedure Print (Unit : Internal_Unit; Show_Slocs : Boolean) is
   begin
      if Unit.Ast_Root = null then
         Put_Line ("<empty analysis unit>");
      else
         Print (Unit.Ast_Root, Show_Slocs);
      end if;
   end Print;

   ---------------
   -- PP_Trivia --
   ---------------

   procedure PP_Trivia (Unit : Internal_Unit) is

      procedure Process (Trivia : Token_Index) is
         Data : constant Stored_Token_Data :=
            Unit.TDH.Trivias.Get (Natural (Trivia)).T;
      begin
         Put_Line (Image (Text (Unit.TDH, Data)));
      end Process;

      Last_Token : constant Token_Index :=
         Token_Index (Token_Vectors.Last_Index (Unit.TDH.Tokens) - 1);
      --  Index for the last token in Unit excluding the Termination token
      --  (hence the -1).
   begin
      for Tok of Get_Leading_Trivias (Unit.TDH) loop
         Process (Tok);
      end loop;

      PP_Trivia (Unit.Ast_Root);

      for Tok of Get_Trivias (Unit.TDH, Last_Token) loop
         Process (Tok);
      end loop;
   end PP_Trivia;

   -------------
   -- Destroy --
   -------------

   procedure Destroy (Unit : in out Internal_Unit) is
   begin
      if Unit = No_Analysis_Unit then
         return;
      end if;

      --  Clear the env caches while the unit is still fully alive to make sure
      --  that what is accessed in ``Lexical_Env_Cache_Updated`` is still
      --  valid, as it will be called back by lexical envs that are being
      --  destroyed.
      Reset_Envs_Caches (Unit);

      Unit.PLE_Roots_Starting_Token.Destroy;
      Unit.Env_Populated_Roots.Destroy;

      Unit.Exiled_Entries.Destroy;
      Unit.Foreign_Nodes.Destroy;
      Unit.Exiled_Entries_In_NED.Destroy;
      Unit.Exiled_Envs.Destroy;
      Unit.Named_Envs.Destroy;
      Analysis_Unit_Sets.Destroy (Unit.Referenced_Units);

         Destroy (Unit.Memoization_Map);

      Destroy_Rebindings (Unit.Rebindings'Access);
      Unit.Rebindings.Destroy;

      if Unit.Ast_Root /= null then
         Destroy (Unit.Ast_Root);
      end if;

      Free (Unit.TDH);
      Free (Unit.Ast_Mem_Pool);
      Destroy_Unit_Destroyables (Unit);
      Destroyable_Vectors.Destroy (Unit.Destroyables);
      

      Free (Unit);
   end Destroy;

   -------------------
   -- Is_Token_Node --
   -------------------

   function Is_Token_Node (Node : Bare_Lkt_Node) return Boolean is
   begin
      return Is_Token_Node (Node.Kind);
   end Is_Token_Node;

   ------------------
   -- Is_Synthetic --
   ------------------

   function Is_Synthetic (Node : Bare_Lkt_Node) return Boolean is
   begin
      return Node.Kind in Synthetic_Nodes;
   end Is_Synthetic;

   ------------------------------
   -- Raise_Property_Exception --
   ------------------------------

   procedure Raise_Property_Exception
     (Node    : Bare_Lkt_Node;
      Exc     : Ada.Exceptions.Exception_Id;
      Message : String)
   is
      Sloc_Prefix : constant String :=
        (if Node = null
         then ""
         else Ada.Directories.Simple_Name (Get_Filename (Unit (Node)))
              & ":" & Image (Sloc_Range (Node)) & ": ");
   begin
      Ada.Exceptions.Raise_Exception (Exc, Sloc_Prefix & Message);
   end Raise_Property_Exception;

   ------------------------------
   -- Register_Destroyable_Gen --
   ------------------------------

   procedure Register_Destroyable_Gen
     (Unit : Internal_Unit; Object : T_Access)
   is
      function Convert is new Ada.Unchecked_Conversion
        (System.Address, Destroy_Procedure);
      procedure Destroy_Procedure (Object : in out T_Access) renames Destroy;
   begin
      Register_Destroyable_Helper
        (Unit,
         Object.all'Address,
         Convert (Destroy_Procedure'Address));
   end Register_Destroyable_Gen;

      

   


   ---------
   -- Get --
   ---------

   function Get
     (Node    : Bare_Lkt_Node;
      T       : Bare_Lkt_Node_Array_Access;
      Index   : Integer;
      Or_Null : Boolean := False) return Bare_Lkt_Node
   is
      function Absolute_Get
        (T : Bare_Lkt_Node_Array_Access; Index : Integer)
         return Bare_Lkt_Node
      is
        (T.Items (Index + 1)); --  T.Items is 1-based but Index is 0-based

      function Relative_Get is new Liblktlang_Support.Relative_Get
        (Item_Type     => Bare_Lkt_Node,
         Sequence_Type => Bare_Lkt_Node_Array_Access,
         Length        => Length,
         Get           => Absolute_Get);

      Result : Bare_Lkt_Node;
   begin
      if Relative_Get (T, Index, Result) then
         return Result;
      elsif Or_Null then
         return No_Bare_Lkt_Node;
      else
         Raise_Property_Exception
           (Node,
            Property_Error'Identity,
            "out-of-bounds array access");
      end if;
   end Get;

   ------------
   -- Concat --
   ------------

   function Concat (L, R : Bare_Lkt_Node_Array_Access) return Bare_Lkt_Node_Array_Access is
      Ret : Bare_Lkt_Node_Array_Access := Create_Bare_Lkt_Node_Array (Length (L) + Length (R));
   begin
      Ret.Items := L.Items & R.Items;
      return Ret;
   end Concat;


   -------------
   -- Inc_Ref --
   -------------

   procedure Inc_Ref (T : Bare_Lkt_Node_Array_Access) is
   begin
      if T.Ref_Count >= 0 then
         T.Ref_Count := T.Ref_Count + 1;
      end if;
   end Inc_Ref;

   ------------
   -- Length --
   ------------

   function Length (T : Bare_Lkt_Node_Array_Access) return Natural is (T.N);

   -------------
   -- Dec_Ref --
   -------------

   procedure Dec_Ref (T : in out Bare_Lkt_Node_Array_Access) is
   begin
      if T = null or else T.Ref_Count < 0 then
         return;
      end if;

      if T.Ref_Count = 1 then
         Free (T);
      else
         T.Ref_Count := T.Ref_Count - 1;
         T := null;
      end if;
   end Dec_Ref;

   function Create_Bare_Lkt_Node_Array (Items_Count : Natural) return Bare_Lkt_Node_Array_Access
   is (if Items_Count = 0
       then No_Bare_Lkt_Node_Array_Type
       else new Bare_Lkt_Node_Array_Record'(N => Items_Count, Ref_Count => 1, Items => <>));


   function Create_Bare_Lkt_Node_Array
     (Items : Internal_Bare_Lkt_Node_Array) return Bare_Lkt_Node_Array_Access is
   begin
      if Items'Length = 0 then
         return No_Bare_Lkt_Node_Array_Type;
      end if;

      return new Bare_Lkt_Node_Array_Record'
        (N => Items'Length, Ref_Count => 1, Items => Items);
   end;

   ----------------
   -- Equivalent --
   ----------------

   function Equivalent (L, R : Bare_Lkt_Node_Array_Access) return Boolean is
   begin
      if L.N /= R.N then
         return False;
      end if;

      for I in L.Items'Range loop
         if
               L.Items (I) /= R.Items (I)
         then
            return False;
         end if;
      end loop;

      return True;
   end Equivalent;


      -----------------
      -- Trace_Image --
      -----------------

      function Trace_Image (A : Bare_Lkt_Node_Array_Access) return String is
         Result : Unbounded_String;
      begin
         Append (Result, "[");
         for I in A.Items'Range loop
            if I > A.Items'First then
               Append (Result, ", ");
            end if;
            Append (Result, Trace_Image (A.Items (I)));
         end loop;
         Append (Result, "]");
         return To_String (Result);
      end Trace_Image;




      

   

      package Integer_Vectors is new Liblktlang_Support.Vectors (Integer);

   ---------
   -- Get --
   ---------

   function Get
     (Node    : Bare_Lkt_Node;
      T       : Integer_Array_Access;
      Index   : Integer;
      Or_Null : Boolean := False) return Integer
   is
      function Absolute_Get
        (T : Integer_Array_Access; Index : Integer)
         return Integer
      is
        (T.Items (Index + 1)); --  T.Items is 1-based but Index is 0-based

      function Relative_Get is new Liblktlang_Support.Relative_Get
        (Item_Type     => Integer,
         Sequence_Type => Integer_Array_Access,
         Length        => Length,
         Get           => Absolute_Get);

      Result : Integer;
   begin
      if Relative_Get (T, Index, Result) then
         return Result;
      elsif Or_Null then
         return 0;
      else
         Raise_Property_Exception
           (Node,
            Property_Error'Identity,
            "out-of-bounds array access");
      end if;
   end Get;

   ------------
   -- Concat --
   ------------

   function Concat (L, R : Integer_Array_Access) return Integer_Array_Access is
      Ret : Integer_Array_Access := Create_Integer_Array (Length (L) + Length (R));
   begin
      Ret.Items := L.Items & R.Items;
      return Ret;
   end Concat;


   -------------
   -- Inc_Ref --
   -------------

   procedure Inc_Ref (T : Integer_Array_Access) is
   begin
      if T.Ref_Count >= 0 then
         T.Ref_Count := T.Ref_Count + 1;
      end if;
   end Inc_Ref;

   ------------
   -- Length --
   ------------

   function Length (T : Integer_Array_Access) return Natural is (T.N);

   -------------
   -- Dec_Ref --
   -------------

   procedure Dec_Ref (T : in out Integer_Array_Access) is
   begin
      if T = null or else T.Ref_Count < 0 then
         return;
      end if;

      if T.Ref_Count = 1 then
         Free (T);
      else
         T.Ref_Count := T.Ref_Count - 1;
         T := null;
      end if;
   end Dec_Ref;

   function Create_Integer_Array (Items_Count : Natural) return Integer_Array_Access
   is (if Items_Count = 0
       then No_Integer_Array_Type
       else new Integer_Array_Record'(N => Items_Count, Ref_Count => 1, Items => <>));


   function Create_Integer_Array
     (Items : Internal_Integer_Array) return Integer_Array_Access is
   begin
      if Items'Length = 0 then
         return No_Integer_Array_Type;
      end if;

      return new Integer_Array_Record'
        (N => Items'Length, Ref_Count => 1, Items => Items);
   end;

   ----------------
   -- Equivalent --
   ----------------

   function Equivalent (L, R : Integer_Array_Access) return Boolean is
   begin
      if L.N /= R.N then
         return False;
      end if;

      for I in L.Items'Range loop
         if
               L.Items (I) /= R.Items (I)
         then
            return False;
         end if;
      end loop;

      return True;
   end Equivalent;


      -----------------
      -- Trace_Image --
      -----------------

      function Trace_Image (A : Integer_Array_Access) return String is
         Result : Unbounded_String;
      begin
         Append (Result, "[");
         for I in A.Items'Range loop
            if I > A.Items'First then
               Append (Result, ", ");
            end if;
            Append (Result, Trace_Image (A.Items (I)));
         end loop;
         Append (Result, "]");
         return To_String (Result);
      end Trace_Image;




      

   


   ---------
   -- Get --
   ---------

   function Get
     (Node    : Bare_Lkt_Node;
      T       : Internal_Entity_Array_Access;
      Index   : Integer;
      Or_Null : Boolean := False) return Internal_Entity
   is
      function Absolute_Get
        (T : Internal_Entity_Array_Access; Index : Integer)
         return Internal_Entity
      is
        (T.Items (Index + 1)); --  T.Items is 1-based but Index is 0-based

      function Relative_Get is new Liblktlang_Support.Relative_Get
        (Item_Type     => Internal_Entity,
         Sequence_Type => Internal_Entity_Array_Access,
         Length        => Length,
         Get           => Absolute_Get);

      Result : Internal_Entity;
   begin
      if Relative_Get (T, Index, Result) then
         return Result;
      elsif Or_Null then
         return No_Entity;
      else
         Raise_Property_Exception
           (Node,
            Property_Error'Identity,
            "out-of-bounds array access");
      end if;
   end Get;

   ------------
   -- Concat --
   ------------

   function Concat (L, R : Internal_Entity_Array_Access) return Internal_Entity_Array_Access is
      Ret : Internal_Entity_Array_Access := Create_Internal_Entity_Array (Length (L) + Length (R));
   begin
      Ret.Items := L.Items & R.Items;
      return Ret;
   end Concat;


   -------------
   -- Inc_Ref --
   -------------

   procedure Inc_Ref (T : Internal_Entity_Array_Access) is
   begin
      if T.Ref_Count >= 0 then
         T.Ref_Count := T.Ref_Count + 1;
      end if;
   end Inc_Ref;

   ------------
   -- Length --
   ------------

   function Length (T : Internal_Entity_Array_Access) return Natural is (T.N);

   -------------
   -- Dec_Ref --
   -------------

   procedure Dec_Ref (T : in out Internal_Entity_Array_Access) is
   begin
      if T = null or else T.Ref_Count < 0 then
         return;
      end if;

      if T.Ref_Count = 1 then
         Free (T);
      else
         T.Ref_Count := T.Ref_Count - 1;
         T := null;
      end if;
   end Dec_Ref;

   function Create_Internal_Entity_Array (Items_Count : Natural) return Internal_Entity_Array_Access
   is (if Items_Count = 0
       then No_Internal_Entity_Array_Type
       else new Internal_Entity_Array_Record'(N => Items_Count, Ref_Count => 1, Items => <>));

   function Create_Internal_Entity_Array
     (Items : AST_Envs.Entity_Array) return Internal_Entity_Array_Access
   is (if Items'Length = 0
       then No_Internal_Entity_Array_Type
       else new Internal_Entity_Array_Record'
         (N         => Items'Length,
          Items     => Implementation.Internal_Internal_Entity_Array (Items),
          Ref_Count => 1));

   function Create_Internal_Entity_Array
     (Items : Internal_Internal_Entity_Array) return Internal_Entity_Array_Access is
   begin
      if Items'Length = 0 then
         return No_Internal_Entity_Array_Type;
      end if;

      return new Internal_Entity_Array_Record'
        (N => Items'Length, Ref_Count => 1, Items => Items);
   end;

   ----------------
   -- Equivalent --
   ----------------

   function Equivalent (L, R : Internal_Entity_Array_Access) return Boolean is
   begin
      if L.N /= R.N then
         return False;
      end if;

      for I in L.Items'Range loop
         if
               L.Items (I) /= R.Items (I)
         then
            return False;
         end if;
      end loop;

      return True;
   end Equivalent;


      -----------------
      -- Trace_Image --
      -----------------

      function Trace_Image (A : Internal_Entity_Array_Access) return String is
         Result : Unbounded_String;
      begin
         Append (Result, "[");
         for I in A.Items'Range loop
            if I > A.Items'First then
               Append (Result, ", ");
            end if;
            Append (Result, Trace_Image (A.Items (I)));
         end loop;
         Append (Result, "]");
         return To_String (Result);
      end Trace_Image;




      

   

      package Internal_Entity_Enum_Class_Alt_Decl_Vectors is new Liblktlang_Support.Vectors (Internal_Entity_Enum_Class_Alt_Decl);

   ---------
   -- Get --
   ---------

   function Get
     (Node    : Bare_Lkt_Node;
      T       : Internal_Entity_Enum_Class_Alt_Decl_Array_Access;
      Index   : Integer;
      Or_Null : Boolean := False) return Internal_Entity_Enum_Class_Alt_Decl
   is
      function Absolute_Get
        (T : Internal_Entity_Enum_Class_Alt_Decl_Array_Access; Index : Integer)
         return Internal_Entity_Enum_Class_Alt_Decl
      is
        (T.Items (Index + 1)); --  T.Items is 1-based but Index is 0-based

      function Relative_Get is new Liblktlang_Support.Relative_Get
        (Item_Type     => Internal_Entity_Enum_Class_Alt_Decl,
         Sequence_Type => Internal_Entity_Enum_Class_Alt_Decl_Array_Access,
         Length        => Length,
         Get           => Absolute_Get);

      Result : Internal_Entity_Enum_Class_Alt_Decl;
   begin
      if Relative_Get (T, Index, Result) then
         return Result;
      elsif Or_Null then
         return No_Entity_Enum_Class_Alt_Decl;
      else
         Raise_Property_Exception
           (Node,
            Property_Error'Identity,
            "out-of-bounds array access");
      end if;
   end Get;

   ------------
   -- Concat --
   ------------

   function Concat (L, R : Internal_Entity_Enum_Class_Alt_Decl_Array_Access) return Internal_Entity_Enum_Class_Alt_Decl_Array_Access is
      Ret : Internal_Entity_Enum_Class_Alt_Decl_Array_Access := Create_Internal_Entity_Enum_Class_Alt_Decl_Array (Length (L) + Length (R));
   begin
      Ret.Items := L.Items & R.Items;
      return Ret;
   end Concat;


   -------------
   -- Inc_Ref --
   -------------

   procedure Inc_Ref (T : Internal_Entity_Enum_Class_Alt_Decl_Array_Access) is
   begin
      if T.Ref_Count >= 0 then
         T.Ref_Count := T.Ref_Count + 1;
      end if;
   end Inc_Ref;

   ------------
   -- Length --
   ------------

   function Length (T : Internal_Entity_Enum_Class_Alt_Decl_Array_Access) return Natural is (T.N);

   -------------
   -- Dec_Ref --
   -------------

   procedure Dec_Ref (T : in out Internal_Entity_Enum_Class_Alt_Decl_Array_Access) is
   begin
      if T = null or else T.Ref_Count < 0 then
         return;
      end if;

      if T.Ref_Count = 1 then
         Free (T);
      else
         T.Ref_Count := T.Ref_Count - 1;
         T := null;
      end if;
   end Dec_Ref;

   function Create_Internal_Entity_Enum_Class_Alt_Decl_Array (Items_Count : Natural) return Internal_Entity_Enum_Class_Alt_Decl_Array_Access
   is (if Items_Count = 0
       then No_Internal_Entity_Enum_Class_Alt_Decl_Array_Type
       else new Internal_Entity_Enum_Class_Alt_Decl_Array_Record'(N => Items_Count, Ref_Count => 1, Items => <>));


   function Create_Internal_Entity_Enum_Class_Alt_Decl_Array
     (Items : Internal_Internal_Entity_Enum_Class_Alt_Decl_Array) return Internal_Entity_Enum_Class_Alt_Decl_Array_Access is
   begin
      if Items'Length = 0 then
         return No_Internal_Entity_Enum_Class_Alt_Decl_Array_Type;
      end if;

      return new Internal_Entity_Enum_Class_Alt_Decl_Array_Record'
        (N => Items'Length, Ref_Count => 1, Items => Items);
   end;

   ----------------
   -- Equivalent --
   ----------------

   function Equivalent (L, R : Internal_Entity_Enum_Class_Alt_Decl_Array_Access) return Boolean is
   begin
      if L.N /= R.N then
         return False;
      end if;

      for I in L.Items'Range loop
         if
               L.Items (I) /= R.Items (I)
         then
            return False;
         end if;
      end loop;

      return True;
   end Equivalent;


      -----------------
      -- Trace_Image --
      -----------------

      function Trace_Image (A : Internal_Entity_Enum_Class_Alt_Decl_Array_Access) return String is
         Result : Unbounded_String;
      begin
         Append (Result, "[");
         for I in A.Items'Range loop
            if I > A.Items'First then
               Append (Result, ", ");
            end if;
            Append (Result, Trace_Image (A.Items (I)));
         end loop;
         Append (Result, "]");
         return To_String (Result);
      end Trace_Image;




      

   

      package Internal_Entity_Expr_Vectors is new Liblktlang_Support.Vectors (Internal_Entity_Expr);

   ---------
   -- Get --
   ---------

   function Get
     (Node    : Bare_Lkt_Node;
      T       : Internal_Entity_Expr_Array_Access;
      Index   : Integer;
      Or_Null : Boolean := False) return Internal_Entity_Expr
   is
      function Absolute_Get
        (T : Internal_Entity_Expr_Array_Access; Index : Integer)
         return Internal_Entity_Expr
      is
        (T.Items (Index + 1)); --  T.Items is 1-based but Index is 0-based

      function Relative_Get is new Liblktlang_Support.Relative_Get
        (Item_Type     => Internal_Entity_Expr,
         Sequence_Type => Internal_Entity_Expr_Array_Access,
         Length        => Length,
         Get           => Absolute_Get);

      Result : Internal_Entity_Expr;
   begin
      if Relative_Get (T, Index, Result) then
         return Result;
      elsif Or_Null then
         return No_Entity_Expr;
      else
         Raise_Property_Exception
           (Node,
            Property_Error'Identity,
            "out-of-bounds array access");
      end if;
   end Get;

   ------------
   -- Concat --
   ------------

   function Concat (L, R : Internal_Entity_Expr_Array_Access) return Internal_Entity_Expr_Array_Access is
      Ret : Internal_Entity_Expr_Array_Access := Create_Internal_Entity_Expr_Array (Length (L) + Length (R));
   begin
      Ret.Items := L.Items & R.Items;
      return Ret;
   end Concat;


   -------------
   -- Inc_Ref --
   -------------

   procedure Inc_Ref (T : Internal_Entity_Expr_Array_Access) is
   begin
      if T.Ref_Count >= 0 then
         T.Ref_Count := T.Ref_Count + 1;
      end if;
   end Inc_Ref;

   ------------
   -- Length --
   ------------

   function Length (T : Internal_Entity_Expr_Array_Access) return Natural is (T.N);

   -------------
   -- Dec_Ref --
   -------------

   procedure Dec_Ref (T : in out Internal_Entity_Expr_Array_Access) is
   begin
      if T = null or else T.Ref_Count < 0 then
         return;
      end if;

      if T.Ref_Count = 1 then
         Free (T);
      else
         T.Ref_Count := T.Ref_Count - 1;
         T := null;
      end if;
   end Dec_Ref;

   function Create_Internal_Entity_Expr_Array (Items_Count : Natural) return Internal_Entity_Expr_Array_Access
   is (if Items_Count = 0
       then No_Internal_Entity_Expr_Array_Type
       else new Internal_Entity_Expr_Array_Record'(N => Items_Count, Ref_Count => 1, Items => <>));


   function Create_Internal_Entity_Expr_Array
     (Items : Internal_Internal_Entity_Expr_Array) return Internal_Entity_Expr_Array_Access is
   begin
      if Items'Length = 0 then
         return No_Internal_Entity_Expr_Array_Type;
      end if;

      return new Internal_Entity_Expr_Array_Record'
        (N => Items'Length, Ref_Count => 1, Items => Items);
   end;

   ----------------
   -- Equivalent --
   ----------------

   function Equivalent (L, R : Internal_Entity_Expr_Array_Access) return Boolean is
   begin
      if L.N /= R.N then
         return False;
      end if;

      for I in L.Items'Range loop
         if
               L.Items (I) /= R.Items (I)
         then
            return False;
         end if;
      end loop;

      return True;
   end Equivalent;


      -----------------
      -- Trace_Image --
      -----------------

      function Trace_Image (A : Internal_Entity_Expr_Array_Access) return String is
         Result : Unbounded_String;
      begin
         Append (Result, "[");
         for I in A.Items'Range loop
            if I > A.Items'First then
               Append (Result, ", ");
            end if;
            Append (Result, Trace_Image (A.Items (I)));
         end loop;
         Append (Result, "]");
         return To_String (Result);
      end Trace_Image;




      

   

      package Internal_Entity_Field_Decl_Vectors is new Liblktlang_Support.Vectors (Internal_Entity_Field_Decl);

   ---------
   -- Get --
   ---------

   function Get
     (Node    : Bare_Lkt_Node;
      T       : Internal_Entity_Field_Decl_Array_Access;
      Index   : Integer;
      Or_Null : Boolean := False) return Internal_Entity_Field_Decl
   is
      function Absolute_Get
        (T : Internal_Entity_Field_Decl_Array_Access; Index : Integer)
         return Internal_Entity_Field_Decl
      is
        (T.Items (Index + 1)); --  T.Items is 1-based but Index is 0-based

      function Relative_Get is new Liblktlang_Support.Relative_Get
        (Item_Type     => Internal_Entity_Field_Decl,
         Sequence_Type => Internal_Entity_Field_Decl_Array_Access,
         Length        => Length,
         Get           => Absolute_Get);

      Result : Internal_Entity_Field_Decl;
   begin
      if Relative_Get (T, Index, Result) then
         return Result;
      elsif Or_Null then
         return No_Entity_Field_Decl;
      else
         Raise_Property_Exception
           (Node,
            Property_Error'Identity,
            "out-of-bounds array access");
      end if;
   end Get;

   ------------
   -- Concat --
   ------------

   function Concat (L, R : Internal_Entity_Field_Decl_Array_Access) return Internal_Entity_Field_Decl_Array_Access is
      Ret : Internal_Entity_Field_Decl_Array_Access := Create_Internal_Entity_Field_Decl_Array (Length (L) + Length (R));
   begin
      Ret.Items := L.Items & R.Items;
      return Ret;
   end Concat;


   -------------
   -- Inc_Ref --
   -------------

   procedure Inc_Ref (T : Internal_Entity_Field_Decl_Array_Access) is
   begin
      if T.Ref_Count >= 0 then
         T.Ref_Count := T.Ref_Count + 1;
      end if;
   end Inc_Ref;

   ------------
   -- Length --
   ------------

   function Length (T : Internal_Entity_Field_Decl_Array_Access) return Natural is (T.N);

   -------------
   -- Dec_Ref --
   -------------

   procedure Dec_Ref (T : in out Internal_Entity_Field_Decl_Array_Access) is
   begin
      if T = null or else T.Ref_Count < 0 then
         return;
      end if;

      if T.Ref_Count = 1 then
         Free (T);
      else
         T.Ref_Count := T.Ref_Count - 1;
         T := null;
      end if;
   end Dec_Ref;

   function Create_Internal_Entity_Field_Decl_Array (Items_Count : Natural) return Internal_Entity_Field_Decl_Array_Access
   is (if Items_Count = 0
       then No_Internal_Entity_Field_Decl_Array_Type
       else new Internal_Entity_Field_Decl_Array_Record'(N => Items_Count, Ref_Count => 1, Items => <>));


   function Create_Internal_Entity_Field_Decl_Array
     (Items : Internal_Internal_Entity_Field_Decl_Array) return Internal_Entity_Field_Decl_Array_Access is
   begin
      if Items'Length = 0 then
         return No_Internal_Entity_Field_Decl_Array_Type;
      end if;

      return new Internal_Entity_Field_Decl_Array_Record'
        (N => Items'Length, Ref_Count => 1, Items => Items);
   end;

   ----------------
   -- Equivalent --
   ----------------

   function Equivalent (L, R : Internal_Entity_Field_Decl_Array_Access) return Boolean is
   begin
      if L.N /= R.N then
         return False;
      end if;

      for I in L.Items'Range loop
         if
               L.Items (I) /= R.Items (I)
         then
            return False;
         end if;
      end loop;

      return True;
   end Equivalent;


      -----------------
      -- Trace_Image --
      -----------------

      function Trace_Image (A : Internal_Entity_Field_Decl_Array_Access) return String is
         Result : Unbounded_String;
      begin
         Append (Result, "[");
         for I in A.Items'Range loop
            if I > A.Items'First then
               Append (Result, ", ");
            end if;
            Append (Result, Trace_Image (A.Items (I)));
         end loop;
         Append (Result, "]");
         return To_String (Result);
      end Trace_Image;




      

   

      package Internal_Entity_Full_Decl_Vectors is new Liblktlang_Support.Vectors (Internal_Entity_Full_Decl);

   ---------
   -- Get --
   ---------

   function Get
     (Node    : Bare_Lkt_Node;
      T       : Internal_Entity_Full_Decl_Array_Access;
      Index   : Integer;
      Or_Null : Boolean := False) return Internal_Entity_Full_Decl
   is
      function Absolute_Get
        (T : Internal_Entity_Full_Decl_Array_Access; Index : Integer)
         return Internal_Entity_Full_Decl
      is
        (T.Items (Index + 1)); --  T.Items is 1-based but Index is 0-based

      function Relative_Get is new Liblktlang_Support.Relative_Get
        (Item_Type     => Internal_Entity_Full_Decl,
         Sequence_Type => Internal_Entity_Full_Decl_Array_Access,
         Length        => Length,
         Get           => Absolute_Get);

      Result : Internal_Entity_Full_Decl;
   begin
      if Relative_Get (T, Index, Result) then
         return Result;
      elsif Or_Null then
         return No_Entity_Full_Decl;
      else
         Raise_Property_Exception
           (Node,
            Property_Error'Identity,
            "out-of-bounds array access");
      end if;
   end Get;

   ------------
   -- Concat --
   ------------

   function Concat (L, R : Internal_Entity_Full_Decl_Array_Access) return Internal_Entity_Full_Decl_Array_Access is
      Ret : Internal_Entity_Full_Decl_Array_Access := Create_Internal_Entity_Full_Decl_Array (Length (L) + Length (R));
   begin
      Ret.Items := L.Items & R.Items;
      return Ret;
   end Concat;


   -------------
   -- Inc_Ref --
   -------------

   procedure Inc_Ref (T : Internal_Entity_Full_Decl_Array_Access) is
   begin
      if T.Ref_Count >= 0 then
         T.Ref_Count := T.Ref_Count + 1;
      end if;
   end Inc_Ref;

   ------------
   -- Length --
   ------------

   function Length (T : Internal_Entity_Full_Decl_Array_Access) return Natural is (T.N);

   -------------
   -- Dec_Ref --
   -------------

   procedure Dec_Ref (T : in out Internal_Entity_Full_Decl_Array_Access) is
   begin
      if T = null or else T.Ref_Count < 0 then
         return;
      end if;

      if T.Ref_Count = 1 then
         Free (T);
      else
         T.Ref_Count := T.Ref_Count - 1;
         T := null;
      end if;
   end Dec_Ref;

   function Create_Internal_Entity_Full_Decl_Array (Items_Count : Natural) return Internal_Entity_Full_Decl_Array_Access
   is (if Items_Count = 0
       then No_Internal_Entity_Full_Decl_Array_Type
       else new Internal_Entity_Full_Decl_Array_Record'(N => Items_Count, Ref_Count => 1, Items => <>));


   function Create_Internal_Entity_Full_Decl_Array
     (Items : Internal_Internal_Entity_Full_Decl_Array) return Internal_Entity_Full_Decl_Array_Access is
   begin
      if Items'Length = 0 then
         return No_Internal_Entity_Full_Decl_Array_Type;
      end if;

      return new Internal_Entity_Full_Decl_Array_Record'
        (N => Items'Length, Ref_Count => 1, Items => Items);
   end;

   ----------------
   -- Equivalent --
   ----------------

   function Equivalent (L, R : Internal_Entity_Full_Decl_Array_Access) return Boolean is
   begin
      if L.N /= R.N then
         return False;
      end if;

      for I in L.Items'Range loop
         if
               L.Items (I) /= R.Items (I)
         then
            return False;
         end if;
      end loop;

      return True;
   end Equivalent;


      -----------------
      -- Trace_Image --
      -----------------

      function Trace_Image (A : Internal_Entity_Full_Decl_Array_Access) return String is
         Result : Unbounded_String;
      begin
         Append (Result, "[");
         for I in A.Items'Range loop
            if I > A.Items'First then
               Append (Result, ", ");
            end if;
            Append (Result, Trace_Image (A.Items (I)));
         end loop;
         Append (Result, "]");
         return To_String (Result);
      end Trace_Image;




      

   

      package Internal_Entity_Generic_Formal_Type_Decl_Vectors is new Liblktlang_Support.Vectors (Internal_Entity_Generic_Formal_Type_Decl);

   ---------
   -- Get --
   ---------

   function Get
     (Node    : Bare_Lkt_Node;
      T       : Internal_Entity_Generic_Formal_Type_Decl_Array_Access;
      Index   : Integer;
      Or_Null : Boolean := False) return Internal_Entity_Generic_Formal_Type_Decl
   is
      function Absolute_Get
        (T : Internal_Entity_Generic_Formal_Type_Decl_Array_Access; Index : Integer)
         return Internal_Entity_Generic_Formal_Type_Decl
      is
        (T.Items (Index + 1)); --  T.Items is 1-based but Index is 0-based

      function Relative_Get is new Liblktlang_Support.Relative_Get
        (Item_Type     => Internal_Entity_Generic_Formal_Type_Decl,
         Sequence_Type => Internal_Entity_Generic_Formal_Type_Decl_Array_Access,
         Length        => Length,
         Get           => Absolute_Get);

      Result : Internal_Entity_Generic_Formal_Type_Decl;
   begin
      if Relative_Get (T, Index, Result) then
         return Result;
      elsif Or_Null then
         return No_Entity_Generic_Formal_Type_Decl;
      else
         Raise_Property_Exception
           (Node,
            Property_Error'Identity,
            "out-of-bounds array access");
      end if;
   end Get;

   ------------
   -- Concat --
   ------------

   function Concat (L, R : Internal_Entity_Generic_Formal_Type_Decl_Array_Access) return Internal_Entity_Generic_Formal_Type_Decl_Array_Access is
      Ret : Internal_Entity_Generic_Formal_Type_Decl_Array_Access := Create_Internal_Entity_Generic_Formal_Type_Decl_Array (Length (L) + Length (R));
   begin
      Ret.Items := L.Items & R.Items;
      return Ret;
   end Concat;


   -------------
   -- Inc_Ref --
   -------------

   procedure Inc_Ref (T : Internal_Entity_Generic_Formal_Type_Decl_Array_Access) is
   begin
      if T.Ref_Count >= 0 then
         T.Ref_Count := T.Ref_Count + 1;
      end if;
   end Inc_Ref;

   ------------
   -- Length --
   ------------

   function Length (T : Internal_Entity_Generic_Formal_Type_Decl_Array_Access) return Natural is (T.N);

   -------------
   -- Dec_Ref --
   -------------

   procedure Dec_Ref (T : in out Internal_Entity_Generic_Formal_Type_Decl_Array_Access) is
   begin
      if T = null or else T.Ref_Count < 0 then
         return;
      end if;

      if T.Ref_Count = 1 then
         Free (T);
      else
         T.Ref_Count := T.Ref_Count - 1;
         T := null;
      end if;
   end Dec_Ref;

   function Create_Internal_Entity_Generic_Formal_Type_Decl_Array (Items_Count : Natural) return Internal_Entity_Generic_Formal_Type_Decl_Array_Access
   is (if Items_Count = 0
       then No_Internal_Entity_Generic_Formal_Type_Decl_Array_Type
       else new Internal_Entity_Generic_Formal_Type_Decl_Array_Record'(N => Items_Count, Ref_Count => 1, Items => <>));


   function Create_Internal_Entity_Generic_Formal_Type_Decl_Array
     (Items : Internal_Internal_Entity_Generic_Formal_Type_Decl_Array) return Internal_Entity_Generic_Formal_Type_Decl_Array_Access is
   begin
      if Items'Length = 0 then
         return No_Internal_Entity_Generic_Formal_Type_Decl_Array_Type;
      end if;

      return new Internal_Entity_Generic_Formal_Type_Decl_Array_Record'
        (N => Items'Length, Ref_Count => 1, Items => Items);
   end;

   ----------------
   -- Equivalent --
   ----------------

   function Equivalent (L, R : Internal_Entity_Generic_Formal_Type_Decl_Array_Access) return Boolean is
   begin
      if L.N /= R.N then
         return False;
      end if;

      for I in L.Items'Range loop
         if
               L.Items (I) /= R.Items (I)
         then
            return False;
         end if;
      end loop;

      return True;
   end Equivalent;


      -----------------
      -- Trace_Image --
      -----------------

      function Trace_Image (A : Internal_Entity_Generic_Formal_Type_Decl_Array_Access) return String is
         Result : Unbounded_String;
      begin
         Append (Result, "[");
         for I in A.Items'Range loop
            if I > A.Items'First then
               Append (Result, ", ");
            end if;
            Append (Result, Trace_Image (A.Items (I)));
         end loop;
         Append (Result, "]");
         return To_String (Result);
      end Trace_Image;




      

   

      package Internal_Entity_Param_Vectors is new Liblktlang_Support.Vectors (Internal_Entity_Param);

   ---------
   -- Get --
   ---------

   function Get
     (Node    : Bare_Lkt_Node;
      T       : Internal_Entity_Param_Array_Access;
      Index   : Integer;
      Or_Null : Boolean := False) return Internal_Entity_Param
   is
      function Absolute_Get
        (T : Internal_Entity_Param_Array_Access; Index : Integer)
         return Internal_Entity_Param
      is
        (T.Items (Index + 1)); --  T.Items is 1-based but Index is 0-based

      function Relative_Get is new Liblktlang_Support.Relative_Get
        (Item_Type     => Internal_Entity_Param,
         Sequence_Type => Internal_Entity_Param_Array_Access,
         Length        => Length,
         Get           => Absolute_Get);

      Result : Internal_Entity_Param;
   begin
      if Relative_Get (T, Index, Result) then
         return Result;
      elsif Or_Null then
         return No_Entity_Param;
      else
         Raise_Property_Exception
           (Node,
            Property_Error'Identity,
            "out-of-bounds array access");
      end if;
   end Get;

   ------------
   -- Concat --
   ------------

   function Concat (L, R : Internal_Entity_Param_Array_Access) return Internal_Entity_Param_Array_Access is
      Ret : Internal_Entity_Param_Array_Access := Create_Internal_Entity_Param_Array (Length (L) + Length (R));
   begin
      Ret.Items := L.Items & R.Items;
      return Ret;
   end Concat;


   -------------
   -- Inc_Ref --
   -------------

   procedure Inc_Ref (T : Internal_Entity_Param_Array_Access) is
   begin
      if T.Ref_Count >= 0 then
         T.Ref_Count := T.Ref_Count + 1;
      end if;
   end Inc_Ref;

   ------------
   -- Length --
   ------------

   function Length (T : Internal_Entity_Param_Array_Access) return Natural is (T.N);

   -------------
   -- Dec_Ref --
   -------------

   procedure Dec_Ref (T : in out Internal_Entity_Param_Array_Access) is
   begin
      if T = null or else T.Ref_Count < 0 then
         return;
      end if;

      if T.Ref_Count = 1 then
         Free (T);
      else
         T.Ref_Count := T.Ref_Count - 1;
         T := null;
      end if;
   end Dec_Ref;

   function Create_Internal_Entity_Param_Array (Items_Count : Natural) return Internal_Entity_Param_Array_Access
   is (if Items_Count = 0
       then No_Internal_Entity_Param_Array_Type
       else new Internal_Entity_Param_Array_Record'(N => Items_Count, Ref_Count => 1, Items => <>));


   function Create_Internal_Entity_Param_Array
     (Items : Internal_Internal_Entity_Param_Array) return Internal_Entity_Param_Array_Access is
   begin
      if Items'Length = 0 then
         return No_Internal_Entity_Param_Array_Type;
      end if;

      return new Internal_Entity_Param_Array_Record'
        (N => Items'Length, Ref_Count => 1, Items => Items);
   end;

   ----------------
   -- Equivalent --
   ----------------

   function Equivalent (L, R : Internal_Entity_Param_Array_Access) return Boolean is
   begin
      if L.N /= R.N then
         return False;
      end if;

      for I in L.Items'Range loop
         if
               L.Items (I) /= R.Items (I)
         then
            return False;
         end if;
      end loop;

      return True;
   end Equivalent;


      -----------------
      -- Trace_Image --
      -----------------

      function Trace_Image (A : Internal_Entity_Param_Array_Access) return String is
         Result : Unbounded_String;
      begin
         Append (Result, "[");
         for I in A.Items'Range loop
            if I > A.Items'First then
               Append (Result, ", ");
            end if;
            Append (Result, Trace_Image (A.Items (I)));
         end loop;
         Append (Result, "]");
         return To_String (Result);
      end Trace_Image;




      

   

      package Internal_Entity_Type_Decl_Vectors is new Liblktlang_Support.Vectors (Internal_Entity_Type_Decl);

   ---------
   -- Get --
   ---------

   function Get
     (Node    : Bare_Lkt_Node;
      T       : Internal_Entity_Type_Decl_Array_Access;
      Index   : Integer;
      Or_Null : Boolean := False) return Internal_Entity_Type_Decl
   is
      function Absolute_Get
        (T : Internal_Entity_Type_Decl_Array_Access; Index : Integer)
         return Internal_Entity_Type_Decl
      is
        (T.Items (Index + 1)); --  T.Items is 1-based but Index is 0-based

      function Relative_Get is new Liblktlang_Support.Relative_Get
        (Item_Type     => Internal_Entity_Type_Decl,
         Sequence_Type => Internal_Entity_Type_Decl_Array_Access,
         Length        => Length,
         Get           => Absolute_Get);

      Result : Internal_Entity_Type_Decl;
   begin
      if Relative_Get (T, Index, Result) then
         return Result;
      elsif Or_Null then
         return No_Entity_Type_Decl;
      else
         Raise_Property_Exception
           (Node,
            Property_Error'Identity,
            "out-of-bounds array access");
      end if;
   end Get;

   ------------
   -- Concat --
   ------------

   function Concat (L, R : Internal_Entity_Type_Decl_Array_Access) return Internal_Entity_Type_Decl_Array_Access is
      Ret : Internal_Entity_Type_Decl_Array_Access := Create_Internal_Entity_Type_Decl_Array (Length (L) + Length (R));
   begin
      Ret.Items := L.Items & R.Items;
      return Ret;
   end Concat;


   -------------
   -- Inc_Ref --
   -------------

   procedure Inc_Ref (T : Internal_Entity_Type_Decl_Array_Access) is
   begin
      if T.Ref_Count >= 0 then
         T.Ref_Count := T.Ref_Count + 1;
      end if;
   end Inc_Ref;

   ------------
   -- Length --
   ------------

   function Length (T : Internal_Entity_Type_Decl_Array_Access) return Natural is (T.N);

   -------------
   -- Dec_Ref --
   -------------

   procedure Dec_Ref (T : in out Internal_Entity_Type_Decl_Array_Access) is
   begin
      if T = null or else T.Ref_Count < 0 then
         return;
      end if;

      if T.Ref_Count = 1 then
         Free (T);
      else
         T.Ref_Count := T.Ref_Count - 1;
         T := null;
      end if;
   end Dec_Ref;

   function Create_Internal_Entity_Type_Decl_Array (Items_Count : Natural) return Internal_Entity_Type_Decl_Array_Access
   is (if Items_Count = 0
       then No_Internal_Entity_Type_Decl_Array_Type
       else new Internal_Entity_Type_Decl_Array_Record'(N => Items_Count, Ref_Count => 1, Items => <>));


   function Create_Internal_Entity_Type_Decl_Array
     (Items : Internal_Internal_Entity_Type_Decl_Array) return Internal_Entity_Type_Decl_Array_Access is
   begin
      if Items'Length = 0 then
         return No_Internal_Entity_Type_Decl_Array_Type;
      end if;

      return new Internal_Entity_Type_Decl_Array_Record'
        (N => Items'Length, Ref_Count => 1, Items => Items);
   end;

   ----------------
   -- Equivalent --
   ----------------

   function Equivalent (L, R : Internal_Entity_Type_Decl_Array_Access) return Boolean is
   begin
      if L.N /= R.N then
         return False;
      end if;

      for I in L.Items'Range loop
         if
               L.Items (I) /= R.Items (I)
         then
            return False;
         end if;
      end loop;

      return True;
   end Equivalent;


      -----------------
      -- Trace_Image --
      -----------------

      function Trace_Image (A : Internal_Entity_Type_Decl_Array_Access) return String is
         Result : Unbounded_String;
      begin
         Append (Result, "[");
         for I in A.Items'Range loop
            if I > A.Items'First then
               Append (Result, ", ");
            end if;
            Append (Result, Trace_Image (A.Items (I)));
         end loop;
         Append (Result, "]");
         return To_String (Result);
      end Trace_Image;


      ----------
      -- Hash --
      ----------

      function Hash (R : Internal_Entity_Type_Decl_Array_Access) return Hash_Type is
         Result : Hash_Type := Initial_Hash;
      begin
         for I in R.Items'Range loop
            Result := Combine (Result, Hash (R.Items (I)));
         end loop;
         return Result;
      end Hash;


      

   

      package Internal_Env_Assoc_Vectors is new Liblktlang_Support.Vectors (Internal_Env_Assoc);

   ---------
   -- Get --
   ---------

   function Get
     (Node    : Bare_Lkt_Node;
      T       : Internal_Env_Assoc_Array_Access;
      Index   : Integer;
      Or_Null : Boolean := False) return Internal_Env_Assoc
   is
      function Absolute_Get
        (T : Internal_Env_Assoc_Array_Access; Index : Integer)
         return Internal_Env_Assoc
      is
        (T.Items (Index + 1)); --  T.Items is 1-based but Index is 0-based

      function Relative_Get is new Liblktlang_Support.Relative_Get
        (Item_Type     => Internal_Env_Assoc,
         Sequence_Type => Internal_Env_Assoc_Array_Access,
         Length        => Length,
         Get           => Absolute_Get);

      Result : Internal_Env_Assoc;
   begin
      if Relative_Get (T, Index, Result) then
            Inc_Ref (Result);
         return Result;
      elsif Or_Null then
         return No_Env_Assoc;
      else
         Raise_Property_Exception
           (Node,
            Property_Error'Identity,
            "out-of-bounds array access");
      end if;
   end Get;

   ------------
   -- Concat --
   ------------

   function Concat (L, R : Internal_Env_Assoc_Array_Access) return Internal_Env_Assoc_Array_Access is
      Ret : Internal_Env_Assoc_Array_Access := Create_Internal_Env_Assoc_Array (Length (L) + Length (R));
   begin
      Ret.Items := L.Items & R.Items;
         for Item of Ret.Items loop
            Inc_Ref (Item);
         end loop;
      return Ret;
   end Concat;


   -------------
   -- Inc_Ref --
   -------------

   procedure Inc_Ref (T : Internal_Env_Assoc_Array_Access) is
   begin
      if T.Ref_Count >= 0 then
         T.Ref_Count := T.Ref_Count + 1;
      end if;
   end Inc_Ref;

   ------------
   -- Length --
   ------------

   function Length (T : Internal_Env_Assoc_Array_Access) return Natural is (T.N);

   -------------
   -- Dec_Ref --
   -------------

   procedure Dec_Ref (T : in out Internal_Env_Assoc_Array_Access) is
   begin
      if T = null or else T.Ref_Count < 0 then
         return;
      end if;

      if T.Ref_Count = 1 then
            for Item of T.Items loop
               Dec_Ref (Item);
            end loop;
         Free (T);
      else
         T.Ref_Count := T.Ref_Count - 1;
         T := null;
      end if;
   end Dec_Ref;

   function Create_Internal_Env_Assoc_Array (Items_Count : Natural) return Internal_Env_Assoc_Array_Access
   is (if Items_Count = 0
       then No_Internal_Env_Assoc_Array_Type
       else new Internal_Env_Assoc_Array_Record'(N => Items_Count, Ref_Count => 1, Items => <>));


   function Create_Internal_Env_Assoc_Array
     (Items : Internal_Internal_Env_Assoc_Array) return Internal_Env_Assoc_Array_Access is
   begin
      if Items'Length = 0 then
         return No_Internal_Env_Assoc_Array_Type;
      end if;

         for El of Items loop
            Inc_Ref (El);
         end loop;
      return new Internal_Env_Assoc_Array_Record'
        (N => Items'Length, Ref_Count => 1, Items => Items);
   end;

   ----------------
   -- Equivalent --
   ----------------

   function Equivalent (L, R : Internal_Env_Assoc_Array_Access) return Boolean is
   begin
      if L.N /= R.N then
         return False;
      end if;

      for I in L.Items'Range loop
         if
               not Equivalent (L.Items (I), R.Items (I))
         then
            return False;
         end if;
      end loop;

      return True;
   end Equivalent;


      -----------------
      -- Trace_Image --
      -----------------

      function Trace_Image (A : Internal_Env_Assoc_Array_Access) return String is
         Result : Unbounded_String;
      begin
         Append (Result, "[");
         for I in A.Items'Range loop
            if I > A.Items'First then
               Append (Result, ", ");
            end if;
            Append (Result, Trace_Image (A.Items (I)));
         end loop;
         Append (Result, "]");
         return To_String (Result);
      end Trace_Image;




      

   

      package Internal_Formal_Param_Vectors is new Liblktlang_Support.Vectors (Internal_Formal_Param);

   ---------
   -- Get --
   ---------

   function Get
     (Node    : Bare_Lkt_Node;
      T       : Internal_Formal_Param_Array_Access;
      Index   : Integer;
      Or_Null : Boolean := False) return Internal_Formal_Param
   is
      function Absolute_Get
        (T : Internal_Formal_Param_Array_Access; Index : Integer)
         return Internal_Formal_Param
      is
        (T.Items (Index + 1)); --  T.Items is 1-based but Index is 0-based

      function Relative_Get is new Liblktlang_Support.Relative_Get
        (Item_Type     => Internal_Formal_Param,
         Sequence_Type => Internal_Formal_Param_Array_Access,
         Length        => Length,
         Get           => Absolute_Get);

      Result : Internal_Formal_Param;
   begin
      if Relative_Get (T, Index, Result) then
         return Result;
      elsif Or_Null then
         return No_Formal_Param;
      else
         Raise_Property_Exception
           (Node,
            Property_Error'Identity,
            "out-of-bounds array access");
      end if;
   end Get;

   ------------
   -- Concat --
   ------------

   function Concat (L, R : Internal_Formal_Param_Array_Access) return Internal_Formal_Param_Array_Access is
      Ret : Internal_Formal_Param_Array_Access := Create_Internal_Formal_Param_Array (Length (L) + Length (R));
   begin
      Ret.Items := L.Items & R.Items;
      return Ret;
   end Concat;


   -------------
   -- Inc_Ref --
   -------------

   procedure Inc_Ref (T : Internal_Formal_Param_Array_Access) is
   begin
      if T.Ref_Count >= 0 then
         T.Ref_Count := T.Ref_Count + 1;
      end if;
   end Inc_Ref;

   ------------
   -- Length --
   ------------

   function Length (T : Internal_Formal_Param_Array_Access) return Natural is (T.N);

   -------------
   -- Dec_Ref --
   -------------

   procedure Dec_Ref (T : in out Internal_Formal_Param_Array_Access) is
   begin
      if T = null or else T.Ref_Count < 0 then
         return;
      end if;

      if T.Ref_Count = 1 then
         Free (T);
      else
         T.Ref_Count := T.Ref_Count - 1;
         T := null;
      end if;
   end Dec_Ref;

   function Create_Internal_Formal_Param_Array (Items_Count : Natural) return Internal_Formal_Param_Array_Access
   is (if Items_Count = 0
       then No_Internal_Formal_Param_Array_Type
       else new Internal_Formal_Param_Array_Record'(N => Items_Count, Ref_Count => 1, Items => <>));


   function Create_Internal_Formal_Param_Array
     (Items : Internal_Internal_Formal_Param_Array) return Internal_Formal_Param_Array_Access is
   begin
      if Items'Length = 0 then
         return No_Internal_Formal_Param_Array_Type;
      end if;

      return new Internal_Formal_Param_Array_Record'
        (N => Items'Length, Ref_Count => 1, Items => Items);
   end;

   ----------------
   -- Equivalent --
   ----------------

   function Equivalent (L, R : Internal_Formal_Param_Array_Access) return Boolean is
   begin
      if L.N /= R.N then
         return False;
      end if;

      for I in L.Items'Range loop
         if
               L.Items (I) /= R.Items (I)
         then
            return False;
         end if;
      end loop;

      return True;
   end Equivalent;


      -----------------
      -- Trace_Image --
      -----------------

      function Trace_Image (A : Internal_Formal_Param_Array_Access) return String is
         Result : Unbounded_String;
      begin
         Append (Result, "[");
         for I in A.Items'Range loop
            if I > A.Items'First then
               Append (Result, ", ");
            end if;
            Append (Result, Trace_Image (A.Items (I)));
         end loop;
         Append (Result, "]");
         return To_String (Result);
      end Trace_Image;


      ----------
      -- Hash --
      ----------

      function Hash (R : Internal_Formal_Param_Array_Access) return Hash_Type is
         Result : Hash_Type := Initial_Hash;
      begin
         for I in R.Items'Range loop
            Result := Combine (Result, Hash (R.Items (I)));
         end loop;
         return Result;
      end Hash;


      

   

      package Internal_Inner_Env_Assoc_Vectors is new Liblktlang_Support.Vectors (Internal_Inner_Env_Assoc);

   ---------
   -- Get --
   ---------

   function Get
     (Node    : Bare_Lkt_Node;
      T       : Internal_Inner_Env_Assoc_Array_Access;
      Index   : Integer;
      Or_Null : Boolean := False) return Internal_Inner_Env_Assoc
   is
      function Absolute_Get
        (T : Internal_Inner_Env_Assoc_Array_Access; Index : Integer)
         return Internal_Inner_Env_Assoc
      is
        (T.Items (Index + 1)); --  T.Items is 1-based but Index is 0-based

      function Relative_Get is new Liblktlang_Support.Relative_Get
        (Item_Type     => Internal_Inner_Env_Assoc,
         Sequence_Type => Internal_Inner_Env_Assoc_Array_Access,
         Length        => Length,
         Get           => Absolute_Get);

      Result : Internal_Inner_Env_Assoc;
   begin
      if Relative_Get (T, Index, Result) then
         return Result;
      elsif Or_Null then
         return No_Inner_Env_Assoc;
      else
         Raise_Property_Exception
           (Node,
            Property_Error'Identity,
            "out-of-bounds array access");
      end if;
   end Get;

   ------------
   -- Concat --
   ------------

   function Concat (L, R : Internal_Inner_Env_Assoc_Array_Access) return Internal_Inner_Env_Assoc_Array_Access is
      Ret : Internal_Inner_Env_Assoc_Array_Access := Create_Internal_Inner_Env_Assoc_Array (Length (L) + Length (R));
   begin
      Ret.Items := L.Items & R.Items;
      return Ret;
   end Concat;


   -------------
   -- Inc_Ref --
   -------------

   procedure Inc_Ref (T : Internal_Inner_Env_Assoc_Array_Access) is
   begin
      if T.Ref_Count >= 0 then
         T.Ref_Count := T.Ref_Count + 1;
      end if;
   end Inc_Ref;

   ------------
   -- Length --
   ------------

   function Length (T : Internal_Inner_Env_Assoc_Array_Access) return Natural is (T.N);

   -------------
   -- Dec_Ref --
   -------------

   procedure Dec_Ref (T : in out Internal_Inner_Env_Assoc_Array_Access) is
   begin
      if T = null or else T.Ref_Count < 0 then
         return;
      end if;

      if T.Ref_Count = 1 then
         Free (T);
      else
         T.Ref_Count := T.Ref_Count - 1;
         T := null;
      end if;
   end Dec_Ref;

   function Create_Internal_Inner_Env_Assoc_Array (Items_Count : Natural) return Internal_Inner_Env_Assoc_Array_Access
   is (if Items_Count = 0
       then No_Internal_Inner_Env_Assoc_Array_Type
       else new Internal_Inner_Env_Assoc_Array_Record'(N => Items_Count, Ref_Count => 1, Items => <>));


   function Create_Internal_Inner_Env_Assoc_Array
     (Items : Internal_Internal_Inner_Env_Assoc_Array) return Internal_Inner_Env_Assoc_Array_Access is
   begin
      if Items'Length = 0 then
         return No_Internal_Inner_Env_Assoc_Array_Type;
      end if;

      return new Internal_Inner_Env_Assoc_Array_Record'
        (N => Items'Length, Ref_Count => 1, Items => Items);
   end;

   ----------------
   -- Equivalent --
   ----------------

   function Equivalent (L, R : Internal_Inner_Env_Assoc_Array_Access) return Boolean is
   begin
      if L.N /= R.N then
         return False;
      end if;

      for I in L.Items'Range loop
         if
               L.Items (I) /= R.Items (I)
         then
            return False;
         end if;
      end loop;

      return True;
   end Equivalent;


      -----------------
      -- Trace_Image --
      -----------------

      function Trace_Image (A : Internal_Inner_Env_Assoc_Array_Access) return String is
         Result : Unbounded_String;
      begin
         Append (Result, "[");
         for I in A.Items'Range loop
            if I > A.Items'First then
               Append (Result, ", ");
            end if;
            Append (Result, Trace_Image (A.Items (I)));
         end loop;
         Append (Result, "]");
         return To_String (Result);
      end Trace_Image;




      

   


   ---------
   -- Get --
   ---------

   function Get
     (Node    : Bare_Lkt_Node;
      T       : Internal_Logic_Context_Array_Access;
      Index   : Integer;
      Or_Null : Boolean := False) return Internal_Logic_Context
   is
      function Absolute_Get
        (T : Internal_Logic_Context_Array_Access; Index : Integer)
         return Internal_Logic_Context
      is
        (T.Items (Index + 1)); --  T.Items is 1-based but Index is 0-based

      function Relative_Get is new Liblktlang_Support.Relative_Get
        (Item_Type     => Internal_Logic_Context,
         Sequence_Type => Internal_Logic_Context_Array_Access,
         Length        => Length,
         Get           => Absolute_Get);

      Result : Internal_Logic_Context;
   begin
      if Relative_Get (T, Index, Result) then
         return Result;
      elsif Or_Null then
         return No_Logic_Context;
      else
         Raise_Property_Exception
           (Node,
            Property_Error'Identity,
            "out-of-bounds array access");
      end if;
   end Get;

   ------------
   -- Concat --
   ------------

   function Concat (L, R : Internal_Logic_Context_Array_Access) return Internal_Logic_Context_Array_Access is
      Ret : Internal_Logic_Context_Array_Access := Create_Internal_Logic_Context_Array (Length (L) + Length (R));
   begin
      Ret.Items := L.Items & R.Items;
      return Ret;
   end Concat;


   -------------
   -- Inc_Ref --
   -------------

   procedure Inc_Ref (T : Internal_Logic_Context_Array_Access) is
   begin
      if T.Ref_Count >= 0 then
         T.Ref_Count := T.Ref_Count + 1;
      end if;
   end Inc_Ref;

   ------------
   -- Length --
   ------------

   function Length (T : Internal_Logic_Context_Array_Access) return Natural is (T.N);

   -------------
   -- Dec_Ref --
   -------------

   procedure Dec_Ref (T : in out Internal_Logic_Context_Array_Access) is
   begin
      if T = null or else T.Ref_Count < 0 then
         return;
      end if;

      if T.Ref_Count = 1 then
         Free (T);
      else
         T.Ref_Count := T.Ref_Count - 1;
         T := null;
      end if;
   end Dec_Ref;

   function Create_Internal_Logic_Context_Array (Items_Count : Natural) return Internal_Logic_Context_Array_Access
   is (if Items_Count = 0
       then No_Internal_Logic_Context_Array_Type
       else new Internal_Logic_Context_Array_Record'(N => Items_Count, Ref_Count => 1, Items => <>));


   function Create_Internal_Logic_Context_Array
     (Items : Internal_Internal_Logic_Context_Array) return Internal_Logic_Context_Array_Access is
   begin
      if Items'Length = 0 then
         return No_Internal_Logic_Context_Array_Type;
      end if;

      return new Internal_Logic_Context_Array_Record'
        (N => Items'Length, Ref_Count => 1, Items => Items);
   end;

   ----------------
   -- Equivalent --
   ----------------

   function Equivalent (L, R : Internal_Logic_Context_Array_Access) return Boolean is
   begin
      if L.N /= R.N then
         return False;
      end if;

      for I in L.Items'Range loop
         if
               L.Items (I) /= R.Items (I)
         then
            return False;
         end if;
      end loop;

      return True;
   end Equivalent;


      -----------------
      -- Trace_Image --
      -----------------

      function Trace_Image (A : Internal_Logic_Context_Array_Access) return String is
         Result : Unbounded_String;
      begin
         Append (Result, "[");
         for I in A.Items'Range loop
            if I > A.Items'First then
               Append (Result, ", ");
            end if;
            Append (Result, Trace_Image (A.Items (I)));
         end loop;
         Append (Result, "]");
         return To_String (Result);
      end Trace_Image;




      

   

      package Internal_Param_Match_Vectors is new Liblktlang_Support.Vectors (Internal_Param_Match);

   ---------
   -- Get --
   ---------

   function Get
     (Node    : Bare_Lkt_Node;
      T       : Internal_Param_Match_Array_Access;
      Index   : Integer;
      Or_Null : Boolean := False) return Internal_Param_Match
   is
      function Absolute_Get
        (T : Internal_Param_Match_Array_Access; Index : Integer)
         return Internal_Param_Match
      is
        (T.Items (Index + 1)); --  T.Items is 1-based but Index is 0-based

      function Relative_Get is new Liblktlang_Support.Relative_Get
        (Item_Type     => Internal_Param_Match,
         Sequence_Type => Internal_Param_Match_Array_Access,
         Length        => Length,
         Get           => Absolute_Get);

      Result : Internal_Param_Match;
   begin
      if Relative_Get (T, Index, Result) then
         return Result;
      elsif Or_Null then
         return No_Param_Match;
      else
         Raise_Property_Exception
           (Node,
            Property_Error'Identity,
            "out-of-bounds array access");
      end if;
   end Get;

   ------------
   -- Concat --
   ------------

   function Concat (L, R : Internal_Param_Match_Array_Access) return Internal_Param_Match_Array_Access is
      Ret : Internal_Param_Match_Array_Access := Create_Internal_Param_Match_Array (Length (L) + Length (R));
   begin
      Ret.Items := L.Items & R.Items;
      return Ret;
   end Concat;


   -------------
   -- Inc_Ref --
   -------------

   procedure Inc_Ref (T : Internal_Param_Match_Array_Access) is
   begin
      if T.Ref_Count >= 0 then
         T.Ref_Count := T.Ref_Count + 1;
      end if;
   end Inc_Ref;

   ------------
   -- Length --
   ------------

   function Length (T : Internal_Param_Match_Array_Access) return Natural is (T.N);

   -------------
   -- Dec_Ref --
   -------------

   procedure Dec_Ref (T : in out Internal_Param_Match_Array_Access) is
   begin
      if T = null or else T.Ref_Count < 0 then
         return;
      end if;

      if T.Ref_Count = 1 then
         Free (T);
      else
         T.Ref_Count := T.Ref_Count - 1;
         T := null;
      end if;
   end Dec_Ref;

   function Create_Internal_Param_Match_Array (Items_Count : Natural) return Internal_Param_Match_Array_Access
   is (if Items_Count = 0
       then No_Internal_Param_Match_Array_Type
       else new Internal_Param_Match_Array_Record'(N => Items_Count, Ref_Count => 1, Items => <>));


   function Create_Internal_Param_Match_Array
     (Items : Internal_Internal_Param_Match_Array) return Internal_Param_Match_Array_Access is
   begin
      if Items'Length = 0 then
         return No_Internal_Param_Match_Array_Type;
      end if;

      return new Internal_Param_Match_Array_Record'
        (N => Items'Length, Ref_Count => 1, Items => Items);
   end;

   ----------------
   -- Equivalent --
   ----------------

   function Equivalent (L, R : Internal_Param_Match_Array_Access) return Boolean is
   begin
      if L.N /= R.N then
         return False;
      end if;

      for I in L.Items'Range loop
         if
               L.Items (I) /= R.Items (I)
         then
            return False;
         end if;
      end loop;

      return True;
   end Equivalent;


      -----------------
      -- Trace_Image --
      -----------------

      function Trace_Image (A : Internal_Param_Match_Array_Access) return String is
         Result : Unbounded_String;
      begin
         Append (Result, "[");
         for I in A.Items'Range loop
            if I > A.Items'First then
               Append (Result, ", ");
            end if;
            Append (Result, Trace_Image (A.Items (I)));
         end loop;
         Append (Result, "]");
         return To_String (Result);
      end Trace_Image;




      

   


   ---------
   -- Get --
   ---------

   function Get
     (Node    : Bare_Lkt_Node;
      T       : Internal_Solver_Diagnostic_Array_Access;
      Index   : Integer;
      Or_Null : Boolean := False) return Internal_Solver_Diagnostic
   is
      function Absolute_Get
        (T : Internal_Solver_Diagnostic_Array_Access; Index : Integer)
         return Internal_Solver_Diagnostic
      is
        (T.Items (Index + 1)); --  T.Items is 1-based but Index is 0-based

      function Relative_Get is new Liblktlang_Support.Relative_Get
        (Item_Type     => Internal_Solver_Diagnostic,
         Sequence_Type => Internal_Solver_Diagnostic_Array_Access,
         Length        => Length,
         Get           => Absolute_Get);

      Result : Internal_Solver_Diagnostic;
   begin
      if Relative_Get (T, Index, Result) then
            Inc_Ref (Result);
         return Result;
      elsif Or_Null then
         return No_Solver_Diagnostic;
      else
         Raise_Property_Exception
           (Node,
            Property_Error'Identity,
            "out-of-bounds array access");
      end if;
   end Get;

   ------------
   -- Concat --
   ------------

   function Concat (L, R : Internal_Solver_Diagnostic_Array_Access) return Internal_Solver_Diagnostic_Array_Access is
      Ret : Internal_Solver_Diagnostic_Array_Access := Create_Internal_Solver_Diagnostic_Array (Length (L) + Length (R));
   begin
      Ret.Items := L.Items & R.Items;
         for Item of Ret.Items loop
            Inc_Ref (Item);
         end loop;
      return Ret;
   end Concat;


   -------------
   -- Inc_Ref --
   -------------

   procedure Inc_Ref (T : Internal_Solver_Diagnostic_Array_Access) is
   begin
      if T.Ref_Count >= 0 then
         T.Ref_Count := T.Ref_Count + 1;
      end if;
   end Inc_Ref;

   ------------
   -- Length --
   ------------

   function Length (T : Internal_Solver_Diagnostic_Array_Access) return Natural is (T.N);

   -------------
   -- Dec_Ref --
   -------------

   procedure Dec_Ref (T : in out Internal_Solver_Diagnostic_Array_Access) is
   begin
      if T = null or else T.Ref_Count < 0 then
         return;
      end if;

      if T.Ref_Count = 1 then
            for Item of T.Items loop
               Dec_Ref (Item);
            end loop;
         Free (T);
      else
         T.Ref_Count := T.Ref_Count - 1;
         T := null;
      end if;
   end Dec_Ref;

   function Create_Internal_Solver_Diagnostic_Array (Items_Count : Natural) return Internal_Solver_Diagnostic_Array_Access
   is (if Items_Count = 0
       then No_Internal_Solver_Diagnostic_Array_Type
       else new Internal_Solver_Diagnostic_Array_Record'(N => Items_Count, Ref_Count => 1, Items => <>));


   function Create_Internal_Solver_Diagnostic_Array
     (Items : Internal_Internal_Solver_Diagnostic_Array) return Internal_Solver_Diagnostic_Array_Access is
   begin
      if Items'Length = 0 then
         return No_Internal_Solver_Diagnostic_Array_Type;
      end if;

         for El of Items loop
            Inc_Ref (El);
         end loop;
      return new Internal_Solver_Diagnostic_Array_Record'
        (N => Items'Length, Ref_Count => 1, Items => Items);
   end;

   ----------------
   -- Equivalent --
   ----------------

   function Equivalent (L, R : Internal_Solver_Diagnostic_Array_Access) return Boolean is
   begin
      if L.N /= R.N then
         return False;
      end if;

      for I in L.Items'Range loop
         if
               not Equivalent (L.Items (I), R.Items (I))
         then
            return False;
         end if;
      end loop;

      return True;
   end Equivalent;


      -----------------
      -- Trace_Image --
      -----------------

      function Trace_Image (A : Internal_Solver_Diagnostic_Array_Access) return String is
         Result : Unbounded_String;
      begin
         Append (Result, "[");
         for I in A.Items'Range loop
            if I > A.Items'First then
               Append (Result, ", ");
            end if;
            Append (Result, Trace_Image (A.Items (I)));
         end loop;
         Append (Result, "]");
         return To_String (Result);
      end Trace_Image;




      

   


   ---------
   -- Get --
   ---------

   function Get
     (Node    : Bare_Lkt_Node;
      T       : Internal_Unit_Array_Access;
      Index   : Integer;
      Or_Null : Boolean := False) return Internal_Unit
   is
      function Absolute_Get
        (T : Internal_Unit_Array_Access; Index : Integer)
         return Internal_Unit
      is
        (T.Items (Index + 1)); --  T.Items is 1-based but Index is 0-based

      function Relative_Get is new Liblktlang_Support.Relative_Get
        (Item_Type     => Internal_Unit,
         Sequence_Type => Internal_Unit_Array_Access,
         Length        => Length,
         Get           => Absolute_Get);

      Result : Internal_Unit;
   begin
      if Relative_Get (T, Index, Result) then
         return Result;
      elsif Or_Null then
         return null;
      else
         Raise_Property_Exception
           (Node,
            Property_Error'Identity,
            "out-of-bounds array access");
      end if;
   end Get;

   ------------
   -- Concat --
   ------------

   function Concat (L, R : Internal_Unit_Array_Access) return Internal_Unit_Array_Access is
      Ret : Internal_Unit_Array_Access := Create_Internal_Unit_Array (Length (L) + Length (R));
   begin
      Ret.Items := L.Items & R.Items;
      return Ret;
   end Concat;


   -------------
   -- Inc_Ref --
   -------------

   procedure Inc_Ref (T : Internal_Unit_Array_Access) is
   begin
      if T.Ref_Count >= 0 then
         T.Ref_Count := T.Ref_Count + 1;
      end if;
   end Inc_Ref;

   ------------
   -- Length --
   ------------

   function Length (T : Internal_Unit_Array_Access) return Natural is (T.N);

   -------------
   -- Dec_Ref --
   -------------

   procedure Dec_Ref (T : in out Internal_Unit_Array_Access) is
   begin
      if T = null or else T.Ref_Count < 0 then
         return;
      end if;

      if T.Ref_Count = 1 then
         Free (T);
      else
         T.Ref_Count := T.Ref_Count - 1;
         T := null;
      end if;
   end Dec_Ref;

   function Create_Internal_Unit_Array (Items_Count : Natural) return Internal_Unit_Array_Access
   is (if Items_Count = 0
       then No_Internal_Unit_Array_Type
       else new Internal_Unit_Array_Record'(N => Items_Count, Ref_Count => 1, Items => <>));


   function Create_Internal_Unit_Array
     (Items : Internal_Internal_Unit_Array) return Internal_Unit_Array_Access is
   begin
      if Items'Length = 0 then
         return No_Internal_Unit_Array_Type;
      end if;

      return new Internal_Unit_Array_Record'
        (N => Items'Length, Ref_Count => 1, Items => Items);
   end;

   ----------------
   -- Equivalent --
   ----------------

   function Equivalent (L, R : Internal_Unit_Array_Access) return Boolean is
   begin
      if L.N /= R.N then
         return False;
      end if;

      for I in L.Items'Range loop
         if
               L.Items (I) /= R.Items (I)
         then
            return False;
         end if;
      end loop;

      return True;
   end Equivalent;


      -----------------
      -- Trace_Image --
      -----------------

      function Trace_Image (A : Internal_Unit_Array_Access) return String is
         Result : Unbounded_String;
      begin
         Append (Result, "[");
         for I in A.Items'Range loop
            if I > A.Items'First then
               Append (Result, ", ");
            end if;
            Append (Result, Trace_Image (A.Items (I)));
         end loop;
         Append (Result, "]");
         return To_String (Result);
      end Trace_Image;




      

   

      package Lexical_Env_Vectors is new Liblktlang_Support.Vectors (Lexical_Env);

   ---------
   -- Get --
   ---------

   function Get
     (Node    : Bare_Lkt_Node;
      T       : Lexical_Env_Array_Access;
      Index   : Integer;
      Or_Null : Boolean := False) return Lexical_Env
   is
      function Absolute_Get
        (T : Lexical_Env_Array_Access; Index : Integer)
         return Lexical_Env
      is
        (T.Items (Index + 1)); --  T.Items is 1-based but Index is 0-based

      function Relative_Get is new Liblktlang_Support.Relative_Get
        (Item_Type     => Lexical_Env,
         Sequence_Type => Lexical_Env_Array_Access,
         Length        => Length,
         Get           => Absolute_Get);

      Result : Lexical_Env;
   begin
      if Relative_Get (T, Index, Result) then
            Inc_Ref (Result);
         return Result;
      elsif Or_Null then
         return Empty_Env;
      else
         Raise_Property_Exception
           (Node,
            Property_Error'Identity,
            "out-of-bounds array access");
      end if;
   end Get;

   ------------
   -- Concat --
   ------------

   function Concat (L, R : Lexical_Env_Array_Access) return Lexical_Env_Array_Access is
      Ret : Lexical_Env_Array_Access := Create_Lexical_Env_Array (Length (L) + Length (R));
   begin
      Ret.Items := L.Items & R.Items;
         for Item of Ret.Items loop
            Inc_Ref (Item);
         end loop;
      return Ret;
   end Concat;


   -------------
   -- Inc_Ref --
   -------------

   procedure Inc_Ref (T : Lexical_Env_Array_Access) is
   begin
      if T.Ref_Count >= 0 then
         T.Ref_Count := T.Ref_Count + 1;
      end if;
   end Inc_Ref;

   ------------
   -- Length --
   ------------

   function Length (T : Lexical_Env_Array_Access) return Natural is (T.N);

   -------------
   -- Dec_Ref --
   -------------

   procedure Dec_Ref (T : in out Lexical_Env_Array_Access) is
   begin
      if T = null or else T.Ref_Count < 0 then
         return;
      end if;

      if T.Ref_Count = 1 then
            for Item of T.Items loop
               Dec_Ref (Item);
            end loop;
         Free (T);
      else
         T.Ref_Count := T.Ref_Count - 1;
         T := null;
      end if;
   end Dec_Ref;

   function Create_Lexical_Env_Array (Items_Count : Natural) return Lexical_Env_Array_Access
   is (if Items_Count = 0
       then No_Lexical_Env_Array_Type
       else new Lexical_Env_Array_Record'(N => Items_Count, Ref_Count => 1, Items => <>));


   function Create_Lexical_Env_Array
     (Items : Internal_Lexical_Env_Array) return Lexical_Env_Array_Access is
   begin
      if Items'Length = 0 then
         return No_Lexical_Env_Array_Type;
      end if;

         for El of Items loop
            Inc_Ref (El);
         end loop;
      return new Lexical_Env_Array_Record'
        (N => Items'Length, Ref_Count => 1, Items => Items);
   end;

   ----------------
   -- Equivalent --
   ----------------

   function Equivalent (L, R : Lexical_Env_Array_Access) return Boolean is
   begin
      if L.N /= R.N then
         return False;
      end if;

      for I in L.Items'Range loop
         if
               not Equivalent (L.Items (I), R.Items (I))
         then
            return False;
         end if;
      end loop;

      return True;
   end Equivalent;


      -----------------
      -- Trace_Image --
      -----------------

      function Trace_Image (A : Lexical_Env_Array_Access) return String is
         Result : Unbounded_String;
      begin
         Append (Result, "[");
         for I in A.Items'Range loop
            if I > A.Items'First then
               Append (Result, ", ");
            end if;
            Append (Result, Trace_Image (A.Items (I)));
         end loop;
         Append (Result, "]");
         return To_String (Result);
      end Trace_Image;




      

   

      package Logic_Equation_Vectors is new Liblktlang_Support.Vectors (Logic_Equation);

   ---------
   -- Get --
   ---------

   function Get
     (Node    : Bare_Lkt_Node;
      T       : Logic_Equation_Array_Access;
      Index   : Integer;
      Or_Null : Boolean := False) return Logic_Equation
   is
      function Absolute_Get
        (T : Logic_Equation_Array_Access; Index : Integer)
         return Logic_Equation
      is
        (T.Items (Index + 1)); --  T.Items is 1-based but Index is 0-based

      function Relative_Get is new Liblktlang_Support.Relative_Get
        (Item_Type     => Logic_Equation,
         Sequence_Type => Logic_Equation_Array_Access,
         Length        => Length,
         Get           => Absolute_Get);

      Result : Logic_Equation;
   begin
      if Relative_Get (T, Index, Result) then
            Inc_Ref (Result);
         return Result;
      elsif Or_Null then
         return Null_Logic_Equation;
      else
         Raise_Property_Exception
           (Node,
            Property_Error'Identity,
            "out-of-bounds array access");
      end if;
   end Get;

   ------------
   -- Concat --
   ------------

   function Concat (L, R : Logic_Equation_Array_Access) return Logic_Equation_Array_Access is
      Ret : Logic_Equation_Array_Access := Create_Logic_Equation_Array (Length (L) + Length (R));
   begin
      Ret.Items := L.Items & R.Items;
         for Item of Ret.Items loop
            Inc_Ref (Item);
         end loop;
      return Ret;
   end Concat;


   -------------
   -- Inc_Ref --
   -------------

   procedure Inc_Ref (T : Logic_Equation_Array_Access) is
   begin
      if T.Ref_Count >= 0 then
         T.Ref_Count := T.Ref_Count + 1;
      end if;
   end Inc_Ref;

   ------------
   -- Length --
   ------------

   function Length (T : Logic_Equation_Array_Access) return Natural is (T.N);

   -------------
   -- Dec_Ref --
   -------------

   procedure Dec_Ref (T : in out Logic_Equation_Array_Access) is
   begin
      if T = null or else T.Ref_Count < 0 then
         return;
      end if;

      if T.Ref_Count = 1 then
            for Item of T.Items loop
               Dec_Ref (Item);
            end loop;
         Free (T);
      else
         T.Ref_Count := T.Ref_Count - 1;
         T := null;
      end if;
   end Dec_Ref;

   function Create_Logic_Equation_Array (Items_Count : Natural) return Logic_Equation_Array_Access
   is (if Items_Count = 0
       then No_Logic_Equation_Array_Type
       else new Logic_Equation_Array_Record'(N => Items_Count, Ref_Count => 1, Items => <>));


   function Create_Logic_Equation_Array
     (Items : Internal_Logic_Equation_Array) return Logic_Equation_Array_Access is
   begin
      if Items'Length = 0 then
         return No_Logic_Equation_Array_Type;
      end if;

         for El of Items loop
            Inc_Ref (El);
         end loop;
      return new Logic_Equation_Array_Record'
        (N => Items'Length, Ref_Count => 1, Items => Items);
   end;

   ----------------
   -- Equivalent --
   ----------------

   function Equivalent (L, R : Logic_Equation_Array_Access) return Boolean is
   begin
      if L.N /= R.N then
         return False;
      end if;

      for I in L.Items'Range loop
         if
               L.Items (I) /= R.Items (I)
         then
            return False;
         end if;
      end loop;

      return True;
   end Equivalent;


      -----------------
      -- Trace_Image --
      -----------------

      function Trace_Image (A : Logic_Equation_Array_Access) return String is
         Result : Unbounded_String;
      begin
         Append (Result, "[");
         for I in A.Items'Range loop
            if I > A.Items'First then
               Append (Result, ", ");
            end if;
            Append (Result, Trace_Image (A.Items (I)));
         end loop;
         Append (Result, "]");
         return To_String (Result);
      end Trace_Image;




      

   

      package Logic_Var_Vectors is new Liblktlang_Support.Vectors (Logic_Var);

   ---------
   -- Get --
   ---------

   function Get
     (Node    : Bare_Lkt_Node;
      T       : Logic_Var_Array_Access;
      Index   : Integer;
      Or_Null : Boolean := False) return Logic_Var
   is
      function Absolute_Get
        (T : Logic_Var_Array_Access; Index : Integer)
         return Logic_Var
      is
        (T.Items (Index + 1)); --  T.Items is 1-based but Index is 0-based

      function Relative_Get is new Liblktlang_Support.Relative_Get
        (Item_Type     => Logic_Var,
         Sequence_Type => Logic_Var_Array_Access,
         Length        => Length,
         Get           => Absolute_Get);

      Result : Logic_Var;
   begin
      if Relative_Get (T, Index, Result) then
         return Result;
      elsif Or_Null then
         return null;
      else
         Raise_Property_Exception
           (Node,
            Property_Error'Identity,
            "out-of-bounds array access");
      end if;
   end Get;

   ------------
   -- Concat --
   ------------

   function Concat (L, R : Logic_Var_Array_Access) return Logic_Var_Array_Access is
      Ret : Logic_Var_Array_Access := Create_Logic_Var_Array (Length (L) + Length (R));
   begin
      Ret.Items := L.Items & R.Items;
      return Ret;
   end Concat;


   -------------
   -- Inc_Ref --
   -------------

   procedure Inc_Ref (T : Logic_Var_Array_Access) is
   begin
      if T.Ref_Count >= 0 then
         T.Ref_Count := T.Ref_Count + 1;
      end if;
   end Inc_Ref;

   ------------
   -- Length --
   ------------

   function Length (T : Logic_Var_Array_Access) return Natural is (T.N);

   -------------
   -- Dec_Ref --
   -------------

   procedure Dec_Ref (T : in out Logic_Var_Array_Access) is
   begin
      if T = null or else T.Ref_Count < 0 then
         return;
      end if;

      if T.Ref_Count = 1 then
         Free (T);
      else
         T.Ref_Count := T.Ref_Count - 1;
         T := null;
      end if;
   end Dec_Ref;

   function Create_Logic_Var_Array (Items_Count : Natural) return Logic_Var_Array_Access
   is (if Items_Count = 0
       then No_Logic_Var_Array_Type
       else new Logic_Var_Array_Record'(N => Items_Count, Ref_Count => 1, Items => <>));


   function Create_Logic_Var_Array
     (Items : Internal_Logic_Var_Array) return Logic_Var_Array_Access is
   begin
      if Items'Length = 0 then
         return No_Logic_Var_Array_Type;
      end if;

      return new Logic_Var_Array_Record'
        (N => Items'Length, Ref_Count => 1, Items => Items);
   end;

   ----------------
   -- Equivalent --
   ----------------

   function Equivalent (L, R : Logic_Var_Array_Access) return Boolean is
      use type Logic_Var;
   begin
      if L.N /= R.N then
         return False;
      end if;

      for I in L.Items'Range loop
         if
               L.Items (I) /= R.Items (I)
         then
            return False;
         end if;
      end loop;

      return True;
   end Equivalent;


      -----------------
      -- Trace_Image --
      -----------------

      function Trace_Image (A : Logic_Var_Array_Access) return String is
         Result : Unbounded_String;
      begin
         Append (Result, "[");
         for I in A.Items'Range loop
            if I > A.Items'First then
               Append (Result, ", ");
            end if;
            Append (Result, Trace_Image (A.Items (I)));
         end loop;
         Append (Result, "]");
         return To_String (Result);
      end Trace_Image;




      

   

      package String_Type_Vectors is new Liblktlang_Support.Vectors (String_Type);

   ---------
   -- Get --
   ---------

   function Get
     (Node    : Bare_Lkt_Node;
      T       : String_Type_Array_Access;
      Index   : Integer;
      Or_Null : Boolean := False) return String_Type
   is
      function Absolute_Get
        (T : String_Type_Array_Access; Index : Integer)
         return String_Type
      is
        (T.Items (Index + 1)); --  T.Items is 1-based but Index is 0-based

      function Relative_Get is new Liblktlang_Support.Relative_Get
        (Item_Type     => String_Type,
         Sequence_Type => String_Type_Array_Access,
         Length        => Length,
         Get           => Absolute_Get);

      Result : String_Type;
   begin
      if Relative_Get (T, Index, Result) then
            Inc_Ref (Result);
         return Result;
      elsif Or_Null then
         return Empty_String;
      else
         Raise_Property_Exception
           (Node,
            Property_Error'Identity,
            "out-of-bounds array access");
      end if;
   end Get;

   ------------
   -- Concat --
   ------------

   function Concat (L, R : String_Type_Array_Access) return String_Type_Array_Access is
      Ret : String_Type_Array_Access := Create_String_Type_Array (Length (L) + Length (R));
   begin
      Ret.Items := L.Items & R.Items;
         for Item of Ret.Items loop
            Inc_Ref (Item);
         end loop;
      return Ret;
   end Concat;

      ------------------
      -- Join_Strings --
      ------------------

      function Join_Strings
        (Separator : String_Type;
         Strings   : String_Type_Array_Access) return String_Type
      is
         Separator_Length : constant Natural := Separator.Length;
         Length           : Natural := 0;
         First            : Boolean;
      begin
         --  First, compute the length of the result: the sum of all string
         --  lengths in Strings.
         First := True;
         for S of Strings.Items loop
            if First then
               First := False;
            else
               Length := Length + Separator_Length;
            end if;
            Length := Length + S.Length;
         end loop;

         --  Create the result string with the correct length. Do not use our
         --  constructor and initialize the content in-place, to avoid extra
         --  copies.
         return Result : constant String_Type :=
            new String_Record (Length)
         do
            Result.Ref_Count := 1;

            --  Now copy the content of all strings into the result
            declare
               Last : Natural := 0;
            begin
               First := True;
               for S of Strings.Items loop
                  if First then
                     First := False;
                  else
                     Result.Content (Last + 1 .. Last + Separator_Length) :=
                        Separator.Content;
                     Last := Last + Separator_Length;
                  end if;
                  Result.Content (Last + 1 .. Last + S.Length) := S.Content;
                  Last := Last + S.Length;
               end loop;
            end;
         end return;
      end Join_Strings;

   -------------
   -- Inc_Ref --
   -------------

   procedure Inc_Ref (T : String_Type_Array_Access) is
   begin
      if T.Ref_Count >= 0 then
         T.Ref_Count := T.Ref_Count + 1;
      end if;
   end Inc_Ref;

   ------------
   -- Length --
   ------------

   function Length (T : String_Type_Array_Access) return Natural is (T.N);

   -------------
   -- Dec_Ref --
   -------------

   procedure Dec_Ref (T : in out String_Type_Array_Access) is
   begin
      if T = null or else T.Ref_Count < 0 then
         return;
      end if;

      if T.Ref_Count = 1 then
            for Item of T.Items loop
               Dec_Ref (Item);
            end loop;
         Free (T);
      else
         T.Ref_Count := T.Ref_Count - 1;
         T := null;
      end if;
   end Dec_Ref;

   function Create_String_Type_Array (Items_Count : Natural) return String_Type_Array_Access
   is (if Items_Count = 0
       then No_String_Type_Array_Type
       else new String_Type_Array_Record'(N => Items_Count, Ref_Count => 1, Items => <>));


   function Create_String_Type_Array
     (Items : Internal_String_Type_Array) return String_Type_Array_Access is
   begin
      if Items'Length = 0 then
         return No_String_Type_Array_Type;
      end if;

         for El of Items loop
            Inc_Ref (El);
         end loop;
      return new String_Type_Array_Record'
        (N => Items'Length, Ref_Count => 1, Items => Items);
   end;

   ----------------
   -- Equivalent --
   ----------------

   function Equivalent (L, R : String_Type_Array_Access) return Boolean is
   begin
      if L.N /= R.N then
         return False;
      end if;

      for I in L.Items'Range loop
         if
               not Equivalent (L.Items (I), R.Items (I))
         then
            return False;
         end if;
      end loop;

      return True;
   end Equivalent;


      -----------------
      -- Trace_Image --
      -----------------

      function Trace_Image (A : String_Type_Array_Access) return String is
         Result : Unbounded_String;
      begin
         Append (Result, "[");
         for I in A.Items'Range loop
            if I > A.Items'First then
               Append (Result, ", ");
            end if;
            Append (Result, Trace_Image (A.Items (I)));
         end loop;
         Append (Result, "]");
         return To_String (Result);
      end Trace_Image;




      

   

      package Symbol_Type_Vectors is new Liblktlang_Support.Vectors (Symbol_Type);

   ---------
   -- Get --
   ---------

   function Get
     (Node    : Bare_Lkt_Node;
      T       : Symbol_Type_Array_Access;
      Index   : Integer;
      Or_Null : Boolean := False) return Symbol_Type
   is
      function Absolute_Get
        (T : Symbol_Type_Array_Access; Index : Integer)
         return Symbol_Type
      is
        (T.Items (Index + 1)); --  T.Items is 1-based but Index is 0-based

      function Relative_Get is new Liblktlang_Support.Relative_Get
        (Item_Type     => Symbol_Type,
         Sequence_Type => Symbol_Type_Array_Access,
         Length        => Length,
         Get           => Absolute_Get);

      Result : Symbol_Type;
   begin
      if Relative_Get (T, Index, Result) then
         return Result;
      elsif Or_Null then
         return No_Symbol;
      else
         Raise_Property_Exception
           (Node,
            Property_Error'Identity,
            "out-of-bounds array access");
      end if;
   end Get;

   ------------
   -- Concat --
   ------------

   function Concat (L, R : Symbol_Type_Array_Access) return Symbol_Type_Array_Access is
      Ret : Symbol_Type_Array_Access := Create_Symbol_Type_Array (Length (L) + Length (R));
   begin
      Ret.Items := L.Items & R.Items;
      return Ret;
   end Concat;


   -------------
   -- Inc_Ref --
   -------------

   procedure Inc_Ref (T : Symbol_Type_Array_Access) is
   begin
      if T.Ref_Count >= 0 then
         T.Ref_Count := T.Ref_Count + 1;
      end if;
   end Inc_Ref;

   ------------
   -- Length --
   ------------

   function Length (T : Symbol_Type_Array_Access) return Natural is (T.N);

   -------------
   -- Dec_Ref --
   -------------

   procedure Dec_Ref (T : in out Symbol_Type_Array_Access) is
   begin
      if T = null or else T.Ref_Count < 0 then
         return;
      end if;

      if T.Ref_Count = 1 then
         Free (T);
      else
         T.Ref_Count := T.Ref_Count - 1;
         T := null;
      end if;
   end Dec_Ref;

   function Create_Symbol_Type_Array (Items_Count : Natural) return Symbol_Type_Array_Access
   is (if Items_Count = 0
       then No_Symbol_Type_Array_Type
       else new Symbol_Type_Array_Record'(N => Items_Count, Ref_Count => 1, Items => <>));


   function Create_Symbol_Type_Array
     (Items : Internal_Symbol_Type_Array) return Symbol_Type_Array_Access is
   begin
      if Items'Length = 0 then
         return No_Symbol_Type_Array_Type;
      end if;

      return new Symbol_Type_Array_Record'
        (N => Items'Length, Ref_Count => 1, Items => Items);
   end;

   ----------------
   -- Equivalent --
   ----------------

   function Equivalent (L, R : Symbol_Type_Array_Access) return Boolean is
   begin
      if L.N /= R.N then
         return False;
      end if;

      for I in L.Items'Range loop
         if
               L.Items (I) /= R.Items (I)
         then
            return False;
         end if;
      end loop;

      return True;
   end Equivalent;


      -----------------
      -- Trace_Image --
      -----------------

      function Trace_Image (A : Symbol_Type_Array_Access) return String is
         Result : Unbounded_String;
      begin
         Append (Result, "[");
         for I in A.Items'Range loop
            if I > A.Items'First then
               Append (Result, ", ");
            end if;
            Append (Result, Trace_Image (A.Items (I)));
         end loop;
         Append (Result, "]");
         return To_String (Result);
      end Trace_Image;





         

   

   ----------
   -- Next --
   ----------

   function Next
     (T       : Bare_Lkt_Node_Iterator_Access;
      Element : out Bare_Lkt_Node) return Boolean is
   begin
      if T = null then
         raise Property_Error with "null access dereference";
      end if;
      Check_Safety_Net (T.Safety_Net);

      if T.Index > T.Elements.Items'Last then
         return False;
      else
         Element := T.Elements.Items (T.Index);
         T.Index := T.Index + 1;
         return True;
      end if;
   end Next;

   -------------
   -- Inc_Ref --
   -------------

   procedure Inc_Ref (T : Bare_Lkt_Node_Iterator_Access) is
   begin
      if T /= null and then T.Ref_Count >= 0 then
         T.Ref_Count := T.Ref_Count + 1;
      end if;
   end Inc_Ref;

   -------------
   -- Dec_Ref --
   -------------

   procedure Dec_Ref (T : in out Bare_Lkt_Node_Iterator_Access) is
   begin
      if T = null or else T.Ref_Count < 0 then
         return;
      end if;

      if T.Ref_Count = 1 then
         Dec_Ref (T.Elements);
         Free (T);
      else
         T.Ref_Count := T.Ref_Count - 1;
         T := null;
      end if;
   end Dec_Ref;

      -----------------
      -- Trace_Image --
      -----------------

      function Trace_Image (A : Bare_Lkt_Node_Iterator_Access) return String is
      begin
         return "<Iterator of LktNode, index="
                & A.Index'Image & ">";
      end Trace_Image;


         

   

   ----------
   -- Next --
   ----------

   function Next
     (T       : Internal_Entity_Iterator_Access;
      Element : out Internal_Entity) return Boolean is
   begin
      if T = null then
         raise Property_Error with "null access dereference";
      end if;
      Check_Safety_Net (T.Safety_Net);

      if T.Index > T.Elements.Items'Last then
         return False;
      else
         Element := T.Elements.Items (T.Index);
         T.Index := T.Index + 1;
         return True;
      end if;
   end Next;

   -------------
   -- Inc_Ref --
   -------------

   procedure Inc_Ref (T : Internal_Entity_Iterator_Access) is
   begin
      if T /= null and then T.Ref_Count >= 0 then
         T.Ref_Count := T.Ref_Count + 1;
      end if;
   end Inc_Ref;

   -------------
   -- Dec_Ref --
   -------------

   procedure Dec_Ref (T : in out Internal_Entity_Iterator_Access) is
   begin
      if T = null or else T.Ref_Count < 0 then
         return;
      end if;

      if T.Ref_Count = 1 then
         Dec_Ref (T.Elements);
         Free (T);
      else
         T.Ref_Count := T.Ref_Count - 1;
         T := null;
      end if;
   end Dec_Ref;

      -----------------
      -- Trace_Image --
      -----------------

      function Trace_Image (A : Internal_Entity_Iterator_Access) return String is
      begin
         return "<Iterator of LktNode.entity, index="
                & A.Index'Image & ">";
      end Trace_Image;


         

   

   ----------
   -- Next --
   ----------

   function Next
     (T       : Internal_Inner_Env_Assoc_Iterator_Access;
      Element : out Internal_Inner_Env_Assoc) return Boolean is
   begin
      if T = null then
         raise Property_Error with "null access dereference";
      end if;
      Check_Safety_Net (T.Safety_Net);

      if T.Index > T.Elements.Items'Last then
         return False;
      else
         Element := T.Elements.Items (T.Index);
         T.Index := T.Index + 1;
         return True;
      end if;
   end Next;

   -------------
   -- Inc_Ref --
   -------------

   procedure Inc_Ref (T : Internal_Inner_Env_Assoc_Iterator_Access) is
   begin
      if T /= null and then T.Ref_Count >= 0 then
         T.Ref_Count := T.Ref_Count + 1;
      end if;
   end Inc_Ref;

   -------------
   -- Dec_Ref --
   -------------

   procedure Dec_Ref (T : in out Internal_Inner_Env_Assoc_Iterator_Access) is
   begin
      if T = null or else T.Ref_Count < 0 then
         return;
      end if;

      if T.Ref_Count = 1 then
         Dec_Ref (T.Elements);
         Free (T);
      else
         T.Ref_Count := T.Ref_Count - 1;
         T := null;
      end if;
   end Dec_Ref;

      -----------------
      -- Trace_Image --
      -----------------

      function Trace_Image (A : Internal_Inner_Env_Assoc_Iterator_Access) return String is
      begin
         return "<Iterator of InnerEnvAssoc, index="
                & A.Index'Image & ">";
      end Trace_Image;



   ---------
   -- "<" --
   ---------

   function "<" (Left, Right : Internal_Unit) return Boolean is
   begin
      return Left.Filename < Right.Filename;
   end "<";

      



function Hash (Key : Mmz_Key_Item) return Hash_Type;
function Equivalent (L, R : Mmz_Key_Item) return Boolean;
procedure Destroy (Key : in out Mmz_Key_Array_Access);

----------------
-- Equivalent --
----------------

function Equivalent (L, R : Mmz_Key_Item) return Boolean is
begin
   if L.Kind /= R.Kind then
      return False;
   end if;

   case L.Kind is
         when Mmz_Bare_Base_Dot_Expr =>
            
               return L.As_Bare_Base_Dot_Expr = R.As_Bare_Base_Dot_Expr;
         when Mmz_Bare_Basic_Class_Decl =>
            
               return L.As_Bare_Basic_Class_Decl = R.As_Bare_Basic_Class_Decl;
         when Mmz_Bare_Class_Decl =>
            
               return L.As_Bare_Class_Decl = R.As_Bare_Class_Decl;
         when Mmz_Bare_Decl =>
            
               return L.As_Bare_Decl = R.As_Bare_Decl;
         when Mmz_Bare_Expr =>
            
               return L.As_Bare_Expr = R.As_Bare_Expr;
         when Mmz_Bare_Lexer_Decl =>
            
               return L.As_Bare_Lexer_Decl = R.As_Bare_Lexer_Decl;
         when Mmz_Bare_Lkt_Node =>
            
               return L.As_Bare_Lkt_Node = R.As_Bare_Lkt_Node;
         when Mmz_Bare_Param_List =>
            
               return L.As_Bare_Param_List = R.As_Bare_Param_List;
         when Mmz_Bare_Ref_Id =>
            
               return L.As_Bare_Ref_Id = R.As_Bare_Ref_Id;
         when Mmz_Bare_Struct_Decl =>
            
               return L.As_Bare_Struct_Decl = R.As_Bare_Struct_Decl;
         when Mmz_Bare_Type_Decl =>
            
               return L.As_Bare_Type_Decl = R.As_Bare_Type_Decl;
         when Mmz_Bare_Type_Ref =>
            
               return L.As_Bare_Type_Ref = R.As_Bare_Type_Ref;
         when Mmz_Boolean =>
            
               return L.As_Boolean = R.As_Boolean;
         when Mmz_Env_Rebindings =>
            
               return L.As_Env_Rebindings = R.As_Env_Rebindings;
         when Mmz_Internal_Entity =>
            
               return L.As_Internal_Entity = R.As_Internal_Entity;
         when Mmz_Internal_Entity_Decl =>
            
               return L.As_Internal_Entity_Decl = R.As_Internal_Entity_Decl;
         when Mmz_Internal_Entity_Info =>
            
               return L.As_Internal_Entity_Info = R.As_Internal_Entity_Info;
         when Mmz_Internal_Entity_Param_List =>
            
               return L.As_Internal_Entity_Param_List = R.As_Internal_Entity_Param_List;
         when Mmz_Internal_Entity_Type_Decl =>
            
               return L.As_Internal_Entity_Type_Decl = R.As_Internal_Entity_Type_Decl;
         when Mmz_Internal_Entity_Type_Decl_Array_Access =>
            
               return Equivalent (L.As_Internal_Entity_Type_Decl_Array_Access, R.As_Internal_Entity_Type_Decl_Array_Access);
         when Mmz_Internal_Formal_Param_Array_Access =>
            
               return Equivalent (L.As_Internal_Formal_Param_Array_Access, R.As_Internal_Formal_Param_Array_Access);
         when Mmz_Internal_Metadata =>
            
               return L.As_Internal_Metadata = R.As_Internal_Metadata;
         when Mmz_Symbol_Type =>
            
               return L.As_Symbol_Type = R.As_Symbol_Type;
   end case;
end Equivalent;

----------
-- Hash --
----------

function Hash (Key : Mmz_Key_Item) return Hash_Type is
begin
   case Key.Kind is
         when Mmz_Bare_Base_Dot_Expr =>
            return Hash (Key.As_Bare_Base_Dot_Expr);
         when Mmz_Bare_Basic_Class_Decl =>
            return Hash (Key.As_Bare_Basic_Class_Decl);
         when Mmz_Bare_Class_Decl =>
            return Hash (Key.As_Bare_Class_Decl);
         when Mmz_Bare_Decl =>
            return Hash (Key.As_Bare_Decl);
         when Mmz_Bare_Expr =>
            return Hash (Key.As_Bare_Expr);
         when Mmz_Bare_Lexer_Decl =>
            return Hash (Key.As_Bare_Lexer_Decl);
         when Mmz_Bare_Lkt_Node =>
            return Hash (Key.As_Bare_Lkt_Node);
         when Mmz_Bare_Param_List =>
            return Hash (Key.As_Bare_Param_List);
         when Mmz_Bare_Ref_Id =>
            return Hash (Key.As_Bare_Ref_Id);
         when Mmz_Bare_Struct_Decl =>
            return Hash (Key.As_Bare_Struct_Decl);
         when Mmz_Bare_Type_Decl =>
            return Hash (Key.As_Bare_Type_Decl);
         when Mmz_Bare_Type_Ref =>
            return Hash (Key.As_Bare_Type_Ref);
         when Mmz_Boolean =>
            return Hash (Key.As_Boolean);
         when Mmz_Env_Rebindings =>
            return Hash (Key.As_Env_Rebindings);
         when Mmz_Internal_Entity =>
            return Hash (Key.As_Internal_Entity);
         when Mmz_Internal_Entity_Decl =>
            return Hash (Key.As_Internal_Entity_Decl);
         when Mmz_Internal_Entity_Info =>
            return Hash (Key.As_Internal_Entity_Info);
         when Mmz_Internal_Entity_Param_List =>
            return Hash (Key.As_Internal_Entity_Param_List);
         when Mmz_Internal_Entity_Type_Decl =>
            return Hash (Key.As_Internal_Entity_Type_Decl);
         when Mmz_Internal_Entity_Type_Decl_Array_Access =>
            return Hash (Key.As_Internal_Entity_Type_Decl_Array_Access);
         when Mmz_Internal_Formal_Param_Array_Access =>
            return Hash (Key.As_Internal_Formal_Param_Array_Access);
         when Mmz_Internal_Metadata =>
            return Hash (Key.As_Internal_Metadata);
         when Mmz_Symbol_Type =>
            return Hash (Key.As_Symbol_Type);
   end case;
end Hash;

----------
-- Hash --
----------

function Hash (Key : Mmz_Key) return Hash_Type is
   Result : Hash_Type := Mmz_Property'Pos (Key.Property);
begin
   for K of Key.Items.all loop
      Result := Combine (Result, Hash (K));
   end loop;
   return Result;
end Hash;

----------------
-- Equivalent --
----------------

function Equivalent (L, R : Mmz_Key) return Boolean is
   L_Items : Mmz_Key_Array renames L.Items.all;
   R_Items : Mmz_Key_Array renames R.Items.all;
begin
   if L.Property /= R.Property or else L_Items'Length /= R_Items'Length then
      return False;
   end if;

   for I in L_Items'Range loop
      if not Equivalent (L_Items (I), R_Items (I)) then
         return False;
      end if;
   end loop;

   return True;
end Equivalent;

-------------
-- Destroy --
-------------

procedure Destroy (Map : in out Memoization_Maps.Map) is
   use Memoization_Maps;

   --  We need keys and values to be valid when clearing the memoization map,
   --  but on the other hand we need to free keys and values as well. To
   --  achieve both goals, we first copy key and values into arrays, then we
   --  clear the map, and then we free keys/values in the arrays. Allocate both
   --  arrays on the heap to avoid stack overflow, as they can be quite big.

   Length : constant Natural := Natural (Map.Length);

   type Key_Array is array (1 .. Length) of Mmz_Key_Array_Access;
   type Key_Array_Access is access Key_Array;
   procedure Free is new Ada.Unchecked_Deallocation
     (Key_Array, Key_Array_Access);

   type Value_Array is array (1 .. Length) of Mmz_Value;
   type Value_Array_Access is access Value_Array;
   procedure Free is new Ada.Unchecked_Deallocation
     (Value_Array, Value_Array_Access);

   Keys   : Key_Array_Access := new Key_Array;
   Values : Value_Array_Access := new Value_Array;
   I      : Positive := 1;
begin
   for Cur in Map.Iterate loop
      Keys (I) := Key (Cur).Items;
      Values (I) := Element (Cur);
      I := I + 1;
   end loop;

   Map.Clear;

   for K_Array of Keys.all loop
      Destroy (K_Array);
   end loop;

   
   for V of Values.all loop
      case V.Kind is
         when Mmz_Error =>
            Free_Memoized_Error (V.Exc_Id, V.Exc_Msg);

            when Mmz_Internal_Env_Assoc_Array_Access =>
               Dec_Ref (V.As_Internal_Env_Assoc_Array_Access);
            when Mmz_Internal_Formal_Param_Array_Access =>
               Dec_Ref (V.As_Internal_Formal_Param_Array_Access);
            when Mmz_Internal_Param_Match_Array_Access =>
               Dec_Ref (V.As_Internal_Param_Match_Array_Access);
            when Mmz_Internal_Solver_Result =>
               Dec_Ref (V.As_Internal_Solver_Result);
            when Mmz_Lexical_Env =>
               Dec_Ref (V.As_Lexical_Env);

         when others => null;
      end case;
   end loop;

   Free (Keys);
   Free (Values);
end Destroy;

-------------
-- Destroy --
-------------

procedure Destroy (Key : in out Mmz_Key_Array_Access) is
   procedure Free is new Ada.Unchecked_Deallocation
     (Mmz_Key_Array, Mmz_Key_Array_Access);
begin
   

      for K of Key.all loop
         case K.Kind is
               when Mmz_Internal_Entity_Type_Decl_Array_Access =>
                  Dec_Ref (K.As_Internal_Entity_Type_Decl_Array_Access);
               when Mmz_Internal_Formal_Param_Array_Access =>
                  Dec_Ref (K.As_Internal_Formal_Param_Array_Access);

            when others => null;
         end case;
      end loop;
   Free (Key);
end Destroy;

-------------------------
-- Find_Memoized_Value --
-------------------------

function Find_Memoized_Value
  (Unit       : Internal_Unit;
   Handle     : out Memoization_Handle;
   Value      : out Mmz_Value;
   Create_Key : access function return Mmz_Key) return Boolean
is
   Inserted : Boolean;
begin
   --  Make sure that we don't lookup stale caches
   Reset_Caches (Unit);

   --  Initialize handle: create the key and create a cursor pointing to an
   --  existing entry.
   Handle.Key := Create_Key.all;
   Handle.Cache_Version := Unit.Cache_Version;
   Value := (Kind => Mmz_Evaluating);
   Unit.Memoization_Map.Insert (Handle.Key, Value, Handle.Cur, Inserted);

   --  No existing entry yet? The above just created one. Otherwise, destroy
   --  our key and reuse the existing entry's.
   if not Inserted then
      Destroy (Handle.Key.Items);
      Handle.Key := Memoization_Maps.Key (Handle.Cur);
      Value := Memoization_Maps.Element (Handle.Cur);
   end if;

   return not Inserted;
end Find_Memoized_Value;

------------------------
-- Add_Memoized_Value --
------------------------

procedure Add_Memoized_Value
  (Unit   : Internal_Unit;
   Handle : in out Memoization_Handle;
   Value  : Mmz_Value;
   Stored : out Boolean) is
begin
   --  If Handle was created using a memoization map that has been since then
   --  reset, do nothing: the result can be partly stale due to the event that
   --  triggered the memoization tables reset.

   Stored := Unit.Cache_Version <= Handle.Cache_Version;
   if Stored then
      Unit.Memoization_Map.Replace_Element (Handle.Cur, Value);
   end if;
end Add_Memoized_Value;

------------------------
-- Add_Memoized_Error --
------------------------

procedure Add_Memoized_Error
  (Unit   : Internal_Unit;
   Handle : in out Memoization_Handle;
   Exc    : Ada.Exceptions.Exception_Occurrence;
   Stored : out Boolean)
is
   Value : Mmz_Value (Kind => Mmz_Error);
begin
   Store_Memoized_Error (Exc, Value.Exc_Id, Value.Exc_Msg);
   Add_Memoized_Value (Unit, Handle, Value, Stored);
   if not Stored then
      Free_Memoized_Error (Value.Exc_Id, Value.Exc_Msg);
   end if;
end Add_Memoized_Error;

----------------------------
-- Reraise_Memoized_Error --
----------------------------

procedure Reraise_Memoized_Error (Value : Mmz_Value) is
begin
   Reraise_Memoized_Error (Value.Exc_Id, Value.Exc_Msg);
end Reraise_Memoized_Error;

--------------------------
-- Store_Memoized_Error --
--------------------------

procedure Store_Memoized_Error
  (Exc     : Ada.Exceptions.Exception_Occurrence;
   Exc_Id  : out Ada.Exceptions.Exception_Id;
   Exc_Msg : out String_Access) is
begin
   Exc_Id := Ada.Exceptions.Exception_Identity (Exc);
   Exc_Msg := new String'(Ada.Exceptions.Exception_Message (Exc));
end Store_Memoized_Error;

-------------------------
-- Free_Memoized_Error --
-------------------------

procedure Free_Memoized_Error
  (Exc_Id  : in out Ada.Exceptions.Exception_Id;
   Exc_Msg : in out String_Access)
is
   pragma Unreferenced (Exc_Id);
begin
   Free (Exc_Msg);
end Free_Memoized_Error;

----------------------------
-- Reraise_Memoized_Error --
----------------------------

procedure Reraise_Memoized_Error
  (Exc_Id  : Ada.Exceptions.Exception_Id;
   Exc_Msg : String_Access) is
begin
   Ada.Exceptions.Raise_Exception (Exc_Id, Exc_Msg.all & " (memoized)");
end Reraise_Memoized_Error;



   package Solver_Diagnostic_Vectors is new Liblktlang_Support.Vectors
     (Internal_Solver_Diagnostic);

   ----------------------------
   -- Allocate_Logic_Context --
   ----------------------------

   function Allocate_Logic_Context
     (Ctx : Internal_Logic_Context) return Internal_Logic_Context_Access
   is ((if Ctx.Ref_Node = No_Entity
           and then Ctx.Decl_Node = No_Entity
        then null
        else new Internal_Logic_Context'(Ctx)));

   -------------------------
   -- Trace_Logic_Context --
   -------------------------

   function Trace_Logic_Context
     (Ctx : Internal_Logic_Context_Access) return String
   is (Trace_Image (Ctx.all));

   -----------------
   -- Deep_Equals --
   -----------------

   function Deep_Equals
     (X, Y : Internal_Logic_Context_Access) return Boolean
   is (X.all = Y.all);

   ------------------------
   -- Free_Logic_Context --
   ------------------------

   procedure Free_Logic_Context
     (Ctx : in out Internal_Logic_Context_Access)
   is
      procedure Free is new Ada.Unchecked_Deallocation
        (Internal_Logic_Context, Internal_Logic_Context_Access);
   begin
      Free (Ctx);
   end Free_Logic_Context;

   -------------------
   -- Solve_Wrapper --
   -------------------

   function Solve_Wrapper
     (R            : Solver.Relation;
      Context_Node : Bare_Lkt_Node) return Boolean is
   begin
      if Context_Node /= null and then Liblktlang_Support.Adalog.Debug.Debug then
         Assign_Names_To_Logic_Vars (Context_Node);
      end if;

      begin
         return Solver.Solve_First
           (R, Timeout => Context_Node.Unit.Context.Logic_Resolution_Timeout);
      exception
         when Liblktlang_Support.Adalog.Early_Binding_Error =>
            Raise_Property_Exception
              (Context_Node,
               Property_Error'Identity,
               "invalid equation for logic resolution");
         when Liblktlang_Support.Adalog.Timeout_Error =>
            Raise_Property_Exception
              (Context_Node,
               Property_Error'Identity,
               "logic resolution timed out");
      end;
   end Solve_Wrapper;

   ----------------------------
   -- Solve_With_Diagnostics --
   ----------------------------

   function Solve_With_Diagnostics
     (R            : Solver.Relation;
      Context_Node : Bare_Lkt_Node) return Internal_Solver_Result
   is
      Ret : Internal_Solver_Result :=
        (True, No_Internal_Solver_Diagnostic_Array_Type);

      Acc : Solver_Diagnostic_Vectors.Vector;
      --  Vectors that will accumulate diagnostic emitted during resolution

      procedure Emit_Diagnostic (Diag : Internal_Solver_Diagnostic) is
      begin
         Acc.Append (Diag);
      end Emit_Diagnostic;
   begin
      Ret.Success := Solve_Wrapper (R, Context_Node);

      if not Ret.Success then
         Ret.Success := Solver.Solve_First
           (R,
            Solve_Options => (Report_Errors => True),
            Diag_Emitter => Emit_Diagnostic'Unrestricted_Access,
            Timeout => Context_Node.Unit.Context.Logic_Resolution_Timeout);
         Ret.Diagnostics := Create_Internal_Solver_Diagnostic_Array
           (Acc.Length);
         for I in 1 .. Acc.Length loop
            Ret.Diagnostics.Items (I) := Acc.Get (I);
         end loop;
         Acc.Destroy;
      end if;
      return Ret;
   end Solve_With_Diagnostics;

   -------------
   -- Destroy --
   -------------

   procedure Destroy (Env : in out Lexical_Env_Access) is
      Mutable_Env : Lexical_Env :=
        (Wrap (Env), 0, Env.Kind, No_Generic_Unit, 0);
   begin
      Destroy (Mutable_Env);
      Env := null;
   end Destroy;

   ----------------
   -- Initialize --
   ----------------

   procedure Initialize
     (Self              : Bare_Lkt_Node;
      Kind              : Lkt_Node_Kind_Type;
      Unit              : Internal_Unit;
      Token_Start_Index : Token_Index;
      Token_End_Index   : Token_Index;
      Parent            : Bare_Lkt_Node := null;
      Self_Env          : Lexical_Env := AST_Envs.Empty_Env) is
   begin
      pragma Unreferenced (Kind);
      Self.Parent := Parent;
      Self.Unit := Unit;

      Self.Token_Start_Index := Token_Start_Index;
      Self.Token_End_Index := Token_End_Index;

      Self.Self_Env := Self_Env;
      Self.Last_Attempted_Child := -1;

      

   end Initialize;

   --------------------
   -- Use_Direct_Env --
   --------------------

   procedure Use_Direct_Env (State : in out PLE_Node_State; Env : Lexical_Env)
   is
   begin
      State.Current_Env := Env;
      State.Current_NED := null;
   end Use_Direct_Env;

   -------------------
   -- Use_Named_Env --
   -------------------

   procedure Use_Named_Env
     (State   : in out PLE_Node_State;
      Context : Internal_Context;
      Name    : Symbol_Type) is
   begin
      State.Current_NED := Get_Named_Env_Descriptor (Context, Name);
      State.Current_Env := State.Current_NED.Env_With_Precedence;
   end Use_Named_Env;

   ---------------------
   -- Set_Initial_Env --
   ---------------------

   procedure Set_Initial_Env
     (Self         : Bare_Lkt_Node;
      State        : in out PLE_Node_State;
      Env          : Internal_Designated_Env;
      DSL_Location : String) is
   begin
      case Env.Kind is
         when None =>
            Use_Direct_Env (State, Empty_Env);

         when Current_Env =>
            null;

         when Named_Env =>
            Use_Named_Env (State, Self.Unit.Context, Env.Env_Name);

         when Direct_Env =>

            --  Sanitize this environment value: make sure it's a non-foreign
            --  and primary environment.

            if Env.Direct_Env.Kind /= Static_Primary then
               Raise_Property_Exception
                 (Self,
                  Property_Error'Identity,
                  "Cannot set an env that is not static-primary as the"
                  & " initial env");

            elsif Is_Foreign_Strict (Env.Direct_Env, Self) then
               Raise_Property_Exception
                 (Self,
                  Property_Error'Identity,
                  "unsound foreign environment in SetInitialEnv ("
                  & DSL_Location & ")");
            end if;
            Use_Direct_Env (State, Env.Direct_Env);
      end case;
   end Set_Initial_Env;

   ----------------
   -- Add_To_Env --
   ----------------

   procedure Add_To_Env
     (Self         : Bare_Lkt_Node;
      State        : PLE_Node_State;
      Key          : Symbol_Type;
      Value        : Bare_Lkt_Node;
      Md           : Internal_Metadata;
      Resolver     : Entity_Resolver;
      Dest_Env     : Internal_Designated_Env;
      DSL_Location : String)
   is
      Context    : constant Internal_Context := Self.Unit.Context;
      Root_Scope : Lexical_Env renames Context.Root_Scope;
      --  Shortcuts

      Actual_Dest_Env : Lexical_Env;
      Dest_NED        : Named_Env_Descriptor_Access;
      --  Description for the destination environment
   begin
      --  Skip the env addition if explicitly requested

      if Key = No_Symbol
         or else Value = null
         or else (case Dest_Env.Kind is
                  when None        => True,
                  when Current_Env => False,
                  when Named_Env   => Dest_Env.Env_Name = No_Symbol,
                  when Direct_Env  => Dest_Env.Direct_Env = Empty_Env)
      then
         return;
      end if;

      if Value.Unit /= Self.Unit then
         Raise_Property_Exception
           (Self,
            Property_Error'Identity,
            "Cannot add_to_env an AST node that comes from another analysis"
            & " unit");
      end if;

      

      --  Then determine the destination environment

      case Dest_Env.Kind is
         when None =>
            raise Program_Error with "unreachable code";

         when Current_Env =>
            --  Just use the current environment
            Dest_NED := State.Current_NED;
            Actual_Dest_Env := State.Current_Env;

         when Named_Env =>
            --  There is an environment name: just lookup the corresponding
            --  NED/env.
            Dest_NED := Get_Named_Env_Descriptor (Context, Dest_Env.Env_Name);
            Actual_Dest_Env := Dest_NED.Env_With_Precedence;

         when Direct_Env =>
            --  There is an explicit destination environment
            Dest_NED := null;
            Actual_Dest_Env := Dest_Env.Direct_Env;
      end case;

      --  Sanitize it

      if Actual_Dest_Env.Kind /= Static_Primary then
         Raise_Property_Exception
           (Self,
            Property_Error'Identity,
            "Cannot add elements to a lexical env that is not static-primary");

      elsif
         --  Since lexical envs need to sort the foreign nodes they contain,
         --  and that the total order on nodes is not defined for synthetic
         --  nodes, it is not possible to add a synthetic node to a foreign
         --  lexical environment.
         --
         --  This reasoning applies to environments that belong to foreign
         --  units, but also to the root environment.
         Is_Foreign (Actual_Dest_Env, Self) and then Is_Synthetic (Value)
      then
         Raise_Property_Exception
           (Self,
            Property_Error'Identity,
            "Cannot add a synthetic node to a lexical env from another"
            & " analysis unit");

      elsif
         --  Reject direct references to foreign destination environments.
         --
         --  This is an attempt at identifying uses of the unsound relocation
         --  mechanism (as opposed to named environments), so this applies to
         --  all foreign environments (root scope included).
         DSL_Location'Length > 0
         and then Dest_Env.Kind = Direct_Env
         and then Is_Foreign_Strict (Actual_Dest_Env, Self)
      then
         Raise_Property_Exception
           (Self,
            Property_Error'Identity,
            "unsound foreign environment in AddToEnv (" & DSL_Location & ")");
      end if;

      --  Now that everything is sanitized, we can proceed with the actual
      --  key/value pair addition. Note that this does nothing if
      --  Actual_Dest_Env ended up empty.
      Add (Actual_Dest_Env, Thin (Key), Value, Md, Resolver);

      --  If we're adding the element to an environment by env name, we must
      --  register this association in two places: in the target named env
      --  entry, and in Value's unit.
      if Dest_NED /= null then
         declare
            use NED_Assoc_Maps;

            FN    : Map renames Dest_NED.Foreign_Nodes;
            Dummy : Boolean;
            Cur   : Cursor;
         begin
            FN.Insert (Key      => Key,
                       New_Item => Internal_Map_Node_Vectors.Empty_Vector,
                       Position => Cur,
                       Inserted => Dummy);
            declare
               V : Internal_Map_Node_Vectors.Vector renames
                  FN.Reference (Cur);
            begin
               V.Append ((Value, null, Md, Resolver));
               --  Note that the rebindings field is unused by the relocation
               --  mechanism (since we don't even allow adding env entries
               --  with custom rebindings), hence we simply leave it to null.
            end;
         end;
         Value.Unit.Exiled_Entries_In_NED.Append ((Dest_NED, Key, Value));

      --  Otherwise, if we're adding the element to an environment that belongs
      --  to a different unit, or to the root scope, then...
      elsif Is_Foreign_Not_Empty (Actual_Dest_Env, Self) then
         --  Add the Key/Value association to the list of entries contained in
         --  other units, so we can remove them when reparsing Value's unit.
         Value.Unit.Exiled_Entries.Append ((Actual_Dest_Env, Key, Value));

         if Actual_Dest_Env /= Root_Scope then
            --  Add Val to the list of foreign nodes that Actual_Dest_Env's
            --  unit contains, so that when that unit is reparsed, we can call
            --  Add_To_Env again on those nodes.
            Convert_Unit (Actual_Dest_Env.Owner).Foreign_Nodes.Append
              ((Value, Self.Unit));
         end if;
      end if;
   end Add_To_Env;

   -------------
   -- Ref_Env --
   -------------

   procedure Ref_Env
     (Self                : Bare_Lkt_Node;
      Dest_Env            : Lexical_Env;
      Ref_Env_Nodes       : in out Bare_Lkt_Node_Array_Access;
      Resolver            : Lexical_Env_Resolver;
      Kind                : Ref_Kind;
      Cats                : Ref_Categories;
      Shed_Rebindings     : Boolean) is
   begin
      for N of Ref_Env_Nodes.Items loop
         if N /= null then
            if N.Unit /= Self.Unit then
               Raise_Property_Exception
                 (Self,
                  Property_Error'Identity,
                  "attempt to add a referenced environment to a foreign unit");
            end if;
            Reference (Dest_Env, N, Resolver, Kind, Cats, Shed_Rebindings);
         end if;
      end loop;
      Dec_Ref (Ref_Env_Nodes);
   end Ref_Env;

   -------------
   -- Add_Env --
   -------------

   procedure Add_Env
     (Self              : Bare_Lkt_Node;
      State             : in out PLE_Node_State;
      No_Parent         : Boolean;
      Transitive_Parent : Boolean;
      Names             : in out Symbol_Type_Array_Access)
   is
      Parent_From_Name : constant Boolean := State.Current_NED /= null;
      --  Does the parent environment comes from a named environment lookup?

      --  Determine the parent of this new environment:
      --
      --  (1) no parent if requested;
      --  (2) the current environment as the static parent if it comes from a
      --      named env lookup or if it is not foreign (or is the empty/root
      --      environment).
      Parent : constant Lexical_Env :=
        (if No_Parent
         then Null_Lexical_Env
         else State.Current_Env);
   begin
      --  Create the environment itself
      Self.Self_Env := Create_Static_Lexical_Env
        (Parent            => Parent,
         Node              => Self,
         Transitive_Parent => Transitive_Parent,
         Sym_Table         => Self.Unit.Context.Symbols);

      --  If the parent of this new environment comes from a named environment
      --  lookup, register this new environment so that its parent is updated
      --  when the precence for this named environment changes.
      if Parent_From_Name then
         declare
            NED : constant Named_Env_Descriptor_Access := State.Current_NED;
         begin
            Self.Unit.Exiled_Envs.Append ((NED, Self.Self_Env));
            NED.Foreign_Envs.Insert (Self, Self.Self_Env);
         end;
      end if;

      --  From now on, the current environment is Self.Self_Env, with a direct
      --  access to it. It does not go through the env naming scheme, since
      --  only this node and its children (i.e. non-foreign nodes) will access
      --  it as a "current" environment during PLE.
      Use_Direct_Env (State, Self.Self_Env);

      --  Register the environment we just created on all the requested names
      if Names /= null then
         declare
            Context   : constant Internal_Context := Self.Unit.Context;
            Env       : constant Lexical_Env := Self.Self_Env;
            NENU      : NED_Maps.Map renames
               State.Unit_State.Named_Envs_Needing_Update;
         begin
            for N of Names.Items loop
               Register_Named_Env (Context, N, Env, NENU);
            end loop;
            Dec_Ref (Names);
         end;
      end if;
   end Add_Env;

   ---------------------
   -- Pre_Env_Actions --
   ---------------------

   procedure Pre_Env_Actions
     (Self            : Bare_Lkt_Node;
      State           : in out PLE_Node_State;
      Add_To_Env_Only : Boolean := False) is
   begin

      
   

   case Self.Kind is
            when Lkt_Match_Branch =>
            
            Match_Branch_Pre_Env_Actions (Self, State, Add_To_Env_Only);
      
            when Lkt_Decl_Block =>
            
            Decl_Block_Pre_Env_Actions (Self, State, Add_To_Env_Only);
      
            when Lkt_Langkit_Root =>
            
            Langkit_Root_Pre_Env_Actions (Self, State, Add_To_Env_Only);
      
            when Lkt_Import =>
            
            Import_Pre_Env_Actions (Self, State, Add_To_Env_Only);
      
            when Lkt_Lambda_Expr =>
            
            Lambda_Expr_Pre_Env_Actions (Self, State, Add_To_Env_Only);
      
            when Lkt_Block_Expr =>
            
            Block_Expr_Pre_Env_Actions (Self, State, Add_To_Env_Only);
      
            when Lkt_Enum_Type_Decl =>
            
            Enum_Type_Decl_Pre_Env_Actions (Self, State, Add_To_Env_Only);
      
            when Lkt_Enum_Class_Decl =>
            
            Enum_Class_Decl_Pre_Env_Actions (Self, State, Add_To_Env_Only);
      
            when Lkt_Enum_Class_Alt_Decl =>
            
            null;
      
            when Lkt_Lexer_Decl =>
            
            Lexer_Decl_Pre_Env_Actions (Self, State, Add_To_Env_Only);
      
            when Lkt_Grammar_Decl =>
            
            Grammar_Decl_Pre_Env_Actions (Self, State, Add_To_Env_Only);
      
            when Lkt_Generic_Decl =>
            
            Generic_Decl_Pre_Env_Actions (Self, State, Add_To_Env_Only);
      
            when Lkt_Env_Spec_Decl =>
            
            Env_Spec_Decl_Pre_Env_Actions (Self, State, Add_To_Env_Only);
      
            when Lkt_Fun_Decl =>
            
            Fun_Decl_Pre_Env_Actions (Self, State, Add_To_Env_Only);
      
            when Lkt_Field_Decl =>
            
            Field_Decl_Pre_Env_Actions (Self, State, Add_To_Env_Only);
      
            when Lkt_Enum_Lit_Decl =>
            
            null;
      
            when Lkt_Grammar_Rule_Decl .. Lkt_Self_Decl | Lkt_Fun_Arg_Decl .. Lkt_Val_Decl | Lkt_Lexer_Family_Decl .. Lkt_Any_Type_Decl | Lkt_Function_Type .. Lkt_Class_Decl | Lkt_Struct_Decl .. Lkt_Trait_Decl =>
            
            Decl_Pre_Env_Actions (Self, State, Add_To_Env_Only);
      
      when others =>  null; 
   end case;


   end Pre_Env_Actions;

   ----------------------
   -- Post_Env_Actions --
   ----------------------

   procedure Post_Env_Actions
     (Self : Bare_Lkt_Node; State : in out PLE_Node_State) is
   begin
      
   

   case Self.Kind is
            when Lkt_Match_Branch =>
            
            null;
      
            when Lkt_Decl_Block =>
            
            null;
      
            when Lkt_Langkit_Root =>
            
            Langkit_Root_Post_Env_Actions (Self, State);
      
            when Lkt_Import =>
            
            null;
      
            when Lkt_Lambda_Expr =>
            
            null;
      
            when Lkt_Block_Expr =>
            
            null;
      
            when Lkt_Enum_Type_Decl =>
            
            Enum_Type_Decl_Post_Env_Actions (Self, State);
      
            when Lkt_Enum_Class_Decl =>
            
            Enum_Class_Decl_Post_Env_Actions (Self, State);
      
            when Lkt_Enum_Class_Alt_Decl =>
            
            null;
      
            when Lkt_Lexer_Decl =>
            
            null;
      
            when Lkt_Grammar_Decl =>
            
            null;
      
            when Lkt_Generic_Decl =>
            
            null;
      
            when Lkt_Env_Spec_Decl =>
            
            null;
      
            when Lkt_Fun_Decl =>
            
            null;
      
            when Lkt_Field_Decl =>
            
            null;
      
            when Lkt_Enum_Lit_Decl =>
            
            null;
      
            when Lkt_Grammar_Rule_Decl .. Lkt_Self_Decl | Lkt_Fun_Arg_Decl .. Lkt_Val_Decl | Lkt_Lexer_Family_Decl .. Lkt_Any_Type_Decl | Lkt_Function_Type .. Lkt_Class_Decl | Lkt_Struct_Decl .. Lkt_Trait_Decl =>
            
            null;
      
      when others =>  null; 
   end case;


   end Post_Env_Actions;

   ----------------
   -- Get_Symbol --
   ----------------

   function Get_Symbol
     (Node : Bare_Lkt_Node) return Symbol_Type is
   begin
      if Node = null then
         Raise_Property_Exception
           (Node,
            Property_Error'Identity,
            "cannot get the symbol of a null node");
      end if;
      return Get_Symbol (Token (Node, Node.Token_Start_Index));
   end Get_Symbol;

   ----------
   -- Text --
   ----------

   function Text
     (Node : Bare_Lkt_Node) return Text_Type
   is
   begin
      if Node = null then
         Raise_Property_Exception
           (Node,
            Property_Error'Identity,
            "cannot get the text of a null node");
      end if;

      declare
         Start_T : constant Token_Reference :=
            Token (Node, Node.Token_Start_Index);
         End_T   : constant Token_Reference :=
            Token (Node, Node.Token_End_Index);
      begin
         --  No text is associated to synthetic and ghost nodes

         if Is_Synthetic (Node) then
            return "";
         end if;

         if Is_Ghost (Node) then
            return "";
         end if;

         return Text (Start_T, End_T);
      end;
   end Text;

   ---------------------
   -- Is_Visible_From --
   ---------------------

   function Is_Visible_From
     (Self                     : Bare_Lkt_Node;
      Referenced_Env, Base_Env : Lexical_Env) return Boolean
   is
      Referenced_Unit : constant Internal_Unit :=
         Convert_Unit (Referenced_Env.Owner);
      Base_Unit       : constant Internal_Unit :=
         Convert_Unit (Base_Env.Owner);
   begin
      if Referenced_Unit = null then
         Raise_Property_Exception
           (Self,
            Property_Error'Identity,
            "referenced environment does not belong to any analysis unit");
      elsif Base_Unit = null then
         Raise_Property_Exception
           (Self,
            Property_Error'Identity,
            "base environment does not belong to any analysis unit");
      end if;
      return Is_Referenced_From (Referenced_Unit, Base_Unit);
   end Is_Visible_From;

   ----------
   -- Unit --
   ----------

   function Unit (Node : Bare_Lkt_Node) return Internal_Unit is
   begin
      return Node.Unit;
   end Unit;

   function Lookup_Internal
     (Node : Bare_Lkt_Node;
      Sloc : Source_Location) return Bare_Lkt_Node;
   procedure Lookup_Relative
     (Node       : Bare_Lkt_Node;
      Sloc       : Source_Location;
      Position   : out Relative_Position;
      Node_Found : out Bare_Lkt_Node);
   --  Implementation helpers for the looking up process

   -----------------
   -- Set_Parents --
   -----------------

   procedure Set_Parents
     (Node, Parent : Bare_Lkt_Node)
   is
   begin
      if Node = null then
         return;
      end if;

      Node.Parent := Bare_Lkt_Node (Parent);

      for I in 1 .. Children_Count (Node) loop
         Set_Parents (Child (Node, I), Node);
      end loop;
   end Set_Parents;

   -------------
   -- Destroy --
   -------------

   procedure Destroy (Node : Bare_Lkt_Node) is
   begin
      if Node = null then
         return;
      end if;

      Free_User_Fields (Node);
      for I in 1 .. Children_Count (Node) loop
         Destroy (Child (Node, I));
      end loop;
   end Destroy;

   -----------
   -- Child --
   -----------

   function Child (Node  : Bare_Lkt_Node;
                   Index : Positive) return Bare_Lkt_Node
   is
      Result          : Bare_Lkt_Node;
      Index_In_Bounds : Boolean;
   begin
      Get_Child (Node, Index, Index_In_Bounds, Result);
      return Result;
   end Child;

   --------------
   -- Traverse --
   --------------

   function Traverse
     (Node  : Bare_Lkt_Node;
      Visit : access function (Node : Bare_Lkt_Node)
              return Visit_Status)
     return Visit_Status
   is
      Status : Visit_Status := Into;

   begin
      if Node /= null then
         Status := Visit (Node);

         --  Skip processing the child nodes if the returned status is Over
         --  or Stop. In the former case the previous call to Visit has taken
         --  care of processing the needed childs, and in the latter case we
         --  must immediately stop processing the tree.

         if Status = Into then
            for I in 1 .. Children_Count (Node) loop
               declare
                  Cur_Child : constant Bare_Lkt_Node :=
                     Child (Node, I);

               begin
                  if Cur_Child /= null then
                     Status := Traverse (Cur_Child, Visit);
                     exit when Status /= Into;
                  end if;
               end;
            end loop;
         end if;
      end if;

      if Status = Stop then
         return Stop;

      --  At this stage the Over status has no sense and we just continue
      --  processing the tree.

      else
         return Into;
      end if;
   end Traverse;

   --------------
   -- Traverse --
   --------------

   procedure Traverse
     (Node  : Bare_Lkt_Node;
      Visit : access function (Node : Bare_Lkt_Node)
                               return Visit_Status)
   is
      Result_Status : Visit_Status;
      pragma Unreferenced (Result_Status);
   begin
      Result_Status := Traverse (Node, Visit);
   end Traverse;

   ------------------------
   -- Traverse_With_Data --
   ------------------------

   function Traverse_With_Data
     (Node  : Bare_Lkt_Node;
      Visit : access function (Node : Bare_Lkt_Node;
                               Data : in out Data_Type)
                               return Visit_Status;
      Data  : in out Data_Type)
      return Visit_Status
   is
      function Helper (Node : Bare_Lkt_Node) return Visit_Status;

      ------------
      -- Helper --
      ------------

      function Helper (Node : Bare_Lkt_Node) return Visit_Status is
      begin
         return Visit (Node, Data);
      end Helper;

      Saved_Data : Data_Type;
      Result     : Visit_Status;

   begin
      if Reset_After_Traversal then
         Saved_Data := Data;
      end if;
      Result := Traverse (Node, Helper'Access);
      if Reset_After_Traversal then
         Data := Saved_Data;
      end if;
      return Result;
   end Traverse_With_Data;

   ----------------
   -- Sloc_Range --
   ----------------

   function Sloc_Range
     (Node : Bare_Lkt_Node) return Source_Location_Range
   is
      type Token_Anchor is (T_Start, T_End);
      type Token_Pos is record
         Pos    : Token_Index;
         Anchor : Token_Anchor;
      end record;

      TDH                    : Token_Data_Handler renames Node.Unit.TDH;
      Token_Start, Token_End : Token_Pos;

      function Get (Index : Token_Index) return Stored_Token_Data is
        (Get_Token (TDH, Index));

      function Sloc (T : Token_Pos) return Source_Location is
        (if T.Anchor = T_Start
         then Sloc_Start (TDH, Get (T.Pos))
         else Sloc_End (TDH, Get (T.Pos)));

   begin
      if Is_Synthetic (Node) then
         return (if Node.Parent = null
                 then No_Source_Location_Range
                 else Sloc_Range (Node.Parent));
      end if;

      if Is_Ghost (Node) then
         Token_Start := (if Node.Token_Start_Index = 1
                         then (1, T_Start)
                         else (Node.Token_Start_Index - 1, T_End));
         Token_End := Token_Start;
      else
         Token_Start := (Node.Token_Start_Index, T_Start);
         Token_End := (Node.Token_End_Index, T_End);
      end if;

      if Snaps_At_Start (Node)
         and then not Is_Ghost (Node)
         and then Token_Start.Pos /= 1
      then
         Token_Start := (Token_Start.Pos - 1, T_End);
      end if;

      if Snaps_At_End (Node) and then Token_End.Pos /= Last_Token (TDH) then
         Token_End := (Token_End.Pos + 1, T_Start);
      end if;

      return Make_Range (Sloc (Token_Start), Sloc (Token_End));
   end Sloc_Range;

   ------------
   -- Lookup --
   ------------

   function Lookup
     (Node : Bare_Lkt_Node;
      Sloc : Source_Location) return Bare_Lkt_Node
   is
      Position : Relative_Position;
      Result   : Bare_Lkt_Node;
   begin
      if Sloc = No_Source_Location then
         return null;
      end if;

      Lookup_Relative
        (Bare_Lkt_Node (Node), Sloc, Position, Result);
      return Result;
   end Lookup;

   ---------------------
   -- Lookup_Internal --
   ---------------------

   function Lookup_Internal
     (Node : Bare_Lkt_Node;
      Sloc : Source_Location) return Bare_Lkt_Node
   is
      --  For this implementation helper (i.e. internal primitive), we can
      --  assume that all lookups fall into this node's sloc range.
      pragma Assert (Compare (Sloc_Range (Node), Sloc) = Inside);

      Children : constant Internal_Bare_Lkt_Node_Array :=
         Implementation.Children (Node);
      Pos      : Relative_Position;
      Result   : Bare_Lkt_Node;
   begin
      --  Look for a child node that contains Sloc (i.e. return the most
      --  precise result).

      for Child of Children loop
         --  Note that we assume here that child nodes are ordered so that the
         --  first one has a sloc range that is before the sloc range of the
         --  second child node, etc.

         if Child /= null then
            Lookup_Relative (Child, Sloc, Pos, Result);
            case Pos is
               when Before =>
                   --  If this is the first node, Sloc is before it, so we can
                   --  stop here.  Otherwise, Sloc is between the previous
                   --  child node and the next one...  so we can stop here,
                   --  too.
                   return Node;

               when Inside =>
                   return Result;

               when After =>
                   --  Sloc is after the current child node, so see with the
                   --  next one.
                   null;
            end case;
         end if;
      end loop;

      --  If we reach this point, we found no children that covers Sloc, but
      --  Node still covers it (see the assertion).
      return Node;
   end Lookup_Internal;

   -------------
   -- Compare --
   -------------

   function Compare
     (Node : Bare_Lkt_Node;
      Sloc : Source_Location) return Relative_Position is
   begin
      return Compare (Sloc_Range (Node), Sloc);
   end Compare;

   ---------------------
   -- Lookup_Relative --
   ---------------------

   procedure Lookup_Relative
     (Node       : Bare_Lkt_Node;
      Sloc       : Source_Location;
      Position   : out Relative_Position;
      Node_Found : out Bare_Lkt_Node)
   is
      Result : constant Relative_Position :=
        Compare (Node, Sloc);
   begin
      Position := Result;
      Node_Found := (if Result = Inside
                     then Lookup_Internal (Node, Sloc)
                     else null);
   end Lookup_Relative;

   -------------
   -- Compare --
   -------------

   function Compare
     (Self, Left, Right : Bare_Lkt_Node;
      Relation          : Comparison_Relation) return Boolean
   is
      LS, RS : Source_Location;
   begin
      if Left = null or else Right = null or else Left.Unit /= Right.Unit then
         Raise_Property_Exception
           (Self,
            Property_Error'Identity,
            "invalid node comparison");
      end if;

      LS := Start_Sloc (Sloc_Range (Left));
      RS := Start_Sloc (Sloc_Range (Right));
      return (case Relation is
              when Liblktlang_Support.Types.Less_Than        => LS < RS,
              when Liblktlang_Support.Types.Less_Or_Equal    => LS <= RS,
              when Liblktlang_Support.Types.Greater_Than     => LS > RS,
              when Liblktlang_Support.Types.Greater_Or_Equal => LS >= RS);
   end Compare;

   --------------
   -- Children --
   --------------

   function Children
     (Node : Bare_Lkt_Node) return Internal_Bare_Lkt_Node_Array
   is
      First : constant Integer := Bare_Lkt_Node_Vectors.Index_Type'First;
      Last  : constant Integer := First + Children_Count (Node) - 1;
   begin
      return A : Internal_Bare_Lkt_Node_Array (First .. Last)
      do
         for I in First .. Last loop
            A (I) := Child (Node, I);
         end loop;
      end return;
   end Children;

   function Children
     (Node : Bare_Lkt_Node) return Bare_Lkt_Node_Array_Access
   is
      C : Internal_Bare_Lkt_Node_Array := Children (Node);
   begin
      return Ret : Bare_Lkt_Node_Array_Access :=
         Create_Bare_Lkt_Node_Array (C'Length)
      do
         Ret.Items := C;
      end return;
   end Children;

   ---------
   -- Get --
   ---------

   function Get
     (Self    : Bare_Lkt_Node;
      Node    : Bare_Lkt_Node_Base_List;
      Index   : Integer;
      Or_Null : Boolean := False) return Bare_Lkt_Node
   is
      function Length (Node : Bare_Lkt_Node_Base_List) return Natural
      is (Node.Count);
      --  Wrapper around the Length primitive to get the compiler happy for the
      --  the package instantiation below.

      function Absolute_Get
        (L     : Bare_Lkt_Node_Base_List;
         Index : Integer) return Bare_Lkt_Node
      is (L.Nodes.all (Index + 1));
      --  L.Nodes is 1-based but Index is 0-based

      function Relative_Get is new Liblktlang_Support.Relative_Get
        (Item_Type     => Bare_Lkt_Node,
         Sequence_Type => Bare_Lkt_Node_Base_List,
         Length        => Length,
         Get           => Absolute_Get);

      Result : Bare_Lkt_Node;
   begin
      if Node = null and then Or_Null then
         return null;
      elsif Relative_Get (Node, Index, Result) then
         return Result;
      elsif Or_Null then
         return null;
      else
         Raise_Property_Exception
           (Self, Property_Error'Identity, "out-of-bounds AST list access");
      end if;
   end Get;

   ---------------
   -- PP_Trivia --
   ---------------

   procedure PP_Trivia
     (Node        : Bare_Lkt_Node;
      Line_Prefix : String := "")
   is
      Children_Prefix : constant String := Line_Prefix & "|  ";
   begin
      if Node = null then
         Put_Line (Line_Prefix & "None");
         return;
      end if;
      Put_Line (Line_Prefix & Kind_Name (Node));
      for C of Children_And_Trivia (Node) loop
         case C.Kind is
            when Trivia =>
               Put_Line (Children_Prefix & Image (Text (C.Trivia)));
            when Child =>
               PP_Trivia (C.Node, Children_Prefix);
         end case;
      end loop;
   end PP_Trivia;

   --------------------------
   -- Populate_Lexical_Env --
   --------------------------

   function Populate_Lexical_Env (Node : Bare_Lkt_Node) return Boolean is

      Context    : constant Internal_Context := Node.Unit.Context;
      Unit_State : aliased PLE_Unit_State := (Named_Envs_Needing_Update => <>);
      Root_State : constant PLE_Node_State :=
        (Unit_State  => Unit_State'Unchecked_Access,
         Current_Env => Context.Root_Scope,
         Current_NED => null);

      function Populate_Internal
        (Node         : Bare_Lkt_Node;
         Parent_State : PLE_Node_State) return Boolean;
      --  Do the lexical env population on Node and recurse on its children

      procedure Register_Foreign_Env
        (Node : Bare_Lkt_Node; State : PLE_Node_State);
      --  Given a node and its PLE state, register Node.Self_Env as being
      --  initialized through the named environment mechanism, if that's indeed
      --  the case. Do nothing otherwise.

      -----------------------
      -- Populate_Internal --
      -----------------------

      function Populate_Internal
        (Node         : Bare_Lkt_Node;
         Parent_State : PLE_Node_State) return Boolean
      is
         Result : Boolean := False;
         State  : PLE_Node_State := Parent_State;
      begin
         if Node = null then
            return Result;
         end if;

         --  By default (i.e. unless env actions add a new env), the
         --  environment we store in Node is the current one.
         Node.Self_Env := State.Current_Env;

         --  Run pre/post actions, and run PLE on children in between. Make
         --  sure we register the potential foreign Node.Self_Env environment
         --  at the end, even when an exception interrupts PLE to keep the
         --  state consistent.
         begin
            Pre_Env_Actions (Node, State);
            if State.Current_Env /= Null_Lexical_Env then
               Node.Self_Env := State.Current_Env;
               Register_Foreign_Env (Node, State);
            end if;

            --  Call recursively on children
            for I in First_Child_Index (Node) .. Last_Child_Index (Node) loop
               Result := Populate_Internal
                 (Child (Node, I), State) or else Result;
            end loop;

            Post_Env_Actions (Node, State);
         exception
            when Exc : Property_Error =>
               if PLE_Errors_Trace.Is_Active then
                   GNATCOLL.Traces.Trace
                     (PLE_Errors_Trace,
                      "Exception raised during PLE "
                      & Ada.Exceptions.Exception_Name (Exc) & " : "
                      & Ada.Exceptions.Exception_Message (Exc));
                   GNATCOLL.Traces.Trace
                     (PLE_Errors_Trace,
                      GNAT.Traceback.Symbolic.Symbolic_Traceback (Exc));
               end if;
               Register_Foreign_Env (Node, State);
               return True;
         end;

         return Result;
      end Populate_Internal;

      --------------------------
      -- Register_Foreign_Env --
      --------------------------

      procedure Register_Foreign_Env
        (Node : Bare_Lkt_Node; State : PLE_Node_State) is
      begin
         if State.Current_NED /= null then
            State.Current_NED.Nodes_With_Foreign_Env.Insert (Node);
            Node.Unit.Nodes_With_Foreign_Env.Insert (Node, State.Current_NED);
         end if;
      end Register_Foreign_Env;

   begin
      --  This is intended to be called on the root node only (when there is no
      --  PLE root) or on a PLE root (child of the root node with a specific
      --  kind).
      if
         Node.Parent /= null
      then
         raise Program_Error;
      end if;

      return Result : constant Boolean :=
         Populate_Internal (Node, Root_State)
      do
         Update_Named_Envs (Context, Unit_State.Named_Envs_Needing_Update);
      end return;
   end Populate_Lexical_Env;

   ------------------------------
   -- AST_Envs_Node_Text_Image --
   ------------------------------

   function AST_Envs_Node_Text_Image
     (Node  : Bare_Lkt_Node;
      Short : Boolean := True) return Text_Type is
   begin
      if Short then
         if Node = null then
            return "null";
         end if;
         return To_Text (Basename (Node.Unit))
           & ":" & To_Text (Image (Start_Sloc (Sloc_Range (Node))));
      else
         return Short_Text_Image (Node);
      end if;
   end AST_Envs_Node_Text_Image;

   -------------------
   -- Is_Rebindable --
   -------------------

   function Is_Rebindable (Node : Bare_Lkt_Node) return Boolean is
   begin
      
         return Node.Kind in Lkt_Generic_Decl;
   end Is_Rebindable;

   -----------------------
   -- Acquire_Rebinding --
   -----------------------

   function Acquire_Rebinding
     (Node             : Bare_Lkt_Node;
      Parent           : Env_Rebindings;
      Old_Env, New_Env : Lexical_Env) return Env_Rebindings
   is
      Result    : Env_Rebindings;
      Available : Env_Rebindings_Vectors.Vector renames
         Node.Unit.Context.Available_Rebindings;
   begin
      --  Use an existing and available Env_Rebindings_Type record for Node's
      --  Context, otherwise allocate a new rebinding.
      Result := (if Available.Is_Empty
                 then new Env_Rebindings_Type'(Version => 0, others => <>)
                 else Available.Pop);

      Result.Parent := Parent;
      Result.Old_Env := Old_Env;
      Result.New_Env := New_Env;
      Result.Children := Env_Rebindings_Vectors.Empty_Vector;
      return Result;
   end Acquire_Rebinding;

   -----------------------
   -- Release_Rebinding --
   -----------------------

   procedure Release_Rebinding (Self : in out Env_Rebindings) is
      Available : Env_Rebindings_Vectors.Vector renames
         Unwrap (Self.Old_Env).Node.Unit.Context.Available_Rebindings;
   begin
      --  Bumping the version number, to invalidate existing references to
      --  Self.
      Self.Version := Self.Version + 1;

      Self.Children.Destroy;
      Available.Append (Self);
      Self := null;
   end Release_Rebinding;

   ------------------------
   -- Register_Rebinding --
   ------------------------

   procedure Register_Rebinding
     (Node : Bare_Lkt_Node; Rebinding : Env_Rebindings) is
   begin
      Node.Unit.Rebindings.Append (Rebinding);
   end Register_Rebinding;


   --------------------
   -- Element_Parent --
   --------------------

   function Element_Parent
     (Node : Bare_Lkt_Node) return Bare_Lkt_Node
   is (Node.Parent);

   ---------------
   -- Node_Unit --
   ---------------

   function Node_Unit (Node : Bare_Lkt_Node) return Generic_Unit_Ptr is
   begin
      return Convert_Unit (Node.Unit);
   end Node_Unit;

   ----------
   -- Hash --
   ----------

   function Hash (Node : Bare_Lkt_Node) return Hash_Type
   is
      function H is new Hash_Access
        (Root_Node_Record, Bare_Lkt_Node);
   begin
      return H (Node);
   end Hash;

      function Hash (B : Boolean) return Hash_Type is (Boolean'Pos (B));





   ------------------------
   -- Named environments --
   ------------------------

   ---------
   -- Add --
   ---------

   procedure Add
     (Self : in out NED_Assoc_Maps.Map;
      Key  : Symbol_Type;
      Node : AST_Envs.Internal_Map_Node)
   is
      use NED_Assoc_Maps;

      Pos   : Cursor;
      Dummy : Boolean;
   begin
      --  Make sure there is a vector entry for Key
      Self.Insert (Key, Internal_Map_Node_Vectors.Empty_Vector, Pos, Dummy);

      --  Append Node to that vector
      declare
         V : Internal_Map_Node_Vectors.Vector renames Self.Reference (Pos);
      begin
         V.Append (Node);
      end;
   end Add;

   ------------
   -- Remove --
   ------------

   procedure Remove
     (Self : in out NED_Assoc_Maps.Map;
      Key  : Symbol_Type;
      Node : Bare_Lkt_Node)
   is
      use NED_Assoc_Maps;

      V : Internal_Map_Node_Vectors.Vector renames Self.Reference (Key);
   begin
      --  Remove the (assumed unique) entry in V whose node is Node. The order
      --  of items in V is not significant, so we can use Pop for efficient
      --  removal. Do the traversal in reverse order for correctness.
      for I in reverse 1 .. V.Length loop
         if V.Get_Access (I).Node = Node then
            V.Pop (I);
            exit;
         end if;
      end loop;
   end Remove;

   ------------------------------
   -- Get_Named_Env_Descriptor --
   ------------------------------

   function Get_Named_Env_Descriptor
     (Context : Internal_Context;
      Name    : Symbol_Type) return Named_Env_Descriptor_Access
   is
      use NED_Maps;

      --  Look for an existing entry for Name
      Pos : constant Cursor := Context.Named_Envs.Find (Name);
   begin
      if Has_Element (Pos) then
         return Element (Pos);
      end if;

      --  There is no such entry: create one
      return Result : constant Named_Env_Descriptor_Access :=
         new Named_Env_Descriptor'
           (Name                   => Name,
            Envs                   => <>,
            Env_With_Precedence    => Empty_Env,
            Foreign_Nodes          => <>,
            Foreign_Envs           => <>,
            Nodes_With_Foreign_Env => <>)
      do
         Context.Named_Envs.Insert (Name, Result);
      end return;
   end Get_Named_Env_Descriptor;

   ------------------------
   -- Register_Named_Env --
   ------------------------

   procedure Register_Named_Env
     (Context                   : Internal_Context;
      Name                      : Symbol_Type;
      Env                       : Lexical_Env;
      Named_Envs_Needing_Update : in out NED_Maps.Map)
   is
      NED_Access : constant Named_Env_Descriptor_Access :=
         Get_Named_Env_Descriptor (Context, Name);
      NED        : Named_Env_Descriptor renames NED_Access.all;
      Node       : constant Bare_Lkt_Node := Env_Node (Env);
   begin
      NED.Envs.Insert (Node, Env);
      Node.Unit.Named_Envs.Append ((Name, Env));

      --  If that insertion must change the env that has precedence, signal
      --  that NED requires an update.

      if NED.Envs.First_Element /= NED.Env_With_Precedence then
         Named_Envs_Needing_Update.Include (Name, NED_Access);
      end if;
   end Register_Named_Env;

   ----------------------
   -- Update_Named_Env --
   ----------------------

   procedure Update_Named_Envs
     (Context : Internal_Context; Named_Envs : NED_Maps.Map)
   is
      Require_Cache_Reset : Boolean := False;
   begin
      for Cur in Named_Envs.Iterate loop
         declare
            NE      : Named_Env_Descriptor renames NED_Maps.Element (Cur).all;
            New_Env : constant Lexical_Env :=
              (if NE.Envs.Is_Empty
               then Empty_Env
               else NE.Envs.First_Element);
         begin
            --  If there was an environment with precedence, remove its foreign
            --  nodes.
            if NE.Env_With_Precedence /= Empty_Env then
               for Cur in NE.Foreign_Nodes.Iterate loop
                  declare
                     Key   : constant Symbol_Type :=
                        NED_Assoc_Maps.Key (Cur);
                     Nodes : Internal_Map_Node_Vectors.Vector renames
                        NE.Foreign_Nodes.Reference (Cur);
                  begin
                     for N of Nodes loop
                        Remove (NE.Env_With_Precedence, Thin (Key), N.Node);
                     end loop;
                  end;
               end loop;
            end if;

            --  Now, set the new environment that has precedence
            NE.Env_With_Precedence := New_Env;

            --  Add the foreign nodes to the new environment with precedence,
            --  if any.
            for Cur in NE.Foreign_Nodes.Iterate loop
               declare
                  Key   : constant Symbol_Type :=
                     NED_Assoc_Maps.Key (Cur);
                  Nodes : Internal_Map_Node_Vectors.Vector renames
                     NE.Foreign_Nodes.Reference (Cur);
               begin
                  for N of Nodes loop
                     Add (New_Env, Thin (Key), N.Node, N.Md, N.Resolver);
                  end loop;
               end;
            end loop;

            --  Set the parent environment of all foreign environments
            for Cur in NE.Foreign_Envs.Iterate loop
               declare
                  Env : Lexical_Env_Record renames
                     Unwrap (Sorted_Env_Maps.Element (Cur)).all;
               begin
                  Env.Parent := New_Env;

                  --  We have updated the lexical env hierarchy (e.g. an env
                  --  which had no parent may have one now), so the cached
                  --  entries for queries that traveresed the old env hierarchy
                  --  need to be invalidated.
                  Require_Cache_Reset := True;
               end;
            end loop;

            --  Update nodes whose environment was the old env with precedence
            for N of NE.Nodes_With_Foreign_Env loop
               N.Self_Env := New_Env;
            end loop;
         end;
      end loop;
      if Require_Cache_Reset then
         Invalidate_Caches (Context, Invalidate_Envs => True);
      end if;
   end Update_Named_Envs;

   --------------------------
   -- Big integers wrapper --
   --------------------------

   ------------------------
   -- Create_Big_Integer --
   ------------------------

   function Create_Big_Integer
     (Image : String; Base : Integer := 10) return Big_Integer_Type
   is
      use GNATCOLL.GMP;
      use GNATCOLL.GMP.Integers;
   begin
      return new Big_Integer_Record'(Value     => Make (Image, Int (Base)),
                                     Ref_Count => 1);
   end Create_Big_Integer;

   ------------------------
   -- Create_Big_Integer --
   ------------------------

   function Create_Big_Integer
     (Big_Int : GNATCOLL.GMP.Integers.Big_Integer) return Big_Integer_Type
   is
      Result : constant Big_Integer_Type :=
         new Big_Integer_Record'(Value     => <>,
                                 Ref_Count => 1);
   begin
      Result.Value.Set (Big_Int);
      return Result;
   end Create_Big_Integer;

   ------------------------
   -- Create_Big_Integer --
   ------------------------

   function Create_Big_Integer (Int : Integer) return Big_Integer_Type is
      Result : constant Big_Integer_Type :=
         new Big_Integer_Record'(Value     => <>,
                                 Ref_Count => 1);
   begin
      Result.Value.Set (GNATCOLL.GMP.Long (Int));
      return Result;
   end Create_Big_Integer;

   -------------------------------
   -- Create_Public_Big_Integer --
   -------------------------------

   function Create_Public_Big_Integer
     (Big_Int : Big_Integer_Type) return GNATCOLL.GMP.Integers.Big_Integer is
   begin
      return Result : GNATCOLL.GMP.Integers.Big_Integer do
         Result.Set (Big_Int.Value);
      end return;
   end Create_Public_Big_Integer;

   -----------------
   -- Trace_Image --
   -----------------

   function Trace_Image (I : Big_Integer_Type) return String is
   begin
      return GNATCOLL.GMP.Integers.Image (I.Value);
   end Trace_Image;

   ----------------
   -- To_Integer --
   ----------------

   function To_Integer
     (Self    : Bare_Lkt_Node;
      Big_Int : Big_Integer_Type) return Integer
   is
      Image : constant String := Big_Int.Value.Image;
   begin
      return Integer'Value (Image);
   exception
      when Constraint_Error =>
         Raise_Property_Exception
           (Self, Property_Error'Identity, "out of range big integer");
   end To_Integer;

   -------------
   -- Inc_Ref --
   -------------

   procedure Inc_Ref (Big_Int : Big_Integer_Type) is
   begin
      if Big_Int.Ref_Count /= -1 then
         Big_Int.Ref_Count := Big_Int.Ref_Count + 1;
      end if;
   end Inc_Ref;

   -------------
   -- Dec_Ref --
   -------------

   procedure Dec_Ref (Big_Int : in out Big_Integer_Type) is
      procedure Destroy is new Ada.Unchecked_Deallocation
        (Big_Integer_Record, Big_Integer_Type);
   begin
      if Big_Int = null or else Big_Int.Ref_Count = -1 then
         return;
      end if;

      Big_Int.Ref_Count := Big_Int.Ref_Count - 1;
      if Big_Int.Ref_Count = 0 then
         Destroy (Big_Int);
      end if;
   end Dec_Ref;

   ----------------
   -- Equivalent --
   ----------------

   function Equivalent (Left, Right : Big_Integer_Type) return Boolean is
      use type GNATCOLL.GMP.Integers.Big_Integer;
   begin
      return Left.Value = Right.Value;
   end Equivalent;

   ---------
   -- "<" --
   ---------

   function "<" (Left, Right : Big_Integer_Type) return Boolean is
      use type GNATCOLL.GMP.Integers.Big_Integer;
   begin
      return Left.Value < Right.Value;
   end "<";

   ----------
   -- "<=" --
   ----------

   function "<=" (Left, Right : Big_Integer_Type) return Boolean is
      use type GNATCOLL.GMP.Integers.Big_Integer;
   begin
      return Left.Value <= Right.Value;
   end "<=";

   ---------
   -- ">" --
   ---------

   function ">" (Left, Right : Big_Integer_Type) return Boolean is
      use type GNATCOLL.GMP.Integers.Big_Integer;
   begin
      return Left.Value > Right.Value;
   end ">";

   ----------
   -- ">=" --
   ----------

   function ">=" (Left, Right : Big_Integer_Type) return Boolean is
      use type GNATCOLL.GMP.Integers.Big_Integer;
   begin
      return Left.Value >= Right.Value;
   end ">=";

   ---------
   -- "+" --
   ---------

   function "+" (Left, Right : Big_Integer_Type) return Big_Integer_Type is
      use type GNATCOLL.GMP.Integers.Big_Integer;
   begin
      return Create_Big_Integer (Left.Value + Right.Value);
   end "+";

   ---------
   -- "-" --
   ---------

   function "-" (Left, Right : Big_Integer_Type) return Big_Integer_Type is
      use type GNATCOLL.GMP.Integers.Big_Integer;
   begin
      return Create_Big_Integer (Left.Value - Right.Value);
   end "-";

   ---------
   -- "-" --
   ---------

   function "-" (Value : Big_Integer_Type) return Big_Integer_Type is
      use type GNATCOLL.GMP.Integers.Big_Integer;
   begin
      return Create_Big_Integer (-Value.Value);
   end "-";

   ------------------
   -- Unit_Version --
   ------------------

   function Unit_Version (Unit : Generic_Unit_Ptr) return Version_Number is
   begin
      return Convert_Unit (Unit).Unit_Version;
   end Unit_Version;

   -------------------------
   -- Get_Context_Version --
   -------------------------

   function Get_Context_Version
     (Node : Bare_Lkt_Node) return Version_Number is
   begin
      return Node.Unit.Context.Cache_Version;
   end Get_Context_Version;

   ---------------
   --  Self_Env --
   ---------------

   function Self_Env (Node : Bare_Lkt_Node) return Lexical_Env is
   begin
      return Node.Self_Env;
   end Self_Env;

   --------------------------
   -- Properties_May_Raise --
   --------------------------

   function Properties_May_Raise
     (Exc : Ada.Exceptions.Exception_Occurrence) return Boolean is
   begin
      return Ada.Exceptions.Exception_Identity (Exc) in
            Property_Error'Identity
      ;
   end Properties_May_Raise;

   ----------------------
   -- Short_Text_Image --
   ----------------------

   function Short_Text_Image (Self : Bare_Lkt_Node) return Text_Type
   is
   begin
      if Self = null then
         return "None";
      end if;

      
   

   case Self.Kind is
            when Lkt_Id .. Lkt_Ref_Id =>
            
         return Id_Short_Image (Self);
      
            when Lkt_Grammar_Rule_Decl .. Lkt_Trait_Decl =>
            
         return Decl_Short_Image (Self);
      
      when others => 
         return "<" & To_Text (Kind_Name (Self))
                & " " & Node_Sloc_Image (Self) & ">";
      
   end case;

   end Short_Text_Image;

   ----------------------
   --- Node_Sloc_Image --
   ----------------------

   function Node_Sloc_Image (Self : Bare_Lkt_Node) return Text_Type
   is
      
   begin
         return To_Text
                  (Ada.Directories.Simple_Name (Get_Filename (Unit (Self))))
                & ":" & To_Text (Image (Sloc_Range (Self)));
   end Node_Sloc_Image;

   --------------------
   -- Snaps_At_Start --
   --------------------

   function Snaps_At_Start (Self : Bare_Lkt_Node) return Boolean is
   begin
      
   

   case Self.Kind is
      when others => 
         return False;
      
   end case;

   end Snaps_At_Start;

   ------------------
   -- Snaps_At_End --
   ------------------

   function Snaps_At_End (Self : Bare_Lkt_Node) return Boolean is
   begin
      
   

   case Self.Kind is
      when others => 
         return Is_Incomplete (Self);
      
   end case;

   end Snaps_At_End;

   -------------
   -- Parents --
   -------------

   function Parents
     (Node      : Bare_Lkt_Node;
      With_Self : Boolean := True)
      return Bare_Lkt_Node_Array_Access
   is
      Count : Natural := 0;
      Start : Bare_Lkt_Node :=
        (if With_Self then Node else Node.Parent);
      Cur   : Bare_Lkt_Node := Start;
   begin
      while Cur /= null loop
         Count := Count + 1;
         Cur := Cur.Parent;
      end loop;

      declare
         Result : constant Bare_Lkt_Node_Array_Access :=
            Create_Bare_Lkt_Node_Array (Count);
      begin
         Cur := Start;
         for I in Result.Items'Range loop
            Result.Items (I) := Cur;
            Cur := Cur.Parent;
         end loop;
         return Result;
      end;
   end Parents;

   -----------------------
   -- First_Child_Index --
   -----------------------

   function First_Child_Index (Node : Bare_Lkt_Node) return Natural
   is (1);

   ----------------------
   -- Last_Child_Index --
   ----------------------

   function Last_Child_Index (Node : Bare_Lkt_Node) return Natural
   is (Children_Count (Node));

   ---------------
   -- Get_Child --
   ---------------

   procedure Get_Child
     (Node            : Bare_Lkt_Node;
      Index           : Positive;
      Index_In_Bounds : out Boolean;
      Result          : out Bare_Lkt_Node)
   is
      K : constant Lkt_Node_Kind_Type := Node.Kind;
   begin
      

      Index_In_Bounds := True;
      Result := null;
      case Lkt_Lkt_Node (K) is
when Lkt_Lexer_Case_Rule_Cond_Alt_Range =>
declare
N_Bare_Lexer_Case_Rule_Cond_Alt : constant Bare_Lexer_Case_Rule_Cond_Alt := Node;
begin
case Index is

                        when 1 =>
                            Result := N_Bare_Lexer_Case_Rule_Cond_Alt.Lexer_Case_Rule_Cond_Alt_F_Cond_Exprs;
                            return;
                    

                        when 2 =>
                            Result := N_Bare_Lexer_Case_Rule_Cond_Alt.Lexer_Case_Rule_Cond_Alt_F_Send;
                            return;
                    

                        when others => null;
                    end case;
                
end;
when Lkt_Lexer_Case_Rule_Default_Alt_Range =>
declare
N_Bare_Lexer_Case_Rule_Default_Alt : constant Bare_Lexer_Case_Rule_Default_Alt := Node;
begin
case Index is

                        when 1 =>
                            Result := N_Bare_Lexer_Case_Rule_Default_Alt.Lexer_Case_Rule_Default_Alt_F_Send;
                            return;
                    

                        when others => null;
                    end case;
                
end;
when Lkt_Grammar_Rule_Decl_Range =>
declare
N_Bare_Grammar_Rule_Decl : constant Bare_Grammar_Rule_Decl := Node;
begin
case Index is

                        when 1 =>
                            Result := N_Bare_Grammar_Rule_Decl.Grammar_Rule_Decl_F_Syn_Name;
                            return;
                    

                        when 2 =>
                            Result := N_Bare_Grammar_Rule_Decl.Grammar_Rule_Decl_F_Expr;
                            return;
                    

                        when others => null;
                    end case;
                
end;
when Lkt_Enum_Lit_Decl_Range =>
declare
N_Bare_Enum_Lit_Decl : constant Bare_Enum_Lit_Decl := Node;
begin
case Index is

                        when 1 =>
                            Result := N_Bare_Enum_Lit_Decl.Enum_Lit_Decl_F_Syn_Name;
                            return;
                    

                        when others => null;
                    end case;
                
end;
when Lkt_Field_Decl_Range =>
declare
N_Bare_Field_Decl : constant Bare_Field_Decl := Node;
begin
case Index is

                        when 1 =>
                            Result := N_Bare_Field_Decl.Field_Decl_F_Syn_Name;
                            return;
                    

                        when 2 =>
                            Result := N_Bare_Field_Decl.Field_Decl_F_Decl_Type;
                            return;
                    

                        when 3 =>
                            Result := N_Bare_Field_Decl.Field_Decl_F_Default_Val;
                            return;
                    

                        when others => null;
                    end case;
                
end;
when Lkt_Fun_Arg_Decl_Range =>
declare
N_Bare_Fun_Arg_Decl : constant Bare_Fun_Arg_Decl := Node;
begin
case Index is

                        when 1 =>
                            Result := N_Bare_Fun_Arg_Decl.Fun_Arg_Decl_F_Decl_Annotations;
                            return;
                    

                        when 2 =>
                            Result := N_Bare_Fun_Arg_Decl.Fun_Arg_Decl_F_Syn_Name;
                            return;
                    

                        when 3 =>
                            Result := N_Bare_Fun_Arg_Decl.Fun_Arg_Decl_F_Decl_Type;
                            return;
                    

                        when 4 =>
                            Result := N_Bare_Fun_Arg_Decl.Fun_Arg_Decl_F_Default_Val;
                            return;
                    

                        when others => null;
                    end case;
                
end;
when Lkt_Lambda_Arg_Decl_Range =>
declare
N_Bare_Lambda_Arg_Decl : constant Bare_Lambda_Arg_Decl := Node;
begin
case Index is

                        when 1 =>
                            Result := N_Bare_Lambda_Arg_Decl.Lambda_Arg_Decl_F_Syn_Name;
                            return;
                    

                        when 2 =>
                            Result := N_Bare_Lambda_Arg_Decl.Lambda_Arg_Decl_F_Decl_Type;
                            return;
                    

                        when 3 =>
                            Result := N_Bare_Lambda_Arg_Decl.Lambda_Arg_Decl_F_Default_Val;
                            return;
                    

                        when others => null;
                    end case;
                
end;
when Lkt_Dyn_Var_Decl_Range =>
declare
N_Bare_Dyn_Var_Decl : constant Bare_Dyn_Var_Decl := Node;
begin
case Index is

                        when 1 =>
                            Result := N_Bare_Dyn_Var_Decl.Dyn_Var_Decl_F_Syn_Name;
                            return;
                    

                        when 2 =>
                            Result := N_Bare_Dyn_Var_Decl.Dyn_Var_Decl_F_Decl_Type;
                            return;
                    

                        when others => null;
                    end case;
                
end;
when Lkt_Match_Val_Decl_Range =>
declare
N_Bare_Match_Val_Decl : constant Bare_Match_Val_Decl := Node;
begin
case Index is

                        when 1 =>
                            Result := N_Bare_Match_Val_Decl.Match_Val_Decl_F_Syn_Name;
                            return;
                    

                        when 2 =>
                            Result := N_Bare_Match_Val_Decl.Match_Val_Decl_F_Decl_Type;
                            return;
                    

                        when others => null;
                    end case;
                
end;
when Lkt_Val_Decl_Range =>
declare
N_Bare_Val_Decl : constant Bare_Val_Decl := Node;
begin
case Index is

                        when 1 =>
                            Result := N_Bare_Val_Decl.Val_Decl_F_Syn_Name;
                            return;
                    

                        when 2 =>
                            Result := N_Bare_Val_Decl.Val_Decl_F_Decl_Type;
                            return;
                    

                        when 3 =>
                            Result := N_Bare_Val_Decl.Val_Decl_F_Expr;
                            return;
                    

                        when others => null;
                    end case;
                
end;
when Lkt_Fun_Decl_Range =>
declare
N_Bare_Fun_Decl : constant Bare_Fun_Decl := Node;
begin
case Index is

                        when 1 =>
                            Result := N_Bare_Fun_Decl.Fun_Decl_F_Syn_Name;
                            return;
                    

                        when 2 =>
                            Result := N_Bare_Fun_Decl.Fun_Decl_F_Args;
                            return;
                    

                        when 3 =>
                            Result := N_Bare_Fun_Decl.Fun_Decl_F_Return_Type;
                            return;
                    

                        when 4 =>
                            Result := N_Bare_Fun_Decl.Fun_Decl_F_Body;
                            return;
                    

                        when others => null;
                    end case;
                
end;
when Lkt_Env_Spec_Decl_Range =>
declare
N_Bare_Env_Spec_Decl : constant Bare_Env_Spec_Decl := Node;
begin
case Index is

                        when 1 =>
                            Result := N_Bare_Env_Spec_Decl.Env_Spec_Decl_F_Syn_Name;
                            return;
                    

                        when 2 =>
                            Result := N_Bare_Env_Spec_Decl.Env_Spec_Decl_F_Actions;
                            return;
                    

                        when others => null;
                    end case;
                
end;
when Lkt_Generic_Decl_Range =>
declare
N_Bare_Generic_Decl : constant Bare_Generic_Decl := Node;
begin
case Index is

                        when 1 =>
                            Result := N_Bare_Generic_Decl.Generic_Decl_F_Generic_Formal_Decls;
                            return;
                    

                        when 2 =>
                            Result := N_Bare_Generic_Decl.Generic_Decl_F_Decl;
                            return;
                    

                        when others => null;
                    end case;
                
end;
when Lkt_Grammar_Decl_Range =>
declare
N_Bare_Grammar_Decl : constant Bare_Grammar_Decl := Node;
begin
case Index is

                        when 1 =>
                            Result := N_Bare_Grammar_Decl.Grammar_Decl_F_Syn_Name;
                            return;
                    

                        when 2 =>
                            Result := N_Bare_Grammar_Decl.Grammar_Decl_F_Rules;
                            return;
                    

                        when others => null;
                    end case;
                
end;
when Lkt_Lexer_Decl_Range =>
declare
N_Bare_Lexer_Decl : constant Bare_Lexer_Decl := Node;
begin
case Index is

                        when 1 =>
                            Result := N_Bare_Lexer_Decl.Lexer_Decl_F_Syn_Name;
                            return;
                    

                        when 2 =>
                            Result := N_Bare_Lexer_Decl.Lexer_Decl_F_Rules;
                            return;
                    

                        when others => null;
                    end case;
                
end;
when Lkt_Lexer_Family_Decl_Range =>
declare
N_Bare_Lexer_Family_Decl : constant Bare_Lexer_Family_Decl := Node;
begin
case Index is

                        when 1 =>
                            Result := N_Bare_Lexer_Family_Decl.Lexer_Family_Decl_F_Syn_Name;
                            return;
                    

                        when 2 =>
                            Result := N_Bare_Lexer_Family_Decl.Lexer_Family_Decl_F_Rules;
                            return;
                    

                        when others => null;
                    end case;
                
end;
when Lkt_Enum_Class_Alt_Decl_Range =>
declare
N_Bare_Enum_Class_Alt_Decl : constant Bare_Enum_Class_Alt_Decl := Node;
begin
case Index is

                        when 1 =>
                            Result := N_Bare_Enum_Class_Alt_Decl.Enum_Class_Alt_Decl_F_Syn_Name;
                            return;
                    

                        when others => null;
                    end case;
                
end;
when Lkt_Generic_Formal_Type_Decl_Range =>
declare
N_Bare_Generic_Formal_Type_Decl : constant Bare_Generic_Formal_Type_Decl := Node;
begin
case Index is

                        when 1 =>
                            Result := N_Bare_Generic_Formal_Type_Decl.Generic_Formal_Type_Decl_F_Has_Class;
                            return;
                    

                        when 2 =>
                            Result := N_Bare_Generic_Formal_Type_Decl.Generic_Formal_Type_Decl_F_Syn_Name;
                            return;
                    

                        when others => null;
                    end case;
                
end;
when Lkt_Basic_Class_Decl =>
declare
N_Bare_Basic_Class_Decl : constant Bare_Basic_Class_Decl := Node;
begin
case Index is

                        when 1 =>
                            Result := N_Bare_Basic_Class_Decl.Basic_Class_Decl_F_Syn_Name;
                            return;
                    

                        when 2 =>
                            Result := N_Bare_Basic_Class_Decl.Basic_Class_Decl_F_Syn_Base_Type;
                            return;
                    

                        when 3 =>
                            Result := N_Bare_Basic_Class_Decl.Basic_Class_Decl_F_Traits;
                            return;
                    

                        when others => null;
                    end case;
                
case Lkt_Basic_Class_Decl (K) is
when Lkt_Class_Decl_Range =>
declare
N_Bare_Class_Decl : constant Bare_Class_Decl := N_Bare_Basic_Class_Decl;
begin
case Index is

                        when 4 =>
                            Result := N_Bare_Class_Decl.Class_Decl_F_Decls;
                            return;
                    

                        when others => null;
                    end case;
                
end;
when Lkt_Enum_Class_Decl_Range =>
declare
N_Bare_Enum_Class_Decl : constant Bare_Enum_Class_Decl := N_Bare_Basic_Class_Decl;
begin
case Index is

                        when 4 =>
                            Result := N_Bare_Enum_Class_Decl.Enum_Class_Decl_F_Branches;
                            return;
                    

                        when 5 =>
                            Result := N_Bare_Enum_Class_Decl.Enum_Class_Decl_F_Decls;
                            return;
                    

                        when others => null;
                    end case;
                
end;
when others => null;
end case;
end;
when Lkt_Enum_Type_Decl_Range =>
declare
N_Bare_Enum_Type_Decl : constant Bare_Enum_Type_Decl := Node;
begin
case Index is

                        when 1 =>
                            Result := N_Bare_Enum_Type_Decl.Enum_Type_Decl_F_Syn_Name;
                            return;
                    

                        when 2 =>
                            Result := N_Bare_Enum_Type_Decl.Enum_Type_Decl_F_Traits;
                            return;
                    

                        when 3 =>
                            Result := N_Bare_Enum_Type_Decl.Enum_Type_Decl_F_Literals;
                            return;
                    

                        when 4 =>
                            Result := N_Bare_Enum_Type_Decl.Enum_Type_Decl_F_Decls;
                            return;
                    

                        when others => null;
                    end case;
                
end;
when Lkt_Struct_Decl_Range =>
declare
N_Bare_Struct_Decl : constant Bare_Struct_Decl := Node;
begin
case Index is

                        when 1 =>
                            Result := N_Bare_Struct_Decl.Struct_Decl_F_Syn_Name;
                            return;
                    

                        when 2 =>
                            Result := N_Bare_Struct_Decl.Struct_Decl_F_Traits;
                            return;
                    

                        when 3 =>
                            Result := N_Bare_Struct_Decl.Struct_Decl_F_Decls;
                            return;
                    

                        when others => null;
                    end case;
                
end;
when Lkt_Trait_Decl_Range =>
declare
N_Bare_Trait_Decl : constant Bare_Trait_Decl := Node;
begin
case Index is

                        when 1 =>
                            Result := N_Bare_Trait_Decl.Trait_Decl_F_Syn_Name;
                            return;
                    

                        when 2 =>
                            Result := N_Bare_Trait_Decl.Trait_Decl_F_Decls;
                            return;
                    

                        when others => null;
                    end case;
                
end;
when Lkt_Decl_Annotation_Range =>
declare
N_Bare_Decl_Annotation : constant Bare_Decl_Annotation := Node;
begin
case Index is

                        when 1 =>
                            Result := N_Bare_Decl_Annotation.Decl_Annotation_F_Name;
                            return;
                    

                        when 2 =>
                            Result := N_Bare_Decl_Annotation.Decl_Annotation_F_Params;
                            return;
                    

                        when others => null;
                    end case;
                
end;
when Lkt_Decl_Annotation_Params_Range =>
declare
N_Bare_Decl_Annotation_Params : constant Bare_Decl_Annotation_Params := Node;
begin
case Index is

                        when 1 =>
                            Result := N_Bare_Decl_Annotation_Params.Decl_Annotation_Params_F_Params;
                            return;
                    

                        when others => null;
                    end case;
                
end;
when Lkt_Elsif_Branch_Range =>
declare
N_Bare_Elsif_Branch : constant Bare_Elsif_Branch := Node;
begin
case Index is

                        when 1 =>
                            Result := N_Bare_Elsif_Branch.Elsif_Branch_F_Cond_Expr;
                            return;
                    

                        when 2 =>
                            Result := N_Bare_Elsif_Branch.Elsif_Branch_F_Then_Expr;
                            return;
                    

                        when others => null;
                    end case;
                
end;
when Lkt_Enum_Class_Case_Range =>
declare
N_Bare_Enum_Class_Case : constant Bare_Enum_Class_Case := Node;
begin
case Index is

                        when 1 =>
                            Result := N_Bare_Enum_Class_Case.Enum_Class_Case_F_Decls;
                            return;
                    

                        when others => null;
                    end case;
                
end;
when Lkt_Any_Of_Range =>
declare
N_Bare_Any_Of : constant Bare_Any_Of := Node;
begin
case Index is

                        when 1 =>
                            Result := N_Bare_Any_Of.Any_Of_F_Expr;
                            return;
                    

                        when 2 =>
                            Result := N_Bare_Any_Of.Any_Of_F_Values;
                            return;
                    

                        when others => null;
                    end case;
                
end;
when Lkt_Array_Literal_Range =>
declare
N_Bare_Array_Literal : constant Bare_Array_Literal := Node;
begin
case Index is

                        when 1 =>
                            Result := N_Bare_Array_Literal.Array_Literal_F_Exprs;
                            return;
                    

                        when 2 =>
                            Result := N_Bare_Array_Literal.Array_Literal_F_Element_Type;
                            return;
                    

                        when others => null;
                    end case;
                
end;
when Lkt_Base_Call_Expr =>
declare
N_Bare_Base_Call_Expr : constant Bare_Base_Call_Expr := Node;
begin
case Index is

                        when 1 =>
                            Result := N_Bare_Base_Call_Expr.Base_Call_Expr_F_Name;
                            return;
                    

                        when 2 =>
                            Result := N_Bare_Base_Call_Expr.Base_Call_Expr_F_Args;
                            return;
                    

                        when others => null;
                    end case;
                
end;
when Lkt_Base_Dot_Expr =>
declare
N_Bare_Base_Dot_Expr : constant Bare_Base_Dot_Expr := Node;
begin
case Index is

                        when 1 =>
                            Result := N_Bare_Base_Dot_Expr.Base_Dot_Expr_F_Prefix;
                            return;
                    

                        when 2 =>
                            Result := N_Bare_Base_Dot_Expr.Base_Dot_Expr_F_Suffix;
                            return;
                    

                        when others => null;
                    end case;
                
end;
when Lkt_Bin_Op_Range =>
declare
N_Bare_Bin_Op : constant Bare_Bin_Op := Node;
begin
case Index is

                        when 1 =>
                            Result := N_Bare_Bin_Op.Bin_Op_F_Left;
                            return;
                    

                        when 2 =>
                            Result := N_Bare_Bin_Op.Bin_Op_F_Op;
                            return;
                    

                        when 3 =>
                            Result := N_Bare_Bin_Op.Bin_Op_F_Right;
                            return;
                    

                        when others => null;
                    end case;
                
end;
when Lkt_Block_Expr_Range =>
declare
N_Bare_Block_Expr : constant Bare_Block_Expr := Node;
begin
case Index is

                        when 1 =>
                            Result := N_Bare_Block_Expr.Block_Expr_F_Val_Defs;
                            return;
                    

                        when 2 =>
                            Result := N_Bare_Block_Expr.Block_Expr_F_Expr;
                            return;
                    

                        when others => null;
                    end case;
                
end;
when Lkt_Cast_Expr_Range =>
declare
N_Bare_Cast_Expr : constant Bare_Cast_Expr := Node;
begin
case Index is

                        when 1 =>
                            Result := N_Bare_Cast_Expr.Cast_Expr_F_Expr;
                            return;
                    

                        when 2 =>
                            Result := N_Bare_Cast_Expr.Cast_Expr_F_Excludes_Null;
                            return;
                    

                        when 3 =>
                            Result := N_Bare_Cast_Expr.Cast_Expr_F_Dest_Type;
                            return;
                    

                        when others => null;
                    end case;
                
end;
when Lkt_Error_On_Null_Range =>
declare
N_Bare_Error_On_Null : constant Bare_Error_On_Null := Node;
begin
case Index is

                        when 1 =>
                            Result := N_Bare_Error_On_Null.Error_On_Null_F_Expr;
                            return;
                    

                        when others => null;
                    end case;
                
end;
when Lkt_Generic_Instantiation_Range =>
declare
N_Bare_Generic_Instantiation : constant Bare_Generic_Instantiation := Node;
begin
case Index is

                        when 1 =>
                            Result := N_Bare_Generic_Instantiation.Generic_Instantiation_F_Name;
                            return;
                    

                        when 2 =>
                            Result := N_Bare_Generic_Instantiation.Generic_Instantiation_F_Args;
                            return;
                    

                        when others => null;
                    end case;
                
end;
when Lkt_Grammar_Discard_Range =>
declare
N_Bare_Grammar_Discard : constant Bare_Grammar_Discard := Node;
begin
case Index is

                        when 1 =>
                            Result := N_Bare_Grammar_Discard.Grammar_Discard_F_Expr;
                            return;
                    

                        when others => null;
                    end case;
                
end;
when Lkt_Grammar_Dont_Skip_Range =>
declare
N_Bare_Grammar_Dont_Skip : constant Bare_Grammar_Dont_Skip := Node;
begin
case Index is

                        when 1 =>
                            Result := N_Bare_Grammar_Dont_Skip.Grammar_Dont_Skip_F_Expr;
                            return;
                    

                        when 2 =>
                            Result := N_Bare_Grammar_Dont_Skip.Grammar_Dont_Skip_F_Dont_Skip;
                            return;
                    

                        when others => null;
                    end case;
                
end;
when Lkt_Grammar_List_Range =>
declare
N_Bare_Grammar_List : constant Bare_Grammar_List := Node;
begin
case Index is

                        when 1 =>
                            Result := N_Bare_Grammar_List.Grammar_List_F_List_Type;
                            return;
                    

                        when 2 =>
                            Result := N_Bare_Grammar_List.Grammar_List_F_Kind;
                            return;
                    

                        when 3 =>
                            Result := N_Bare_Grammar_List.Grammar_List_F_Expr;
                            return;
                    

                        when 4 =>
                            Result := N_Bare_Grammar_List.Grammar_List_F_Sep;
                            return;
                    

                        when others => null;
                    end case;
                
end;
when Lkt_Grammar_Null_Range =>
declare
N_Bare_Grammar_Null : constant Bare_Grammar_Null := Node;
begin
case Index is

                        when 1 =>
                            Result := N_Bare_Grammar_Null.Grammar_Null_F_Name;
                            return;
                    

                        when others => null;
                    end case;
                
end;
when Lkt_Grammar_Opt_Range =>
declare
N_Bare_Grammar_Opt : constant Bare_Grammar_Opt := Node;
begin
case Index is

                        when 1 =>
                            Result := N_Bare_Grammar_Opt.Grammar_Opt_F_Expr;
                            return;
                    

                        when others => null;
                    end case;
                
end;
when Lkt_Grammar_Opt_Error_Range =>
declare
N_Bare_Grammar_Opt_Error : constant Bare_Grammar_Opt_Error := Node;
begin
case Index is

                        when 1 =>
                            Result := N_Bare_Grammar_Opt_Error.Grammar_Opt_Error_F_Expr;
                            return;
                    

                        when others => null;
                    end case;
                
end;
when Lkt_Grammar_Opt_Error_Group_Range =>
declare
N_Bare_Grammar_Opt_Error_Group : constant Bare_Grammar_Opt_Error_Group := Node;
begin
case Index is

                        when 1 =>
                            Result := N_Bare_Grammar_Opt_Error_Group.Grammar_Opt_Error_Group_F_Expr;
                            return;
                    

                        when others => null;
                    end case;
                
end;
when Lkt_Grammar_Opt_Group_Range =>
declare
N_Bare_Grammar_Opt_Group : constant Bare_Grammar_Opt_Group := Node;
begin
case Index is

                        when 1 =>
                            Result := N_Bare_Grammar_Opt_Group.Grammar_Opt_Group_F_Expr;
                            return;
                    

                        when others => null;
                    end case;
                
end;
when Lkt_Grammar_Or_Expr_Range =>
declare
N_Bare_Grammar_Or_Expr : constant Bare_Grammar_Or_Expr := Node;
begin
case Index is

                        when 1 =>
                            Result := N_Bare_Grammar_Or_Expr.Grammar_Or_Expr_F_Sub_Exprs;
                            return;
                    

                        when others => null;
                    end case;
                
end;
when Lkt_Grammar_Pick_Range =>
declare
N_Bare_Grammar_Pick : constant Bare_Grammar_Pick := Node;
begin
case Index is

                        when 1 =>
                            Result := N_Bare_Grammar_Pick.Grammar_Pick_F_Exprs;
                            return;
                    

                        when others => null;
                    end case;
                
end;
when Lkt_Grammar_Predicate_Range =>
declare
N_Bare_Grammar_Predicate : constant Bare_Grammar_Predicate := Node;
begin
case Index is

                        when 1 =>
                            Result := N_Bare_Grammar_Predicate.Grammar_Predicate_F_Expr;
                            return;
                    

                        when 2 =>
                            Result := N_Bare_Grammar_Predicate.Grammar_Predicate_F_Prop_Ref;
                            return;
                    

                        when others => null;
                    end case;
                
end;
when Lkt_Grammar_Rule_Ref_Range =>
declare
N_Bare_Grammar_Rule_Ref : constant Bare_Grammar_Rule_Ref := Node;
begin
case Index is

                        when 1 =>
                            Result := N_Bare_Grammar_Rule_Ref.Grammar_Rule_Ref_F_Node_Name;
                            return;
                    

                        when others => null;
                    end case;
                
end;
when Lkt_Grammar_Skip_Range =>
declare
N_Bare_Grammar_Skip : constant Bare_Grammar_Skip := Node;
begin
case Index is

                        when 1 =>
                            Result := N_Bare_Grammar_Skip.Grammar_Skip_F_Name;
                            return;
                    

                        when others => null;
                    end case;
                
end;
when Lkt_Grammar_Stop_Cut_Range =>
declare
N_Bare_Grammar_Stop_Cut : constant Bare_Grammar_Stop_Cut := Node;
begin
case Index is

                        when 1 =>
                            Result := N_Bare_Grammar_Stop_Cut.Grammar_Stop_Cut_F_Expr;
                            return;
                    

                        when others => null;
                    end case;
                
end;
when Lkt_Parse_Node_Expr_Range =>
declare
N_Bare_Parse_Node_Expr : constant Bare_Parse_Node_Expr := Node;
begin
case Index is

                        when 1 =>
                            Result := N_Bare_Parse_Node_Expr.Parse_Node_Expr_F_Node_Name;
                            return;
                    

                        when 2 =>
                            Result := N_Bare_Parse_Node_Expr.Parse_Node_Expr_F_Sub_Exprs;
                            return;
                    

                        when others => null;
                    end case;
                
end;
when Lkt_Token_No_Case_Lit_Range =>
declare
N_Bare_Token_No_Case_Lit : constant Bare_Token_No_Case_Lit := Node;
begin
case Index is

                        when 1 =>
                            Result := N_Bare_Token_No_Case_Lit.Token_No_Case_Lit_F_Lit;
                            return;
                    

                        when others => null;
                    end case;
                
end;
when Lkt_Token_Pattern_Concat_Range =>
declare
N_Bare_Token_Pattern_Concat : constant Bare_Token_Pattern_Concat := Node;
begin
case Index is

                        when 1 =>
                            Result := N_Bare_Token_Pattern_Concat.Token_Pattern_Concat_F_Left;
                            return;
                    

                        when 2 =>
                            Result := N_Bare_Token_Pattern_Concat.Token_Pattern_Concat_F_Right;
                            return;
                    

                        when others => null;
                    end case;
                
end;
when Lkt_Token_Ref_Range =>
declare
N_Bare_Token_Ref : constant Bare_Token_Ref := Node;
begin
case Index is

                        when 1 =>
                            Result := N_Bare_Token_Ref.Token_Ref_F_Token_Name;
                            return;
                    

                        when 2 =>
                            Result := N_Bare_Token_Ref.Token_Ref_F_Expr;
                            return;
                    

                        when others => null;
                    end case;
                
end;
when Lkt_If_Expr_Range =>
declare
N_Bare_If_Expr : constant Bare_If_Expr := Node;
begin
case Index is

                        when 1 =>
                            Result := N_Bare_If_Expr.If_Expr_F_Cond_Expr;
                            return;
                    

                        when 2 =>
                            Result := N_Bare_If_Expr.If_Expr_F_Then_Expr;
                            return;
                    

                        when 3 =>
                            Result := N_Bare_If_Expr.If_Expr_F_Alternatives;
                            return;
                    

                        when 4 =>
                            Result := N_Bare_If_Expr.If_Expr_F_Else_Expr;
                            return;
                    

                        when others => null;
                    end case;
                
end;
when Lkt_Isa_Range =>
declare
N_Bare_Isa : constant Bare_Isa := Node;
begin
case Index is

                        when 1 =>
                            Result := N_Bare_Isa.Isa_F_Expr;
                            return;
                    

                        when 2 =>
                            Result := N_Bare_Isa.Isa_F_Dest_Type;
                            return;
                    

                        when others => null;
                    end case;
                
end;
when Lkt_Keep_Expr_Range =>
declare
N_Bare_Keep_Expr : constant Bare_Keep_Expr := Node;
begin
case Index is

                        when 1 =>
                            Result := N_Bare_Keep_Expr.Keep_Expr_F_Expr;
                            return;
                    

                        when 2 =>
                            Result := N_Bare_Keep_Expr.Keep_Expr_F_Keep_Type;
                            return;
                    

                        when others => null;
                    end case;
                
end;
when Lkt_Lambda_Expr_Range =>
declare
N_Bare_Lambda_Expr : constant Bare_Lambda_Expr := Node;
begin
case Index is

                        when 1 =>
                            Result := N_Bare_Lambda_Expr.Lambda_Expr_F_Params;
                            return;
                    

                        when 2 =>
                            Result := N_Bare_Lambda_Expr.Lambda_Expr_F_Return_Type;
                            return;
                    

                        when 3 =>
                            Result := N_Bare_Lambda_Expr.Lambda_Expr_F_Body;
                            return;
                    

                        when others => null;
                    end case;
                
end;
when Lkt_Null_Lit_Range =>
declare
N_Bare_Null_Lit : constant Bare_Null_Lit := Node;
begin
case Index is

                        when 1 =>
                            Result := N_Bare_Null_Lit.Null_Lit_F_Dest_Type;
                            return;
                    

                        when others => null;
                    end case;
                
end;
when Lkt_Block_String_Lit_Range =>
declare
N_Bare_Block_String_Lit : constant Bare_Block_String_Lit := Node;
begin
case Index is

                        when 1 =>
                            Result := N_Bare_Block_String_Lit.Block_String_Lit_F_Lines;
                            return;
                    

                        when others => null;
                    end case;
                
end;
when Lkt_Logic_Assign_Range =>
declare
N_Bare_Logic_Assign : constant Bare_Logic_Assign := Node;
begin
case Index is

                        when 1 =>
                            Result := N_Bare_Logic_Assign.Logic_Assign_F_Dest_Var;
                            return;
                    

                        when 2 =>
                            Result := N_Bare_Logic_Assign.Logic_Assign_F_Value;
                            return;
                    

                        when others => null;
                    end case;
                
end;
when Lkt_Logic_Expr_Range =>
declare
N_Bare_Logic_Expr : constant Bare_Logic_Expr := Node;
begin
case Index is

                        when 1 =>
                            Result := N_Bare_Logic_Expr.Logic_Expr_F_Expr;
                            return;
                    

                        when others => null;
                    end case;
                
end;
when Lkt_Logic_Propagate_Range =>
declare
N_Bare_Logic_Propagate : constant Bare_Logic_Propagate := Node;
begin
case Index is

                        when 1 =>
                            Result := N_Bare_Logic_Propagate.Logic_Propagate_F_Dest_Var;
                            return;
                    

                        when 2 =>
                            Result := N_Bare_Logic_Propagate.Logic_Propagate_F_Call;
                            return;
                    

                        when others => null;
                    end case;
                
end;
when Lkt_Logic_Unify_Range =>
declare
N_Bare_Logic_Unify : constant Bare_Logic_Unify := Node;
begin
case Index is

                        when 1 =>
                            Result := N_Bare_Logic_Unify.Logic_Unify_F_Lhs;
                            return;
                    

                        when 2 =>
                            Result := N_Bare_Logic_Unify.Logic_Unify_F_Rhs;
                            return;
                    

                        when others => null;
                    end case;
                
end;
when Lkt_Match_Expr_Range =>
declare
N_Bare_Match_Expr : constant Bare_Match_Expr := Node;
begin
case Index is

                        when 1 =>
                            Result := N_Bare_Match_Expr.Match_Expr_F_Match_Expr;
                            return;
                    

                        when 2 =>
                            Result := N_Bare_Match_Expr.Match_Expr_F_Branches;
                            return;
                    

                        when others => null;
                    end case;
                
end;
when Lkt_Not_Expr_Range =>
declare
N_Bare_Not_Expr : constant Bare_Not_Expr := Node;
begin
case Index is

                        when 1 =>
                            Result := N_Bare_Not_Expr.Not_Expr_F_Expr;
                            return;
                    

                        when others => null;
                    end case;
                
end;
when Lkt_Paren_Expr_Range =>
declare
N_Bare_Paren_Expr : constant Bare_Paren_Expr := Node;
begin
case Index is

                        when 1 =>
                            Result := N_Bare_Paren_Expr.Paren_Expr_F_Expr;
                            return;
                    

                        when others => null;
                    end case;
                
end;
when Lkt_Raise_Expr_Range =>
declare
N_Bare_Raise_Expr : constant Bare_Raise_Expr := Node;
begin
case Index is

                        when 1 =>
                            Result := N_Bare_Raise_Expr.Raise_Expr_F_Dest_Type;
                            return;
                    

                        when 2 =>
                            Result := N_Bare_Raise_Expr.Raise_Expr_F_Except_Expr;
                            return;
                    

                        when others => null;
                    end case;
                
end;
when Lkt_Subscript_Expr_Range =>
declare
N_Bare_Subscript_Expr : constant Bare_Subscript_Expr := Node;
begin
case Index is

                        when 1 =>
                            Result := N_Bare_Subscript_Expr.Subscript_Expr_F_Prefix;
                            return;
                    

                        when 2 =>
                            Result := N_Bare_Subscript_Expr.Subscript_Expr_F_Index;
                            return;
                    

                        when others => null;
                    end case;
                
end;
when Lkt_Try_Expr_Range =>
declare
N_Bare_Try_Expr : constant Bare_Try_Expr := Node;
begin
case Index is

                        when 1 =>
                            Result := N_Bare_Try_Expr.Try_Expr_F_Try_Expr;
                            return;
                    

                        when 2 =>
                            Result := N_Bare_Try_Expr.Try_Expr_F_Or_Expr;
                            return;
                    

                        when others => null;
                    end case;
                
end;
when Lkt_Un_Op_Range =>
declare
N_Bare_Un_Op : constant Bare_Un_Op := Node;
begin
case Index is

                        when 1 =>
                            Result := N_Bare_Un_Op.Un_Op_F_Op;
                            return;
                    

                        when 2 =>
                            Result := N_Bare_Un_Op.Un_Op_F_Expr;
                            return;
                    

                        when others => null;
                    end case;
                
end;
when Lkt_Full_Decl_Range =>
declare
N_Bare_Full_Decl : constant Bare_Full_Decl := Node;
begin
case Index is

                        when 1 =>
                            Result := N_Bare_Full_Decl.Full_Decl_F_Doc;
                            return;
                    

                        when 2 =>
                            Result := N_Bare_Full_Decl.Full_Decl_F_Decl_Annotations;
                            return;
                    

                        when 3 =>
                            Result := N_Bare_Full_Decl.Full_Decl_F_Decl;
                            return;
                    

                        when others => null;
                    end case;
                
end;
when Lkt_Grammar_List_Sep_Range =>
declare
N_Bare_Grammar_List_Sep : constant Bare_Grammar_List_Sep := Node;
begin
case Index is

                        when 1 =>
                            Result := N_Bare_Grammar_List_Sep.Grammar_List_Sep_F_Token;
                            return;
                    

                        when 2 =>
                            Result := N_Bare_Grammar_List_Sep.Grammar_List_Sep_F_Extra;
                            return;
                    

                        when others => null;
                    end case;
                
end;
when Lkt_Import_Range =>
declare
N_Bare_Import : constant Bare_Import := Node;
begin
case Index is

                        when 1 =>
                            Result := N_Bare_Import.Import_F_Name;
                            return;
                    

                        when others => null;
                    end case;
                
end;
when Lkt_Langkit_Root_Range =>
declare
N_Bare_Langkit_Root : constant Bare_Langkit_Root := Node;
begin
case Index is

                        when 1 =>
                            Result := N_Bare_Langkit_Root.Langkit_Root_F_Imports;
                            return;
                    

                        when 2 =>
                            Result := N_Bare_Langkit_Root.Langkit_Root_F_Decls;
                            return;
                    

                        when others => null;
                    end case;
                
end;
when Lkt_Lexer_Case_Rule_Range =>
declare
N_Bare_Lexer_Case_Rule : constant Bare_Lexer_Case_Rule := Node;
begin
case Index is

                        when 1 =>
                            Result := N_Bare_Lexer_Case_Rule.Lexer_Case_Rule_F_Expr;
                            return;
                    

                        when 2 =>
                            Result := N_Bare_Lexer_Case_Rule.Lexer_Case_Rule_F_Alts;
                            return;
                    

                        when others => null;
                    end case;
                
end;
when Lkt_Lexer_Case_Rule_Send_Range =>
declare
N_Bare_Lexer_Case_Rule_Send : constant Bare_Lexer_Case_Rule_Send := Node;
begin
case Index is

                        when 1 =>
                            Result := N_Bare_Lexer_Case_Rule_Send.Lexer_Case_Rule_Send_F_Sent;
                            return;
                    

                        when 2 =>
                            Result := N_Bare_Lexer_Case_Rule_Send.Lexer_Case_Rule_Send_F_Match_Size;
                            return;
                    

                        when others => null;
                    end case;
                
end;
when Lkt_Lkt_Node_Base_List =>
declare
N_Bare_Lkt_Node_Base_List : constant Bare_Lkt_Node_Base_List := Node;
begin

                    if Index > N_Bare_Lkt_Node_Base_List.Count then
                        Index_In_Bounds := False;
                    else
                        Result := N_Bare_Lkt_Node_Base_List.Nodes (Index);
                    end if;
                    return;
                
end;
when Lkt_Match_Branch_Range =>
declare
N_Bare_Match_Branch : constant Bare_Match_Branch := Node;
begin
case Index is

                        when 1 =>
                            Result := N_Bare_Match_Branch.Match_Branch_F_Decl;
                            return;
                    

                        when 2 =>
                            Result := N_Bare_Match_Branch.Match_Branch_F_Expr;
                            return;
                    

                        when others => null;
                    end case;
                
end;
when Lkt_Param_Range =>
declare
N_Bare_Param : constant Bare_Param := Node;
begin
case Index is

                        when 1 =>
                            Result := N_Bare_Param.Param_F_Name;
                            return;
                    

                        when 2 =>
                            Result := N_Bare_Param.Param_F_Value;
                            return;
                    

                        when others => null;
                    end case;
                
end;
when Lkt_Function_Type_Ref_Range =>
declare
N_Bare_Function_Type_Ref : constant Bare_Function_Type_Ref := Node;
begin
case Index is

                        when 1 =>
                            Result := N_Bare_Function_Type_Ref.Function_Type_Ref_F_Args_Types;
                            return;
                    

                        when 2 =>
                            Result := N_Bare_Function_Type_Ref.Function_Type_Ref_F_Return_Type;
                            return;
                    

                        when others => null;
                    end case;
                
end;
when Lkt_Generic_Type_Ref_Range =>
declare
N_Bare_Generic_Type_Ref : constant Bare_Generic_Type_Ref := Node;
begin
case Index is

                        when 1 =>
                            Result := N_Bare_Generic_Type_Ref.Generic_Type_Ref_F_Type_Name;
                            return;
                    

                        when 2 =>
                            Result := N_Bare_Generic_Type_Ref.Generic_Type_Ref_F_Params;
                            return;
                    

                        when others => null;
                    end case;
                
end;
when Lkt_Simple_Type_Ref_Range =>
declare
N_Bare_Simple_Type_Ref : constant Bare_Simple_Type_Ref := Node;
begin
case Index is

                        when 1 =>
                            Result := N_Bare_Simple_Type_Ref.Simple_Type_Ref_F_Type_Name;
                            return;
                    

                        when others => null;
                    end case;
                
end;
when Lkt_Var_Bind_Range =>
declare
N_Bare_Var_Bind : constant Bare_Var_Bind := Node;
begin
case Index is

                        when 1 =>
                            Result := N_Bare_Var_Bind.Var_Bind_F_Name;
                            return;
                    

                        when 2 =>
                            Result := N_Bare_Var_Bind.Var_Bind_F_Expr;
                            return;
                    

                        when others => null;
                    end case;
                
end;
when others => null;
end case;

      --  Execution should reach this point iff nothing matched this index, so
      --  we must be out of bounds.
      Index_In_Bounds := False;
   end Get_Child;

   -----------
   -- Print --
   -----------

   procedure Print
     (Node        : Liblktlang_Support.Generic_API.Analysis.Lk_Node;
      Show_Slocs  : Boolean;
      Line_Prefix : String := "")
   is
      use Liblktlang_Support.Generic_API.Analysis;
      use Liblktlang_Support.Generic_API.Introspection;

      T : Type_Ref;
   begin
      if Node.Is_Null then
         Put_Line ("None");
         return;
      end if;

      T := Type_Of (Node);
      Put (Line_Prefix & Image (Node_Type_Repr_Name (T)));
      if Show_Slocs then
         Put ("[" & Image (Node.Sloc_Range) & "]");
      end if;

      if Node.Is_Incomplete then
         Put (" <<INCOMPLETE>>");
      end if;

      if Node.Is_Token_Node then
         Put_Line (": " & Image (Node.Text));

      elsif Is_List_Node (Node) then

         --  List nodes are displayed in a special way (they have no field)

         declare
            Count : constant Natural := Node.Children_Count;
            Child : Lk_Node;
         begin
            if Count = 0 then
               Put_Line (": <empty list>");
               return;
            end if;
            New_Line;

            for I in 1 .. Count loop
               Child := Node.Child (I);
               if not Child.Is_Null then
                  Print (Child, Show_Slocs, Line_Prefix & "|  ");
               end if;
            end loop;
         end;

      else
         --  This is for regular nodes: display each syntax field (i.e.
         --  non-property member).

         declare
            Attr_Prefix     : constant String := Line_Prefix & "|";
            Children_Prefix : constant String := Line_Prefix & "|  ";
            M_List          : constant Struct_Member_Ref_Array := Members (T);
            Child           : Lk_Node;
         begin
            New_Line;
            for M of M_List loop
               if not Is_Property (M) and then not Is_Null_For (M, T) then
                  Child := As_Node (Eval_Node_Member (Node, M));
                  Put (Attr_Prefix
                       & Image (Format_Name (Member_Name (M), Lower)) & ":");
                  if Child.Is_Null then
                     Put_Line (" <null>");
                  else
                     New_Line;
                     Print (Child, Show_Slocs, Children_Prefix);
                  end if;
               end if;
            end loop;
         end;
      end if;
   end Print;

   -----------
   -- Print --
   -----------

   procedure Print
     (Node        : Bare_Lkt_Node;
      Show_Slocs  : Boolean;
      Line_Prefix : String := "")
   is
      Entity : constant Internal_Entity := (Node, No_Entity_Info);
   begin
      Print (To_Generic_Node (Entity), Show_Slocs, Line_Prefix);
   end Print;

   ------------
   -- Parent --
   ------------

   function Parent (Node : Bare_Lkt_Node) return Bare_Lkt_Node is
   begin
      return Node.Parent;
   end Parent;

   ------------------
   -- Stored_Token --
   ------------------

   function Stored_Token
     (Node  : Bare_Lkt_Node;
      Token : Token_Reference) return Token_Index
   is
      Index : constant Token_Or_Trivia_Index := Get_Token_Index (Token);
   begin
      if Node.Unit.TDH'Access /= Get_Token_TDH (Token) then
         Raise_Property_Exception
           (Node,
            Property_Error'Identity,
            "Cannot associate a token and a node from different analysis"
            & " units");
      elsif Index.Trivia /= No_Token_Index then
         Raise_Property_Exception
           (Node,
            Property_Error'Identity,
            "A node cannot hold trivia");
      end if;

      return Index.Token;
   end Stored_Token;

   -------------------------
   -- Children_And_Trivia --
   -------------------------

   function Children_And_Trivia
     (Node : Bare_Lkt_Node) return Bare_Children_Vector
   is
      Ret_Vec : Bare_Children_Vector;
      Ctx     : Internal_Context renames Node.Unit.Context;
      TDH     : Token_Data_Handler renames Node.Unit.TDH;

      procedure Append_Trivias (First, Last : Token_Index);
      --  Append all the trivias of tokens between indices First and Last to
      --  the returned vector.

      function Filter_Children
        (Parent : Bare_Lkt_Node)
         return Internal_Bare_Lkt_Node_Array;
      --  Return an array for all children in Parent that are not null

      --------------------
      -- Append_Trivias --
      --------------------

      procedure Append_Trivias (First, Last : Token_Index) is
      begin
         for I in First .. Last loop
            for D of Get_Trivias (TDH, I) loop
               Ret_Vec.Append
                 (Bare_Child_Record'
                    (Kind   => Trivia,
                     Trivia => Wrap_Token_Reference
                                 (Ctx, TDH'Access, (I, D))));
            end loop;
         end loop;
      end Append_Trivias;

      ---------------------
      -- Filter_Children --
      ---------------------

      function Filter_Children
        (Parent : Bare_Lkt_Node)
         return Internal_Bare_Lkt_Node_Array
      is
         Children : constant Internal_Bare_Lkt_Node_Array :=
            Implementation.Children (Parent);
         Result   : Internal_Bare_Lkt_Node_Array (Children'Range);
         Next     : Integer := Result'First;
      begin
         for I in Children'Range loop
            if Children (I) /= null then
               Result (Next) := Children (I);
               Next := Next + 1;
            end if;
         end loop;
         return Result (Result'First .. Next - 1);
      end Filter_Children;

      First_Child : constant Positive := 1;
      N_Children  : constant Internal_Bare_Lkt_Node_Array :=
         Filter_Children (Node);
   begin
      if N_Children'Length > 0
        and then (Node.Token_Start_Index
                    /= N_Children (First_Child).Token_Start_Index)
      then
         Append_Trivias (Node.Token_Start_Index,
                         N_Children (First_Child).Token_Start_Index - 1);
      end if;

      --  Append each node to Ret_Vec, and append trivia that follow after each
      --  non-ghost nodes.
      for I in N_Children'Range loop
         Ret_Vec.Append (Bare_Child_Record'(Child, N_Children (I)));
         if not Is_Ghost (N_Children (I)) then
            Append_Trivias (N_Children (I).Token_End_Index,
                            (if I = N_Children'Last
                             then Node.Token_End_Index - 1
                             else N_Children (I + 1).Token_Start_Index - 1));
         end if;
      end loop;

      return Ret_Vec;
   end Children_And_Trivia;

   --------------
   -- Is_Ghost --
   --------------

   function Is_Ghost (Node : Bare_Lkt_Node) return Boolean
   is (Node.Token_End_Index = No_Token_Index);

   -------------------
   -- Is_Incomplete --
   -------------------

   function Is_Incomplete (Node : Bare_Lkt_Node) return Boolean
   is
      LGC : Bare_Lkt_Node;
   begin
     if Is_List_Node (Node.Kind) then
        LGC := (if Last_Child_Index (Node) /= 0
                then Child (Node, Last_Child_Index (Node))
                else null);
        return LGC /= null and then Is_Incomplete (LGC);
      else
         return Node.Last_Attempted_Child > -1;
      end if;
   end;

   -----------------
   -- Token_Start --
   -----------------

   function Token_Start (Node : Bare_Lkt_Node) return Token_Reference
   is (Token (Node, Node.Token_Start_Index));

   ---------------
   -- Token_End --
   ---------------

   function Token_End (Node : Bare_Lkt_Node) return Token_Reference
   is
     (if Node.Token_End_Index = No_Token_Index
      then Token_Start (Node)
      else Token (Node, Node.Token_End_Index));

   -----------
   -- Token --
   -----------

   function Token
     (Node  : Bare_Lkt_Node;
      Index : Token_Index) return Token_Reference
   is
      Unit    : constant Internal_Unit := Node.Unit;
      Context : constant Internal_Context := Unit.Context;
   begin
      return Wrap_Token_Reference
        (Context, Token_Data (Unit), (Index, No_Token_Index));
   end Token;

   ---------
   -- "<" --
   ---------

   function "<" (Left, Right : Bare_Lkt_Node) return Boolean is
   begin
      --  Reject invalid inputs
      if Left /= null and Is_Synthetic (Left) then
         raise Property_Error with "left node is synthetic";
      elsif Right /= null and Is_Synthetic (Right) then
         raise Property_Error with "right node is synthetic";
      end if;

      --  Null nodes come first
      if Left = null then
         return Right /= null;
      elsif Right = null then
         return False;
      end if;

      --  So we have two non-null nodes. Sort by unit filename
      if Left.Unit < Right.Unit then
         return True;
      elsif Left.Unit /= Right.Unit then
         return False;
      end if;

      --  Both nodes come from the same unit: compare their token indexes
      if Left.Token_Start_Index < Right.Token_Start_Index then
         return True;
      elsif Left.Token_Start_Index > Right.Token_Start_Index then
         return False;
      else
         return Left.Token_End_Index < Right.Token_End_Index;
      end if;
   end "<";

   -------------
   -- Is_Null --
   -------------

   function Is_Null (Node : Bare_Lkt_Node) return Boolean
   is (Node = null);

   ----------
   -- Kind --
   ----------

   function Kind (Node : Bare_Lkt_Node) return Lkt_Node_Kind_Type
   is (Node.Kind);

   -----------------
   -- Child_Index --
   -----------------

   function Child_Index (Node : Bare_Lkt_Node) return Integer
   is
      N : Bare_Lkt_Node := null;
   begin
      if Node.Parent = null then
         raise Property_Error with
            "Trying to get the child index of a root node";
      end if;

      for I in First_Child_Index (Node.Parent)
            .. Last_Child_Index (Node.Parent)
      loop
         N := Child (Node.Parent, I);
         if N = Node then
            return I - 1;
         end if;
      end loop;

      --  If we reach this point, then Node isn't a Child of Node.Parent. This
      --  is not supposed to happen.
      raise Program_Error;
   end Child_Index;

   -------------------
   -- Fetch_Sibling --
   -------------------

   function Fetch_Sibling
     (Node   : Bare_Lkt_Node;
      Offset : Integer) return Bare_Lkt_Node is
   begin
      --  Root nodes have no sibling: handle them now to avoid invalid requests
      --  in the code below.
      if Node.Parent = null then
         return null;
      end if;

      declare
         Node_Index : constant Positive := Child_Index (Node) + 1;
         --  Child_Index is 0-based, but the Child primitive expects a 1-based
         --  index.

         Sibling_Index : constant Integer := Node_Index + Offset;
      begin
         --  Child returns null for out-of-bound indexes

         return (if Sibling_Index >= 1
                 then Child (Node.Parent, Sibling_Index)
                 else null);
      end;
   end Fetch_Sibling;

   -------------------
   -- Fetch_Sibling --
   -------------------

   function Fetch_Sibling
     (Node   : Bare_Lkt_Node;
      E_Info : Internal_Entity_Info;
      Offset : Integer) return Internal_Entity
   is
      Sibling : constant Bare_Lkt_Node := Fetch_Sibling (Node, Offset);
   begin
      --  Don't forget to clear entity info if the result is nul

      return (if Sibling = null
              then No_Entity
              else (Sibling, E_Info));
   end Fetch_Sibling;

   ----------------------
   -- Previous_Sibling --
   ----------------------

   function Previous_Sibling
     (Node   : Bare_Lkt_Node;
      E_Info : Internal_Entity_Info := No_Entity_Info)
      return Internal_Entity is
   begin
      return Fetch_Sibling (Node, E_Info, -1);
   end Previous_Sibling;

   ------------------
   -- Next_Sibling --
   ------------------

   function Next_Sibling
     (Node   : Bare_Lkt_Node;
      E_Info : Internal_Entity_Info := No_Entity_Info)
      return Internal_Entity is
   begin
      return Fetch_Sibling (Node, E_Info, 1);
   end Next_Sibling;

   -------------
   -- Inc_Ref --
   -------------

   procedure Inc_Ref (Self : Node_Builder_Type) is
   begin
      if Self.Ref_Count > 0 then
         Self.Ref_Count := Self.Ref_Count + 1;
      end if;
   end Inc_Ref;

   -------------
   -- Dec_Ref --
   -------------

   procedure Dec_Ref (Self : in out Node_Builder_Type) is
   begin
      if Self = null or else Self.Ref_Count < 0 then
         return;
      elsif Self.Ref_Count = 1 then
         Self.Release;
         Free (Self);
      else
         Self.Ref_Count := Self.Ref_Count - 1;
      end if;
   end Dec_Ref;

   ------------------------------
   -- Create_Copy_Node_Builder --
   ------------------------------

   function Create_Copy_Node_Builder
     (Value : Bare_Lkt_Node) return Node_Builder_Type is
   begin
      --  No need to allocate a new builder if in practice it cannot be
      --  distinguished from the "null" builder.

      if Value = null then
         return Null_Node_Builder;
      else
         return new Copy_Node_Builder_Record'(Ref_Count => 1, Value => Value);
      end if;
   end Create_Copy_Node_Builder;



   ----------------------
   -- Compare_Metadata --
   ----------------------

   --  Deactivate "not referenced" warnings because if the metadata struct has
   --  no fields, formals and temporaries won't be referenced in the two
   --  following functions.
   pragma Warnings (Off, "referenced");
   function Compare_Metadata (L, R : Internal_Metadata) return Boolean is
   begin
      return True;
   end Compare_Metadata;

   ----------
   -- Hash --
   ----------

   function Hash (Self : Internal_Metadata) return Hash_Type is
      Ret : Hash_Type := Liblktlang_Support.Hashes.Initial_Hash;
   begin
      return Ret;
   end Hash;
   pragma Warnings (On, "referenced");

   -------------
   -- Combine --
   -------------

   function Combine
     (L, R : Internal_Metadata) return Internal_Metadata
   is
      pragma Unreferenced (L, R);
      Ret : Internal_Metadata := No_Metadata;
   begin
      return Ret;
   end Combine;

   -------------------------------
   -- Create_Static_Lexical_Env --
   -------------------------------

   function Create_Static_Lexical_Env
     (Parent            : Lexical_Env;
      Node              : Bare_Lkt_Node;
      Sym_Table         : Symbol_Table;
      Transitive_Parent : Boolean := False) return Lexical_Env
   is
      Unit : constant Internal_Unit :=
        (if Node = null then null else Node.Unit);
   begin
      return Result : Lexical_Env := Create_Lexical_Env
        (Parent, Node, Transitive_Parent, Sym_Table, Convert_Unit (Unit))
      do
         if Unit /= null then
            Register_Destroyable (Unit, Unwrap (Result.Env));
         end if;
      end return;
   end Create_Static_Lexical_Env;

   ---------
   -- Get --
   ---------

   function Get
     (Self  : Bare_Lkt_Node;
      A     : AST_Envs.Entity_Array;
      Index : Integer) return Internal_Entity
   is
      function Length (A : AST_Envs.Entity_Array) return Natural
      is (A'Length);

      function Get
        (A     : AST_Envs.Entity_Array;
         Index : Integer) return Internal_Entity
      is (A (Index + 1)); --  A is 1-based but Index is 0-based

      function Relative_Get is new Liblktlang_Support.Relative_Get
        (Item_Type     => Entity,
         Sequence_Type => AST_Envs.Entity_Array,
         Length        => Length,
         Get           => Get);
      Result : Internal_Entity;
   begin
      if Relative_Get (A, Index, Result) then
         return Result;
      else
         Raise_Property_Exception
           (Self, Property_Error'Identity, "out-of-bounds array access");
      end if;
   end Get;

   -----------
   -- Group --
   -----------

   function Group
     (Envs   : Lexical_Env_Array_Access;
      Env_Md : Internal_Metadata := No_Metadata) return Lexical_Env
   is (Group (Lexical_Env_Array (Envs.Items), Env_Md));

       

   

      --
      --  Untyped wrappers for Bare_Lkt_Node
      --

         
function Lkt_Node_P_Shed_Rebindings
  (E : Entity
  ) return Internal_Entity;



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   

      --
      --  Untyped wrappers for Bare_Dyn_Env_Wrapper
      --

         
function Dyn_Env_Wrapper_P_Instantiation_Bindings
  (E : Entity
  ) return Internal_Inner_Env_Assoc_Array_Access;



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   

      --
      --  Untyped wrappers for Bare_Langkit_Root
      --

         
function Langkit_Root_P_Internal_Env
  (E : Entity
  ) return Lexical_Env;



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   



       

   




   ------------------
   -- Children_Env --
   ------------------

   function Children_Env
     (Node   : Bare_Lkt_Node;
      E_Info : Internal_Entity_Info := No_Entity_Info)
      return Lexical_Env
   is (Rebind_Env (Node.Self_Env, E_Info));

   --------------
   -- Node_Env --
   --------------

   function Node_Env
     (Node   : Bare_Lkt_Node;
      E_Info : Internal_Entity_Info := No_Entity_Info)
      return Lexical_Env
   is
      function Get_Base_Env return Lexical_Env;
      --  Return the environment that we need to rebind before returning

      ------------------
      -- Get_Base_Env --
      ------------------

      function Get_Base_Env return Lexical_Env is
         pragma Warnings (Off, "referenced");
         function Get_Parent_Env return Lexical_Env;
         pragma Warnings (On, "referenced");

         --------------------
         -- Get_Parent_Env --
         --------------------

         function Get_Parent_Env return Lexical_Env is
            Parent : constant Lexical_Env := AST_Envs.Parent (Node.Self_Env);
         begin
            --  If Node is the root scope or the empty environment, Parent can
            --  be a wrapper around the null node. Turn this into the
            --  Empty_Env, as null envs are erroneous values in properties.
            return (if Unwrap (Parent) = null
                    then Empty_Env
                    else Parent);
         end Get_Parent_Env;

      begin
         
         return
           (if Node.Kind in Lkt_Field_Decl | Lkt_Fun_Decl | Lkt_Env_Spec_Decl | Lkt_Generic_Decl | Lkt_Grammar_Decl | Lkt_Lexer_Decl | Lkt_Block_Expr | Lkt_Lambda_Expr | Lkt_Decl_Block | Lkt_Match_Branch
            then Get_Parent_Env
            else Node.Self_Env);
      end Get_Base_Env;

      Base_Env : Lexical_Env := Get_Base_Env;
      Result   : constant Lexical_Env := Rebind_Env (Base_Env, E_Info);
   begin
      Dec_Ref (Base_Env);
      return Result;
   end Node_Env;

   ------------
   -- Parent --
   ------------

   function Parent
     (Node   : Bare_Lkt_Node;
      E_Info : Internal_Entity_Info := No_Entity_Info)
      return Internal_Entity is
   begin
      --  TODO: shed entity information as appropriate
      return (Node.Parent, E_Info);
   end Parent;

   -------------
   -- Parents --
   -------------

   function Parents
     (Node      : Bare_Lkt_Node;
      With_Self : Boolean := True;
      E_Info    : Internal_Entity_Info := No_Entity_Info)
      return Internal_Entity_Array_Access
   is
      Bare_Parents : Bare_Lkt_Node_Array_Access := Parents (Node, With_Self);
      Result       : Internal_Entity_Array_Access :=
         Create_Internal_Entity_Array (Bare_Parents.N);
   begin
      --  TODO: shed entity information as appropriate
      for I in Bare_Parents.Items'Range loop
         Result.Items (I) := (Bare_Parents.Items (I), E_Info);
      end loop;
      Dec_Ref (Bare_Parents);
      return Result;
   end Parents;

   --------------
   -- Children --
   --------------

   function Children
     (Node   : Bare_Lkt_Node;
      E_Info : Internal_Entity_Info := No_Entity_Info)
      return Internal_Entity_Array_Access
   is
      Bare_Children : Bare_Lkt_Node_Array_Access := Children (Node);
      Result        : Internal_Entity_Array_Access :=
         Create_Internal_Entity_Array (Bare_Children.N);
   begin
      --  TODO: shed entity information as appropriate
      for I in Bare_Children.Items'Range loop
         Result.Items (I) := (Bare_Children.Items (I), E_Info);
      end loop;
      Dec_Ref (Bare_Children);
      return Result;
   end Children;

   ---------------------
   -- New_Unit_String --
   ---------------------

   function New_Unit_String
     (Unit : Internal_Unit; Str : String) return String_Access
   is
      procedure Register_Destroyable_String is new Register_Destroyable_Gen
        (String, String_Access, Free);
   begin
      return Ret : String_Access := new String'(Str) do
         Register_Destroyable_String (Unit, Ret);
      end return;
   end New_Unit_String;

   --------------------------------
   -- Assign_Names_To_Logic_Vars --
   --------------------------------

   procedure Assign_Names_To_Logic_Vars (Node : Bare_Lkt_Node) is

      pragma Warnings (Off, "referenced");

      procedure Assign
        (Node  : Bare_Lkt_Node;
         LV    : in out Logic_Var_Record;
         Field : String);
      --  Assign a name to the LV logic variable. Node must be the node that
      --  owns LV, and Field must be the name of the field in Node that holds
      --  LV.

      ------------
      -- Assign --
      ------------

      procedure Assign
        (Node  : Bare_Lkt_Node;
         LV    : in out Logic_Var_Record;
         Field : String) is
      begin
         LV.Dbg_Name :=
           new String'(Image (Short_Text_Image (Node)) & "." & Field);
      end Assign;

      K : constant Lkt_Node_Kind_Type := Node.Kind;

      pragma Warnings (On, "referenced");

   begin
      
      case Lkt_Lkt_Node (K) is
when Lkt_Lambda_Arg_Decl_Range =>
declare
N_Bare_Lambda_Arg_Decl : constant Bare_Lambda_Arg_Decl := Node;
begin
Assign (N_Bare_Lambda_Arg_Decl,        N_Bare_Lambda_Arg_Decl.Lambda_Arg_Decl_Type_Var,        "type_var");
end;
when Lkt_Expr =>
declare
N_Bare_Expr : constant Bare_Expr := Node;
begin
Assign (N_Bare_Expr,        N_Bare_Expr.Expr_Expected_Type_Var,        "expected_type_var");
Assign (N_Bare_Expr,        N_Bare_Expr.Expr_Actual_Type_Var,        "actual_type_var");
Assign (N_Bare_Expr,        N_Bare_Expr.Expr_Generic_Func_Type_Var,        "generic_func_type_var");
case Lkt_Expr (K) is
when Lkt_Array_Literal_Range =>
declare
N_Bare_Array_Literal : constant Bare_Array_Literal := N_Bare_Expr;
begin
Assign (N_Bare_Array_Literal,        N_Bare_Array_Literal.Array_Literal_Expected_Exprs_Type_Var,        "expected_exprs_type_var");
Assign (N_Bare_Array_Literal,        N_Bare_Array_Literal.Array_Literal_Actual_Element_Type,        "actual_element_type");
end;
when Lkt_Generic_Instantiation_Range =>
declare
N_Bare_Generic_Instantiation : constant Bare_Generic_Instantiation := N_Bare_Expr;
begin
Assign (N_Bare_Generic_Instantiation,        N_Bare_Generic_Instantiation.Generic_Instantiation_Rebinded_Var,        "rebinded_var");
end;
when Lkt_Ref_Id_Range =>
declare
N_Bare_Ref_Id : constant Bare_Ref_Id := N_Bare_Expr;
begin
Assign (N_Bare_Ref_Id,        N_Bare_Ref_Id.Ref_Id_Ref_Var,        "ref_var");
end;
when Lkt_If_Expr_Range =>
declare
N_Bare_If_Expr : constant Bare_If_Expr := N_Bare_Expr;
begin
Assign (N_Bare_If_Expr,        N_Bare_If_Expr.If_Expr_Expected_Branch_Type_Var,        "expected_branch_type_var");
end;
when Lkt_Keep_Expr_Range =>
declare
N_Bare_Keep_Expr : constant Bare_Keep_Expr := N_Bare_Expr;
begin
Assign (N_Bare_Keep_Expr,        N_Bare_Keep_Expr.Keep_Expr_Array_Element_Type,        "array_element_type");
end;
when Lkt_Match_Expr_Range =>
declare
N_Bare_Match_Expr : constant Bare_Match_Expr := N_Bare_Expr;
begin
Assign (N_Bare_Match_Expr,        N_Bare_Match_Expr.Match_Expr_Expected_Branch_Type_Var,        "expected_branch_type_var");
end;
when Lkt_Try_Expr_Range =>
declare
N_Bare_Try_Expr : constant Bare_Try_Expr := N_Bare_Expr;
begin
Assign (N_Bare_Try_Expr,        N_Bare_Try_Expr.Try_Expr_Expected_Expr_Type_Var,        "expected_expr_type_var");
end;
when others => null;
end case;
end;
when Lkt_Type_Ref =>
declare
N_Bare_Type_Ref : constant Bare_Type_Ref := Node;
begin
Assign (N_Bare_Type_Ref,        N_Bare_Type_Ref.Type_Ref_Type_Var,        "type_var");
end;
when others => null;
end case;
      for Child of Internal_Bare_Lkt_Node_Array'(Children (Node)) loop
         if Child /= null then
            Assign_Names_To_Logic_Vars (Child);
         end if;
      end loop;
   end Assign_Names_To_Logic_Vars;

   --------------------------
   -- Initialization_Error --
   --------------------------

   function Initialization_Error
     (Exc : Ada.Exceptions.Exception_Occurrence)
      return Error_Initialization_State
   is
      use Ada.Exceptions;
   begin
      if
         
            Exception_Identity (Exc) = Property_Error'Identity
         then
            return Raised_Property_Error;
      else
         raise Program_Error;
      end if;
   end Initialization_Error;

   ----------------------------------
   -- Reraise_Initialization_Error --
   ----------------------------------

   procedure Reraise_Initialization_Error
     (Node    : Bare_Lkt_Node;
      State   : Error_Initialization_State;
      Message : String)
   is
      Exc : Ada.Exceptions.Exception_Id;
   begin
      case State is
            when Raised_Property_Error =>
               Exc := Property_Error'Identity;
      end case;
      Raise_Property_Exception (Node, Exc, Message);
   end Reraise_Initialization_Error;

   ----------------
   -- Text_Image --
   ----------------

   function Text_Image (Ent : Internal_Entity) return Text_Type is
   begin
      if Ent.Node /= null then
         declare
            Node_Image : constant Text_Type := Short_Text_Image (Ent.Node);
         begin
            return
            (if Ent.Info.Rebindings /= null
             then "<| "
             & Node_Image (Node_Image'First + 1 .. Node_Image'Last - 1) & " "
             & AST_Envs.Text_Image (Ent.Info.Rebindings) & " |>"
             else Node_Image);
         end;
      else
         return "None";
      end if;
   end Text_Image;

   ---------------------
   -- Full_Sloc_Image --
   ---------------------

   function Full_Sloc_Image (Node : Bare_Lkt_Node) return String_Type
   is
      Res      : constant Text_Type :=
        To_Text
          (Ada.Directories.Simple_Name
             (Get_Filename (Unit (Node))))
           & ":" & To_Text (Image (Start_Sloc (Sloc_Range (Node)))) & ": ";
   begin
      return Create_String (Res);
   end Full_Sloc_Image;

   ---------------------------------
   -- Completion_Item_Kind_To_Int --
   ---------------------------------

   function Completion_Item_Kind_To_Int
     (Node : Bare_Lkt_Node;
      Kind : Completion_Item_Kind)
      return Integer
   is
      pragma Unreferenced (Node);
   begin
      return Completion_Item_Kind'Enum_Rep (Kind) + 1;
   end Completion_Item_Kind_To_Int;

   -----------
   -- Image --
   -----------

   function Image (Ent : Internal_Entity) return String is
      Result : constant Text_Type := Text_Image (Ent);
   begin
      return Image (Result);
   end Image;

   ---------------
   -- Can_Reach --
   ---------------

   function Can_Reach (El, From : Bare_Lkt_Node) return Boolean is
   begin
      return Lkt_Node_P_Can_Reach (El, From);
   end Can_Reach;

   -----------------
   -- Hash_Entity --
   -----------------

   function Hash_Entity (Self : Internal_Entity) return Hash_Type is
   begin
      return Combine
        ((Hash (Self.Node), Hash (Self.Info.Rebindings), Hash (Self.Info.Md)));
   end Hash_Entity;

   --------------------
   -- Compare_Entity --
   --------------------

   function Compare_Entity (Left, Right : Internal_Entity) return Boolean
   is
   begin
      return Left.Node = Right.Node
             and then Left.Info.Rebindings = Right.Info.Rebindings
             and then Compare_Metadata (Left.Info.Md, Right.Info.Md);
   end Compare_Entity;

   --------------------------------
   -- Create_Dynamic_Lexical_Env --
   --------------------------------

   function Create_Dynamic_Lexical_Env
     (Self              : Bare_Lkt_Node;
      Assocs_Getter     : Inner_Env_Assocs_Resolver;
      Assoc_Resolver    : Entity_Resolver;
      Transitive_Parent : Boolean;
      Sym_Table         : Symbol_Table) return Lexical_Env
   is
      Unit : constant Internal_Unit := Self.Unit;
   begin
      --  This restriction is necessary to avoid relocation issues when
      --  Self.Self_Env is terminated.
      if Is_Foreign_Strict (Self.Self_Env, Self) then
         Raise_Property_Exception
           (Self,
            Property_Error'Identity,
            "cannot create a dynamic lexical env when Self.Self_Env is"
            & " foreign");
      end if;

      return Result : constant Lexical_Env := Create_Dynamic_Lexical_Env
        (Parent            => Null_Lexical_Env,
         Node              => Self,
         Transitive_Parent => Transitive_Parent,
         Owner             => Convert_Unit (Unit),
         Assocs_Getter     => Assocs_Getter,
         Assoc_Resolver    => Assoc_Resolver,
         Sym_Table         => Sym_Table)
      do
         --  Since dynamic lexical environments can only be created in lazy
         --  field initializers, it is fine to tie Result's lifetime to the
         --  its owning unit's lifetime.
         Register_Destroyable (Unit, Unwrap (Result));
      end return;
   end Create_Dynamic_Lexical_Env;

   procedure Destroy_Synthetic_Node (Node : in out Bare_Lkt_Node);
   --  Helper for the Register_Destroyable above

   ------------
   -- Length --
   ------------

   function Length (Node : Bare_Lkt_Node_Base_List) return Natural
   is (if Node = null then 0 else Children_Count (Node));


      -----------------
      -- Trace_Image --
      -----------------

      function Trace_Image (B : Boolean) return String is
      begin
         return (if B then "True" else "False");
      end Trace_Image;

      -----------------
      -- Trace_Image --
      -----------------

      function Trace_Image (I : Integer) return String is
      begin
         return Integer'Image (I);
      end Trace_Image;

      -----------------
      -- Trace_Image --
      -----------------

      function Trace_Image (S : Symbol_Type) return String is
      begin
         return (if S = No_Symbol
                 then "None"
                 else Image (S, With_Quotes => True));
      end Trace_Image;

      -----------------
      -- Trace_Image --
      -----------------

      function Trace_Image (C : Character_Type) return String is
         C_Str : constant Text_Type := (1 => C);
      begin
         return "'" & Image (C_Str) & "'";
      end Trace_Image;

      -----------------
      -- Trace_Image --
      -----------------

      function Trace_Image (S : String_Type) return String is
      begin
         return Image (S.Content, With_Quotes => True);
      end Trace_Image;

      -----------------
      -- Trace_Image --
      -----------------

      function Trace_Image (Env : Lexical_Env) return String is
      begin
         case Env.Kind is
         when Static_Primary =>
            return "<LexicalEnv static-primary for "
                   & Trace_Image (Env_Node (Env)) & ">";
         when others =>
            return "<LexicalEnv synthetic>";
         end case;
      end Trace_Image;

      -----------------
      -- Trace_Image --
      -----------------

      function Trace_Image (R : Env_Rebindings) return String is
      begin
         return Image (Text_Image (R));
      end Trace_Image;

      -----------------
      -- Trace_Image --
      -----------------

      function Trace_Image (Unit : Internal_Unit) return String is
      begin
         return "Internal_Unit (""" & Basename (Unit) & """)";
      end Trace_Image;

      -----------------
      -- Trace_Image --
      -----------------

      function Trace_Image (Eq : Logic_Equation) return String is
         pragma Unreferenced (Eq);
      begin
         return "<LogicEquation>";
      end Trace_Image;

      -----------------
      -- Trace_Image --
      -----------------

      function Trace_Image (Var : Logic_Var) return String is
         pragma Unreferenced (Var);
      begin
         return "<LogicVariable>";
      end Trace_Image;

      -----------------
      -- Trace_Image --
      -----------------

      function Trace_Image (K : Analysis_Unit_Kind) return String is
      begin
         return Analysis_Unit_Kind'Image (K);
      end Trace_Image;

      -----------------
      -- Trace_Image --
      -----------------

      function Trace_Image (Self : Ref_Categories) return String is
         Result : Unbounded_String;
         First  : Boolean := True;
      begin
         Append (Result, "RefCategories(");
         for C in Ref_Category loop
            if Self (C) then
               if First then
                  First := False;
               else
                  Append (Result, ", ");
               end if;
               Append (Result, C'Image);
            end if;
         end loop;
         Append (Result, ")");
         return To_String (Result);
      end Trace_Image;


   

   


      -------------
      -- Inc_Ref --
      -------------

      procedure Inc_Ref (R : Internal_Decoded_Char_Value) is
      begin
               Inc_Ref (R.Error_Message);
      end Inc_Ref;

      -------------
      -- Dec_Ref --
      -------------

      procedure Dec_Ref (R : in out Internal_Decoded_Char_Value) is
      begin
               Dec_Ref (R.Error_Message);
      end Dec_Ref;




      ----------------
      -- Equivalent --
      ----------------

      function Equivalent (L, R : Internal_Decoded_Char_Value) return Boolean is
      begin
         return L.Value = R.Value and then L.Has_Error = R.Has_Error and then L.Error_Sloc = R.Error_Sloc and then Equivalent (L.Error_Message, R.Error_Message);
      end Equivalent;


   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Decoded_Char_Value) return String is
         pragma Warnings (On, "referenced");
      begin
            return
              ("("
                     & "Value => " & Trace_Image (R.Value)
                        & ", "
                     & "Has_Error => " & Trace_Image (R.Has_Error)
                        & ", "
                     & "Error_Sloc => " & Trace_Image (R.Error_Sloc)
                        & ", "
                     & "Error_Message => " & Trace_Image (R.Error_Message)
               & ")");
      end Trace_Image;


   

   


      -------------
      -- Inc_Ref --
      -------------

      procedure Inc_Ref (R : Internal_Decoded_String_Value) is
      begin
               Inc_Ref (R.Value);
               Inc_Ref (R.Error_Message);
      end Inc_Ref;

      -------------
      -- Dec_Ref --
      -------------

      procedure Dec_Ref (R : in out Internal_Decoded_String_Value) is
      begin
               Dec_Ref (R.Value);
               Dec_Ref (R.Error_Message);
      end Dec_Ref;




      ----------------
      -- Equivalent --
      ----------------

      function Equivalent (L, R : Internal_Decoded_String_Value) return Boolean is
      begin
         return Equivalent (L.Value, R.Value) and then L.Has_Error = R.Has_Error and then L.Error_Sloc = R.Error_Sloc and then Equivalent (L.Error_Message, R.Error_Message);
      end Equivalent;


   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Decoded_String_Value) return String is
         pragma Warnings (On, "referenced");
      begin
            return
              ("("
                     & "Value => " & Trace_Image (R.Value)
                        & ", "
                     & "Has_Error => " & Trace_Image (R.Has_Error)
                        & ", "
                     & "Error_Sloc => " & Trace_Image (R.Error_Sloc)
                        & ", "
                     & "Error_Message => " & Trace_Image (R.Error_Message)
               & ")");
      end Trace_Image;


   

   


      -------------
      -- Inc_Ref --
      -------------

      procedure Inc_Ref (R : Internal_Designated_Env) is
      begin
               Inc_Ref (R.Direct_Env);
      end Inc_Ref;

      -------------
      -- Dec_Ref --
      -------------

      procedure Dec_Ref (R : in out Internal_Designated_Env) is
      begin
               Dec_Ref (R.Direct_Env);
      end Dec_Ref;




      ----------------
      -- Equivalent --
      ----------------

      function Equivalent (L, R : Internal_Designated_Env) return Boolean is
      begin
         return L.Kind = R.Kind and then L.Env_Name = R.Env_Name and then Equivalent (L.Direct_Env, R.Direct_Env);
      end Equivalent;


   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Designated_Env) return String is
         pragma Warnings (On, "referenced");
      begin
            return
              ("("
                     & "Kind => " & Trace_Image (R.Kind)
                        & ", "
                     & "Env_Name => " & Trace_Image (R.Env_Name)
                        & ", "
                     & "Direct_Env => " & Trace_Image (R.Direct_Env)
               & ")");
      end Trace_Image;


   

   




   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Metadata) return String is
         pragma Warnings (On, "referenced");
      begin
            return
              ("("
                  & "null record"
               & ")");
      end Trace_Image;


   

   




   

      ----------
      -- Hash --
      ----------

      pragma Warnings (Off, "referenced");
      function Hash (R : Internal_Entity_Info) return Hash_Type is
         pragma Warnings (On, "referenced");
      begin
         
            return Combine ((Hash (R.Md), Hash (R.Rebindings), Hash (R.From_Rebound)));
      end Hash;


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Info) return String is
         pragma Warnings (On, "referenced");
      begin
            return
              ("("
                     & "Md => " & Trace_Image (R.Md)
                        & ", "
                     & "Rebindings => " & Trace_Image (R.Rebindings)
                        & ", "
                     & "From_Rebound => " & Trace_Image (R.From_Rebound)
               & ")");
      end Trace_Image;


   

   



      function Create_Internal_Entity
        (Node : Bare_Lkt_Node; Info : Internal_Entity_Info)
         return Internal_Entity is
      begin
         if Node = null then
            return No_Entity;
         end if;
         return (Node => Node, Info => Info);
      end;



   

      ----------
      -- Hash --
      ----------

      pragma Warnings (Off, "referenced");
      function Hash (R : Internal_Entity) return Hash_Type is
         pragma Warnings (On, "referenced");
      begin
         
            return Combine
              (Hash (R.Node), Hash (R.Info));
      end Hash;


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Expr
        (Node : Bare_Expr; Info : Internal_Entity_Info)
         return Internal_Entity_Expr is
      begin
         if Node = null then
            return No_Entity_Expr;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Expr) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Any_Of
        (Node : Bare_Any_Of; Info : Internal_Entity_Info)
         return Internal_Entity_Any_Of is
      begin
         if Node = null then
            return No_Entity_Any_Of;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Any_Of) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Lkt_Node_Base_List
        (Node : Bare_Lkt_Node_Base_List; Info : Internal_Entity_Info)
         return Internal_Entity_Lkt_Node_Base_List is
      begin
         if Node = null then
            return No_Entity_Lkt_Node_Base_List;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Lkt_Node_Base_List) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Expr_List
        (Node : Bare_Expr_List; Info : Internal_Entity_Info)
         return Internal_Entity_Expr_List is
      begin
         if Node = null then
            return No_Entity_Expr_List;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Expr_List) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Any_Of_List
        (Node : Bare_Any_Of_List; Info : Internal_Entity_Info)
         return Internal_Entity_Any_Of_List is
      begin
         if Node = null then
            return No_Entity_Any_Of_List;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Any_Of_List) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Decl
        (Node : Bare_Decl; Info : Internal_Entity_Info)
         return Internal_Entity_Decl is
      begin
         if Node = null then
            return No_Entity_Decl;
         end if;
         return (Node => Node, Info => Info);
      end;



   

      ----------
      -- Hash --
      ----------

      pragma Warnings (Off, "referenced");
      function Hash (R : Internal_Entity_Decl) return Hash_Type is
         pragma Warnings (On, "referenced");
      begin
         
            return Combine
              (Hash (R.Node), Hash (R.Info));
      end Hash;


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Decl) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Type_Decl
        (Node : Bare_Type_Decl; Info : Internal_Entity_Info)
         return Internal_Entity_Type_Decl is
      begin
         if Node = null then
            return No_Entity_Type_Decl;
         end if;
         return (Node => Node, Info => Info);
      end;



   

      ----------
      -- Hash --
      ----------

      pragma Warnings (Off, "referenced");
      function Hash (R : Internal_Entity_Type_Decl) return Hash_Type is
         pragma Warnings (On, "referenced");
      begin
         
            return Combine
              (Hash (R.Node), Hash (R.Info));
      end Hash;


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Type_Decl) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Any_Type_Decl
        (Node : Bare_Any_Type_Decl; Info : Internal_Entity_Info)
         return Internal_Entity_Any_Type_Decl is
      begin
         if Node = null then
            return No_Entity_Any_Type_Decl;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Any_Type_Decl) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Array_Literal
        (Node : Bare_Array_Literal; Info : Internal_Entity_Info)
         return Internal_Entity_Array_Literal is
      begin
         if Node = null then
            return No_Entity_Array_Literal;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Array_Literal) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Base_Call_Expr
        (Node : Bare_Base_Call_Expr; Info : Internal_Entity_Info)
         return Internal_Entity_Base_Call_Expr is
      begin
         if Node = null then
            return No_Entity_Base_Call_Expr;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Base_Call_Expr) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Base_Dot_Expr
        (Node : Bare_Base_Dot_Expr; Info : Internal_Entity_Info)
         return Internal_Entity_Base_Dot_Expr is
      begin
         if Node = null then
            return No_Entity_Base_Dot_Expr;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Base_Dot_Expr) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Base_Grammar_Rule_Decl
        (Node : Bare_Base_Grammar_Rule_Decl; Info : Internal_Entity_Info)
         return Internal_Entity_Base_Grammar_Rule_Decl is
      begin
         if Node = null then
            return No_Entity_Base_Grammar_Rule_Decl;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Base_Grammar_Rule_Decl) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Base_Lexer_Case_Rule_Alt
        (Node : Bare_Base_Lexer_Case_Rule_Alt; Info : Internal_Entity_Info)
         return Internal_Entity_Base_Lexer_Case_Rule_Alt is
      begin
         if Node = null then
            return No_Entity_Base_Lexer_Case_Rule_Alt;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Base_Lexer_Case_Rule_Alt) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Base_Lexer_Case_Rule_Alt_List
        (Node : Bare_Base_Lexer_Case_Rule_Alt_List; Info : Internal_Entity_Info)
         return Internal_Entity_Base_Lexer_Case_Rule_Alt_List is
      begin
         if Node = null then
            return No_Entity_Base_Lexer_Case_Rule_Alt_List;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Base_Lexer_Case_Rule_Alt_List) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Base_Val_Decl
        (Node : Bare_Base_Val_Decl; Info : Internal_Entity_Info)
         return Internal_Entity_Base_Val_Decl is
      begin
         if Node = null then
            return No_Entity_Base_Val_Decl;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Base_Val_Decl) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Named_Type_Decl
        (Node : Bare_Named_Type_Decl; Info : Internal_Entity_Info)
         return Internal_Entity_Named_Type_Decl is
      begin
         if Node = null then
            return No_Entity_Named_Type_Decl;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Named_Type_Decl) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Basic_Class_Decl
        (Node : Bare_Basic_Class_Decl; Info : Internal_Entity_Info)
         return Internal_Entity_Basic_Class_Decl is
      begin
         if Node = null then
            return No_Entity_Basic_Class_Decl;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Basic_Class_Decl) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Lit
        (Node : Bare_Lit; Info : Internal_Entity_Info)
         return Internal_Entity_Lit is
      begin
         if Node = null then
            return No_Entity_Lit;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Lit) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Big_Num_Lit
        (Node : Bare_Big_Num_Lit; Info : Internal_Entity_Info)
         return Internal_Entity_Big_Num_Lit is
      begin
         if Node = null then
            return No_Entity_Big_Num_Lit;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Big_Num_Lit) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Bin_Op
        (Node : Bare_Bin_Op; Info : Internal_Entity_Info)
         return Internal_Entity_Bin_Op is
      begin
         if Node = null then
            return No_Entity_Bin_Op;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Bin_Op) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Lkt_Node_List
        (Node : Bare_Lkt_Node_List; Info : Internal_Entity_Info)
         return Internal_Entity_Lkt_Node_List is
      begin
         if Node = null then
            return No_Entity_Lkt_Node_List;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Lkt_Node_List) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Block_Decl_List
        (Node : Bare_Block_Decl_List; Info : Internal_Entity_Info)
         return Internal_Entity_Block_Decl_List is
      begin
         if Node = null then
            return No_Entity_Block_Decl_List;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Block_Decl_List) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Block_Expr
        (Node : Bare_Block_Expr; Info : Internal_Entity_Info)
         return Internal_Entity_Block_Expr is
      begin
         if Node = null then
            return No_Entity_Block_Expr;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Block_Expr) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Block_String_Line
        (Node : Bare_Block_String_Line; Info : Internal_Entity_Info)
         return Internal_Entity_Block_String_Line is
      begin
         if Node = null then
            return No_Entity_Block_String_Line;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Block_String_Line) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Block_String_Line_List
        (Node : Bare_Block_String_Line_List; Info : Internal_Entity_Info)
         return Internal_Entity_Block_String_Line_List is
      begin
         if Node = null then
            return No_Entity_Block_String_Line_List;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Block_String_Line_List) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_String_Lit
        (Node : Bare_String_Lit; Info : Internal_Entity_Info)
         return Internal_Entity_String_Lit is
      begin
         if Node = null then
            return No_Entity_String_Lit;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_String_Lit) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Block_String_Lit
        (Node : Bare_Block_String_Lit; Info : Internal_Entity_Info)
         return Internal_Entity_Block_String_Lit is
      begin
         if Node = null then
            return No_Entity_Block_String_Lit;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Block_String_Lit) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Call_Expr
        (Node : Bare_Call_Expr; Info : Internal_Entity_Info)
         return Internal_Entity_Call_Expr is
      begin
         if Node = null then
            return No_Entity_Call_Expr;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Call_Expr) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Call_Expr_List
        (Node : Bare_Call_Expr_List; Info : Internal_Entity_Info)
         return Internal_Entity_Call_Expr_List is
      begin
         if Node = null then
            return No_Entity_Call_Expr_List;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Call_Expr_List) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Cast_Expr
        (Node : Bare_Cast_Expr; Info : Internal_Entity_Info)
         return Internal_Entity_Cast_Expr is
      begin
         if Node = null then
            return No_Entity_Cast_Expr;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Cast_Expr) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Char_Lit
        (Node : Bare_Char_Lit; Info : Internal_Entity_Info)
         return Internal_Entity_Char_Lit is
      begin
         if Node = null then
            return No_Entity_Char_Lit;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Char_Lit) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Class_Decl
        (Node : Bare_Class_Decl; Info : Internal_Entity_Info)
         return Internal_Entity_Class_Decl is
      begin
         if Node = null then
            return No_Entity_Class_Decl;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Class_Decl) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Class_Qualifier
        (Node : Bare_Class_Qualifier; Info : Internal_Entity_Info)
         return Internal_Entity_Class_Qualifier is
      begin
         if Node = null then
            return No_Entity_Class_Qualifier;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Class_Qualifier) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Class_Qualifier_Absent
        (Node : Bare_Class_Qualifier_Absent; Info : Internal_Entity_Info)
         return Internal_Entity_Class_Qualifier_Absent is
      begin
         if Node = null then
            return No_Entity_Class_Qualifier_Absent;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Class_Qualifier_Absent) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Class_Qualifier_Present
        (Node : Bare_Class_Qualifier_Present; Info : Internal_Entity_Info)
         return Internal_Entity_Class_Qualifier_Present is
      begin
         if Node = null then
            return No_Entity_Class_Qualifier_Present;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Class_Qualifier_Present) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_User_Val_Decl
        (Node : Bare_User_Val_Decl; Info : Internal_Entity_Info)
         return Internal_Entity_User_Val_Decl is
      begin
         if Node = null then
            return No_Entity_User_Val_Decl;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_User_Val_Decl) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Explicitly_Typed_Decl
        (Node : Bare_Explicitly_Typed_Decl; Info : Internal_Entity_Info)
         return Internal_Entity_Explicitly_Typed_Decl is
      begin
         if Node = null then
            return No_Entity_Explicitly_Typed_Decl;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Explicitly_Typed_Decl) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Component_Decl
        (Node : Bare_Component_Decl; Info : Internal_Entity_Info)
         return Internal_Entity_Component_Decl is
      begin
         if Node = null then
            return No_Entity_Component_Decl;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Component_Decl) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Decl_Annotation
        (Node : Bare_Decl_Annotation; Info : Internal_Entity_Info)
         return Internal_Entity_Decl_Annotation is
      begin
         if Node = null then
            return No_Entity_Decl_Annotation;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Decl_Annotation) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Decl_Annotation_List
        (Node : Bare_Decl_Annotation_List; Info : Internal_Entity_Info)
         return Internal_Entity_Decl_Annotation_List is
      begin
         if Node = null then
            return No_Entity_Decl_Annotation_List;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Decl_Annotation_List) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Decl_Annotation_Params
        (Node : Bare_Decl_Annotation_Params; Info : Internal_Entity_Info)
         return Internal_Entity_Decl_Annotation_Params is
      begin
         if Node = null then
            return No_Entity_Decl_Annotation_Params;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Decl_Annotation_Params) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Full_Decl_List
        (Node : Bare_Full_Decl_List; Info : Internal_Entity_Info)
         return Internal_Entity_Full_Decl_List is
      begin
         if Node = null then
            return No_Entity_Full_Decl_List;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Full_Decl_List) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Decl_Block
        (Node : Bare_Decl_Block; Info : Internal_Entity_Info)
         return Internal_Entity_Decl_Block is
      begin
         if Node = null then
            return No_Entity_Decl_Block;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Decl_Block) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Id
        (Node : Bare_Id; Info : Internal_Entity_Info)
         return Internal_Entity_Id is
      begin
         if Node = null then
            return No_Entity_Id;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Id) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Def_Id
        (Node : Bare_Def_Id; Info : Internal_Entity_Info)
         return Internal_Entity_Def_Id is
      begin
         if Node = null then
            return No_Entity_Def_Id;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Def_Id) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Type_Ref
        (Node : Bare_Type_Ref; Info : Internal_Entity_Info)
         return Internal_Entity_Type_Ref is
      begin
         if Node = null then
            return No_Entity_Type_Ref;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Type_Ref) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Default_List_Type_Ref
        (Node : Bare_Default_List_Type_Ref; Info : Internal_Entity_Info)
         return Internal_Entity_Default_List_Type_Ref is
      begin
         if Node = null then
            return No_Entity_Default_List_Type_Ref;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Default_List_Type_Ref) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Dot_Expr
        (Node : Bare_Dot_Expr; Info : Internal_Entity_Info)
         return Internal_Entity_Dot_Expr is
      begin
         if Node = null then
            return No_Entity_Dot_Expr;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Dot_Expr) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Dyn_Env_Wrapper
        (Node : Bare_Dyn_Env_Wrapper; Info : Internal_Entity_Info)
         return Internal_Entity_Dyn_Env_Wrapper is
      begin
         if Node = null then
            return No_Entity_Dyn_Env_Wrapper;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Dyn_Env_Wrapper) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Dyn_Var_Decl
        (Node : Bare_Dyn_Var_Decl; Info : Internal_Entity_Info)
         return Internal_Entity_Dyn_Var_Decl is
      begin
         if Node = null then
            return No_Entity_Dyn_Var_Decl;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Dyn_Var_Decl) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Elsif_Branch
        (Node : Bare_Elsif_Branch; Info : Internal_Entity_Info)
         return Internal_Entity_Elsif_Branch is
      begin
         if Node = null then
            return No_Entity_Elsif_Branch;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Elsif_Branch) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Elsif_Branch_List
        (Node : Bare_Elsif_Branch_List; Info : Internal_Entity_Info)
         return Internal_Entity_Elsif_Branch_List is
      begin
         if Node = null then
            return No_Entity_Elsif_Branch_List;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Elsif_Branch_List) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Enum_Class_Alt_Decl
        (Node : Bare_Enum_Class_Alt_Decl; Info : Internal_Entity_Info)
         return Internal_Entity_Enum_Class_Alt_Decl is
      begin
         if Node = null then
            return No_Entity_Enum_Class_Alt_Decl;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Enum_Class_Alt_Decl) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Enum_Class_Alt_Decl_List
        (Node : Bare_Enum_Class_Alt_Decl_List; Info : Internal_Entity_Info)
         return Internal_Entity_Enum_Class_Alt_Decl_List is
      begin
         if Node = null then
            return No_Entity_Enum_Class_Alt_Decl_List;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Enum_Class_Alt_Decl_List) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Enum_Class_Case
        (Node : Bare_Enum_Class_Case; Info : Internal_Entity_Info)
         return Internal_Entity_Enum_Class_Case is
      begin
         if Node = null then
            return No_Entity_Enum_Class_Case;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Enum_Class_Case) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Enum_Class_Case_List
        (Node : Bare_Enum_Class_Case_List; Info : Internal_Entity_Info)
         return Internal_Entity_Enum_Class_Case_List is
      begin
         if Node = null then
            return No_Entity_Enum_Class_Case_List;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Enum_Class_Case_List) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Enum_Class_Decl
        (Node : Bare_Enum_Class_Decl; Info : Internal_Entity_Info)
         return Internal_Entity_Enum_Class_Decl is
      begin
         if Node = null then
            return No_Entity_Enum_Class_Decl;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Enum_Class_Decl) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Enum_Lit_Decl
        (Node : Bare_Enum_Lit_Decl; Info : Internal_Entity_Info)
         return Internal_Entity_Enum_Lit_Decl is
      begin
         if Node = null then
            return No_Entity_Enum_Lit_Decl;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Enum_Lit_Decl) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Enum_Lit_Decl_List
        (Node : Bare_Enum_Lit_Decl_List; Info : Internal_Entity_Info)
         return Internal_Entity_Enum_Lit_Decl_List is
      begin
         if Node = null then
            return No_Entity_Enum_Lit_Decl_List;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Enum_Lit_Decl_List) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Enum_Type_Decl
        (Node : Bare_Enum_Type_Decl; Info : Internal_Entity_Info)
         return Internal_Entity_Enum_Type_Decl is
      begin
         if Node = null then
            return No_Entity_Enum_Type_Decl;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Enum_Type_Decl) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Env_Spec_Decl
        (Node : Bare_Env_Spec_Decl; Info : Internal_Entity_Info)
         return Internal_Entity_Env_Spec_Decl is
      begin
         if Node = null then
            return No_Entity_Env_Spec_Decl;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Env_Spec_Decl) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Error_On_Null
        (Node : Bare_Error_On_Null; Info : Internal_Entity_Info)
         return Internal_Entity_Error_On_Null is
      begin
         if Node = null then
            return No_Entity_Error_On_Null;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Error_On_Null) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Excludes_Null
        (Node : Bare_Excludes_Null; Info : Internal_Entity_Info)
         return Internal_Entity_Excludes_Null is
      begin
         if Node = null then
            return No_Entity_Excludes_Null;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Excludes_Null) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Excludes_Null_Absent
        (Node : Bare_Excludes_Null_Absent; Info : Internal_Entity_Info)
         return Internal_Entity_Excludes_Null_Absent is
      begin
         if Node = null then
            return No_Entity_Excludes_Null_Absent;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Excludes_Null_Absent) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Excludes_Null_Present
        (Node : Bare_Excludes_Null_Present; Info : Internal_Entity_Info)
         return Internal_Entity_Excludes_Null_Present is
      begin
         if Node = null then
            return No_Entity_Excludes_Null_Present;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Excludes_Null_Present) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Field_Decl
        (Node : Bare_Field_Decl; Info : Internal_Entity_Info)
         return Internal_Entity_Field_Decl is
      begin
         if Node = null then
            return No_Entity_Field_Decl;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Field_Decl) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Full_Decl
        (Node : Bare_Full_Decl; Info : Internal_Entity_Info)
         return Internal_Entity_Full_Decl is
      begin
         if Node = null then
            return No_Entity_Full_Decl;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Full_Decl) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Fun_Arg_Decl
        (Node : Bare_Fun_Arg_Decl; Info : Internal_Entity_Info)
         return Internal_Entity_Fun_Arg_Decl is
      begin
         if Node = null then
            return No_Entity_Fun_Arg_Decl;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Fun_Arg_Decl) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Fun_Arg_Decl_List
        (Node : Bare_Fun_Arg_Decl_List; Info : Internal_Entity_Info)
         return Internal_Entity_Fun_Arg_Decl_List is
      begin
         if Node = null then
            return No_Entity_Fun_Arg_Decl_List;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Fun_Arg_Decl_List) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Fun_Decl
        (Node : Bare_Fun_Decl; Info : Internal_Entity_Info)
         return Internal_Entity_Fun_Decl is
      begin
         if Node = null then
            return No_Entity_Fun_Decl;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Fun_Decl) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Function_Type
        (Node : Bare_Function_Type; Info : Internal_Entity_Info)
         return Internal_Entity_Function_Type is
      begin
         if Node = null then
            return No_Entity_Function_Type;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Function_Type) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Function_Type_Ref
        (Node : Bare_Function_Type_Ref; Info : Internal_Entity_Info)
         return Internal_Entity_Function_Type_Ref is
      begin
         if Node = null then
            return No_Entity_Function_Type_Ref;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Function_Type_Ref) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Generic_Decl
        (Node : Bare_Generic_Decl; Info : Internal_Entity_Info)
         return Internal_Entity_Generic_Decl is
      begin
         if Node = null then
            return No_Entity_Generic_Decl;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Generic_Decl) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Generic_Formal_Decl_List
        (Node : Bare_Generic_Formal_Decl_List; Info : Internal_Entity_Info)
         return Internal_Entity_Generic_Formal_Decl_List is
      begin
         if Node = null then
            return No_Entity_Generic_Formal_Decl_List;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Generic_Formal_Decl_List) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Generic_Formal_Type_Decl
        (Node : Bare_Generic_Formal_Type_Decl; Info : Internal_Entity_Info)
         return Internal_Entity_Generic_Formal_Type_Decl is
      begin
         if Node = null then
            return No_Entity_Generic_Formal_Type_Decl;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Generic_Formal_Type_Decl) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Generic_Instantiation
        (Node : Bare_Generic_Instantiation; Info : Internal_Entity_Info)
         return Internal_Entity_Generic_Instantiation is
      begin
         if Node = null then
            return No_Entity_Generic_Instantiation;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Generic_Instantiation) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Generic_Type_Ref
        (Node : Bare_Generic_Type_Ref; Info : Internal_Entity_Info)
         return Internal_Entity_Generic_Type_Ref is
      begin
         if Node = null then
            return No_Entity_Generic_Type_Ref;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Generic_Type_Ref) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Grammar_Expr
        (Node : Bare_Grammar_Expr; Info : Internal_Entity_Info)
         return Internal_Entity_Grammar_Expr is
      begin
         if Node = null then
            return No_Entity_Grammar_Expr;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Grammar_Expr) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Grammar_Cut
        (Node : Bare_Grammar_Cut; Info : Internal_Entity_Info)
         return Internal_Entity_Grammar_Cut is
      begin
         if Node = null then
            return No_Entity_Grammar_Cut;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Grammar_Cut) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Grammar_Decl
        (Node : Bare_Grammar_Decl; Info : Internal_Entity_Info)
         return Internal_Entity_Grammar_Decl is
      begin
         if Node = null then
            return No_Entity_Grammar_Decl;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Grammar_Decl) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Grammar_Discard
        (Node : Bare_Grammar_Discard; Info : Internal_Entity_Info)
         return Internal_Entity_Grammar_Discard is
      begin
         if Node = null then
            return No_Entity_Grammar_Discard;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Grammar_Discard) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Grammar_Dont_Skip
        (Node : Bare_Grammar_Dont_Skip; Info : Internal_Entity_Info)
         return Internal_Entity_Grammar_Dont_Skip is
      begin
         if Node = null then
            return No_Entity_Grammar_Dont_Skip;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Grammar_Dont_Skip) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Grammar_Expr_List
        (Node : Bare_Grammar_Expr_List; Info : Internal_Entity_Info)
         return Internal_Entity_Grammar_Expr_List is
      begin
         if Node = null then
            return No_Entity_Grammar_Expr_List;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Grammar_Expr_List) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Grammar_Expr_List_List
        (Node : Bare_Grammar_Expr_List_List; Info : Internal_Entity_Info)
         return Internal_Entity_Grammar_Expr_List_List is
      begin
         if Node = null then
            return No_Entity_Grammar_Expr_List_List;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Grammar_Expr_List_List) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Grammar_Pick
        (Node : Bare_Grammar_Pick; Info : Internal_Entity_Info)
         return Internal_Entity_Grammar_Pick is
      begin
         if Node = null then
            return No_Entity_Grammar_Pick;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Grammar_Pick) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Grammar_Implicit_Pick
        (Node : Bare_Grammar_Implicit_Pick; Info : Internal_Entity_Info)
         return Internal_Entity_Grammar_Implicit_Pick is
      begin
         if Node = null then
            return No_Entity_Grammar_Implicit_Pick;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Grammar_Implicit_Pick) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Grammar_List
        (Node : Bare_Grammar_List; Info : Internal_Entity_Info)
         return Internal_Entity_Grammar_List is
      begin
         if Node = null then
            return No_Entity_Grammar_List;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Grammar_List) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Grammar_List_Sep
        (Node : Bare_Grammar_List_Sep; Info : Internal_Entity_Info)
         return Internal_Entity_Grammar_List_Sep is
      begin
         if Node = null then
            return No_Entity_Grammar_List_Sep;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Grammar_List_Sep) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Grammar_Null
        (Node : Bare_Grammar_Null; Info : Internal_Entity_Info)
         return Internal_Entity_Grammar_Null is
      begin
         if Node = null then
            return No_Entity_Grammar_Null;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Grammar_Null) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Grammar_Opt
        (Node : Bare_Grammar_Opt; Info : Internal_Entity_Info)
         return Internal_Entity_Grammar_Opt is
      begin
         if Node = null then
            return No_Entity_Grammar_Opt;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Grammar_Opt) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Grammar_Opt_Error
        (Node : Bare_Grammar_Opt_Error; Info : Internal_Entity_Info)
         return Internal_Entity_Grammar_Opt_Error is
      begin
         if Node = null then
            return No_Entity_Grammar_Opt_Error;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Grammar_Opt_Error) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Grammar_Opt_Error_Group
        (Node : Bare_Grammar_Opt_Error_Group; Info : Internal_Entity_Info)
         return Internal_Entity_Grammar_Opt_Error_Group is
      begin
         if Node = null then
            return No_Entity_Grammar_Opt_Error_Group;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Grammar_Opt_Error_Group) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Grammar_Opt_Group
        (Node : Bare_Grammar_Opt_Group; Info : Internal_Entity_Info)
         return Internal_Entity_Grammar_Opt_Group is
      begin
         if Node = null then
            return No_Entity_Grammar_Opt_Group;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Grammar_Opt_Group) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Grammar_Or_Expr
        (Node : Bare_Grammar_Or_Expr; Info : Internal_Entity_Info)
         return Internal_Entity_Grammar_Or_Expr is
      begin
         if Node = null then
            return No_Entity_Grammar_Or_Expr;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Grammar_Or_Expr) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Grammar_Predicate
        (Node : Bare_Grammar_Predicate; Info : Internal_Entity_Info)
         return Internal_Entity_Grammar_Predicate is
      begin
         if Node = null then
            return No_Entity_Grammar_Predicate;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Grammar_Predicate) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Grammar_Rule_Decl
        (Node : Bare_Grammar_Rule_Decl; Info : Internal_Entity_Info)
         return Internal_Entity_Grammar_Rule_Decl is
      begin
         if Node = null then
            return No_Entity_Grammar_Rule_Decl;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Grammar_Rule_Decl) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Grammar_Rule_Ref
        (Node : Bare_Grammar_Rule_Ref; Info : Internal_Entity_Info)
         return Internal_Entity_Grammar_Rule_Ref is
      begin
         if Node = null then
            return No_Entity_Grammar_Rule_Ref;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Grammar_Rule_Ref) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Grammar_Skip
        (Node : Bare_Grammar_Skip; Info : Internal_Entity_Info)
         return Internal_Entity_Grammar_Skip is
      begin
         if Node = null then
            return No_Entity_Grammar_Skip;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Grammar_Skip) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Grammar_Stop_Cut
        (Node : Bare_Grammar_Stop_Cut; Info : Internal_Entity_Info)
         return Internal_Entity_Grammar_Stop_Cut is
      begin
         if Node = null then
            return No_Entity_Grammar_Stop_Cut;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Grammar_Stop_Cut) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_If_Expr
        (Node : Bare_If_Expr; Info : Internal_Entity_Info)
         return Internal_Entity_If_Expr is
      begin
         if Node = null then
            return No_Entity_If_Expr;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_If_Expr) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Import
        (Node : Bare_Import; Info : Internal_Entity_Info)
         return Internal_Entity_Import is
      begin
         if Node = null then
            return No_Entity_Import;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Import) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Import_List
        (Node : Bare_Import_List; Info : Internal_Entity_Info)
         return Internal_Entity_Import_List is
      begin
         if Node = null then
            return No_Entity_Import_List;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Import_List) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Isa
        (Node : Bare_Isa; Info : Internal_Entity_Info)
         return Internal_Entity_Isa is
      begin
         if Node = null then
            return No_Entity_Isa;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Isa) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Type_Ref_List
        (Node : Bare_Type_Ref_List; Info : Internal_Entity_Info)
         return Internal_Entity_Type_Ref_List is
      begin
         if Node = null then
            return No_Entity_Type_Ref_List;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Type_Ref_List) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Isa_List
        (Node : Bare_Isa_List; Info : Internal_Entity_Info)
         return Internal_Entity_Isa_List is
      begin
         if Node = null then
            return No_Entity_Isa_List;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Isa_List) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Keep_Expr
        (Node : Bare_Keep_Expr; Info : Internal_Entity_Info)
         return Internal_Entity_Keep_Expr is
      begin
         if Node = null then
            return No_Entity_Keep_Expr;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Keep_Expr) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Lambda_Arg_Decl
        (Node : Bare_Lambda_Arg_Decl; Info : Internal_Entity_Info)
         return Internal_Entity_Lambda_Arg_Decl is
      begin
         if Node = null then
            return No_Entity_Lambda_Arg_Decl;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Lambda_Arg_Decl) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Lambda_Arg_Decl_List
        (Node : Bare_Lambda_Arg_Decl_List; Info : Internal_Entity_Info)
         return Internal_Entity_Lambda_Arg_Decl_List is
      begin
         if Node = null then
            return No_Entity_Lambda_Arg_Decl_List;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Lambda_Arg_Decl_List) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Lambda_Expr
        (Node : Bare_Lambda_Expr; Info : Internal_Entity_Info)
         return Internal_Entity_Lambda_Expr is
      begin
         if Node = null then
            return No_Entity_Lambda_Expr;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Lambda_Expr) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Langkit_Root
        (Node : Bare_Langkit_Root; Info : Internal_Entity_Info)
         return Internal_Entity_Langkit_Root is
      begin
         if Node = null then
            return No_Entity_Langkit_Root;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Langkit_Root) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Lexer_Case_Rule
        (Node : Bare_Lexer_Case_Rule; Info : Internal_Entity_Info)
         return Internal_Entity_Lexer_Case_Rule is
      begin
         if Node = null then
            return No_Entity_Lexer_Case_Rule;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Lexer_Case_Rule) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Lexer_Case_Rule_Cond_Alt
        (Node : Bare_Lexer_Case_Rule_Cond_Alt; Info : Internal_Entity_Info)
         return Internal_Entity_Lexer_Case_Rule_Cond_Alt is
      begin
         if Node = null then
            return No_Entity_Lexer_Case_Rule_Cond_Alt;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Lexer_Case_Rule_Cond_Alt) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Lexer_Case_Rule_Default_Alt
        (Node : Bare_Lexer_Case_Rule_Default_Alt; Info : Internal_Entity_Info)
         return Internal_Entity_Lexer_Case_Rule_Default_Alt is
      begin
         if Node = null then
            return No_Entity_Lexer_Case_Rule_Default_Alt;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Lexer_Case_Rule_Default_Alt) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Lexer_Case_Rule_Send
        (Node : Bare_Lexer_Case_Rule_Send; Info : Internal_Entity_Info)
         return Internal_Entity_Lexer_Case_Rule_Send is
      begin
         if Node = null then
            return No_Entity_Lexer_Case_Rule_Send;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Lexer_Case_Rule_Send) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Lexer_Decl
        (Node : Bare_Lexer_Decl; Info : Internal_Entity_Info)
         return Internal_Entity_Lexer_Decl is
      begin
         if Node = null then
            return No_Entity_Lexer_Decl;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Lexer_Decl) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Lexer_Family_Decl
        (Node : Bare_Lexer_Family_Decl; Info : Internal_Entity_Info)
         return Internal_Entity_Lexer_Family_Decl is
      begin
         if Node = null then
            return No_Entity_Lexer_Family_Decl;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Lexer_Family_Decl) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_List_Kind
        (Node : Bare_List_Kind; Info : Internal_Entity_Info)
         return Internal_Entity_List_Kind is
      begin
         if Node = null then
            return No_Entity_List_Kind;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_List_Kind) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_List_Kind_One
        (Node : Bare_List_Kind_One; Info : Internal_Entity_Info)
         return Internal_Entity_List_Kind_One is
      begin
         if Node = null then
            return No_Entity_List_Kind_One;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_List_Kind_One) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_List_Kind_Zero
        (Node : Bare_List_Kind_Zero; Info : Internal_Entity_Info)
         return Internal_Entity_List_Kind_Zero is
      begin
         if Node = null then
            return No_Entity_List_Kind_Zero;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_List_Kind_Zero) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Logic_Assign
        (Node : Bare_Logic_Assign; Info : Internal_Entity_Info)
         return Internal_Entity_Logic_Assign is
      begin
         if Node = null then
            return No_Entity_Logic_Assign;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Logic_Assign) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Logic_Call_Expr
        (Node : Bare_Logic_Call_Expr; Info : Internal_Entity_Info)
         return Internal_Entity_Logic_Call_Expr is
      begin
         if Node = null then
            return No_Entity_Logic_Call_Expr;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Logic_Call_Expr) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Logic_Expr
        (Node : Bare_Logic_Expr; Info : Internal_Entity_Info)
         return Internal_Entity_Logic_Expr is
      begin
         if Node = null then
            return No_Entity_Logic_Expr;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Logic_Expr) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Logic_Predicate
        (Node : Bare_Logic_Predicate; Info : Internal_Entity_Info)
         return Internal_Entity_Logic_Predicate is
      begin
         if Node = null then
            return No_Entity_Logic_Predicate;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Logic_Predicate) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Logic_Propagate
        (Node : Bare_Logic_Propagate; Info : Internal_Entity_Info)
         return Internal_Entity_Logic_Propagate is
      begin
         if Node = null then
            return No_Entity_Logic_Propagate;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Logic_Propagate) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Logic_Propagate_Call
        (Node : Bare_Logic_Propagate_Call; Info : Internal_Entity_Info)
         return Internal_Entity_Logic_Propagate_Call is
      begin
         if Node = null then
            return No_Entity_Logic_Propagate_Call;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Logic_Propagate_Call) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Logic_Unify
        (Node : Bare_Logic_Unify; Info : Internal_Entity_Info)
         return Internal_Entity_Logic_Unify is
      begin
         if Node = null then
            return No_Entity_Logic_Unify;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Logic_Unify) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Match_Branch
        (Node : Bare_Match_Branch; Info : Internal_Entity_Info)
         return Internal_Entity_Match_Branch is
      begin
         if Node = null then
            return No_Entity_Match_Branch;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Match_Branch) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Match_Branch_List
        (Node : Bare_Match_Branch_List; Info : Internal_Entity_Info)
         return Internal_Entity_Match_Branch_List is
      begin
         if Node = null then
            return No_Entity_Match_Branch_List;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Match_Branch_List) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Match_Expr
        (Node : Bare_Match_Expr; Info : Internal_Entity_Info)
         return Internal_Entity_Match_Expr is
      begin
         if Node = null then
            return No_Entity_Match_Expr;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Match_Expr) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Match_Val_Decl
        (Node : Bare_Match_Val_Decl; Info : Internal_Entity_Info)
         return Internal_Entity_Match_Val_Decl is
      begin
         if Node = null then
            return No_Entity_Match_Val_Decl;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Match_Val_Decl) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Module_Ref_Id
        (Node : Bare_Module_Ref_Id; Info : Internal_Entity_Info)
         return Internal_Entity_Module_Ref_Id is
      begin
         if Node = null then
            return No_Entity_Module_Ref_Id;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Module_Ref_Id) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Node_Decl
        (Node : Bare_Node_Decl; Info : Internal_Entity_Info)
         return Internal_Entity_Node_Decl is
      begin
         if Node = null then
            return No_Entity_Node_Decl;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Node_Decl) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Not_Expr
        (Node : Bare_Not_Expr; Info : Internal_Entity_Info)
         return Internal_Entity_Not_Expr is
      begin
         if Node = null then
            return No_Entity_Not_Expr;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Not_Expr) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Null_Cond_Dotted_Name
        (Node : Bare_Null_Cond_Dotted_Name; Info : Internal_Entity_Info)
         return Internal_Entity_Null_Cond_Dotted_Name is
      begin
         if Node = null then
            return No_Entity_Null_Cond_Dotted_Name;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Null_Cond_Dotted_Name) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Subscript_Expr
        (Node : Bare_Subscript_Expr; Info : Internal_Entity_Info)
         return Internal_Entity_Subscript_Expr is
      begin
         if Node = null then
            return No_Entity_Subscript_Expr;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Subscript_Expr) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Null_Cond_Subscript_Expr
        (Node : Bare_Null_Cond_Subscript_Expr; Info : Internal_Entity_Info)
         return Internal_Entity_Null_Cond_Subscript_Expr is
      begin
         if Node = null then
            return No_Entity_Null_Cond_Subscript_Expr;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Null_Cond_Subscript_Expr) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Null_Lit
        (Node : Bare_Null_Lit; Info : Internal_Entity_Info)
         return Internal_Entity_Null_Lit is
      begin
         if Node = null then
            return No_Entity_Null_Lit;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Null_Lit) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Num_Lit
        (Node : Bare_Num_Lit; Info : Internal_Entity_Info)
         return Internal_Entity_Num_Lit is
      begin
         if Node = null then
            return No_Entity_Num_Lit;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Num_Lit) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Op
        (Node : Bare_Op; Info : Internal_Entity_Info)
         return Internal_Entity_Op is
      begin
         if Node = null then
            return No_Entity_Op;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Op) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Op_Amp
        (Node : Bare_Op_Amp; Info : Internal_Entity_Info)
         return Internal_Entity_Op_Amp is
      begin
         if Node = null then
            return No_Entity_Op_Amp;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Op_Amp) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Op_And
        (Node : Bare_Op_And; Info : Internal_Entity_Info)
         return Internal_Entity_Op_And is
      begin
         if Node = null then
            return No_Entity_Op_And;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Op_And) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Op_Div
        (Node : Bare_Op_Div; Info : Internal_Entity_Info)
         return Internal_Entity_Op_Div is
      begin
         if Node = null then
            return No_Entity_Op_Div;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Op_Div) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Op_Eq
        (Node : Bare_Op_Eq; Info : Internal_Entity_Info)
         return Internal_Entity_Op_Eq is
      begin
         if Node = null then
            return No_Entity_Op_Eq;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Op_Eq) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Op_Gt
        (Node : Bare_Op_Gt; Info : Internal_Entity_Info)
         return Internal_Entity_Op_Gt is
      begin
         if Node = null then
            return No_Entity_Op_Gt;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Op_Gt) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Op_Gte
        (Node : Bare_Op_Gte; Info : Internal_Entity_Info)
         return Internal_Entity_Op_Gte is
      begin
         if Node = null then
            return No_Entity_Op_Gte;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Op_Gte) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Op_Logic_And
        (Node : Bare_Op_Logic_And; Info : Internal_Entity_Info)
         return Internal_Entity_Op_Logic_And is
      begin
         if Node = null then
            return No_Entity_Op_Logic_And;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Op_Logic_And) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Op_Logic_Or
        (Node : Bare_Op_Logic_Or; Info : Internal_Entity_Info)
         return Internal_Entity_Op_Logic_Or is
      begin
         if Node = null then
            return No_Entity_Op_Logic_Or;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Op_Logic_Or) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Op_Lt
        (Node : Bare_Op_Lt; Info : Internal_Entity_Info)
         return Internal_Entity_Op_Lt is
      begin
         if Node = null then
            return No_Entity_Op_Lt;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Op_Lt) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Op_Lte
        (Node : Bare_Op_Lte; Info : Internal_Entity_Info)
         return Internal_Entity_Op_Lte is
      begin
         if Node = null then
            return No_Entity_Op_Lte;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Op_Lte) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Op_Minus
        (Node : Bare_Op_Minus; Info : Internal_Entity_Info)
         return Internal_Entity_Op_Minus is
      begin
         if Node = null then
            return No_Entity_Op_Minus;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Op_Minus) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Op_Mult
        (Node : Bare_Op_Mult; Info : Internal_Entity_Info)
         return Internal_Entity_Op_Mult is
      begin
         if Node = null then
            return No_Entity_Op_Mult;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Op_Mult) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Op_Ne
        (Node : Bare_Op_Ne; Info : Internal_Entity_Info)
         return Internal_Entity_Op_Ne is
      begin
         if Node = null then
            return No_Entity_Op_Ne;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Op_Ne) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Op_Or
        (Node : Bare_Op_Or; Info : Internal_Entity_Info)
         return Internal_Entity_Op_Or is
      begin
         if Node = null then
            return No_Entity_Op_Or;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Op_Or) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Op_Or_Int
        (Node : Bare_Op_Or_Int; Info : Internal_Entity_Info)
         return Internal_Entity_Op_Or_Int is
      begin
         if Node = null then
            return No_Entity_Op_Or_Int;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Op_Or_Int) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Op_Plus
        (Node : Bare_Op_Plus; Info : Internal_Entity_Info)
         return Internal_Entity_Op_Plus is
      begin
         if Node = null then
            return No_Entity_Op_Plus;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Op_Plus) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Param
        (Node : Bare_Param; Info : Internal_Entity_Info)
         return Internal_Entity_Param is
      begin
         if Node = null then
            return No_Entity_Param;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Param) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Param_List
        (Node : Bare_Param_List; Info : Internal_Entity_Info)
         return Internal_Entity_Param_List is
      begin
         if Node = null then
            return No_Entity_Param_List;
         end if;
         return (Node => Node, Info => Info);
      end;



   

      ----------
      -- Hash --
      ----------

      pragma Warnings (Off, "referenced");
      function Hash (R : Internal_Entity_Param_List) return Hash_Type is
         pragma Warnings (On, "referenced");
      begin
         
            return Combine
              (Hash (R.Node), Hash (R.Info));
      end Hash;


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Param_List) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Paren_Expr
        (Node : Bare_Paren_Expr; Info : Internal_Entity_Info)
         return Internal_Entity_Paren_Expr is
      begin
         if Node = null then
            return No_Entity_Paren_Expr;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Paren_Expr) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Parse_Node_Expr
        (Node : Bare_Parse_Node_Expr; Info : Internal_Entity_Info)
         return Internal_Entity_Parse_Node_Expr is
      begin
         if Node = null then
            return No_Entity_Parse_Node_Expr;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Parse_Node_Expr) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Single_Line_String_Lit
        (Node : Bare_Single_Line_String_Lit; Info : Internal_Entity_Info)
         return Internal_Entity_Single_Line_String_Lit is
      begin
         if Node = null then
            return No_Entity_Single_Line_String_Lit;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Single_Line_String_Lit) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Pattern_Single_Line_String_Lit
        (Node : Bare_Pattern_Single_Line_String_Lit; Info : Internal_Entity_Info)
         return Internal_Entity_Pattern_Single_Line_String_Lit is
      begin
         if Node = null then
            return No_Entity_Pattern_Single_Line_String_Lit;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Pattern_Single_Line_String_Lit) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Raise_Expr
        (Node : Bare_Raise_Expr; Info : Internal_Entity_Info)
         return Internal_Entity_Raise_Expr is
      begin
         if Node = null then
            return No_Entity_Raise_Expr;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Raise_Expr) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Ref_Id
        (Node : Bare_Ref_Id; Info : Internal_Entity_Info)
         return Internal_Entity_Ref_Id is
      begin
         if Node = null then
            return No_Entity_Ref_Id;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Ref_Id) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Ref_Id_List
        (Node : Bare_Ref_Id_List; Info : Internal_Entity_Info)
         return Internal_Entity_Ref_Id_List is
      begin
         if Node = null then
            return No_Entity_Ref_Id_List;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Ref_Id_List) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Self_Decl
        (Node : Bare_Self_Decl; Info : Internal_Entity_Info)
         return Internal_Entity_Self_Decl is
      begin
         if Node = null then
            return No_Entity_Self_Decl;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Self_Decl) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Simple_Type_Ref
        (Node : Bare_Simple_Type_Ref; Info : Internal_Entity_Info)
         return Internal_Entity_Simple_Type_Ref is
      begin
         if Node = null then
            return No_Entity_Simple_Type_Ref;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Simple_Type_Ref) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Struct_Decl
        (Node : Bare_Struct_Decl; Info : Internal_Entity_Info)
         return Internal_Entity_Struct_Decl is
      begin
         if Node = null then
            return No_Entity_Struct_Decl;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Struct_Decl) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Synth_Arg_Decl
        (Node : Bare_Synth_Arg_Decl; Info : Internal_Entity_Info)
         return Internal_Entity_Synth_Arg_Decl is
      begin
         if Node = null then
            return No_Entity_Synth_Arg_Decl;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Synth_Arg_Decl) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Synth_Fun_Decl
        (Node : Bare_Synth_Fun_Decl; Info : Internal_Entity_Info)
         return Internal_Entity_Synth_Fun_Decl is
      begin
         if Node = null then
            return No_Entity_Synth_Fun_Decl;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Synth_Fun_Decl) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Synthetic_Lexer_Decl
        (Node : Bare_Synthetic_Lexer_Decl; Info : Internal_Entity_Info)
         return Internal_Entity_Synthetic_Lexer_Decl is
      begin
         if Node = null then
            return No_Entity_Synthetic_Lexer_Decl;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Synthetic_Lexer_Decl) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Token_Lit
        (Node : Bare_Token_Lit; Info : Internal_Entity_Info)
         return Internal_Entity_Token_Lit is
      begin
         if Node = null then
            return No_Entity_Token_Lit;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Token_Lit) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Token_No_Case_Lit
        (Node : Bare_Token_No_Case_Lit; Info : Internal_Entity_Info)
         return Internal_Entity_Token_No_Case_Lit is
      begin
         if Node = null then
            return No_Entity_Token_No_Case_Lit;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Token_No_Case_Lit) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Token_Pattern_Concat
        (Node : Bare_Token_Pattern_Concat; Info : Internal_Entity_Info)
         return Internal_Entity_Token_Pattern_Concat is
      begin
         if Node = null then
            return No_Entity_Token_Pattern_Concat;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Token_Pattern_Concat) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Token_Pattern_Lit
        (Node : Bare_Token_Pattern_Lit; Info : Internal_Entity_Info)
         return Internal_Entity_Token_Pattern_Lit is
      begin
         if Node = null then
            return No_Entity_Token_Pattern_Lit;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Token_Pattern_Lit) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Token_Ref
        (Node : Bare_Token_Ref; Info : Internal_Entity_Info)
         return Internal_Entity_Token_Ref is
      begin
         if Node = null then
            return No_Entity_Token_Ref;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Token_Ref) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Trait_Decl
        (Node : Bare_Trait_Decl; Info : Internal_Entity_Info)
         return Internal_Entity_Trait_Decl is
      begin
         if Node = null then
            return No_Entity_Trait_Decl;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Trait_Decl) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Try_Expr
        (Node : Bare_Try_Expr; Info : Internal_Entity_Info)
         return Internal_Entity_Try_Expr is
      begin
         if Node = null then
            return No_Entity_Try_Expr;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Try_Expr) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Un_Op
        (Node : Bare_Un_Op; Info : Internal_Entity_Info)
         return Internal_Entity_Un_Op is
      begin
         if Node = null then
            return No_Entity_Un_Op;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Un_Op) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Val_Decl
        (Node : Bare_Val_Decl; Info : Internal_Entity_Info)
         return Internal_Entity_Val_Decl is
      begin
         if Node = null then
            return No_Entity_Val_Decl;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Val_Decl) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   



      function Create_Internal_Entity_Var_Bind
        (Node : Bare_Var_Bind; Info : Internal_Entity_Info)
         return Internal_Entity_Var_Bind is
      begin
         if Node = null then
            return No_Entity_Var_Bind;
         end if;
         return (Node => Node, Info => Info);
      end;



   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Entity_Var_Bind) return String is
         pragma Warnings (On, "referenced");
      begin
            return Image (Entity'(Node => R.Node, Info => R.Info));
      end Trace_Image;


   

   


      -------------
      -- Inc_Ref --
      -------------

      procedure Inc_Ref (R : Internal_Env_Assoc) is
      begin
               Inc_Ref (R.Dest_Env);
      end Inc_Ref;

      -------------
      -- Dec_Ref --
      -------------

      procedure Dec_Ref (R : in out Internal_Env_Assoc) is
      begin
               Dec_Ref (R.Dest_Env);
      end Dec_Ref;




      ----------------
      -- Equivalent --
      ----------------

      function Equivalent (L, R : Internal_Env_Assoc) return Boolean is
      begin
         return L.Key = R.Key and then L.Value = R.Value and then Equivalent (L.Dest_Env, R.Dest_Env) and then L.Metadata = R.Metadata;
      end Equivalent;


   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Env_Assoc) return String is
         pragma Warnings (On, "referenced");
      begin
            return
              ("("
                     & "Key => " & Trace_Image (R.Key)
                        & ", "
                     & "Value => " & Trace_Image (R.Value)
                        & ", "
                     & "Dest_Env => " & Trace_Image (R.Dest_Env)
                        & ", "
                     & "Metadata => " & Trace_Image (R.Metadata)
               & ")");
      end Trace_Image;


   

   




   

      ----------
      -- Hash --
      ----------

      pragma Warnings (Off, "referenced");
      function Hash (R : Internal_Formal_Param) return Hash_Type is
         pragma Warnings (On, "referenced");
      begin
         
            return Combine ((Hash (R.Formal_Name), Hash (R.Formal_Type), Hash (R.Has_Default_Value), Hash (R.Accept_Logical_Var), Hash (R.Decl)));
      end Hash;


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Formal_Param) return String is
         pragma Warnings (On, "referenced");
      begin
            return
              ("("
                     & "Formal_Name => " & Trace_Image (R.Formal_Name)
                        & ", "
                     & "Formal_Type => " & Trace_Image (R.Formal_Type)
                        & ", "
                     & "Has_Default_Value => " & Trace_Image (R.Has_Default_Value)
                        & ", "
                     & "Accept_Logical_Var => " & Trace_Image (R.Accept_Logical_Var)
                        & ", "
                     & "Decl => " & Trace_Image (R.Decl)
               & ")");
      end Trace_Image;


   

   




   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Inner_Env_Assoc) return String is
         pragma Warnings (On, "referenced");
      begin
            return
              ("("
                     & "Key => " & Trace_Image (R.Key)
                        & ", "
                     & "Value => " & Trace_Image (R.Value)
                        & ", "
                     & "Rebindings => " & Trace_Image (R.Rebindings)
                        & ", "
                     & "Metadata => " & Trace_Image (R.Metadata)
               & ")");
      end Trace_Image;


   

   




   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Logic_Context) return String is
         pragma Warnings (On, "referenced");
      begin
            return
              ("("
                     & "Ref_Node => " & Trace_Image (R.Ref_Node)
                        & ", "
                     & "Decl_Node => " & Trace_Image (R.Decl_Node)
               & ")");
      end Trace_Image;


   

   




   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Param_Match) return String is
         pragma Warnings (On, "referenced");
      begin
            return
              ("("
                     & "Has_Matched => " & Trace_Image (R.Has_Matched)
                        & ", "
                     & "Actual => " & Trace_Image (R.Actual)
                        & ", "
                     & "Formal => " & Trace_Image (R.Formal)
               & ")");
      end Trace_Image;


   

   


      -------------
      -- Inc_Ref --
      -------------

      procedure Inc_Ref (R : Internal_Solver_Diagnostic) is
      begin
               Inc_Ref (R.Message_Template);
               Inc_Ref (R.Args);
               Inc_Ref (R.Contexts);
      end Inc_Ref;

      -------------
      -- Dec_Ref --
      -------------

      procedure Dec_Ref (R : in out Internal_Solver_Diagnostic) is
      begin
               Dec_Ref (R.Message_Template);
               Dec_Ref (R.Args);
               Dec_Ref (R.Contexts);
      end Dec_Ref;




      ----------------
      -- Equivalent --
      ----------------

      function Equivalent (L, R : Internal_Solver_Diagnostic) return Boolean is
      begin
         return Equivalent (L.Message_Template, R.Message_Template) and then Equivalent (L.Args, R.Args) and then L.Location = R.Location and then Equivalent (L.Contexts, R.Contexts) and then L.Round = R.Round;
      end Equivalent;


   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Solver_Diagnostic) return String is
         pragma Warnings (On, "referenced");
      begin
            return
              ("("
                     & "Message_Template => " & Trace_Image (R.Message_Template)
                        & ", "
                     & "Args => " & Trace_Image (R.Args)
                        & ", "
                     & "Location => " & Trace_Image (R.Location)
                        & ", "
                     & "Contexts => " & Trace_Image (R.Contexts)
                        & ", "
                     & "Round => " & Trace_Image (R.Round)
               & ")");
      end Trace_Image;


   

   


      -------------
      -- Inc_Ref --
      -------------

      procedure Inc_Ref (R : Internal_Solver_Result) is
      begin
               Inc_Ref (R.Diagnostics);
      end Inc_Ref;

      -------------
      -- Dec_Ref --
      -------------

      procedure Dec_Ref (R : in out Internal_Solver_Result) is
      begin
               Dec_Ref (R.Diagnostics);
      end Dec_Ref;




      ----------------
      -- Equivalent --
      ----------------

      function Equivalent (L, R : Internal_Solver_Result) return Boolean is
      begin
         return L.Success = R.Success and then Equivalent (L.Diagnostics, R.Diagnostics);
      end Equivalent;


   


      -----------------
      -- Trace_Image --
      -----------------

      pragma Warnings (Off, "referenced");
      function Trace_Image (R : Internal_Solver_Result) return String is
         pragma Warnings (On, "referenced");
      begin
            return
              ("("
                     & "Success => " & Trace_Image (R.Success)
                        & ", "
                     & "Diagnostics => " & Trace_Image (R.Diagnostics)
               & ")");
      end Trace_Image;



   
         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

   

   

   

   type Lkt_Node_P_Unmatched_Argument_0_Predicate is
   new Solver_Ifc.N_Predicate_Type
   with record
         Error_Location : Bare_Lkt_Node;
   end record;

   
      overriding function Call
        (Self : Lkt_Node_P_Unmatched_Argument_0_Predicate;
            Entities : Entity_Vars.Value_Array
        ) return Boolean
   ;

   
      overriding procedure Failed
        (Self : Lkt_Node_P_Unmatched_Argument_0_Predicate;
            Entities : Entity_Vars.Value_Array;
         Ctxs    : Solver_Ifc.Logic_Context_Array;
         Round   : Natural;
         Emitter : Solver_Ifc.Diagnostic_Emitter
        )
   ;

   overriding function Image (Self : Lkt_Node_P_Unmatched_Argument_0_Predicate) return String;

   

   function Create_Lkt_Node_P_Unmatched_Argument_0_Predicate
   (
         N : Positive;
         Error_Location : Bare_Lkt_Node
   )
      return Lkt_Node_P_Unmatched_Argument_0_Predicate is
   begin
      
      return Lkt_Node_P_Unmatched_Argument_0_Predicate'(N => N, Cache_Set => False, Cache_Key => <>, Cache_Value => <>, Ref_Count => 1, Error_Location => Error_Location);
   end;

   ----------
   -- Call --
   ----------

   
      overriding function Call
        (Self : Lkt_Node_P_Unmatched_Argument_0_Predicate;
            Entities : Entity_Vars.Value_Array
        ) return Boolean
   
   is
         pragma Unreferenced (Self);

         Entity : Internal_Entity := Entities (1);


      
      Node : Bare_Lkt_Node;

      Ret : Boolean;
   begin

      
            if Entities (2).Node /= null
               and then Entities (2).Node.Kind
                        not in Lkt_Type_Decl
            then
               Raise_Property_Exception
                 (Node, Property_Error'Identity, "mismatching node type");
            end if;

      Node := Entity.Node;


      

      Ret := Lkt_Node_P_Unmatched_Argument (Node, (Node => Entities (2).Node, Info => Entities (2).Info), E_Info => Entity.Info);


      return Ret;
   end Call;

   ------------
   -- Failed --
   ------------

   
      overriding procedure Failed
        (Self : Lkt_Node_P_Unmatched_Argument_0_Predicate;
            Entities : Entity_Vars.Value_Array;
         Ctxs    : Solver_Ifc.Logic_Context_Array;
         Round   : Natural;
         Emitter : Solver_Ifc.Diagnostic_Emitter
        )
   
   is
      
      Args : Internal_Entity_Array_Access :=
         Create_Internal_Entity_Array (0);

      Contexts : Internal_Logic_Context_Array_Access :=
         Create_Internal_Logic_Context_Array (Ctxs'Length);

      Diag : constant Internal_Solver_Diagnostic :=
        (Message_Template => Create_String ("unmatched arguments"),
         Args             => Args,
         Contexts         => Contexts,
         Location         => Self.Error_Location,
         Round            => Round);
   begin
      for I in Ctxs'Range loop
         Contexts.Items (I) := Ctxs (I).all;
      end loop;
      Emitter (Diag);
   end Failed;

   -----------
   -- Image --
   -----------

   overriding function Image (Self : Lkt_Node_P_Unmatched_Argument_0_Predicate) return String is
   begin
      return "LktNode.unmatched_argument";
   end Image;



         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

   

   

   

   type Decl_P_Is_Type_Decl_0_Predicate is
   new Solver_Ifc.Predicate_Type
   with record
         Error_Location : Bare_Lkt_Node;
   end record;

   
      overriding function Call
        (Self : Decl_P_Is_Type_Decl_0_Predicate;
            Entity : Internal_Entity
        ) return Boolean
   ;

   
      overriding procedure Failed
        (Self : Decl_P_Is_Type_Decl_0_Predicate;
            Entity : Internal_Entity;
         Ctxs    : Solver_Ifc.Logic_Context_Array;
         Round   : Natural;
         Emitter : Solver_Ifc.Diagnostic_Emitter
        )
   ;

   overriding function Image (Self : Decl_P_Is_Type_Decl_0_Predicate) return String;

   

   function Create_Decl_P_Is_Type_Decl_0_Predicate
   (
         Error_Location : Bare_Lkt_Node
   )
      return Decl_P_Is_Type_Decl_0_Predicate is
   begin
      
      return Decl_P_Is_Type_Decl_0_Predicate'(Cache_Set => False, Cache_Key => <>, Cache_Value => <>, Ref_Count => 1, Error_Location => Error_Location);
   end;

   ----------
   -- Call --
   ----------

   
      overriding function Call
        (Self : Decl_P_Is_Type_Decl_0_Predicate;
            Entity : Internal_Entity
        ) return Boolean
   
   is
         pragma Unreferenced (Self);



      
      Node : Bare_Decl;

      Ret : Boolean;
   begin

      
            if Entity.Node /= null
               and then Entity.Node.Kind
                        not in Lkt_Decl
            then
               Raise_Property_Exception
                 (Node, Property_Error'Identity, "mismatching node type");
            end if;

      Node := Entity.Node;


      

      Ret := Decl_P_Is_Type_Decl (Node);


      return Ret;
   end Call;

   ------------
   -- Failed --
   ------------

   
      overriding procedure Failed
        (Self : Decl_P_Is_Type_Decl_0_Predicate;
            Entity : Internal_Entity;
         Ctxs    : Solver_Ifc.Logic_Context_Array;
         Round   : Natural;
         Emitter : Solver_Ifc.Diagnostic_Emitter
        )
   
   is
      
      Args : Internal_Entity_Array_Access :=
         Create_Internal_Entity_Array (1);

      Contexts : Internal_Logic_Context_Array_Access :=
         Create_Internal_Logic_Context_Array (Ctxs'Length);

      Diag : constant Internal_Solver_Diagnostic :=
        (Message_Template => Create_String ("{} is not a type"),
         Args             => Args,
         Contexts         => Contexts,
         Location         => Self.Error_Location,
         Round            => Round);
   begin
      Args.Items (1) := Entity;
      for I in Ctxs'Range loop
         Contexts.Items (I) := Ctxs (I).all;
      end loop;
      Emitter (Diag);
   end Failed;

   -----------
   -- Image --
   -----------

   overriding function Image (Self : Decl_P_Is_Type_Decl_0_Predicate) return String is
   begin
      return "Decl.is_type_decl";
   end Image;



         

         

   

   

   

   type Decl_P_Is_Defined_0_Predicate is
   new Solver_Ifc.Predicate_Type
   with record
         Error_Location : Bare_Lkt_Node;
   end record;

   
      overriding function Call
        (Self : Decl_P_Is_Defined_0_Predicate;
            Entity : Internal_Entity
        ) return Boolean
   ;

   
      overriding procedure Failed
        (Self : Decl_P_Is_Defined_0_Predicate;
            Entity : Internal_Entity;
         Ctxs    : Solver_Ifc.Logic_Context_Array;
         Round   : Natural;
         Emitter : Solver_Ifc.Diagnostic_Emitter
        )
   ;

   overriding function Image (Self : Decl_P_Is_Defined_0_Predicate) return String;

   

   function Create_Decl_P_Is_Defined_0_Predicate
   (
         Error_Location : Bare_Lkt_Node
   )
      return Decl_P_Is_Defined_0_Predicate is
   begin
      
      return Decl_P_Is_Defined_0_Predicate'(Cache_Set => False, Cache_Key => <>, Cache_Value => <>, Ref_Count => 1, Error_Location => Error_Location);
   end;

   ----------
   -- Call --
   ----------

   
      overriding function Call
        (Self : Decl_P_Is_Defined_0_Predicate;
            Entity : Internal_Entity
        ) return Boolean
   
   is
         pragma Unreferenced (Self);



      
      Node : Bare_Decl;

      Ret : Boolean;
   begin

      
            if Entity.Node /= null
               and then Entity.Node.Kind
                        not in Lkt_Decl
            then
               Raise_Property_Exception
                 (Node, Property_Error'Identity, "mismatching node type");
            end if;

      Node := Entity.Node;


      

      Ret := Decl_P_Is_Defined (Node);


      return Ret;
   end Call;

   ------------
   -- Failed --
   ------------

   
      overriding procedure Failed
        (Self : Decl_P_Is_Defined_0_Predicate;
            Entity : Internal_Entity;
         Ctxs    : Solver_Ifc.Logic_Context_Array;
         Round   : Natural;
         Emitter : Solver_Ifc.Diagnostic_Emitter
        )
   
   is
      
      Args : Internal_Entity_Array_Access :=
         Create_Internal_Entity_Array (0);

      Contexts : Internal_Logic_Context_Array_Access :=
         Create_Internal_Logic_Context_Array (Ctxs'Length);

      Diag : constant Internal_Solver_Diagnostic :=
        (Message_Template => Create_String ("undefined entity"),
         Args             => Args,
         Contexts         => Contexts,
         Location         => Self.Error_Location,
         Round            => Round);
   begin
      for I in Ctxs'Range loop
         Contexts.Items (I) := Ctxs (I).all;
      end loop;
      Emitter (Diag);
   end Failed;

   -----------
   -- Image --
   -----------

   overriding function Image (Self : Decl_P_Is_Defined_0_Predicate) return String is
   begin
      return "Decl.is_defined";
   end Image;



         

         

         

         

         

   

   type Decl_P_Function_Type_0_Functor is new Solver_Ifc.Converter_Type with
      null record;

   overriding function Convert (Self : Decl_P_Function_Type_0_Functor; From : Internal_Entity) return Internal_Entity with Inline;
   overriding function Image (Self : Decl_P_Function_Type_0_Functor) return String;


   

   function Create_Decl_P_Function_Type_0_Functor
      return Decl_P_Function_Type_0_Functor is
   begin
      
      return Decl_P_Function_Type_0_Functor'(Cache_Set => False, Cache_Key => <>, Cache_Value => <>, Ref_Count => 1);
   end;

   overriding function Convert (Self : Decl_P_Function_Type_0_Functor; From : Internal_Entity) return Internal_Entity is
         pragma Unreferenced (Self);



      

      Ret : Internal_Entity_Function_Type;
   begin
            if From.Node /= null
               and then From.Node.Kind not in
                 Lkt_Decl
            then
               Raise_Property_Exception
                 (From.Node,
                  Property_Error'Identity,
                  "mismatching node type for conv_prop");
            end if;


      
      Ret := Decl_P_Function_Type (Node => From.Node, E_Info => From.Info);


      return (Node => Ret.Node, Info => Ret.Info);
   end Convert;

   -----------
   -- Image --
   -----------

   overriding function Image (Self : Decl_P_Function_Type_0_Functor) return String is
   begin
      return ("Decl.function_type");
   end Image;



         

         

         

         

         

         

         

         

   

   type Decl_P_Get_Keep_Type_0_Functor is new Solver_Ifc.Combiner_Type with
      null record;

   overriding function Combine (Self : Decl_P_Get_Keep_Type_0_Functor; Vals : Entity_Vars.Value_Array) return Internal_Entity with Inline;
   overriding function Image (Self : Decl_P_Get_Keep_Type_0_Functor) return String;


   

   function Create_Decl_P_Get_Keep_Type_0_Functor
   (
         N : Positive
   )
      return Decl_P_Get_Keep_Type_0_Functor is
   begin
      
      return Decl_P_Get_Keep_Type_0_Functor'(N => N, Cache_Set => False, Cache_Key => <>, Cache_Value => <>, Ref_Count => 1);
   end;

   overriding function Combine (Self : Decl_P_Get_Keep_Type_0_Functor; Vals : Entity_Vars.Value_Array) return Internal_Entity is
         pragma Unreferenced (Self);

         From : constant Internal_Entity := Vals (1);


      

      Ret : Internal_Entity_Type_Decl;
   begin
            if From.Node /= null
               and then From.Node.Kind not in
                 Lkt_Decl
            then
               Raise_Property_Exception
                 (From.Node,
                  Property_Error'Identity,
                  "mismatching node type for comb_prop");
            end if;
            if Vals (2).Node /= null
               and then Vals (2).Node.Kind not in
                 Lkt_Type_Decl
            then
               Raise_Property_Exception
                 (From.Node,
                  Property_Error'Identity,
                  "mismatching node type for comb_prop");
            end if;


      
      Ret := Decl_P_Get_Keep_Type (Node => From.Node, Keep_Type => (Node => Vals (2).Node,  Info => Vals (2).Info), E_Info => From.Info);


      return (Node => Ret.Node, Info => Ret.Info);
   end Combine;

   -----------
   -- Image --
   -----------

   overriding function Image (Self : Decl_P_Get_Keep_Type_0_Functor) return String is
   begin
      return ("Decl.get_keep_type");
   end Image;



         

         

         

         

         

         

         

         

         

         

         

   

   

   

   type Decl_P_Is_Generic_0_Predicate is
   new Solver_Ifc.Predicate_Type
   with record
         Error_Location : Bare_Lkt_Node;
   end record;

   
      overriding function Call
        (Self : Decl_P_Is_Generic_0_Predicate;
            Entity : Internal_Entity
        ) return Boolean
   ;

   
      overriding procedure Failed
        (Self : Decl_P_Is_Generic_0_Predicate;
            Entity : Internal_Entity;
         Ctxs    : Solver_Ifc.Logic_Context_Array;
         Round   : Natural;
         Emitter : Solver_Ifc.Diagnostic_Emitter
        )
   ;

   overriding function Image (Self : Decl_P_Is_Generic_0_Predicate) return String;

   

   function Create_Decl_P_Is_Generic_0_Predicate
   (
         Error_Location : Bare_Lkt_Node
   )
      return Decl_P_Is_Generic_0_Predicate is
   begin
      
      return Decl_P_Is_Generic_0_Predicate'(Cache_Set => False, Cache_Key => <>, Cache_Value => <>, Ref_Count => 1, Error_Location => Error_Location);
   end;

   ----------
   -- Call --
   ----------

   
      overriding function Call
        (Self : Decl_P_Is_Generic_0_Predicate;
            Entity : Internal_Entity
        ) return Boolean
   
   is
         pragma Unreferenced (Self);



      
      Node : Bare_Decl;

      Ret : Boolean;
   begin

      
            if Entity.Node /= null
               and then Entity.Node.Kind
                        not in Lkt_Decl
            then
               Raise_Property_Exception
                 (Node, Property_Error'Identity, "mismatching node type");
            end if;

      Node := Entity.Node;


      

      Ret := Decl_P_Is_Generic (Node, E_Info => Entity.Info);


      return Ret;
   end Call;

   ------------
   -- Failed --
   ------------

   
      overriding procedure Failed
        (Self : Decl_P_Is_Generic_0_Predicate;
            Entity : Internal_Entity;
         Ctxs    : Solver_Ifc.Logic_Context_Array;
         Round   : Natural;
         Emitter : Solver_Ifc.Diagnostic_Emitter
        )
   
   is
      
      Args : Internal_Entity_Array_Access :=
         Create_Internal_Entity_Array (1);

      Contexts : Internal_Logic_Context_Array_Access :=
         Create_Internal_Logic_Context_Array (Ctxs'Length);

      Diag : constant Internal_Solver_Diagnostic :=
        (Message_Template => Create_String ("{} is not a generic declaration"),
         Args             => Args,
         Contexts         => Contexts,
         Location         => Self.Error_Location,
         Round            => Round);
   begin
      Args.Items (1) := Entity;
      for I in Ctxs'Range loop
         Contexts.Items (I) := Ctxs (I).all;
      end loop;
      Emitter (Diag);
   end Failed;

   -----------
   -- Image --
   -----------

   overriding function Image (Self : Decl_P_Is_Generic_0_Predicate) return String is
   begin
      return "Decl.is_generic";
   end Image;



         

         

   

   

   

   type Decl_P_Return_Type_Is_Instantiated_0_Predicate is
   new Solver_Ifc.Predicate_Type
   with record
         null;
   end record;

   
      overriding function Call
        (Self : Decl_P_Return_Type_Is_Instantiated_0_Predicate;
            Entity : Internal_Entity
        ) return Boolean
   ;


   overriding function Image (Self : Decl_P_Return_Type_Is_Instantiated_0_Predicate) return String;

   

   function Create_Decl_P_Return_Type_Is_Instantiated_0_Predicate
      return Decl_P_Return_Type_Is_Instantiated_0_Predicate is
   begin
      
      return Decl_P_Return_Type_Is_Instantiated_0_Predicate'(Cache_Set => False, Cache_Key => <>, Cache_Value => <>, Ref_Count => 1);
   end;

   ----------
   -- Call --
   ----------

   
      overriding function Call
        (Self : Decl_P_Return_Type_Is_Instantiated_0_Predicate;
            Entity : Internal_Entity
        ) return Boolean
   
   is
         pragma Unreferenced (Self);



      
      Node : Bare_Decl;

      Ret : Boolean;
   begin

      
            if Entity.Node /= null
               and then Entity.Node.Kind
                        not in Lkt_Decl
            then
               Raise_Property_Exception
                 (Node, Property_Error'Identity, "mismatching node type");
            end if;

      Node := Entity.Node;


      

      Ret := Decl_P_Return_Type_Is_Instantiated (Node, E_Info => Entity.Info);


      return Ret;
   end Call;


   -----------
   -- Image --
   -----------

   overriding function Image (Self : Decl_P_Return_Type_Is_Instantiated_0_Predicate) return String is
   begin
      return "Decl.return_type_is_instantiated";
   end Image;



         

         

         

         

   

   

   

   type Decl_P_Has_Correct_Type_Param_Number_0_Predicate is
   new Solver_Ifc.Predicate_Type
   with record
         Field_0 : Integer;
         Error_Location : Bare_Lkt_Node;
   end record;

   
      overriding function Call
        (Self : Decl_P_Has_Correct_Type_Param_Number_0_Predicate;
            Entity : Internal_Entity
        ) return Boolean
   ;

   
      overriding procedure Failed
        (Self : Decl_P_Has_Correct_Type_Param_Number_0_Predicate;
            Entity : Internal_Entity;
         Ctxs    : Solver_Ifc.Logic_Context_Array;
         Round   : Natural;
         Emitter : Solver_Ifc.Diagnostic_Emitter
        )
   ;

   overriding function Image (Self : Decl_P_Has_Correct_Type_Param_Number_0_Predicate) return String;

   

   function Create_Decl_P_Has_Correct_Type_Param_Number_0_Predicate
   (
         Nb_Types : Integer;
         Error_Location : Bare_Lkt_Node
   )
      return Decl_P_Has_Correct_Type_Param_Number_0_Predicate is
   begin
      
         
      return Decl_P_Has_Correct_Type_Param_Number_0_Predicate'(Cache_Set => False, Cache_Key => <>, Cache_Value => <>, Ref_Count => 1, Error_Location => Error_Location, Field_0 => Nb_Types);
   end;

   ----------
   -- Call --
   ----------

   
      overriding function Call
        (Self : Decl_P_Has_Correct_Type_Param_Number_0_Predicate;
            Entity : Internal_Entity
        ) return Boolean
   
   is



      
      Node : Bare_Decl;

      Ret : Boolean;
   begin

      
            if Entity.Node /= null
               and then Entity.Node.Kind
                        not in Lkt_Decl
            then
               Raise_Property_Exception
                 (Node, Property_Error'Identity, "mismatching node type");
            end if;

      Node := Entity.Node;


      

      Ret := Decl_P_Has_Correct_Type_Param_Number (Node, Nb_Types => Self.Field_0, E_Info => Entity.Info);


      return Ret;
   end Call;

   ------------
   -- Failed --
   ------------

   
      overriding procedure Failed
        (Self : Decl_P_Has_Correct_Type_Param_Number_0_Predicate;
            Entity : Internal_Entity;
         Ctxs    : Solver_Ifc.Logic_Context_Array;
         Round   : Natural;
         Emitter : Solver_Ifc.Diagnostic_Emitter
        )
   
   is
      
      Args : Internal_Entity_Array_Access :=
         Create_Internal_Entity_Array (0);

      Contexts : Internal_Logic_Context_Array_Access :=
         Create_Internal_Logic_Context_Array (Ctxs'Length);

      Diag : constant Internal_Solver_Diagnostic :=
        (Message_Template => Create_String ("Incorrect number of type_parameter"),
         Args             => Args,
         Contexts         => Contexts,
         Location         => Self.Error_Location,
         Round            => Round);
   begin
      for I in Ctxs'Range loop
         Contexts.Items (I) := Ctxs (I).all;
      end loop;
      Emitter (Diag);
   end Failed;

   -----------
   -- Image --
   -----------

   overriding function Image (Self : Decl_P_Has_Correct_Type_Param_Number_0_Predicate) return String is
   begin
      return "Decl.has_correct_type_param_number";
   end Image;



         

         

   

   

   

   type Decl_P_Could_Infer_0_Predicate is
   new Solver_Ifc.Predicate_Type
   with record
         Field_0 : Internal_Entity_Function_Type;
         Error_Location : Bare_Lkt_Node;
   end record;

   
      overriding function Call
        (Self : Decl_P_Could_Infer_0_Predicate;
            Entity : Internal_Entity
        ) return Boolean
   ;

   
      overriding procedure Failed
        (Self : Decl_P_Could_Infer_0_Predicate;
            Entity : Internal_Entity;
         Ctxs    : Solver_Ifc.Logic_Context_Array;
         Round   : Natural;
         Emitter : Solver_Ifc.Diagnostic_Emitter
        )
   ;

   overriding function Image (Self : Decl_P_Could_Infer_0_Predicate) return String;

   

   function Create_Decl_P_Could_Infer_0_Predicate
   (
         Generic_Type : Internal_Entity_Function_Type;
         Error_Location : Bare_Lkt_Node
   )
      return Decl_P_Could_Infer_0_Predicate is
   begin
      
         
      return Decl_P_Could_Infer_0_Predicate'(Cache_Set => False, Cache_Key => <>, Cache_Value => <>, Ref_Count => 1, Error_Location => Error_Location, Field_0 => Generic_Type);
   end;

   ----------
   -- Call --
   ----------

   
      overriding function Call
        (Self : Decl_P_Could_Infer_0_Predicate;
            Entity : Internal_Entity
        ) return Boolean
   
   is



      
      Node : Bare_Decl;

      Ret : Boolean;
   begin

      
            if Entity.Node /= null
               and then Entity.Node.Kind
                        not in Lkt_Decl
            then
               Raise_Property_Exception
                 (Node, Property_Error'Identity, "mismatching node type");
            end if;

      Node := Entity.Node;


      

      Ret := Decl_P_Could_Infer (Node, Generic_Type => Self.Field_0, E_Info => Entity.Info);


      return Ret;
   end Call;

   ------------
   -- Failed --
   ------------

   
      overriding procedure Failed
        (Self : Decl_P_Could_Infer_0_Predicate;
            Entity : Internal_Entity;
         Ctxs    : Solver_Ifc.Logic_Context_Array;
         Round   : Natural;
         Emitter : Solver_Ifc.Diagnostic_Emitter
        )
   
   is
      
      Args : Internal_Entity_Array_Access :=
         Create_Internal_Entity_Array (0);

      Contexts : Internal_Logic_Context_Array_Access :=
         Create_Internal_Logic_Context_Array (Ctxs'Length);

      Diag : constant Internal_Solver_Diagnostic :=
        (Message_Template => Create_String ("could not determine callee type"),
         Args             => Args,
         Contexts         => Contexts,
         Location         => Self.Error_Location,
         Round            => Round);
   begin
      for I in Ctxs'Range loop
         Contexts.Items (I) := Ctxs (I).all;
      end loop;
      Emitter (Diag);
   end Failed;

   -----------
   -- Image --
   -----------

   overriding function Image (Self : Decl_P_Could_Infer_0_Predicate) return String is
   begin
      return "Decl.could_infer";
   end Image;



         

         

         

   

   type Decl_P_Instantiate_Generic_Decl_0_Functor is new Solver_Ifc.Combiner_Type with
      null record;

   overriding function Combine (Self : Decl_P_Instantiate_Generic_Decl_0_Functor; Vals : Entity_Vars.Value_Array) return Internal_Entity with Inline;
   overriding function Image (Self : Decl_P_Instantiate_Generic_Decl_0_Functor) return String;


   

   function Create_Decl_P_Instantiate_Generic_Decl_0_Functor
   (
         N : Positive
   )
      return Decl_P_Instantiate_Generic_Decl_0_Functor is
   begin
      
      return Decl_P_Instantiate_Generic_Decl_0_Functor'(N => N, Cache_Set => False, Cache_Key => <>, Cache_Value => <>, Ref_Count => 1);
   end;

   overriding function Combine (Self : Decl_P_Instantiate_Generic_Decl_0_Functor; Vals : Entity_Vars.Value_Array) return Internal_Entity is
         pragma Unreferenced (Self);

         From : constant Internal_Entity := Vals (1);

         
         Args : Internal_Entity_Type_Decl_Array_Access :=
           Create_Internal_Entity_Type_Decl_Array (Vals'Length - 1);

      

      Ret : Internal_Entity_Decl;
   begin
            if From.Node /= null
               and then From.Node.Kind not in
                 Lkt_Decl
            then
               Raise_Property_Exception
                 (From.Node,
                  Property_Error'Identity,
                  "mismatching node type for comb_prop");
            end if;

      
      for I in 2 .. Vals'Last loop
            if Vals (I).Node /= null
               and then Vals (I).Node.Kind not in
                  Lkt_Type_Decl
            then
               Raise_Property_Exception
                 (Vals (I).Node,
                  Property_Error'Identity,
                  "mismatching node type for comb_prop");
            end if;
         Args.Items (I - 1) := (Vals (I).Node, Vals (I).Info);
      end loop;

      
      Ret := Decl_P_Instantiate_Generic_Decl (Node => From.Node, Type_Params => Args, E_Info => From.Info);

      Dec_Ref (Args);

      return (Node => Ret.Node, Info => Ret.Info);
   exception
      when Exc : Property_Error =>
         pragma Unreferenced (Exc);
         Dec_Ref (Args);
         raise;
   end Combine;

   -----------
   -- Image --
   -----------

   overriding function Image (Self : Decl_P_Instantiate_Generic_Decl_0_Functor) return String is
   begin
      return ("Decl.instantiate_generic_decl");
   end Image;



         

         

         

   

   

   

   type Decl_P_Is_Dynvar_0_Predicate is
   new Solver_Ifc.Predicate_Type
   with record
         Error_Location : Bare_Lkt_Node;
   end record;

   
      overriding function Call
        (Self : Decl_P_Is_Dynvar_0_Predicate;
            Entity : Internal_Entity
        ) return Boolean
   ;

   
      overriding procedure Failed
        (Self : Decl_P_Is_Dynvar_0_Predicate;
            Entity : Internal_Entity;
         Ctxs    : Solver_Ifc.Logic_Context_Array;
         Round   : Natural;
         Emitter : Solver_Ifc.Diagnostic_Emitter
        )
   ;

   overriding function Image (Self : Decl_P_Is_Dynvar_0_Predicate) return String;

   

   function Create_Decl_P_Is_Dynvar_0_Predicate
   (
         Error_Location : Bare_Lkt_Node
   )
      return Decl_P_Is_Dynvar_0_Predicate is
   begin
      
      return Decl_P_Is_Dynvar_0_Predicate'(Cache_Set => False, Cache_Key => <>, Cache_Value => <>, Ref_Count => 1, Error_Location => Error_Location);
   end;

   ----------
   -- Call --
   ----------

   
      overriding function Call
        (Self : Decl_P_Is_Dynvar_0_Predicate;
            Entity : Internal_Entity
        ) return Boolean
   
   is
         pragma Unreferenced (Self);



      
      Node : Bare_Decl;

      Ret : Boolean;
   begin

      
            if Entity.Node /= null
               and then Entity.Node.Kind
                        not in Lkt_Decl
            then
               Raise_Property_Exception
                 (Node, Property_Error'Identity, "mismatching node type");
            end if;

      Node := Entity.Node;


      

      Ret := Decl_P_Is_Dynvar (Node, E_Info => Entity.Info);


      return Ret;
   end Call;

   ------------
   -- Failed --
   ------------

   
      overriding procedure Failed
        (Self : Decl_P_Is_Dynvar_0_Predicate;
            Entity : Internal_Entity;
         Ctxs    : Solver_Ifc.Logic_Context_Array;
         Round   : Natural;
         Emitter : Solver_Ifc.Diagnostic_Emitter
        )
   
   is
      
      Args : Internal_Entity_Array_Access :=
         Create_Internal_Entity_Array (1);

      Contexts : Internal_Logic_Context_Array_Access :=
         Create_Internal_Logic_Context_Array (Ctxs'Length);

      Diag : constant Internal_Solver_Diagnostic :=
        (Message_Template => Create_String ("{} is not a dynamic variable"),
         Args             => Args,
         Contexts         => Contexts,
         Location         => Self.Error_Location,
         Round            => Round);
   begin
      Args.Items (1) := Entity;
      for I in Ctxs'Range loop
         Contexts.Items (I) := Ctxs (I).all;
      end loop;
      Emitter (Diag);
   end Failed;

   -----------
   -- Image --
   -----------

   overriding function Image (Self : Decl_P_Is_Dynvar_0_Predicate) return String is
   begin
      return "Decl.is_dynvar";
   end Image;



         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

   

   

   

   type Type_Decl_P_Is_Equation_0_Predicate is
   new Solver_Ifc.Predicate_Type
   with record
         Error_Location : Bare_Lkt_Node;
   end record;

   
      overriding function Call
        (Self : Type_Decl_P_Is_Equation_0_Predicate;
            Entity : Internal_Entity
        ) return Boolean
   ;

   
      overriding procedure Failed
        (Self : Type_Decl_P_Is_Equation_0_Predicate;
            Entity : Internal_Entity;
         Ctxs    : Solver_Ifc.Logic_Context_Array;
         Round   : Natural;
         Emitter : Solver_Ifc.Diagnostic_Emitter
        )
   ;

   overriding function Image (Self : Type_Decl_P_Is_Equation_0_Predicate) return String;

   

   function Create_Type_Decl_P_Is_Equation_0_Predicate
   (
         Error_Location : Bare_Lkt_Node
   )
      return Type_Decl_P_Is_Equation_0_Predicate is
   begin
      
      return Type_Decl_P_Is_Equation_0_Predicate'(Cache_Set => False, Cache_Key => <>, Cache_Value => <>, Ref_Count => 1, Error_Location => Error_Location);
   end;

   ----------
   -- Call --
   ----------

   
      overriding function Call
        (Self : Type_Decl_P_Is_Equation_0_Predicate;
            Entity : Internal_Entity
        ) return Boolean
   
   is
         pragma Unreferenced (Self);



      
      Node : Bare_Type_Decl;

      Ret : Boolean;
   begin

      
            if Entity.Node /= null
               and then Entity.Node.Kind
                        not in Lkt_Type_Decl
            then
               Raise_Property_Exception
                 (Node, Property_Error'Identity, "mismatching node type");
            end if;

      Node := Entity.Node;


      

      Ret := Type_Decl_P_Is_Equation (Node, E_Info => Entity.Info);


      return Ret;
   end Call;

   ------------
   -- Failed --
   ------------

   
      overriding procedure Failed
        (Self : Type_Decl_P_Is_Equation_0_Predicate;
            Entity : Internal_Entity;
         Ctxs    : Solver_Ifc.Logic_Context_Array;
         Round   : Natural;
         Emitter : Solver_Ifc.Diagnostic_Emitter
        )
   
   is
      
      Args : Internal_Entity_Array_Access :=
         Create_Internal_Entity_Array (1);

      Contexts : Internal_Logic_Context_Array_Access :=
         Create_Internal_Logic_Context_Array (Ctxs'Length);

      Diag : constant Internal_Solver_Diagnostic :=
        (Message_Template => Create_String ("operands of %and and %or must be equations, got {}"),
         Args             => Args,
         Contexts         => Contexts,
         Location         => Self.Error_Location,
         Round            => Round);
   begin
      Args.Items (1) := Entity;
      for I in Ctxs'Range loop
         Contexts.Items (I) := Ctxs (I).all;
      end loop;
      Emitter (Diag);
   end Failed;

   -----------
   -- Image --
   -----------

   overriding function Image (Self : Type_Decl_P_Is_Equation_0_Predicate) return String is
   begin
      return "TypeDecl.is_equation";
   end Image;



         

         

   

   

   

   type Type_Decl_P_Is_Bool_0_Predicate is
   new Solver_Ifc.Predicate_Type
   with record
         Error_Location : Bare_Lkt_Node;
   end record;

   
      overriding function Call
        (Self : Type_Decl_P_Is_Bool_0_Predicate;
            Entity : Internal_Entity
        ) return Boolean
   ;

   
      overriding procedure Failed
        (Self : Type_Decl_P_Is_Bool_0_Predicate;
            Entity : Internal_Entity;
         Ctxs    : Solver_Ifc.Logic_Context_Array;
         Round   : Natural;
         Emitter : Solver_Ifc.Diagnostic_Emitter
        )
   ;

   overriding function Image (Self : Type_Decl_P_Is_Bool_0_Predicate) return String;

   

   function Create_Type_Decl_P_Is_Bool_0_Predicate
   (
         Error_Location : Bare_Lkt_Node
   )
      return Type_Decl_P_Is_Bool_0_Predicate is
   begin
      
      return Type_Decl_P_Is_Bool_0_Predicate'(Cache_Set => False, Cache_Key => <>, Cache_Value => <>, Ref_Count => 1, Error_Location => Error_Location);
   end;

   ----------
   -- Call --
   ----------

   
      overriding function Call
        (Self : Type_Decl_P_Is_Bool_0_Predicate;
            Entity : Internal_Entity
        ) return Boolean
   
   is
         pragma Unreferenced (Self);



      
      Node : Bare_Type_Decl;

      Ret : Boolean;
   begin

      
            if Entity.Node /= null
               and then Entity.Node.Kind
                        not in Lkt_Type_Decl
            then
               Raise_Property_Exception
                 (Node, Property_Error'Identity, "mismatching node type");
            end if;

      Node := Entity.Node;


      

      Ret := Type_Decl_P_Is_Bool (Node, E_Info => Entity.Info);


      return Ret;
   end Call;

   ------------
   -- Failed --
   ------------

   
      overriding procedure Failed
        (Self : Type_Decl_P_Is_Bool_0_Predicate;
            Entity : Internal_Entity;
         Ctxs    : Solver_Ifc.Logic_Context_Array;
         Round   : Natural;
         Emitter : Solver_Ifc.Diagnostic_Emitter
        )
   
   is
      
      Args : Internal_Entity_Array_Access :=
         Create_Internal_Entity_Array (1);

      Contexts : Internal_Logic_Context_Array_Access :=
         Create_Internal_Logic_Context_Array (Ctxs'Length);

      Diag : constant Internal_Solver_Diagnostic :=
        (Message_Template => Create_String ("operands of binary logic operators must be of boolean type, got {}"),
         Args             => Args,
         Contexts         => Contexts,
         Location         => Self.Error_Location,
         Round            => Round);
   begin
      Args.Items (1) := Entity;
      for I in Ctxs'Range loop
         Contexts.Items (I) := Ctxs (I).all;
      end loop;
      Emitter (Diag);
   end Failed;

   -----------
   -- Image --
   -----------

   overriding function Image (Self : Type_Decl_P_Is_Bool_0_Predicate) return String is
   begin
      return "TypeDecl.is_bool";
   end Image;



         

         

   

   

   

   type Type_Decl_P_Is_String_Or_Array_Type_0_Predicate is
   new Solver_Ifc.Predicate_Type
   with record
         Error_Location : Bare_Lkt_Node;
   end record;

   
      overriding function Call
        (Self : Type_Decl_P_Is_String_Or_Array_Type_0_Predicate;
            Entity : Internal_Entity
        ) return Boolean
   ;

   
      overriding procedure Failed
        (Self : Type_Decl_P_Is_String_Or_Array_Type_0_Predicate;
            Entity : Internal_Entity;
         Ctxs    : Solver_Ifc.Logic_Context_Array;
         Round   : Natural;
         Emitter : Solver_Ifc.Diagnostic_Emitter
        )
   ;

   overriding function Image (Self : Type_Decl_P_Is_String_Or_Array_Type_0_Predicate) return String;

   

   function Create_Type_Decl_P_Is_String_Or_Array_Type_0_Predicate
   (
         Error_Location : Bare_Lkt_Node
   )
      return Type_Decl_P_Is_String_Or_Array_Type_0_Predicate is
   begin
      
      return Type_Decl_P_Is_String_Or_Array_Type_0_Predicate'(Cache_Set => False, Cache_Key => <>, Cache_Value => <>, Ref_Count => 1, Error_Location => Error_Location);
   end;

   ----------
   -- Call --
   ----------

   
      overriding function Call
        (Self : Type_Decl_P_Is_String_Or_Array_Type_0_Predicate;
            Entity : Internal_Entity
        ) return Boolean
   
   is
         pragma Unreferenced (Self);



      
      Node : Bare_Type_Decl;

      Ret : Boolean;
   begin

      
            if Entity.Node /= null
               and then Entity.Node.Kind
                        not in Lkt_Type_Decl
            then
               Raise_Property_Exception
                 (Node, Property_Error'Identity, "mismatching node type");
            end if;

      Node := Entity.Node;


      

      Ret := Type_Decl_P_Is_String_Or_Array_Type (Node, E_Info => Entity.Info);


      return Ret;
   end Call;

   ------------
   -- Failed --
   ------------

   
      overriding procedure Failed
        (Self : Type_Decl_P_Is_String_Or_Array_Type_0_Predicate;
            Entity : Internal_Entity;
         Ctxs    : Solver_Ifc.Logic_Context_Array;
         Round   : Natural;
         Emitter : Solver_Ifc.Diagnostic_Emitter
        )
   
   is
      
      Args : Internal_Entity_Array_Access :=
         Create_Internal_Entity_Array (1);

      Contexts : Internal_Logic_Context_Array_Access :=
         Create_Internal_Logic_Context_Array (Ctxs'Length);

      Diag : constant Internal_Solver_Diagnostic :=
        (Message_Template => Create_String ("expression must be a string or an array, got {}"),
         Args             => Args,
         Contexts         => Contexts,
         Location         => Self.Error_Location,
         Round            => Round);
   begin
      Args.Items (1) := Entity;
      for I in Ctxs'Range loop
         Contexts.Items (I) := Ctxs (I).all;
      end loop;
      Emitter (Diag);
   end Failed;

   -----------
   -- Image --
   -----------

   overriding function Image (Self : Type_Decl_P_Is_String_Or_Array_Type_0_Predicate) return String is
   begin
      return "TypeDecl.is_string_or_array_type";
   end Image;



         

         

   

   

   

   type Type_Decl_P_Is_Int_Type_0_Predicate is
   new Solver_Ifc.Predicate_Type
   with record
         Error_Location : Bare_Lkt_Node;
   end record;

   
      overriding function Call
        (Self : Type_Decl_P_Is_Int_Type_0_Predicate;
            Entity : Internal_Entity
        ) return Boolean
   ;

   
      overriding procedure Failed
        (Self : Type_Decl_P_Is_Int_Type_0_Predicate;
            Entity : Internal_Entity;
         Ctxs    : Solver_Ifc.Logic_Context_Array;
         Round   : Natural;
         Emitter : Solver_Ifc.Diagnostic_Emitter
        )
   ;

   overriding function Image (Self : Type_Decl_P_Is_Int_Type_0_Predicate) return String;

   

   function Create_Type_Decl_P_Is_Int_Type_0_Predicate
   (
         Error_Location : Bare_Lkt_Node
   )
      return Type_Decl_P_Is_Int_Type_0_Predicate is
   begin
      
      return Type_Decl_P_Is_Int_Type_0_Predicate'(Cache_Set => False, Cache_Key => <>, Cache_Value => <>, Ref_Count => 1, Error_Location => Error_Location);
   end;

   ----------
   -- Call --
   ----------

   
      overriding function Call
        (Self : Type_Decl_P_Is_Int_Type_0_Predicate;
            Entity : Internal_Entity
        ) return Boolean
   
   is
         pragma Unreferenced (Self);



      
      Node : Bare_Type_Decl;

      Ret : Boolean;
   begin

      
            if Entity.Node /= null
               and then Entity.Node.Kind
                        not in Lkt_Type_Decl
            then
               Raise_Property_Exception
                 (Node, Property_Error'Identity, "mismatching node type");
            end if;

      Node := Entity.Node;


      

      Ret := Type_Decl_P_Is_Int_Type (Node, E_Info => Entity.Info);


      return Ret;
   end Call;

   ------------
   -- Failed --
   ------------

   
      overriding procedure Failed
        (Self : Type_Decl_P_Is_Int_Type_0_Predicate;
            Entity : Internal_Entity;
         Ctxs    : Solver_Ifc.Logic_Context_Array;
         Round   : Natural;
         Emitter : Solver_Ifc.Diagnostic_Emitter
        )
   
   is
      
      Args : Internal_Entity_Array_Access :=
         Create_Internal_Entity_Array (1);

      Contexts : Internal_Logic_Context_Array_Access :=
         Create_Internal_Logic_Context_Array (Ctxs'Length);

      Diag : constant Internal_Solver_Diagnostic :=
        (Message_Template => Create_String ("expression must be of type Int or BigInt, got {}"),
         Args             => Args,
         Contexts         => Contexts,
         Location         => Self.Error_Location,
         Round            => Round);
   begin
      Args.Items (1) := Entity;
      for I in Ctxs'Range loop
         Contexts.Items (I) := Ctxs (I).all;
      end loop;
      Emitter (Diag);
   end Failed;

   -----------
   -- Image --
   -----------

   overriding function Image (Self : Type_Decl_P_Is_Int_Type_0_Predicate) return String is
   begin
      return "TypeDecl.is_int_type";
   end Image;



         

         

   

   

   

   type Type_Decl_P_Is_Int_Or_Node_0_Predicate is
   new Solver_Ifc.Predicate_Type
   with record
         Error_Location : Bare_Lkt_Node;
   end record;

   
      overriding function Call
        (Self : Type_Decl_P_Is_Int_Or_Node_0_Predicate;
            Entity : Internal_Entity
        ) return Boolean
   ;

   
      overriding procedure Failed
        (Self : Type_Decl_P_Is_Int_Or_Node_0_Predicate;
            Entity : Internal_Entity;
         Ctxs    : Solver_Ifc.Logic_Context_Array;
         Round   : Natural;
         Emitter : Solver_Ifc.Diagnostic_Emitter
        )
   ;

   overriding function Image (Self : Type_Decl_P_Is_Int_Or_Node_0_Predicate) return String;

   

   function Create_Type_Decl_P_Is_Int_Or_Node_0_Predicate
   (
         Error_Location : Bare_Lkt_Node
   )
      return Type_Decl_P_Is_Int_Or_Node_0_Predicate is
   begin
      
      return Type_Decl_P_Is_Int_Or_Node_0_Predicate'(Cache_Set => False, Cache_Key => <>, Cache_Value => <>, Ref_Count => 1, Error_Location => Error_Location);
   end;

   ----------
   -- Call --
   ----------

   
      overriding function Call
        (Self : Type_Decl_P_Is_Int_Or_Node_0_Predicate;
            Entity : Internal_Entity
        ) return Boolean
   
   is
         pragma Unreferenced (Self);



      
      Node : Bare_Type_Decl;

      Ret : Boolean;
   begin

      
            if Entity.Node /= null
               and then Entity.Node.Kind
                        not in Lkt_Type_Decl
            then
               Raise_Property_Exception
                 (Node, Property_Error'Identity, "mismatching node type");
            end if;

      Node := Entity.Node;


      

      Ret := Type_Decl_P_Is_Int_Or_Node (Node, E_Info => Entity.Info);


      return Ret;
   end Call;

   ------------
   -- Failed --
   ------------

   
      overriding procedure Failed
        (Self : Type_Decl_P_Is_Int_Or_Node_0_Predicate;
            Entity : Internal_Entity;
         Ctxs    : Solver_Ifc.Logic_Context_Array;
         Round   : Natural;
         Emitter : Solver_Ifc.Diagnostic_Emitter
        )
   
   is
      
      Args : Internal_Entity_Array_Access :=
         Create_Internal_Entity_Array (1);

      Contexts : Internal_Logic_Context_Array_Access :=
         Create_Internal_Logic_Context_Array (Ctxs'Length);

      Diag : constant Internal_Solver_Diagnostic :=
        (Message_Template => Create_String ("expression must be of type Int, BigInt or Node, got {}"),
         Args             => Args,
         Contexts         => Contexts,
         Location         => Self.Error_Location,
         Round            => Round);
   begin
      Args.Items (1) := Entity;
      for I in Ctxs'Range loop
         Contexts.Items (I) := Ctxs (I).all;
      end loop;
      Emitter (Diag);
   end Failed;

   -----------
   -- Image --
   -----------

   overriding function Image (Self : Type_Decl_P_Is_Int_Or_Node_0_Predicate) return String is
   begin
      return "TypeDecl.is_int_or_node";
   end Image;



         

         

         

         

   

   

   

   type Type_Decl_P_Is_Subtype_Or_Eq_0_Predicate is
   new Solver_Ifc.N_Predicate_Type
   with record
         Field_0 : Boolean;
         Error_Location : Bare_Lkt_Node;
   end record;

   
      overriding function Call
        (Self : Type_Decl_P_Is_Subtype_Or_Eq_0_Predicate;
            Entities : Entity_Vars.Value_Array
        ) return Boolean
   ;

   
      overriding procedure Failed
        (Self : Type_Decl_P_Is_Subtype_Or_Eq_0_Predicate;
            Entities : Entity_Vars.Value_Array;
         Ctxs    : Solver_Ifc.Logic_Context_Array;
         Round   : Natural;
         Emitter : Solver_Ifc.Diagnostic_Emitter
        )
   ;

   overriding function Image (Self : Type_Decl_P_Is_Subtype_Or_Eq_0_Predicate) return String;

   

   function Create_Type_Decl_P_Is_Subtype_Or_Eq_0_Predicate
   (
         N : Positive;
         Allow_Entity : Boolean;
         Error_Location : Bare_Lkt_Node
   )
      return Type_Decl_P_Is_Subtype_Or_Eq_0_Predicate is
   begin
      
         
      return Type_Decl_P_Is_Subtype_Or_Eq_0_Predicate'(N => N, Cache_Set => False, Cache_Key => <>, Cache_Value => <>, Ref_Count => 1, Error_Location => Error_Location, Field_0 => Allow_Entity);
   end;

   ----------
   -- Call --
   ----------

   
      overriding function Call
        (Self : Type_Decl_P_Is_Subtype_Or_Eq_0_Predicate;
            Entities : Entity_Vars.Value_Array
        ) return Boolean
   
   is

         Entity : Internal_Entity := Entities (1);


      
      Node : Bare_Type_Decl;

      Ret : Boolean;
   begin

      
            if Entity.Node /= null
               and then Entity.Node.Kind
                        not in Lkt_Type_Decl
            then
               Raise_Property_Exception
                 (Node, Property_Error'Identity, "mismatching node type");
            end if;
            if Entities (2).Node /= null
               and then Entities (2).Node.Kind
                        not in Lkt_Type_Decl
            then
               Raise_Property_Exception
                 (Node, Property_Error'Identity, "mismatching node type");
            end if;

      Node := Entity.Node;


      

      Ret := Type_Decl_P_Is_Subtype_Or_Eq (Node, (Node => Entities (2).Node, Info => Entities (2).Info), Allow_Entity => Self.Field_0, E_Info => Entity.Info);


      return Ret;
   end Call;

   ------------
   -- Failed --
   ------------

   
      overriding procedure Failed
        (Self : Type_Decl_P_Is_Subtype_Or_Eq_0_Predicate;
            Entities : Entity_Vars.Value_Array;
         Ctxs    : Solver_Ifc.Logic_Context_Array;
         Round   : Natural;
         Emitter : Solver_Ifc.Diagnostic_Emitter
        )
   
   is
      
      Args : Internal_Entity_Array_Access :=
         Create_Internal_Entity_Array (2);

      Contexts : Internal_Logic_Context_Array_Access :=
         Create_Internal_Logic_Context_Array (Ctxs'Length);

      Diag : constant Internal_Solver_Diagnostic :=
        (Message_Template => Create_String ("{} is not a subtype of {}"),
         Args             => Args,
         Contexts         => Contexts,
         Location         => Self.Error_Location,
         Round            => Round);
   begin
      Args.Items (1) := Entities (2);
      Args.Items (2) := Entities (1);
      for I in Ctxs'Range loop
         Contexts.Items (I) := Ctxs (I).all;
      end loop;
      Emitter (Diag);
   end Failed;

   -----------
   -- Image --
   -----------

   overriding function Image (Self : Type_Decl_P_Is_Subtype_Or_Eq_0_Predicate) return String is
   begin
      return "TypeDecl.is_subtype_or_eq";
   end Image;



         

         

         

         

         

   

   type Type_Decl_P_Imprecise_Common_Ancestor_List_0_Functor is new Solver_Ifc.Combiner_Type with
      null record;

   overriding function Combine (Self : Type_Decl_P_Imprecise_Common_Ancestor_List_0_Functor; Vals : Entity_Vars.Value_Array) return Internal_Entity with Inline;
   overriding function Image (Self : Type_Decl_P_Imprecise_Common_Ancestor_List_0_Functor) return String;


   

   function Create_Type_Decl_P_Imprecise_Common_Ancestor_List_0_Functor
   (
         N : Positive
   )
      return Type_Decl_P_Imprecise_Common_Ancestor_List_0_Functor is
   begin
      
      return Type_Decl_P_Imprecise_Common_Ancestor_List_0_Functor'(N => N, Cache_Set => False, Cache_Key => <>, Cache_Value => <>, Ref_Count => 1);
   end;

   overriding function Combine (Self : Type_Decl_P_Imprecise_Common_Ancestor_List_0_Functor; Vals : Entity_Vars.Value_Array) return Internal_Entity is
         pragma Unreferenced (Self);

         From : constant Internal_Entity := Vals (1);

         
         Args : Internal_Entity_Type_Decl_Array_Access :=
           Create_Internal_Entity_Type_Decl_Array (Vals'Length - 1);

      

      Ret : Internal_Entity_Type_Decl;
   begin
            if From.Node /= null
               and then From.Node.Kind not in
                 Lkt_Type_Decl
            then
               Raise_Property_Exception
                 (From.Node,
                  Property_Error'Identity,
                  "mismatching node type for comb_prop");
            end if;

      
      for I in 2 .. Vals'Last loop
            if Vals (I).Node /= null
               and then Vals (I).Node.Kind not in
                  Lkt_Type_Decl
            then
               Raise_Property_Exception
                 (Vals (I).Node,
                  Property_Error'Identity,
                  "mismatching node type for comb_prop");
            end if;
         Args.Items (I - 1) := (Vals (I).Node, Vals (I).Info);
      end loop;

      
      Ret := Type_Decl_P_Imprecise_Common_Ancestor_List (Node => From.Node, Other_Types => Args, E_Info => From.Info);

      Dec_Ref (Args);

      return (Node => Ret.Node, Info => Ret.Info);
   exception
      when Exc : Property_Error =>
         pragma Unreferenced (Exc);
         Dec_Ref (Args);
         raise;
   end Combine;

   -----------
   -- Image --
   -----------

   overriding function Image (Self : Type_Decl_P_Imprecise_Common_Ancestor_List_0_Functor) return String is
   begin
      return ("TypeDecl.imprecise_common_ancestor_list");
   end Image;



         

   

   

   

   type Type_Decl_P_Commutative_Matching_Type_0_Predicate is
   new Solver_Ifc.N_Predicate_Type
   with record
         Error_Location : Bare_Lkt_Node;
   end record;

   
      overriding function Call
        (Self : Type_Decl_P_Commutative_Matching_Type_0_Predicate;
            Entities : Entity_Vars.Value_Array
        ) return Boolean
   ;

   
      overriding procedure Failed
        (Self : Type_Decl_P_Commutative_Matching_Type_0_Predicate;
            Entities : Entity_Vars.Value_Array;
         Ctxs    : Solver_Ifc.Logic_Context_Array;
         Round   : Natural;
         Emitter : Solver_Ifc.Diagnostic_Emitter
        )
   ;

   overriding function Image (Self : Type_Decl_P_Commutative_Matching_Type_0_Predicate) return String;

   

   function Create_Type_Decl_P_Commutative_Matching_Type_0_Predicate
   (
         N : Positive;
         Error_Location : Bare_Lkt_Node
   )
      return Type_Decl_P_Commutative_Matching_Type_0_Predicate is
   begin
      
      return Type_Decl_P_Commutative_Matching_Type_0_Predicate'(N => N, Cache_Set => False, Cache_Key => <>, Cache_Value => <>, Ref_Count => 1, Error_Location => Error_Location);
   end;

   ----------
   -- Call --
   ----------

   
      overriding function Call
        (Self : Type_Decl_P_Commutative_Matching_Type_0_Predicate;
            Entities : Entity_Vars.Value_Array
        ) return Boolean
   
   is
         pragma Unreferenced (Self);

         Entity : Internal_Entity := Entities (1);


      
      Node : Bare_Type_Decl;

      Ret : Boolean;
   begin

      
            if Entity.Node /= null
               and then Entity.Node.Kind
                        not in Lkt_Type_Decl
            then
               Raise_Property_Exception
                 (Node, Property_Error'Identity, "mismatching node type");
            end if;
            if Entities (2).Node /= null
               and then Entities (2).Node.Kind
                        not in Lkt_Type_Decl
            then
               Raise_Property_Exception
                 (Node, Property_Error'Identity, "mismatching node type");
            end if;

      Node := Entity.Node;


      

      Ret := Type_Decl_P_Commutative_Matching_Type (Node, (Node => Entities (2).Node, Info => Entities (2).Info), E_Info => Entity.Info);


      return Ret;
   end Call;

   ------------
   -- Failed --
   ------------

   
      overriding procedure Failed
        (Self : Type_Decl_P_Commutative_Matching_Type_0_Predicate;
            Entities : Entity_Vars.Value_Array;
         Ctxs    : Solver_Ifc.Logic_Context_Array;
         Round   : Natural;
         Emitter : Solver_Ifc.Diagnostic_Emitter
        )
   
   is
      
      Args : Internal_Entity_Array_Access :=
         Create_Internal_Entity_Array (2);

      Contexts : Internal_Logic_Context_Array_Access :=
         Create_Internal_Logic_Context_Array (Ctxs'Length);

      Diag : constant Internal_Solver_Diagnostic :=
        (Message_Template => Create_String ("expected {}, got {}"),
         Args             => Args,
         Contexts         => Contexts,
         Location         => Self.Error_Location,
         Round            => Round);
   begin
      Args.Items (1) := Entities (1);
      Args.Items (2) := Entities (2);
      for I in Ctxs'Range loop
         Contexts.Items (I) := Ctxs (I).all;
      end loop;
      Emitter (Diag);
   end Failed;

   -----------
   -- Image --
   -----------

   overriding function Image (Self : Type_Decl_P_Commutative_Matching_Type_0_Predicate) return String is
   begin
      return "TypeDecl.commutative_matching_type";
   end Image;



   

   

   

   type Type_Decl_P_Commutative_Matching_Type_1_Predicate is
   new Solver_Ifc.N_Predicate_Type
   with record
         Field_0 : Boolean;
         Error_Location : Bare_Lkt_Node;
   end record;

   
      overriding function Call
        (Self : Type_Decl_P_Commutative_Matching_Type_1_Predicate;
            Entities : Entity_Vars.Value_Array
        ) return Boolean
   ;

   
      overriding procedure Failed
        (Self : Type_Decl_P_Commutative_Matching_Type_1_Predicate;
            Entities : Entity_Vars.Value_Array;
         Ctxs    : Solver_Ifc.Logic_Context_Array;
         Round   : Natural;
         Emitter : Solver_Ifc.Diagnostic_Emitter
        )
   ;

   overriding function Image (Self : Type_Decl_P_Commutative_Matching_Type_1_Predicate) return String;

   

   function Create_Type_Decl_P_Commutative_Matching_Type_1_Predicate
   (
         N : Positive;
         Allow_Common_Ancestor : Boolean;
         Error_Location : Bare_Lkt_Node
   )
      return Type_Decl_P_Commutative_Matching_Type_1_Predicate is
   begin
      
         
      return Type_Decl_P_Commutative_Matching_Type_1_Predicate'(N => N, Cache_Set => False, Cache_Key => <>, Cache_Value => <>, Ref_Count => 1, Error_Location => Error_Location, Field_0 => Allow_Common_Ancestor);
   end;

   ----------
   -- Call --
   ----------

   
      overriding function Call
        (Self : Type_Decl_P_Commutative_Matching_Type_1_Predicate;
            Entities : Entity_Vars.Value_Array
        ) return Boolean
   
   is

         Entity : Internal_Entity := Entities (1);


      
      Node : Bare_Type_Decl;

      Ret : Boolean;
   begin

      
            if Entity.Node /= null
               and then Entity.Node.Kind
                        not in Lkt_Type_Decl
            then
               Raise_Property_Exception
                 (Node, Property_Error'Identity, "mismatching node type");
            end if;
            if Entities (2).Node /= null
               and then Entities (2).Node.Kind
                        not in Lkt_Type_Decl
            then
               Raise_Property_Exception
                 (Node, Property_Error'Identity, "mismatching node type");
            end if;

      Node := Entity.Node;


      

      Ret := Type_Decl_P_Commutative_Matching_Type (Node, (Node => Entities (2).Node, Info => Entities (2).Info), Allow_Common_Ancestor => Self.Field_0, E_Info => Entity.Info);


      return Ret;
   end Call;

   ------------
   -- Failed --
   ------------

   
      overriding procedure Failed
        (Self : Type_Decl_P_Commutative_Matching_Type_1_Predicate;
            Entities : Entity_Vars.Value_Array;
         Ctxs    : Solver_Ifc.Logic_Context_Array;
         Round   : Natural;
         Emitter : Solver_Ifc.Diagnostic_Emitter
        )
   
   is
      
      Args : Internal_Entity_Array_Access :=
         Create_Internal_Entity_Array (2);

      Contexts : Internal_Logic_Context_Array_Access :=
         Create_Internal_Logic_Context_Array (Ctxs'Length);

      Diag : constant Internal_Solver_Diagnostic :=
        (Message_Template => Create_String ("expected {}, got {}"),
         Args             => Args,
         Contexts         => Contexts,
         Location         => Self.Error_Location,
         Round            => Round);
   begin
      Args.Items (1) := Entities (1);
      Args.Items (2) := Entities (2);
      for I in Ctxs'Range loop
         Contexts.Items (I) := Ctxs (I).all;
      end loop;
      Emitter (Diag);
   end Failed;

   -----------
   -- Image --
   -----------

   overriding function Image (Self : Type_Decl_P_Commutative_Matching_Type_1_Predicate) return String is
   begin
      return "TypeDecl.commutative_matching_type";
   end Image;



         

         

   

   

   

   type Type_Decl_P_Could_Determine_Type_0_Predicate is
   new Solver_Ifc.Predicate_Type
   with record
         Error_Location : Bare_Lkt_Node;
   end record;

   
      overriding function Call
        (Self : Type_Decl_P_Could_Determine_Type_0_Predicate;
            Entity : Internal_Entity
        ) return Boolean
   ;

   
      overriding procedure Failed
        (Self : Type_Decl_P_Could_Determine_Type_0_Predicate;
            Entity : Internal_Entity;
         Ctxs    : Solver_Ifc.Logic_Context_Array;
         Round   : Natural;
         Emitter : Solver_Ifc.Diagnostic_Emitter
        )
   ;

   overriding function Image (Self : Type_Decl_P_Could_Determine_Type_0_Predicate) return String;

   

   function Create_Type_Decl_P_Could_Determine_Type_0_Predicate
   (
         Error_Location : Bare_Lkt_Node
   )
      return Type_Decl_P_Could_Determine_Type_0_Predicate is
   begin
      
      return Type_Decl_P_Could_Determine_Type_0_Predicate'(Cache_Set => False, Cache_Key => <>, Cache_Value => <>, Ref_Count => 1, Error_Location => Error_Location);
   end;

   ----------
   -- Call --
   ----------

   
      overriding function Call
        (Self : Type_Decl_P_Could_Determine_Type_0_Predicate;
            Entity : Internal_Entity
        ) return Boolean
   
   is
         pragma Unreferenced (Self);



      
      Node : Bare_Type_Decl;

      Ret : Boolean;
   begin

      
            if Entity.Node /= null
               and then Entity.Node.Kind
                        not in Lkt_Type_Decl
            then
               Raise_Property_Exception
                 (Node, Property_Error'Identity, "mismatching node type");
            end if;

      Node := Entity.Node;


      

      Ret := Type_Decl_P_Could_Determine_Type (Node);


      return Ret;
   end Call;

   ------------
   -- Failed --
   ------------

   
      overriding procedure Failed
        (Self : Type_Decl_P_Could_Determine_Type_0_Predicate;
            Entity : Internal_Entity;
         Ctxs    : Solver_Ifc.Logic_Context_Array;
         Round   : Natural;
         Emitter : Solver_Ifc.Diagnostic_Emitter
        )
   
   is
      
      Args : Internal_Entity_Array_Access :=
         Create_Internal_Entity_Array (0);

      Contexts : Internal_Logic_Context_Array_Access :=
         Create_Internal_Logic_Context_Array (Ctxs'Length);

      Diag : constant Internal_Solver_Diagnostic :=
        (Message_Template => Create_String ("could not determine type"),
         Args             => Args,
         Contexts         => Contexts,
         Location         => Self.Error_Location,
         Round            => Round);
   begin
      for I in Ctxs'Range loop
         Contexts.Items (I) := Ctxs (I).all;
      end loop;
      Emitter (Diag);
   end Failed;

   -----------
   -- Image --
   -----------

   overriding function Image (Self : Type_Decl_P_Could_Determine_Type_0_Predicate) return String is
   begin
      return "TypeDecl.could_determine_type";
   end Image;



         

         

         

         

   

   

   

   type Type_Decl_P_Matching_Type_0_Predicate is
   new Solver_Ifc.N_Predicate_Type
   with record
         Error_Location : Bare_Lkt_Node;
   end record;

   
      overriding function Call
        (Self : Type_Decl_P_Matching_Type_0_Predicate;
            Entities : Entity_Vars.Value_Array
        ) return Boolean
   ;

   
      overriding procedure Failed
        (Self : Type_Decl_P_Matching_Type_0_Predicate;
            Entities : Entity_Vars.Value_Array;
         Ctxs    : Solver_Ifc.Logic_Context_Array;
         Round   : Natural;
         Emitter : Solver_Ifc.Diagnostic_Emitter
        )
   ;

   overriding function Image (Self : Type_Decl_P_Matching_Type_0_Predicate) return String;

   

   function Create_Type_Decl_P_Matching_Type_0_Predicate
   (
         N : Positive;
         Error_Location : Bare_Lkt_Node
   )
      return Type_Decl_P_Matching_Type_0_Predicate is
   begin
      
      return Type_Decl_P_Matching_Type_0_Predicate'(N => N, Cache_Set => False, Cache_Key => <>, Cache_Value => <>, Ref_Count => 1, Error_Location => Error_Location);
   end;

   ----------
   -- Call --
   ----------

   
      overriding function Call
        (Self : Type_Decl_P_Matching_Type_0_Predicate;
            Entities : Entity_Vars.Value_Array
        ) return Boolean
   
   is
         pragma Unreferenced (Self);

         Entity : Internal_Entity := Entities (1);


      
      Node : Bare_Type_Decl;

      Ret : Boolean;
   begin

      
            if Entity.Node /= null
               and then Entity.Node.Kind
                        not in Lkt_Type_Decl
            then
               Raise_Property_Exception
                 (Node, Property_Error'Identity, "mismatching node type");
            end if;
            if Entities (2).Node /= null
               and then Entities (2).Node.Kind
                        not in Lkt_Type_Decl
            then
               Raise_Property_Exception
                 (Node, Property_Error'Identity, "mismatching node type");
            end if;

      Node := Entity.Node;


      

      Ret := Type_Decl_P_Matching_Type (Node, (Node => Entities (2).Node, Info => Entities (2).Info), E_Info => Entity.Info);


      return Ret;
   end Call;

   ------------
   -- Failed --
   ------------

   
      overriding procedure Failed
        (Self : Type_Decl_P_Matching_Type_0_Predicate;
            Entities : Entity_Vars.Value_Array;
         Ctxs    : Solver_Ifc.Logic_Context_Array;
         Round   : Natural;
         Emitter : Solver_Ifc.Diagnostic_Emitter
        )
   
   is
      
      Args : Internal_Entity_Array_Access :=
         Create_Internal_Entity_Array (2);

      Contexts : Internal_Logic_Context_Array_Access :=
         Create_Internal_Logic_Context_Array (Ctxs'Length);

      Diag : constant Internal_Solver_Diagnostic :=
        (Message_Template => Create_String ("expected {}, got {}"),
         Args             => Args,
         Contexts         => Contexts,
         Location         => Self.Error_Location,
         Round            => Round);
   begin
      Args.Items (1) := Entities (1);
      Args.Items (2) := Entities (2);
      for I in Ctxs'Range loop
         Contexts.Items (I) := Ctxs (I).all;
      end loop;
      Emitter (Diag);
   end Failed;

   -----------
   -- Image --
   -----------

   overriding function Image (Self : Type_Decl_P_Matching_Type_0_Predicate) return String is
   begin
      return "TypeDecl.matching_type";
   end Image;



         

         

   

   

   

   type Type_Decl_P_Matching_Logic_Type_0_Predicate is
   new Solver_Ifc.N_Predicate_Type
   with record
         Error_Location : Bare_Lkt_Node;
   end record;

   
      overriding function Call
        (Self : Type_Decl_P_Matching_Logic_Type_0_Predicate;
            Entities : Entity_Vars.Value_Array
        ) return Boolean
   ;

   
      overriding procedure Failed
        (Self : Type_Decl_P_Matching_Logic_Type_0_Predicate;
            Entities : Entity_Vars.Value_Array;
         Ctxs    : Solver_Ifc.Logic_Context_Array;
         Round   : Natural;
         Emitter : Solver_Ifc.Diagnostic_Emitter
        )
   ;

   overriding function Image (Self : Type_Decl_P_Matching_Logic_Type_0_Predicate) return String;

   

   function Create_Type_Decl_P_Matching_Logic_Type_0_Predicate
   (
         N : Positive;
         Error_Location : Bare_Lkt_Node
   )
      return Type_Decl_P_Matching_Logic_Type_0_Predicate is
   begin
      
      return Type_Decl_P_Matching_Logic_Type_0_Predicate'(N => N, Cache_Set => False, Cache_Key => <>, Cache_Value => <>, Ref_Count => 1, Error_Location => Error_Location);
   end;

   ----------
   -- Call --
   ----------

   
      overriding function Call
        (Self : Type_Decl_P_Matching_Logic_Type_0_Predicate;
            Entities : Entity_Vars.Value_Array
        ) return Boolean
   
   is
         pragma Unreferenced (Self);

         Entity : Internal_Entity := Entities (1);


      
      Node : Bare_Type_Decl;

      Ret : Boolean;
   begin

      
            if Entity.Node /= null
               and then Entity.Node.Kind
                        not in Lkt_Type_Decl
            then
               Raise_Property_Exception
                 (Node, Property_Error'Identity, "mismatching node type");
            end if;
            if Entities (2).Node /= null
               and then Entities (2).Node.Kind
                        not in Lkt_Type_Decl
            then
               Raise_Property_Exception
                 (Node, Property_Error'Identity, "mismatching node type");
            end if;

      Node := Entity.Node;


      

      Ret := Type_Decl_P_Matching_Logic_Type (Node, (Node => Entities (2).Node, Info => Entities (2).Info), E_Info => Entity.Info);


      return Ret;
   end Call;

   ------------
   -- Failed --
   ------------

   
      overriding procedure Failed
        (Self : Type_Decl_P_Matching_Logic_Type_0_Predicate;
            Entities : Entity_Vars.Value_Array;
         Ctxs    : Solver_Ifc.Logic_Context_Array;
         Round   : Natural;
         Emitter : Solver_Ifc.Diagnostic_Emitter
        )
   
   is
      
      Args : Internal_Entity_Array_Access :=
         Create_Internal_Entity_Array (2);

      Contexts : Internal_Logic_Context_Array_Access :=
         Create_Internal_Logic_Context_Array (Ctxs'Length);

      Diag : constant Internal_Solver_Diagnostic :=
        (Message_Template => Create_String ("expected {}, got {}"),
         Args             => Args,
         Contexts         => Contexts,
         Location         => Self.Error_Location,
         Round            => Round);
   begin
      Args.Items (1) := Entities (1);
      Args.Items (2) := Entities (2);
      for I in Ctxs'Range loop
         Contexts.Items (I) := Ctxs (I).all;
      end loop;
      Emitter (Diag);
   end Failed;

   -----------
   -- Image --
   -----------

   overriding function Image (Self : Type_Decl_P_Matching_Logic_Type_0_Predicate) return String is
   begin
      return "TypeDecl.matching_logic_type";
   end Image;



         

         

   

   

   

   type Type_Decl_P_Is_Of_Array_Type_0_Predicate is
   new Solver_Ifc.Predicate_Type
   with record
         Error_Location : Bare_Lkt_Node;
   end record;

   
      overriding function Call
        (Self : Type_Decl_P_Is_Of_Array_Type_0_Predicate;
            Entity : Internal_Entity
        ) return Boolean
   ;

   
      overriding procedure Failed
        (Self : Type_Decl_P_Is_Of_Array_Type_0_Predicate;
            Entity : Internal_Entity;
         Ctxs    : Solver_Ifc.Logic_Context_Array;
         Round   : Natural;
         Emitter : Solver_Ifc.Diagnostic_Emitter
        )
   ;

   overriding function Image (Self : Type_Decl_P_Is_Of_Array_Type_0_Predicate) return String;

   

   function Create_Type_Decl_P_Is_Of_Array_Type_0_Predicate
   (
         Error_Location : Bare_Lkt_Node
   )
      return Type_Decl_P_Is_Of_Array_Type_0_Predicate is
   begin
      
      return Type_Decl_P_Is_Of_Array_Type_0_Predicate'(Cache_Set => False, Cache_Key => <>, Cache_Value => <>, Ref_Count => 1, Error_Location => Error_Location);
   end;

   ----------
   -- Call --
   ----------

   
      overriding function Call
        (Self : Type_Decl_P_Is_Of_Array_Type_0_Predicate;
            Entity : Internal_Entity
        ) return Boolean
   
   is
         pragma Unreferenced (Self);



      
      Node : Bare_Type_Decl;

      Ret : Boolean;
   begin

      
            if Entity.Node /= null
               and then Entity.Node.Kind
                        not in Lkt_Type_Decl
            then
               Raise_Property_Exception
                 (Node, Property_Error'Identity, "mismatching node type");
            end if;

      Node := Entity.Node;


      

      Ret := Type_Decl_P_Is_Of_Array_Type (Node, E_Info => Entity.Info);


      return Ret;
   end Call;

   ------------
   -- Failed --
   ------------

   
      overriding procedure Failed
        (Self : Type_Decl_P_Is_Of_Array_Type_0_Predicate;
            Entity : Internal_Entity;
         Ctxs    : Solver_Ifc.Logic_Context_Array;
         Round   : Natural;
         Emitter : Solver_Ifc.Diagnostic_Emitter
        )
   
   is
      
      Args : Internal_Entity_Array_Access :=
         Create_Internal_Entity_Array (1);

      Contexts : Internal_Logic_Context_Array_Access :=
         Create_Internal_Logic_Context_Array (Ctxs'Length);

      Diag : constant Internal_Solver_Diagnostic :=
        (Message_Template => Create_String ("{} is not an array"),
         Args             => Args,
         Contexts         => Contexts,
         Location         => Self.Error_Location,
         Round            => Round);
   begin
      Args.Items (1) := Entity;
      for I in Ctxs'Range loop
         Contexts.Items (I) := Ctxs (I).all;
      end loop;
      Emitter (Diag);
   end Failed;

   -----------
   -- Image --
   -----------

   overriding function Image (Self : Type_Decl_P_Is_Of_Array_Type_0_Predicate) return String is
   begin
      return "TypeDecl.is_of_array_type";
   end Image;



         

         

   

   

   

   type Type_Decl_P_Is_Callable_0_Predicate is
   new Solver_Ifc.Predicate_Type
   with record
         Error_Location : Bare_Lkt_Node;
   end record;

   
      overriding function Call
        (Self : Type_Decl_P_Is_Callable_0_Predicate;
            Entity : Internal_Entity
        ) return Boolean
   ;

   
      overriding procedure Failed
        (Self : Type_Decl_P_Is_Callable_0_Predicate;
            Entity : Internal_Entity;
         Ctxs    : Solver_Ifc.Logic_Context_Array;
         Round   : Natural;
         Emitter : Solver_Ifc.Diagnostic_Emitter
        )
   ;

   overriding function Image (Self : Type_Decl_P_Is_Callable_0_Predicate) return String;

   

   function Create_Type_Decl_P_Is_Callable_0_Predicate
   (
         Error_Location : Bare_Lkt_Node
   )
      return Type_Decl_P_Is_Callable_0_Predicate is
   begin
      
      return Type_Decl_P_Is_Callable_0_Predicate'(Cache_Set => False, Cache_Key => <>, Cache_Value => <>, Ref_Count => 1, Error_Location => Error_Location);
   end;

   ----------
   -- Call --
   ----------

   
      overriding function Call
        (Self : Type_Decl_P_Is_Callable_0_Predicate;
            Entity : Internal_Entity
        ) return Boolean
   
   is
         pragma Unreferenced (Self);



      
      Node : Bare_Type_Decl;

      Ret : Boolean;
   begin

      
            if Entity.Node /= null
               and then Entity.Node.Kind
                        not in Lkt_Type_Decl
            then
               Raise_Property_Exception
                 (Node, Property_Error'Identity, "mismatching node type");
            end if;

      Node := Entity.Node;


      

      Ret := Type_Decl_P_Is_Callable (Node, E_Info => Entity.Info);


      return Ret;
   end Call;

   ------------
   -- Failed --
   ------------

   
      overriding procedure Failed
        (Self : Type_Decl_P_Is_Callable_0_Predicate;
            Entity : Internal_Entity;
         Ctxs    : Solver_Ifc.Logic_Context_Array;
         Round   : Natural;
         Emitter : Solver_Ifc.Diagnostic_Emitter
        )
   
   is
      
      Args : Internal_Entity_Array_Access :=
         Create_Internal_Entity_Array (1);

      Contexts : Internal_Logic_Context_Array_Access :=
         Create_Internal_Logic_Context_Array (Ctxs'Length);

      Diag : constant Internal_Solver_Diagnostic :=
        (Message_Template => Create_String ("{} is not callable"),
         Args             => Args,
         Contexts         => Contexts,
         Location         => Self.Error_Location,
         Round            => Round);
   begin
      Args.Items (1) := Entity;
      for I in Ctxs'Range loop
         Contexts.Items (I) := Ctxs (I).all;
      end loop;
      Emitter (Diag);
   end Failed;

   -----------
   -- Image --
   -----------

   overriding function Image (Self : Type_Decl_P_Is_Callable_0_Predicate) return String is
   begin
      return "TypeDecl.is_callable";
   end Image;



         

         

         

   

   type Type_Decl_P_Match_Param_Get_Type_0_Functor is new Solver_Ifc.Converter_Type with
      record
            Current_Name : Internal_Entity_Param;
            In_Logic_Call : Boolean;
      end record;

   overriding function Convert (Self : Type_Decl_P_Match_Param_Get_Type_0_Functor; From : Internal_Entity) return Internal_Entity with Inline;
   overriding function Image (Self : Type_Decl_P_Match_Param_Get_Type_0_Functor) return String;


   

   function Create_Type_Decl_P_Match_Param_Get_Type_0_Functor
   (
         Current_Name : Internal_Entity_Param;
         In_Logic_Call : Boolean
   )
      return Type_Decl_P_Match_Param_Get_Type_0_Functor is
   begin
      
         
         
      return Type_Decl_P_Match_Param_Get_Type_0_Functor'(Cache_Set => False, Cache_Key => <>, Cache_Value => <>, Ref_Count => 1, Current_Name => Current_Name, In_Logic_Call => In_Logic_Call);
   end;

   overriding function Convert (Self : Type_Decl_P_Match_Param_Get_Type_0_Functor; From : Internal_Entity) return Internal_Entity is



      

      Ret : Internal_Entity_Decl;
   begin
            if From.Node /= null
               and then From.Node.Kind not in
                 Lkt_Type_Decl
            then
               Raise_Property_Exception
                 (From.Node,
                  Property_Error'Identity,
                  "mismatching node type for conv_prop");
            end if;


      
      Ret := Type_Decl_P_Match_Param_Get_Type (Node => From.Node, Current_Name => Self.Current_Name, In_Logic_Call => Self.In_Logic_Call, E_Info => From.Info);


      return (Node => Ret.Node, Info => Ret.Info);
   end Convert;

   -----------
   -- Image --
   -----------

   overriding function Image (Self : Type_Decl_P_Match_Param_Get_Type_0_Functor) return String is
   begin
      return ("TypeDecl.match_param_get_type");
   end Image;



         

         

   

   type Type_Decl_P_Match_Param_Get_Decl_0_Functor is new Solver_Ifc.Converter_Type with
      record
            Current_Name : Internal_Entity_Param;
            In_Logic_Call : Boolean;
      end record;

   overriding function Convert (Self : Type_Decl_P_Match_Param_Get_Decl_0_Functor; From : Internal_Entity) return Internal_Entity with Inline;
   overriding function Image (Self : Type_Decl_P_Match_Param_Get_Decl_0_Functor) return String;


   

   function Create_Type_Decl_P_Match_Param_Get_Decl_0_Functor
   (
         Current_Name : Internal_Entity_Param;
         In_Logic_Call : Boolean
   )
      return Type_Decl_P_Match_Param_Get_Decl_0_Functor is
   begin
      
         
         
      return Type_Decl_P_Match_Param_Get_Decl_0_Functor'(Cache_Set => False, Cache_Key => <>, Cache_Value => <>, Ref_Count => 1, Current_Name => Current_Name, In_Logic_Call => In_Logic_Call);
   end;

   overriding function Convert (Self : Type_Decl_P_Match_Param_Get_Decl_0_Functor; From : Internal_Entity) return Internal_Entity is



      

      Ret : Internal_Entity_Decl;
   begin
            if From.Node /= null
               and then From.Node.Kind not in
                 Lkt_Type_Decl
            then
               Raise_Property_Exception
                 (From.Node,
                  Property_Error'Identity,
                  "mismatching node type for conv_prop");
            end if;


      
      Ret := Type_Decl_P_Match_Param_Get_Decl (Node => From.Node, Current_Name => Self.Current_Name, In_Logic_Call => Self.In_Logic_Call, E_Info => From.Info);


      return (Node => Ret.Node, Info => Ret.Info);
   end Convert;

   -----------
   -- Image --
   -----------

   overriding function Image (Self : Type_Decl_P_Match_Param_Get_Decl_0_Functor) return String is
   begin
      return ("TypeDecl.match_param_get_decl");
   end Image;



         

         

         

   

   

   

   type Type_Decl_P_Is_Valid_Call_0_Predicate is
   new Solver_Ifc.Predicate_Type
   with record
         Field_0 : Internal_Entity_Param_List;
         Field_1 : Boolean;
         Error_Location : Bare_Lkt_Node;
   end record;

   
      overriding function Call
        (Self : Type_Decl_P_Is_Valid_Call_0_Predicate;
            Entity : Internal_Entity
        ) return Boolean
   ;

   
      overriding procedure Failed
        (Self : Type_Decl_P_Is_Valid_Call_0_Predicate;
            Entity : Internal_Entity;
         Ctxs    : Solver_Ifc.Logic_Context_Array;
         Round   : Natural;
         Emitter : Solver_Ifc.Diagnostic_Emitter
        )
   ;

   overriding function Image (Self : Type_Decl_P_Is_Valid_Call_0_Predicate) return String;

   

   function Create_Type_Decl_P_Is_Valid_Call_0_Predicate
   (
         Args : Internal_Entity_Param_List;
         In_Logic_Call : Boolean;
         Error_Location : Bare_Lkt_Node
   )
      return Type_Decl_P_Is_Valid_Call_0_Predicate is
   begin
      
         
         
      return Type_Decl_P_Is_Valid_Call_0_Predicate'(Cache_Set => False, Cache_Key => <>, Cache_Value => <>, Ref_Count => 1, Error_Location => Error_Location, Field_0 => Args, Field_1 => In_Logic_Call);
   end;

   ----------
   -- Call --
   ----------

   
      overriding function Call
        (Self : Type_Decl_P_Is_Valid_Call_0_Predicate;
            Entity : Internal_Entity
        ) return Boolean
   
   is



      
      Node : Bare_Type_Decl;

      Ret : Boolean;
   begin

      
            if Entity.Node /= null
               and then Entity.Node.Kind
                        not in Lkt_Type_Decl
            then
               Raise_Property_Exception
                 (Node, Property_Error'Identity, "mismatching node type");
            end if;

      Node := Entity.Node;


      

      Ret := Type_Decl_P_Is_Valid_Call (Node, Args => Self.Field_0, In_Logic_Call => Self.Field_1, E_Info => Entity.Info);


      return Ret;
   end Call;

   ------------
   -- Failed --
   ------------

   
      overriding procedure Failed
        (Self : Type_Decl_P_Is_Valid_Call_0_Predicate;
            Entity : Internal_Entity;
         Ctxs    : Solver_Ifc.Logic_Context_Array;
         Round   : Natural;
         Emitter : Solver_Ifc.Diagnostic_Emitter
        )
   
   is
      
      Args : Internal_Entity_Array_Access :=
         Create_Internal_Entity_Array (1);

      Contexts : Internal_Logic_Context_Array_Access :=
         Create_Internal_Logic_Context_Array (Ctxs'Length);

      Diag : constant Internal_Solver_Diagnostic :=
        (Message_Template => Create_String ("invalid call, expected {}"),
         Args             => Args,
         Contexts         => Contexts,
         Location         => Self.Error_Location,
         Round            => Round);
   begin
      Args.Items (1) := Entity;
      for I in Ctxs'Range loop
         Contexts.Items (I) := Ctxs (I).all;
      end loop;
      Emitter (Diag);
   end Failed;

   -----------
   -- Image --
   -----------

   overriding function Image (Self : Type_Decl_P_Is_Valid_Call_0_Predicate) return String is
   begin
      return "TypeDecl.is_valid_call";
   end Image;



         

         

         

   

   type Type_Decl_P_Get_Return_Type_0_Functor is new Solver_Ifc.Converter_Type with
      null record;

   overriding function Convert (Self : Type_Decl_P_Get_Return_Type_0_Functor; From : Internal_Entity) return Internal_Entity with Inline;
   overriding function Image (Self : Type_Decl_P_Get_Return_Type_0_Functor) return String;


   

   function Create_Type_Decl_P_Get_Return_Type_0_Functor
      return Type_Decl_P_Get_Return_Type_0_Functor is
   begin
      
      return Type_Decl_P_Get_Return_Type_0_Functor'(Cache_Set => False, Cache_Key => <>, Cache_Value => <>, Ref_Count => 1);
   end;

   overriding function Convert (Self : Type_Decl_P_Get_Return_Type_0_Functor; From : Internal_Entity) return Internal_Entity is
         pragma Unreferenced (Self);



      

      Ret : Internal_Entity_Type_Decl;
   begin
            if From.Node /= null
               and then From.Node.Kind not in
                 Lkt_Type_Decl
            then
               Raise_Property_Exception
                 (From.Node,
                  Property_Error'Identity,
                  "mismatching node type for conv_prop");
            end if;


      
      Ret := Type_Decl_P_Get_Return_Type (Node => From.Node, E_Info => From.Info);


      return (Node => Ret.Node, Info => Ret.Info);
   end Convert;

   -----------
   -- Image --
   -----------

   overriding function Image (Self : Type_Decl_P_Get_Return_Type_0_Functor) return String is
   begin
      return ("TypeDecl.get_return_type");
   end Image;



         

         

   

   type Type_Decl_P_Create_Function_Type_0_Functor is new Solver_Ifc.Combiner_Type with
      null record;

   overriding function Combine (Self : Type_Decl_P_Create_Function_Type_0_Functor; Vals : Entity_Vars.Value_Array) return Internal_Entity with Inline;
   overriding function Image (Self : Type_Decl_P_Create_Function_Type_0_Functor) return String;


   

   function Create_Type_Decl_P_Create_Function_Type_0_Functor
   (
         N : Positive
   )
      return Type_Decl_P_Create_Function_Type_0_Functor is
   begin
      
      return Type_Decl_P_Create_Function_Type_0_Functor'(N => N, Cache_Set => False, Cache_Key => <>, Cache_Value => <>, Ref_Count => 1);
   end;

   overriding function Combine (Self : Type_Decl_P_Create_Function_Type_0_Functor; Vals : Entity_Vars.Value_Array) return Internal_Entity is
         pragma Unreferenced (Self);

         From : constant Internal_Entity := Vals (1);

         
         Args : Internal_Entity_Type_Decl_Array_Access :=
           Create_Internal_Entity_Type_Decl_Array (Vals'Length - 1);

      

      Ret : Internal_Entity_Type_Decl;
   begin
            if From.Node /= null
               and then From.Node.Kind not in
                 Lkt_Type_Decl
            then
               Raise_Property_Exception
                 (From.Node,
                  Property_Error'Identity,
                  "mismatching node type for comb_prop");
            end if;

      
      for I in 2 .. Vals'Last loop
            if Vals (I).Node /= null
               and then Vals (I).Node.Kind not in
                  Lkt_Type_Decl
            then
               Raise_Property_Exception
                 (Vals (I).Node,
                  Property_Error'Identity,
                  "mismatching node type for comb_prop");
            end if;
         Args.Items (I - 1) := (Vals (I).Node, Vals (I).Info);
      end loop;

      
      Ret := Type_Decl_P_Create_Function_Type (Node => From.Node, Args => Args, E_Info => From.Info);

      Dec_Ref (Args);

      return (Node => Ret.Node, Info => Ret.Info);
   exception
      when Exc : Property_Error =>
         pragma Unreferenced (Exc);
         Dec_Ref (Args);
         raise;
   end Combine;

   -----------
   -- Image --
   -----------

   overriding function Image (Self : Type_Decl_P_Create_Function_Type_0_Functor) return String is
   begin
      return ("TypeDecl.create_function_type");
   end Image;



         

         

   

   type Type_Decl_P_Make_Array_Type_0_Functor is new Solver_Ifc.Converter_Type with
      null record;

   overriding function Convert (Self : Type_Decl_P_Make_Array_Type_0_Functor; From : Internal_Entity) return Internal_Entity with Inline;
   overriding function Image (Self : Type_Decl_P_Make_Array_Type_0_Functor) return String;


   

   function Create_Type_Decl_P_Make_Array_Type_0_Functor
      return Type_Decl_P_Make_Array_Type_0_Functor is
   begin
      
      return Type_Decl_P_Make_Array_Type_0_Functor'(Cache_Set => False, Cache_Key => <>, Cache_Value => <>, Ref_Count => 1);
   end;

   overriding function Convert (Self : Type_Decl_P_Make_Array_Type_0_Functor; From : Internal_Entity) return Internal_Entity is
         pragma Unreferenced (Self);



      

      Ret : Internal_Entity_Type_Decl;
   begin
            if From.Node /= null
               and then From.Node.Kind not in
                 Lkt_Type_Decl
            then
               Raise_Property_Exception
                 (From.Node,
                  Property_Error'Identity,
                  "mismatching node type for conv_prop");
            end if;


      
      Ret := Type_Decl_P_Make_Array_Type (Node => From.Node, E_Info => From.Info);


      return (Node => Ret.Node, Info => Ret.Info);
   end Convert;

   -----------
   -- Image --
   -----------

   overriding function Image (Self : Type_Decl_P_Make_Array_Type_0_Functor) return String is
   begin
      return ("TypeDecl.make_array_type");
   end Image;



         

         

   

   type Type_Decl_P_Get_Array_Content_Type_0_Functor is new Solver_Ifc.Converter_Type with
      null record;

   overriding function Convert (Self : Type_Decl_P_Get_Array_Content_Type_0_Functor; From : Internal_Entity) return Internal_Entity with Inline;
   overriding function Image (Self : Type_Decl_P_Get_Array_Content_Type_0_Functor) return String;


   

   function Create_Type_Decl_P_Get_Array_Content_Type_0_Functor
      return Type_Decl_P_Get_Array_Content_Type_0_Functor is
   begin
      
      return Type_Decl_P_Get_Array_Content_Type_0_Functor'(Cache_Set => False, Cache_Key => <>, Cache_Value => <>, Ref_Count => 1);
   end;

   overriding function Convert (Self : Type_Decl_P_Get_Array_Content_Type_0_Functor; From : Internal_Entity) return Internal_Entity is
         pragma Unreferenced (Self);



      

      Ret : Internal_Entity_Type_Decl;
   begin
            if From.Node /= null
               and then From.Node.Kind not in
                 Lkt_Type_Decl
            then
               Raise_Property_Exception
                 (From.Node,
                  Property_Error'Identity,
                  "mismatching node type for conv_prop");
            end if;


      
      Ret := Type_Decl_P_Get_Array_Content_Type (Node => From.Node, E_Info => From.Info);


      return (Node => Ret.Node, Info => Ret.Info);
   end Convert;

   -----------
   -- Image --
   -----------

   overriding function Image (Self : Type_Decl_P_Get_Array_Content_Type_0_Functor) return String is
   begin
      return ("TypeDecl.get_array_content_type");
   end Image;



         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

   

   

   

   type Function_Type_P_Returns_Entity_0_Predicate is
   new Solver_Ifc.Predicate_Type
   with record
         Error_Location : Bare_Lkt_Node;
   end record;

   
      overriding function Call
        (Self : Function_Type_P_Returns_Entity_0_Predicate;
            Entity : Internal_Entity
        ) return Boolean
   ;

   
      overriding procedure Failed
        (Self : Function_Type_P_Returns_Entity_0_Predicate;
            Entity : Internal_Entity;
         Ctxs    : Solver_Ifc.Logic_Context_Array;
         Round   : Natural;
         Emitter : Solver_Ifc.Diagnostic_Emitter
        )
   ;

   overriding function Image (Self : Function_Type_P_Returns_Entity_0_Predicate) return String;

   

   function Create_Function_Type_P_Returns_Entity_0_Predicate
   (
         Error_Location : Bare_Lkt_Node
   )
      return Function_Type_P_Returns_Entity_0_Predicate is
   begin
      
      return Function_Type_P_Returns_Entity_0_Predicate'(Cache_Set => False, Cache_Key => <>, Cache_Value => <>, Ref_Count => 1, Error_Location => Error_Location);
   end;

   ----------
   -- Call --
   ----------

   
      overriding function Call
        (Self : Function_Type_P_Returns_Entity_0_Predicate;
            Entity : Internal_Entity
        ) return Boolean
   
   is
         pragma Unreferenced (Self);



      
      Node : Bare_Function_Type;

      Ret : Boolean;
   begin

      
            if Entity.Node /= null
               and then Entity.Node.Kind
                        not in Lkt_Function_Type_Range
            then
               Raise_Property_Exception
                 (Node, Property_Error'Identity, "mismatching node type");
            end if;

      Node := Entity.Node;


      

      Ret := Function_Type_P_Returns_Entity (Node, E_Info => Entity.Info);


      return Ret;
   end Call;

   ------------
   -- Failed --
   ------------

   
      overriding procedure Failed
        (Self : Function_Type_P_Returns_Entity_0_Predicate;
            Entity : Internal_Entity;
         Ctxs    : Solver_Ifc.Logic_Context_Array;
         Round   : Natural;
         Emitter : Solver_Ifc.Diagnostic_Emitter
        )
   
   is
      
      Args : Internal_Entity_Array_Access :=
         Create_Internal_Entity_Array (0);

      Contexts : Internal_Logic_Context_Array_Access :=
         Create_Internal_Logic_Context_Array (Ctxs'Length);

      Diag : constant Internal_Solver_Diagnostic :=
        (Message_Template => Create_String ("Propagate functions must return entities"),
         Args             => Args,
         Contexts         => Contexts,
         Location         => Self.Error_Location,
         Round            => Round);
   begin
      for I in Ctxs'Range loop
         Contexts.Items (I) := Ctxs (I).all;
      end loop;
      Emitter (Diag);
   end Failed;

   -----------
   -- Image --
   -----------

   overriding function Image (Self : Function_Type_P_Returns_Entity_0_Predicate) return String is
   begin
      return "FunctionType.returns_entity";
   end Image;



         

         

   

   

   

   type Function_Type_P_Returns_Bool_0_Predicate is
   new Solver_Ifc.Predicate_Type
   with record
         Error_Location : Bare_Lkt_Node;
   end record;

   
      overriding function Call
        (Self : Function_Type_P_Returns_Bool_0_Predicate;
            Entity : Internal_Entity
        ) return Boolean
   ;

   
      overriding procedure Failed
        (Self : Function_Type_P_Returns_Bool_0_Predicate;
            Entity : Internal_Entity;
         Ctxs    : Solver_Ifc.Logic_Context_Array;
         Round   : Natural;
         Emitter : Solver_Ifc.Diagnostic_Emitter
        )
   ;

   overriding function Image (Self : Function_Type_P_Returns_Bool_0_Predicate) return String;

   

   function Create_Function_Type_P_Returns_Bool_0_Predicate
   (
         Error_Location : Bare_Lkt_Node
   )
      return Function_Type_P_Returns_Bool_0_Predicate is
   begin
      
      return Function_Type_P_Returns_Bool_0_Predicate'(Cache_Set => False, Cache_Key => <>, Cache_Value => <>, Ref_Count => 1, Error_Location => Error_Location);
   end;

   ----------
   -- Call --
   ----------

   
      overriding function Call
        (Self : Function_Type_P_Returns_Bool_0_Predicate;
            Entity : Internal_Entity
        ) return Boolean
   
   is
         pragma Unreferenced (Self);



      
      Node : Bare_Function_Type;

      Ret : Boolean;
   begin

      
            if Entity.Node /= null
               and then Entity.Node.Kind
                        not in Lkt_Function_Type_Range
            then
               Raise_Property_Exception
                 (Node, Property_Error'Identity, "mismatching node type");
            end if;

      Node := Entity.Node;


      

      Ret := Function_Type_P_Returns_Bool (Node, E_Info => Entity.Info);


      return Ret;
   end Call;

   ------------
   -- Failed --
   ------------

   
      overriding procedure Failed
        (Self : Function_Type_P_Returns_Bool_0_Predicate;
            Entity : Internal_Entity;
         Ctxs    : Solver_Ifc.Logic_Context_Array;
         Round   : Natural;
         Emitter : Solver_Ifc.Diagnostic_Emitter
        )
   
   is
      
      Args : Internal_Entity_Array_Access :=
         Create_Internal_Entity_Array (0);

      Contexts : Internal_Logic_Context_Array_Access :=
         Create_Internal_Logic_Context_Array (Ctxs'Length);

      Diag : constant Internal_Solver_Diagnostic :=
        (Message_Template => Create_String ("Predicate functions must return booleans"),
         Args             => Args,
         Contexts         => Contexts,
         Location         => Self.Error_Location,
         Round            => Round);
   begin
      for I in Ctxs'Range loop
         Contexts.Items (I) := Ctxs (I).all;
      end loop;
      Emitter (Diag);
   end Failed;

   -----------
   -- Image --
   -----------

   overriding function Image (Self : Function_Type_P_Returns_Bool_0_Predicate) return String is
   begin
      return "FunctionType.returns_bool";
   end Image;



         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         



      

   --
   --  Primitives for Bare_Lkt_Node
   --

   





   







--# property-start LktNode.root_get nodes.lkt:52
pragma Warnings (Off, "is not referenced");
 function Lkt_Node_P_Root_Get
  
  (Node : Bare_Lkt_Node
      ; Entity_Name : Symbol_Type
  )

   return Internal_Entity_Decl
is
   Self : Bare_Lkt_Node  := Bare_Lkt_Node (Node);
      --# bind self Self

   

   --# bind entity_name Entity_Name

   Property_Result : Internal_Entity_Decl;

      
            procedure Finalizer_Scope_6 with Inline_Always;

      Fld : Internal_Unit;
Fld_1 : Bare_Lkt_Node;
Fld_2 : Lexical_Env := Empty_Env;
Env_Get_Result : Internal_Entity;
Cast_Result : Internal_Entity_Decl;

            procedure Finalizer_Scope_6 is
            begin
                     Dec_Ref (Fld_2);
            end Finalizer_Scope_6;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 5 '<Cast to Decl at nodes.lkt:53:9>' Cast_Result nodes.lkt:53





--# expr-start 4 '<EnvGet at nodes.lkt:53:9>' Env_Get_Result nodes.lkt:53
--# expr-start 3 '<FieldAccess for node_env at nodes.lkt:53:9>' Fld_2 nodes.lkt:53



--# expr-start 2 '<FieldAccess for root at nodes.lkt:53:9>' Fld_1 nodes.lkt:53



--# expr-start 1 '<FieldAccess for unit at nodes.lkt:53:9>' Fld nodes.lkt:53







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Liblktlang.Implementation.Unit (Node => Self);
--# expr-done 1



   if Fld = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_1 := Fld.Ast_Root;
--# expr-done 2



   if Fld_1 = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_2 := Liblktlang.Implementation.Node_Env (Node => Fld_1);
--# expr-done 3



Env_Get_Result := AST_Envs.Get_First (Self => Fld_2, Key => Thin (Entity_Name), Lookup_Kind => To_Lookup_Kind_Type (Recursive), Categories => (Nocat => True)); 
--# expr-done 4



   if Env_Get_Result.Node = null
      or else Env_Get_Result.Node.Kind in Lkt_Decl
   then
      
      Cast_Result := Create_Internal_Entity_Decl
        (Node => Env_Get_Result.Node,
         Info => Env_Get_Result.Info);

   else
         Raise_Property_Exception
           (Self, Property_Error'Identity, "invalid object cast");
   end if;


--# expr-done 5

         Property_Result := Cast_Result;
         
   --# end
      Finalizer_Scope_6;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_6;




            raise;
      end;



   return Property_Result;
end Lkt_Node_P_Root_Get;
--# end

   







--# property-start LktNode.get_builtin_type nodes.lkt:56
pragma Warnings (Off, "is not referenced");
 function Lkt_Node_P_Get_Builtin_Type
  
  (Node : Bare_Lkt_Node
      ; Entity_Name : Symbol_Type
  )

   return Internal_Entity_Named_Type_Decl
is
   Self : Bare_Lkt_Node  := Bare_Lkt_Node (Node);
      --# bind self Self

   

   --# bind entity_name Entity_Name

   Property_Result : Internal_Entity_Named_Type_Decl;

      

      Fld : Internal_Entity_Decl;
Cast_Result : Internal_Entity_Named_Type_Decl;


      
      Mmz_Handle : Memoization_Handle;
      Mmz_Val    : Mmz_Value;

      Mmz_Stored : Boolean;
      --  Whether the memoization couple was actually stored. Used to determine
      --  whether to inc-ref the memoized value.

      function Create_Mmz_Key return Mmz_Key;
      --  Create a memoization key for this property call and return it

      --------------------
      -- Create_Mmz_Key --
      --------------------

      function Create_Mmz_Key return Mmz_Key is
      begin
         return Mmz_K : Mmz_Key :=
           (Property => Mmz_Bare_Lkt_Node_Lkt_Node_P_Get_Builtin_Type,
            Items    => new Mmz_Key_Array (1 ..  2))
         do
            Mmz_K.Items (1) := (Kind => Mmz_Bare_Lkt_Node,
                                As_Bare_Lkt_Node => Self);
               Mmz_K.Items (2) := (Kind => Mmz_Symbol_Type,
                                      As_Symbol_Type => Entity_Name);
         end return;
      end Create_Mmz_Key;

begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;

      if Self /= null then

         if not Self.Unit.Context.In_Populate_Lexical_Env then

            if Find_Memoized_Value
              (Self.Unit, Mmz_Handle, Mmz_Val, Create_Mmz_Key'Access)
            then
               --# memoization-lookup

               if Mmz_Val.Kind = Mmz_Evaluating then
                  --# memoization-return
                  Raise_Property_Exception
                    (Self,
                     Property_Error'Identity,
                     "Infinite recursion detected");

               elsif Mmz_Val.Kind = Mmz_Error then
                  --# memoization-return
                  Reraise_Memoized_Error (Mmz_Val);

               else
                  Property_Result := Mmz_Val.As_Internal_Entity_Named_Type_Decl;

                  --# memoization-return
                  return Property_Result;
               end if;
               --# end
            end if;

         end if;
      end if;

      begin
         
   --# scope-start

         --# expr-start 7 '<Cast to NamedTypeDecl at nodes.lkt:57:9>' Cast_Result nodes.lkt:57





--# expr-start 6 '<FieldAccess for root_get at nodes.lkt:57:9>' Fld nodes.lkt:57







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;



--# property-call-start LktNode.root_get
Fld := Liblktlang.Implementation.Lkt_Node_P_Root_Get (Node => Self, Entity_Name => Entity_Name);
--# end
--# expr-done 6



   if Fld.Node = null
      or else Fld.Node.Kind in Lkt_Named_Type_Decl
   then
      
      Cast_Result := Create_Internal_Entity_Named_Type_Decl
        (Node => Fld.Node,
         Info => Fld.Info);

   else
         Raise_Property_Exception
           (Self, Property_Error'Identity, "invalid object cast");
   end if;


--# expr-done 7

         Property_Result := Cast_Result;
         
   --# end


      exception
         when Exc : Property_Error =>


               if Self /= null then
                     if not Self.Unit.Context.In_Populate_Lexical_Env then
                        Add_Memoized_Error
                          (Self.Unit, Mmz_Handle, Exc, Mmz_Stored);
                     end if;
               end if;


            raise;
      end;

      if Self /= null then
         if not Self.Unit.Context.In_Populate_Lexical_Env then

            Mmz_Val := (Kind => Mmz_Internal_Entity_Named_Type_Decl,
                        As_Internal_Entity_Named_Type_Decl => Property_Result);
            Add_Memoized_Value (Self.Unit, Mmz_Handle, Mmz_Val, Mmz_Stored);

         end if;
      end if;



   return Property_Result;
end Lkt_Node_P_Get_Builtin_Type;
--# end

   







--# property-start LktNode.get_builtin_gen_decl nodes.lkt:59
pragma Warnings (Off, "is not referenced");
 function Lkt_Node_P_Get_Builtin_Gen_Decl
  
  (Node : Bare_Lkt_Node
      ; Entity_Name : Symbol_Type
  )

   return Internal_Entity_Generic_Decl
is
   Self : Bare_Lkt_Node  := Bare_Lkt_Node (Node);
      --# bind self Self

   

   --# bind entity_name Entity_Name

   Property_Result : Internal_Entity_Generic_Decl;

      

      Fld : Internal_Entity_Decl;
Cast_Result : Internal_Entity_Generic_Decl;



begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 9 '<Cast to GenericDecl at nodes.lkt:60:9>' Cast_Result nodes.lkt:60





--# expr-start 8 '<FieldAccess for root_get at nodes.lkt:60:9>' Fld nodes.lkt:60







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;



--# property-call-start LktNode.root_get
Fld := Liblktlang.Implementation.Lkt_Node_P_Root_Get (Node => Self, Entity_Name => Entity_Name);
--# end
--# expr-done 8



   if Fld.Node = null
      or else Fld.Node.Kind in Lkt_Generic_Decl_Range
   then
      
      Cast_Result := Create_Internal_Entity_Generic_Decl
        (Node => Fld.Node,
         Info => Fld.Info);

   else
         Raise_Property_Exception
           (Self, Property_Error'Identity, "invalid object cast");
   end if;


--# expr-done 9

         Property_Result := Cast_Result;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Lkt_Node_P_Get_Builtin_Gen_Decl;
--# end

   







--# property-start LktNode.basic_trait_gen nodes.lkt:64
pragma Warnings (Off, "is not referenced");
 function Lkt_Node_P_Basic_Trait_Gen
  
  (Node : Bare_Lkt_Node
  )

   return Internal_Entity_Generic_Decl
is
   Self : Bare_Lkt_Node  := Bare_Lkt_Node (Node);
      --# bind self Self

   


   Property_Result : Internal_Entity_Generic_Decl;

      

      Sym : Symbol_Type;
Fld : Internal_Entity_Generic_Decl;



begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

            Populate_Lexical_Env_For_Unit (Self);
      end if;


      begin
         
   --# scope-start

         --# expr-start 11 '<FieldAccess for get_builtin_gen_decl at nodes.lkt:65:9>' Fld nodes.lkt:65







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# expr-start 10 '<Symbol BasicTrait at nodes.lkt:65:35>' Sym nodes.lkt:65
Sym := Precomputed_Symbol (Precomputed_Symbol_Table (Self.Unit.Context.Symbols), Precomputed_Sym_Basictrait); 
--# expr-done 10
--# property-call-start LktNode.get_builtin_gen_decl
Fld := Liblktlang.Implementation.Lkt_Node_P_Get_Builtin_Gen_Decl (Node => Self, Entity_Name => Sym);
--# end
--# expr-done 11

         Property_Result := Fld;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Lkt_Node_P_Basic_Trait_Gen;
--# end

   







--# property-start LktNode.basic_trait nodes.lkt:69
pragma Warnings (Off, "is not referenced");
 function Lkt_Node_P_Basic_Trait
  
  (Node : Bare_Lkt_Node
  )

   return Internal_Entity_Trait_Decl
is
   Self : Bare_Lkt_Node  := Bare_Lkt_Node (Node);
      --# bind self Self

   


   Property_Result : Internal_Entity_Trait_Decl;

      

      Fld : Internal_Entity_Generic_Decl;
Fld_1 : Internal_Entity_Decl;
Cast_Result : Internal_Entity_Trait_Decl;



begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

            Populate_Lexical_Env_For_Unit (Self);
      end if;


      begin
         
   --# scope-start

         --# expr-start 14 '<Cast to TraitDecl at nodes.lkt:70:9>' Cast_Result nodes.lkt:70





--# expr-start 13 '<FieldAccess for decl at nodes.lkt:70:9>' Fld_1 nodes.lkt:70



--# expr-start 12 '<FieldAccess for basic_trait_gen at nodes.lkt:70:9>' Fld nodes.lkt:70







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start LktNode.basic_trait_gen
Fld := Liblktlang.Implementation.Lkt_Node_P_Basic_Trait_Gen (Node => Self);
--# end
--# expr-done 12



   if Fld.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_1 := Create_Internal_Entity_Decl (Node => Fld.Node.Generic_Decl_F_Decl, Info => Fld.Info);
--# expr-done 13



   if Fld_1.Node = null
      or else Fld_1.Node.Kind in Lkt_Trait_Decl_Range
   then
      
      Cast_Result := Create_Internal_Entity_Trait_Decl
        (Node => Fld_1.Node,
         Info => Fld_1.Info);

   else
         Cast_Result := No_Entity_Trait_Decl;
   end if;


--# expr-done 14

         Property_Result := Cast_Result;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Lkt_Node_P_Basic_Trait;
--# end

   







--# property-start LktNode.node_gen_trait nodes.lkt:74
pragma Warnings (Off, "is not referenced");
 function Lkt_Node_P_Node_Gen_Trait
  
  (Node : Bare_Lkt_Node
  )

   return Internal_Entity_Generic_Decl
is
   Self : Bare_Lkt_Node  := Bare_Lkt_Node (Node);
      --# bind self Self

   


   Property_Result : Internal_Entity_Generic_Decl;

      

      Sym : Symbol_Type;
Fld : Internal_Entity_Generic_Decl;



begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

            Populate_Lexical_Env_For_Unit (Self);
      end if;


      begin
         
   --# scope-start

         --# expr-start 16 '<FieldAccess for get_builtin_gen_decl at nodes.lkt:75:9>' Fld nodes.lkt:75







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# expr-start 15 '<Symbol Node at nodes.lkt:75:35>' Sym nodes.lkt:75
Sym := Precomputed_Symbol (Precomputed_Symbol_Table (Self.Unit.Context.Symbols), Precomputed_Sym_Node); 
--# expr-done 15
--# property-call-start LktNode.get_builtin_gen_decl
Fld := Liblktlang.Implementation.Lkt_Node_P_Get_Builtin_Gen_Decl (Node => Self, Entity_Name => Sym);
--# end
--# expr-done 16

         Property_Result := Fld;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Lkt_Node_P_Node_Gen_Trait;
--# end

   







--# property-start LktNode.node_trait nodes.lkt:79
pragma Warnings (Off, "is not referenced");
 function Lkt_Node_P_Node_Trait
  
  (Node : Bare_Lkt_Node
  )

   return Internal_Entity_Trait_Decl
is
   Self : Bare_Lkt_Node  := Bare_Lkt_Node (Node);
      --# bind self Self

   


   Property_Result : Internal_Entity_Trait_Decl;

      

      Fld : Internal_Entity_Generic_Decl;
Fld_1 : Internal_Entity_Decl;
Cast_Result : Internal_Entity_Trait_Decl;



begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

            Populate_Lexical_Env_For_Unit (Self);
      end if;


      begin
         
   --# scope-start

         --# expr-start 19 '<Cast to TraitDecl at nodes.lkt:80:9>' Cast_Result nodes.lkt:80





--# expr-start 18 '<FieldAccess for decl at nodes.lkt:80:9>' Fld_1 nodes.lkt:80



--# expr-start 17 '<FieldAccess for node_gen_trait at nodes.lkt:80:9>' Fld nodes.lkt:80







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start LktNode.node_gen_trait
Fld := Liblktlang.Implementation.Lkt_Node_P_Node_Gen_Trait (Node => Self);
--# end
--# expr-done 17



   if Fld.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_1 := Create_Internal_Entity_Decl (Node => Fld.Node.Generic_Decl_F_Decl, Info => Fld.Info);
--# expr-done 18



   if Fld_1.Node = null
      or else Fld_1.Node.Kind in Lkt_Trait_Decl_Range
   then
      
      Cast_Result := Create_Internal_Entity_Trait_Decl
        (Node => Fld_1.Node,
         Info => Fld_1.Info);

   else
         Cast_Result := No_Entity_Trait_Decl;
   end if;


--# expr-done 19

         Property_Result := Cast_Result;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Lkt_Node_P_Node_Trait;
--# end

   







--# property-start LktNode.indexable_gen_trait nodes.lkt:84
pragma Warnings (Off, "is not referenced");
 function Lkt_Node_P_Indexable_Gen_Trait
  
  (Node : Bare_Lkt_Node
  )

   return Internal_Entity_Generic_Decl
is
   Self : Bare_Lkt_Node  := Bare_Lkt_Node (Node);
      --# bind self Self

   


   Property_Result : Internal_Entity_Generic_Decl;

      

      Sym : Symbol_Type;
Fld : Internal_Entity_Generic_Decl;



begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

            Populate_Lexical_Env_For_Unit (Self);
      end if;


      begin
         
   --# scope-start

         --# expr-start 21 '<FieldAccess for get_builtin_gen_decl at nodes.lkt:85:9>' Fld nodes.lkt:85







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# expr-start 20 '<Symbol Indexable at nodes.lkt:85:35>' Sym nodes.lkt:85
Sym := Precomputed_Symbol (Precomputed_Symbol_Table (Self.Unit.Context.Symbols), Precomputed_Sym_Indexable); 
--# expr-done 20
--# property-call-start LktNode.get_builtin_gen_decl
Fld := Liblktlang.Implementation.Lkt_Node_P_Get_Builtin_Gen_Decl (Node => Self, Entity_Name => Sym);
--# end
--# expr-done 21

         Property_Result := Fld;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Lkt_Node_P_Indexable_Gen_Trait;
--# end

   







--# property-start LktNode.indexable_trait nodes.lkt:89
pragma Warnings (Off, "is not referenced");
 function Lkt_Node_P_Indexable_Trait
  
  (Node : Bare_Lkt_Node
  )

   return Internal_Entity_Trait_Decl
is
   Self : Bare_Lkt_Node  := Bare_Lkt_Node (Node);
      --# bind self Self

   


   Property_Result : Internal_Entity_Trait_Decl;

      

      Fld : Internal_Entity_Generic_Decl;
Fld_1 : Internal_Entity_Decl;
Cast_Result : Internal_Entity_Trait_Decl;



begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

            Populate_Lexical_Env_For_Unit (Self);
      end if;


      begin
         
   --# scope-start

         --# expr-start 24 '<Cast to TraitDecl at nodes.lkt:90:9>' Cast_Result nodes.lkt:90





--# expr-start 23 '<FieldAccess for decl at nodes.lkt:90:9>' Fld_1 nodes.lkt:90



--# expr-start 22 '<FieldAccess for indexable_gen_trait at nodes.lkt:90:9>' Fld nodes.lkt:90







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start LktNode.indexable_gen_trait
Fld := Liblktlang.Implementation.Lkt_Node_P_Indexable_Gen_Trait (Node => Self);
--# end
--# expr-done 22



   if Fld.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_1 := Create_Internal_Entity_Decl (Node => Fld.Node.Generic_Decl_F_Decl, Info => Fld.Info);
--# expr-done 23



   if Fld_1.Node = null
      or else Fld_1.Node.Kind in Lkt_Trait_Decl_Range
   then
      
      Cast_Result := Create_Internal_Entity_Trait_Decl
        (Node => Fld_1.Node,
         Info => Fld_1.Info);

   else
         Cast_Result := No_Entity_Trait_Decl;
   end if;


--# expr-done 24

         Property_Result := Cast_Result;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Lkt_Node_P_Indexable_Trait;
--# end

   







--# property-start LktNode.token_node_trait nodes.lkt:94
pragma Warnings (Off, "is not referenced");
 function Lkt_Node_P_Token_Node_Trait
  
  (Node : Bare_Lkt_Node
  )

   return Internal_Entity_Named_Type_Decl
is
   Self : Bare_Lkt_Node  := Bare_Lkt_Node (Node);
      --# bind self Self

   


   Property_Result : Internal_Entity_Named_Type_Decl;

      

      Sym : Symbol_Type;
Fld : Internal_Entity_Named_Type_Decl;



begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

            Populate_Lexical_Env_For_Unit (Self);
      end if;


      begin
         
   --# scope-start

         --# expr-start 26 '<FieldAccess for get_builtin_type at nodes.lkt:95:9>' Fld nodes.lkt:95







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# expr-start 25 '<Symbol TokenNode at nodes.lkt:95:31>' Sym nodes.lkt:95
Sym := Precomputed_Symbol (Precomputed_Symbol_Table (Self.Unit.Context.Symbols), Precomputed_Sym_Tokennode); 
--# expr-done 25
--# property-call-start LktNode.get_builtin_type
Fld := Liblktlang.Implementation.Lkt_Node_P_Get_Builtin_Type (Node => Self, Entity_Name => Sym);
--# end
--# expr-done 26

         Property_Result := Fld;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Lkt_Node_P_Token_Node_Trait;
--# end

   







--# property-start LktNode.error_node_trait nodes.lkt:99
pragma Warnings (Off, "is not referenced");
 function Lkt_Node_P_Error_Node_Trait
  
  (Node : Bare_Lkt_Node
  )

   return Internal_Entity_Named_Type_Decl
is
   Self : Bare_Lkt_Node  := Bare_Lkt_Node (Node);
      --# bind self Self

   


   Property_Result : Internal_Entity_Named_Type_Decl;

      

      Sym : Symbol_Type;
Fld : Internal_Entity_Named_Type_Decl;



begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

            Populate_Lexical_Env_For_Unit (Self);
      end if;


      begin
         
   --# scope-start

         --# expr-start 28 '<FieldAccess for get_builtin_type at nodes.lkt:100:9>' Fld nodes.lkt:100







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# expr-start 27 '<Symbol ErrorNode at nodes.lkt:100:31>' Sym nodes.lkt:100
Sym := Precomputed_Symbol (Precomputed_Symbol_Table (Self.Unit.Context.Symbols), Precomputed_Sym_Errornode); 
--# expr-done 27
--# property-call-start LktNode.get_builtin_type
Fld := Liblktlang.Implementation.Lkt_Node_P_Get_Builtin_Type (Node => Self, Entity_Name => Sym);
--# end
--# expr-done 28

         Property_Result := Fld;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Lkt_Node_P_Error_Node_Trait;
--# end

   







--# property-start LktNode.char_type nodes.lkt:104
pragma Warnings (Off, "is not referenced");
 function Lkt_Node_P_Char_Type
  
  (Node : Bare_Lkt_Node
  )

   return Internal_Entity_Named_Type_Decl
is
   Self : Bare_Lkt_Node  := Bare_Lkt_Node (Node);
      --# bind self Self

   


   Property_Result : Internal_Entity_Named_Type_Decl;

      

      Sym : Symbol_Type;
Fld : Internal_Entity_Named_Type_Decl;



begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

            Populate_Lexical_Env_For_Unit (Self);
      end if;


      begin
         
   --# scope-start

         --# expr-start 30 '<FieldAccess for get_builtin_type at nodes.lkt:104:46>' Fld nodes.lkt:104







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# expr-start 29 '<Symbol Char at nodes.lkt:104:68>' Sym nodes.lkt:104
Sym := Precomputed_Symbol (Precomputed_Symbol_Table (Self.Unit.Context.Symbols), Precomputed_Sym_Char); 
--# expr-done 29
--# property-call-start LktNode.get_builtin_type
Fld := Liblktlang.Implementation.Lkt_Node_P_Get_Builtin_Type (Node => Self, Entity_Name => Sym);
--# end
--# expr-done 30

         Property_Result := Fld;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Lkt_Node_P_Char_Type;
--# end

   







--# property-start LktNode.int_type nodes.lkt:108
pragma Warnings (Off, "is not referenced");
 function Lkt_Node_P_Int_Type
  
  (Node : Bare_Lkt_Node
  )

   return Internal_Entity_Named_Type_Decl
is
   Self : Bare_Lkt_Node  := Bare_Lkt_Node (Node);
      --# bind self Self

   


   Property_Result : Internal_Entity_Named_Type_Decl;

      

      Sym : Symbol_Type;
Fld : Internal_Entity_Named_Type_Decl;



begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

            Populate_Lexical_Env_For_Unit (Self);
      end if;


      begin
         
   --# scope-start

         --# expr-start 32 '<FieldAccess for get_builtin_type at nodes.lkt:108:45>' Fld nodes.lkt:108







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# expr-start 31 '<Symbol Int at nodes.lkt:108:67>' Sym nodes.lkt:108
Sym := Precomputed_Symbol (Precomputed_Symbol_Table (Self.Unit.Context.Symbols), Precomputed_Sym_Int); 
--# expr-done 31
--# property-call-start LktNode.get_builtin_type
Fld := Liblktlang.Implementation.Lkt_Node_P_Get_Builtin_Type (Node => Self, Entity_Name => Sym);
--# end
--# expr-done 32

         Property_Result := Fld;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Lkt_Node_P_Int_Type;
--# end

   







--# property-start LktNode.bool_type nodes.lkt:112
pragma Warnings (Off, "is not referenced");
 function Lkt_Node_P_Bool_Type
  
  (Node : Bare_Lkt_Node
  )

   return Internal_Entity_Named_Type_Decl
is
   Self : Bare_Lkt_Node  := Bare_Lkt_Node (Node);
      --# bind self Self

   


   Property_Result : Internal_Entity_Named_Type_Decl;

      

      Sym : Symbol_Type;
Fld : Internal_Entity_Named_Type_Decl;



begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

            Populate_Lexical_Env_For_Unit (Self);
      end if;


      begin
         
   --# scope-start

         --# expr-start 34 '<FieldAccess for get_builtin_type at nodes.lkt:112:46>' Fld nodes.lkt:112







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# expr-start 33 '<Symbol Bool at nodes.lkt:112:68>' Sym nodes.lkt:112
Sym := Precomputed_Symbol (Precomputed_Symbol_Table (Self.Unit.Context.Symbols), Precomputed_Sym_Bool); 
--# expr-done 33
--# property-call-start LktNode.get_builtin_type
Fld := Liblktlang.Implementation.Lkt_Node_P_Get_Builtin_Type (Node => Self, Entity_Name => Sym);
--# end
--# expr-done 34

         Property_Result := Fld;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Lkt_Node_P_Bool_Type;
--# end

   







--# property-start LktNode.bigint_type nodes.lkt:116
pragma Warnings (Off, "is not referenced");
 function Lkt_Node_P_Bigint_Type
  
  (Node : Bare_Lkt_Node
  )

   return Internal_Entity_Named_Type_Decl
is
   Self : Bare_Lkt_Node  := Bare_Lkt_Node (Node);
      --# bind self Self

   


   Property_Result : Internal_Entity_Named_Type_Decl;

      

      Sym : Symbol_Type;
Fld : Internal_Entity_Named_Type_Decl;



begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

            Populate_Lexical_Env_For_Unit (Self);
      end if;


      begin
         
   --# scope-start

         --# expr-start 36 '<FieldAccess for get_builtin_type at nodes.lkt:116:48>' Fld nodes.lkt:116







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# expr-start 35 '<Symbol BigInt at nodes.lkt:116:70>' Sym nodes.lkt:116
Sym := Precomputed_Symbol (Precomputed_Symbol_Table (Self.Unit.Context.Symbols), Precomputed_Sym_Bigint); 
--# expr-done 35
--# property-call-start LktNode.get_builtin_type
Fld := Liblktlang.Implementation.Lkt_Node_P_Get_Builtin_Type (Node => Self, Entity_Name => Sym);
--# end
--# expr-done 36

         Property_Result := Fld;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Lkt_Node_P_Bigint_Type;
--# end

   







--# property-start LktNode.string_type nodes.lkt:120
pragma Warnings (Off, "is not referenced");
 function Lkt_Node_P_String_Type
  
  (Node : Bare_Lkt_Node
  )

   return Internal_Entity_Named_Type_Decl
is
   Self : Bare_Lkt_Node  := Bare_Lkt_Node (Node);
      --# bind self Self

   


   Property_Result : Internal_Entity_Named_Type_Decl;

      

      Sym : Symbol_Type;
Fld : Internal_Entity_Named_Type_Decl;



begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

            Populate_Lexical_Env_For_Unit (Self);
      end if;


      begin
         
   --# scope-start

         --# expr-start 38 '<FieldAccess for get_builtin_type at nodes.lkt:120:48>' Fld nodes.lkt:120







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# expr-start 37 '<Symbol String at nodes.lkt:120:70>' Sym nodes.lkt:120
Sym := Precomputed_Symbol (Precomputed_Symbol_Table (Self.Unit.Context.Symbols), Precomputed_Sym_String); 
--# expr-done 37
--# property-call-start LktNode.get_builtin_type
Fld := Liblktlang.Implementation.Lkt_Node_P_Get_Builtin_Type (Node => Self, Entity_Name => Sym);
--# end
--# expr-done 38

         Property_Result := Fld;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Lkt_Node_P_String_Type;
--# end

   







--# property-start LktNode.symbol_type nodes.lkt:124
pragma Warnings (Off, "is not referenced");
 function Lkt_Node_P_Symbol_Type
  
  (Node : Bare_Lkt_Node
  )

   return Internal_Entity_Named_Type_Decl
is
   Self : Bare_Lkt_Node  := Bare_Lkt_Node (Node);
      --# bind self Self

   


   Property_Result : Internal_Entity_Named_Type_Decl;

      

      Sym : Symbol_Type;
Fld : Internal_Entity_Named_Type_Decl;



begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

            Populate_Lexical_Env_For_Unit (Self);
      end if;


      begin
         
   --# scope-start

         --# expr-start 40 '<FieldAccess for get_builtin_type at nodes.lkt:124:48>' Fld nodes.lkt:124







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# expr-start 39 '<Symbol Symbol at nodes.lkt:124:70>' Sym nodes.lkt:124
Sym := Precomputed_Symbol (Precomputed_Symbol_Table (Self.Unit.Context.Symbols), Precomputed_Sym_Symbol); 
--# expr-done 39
--# property-call-start LktNode.get_builtin_type
Fld := Liblktlang.Implementation.Lkt_Node_P_Get_Builtin_Type (Node => Self, Entity_Name => Sym);
--# end
--# expr-done 40

         Property_Result := Fld;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Lkt_Node_P_Symbol_Type;
--# end

   







--# property-start LktNode.property_error_type nodes.lkt:128
pragma Warnings (Off, "is not referenced");
 function Lkt_Node_P_Property_Error_Type
  
  (Node : Bare_Lkt_Node
  )

   return Internal_Entity_Named_Type_Decl
is
   Self : Bare_Lkt_Node  := Bare_Lkt_Node (Node);
      --# bind self Self

   


   Property_Result : Internal_Entity_Named_Type_Decl;

      

      Sym : Symbol_Type;
Fld : Internal_Entity_Named_Type_Decl;



begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

            Populate_Lexical_Env_For_Unit (Self);
      end if;


      begin
         
   --# scope-start

         --# expr-start 42 '<FieldAccess for get_builtin_type at nodes.lkt:129:9>' Fld nodes.lkt:129







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# expr-start 41 '<Symbol PropertyError at nodes.lkt:129:31>' Sym nodes.lkt:129
Sym := Precomputed_Symbol (Precomputed_Symbol_Table (Self.Unit.Context.Symbols), Precomputed_Sym_Propertyerror); 
--# expr-done 41
--# property-call-start LktNode.get_builtin_type
Fld := Liblktlang.Implementation.Lkt_Node_P_Get_Builtin_Type (Node => Self, Entity_Name => Sym);
--# end
--# expr-done 42

         Property_Result := Fld;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Lkt_Node_P_Property_Error_Type;
--# end

   







--# property-start LktNode.regexp_type nodes.lkt:133
pragma Warnings (Off, "is not referenced");
 function Lkt_Node_P_Regexp_Type
  
  (Node : Bare_Lkt_Node
  )

   return Internal_Entity_Named_Type_Decl
is
   Self : Bare_Lkt_Node  := Bare_Lkt_Node (Node);
      --# bind self Self

   


   Property_Result : Internal_Entity_Named_Type_Decl;

      

      Sym : Symbol_Type;
Fld : Internal_Entity_Named_Type_Decl;



begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

            Populate_Lexical_Env_For_Unit (Self);
      end if;


      begin
         
   --# scope-start

         --# expr-start 44 '<FieldAccess for get_builtin_type at nodes.lkt:133:48>' Fld nodes.lkt:133







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# expr-start 43 '<Symbol Regexp at nodes.lkt:133:70>' Sym nodes.lkt:133
Sym := Precomputed_Symbol (Precomputed_Symbol_Table (Self.Unit.Context.Symbols), Precomputed_Sym_Regexp); 
--# expr-done 43
--# property-call-start LktNode.get_builtin_type
Fld := Liblktlang.Implementation.Lkt_Node_P_Get_Builtin_Type (Node => Self, Entity_Name => Sym);
--# end
--# expr-done 44

         Property_Result := Fld;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Lkt_Node_P_Regexp_Type;
--# end

   







--# property-start LktNode.entity_gen_type nodes.lkt:137
pragma Warnings (Off, "is not referenced");
 function Lkt_Node_P_Entity_Gen_Type
  
  (Node : Bare_Lkt_Node
  )

   return Internal_Entity_Generic_Decl
is
   Self : Bare_Lkt_Node  := Bare_Lkt_Node (Node);
      --# bind self Self

   


   Property_Result : Internal_Entity_Generic_Decl;

      

      Sym : Symbol_Type;
Fld : Internal_Entity_Generic_Decl;



begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

            Populate_Lexical_Env_For_Unit (Self);
      end if;


      begin
         
   --# scope-start

         --# expr-start 46 '<FieldAccess for get_builtin_gen_decl at nodes.lkt:138:9>' Fld nodes.lkt:138







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# expr-start 45 '<Symbol Entity at nodes.lkt:138:35>' Sym nodes.lkt:138
Sym := Precomputed_Symbol (Precomputed_Symbol_Table (Self.Unit.Context.Symbols), Precomputed_Sym_Entity); 
--# expr-done 45
--# property-call-start LktNode.get_builtin_gen_decl
Fld := Liblktlang.Implementation.Lkt_Node_P_Get_Builtin_Gen_Decl (Node => Self, Entity_Name => Sym);
--# end
--# expr-done 46

         Property_Result := Fld;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Lkt_Node_P_Entity_Gen_Type;
--# end

   







--# property-start LktNode.entity_type nodes.lkt:142
pragma Warnings (Off, "is not referenced");
 function Lkt_Node_P_Entity_Type
  
  (Node : Bare_Lkt_Node
  )

   return Internal_Entity_Named_Type_Decl
is
   Self : Bare_Lkt_Node  := Bare_Lkt_Node (Node);
      --# bind self Self

   


   Property_Result : Internal_Entity_Named_Type_Decl;

      

      Fld : Internal_Entity_Generic_Decl;
Fld_1 : Internal_Entity_Decl;
Cast_Result : Internal_Entity_Named_Type_Decl;



begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

            Populate_Lexical_Env_For_Unit (Self);
      end if;


      begin
         
   --# scope-start

         --# expr-start 49 '<Cast to NamedTypeDecl at nodes.lkt:143:9>' Cast_Result nodes.lkt:143





--# expr-start 48 '<FieldAccess for decl at nodes.lkt:143:9>' Fld_1 nodes.lkt:143



--# expr-start 47 '<FieldAccess for entity_gen_type at nodes.lkt:143:9>' Fld nodes.lkt:143







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start LktNode.entity_gen_type
Fld := Liblktlang.Implementation.Lkt_Node_P_Entity_Gen_Type (Node => Self);
--# end
--# expr-done 47



   if Fld.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_1 := Create_Internal_Entity_Decl (Node => Fld.Node.Generic_Decl_F_Decl, Info => Fld.Info);
--# expr-done 48



   if Fld_1.Node = null
      or else Fld_1.Node.Kind in Lkt_Named_Type_Decl
   then
      
      Cast_Result := Create_Internal_Entity_Named_Type_Decl
        (Node => Fld_1.Node,
         Info => Fld_1.Info);

   else
         Cast_Result := No_Entity_Named_Type_Decl;
   end if;


--# expr-done 49

         Property_Result := Cast_Result;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Lkt_Node_P_Entity_Type;
--# end

   







--# property-start LktNode.logicvar_type nodes.lkt:147
pragma Warnings (Off, "is not referenced");
 function Lkt_Node_P_Logicvar_Type
  
  (Node : Bare_Lkt_Node
  )

   return Internal_Entity_Named_Type_Decl
is
   Self : Bare_Lkt_Node  := Bare_Lkt_Node (Node);
      --# bind self Self

   


   Property_Result : Internal_Entity_Named_Type_Decl;

      

      Sym : Symbol_Type;
Fld : Internal_Entity_Named_Type_Decl;



begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

            Populate_Lexical_Env_For_Unit (Self);
      end if;


      begin
         
   --# scope-start

         --# expr-start 51 '<FieldAccess for get_builtin_type at nodes.lkt:148:9>' Fld nodes.lkt:148







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# expr-start 50 '<Symbol LogicVar at nodes.lkt:148:31>' Sym nodes.lkt:148
Sym := Precomputed_Symbol (Precomputed_Symbol_Table (Self.Unit.Context.Symbols), Precomputed_Sym_Logicvar); 
--# expr-done 50
--# property-call-start LktNode.get_builtin_type
Fld := Liblktlang.Implementation.Lkt_Node_P_Get_Builtin_Type (Node => Self, Entity_Name => Sym);
--# end
--# expr-done 51

         Property_Result := Fld;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Lkt_Node_P_Logicvar_Type;
--# end

   







--# property-start LktNode.equation_type nodes.lkt:152
pragma Warnings (Off, "is not referenced");
 function Lkt_Node_P_Equation_Type
  
  (Node : Bare_Lkt_Node
  )

   return Internal_Entity_Named_Type_Decl
is
   Self : Bare_Lkt_Node  := Bare_Lkt_Node (Node);
      --# bind self Self

   


   Property_Result : Internal_Entity_Named_Type_Decl;

      

      Sym : Symbol_Type;
Fld : Internal_Entity_Named_Type_Decl;



begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

            Populate_Lexical_Env_For_Unit (Self);
      end if;


      begin
         
   --# scope-start

         --# expr-start 53 '<FieldAccess for get_builtin_type at nodes.lkt:153:9>' Fld nodes.lkt:153







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# expr-start 52 '<Symbol Equation at nodes.lkt:153:31>' Sym nodes.lkt:153
Sym := Precomputed_Symbol (Precomputed_Symbol_Table (Self.Unit.Context.Symbols), Precomputed_Sym_Equation); 
--# expr-done 52
--# property-call-start LktNode.get_builtin_type
Fld := Liblktlang.Implementation.Lkt_Node_P_Get_Builtin_Type (Node => Self, Entity_Name => Sym);
--# end
--# expr-done 53

         Property_Result := Fld;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Lkt_Node_P_Equation_Type;
--# end

   







--# property-start LktNode.array_gen_type nodes.lkt:157
pragma Warnings (Off, "is not referenced");
 function Lkt_Node_P_Array_Gen_Type
  
  (Node : Bare_Lkt_Node
  )

   return Internal_Entity_Generic_Decl
is
   Self : Bare_Lkt_Node  := Bare_Lkt_Node (Node);
      --# bind self Self

   


   Property_Result : Internal_Entity_Generic_Decl;

      

      Sym : Symbol_Type;
Fld : Internal_Entity_Generic_Decl;



begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

            Populate_Lexical_Env_For_Unit (Self);
      end if;


      begin
         
   --# scope-start

         --# expr-start 55 '<FieldAccess for get_builtin_gen_decl at nodes.lkt:158:9>' Fld nodes.lkt:158







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# expr-start 54 '<Symbol Array at nodes.lkt:158:35>' Sym nodes.lkt:158
Sym := Precomputed_Symbol (Precomputed_Symbol_Table (Self.Unit.Context.Symbols), Precomputed_Sym_Array); 
--# expr-done 54
--# property-call-start LktNode.get_builtin_gen_decl
Fld := Liblktlang.Implementation.Lkt_Node_P_Get_Builtin_Gen_Decl (Node => Self, Entity_Name => Sym);
--# end
--# expr-done 55

         Property_Result := Fld;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Lkt_Node_P_Array_Gen_Type;
--# end

   







--# property-start LktNode.array_type nodes.lkt:162
pragma Warnings (Off, "is not referenced");
 function Lkt_Node_P_Array_Type
  
  (Node : Bare_Lkt_Node
  )

   return Internal_Entity_Named_Type_Decl
is
   Self : Bare_Lkt_Node  := Bare_Lkt_Node (Node);
      --# bind self Self

   


   Property_Result : Internal_Entity_Named_Type_Decl;

      

      Fld : Internal_Entity_Generic_Decl;
Fld_1 : Internal_Entity_Decl;
Cast_Result : Internal_Entity_Named_Type_Decl;



begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

            Populate_Lexical_Env_For_Unit (Self);
      end if;


      begin
         
   --# scope-start

         --# expr-start 58 '<Cast to NamedTypeDecl at nodes.lkt:163:9>' Cast_Result nodes.lkt:163





--# expr-start 57 '<FieldAccess for decl at nodes.lkt:163:9>' Fld_1 nodes.lkt:163



--# expr-start 56 '<FieldAccess for array_gen_type at nodes.lkt:163:9>' Fld nodes.lkt:163







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start LktNode.array_gen_type
Fld := Liblktlang.Implementation.Lkt_Node_P_Array_Gen_Type (Node => Self);
--# end
--# expr-done 56



   if Fld.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_1 := Create_Internal_Entity_Decl (Node => Fld.Node.Generic_Decl_F_Decl, Info => Fld.Info);
--# expr-done 57



   if Fld_1.Node = null
      or else Fld_1.Node.Kind in Lkt_Named_Type_Decl
   then
      
      Cast_Result := Create_Internal_Entity_Named_Type_Decl
        (Node => Fld_1.Node,
         Info => Fld_1.Info);

   else
         Cast_Result := No_Entity_Named_Type_Decl;
   end if;


--# expr-done 58

         Property_Result := Cast_Result;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Lkt_Node_P_Array_Type;
--# end

   







--# property-start LktNode.astlist_gen_type nodes.lkt:167
pragma Warnings (Off, "is not referenced");
 function Lkt_Node_P_Astlist_Gen_Type
  
  (Node : Bare_Lkt_Node
  )

   return Internal_Entity_Generic_Decl
is
   Self : Bare_Lkt_Node  := Bare_Lkt_Node (Node);
      --# bind self Self

   


   Property_Result : Internal_Entity_Generic_Decl;

      

      Sym : Symbol_Type;
Fld : Internal_Entity_Generic_Decl;



begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

            Populate_Lexical_Env_For_Unit (Self);
      end if;


      begin
         
   --# scope-start

         --# expr-start 60 '<FieldAccess for get_builtin_gen_decl at nodes.lkt:168:9>' Fld nodes.lkt:168







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# expr-start 59 '<Symbol ASTList at nodes.lkt:168:35>' Sym nodes.lkt:168
Sym := Precomputed_Symbol (Precomputed_Symbol_Table (Self.Unit.Context.Symbols), Precomputed_Sym_Astlist); 
--# expr-done 59
--# property-call-start LktNode.get_builtin_gen_decl
Fld := Liblktlang.Implementation.Lkt_Node_P_Get_Builtin_Gen_Decl (Node => Self, Entity_Name => Sym);
--# end
--# expr-done 60

         Property_Result := Fld;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Lkt_Node_P_Astlist_Gen_Type;
--# end

   







--# property-start LktNode.astlist_type nodes.lkt:172
pragma Warnings (Off, "is not referenced");
 function Lkt_Node_P_Astlist_Type
  
  (Node : Bare_Lkt_Node
  )

   return Internal_Entity_Named_Type_Decl
is
   Self : Bare_Lkt_Node  := Bare_Lkt_Node (Node);
      --# bind self Self

   


   Property_Result : Internal_Entity_Named_Type_Decl;

      

      Fld : Internal_Entity_Generic_Decl;
Fld_1 : Internal_Entity_Decl;
Cast_Result : Internal_Entity_Named_Type_Decl;



begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

            Populate_Lexical_Env_For_Unit (Self);
      end if;


      begin
         
   --# scope-start

         --# expr-start 63 '<Cast to NamedTypeDecl at nodes.lkt:173:9>' Cast_Result nodes.lkt:173





--# expr-start 62 '<FieldAccess for decl at nodes.lkt:173:9>' Fld_1 nodes.lkt:173



--# expr-start 61 '<FieldAccess for astlist_gen_type at nodes.lkt:173:9>' Fld nodes.lkt:173







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start LktNode.astlist_gen_type
Fld := Liblktlang.Implementation.Lkt_Node_P_Astlist_Gen_Type (Node => Self);
--# end
--# expr-done 61



   if Fld.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_1 := Create_Internal_Entity_Decl (Node => Fld.Node.Generic_Decl_F_Decl, Info => Fld.Info);
--# expr-done 62



   if Fld_1.Node = null
      or else Fld_1.Node.Kind in Lkt_Named_Type_Decl
   then
      
      Cast_Result := Create_Internal_Entity_Named_Type_Decl
        (Node => Fld_1.Node,
         Info => Fld_1.Info);

   else
         Cast_Result := No_Entity_Named_Type_Decl;
   end if;


--# expr-done 63

         Property_Result := Cast_Result;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Lkt_Node_P_Astlist_Type;
--# end

   







--# property-start LktNode.node_builder_gen_type nodes.lkt:177
pragma Warnings (Off, "is not referenced");
 function Lkt_Node_P_Node_Builder_Gen_Type
  
  (Node : Bare_Lkt_Node
  )

   return Internal_Entity_Generic_Decl
is
   Self : Bare_Lkt_Node  := Bare_Lkt_Node (Node);
      --# bind self Self

   


   Property_Result : Internal_Entity_Generic_Decl;

      

      Sym : Symbol_Type;
Fld : Internal_Entity_Generic_Decl;



begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

            Populate_Lexical_Env_For_Unit (Self);
      end if;


      begin
         
   --# scope-start

         --# expr-start 65 '<FieldAccess for get_builtin_gen_decl at nodes.lkt:178:9>' Fld nodes.lkt:178







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# expr-start 64 '<Symbol NodeBuilder at nodes.lkt:178:35>' Sym nodes.lkt:178
Sym := Precomputed_Symbol (Precomputed_Symbol_Table (Self.Unit.Context.Symbols), Precomputed_Sym_Nodebuilder); 
--# expr-done 64
--# property-call-start LktNode.get_builtin_gen_decl
Fld := Liblktlang.Implementation.Lkt_Node_P_Get_Builtin_Gen_Decl (Node => Self, Entity_Name => Sym);
--# end
--# expr-done 65

         Property_Result := Fld;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Lkt_Node_P_Node_Builder_Gen_Type;
--# end

   







--# property-start LktNode.node_builder_type nodes.lkt:182
pragma Warnings (Off, "is not referenced");
 function Lkt_Node_P_Node_Builder_Type
  
  (Node : Bare_Lkt_Node
  )

   return Internal_Entity_Named_Type_Decl
is
   Self : Bare_Lkt_Node  := Bare_Lkt_Node (Node);
      --# bind self Self

   


   Property_Result : Internal_Entity_Named_Type_Decl;

      

      Fld : Internal_Entity_Generic_Decl;
Fld_1 : Internal_Entity_Decl;
Cast_Result : Internal_Entity_Named_Type_Decl;



begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

            Populate_Lexical_Env_For_Unit (Self);
      end if;


      begin
         
   --# scope-start

         --# expr-start 68 '<Cast to NamedTypeDecl at nodes.lkt:183:9>' Cast_Result nodes.lkt:183





--# expr-start 67 '<FieldAccess for decl at nodes.lkt:183:9>' Fld_1 nodes.lkt:183



--# expr-start 66 '<FieldAccess for node_builder_gen_type at nodes.lkt:183:9>' Fld nodes.lkt:183







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start LktNode.node_builder_gen_type
Fld := Liblktlang.Implementation.Lkt_Node_P_Node_Builder_Gen_Type (Node => Self);
--# end
--# expr-done 66



   if Fld.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_1 := Create_Internal_Entity_Decl (Node => Fld.Node.Generic_Decl_F_Decl, Info => Fld.Info);
--# expr-done 67



   if Fld_1.Node = null
      or else Fld_1.Node.Kind in Lkt_Named_Type_Decl
   then
      
      Cast_Result := Create_Internal_Entity_Named_Type_Decl
        (Node => Fld_1.Node,
         Info => Fld_1.Info);

   else
         Cast_Result := No_Entity_Named_Type_Decl;
   end if;


--# expr-done 68

         Property_Result := Cast_Result;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Lkt_Node_P_Node_Builder_Type;
--# end

   







--# property-start LktNode.iterator_gen_trait nodes.lkt:187
pragma Warnings (Off, "is not referenced");
 function Lkt_Node_P_Iterator_Gen_Trait
  
  (Node : Bare_Lkt_Node
  )

   return Internal_Entity_Generic_Decl
is
   Self : Bare_Lkt_Node  := Bare_Lkt_Node (Node);
      --# bind self Self

   


   Property_Result : Internal_Entity_Generic_Decl;

      

      Sym : Symbol_Type;
Fld : Internal_Entity_Generic_Decl;



begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

            Populate_Lexical_Env_For_Unit (Self);
      end if;


      begin
         
   --# scope-start

         --# expr-start 70 '<FieldAccess for get_builtin_gen_decl at nodes.lkt:188:9>' Fld nodes.lkt:188







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# expr-start 69 '<Symbol Iterator at nodes.lkt:188:35>' Sym nodes.lkt:188
Sym := Precomputed_Symbol (Precomputed_Symbol_Table (Self.Unit.Context.Symbols), Precomputed_Sym_Iterator); 
--# expr-done 69
--# property-call-start LktNode.get_builtin_gen_decl
Fld := Liblktlang.Implementation.Lkt_Node_P_Get_Builtin_Gen_Decl (Node => Self, Entity_Name => Sym);
--# end
--# expr-done 70

         Property_Result := Fld;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Lkt_Node_P_Iterator_Gen_Trait;
--# end

   







--# property-start LktNode.iterator_trait nodes.lkt:192
pragma Warnings (Off, "is not referenced");
 function Lkt_Node_P_Iterator_Trait
  
  (Node : Bare_Lkt_Node
  )

   return Internal_Entity_Trait_Decl
is
   Self : Bare_Lkt_Node  := Bare_Lkt_Node (Node);
      --# bind self Self

   


   Property_Result : Internal_Entity_Trait_Decl;

      

      Fld : Internal_Entity_Generic_Decl;
Fld_1 : Internal_Entity_Decl;
Cast_Result : Internal_Entity_Trait_Decl;



begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

            Populate_Lexical_Env_For_Unit (Self);
      end if;


      begin
         
   --# scope-start

         --# expr-start 73 '<Cast to TraitDecl at nodes.lkt:193:9>' Cast_Result nodes.lkt:193





--# expr-start 72 '<FieldAccess for decl at nodes.lkt:193:9>' Fld_1 nodes.lkt:193



--# expr-start 71 '<FieldAccess for iterator_gen_trait at nodes.lkt:193:9>' Fld nodes.lkt:193







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start LktNode.iterator_gen_trait
Fld := Liblktlang.Implementation.Lkt_Node_P_Iterator_Gen_Trait (Node => Self);
--# end
--# expr-done 71



   if Fld.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_1 := Create_Internal_Entity_Decl (Node => Fld.Node.Generic_Decl_F_Decl, Info => Fld.Info);
--# expr-done 72



   if Fld_1.Node = null
      or else Fld_1.Node.Kind in Lkt_Trait_Decl_Range
   then
      
      Cast_Result := Create_Internal_Entity_Trait_Decl
        (Node => Fld_1.Node,
         Info => Fld_1.Info);

   else
         Cast_Result := No_Entity_Trait_Decl;
   end if;


--# expr-done 73

         Property_Result := Cast_Result;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Lkt_Node_P_Iterator_Trait;
--# end

   







--# property-start LktNode.analysis_unit_gen_trait nodes.lkt:197
pragma Warnings (Off, "is not referenced");
 function Lkt_Node_P_Analysis_Unit_Gen_Trait
  
  (Node : Bare_Lkt_Node
  )

   return Internal_Entity_Generic_Decl
is
   Self : Bare_Lkt_Node  := Bare_Lkt_Node (Node);
      --# bind self Self

   


   Property_Result : Internal_Entity_Generic_Decl;

      

      Sym : Symbol_Type;
Fld : Internal_Entity_Generic_Decl;



begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

            Populate_Lexical_Env_For_Unit (Self);
      end if;


      begin
         
   --# scope-start

         --# expr-start 75 '<FieldAccess for get_builtin_gen_decl at nodes.lkt:198:9>' Fld nodes.lkt:198







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# expr-start 74 '<Symbol AnalysisUnit at nodes.lkt:198:35>' Sym nodes.lkt:198
Sym := Precomputed_Symbol (Precomputed_Symbol_Table (Self.Unit.Context.Symbols), Precomputed_Sym_Analysisunit); 
--# expr-done 74
--# property-call-start LktNode.get_builtin_gen_decl
Fld := Liblktlang.Implementation.Lkt_Node_P_Get_Builtin_Gen_Decl (Node => Self, Entity_Name => Sym);
--# end
--# expr-done 75

         Property_Result := Fld;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Lkt_Node_P_Analysis_Unit_Gen_Trait;
--# end

   







--# property-start LktNode.analysis_unit_trait nodes.lkt:202
pragma Warnings (Off, "is not referenced");
 function Lkt_Node_P_Analysis_Unit_Trait
  
  (Node : Bare_Lkt_Node
  )

   return Internal_Entity_Trait_Decl
is
   Self : Bare_Lkt_Node  := Bare_Lkt_Node (Node);
      --# bind self Self

   


   Property_Result : Internal_Entity_Trait_Decl;

      

      Fld : Internal_Entity_Generic_Decl;
Fld_1 : Internal_Entity_Decl;
Cast_Result : Internal_Entity_Trait_Decl;



begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

            Populate_Lexical_Env_For_Unit (Self);
      end if;


      begin
         
   --# scope-start

         --# expr-start 78 '<Cast to TraitDecl at nodes.lkt:203:9>' Cast_Result nodes.lkt:203





--# expr-start 77 '<FieldAccess for decl at nodes.lkt:203:9>' Fld_1 nodes.lkt:203



--# expr-start 76 '<FieldAccess for analysis_unit_gen_trait at nodes.lkt:203:9>' Fld nodes.lkt:203







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start LktNode.analysis_unit_gen_trait
Fld := Liblktlang.Implementation.Lkt_Node_P_Analysis_Unit_Gen_Trait (Node => Self);
--# end
--# expr-done 76



   if Fld.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_1 := Create_Internal_Entity_Decl (Node => Fld.Node.Generic_Decl_F_Decl, Info => Fld.Info);
--# expr-done 77



   if Fld_1.Node = null
      or else Fld_1.Node.Kind in Lkt_Trait_Decl_Range
   then
      
      Cast_Result := Create_Internal_Entity_Trait_Decl
        (Node => Fld_1.Node,
         Info => Fld_1.Info);

   else
         Cast_Result := No_Entity_Trait_Decl;
   end if;


--# expr-done 78

         Property_Result := Cast_Result;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Lkt_Node_P_Analysis_Unit_Trait;
--# end

   







--# property-start LktNode.any_type nodes.lkt:207
pragma Warnings (Off, "is not referenced");
 function Lkt_Node_P_Any_Type
  
  (Node : Bare_Lkt_Node
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Internal_Entity_Type_Decl
is
   Self : Bare_Lkt_Node  := Bare_Lkt_Node (Node);
      --# bind self Self

   


   Property_Result : Internal_Entity_Type_Decl;

      

      New_Node : Bare_Any_Type_Decl;
As_Entity : Internal_Entity_Any_Type_Decl;
Is_Null : Boolean;
If_Result : Internal_Entity_Any_Type_Decl;
Cast_Result : Internal_Entity_Type_Decl;


      
      Mmz_Handle : Memoization_Handle;
      Mmz_Val    : Mmz_Value;

      Mmz_Stored : Boolean;
      --  Whether the memoization couple was actually stored. Used to determine
      --  whether to inc-ref the memoized value.

      function Create_Mmz_Key return Mmz_Key;
      --  Create a memoization key for this property call and return it

      --------------------
      -- Create_Mmz_Key --
      --------------------

      function Create_Mmz_Key return Mmz_Key is
      begin
         return Mmz_K : Mmz_Key :=
           (Property => Mmz_Bare_Lkt_Node_Lkt_Node_P_Any_Type,
            Items    => new Mmz_Key_Array (1 ..  2))
         do
            Mmz_K.Items (1) := (Kind => Mmz_Bare_Lkt_Node,
                                As_Bare_Lkt_Node => Self);
               Mmz_K.Items (2) :=
                 (Kind => Mmz_Internal_Entity_Info,
                  As_Internal_Entity_Info => E_Info);
         end return;
      end Create_Mmz_Key;

begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;

      if Self /= null then

         if not Self.Unit.Context.In_Populate_Lexical_Env then

            if Find_Memoized_Value
              (Self.Unit, Mmz_Handle, Mmz_Val, Create_Mmz_Key'Access)
            then
               --# memoization-lookup

               if Mmz_Val.Kind = Mmz_Evaluating then
                  --# memoization-return
                  Raise_Property_Exception
                    (Self,
                     Property_Error'Identity,
                     "Infinite recursion detected");

               elsif Mmz_Val.Kind = Mmz_Error then
                  --# memoization-return
                  Reraise_Memoized_Error (Mmz_Val);

               else
                  Property_Result := Mmz_Val.As_Internal_Entity_Type_Decl;

                  --# memoization-return
                  return Property_Result;
               end if;
               --# end
            end if;

         end if;
      end if;

      begin
         
   --# scope-start

         




--# expr-start 80 '<as_entity at nodes.lkt:207:40>' If_Result nodes.lkt:207



--# expr-start 79 '<New AnyTypeDecl at nodes.lkt:207:40>' New_Node nodes.lkt:207



if Is_Foreign_Strict (Self.Self_Env, Self) then
   Raise_Property_Exception
     (Self,
      Property_Error'Identity,
      "synthetic nodes cannot have foreign lexical envs");
end if;


New_Node := new Root_Node_Record
  (Lkt_Any_Type_Decl);
Initialize
  (Self => New_Node,
   Kind => Lkt_Any_Type_Decl,
   Unit => Self.Unit,

   Token_Start_Index => No_Token_Index,
   Token_End_Index   => No_Token_Index,

   Parent => Self,

   Self_Env => Self.Self_Env);
Register_Destroyable (Self.Unit, New_Node);



--# expr-done 79
Is_Null := New_Node = null; 
if Is_Null then
   
   If_Result := No_Entity_Any_Type_Decl;
else
   

As_Entity := (Info => E_Info, Node => New_Node); 
   If_Result := As_Entity;
end if;



--# expr-done 80



   
      Cast_Result := Create_Internal_Entity_Type_Decl
        (Node => If_Result.Node,
         Info => If_Result.Info);



         Property_Result := Cast_Result;
         
   --# end


      exception
         when Exc : Property_Error =>


               if Self /= null then
                     if not Self.Unit.Context.In_Populate_Lexical_Env then
                        Add_Memoized_Error
                          (Self.Unit, Mmz_Handle, Exc, Mmz_Stored);
                     end if;
               end if;


            raise;
      end;

      if Self /= null then
         if not Self.Unit.Context.In_Populate_Lexical_Env then

            Mmz_Val := (Kind => Mmz_Internal_Entity_Type_Decl,
                        As_Internal_Entity_Type_Decl => Property_Result);
            Add_Memoized_Value (Self.Unit, Mmz_Handle, Mmz_Val, Mmz_Stored);

         end if;
      end if;



   return Property_Result;
end Lkt_Node_P_Any_Type;
--# end

   







--# property-start LktNode.topmost_invalid_decl nodes.lkt:216
pragma Warnings (Off, "is not referenced");
 function Lkt_Node_P_Topmost_Invalid_Decl
  
  (Node : Bare_Lkt_Node
  )

   return Bare_Lkt_Node
is
   Self : Bare_Lkt_Node  := Bare_Lkt_Node (Node);
      --# bind self Self

   


   Property_Result : Bare_Lkt_Node;

      
            procedure Finalizer_Scope_41 with Inline_Always;

      Var_Expr_1 : Bare_Full_Decl;
Neg : Integer;
Node_Parents : Bare_Lkt_Node_Array_Access;
Cast_Expr : Bare_Lkt_Node;
Cast_Result : Bare_Full_Decl;
Sym : Symbol_Type;
Fld : Boolean;
Scope_Result : Boolean;
Result_Var : Boolean;
Map_Result : Bare_Lkt_Node_Array_Access;
Get_Result : Bare_Lkt_Node;

            procedure Finalizer_Scope_41 is
            begin
                     Dec_Ref (Node_Parents);
                     Dec_Ref (Map_Result);
            end Finalizer_Scope_41;


begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         --# expr-start 86 '<at at nodes.lkt:217:9>' Get_Result nodes.lkt:217

--# expr-start 85 '<Map at nodes.lkt:217:9>' Map_Result nodes.lkt:217








   

   --# expr-start 81 '<FieldAccess for parents at nodes.lkt:217:9>' Node_Parents nodes.lkt:217







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;



Node_Parents := Parents (Self, True); 
--# expr-done 81

   
      declare
         Map_Result_Vec : Bare_Lkt_Node_Vectors.Vector;
      begin
   

   

      

      declare
         
         Collection : constant Bare_Lkt_Node_Array_Access := Node_Parents;
      begin
         for Item_0 of
               Collection.Items
         loop

            
   --# scope-start


               --# bind p Item_0

            
         


--# expr-start 82 '<Cast to FullDecl at nodes.lkt:218:20>' Cast_Result nodes.lkt:218






Cast_Expr := Item_0; 



   if Cast_Expr = null
      or else Cast_Expr.Kind in Lkt_Full_Decl_Range
   then
      
      Cast_Result := Cast_Expr;

   else
         Cast_Result := No_Bare_Lkt_Node;
   end if;


--# expr-done 82
Var_Expr_1 := Cast_Result;





if Var_Expr_1 /= No_Bare_Lkt_Node then
   



   --# scope-start


   --# bind fd Var_Expr_1

--# expr-start 84 '<FieldAccess for has_annotation at nodes.lkt:218:46>' Fld nodes.lkt:218







   if Var_Expr_1 = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# expr-start 83 '<Symbol invalid at nodes.lkt:218:64>' Sym nodes.lkt:218
Sym := Precomputed_Symbol (Precomputed_Symbol_Table (Self.Unit.Context.Symbols), Precomputed_Sym_Invalid); 
--# expr-done 83
--# property-call-start FullDecl.has_annotation
Fld := Liblktlang.Implementation.Full_Decl_P_Has_Annotation (Node => Var_Expr_1, Name => Sym);
--# end
--# expr-done 84
Scope_Result := Fld;


   --# end


   Result_Var := Scope_Result;
else
   
   Result_Var := False;
end if;



         if Result_Var then
            
         
      
      

         declare
            Item_To_Append : constant Bare_Lkt_Node := Item_0;
         begin
            Bare_Lkt_Node_Vectors.Append (Map_Result_Vec, Item_To_Append);
         end;
   
   
         end if;
   

            
   --# end



         end loop;
      end;
   

   

         Map_Result := Create_Bare_Lkt_Node_Array
           (Items_Count => Natural (Bare_Lkt_Node_Vectors.Length (Map_Result_Vec)));
         for I in Map_Result.Items'Range loop
            Map_Result.Items (I) := Bare_Lkt_Node_Vectors.Get
              (Map_Result_Vec,
               I + Bare_Lkt_Node_Vectors.Index_Type'First - Map_Result.Items'First);
         end loop;
         Bare_Lkt_Node_Vectors.Destroy (Map_Result_Vec);

      end;
   



--# expr-done 85

Neg := -1; 

Get_Result := Get (Self, Map_Result, Neg, True); 
--# expr-done 86

         Property_Result := Get_Result;
         
   --# end
      Finalizer_Scope_41;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_41;




            raise;
      end;



   return Property_Result;
end Lkt_Node_P_Topmost_Invalid_Decl;
--# end

   







--# property-start LktNode.nameres_diagnostics nodes.lkt:226
pragma Warnings (Off, "is not referenced");
 function Lkt_Node_P_Nameres_Diagnostics
  
  (Node : Bare_Lkt_Node
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Internal_Solver_Diagnostic_Array_Access
is
   Self : Bare_Lkt_Node  := Bare_Lkt_Node (Node);
     Ent : Internal_Entity :=
       Internal_Entity'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Internal_Solver_Diagnostic_Array_Access;

      
            procedure Finalizer_Scope_42 with Inline_Always;

      Fld : Internal_Solver_Result := No_Solver_Result;
Fld_1 : Internal_Solver_Diagnostic_Array_Access;

            procedure Finalizer_Scope_42 is
            begin
                     Dec_Ref (Fld);
                     Dec_Ref (Fld_1);
            end Finalizer_Scope_42;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

            Populate_Lexical_Env_For_Unit (Self);
      end if;


      begin
         
   --# scope-start

         --# expr-start 88 '<FieldAccess for diagnostics at nodes.lkt:227:9>' Fld_1 nodes.lkt:227



--# expr-start 87 '<FieldAccess for solve_equation at nodes.lkt:227:9>' Fld nodes.lkt:227







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start LktNode.solve_equation
Fld := Liblktlang.Implementation.Lkt_Node_P_Solve_Equation (Node => Ent.Node, E_Info => Ent.Info);
--# end
--# expr-done 87





Fld_1 := Fld.Diagnostics;
Inc_Ref (Fld_1);
--# expr-done 88

         Property_Result := Fld_1;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_42;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_42;




            raise;
      end;



   return Property_Result;
end Lkt_Node_P_Nameres_Diagnostics;
--# end

   







--# property-start LktNode.solve_equation nodes.lkt:233
pragma Warnings (Off, "is not referenced");
 function Lkt_Node_P_Solve_Equation
  
  (Node : Bare_Lkt_Node
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Internal_Solver_Result
is
   Self : Bare_Lkt_Node  := Bare_Lkt_Node (Node);
     Ent : Internal_Entity :=
       Internal_Entity'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Internal_Solver_Result;

      
            procedure Finalizer_Scope_43 with Inline_Always;

      Fld : Logic_Equation;
Solve_Result : Internal_Solver_Result := No_Solver_Result;

            procedure Finalizer_Scope_43 is
            begin
                     Dec_Ref (Fld);
                     Dec_Ref (Solve_Result);
            end Finalizer_Scope_43;

      
      Mmz_Handle : Memoization_Handle;
      Mmz_Val    : Mmz_Value;

      Mmz_Stored : Boolean;
      --  Whether the memoization couple was actually stored. Used to determine
      --  whether to inc-ref the memoized value.

      function Create_Mmz_Key return Mmz_Key;
      --  Create a memoization key for this property call and return it

      --------------------
      -- Create_Mmz_Key --
      --------------------

      function Create_Mmz_Key return Mmz_Key is
      begin
         return Mmz_K : Mmz_Key :=
           (Property => Mmz_Bare_Lkt_Node_Lkt_Node_P_Solve_Equation,
            Items    => new Mmz_Key_Array (1 ..  2))
         do
            Mmz_K.Items (1) := (Kind => Mmz_Bare_Lkt_Node,
                                As_Bare_Lkt_Node => Self);
               Mmz_K.Items (2) :=
                 (Kind => Mmz_Internal_Entity_Info,
                  As_Internal_Entity_Info => E_Info);
         end return;
      end Create_Mmz_Key;

begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;

      if Self /= null then

         if not Self.Unit.Context.In_Populate_Lexical_Env then

            if Find_Memoized_Value
              (Self.Unit, Mmz_Handle, Mmz_Val, Create_Mmz_Key'Access)
            then
               --# memoization-lookup

               if Mmz_Val.Kind = Mmz_Evaluating then
                  --# memoization-return
                  Raise_Property_Exception
                    (Self,
                     Property_Error'Identity,
                     "Infinite recursion detected");

               elsif Mmz_Val.Kind = Mmz_Error then
                  --# memoization-return
                  Reraise_Memoized_Error (Mmz_Val);

               else
                  Property_Result := Mmz_Val.As_Internal_Solver_Result;
                     Inc_Ref (Property_Result);

                  --# memoization-return
                  return Property_Result;
               end if;
               --# end
            end if;

         end if;
      end if;

      begin
         
   --# scope-start

         --# expr-start 90 '<solve_with_diagnostics at nodes.lkt:234:9>' Solve_Result nodes.lkt:234
--# expr-start 89 '<FieldAccess for xref_equation at nodes.lkt:234:9>' Fld nodes.lkt:234







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]LktNode.xref_equation'
Fld := Liblktlang.Implementation.Dispatcher_Lkt_Node_P_Xref_Equation (Node => Ent.Node, E_Info => Ent.Info);
--# end
--# expr-done 89

Solve_Result := Solve_With_Diagnostics (Fld, Self); 
--# expr-done 90

         Property_Result := Solve_Result;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_43;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_43;


               if Self /= null then
                     if not Self.Unit.Context.In_Populate_Lexical_Env then
                        Add_Memoized_Error
                          (Self.Unit, Mmz_Handle, Exc, Mmz_Stored);
                     end if;
               end if;


            raise;
      end;

      if Self /= null then
         if not Self.Unit.Context.In_Populate_Lexical_Env then

            Mmz_Val := (Kind => Mmz_Internal_Solver_Result,
                        As_Internal_Solver_Result => Property_Result);
            Add_Memoized_Value (Self.Unit, Mmz_Handle, Mmz_Val, Mmz_Stored);
               if Mmz_Stored then
                  Inc_Ref (Property_Result);
               end if;

         end if;
      end if;



   return Property_Result;
end Lkt_Node_P_Solve_Equation;
--# end

   







--# property-start LktNode.solve_enclosing_context nodes.lkt:241
pragma Warnings (Off, "is not referenced");
 function Lkt_Node_P_Solve_Enclosing_Context
  
  (Node : Bare_Lkt_Node
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Internal_Solver_Result
is
   Self : Bare_Lkt_Node  := Bare_Lkt_Node (Node);
     Ent : Internal_Entity :=
       Internal_Entity'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Internal_Solver_Result;

      
            procedure Finalizer_Scope_44 with Inline_Always;
            procedure Finalizer_Scope_410 with Inline_Always;

      Local_Enclosing_Context : Internal_Entity;
Var_Expr_1 : Internal_Entity;
Fld : Internal_Entity_Array_Access;
Fld_1 : Boolean;
Find_Result : Internal_Entity;
Fld_2 : Internal_Solver_Result := No_Solver_Result;
Scope_Result : Internal_Solver_Result := No_Solver_Result;
Result_Var : Internal_Solver_Result := No_Solver_Result;
Let_Result : Internal_Solver_Result := No_Solver_Result;

            procedure Finalizer_Scope_44 is
            begin
                     Dec_Ref (Fld);
                     Dec_Ref (Scope_Result);
                     Dec_Ref (Result_Var);
                     Dec_Ref (Let_Result);
            end Finalizer_Scope_44;
            procedure Finalizer_Scope_410 is
            begin
                     Dec_Ref (Fld_2);
            end Finalizer_Scope_410;

      
      Mmz_Handle : Memoization_Handle;
      Mmz_Val    : Mmz_Value;

      Mmz_Stored : Boolean;
      --  Whether the memoization couple was actually stored. Used to determine
      --  whether to inc-ref the memoized value.

      function Create_Mmz_Key return Mmz_Key;
      --  Create a memoization key for this property call and return it

      --------------------
      -- Create_Mmz_Key --
      --------------------

      function Create_Mmz_Key return Mmz_Key is
      begin
         return Mmz_K : Mmz_Key :=
           (Property => Mmz_Bare_Lkt_Node_Lkt_Node_P_Solve_Enclosing_Context,
            Items    => new Mmz_Key_Array (1 ..  2))
         do
            Mmz_K.Items (1) := (Kind => Mmz_Bare_Lkt_Node,
                                As_Bare_Lkt_Node => Self);
               Mmz_K.Items (2) :=
                 (Kind => Mmz_Internal_Entity_Info,
                  As_Internal_Entity_Info => E_Info);
         end return;
      end Create_Mmz_Key;

begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

            Populate_Lexical_Env_For_Unit (Self);
      end if;

      if Self /= null then

         if not Self.Unit.Context.In_Populate_Lexical_Env then

            if Find_Memoized_Value
              (Self.Unit, Mmz_Handle, Mmz_Val, Create_Mmz_Key'Access)
            then
               --# memoization-lookup

               if Mmz_Val.Kind = Mmz_Evaluating then
                  --# memoization-return
                  Raise_Property_Exception
                    (Self,
                     Property_Error'Identity,
                     "Infinite recursion detected");

               elsif Mmz_Val.Kind = Mmz_Error then
                  --# memoization-return
                  Reraise_Memoized_Error (Mmz_Val);

               else
                  Property_Result := Mmz_Val.As_Internal_Solver_Result;
                     Inc_Ref (Property_Result);

                  --# memoization-return
                  return Property_Result;
               end if;
               --# end
            end if;

         end if;
      end if;

      begin
         
   --# scope-start

         --# expr-start 95 '<Let at nodes.lkt:242:9>' Let_Result nodes.lkt:242
--# scope-start
--# expr-start 93 '<Find at nodes.lkt:243:13>' Find_Result nodes.lkt:243








   

   --# expr-start 91 '<FieldAccess for parents at nodes.lkt:243:13>' Fld nodes.lkt:243







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;



Fld := Liblktlang.Implementation.Parents (Node => Ent.Node, With_Self => True, E_Info => Ent.Info);
--# expr-done 91

   
      Find_Result := No_Entity;
   

   

      

      declare
         
         Collection : constant Internal_Entity_Array_Access := Fld;
      begin
         for Item_0 of
               Collection.Items
         loop

            
   --# scope-start


               --# bind p Item_0

            
      --# expr-start 92 '<FieldAccess for xref_entry_point at nodes.lkt:243:40>' Fld_1 nodes.lkt:243







   if Item_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]LktNode.xref_entry_point'
Fld_1 := Liblktlang.Implementation.Dispatcher_Lkt_Node_P_Xref_Entry_Point (Node => Item_0.Node, E_Info => Item_0.Info);
--# end
--# expr-done 92
      if Fld_1 then
         Find_Result := Item_0; 
      end if;
   

            
   --# end


               exit when Fld_1;

         end loop;
      end;
   

   
   



--# expr-done 93
Local_Enclosing_Context := Find_Result; 
--# bind enclosing_context Local_Enclosing_Context




Var_Expr_1 := Local_Enclosing_Context;





if Var_Expr_1 /= No_Entity then
   



   --# scope-start


   

--# expr-start 94 '<FieldAccess for solve_equation at nodes.lkt:245:9>' Fld_2 nodes.lkt:245







   if Var_Expr_1.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start LktNode.solve_equation
Fld_2 := Liblktlang.Implementation.Lkt_Node_P_Solve_Equation (Node => Var_Expr_1.Node, E_Info => Var_Expr_1.Info);
--# end
--# expr-done 94
Scope_Result := Fld_2;
   Inc_Ref (Scope_Result);


   --# end
      Finalizer_Scope_410;


   Result_Var := Scope_Result;
else
   
   Result_Var := No_Solver_Result;
end if;

      Inc_Ref (Result_Var);


Let_Result := Result_Var; Inc_Ref (Let_Result);
--# end
--# expr-done 95

         Property_Result := Let_Result;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_44;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_44;
                     Finalizer_Scope_410;


               if Self /= null then
                     if not Self.Unit.Context.In_Populate_Lexical_Env then
                        Add_Memoized_Error
                          (Self.Unit, Mmz_Handle, Exc, Mmz_Stored);
                     end if;
               end if;


            raise;
      end;

      if Self /= null then
         if not Self.Unit.Context.In_Populate_Lexical_Env then

            Mmz_Val := (Kind => Mmz_Internal_Solver_Result,
                        As_Internal_Solver_Result => Property_Result);
            Add_Memoized_Value (Self.Unit, Mmz_Handle, Mmz_Val, Mmz_Stored);
               if Mmz_Stored then
                  Inc_Ref (Property_Result);
               end if;

         end if;
      end if;



   return Property_Result;
end Lkt_Node_P_Solve_Enclosing_Context;
--# end

   







--# property-start LktNode.expected_type_entry_point nodes.lkt:248
pragma Warnings (Off, "is not referenced");
 function Lkt_Node_P_Expected_Type_Entry_Point
  
  (Node : Bare_Lkt_Node
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Boolean
is
   Self : Bare_Lkt_Node  := Bare_Lkt_Node (Node);
     Ent : Internal_Entity :=
       Internal_Entity'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Boolean;

      

      Match_0 : Internal_Entity_Cast_Expr;
Match_1 : Internal_Entity_Isa;
Match_2 : Internal_Entity_Match_Expr;
Match_3 : Internal_Entity_Base_Dot_Expr;
Match_4 : Internal_Entity_Call_Expr;
Match_5 : Internal_Entity_Logic_Predicate;
Match_6 : Internal_Entity_Logic_Propagate;
Match_7 : Internal_Entity_Paren_Expr;
Match_8 : Internal_Entity_Lambda_Expr;
Match_9 : Internal_Entity;
Fld : Internal_Entity;
Fld_1 : Boolean;
Fld_2 : Boolean;
Match_Prefix : Internal_Entity;
Cast_Result : Internal_Entity_Cast_Expr;
Let_Result : Boolean;
Scope_Result : Boolean;
Cast_Result_1 : Internal_Entity_Isa;
Let_Result_1 : Boolean;
Scope_Result_1 : Boolean;
Cast_Result_2 : Internal_Entity_Match_Expr;
Let_Result_2 : Boolean;
Scope_Result_2 : Boolean;
Cast_Result_3 : Internal_Entity_Base_Dot_Expr;
Let_Result_3 : Boolean;
Scope_Result_3 : Boolean;
Cast_Result_4 : Internal_Entity_Call_Expr;
Let_Result_4 : Boolean;
Scope_Result_4 : Boolean;
Cast_Result_5 : Internal_Entity_Logic_Predicate;
Let_Result_5 : Boolean;
Scope_Result_5 : Boolean;
Cast_Result_6 : Internal_Entity_Logic_Propagate;
Let_Result_6 : Boolean;
Scope_Result_6 : Boolean;
Cast_Result_7 : Internal_Entity_Paren_Expr;
Let_Result_7 : Boolean;
Scope_Result_7 : Boolean;
Cast_Result_8 : Internal_Entity_Lambda_Expr;
Let_Result_8 : Boolean;
Scope_Result_8 : Boolean;
Cast_Result_9 : Internal_Entity;
Let_Result_9 : Boolean;
Scope_Result_9 : Boolean;
Match_Result : Boolean;



begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         --# expr-start 99 '<Match at nodes.lkt:248:45>' Match_Result nodes.lkt:248










   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Match_Prefix := Ent; 

case Lkt_Lkt_Node (Match_Prefix.Node.Kind) is
         when Lkt_Cast_Expr =>
            



   --# scope-start



--# scope-start









   
      Cast_Result := Create_Internal_Entity_Cast_Expr
        (Node => Match_Prefix.Node,
         Info => Match_Prefix.Info);


Match_0 := Cast_Result; 
--# bind _ Match_0

Let_Result := True; 
--# end
Scope_Result := Let_Result;


   --# end


            Match_Result := Scope_Result; 
         when Lkt_Isa =>
            



   --# scope-start



--# scope-start









   
      Cast_Result_1 := Create_Internal_Entity_Isa
        (Node => Match_Prefix.Node,
         Info => Match_Prefix.Info);


Match_1 := Cast_Result_1; 
--# bind _ Match_1

Let_Result_1 := True; 
--# end
Scope_Result_1 := Let_Result_1;


   --# end


            Match_Result := Scope_Result_1; 
         when Lkt_Match_Expr =>
            



   --# scope-start



--# scope-start









   
      Cast_Result_2 := Create_Internal_Entity_Match_Expr
        (Node => Match_Prefix.Node,
         Info => Match_Prefix.Info);


Match_2 := Cast_Result_2; 
--# bind _ Match_2

Let_Result_2 := True; 
--# end
Scope_Result_2 := Let_Result_2;


   --# end


            Match_Result := Scope_Result_2; 
         when Lkt_Dot_Expr .. Lkt_Null_Cond_Dotted_Name =>
            



   --# scope-start



--# scope-start









   
      Cast_Result_3 := Create_Internal_Entity_Base_Dot_Expr
        (Node => Match_Prefix.Node,
         Info => Match_Prefix.Info);


Match_3 := Cast_Result_3; 
--# bind _ Match_3

Let_Result_3 := True; 
--# end
Scope_Result_3 := Let_Result_3;


   --# end


            Match_Result := Scope_Result_3; 
         when Lkt_Call_Expr =>
            



   --# scope-start



--# scope-start









   
      Cast_Result_4 := Create_Internal_Entity_Call_Expr
        (Node => Match_Prefix.Node,
         Info => Match_Prefix.Info);


Match_4 := Cast_Result_4; 
--# bind _ Match_4

Let_Result_4 := True; 
--# end
Scope_Result_4 := Let_Result_4;


   --# end


            Match_Result := Scope_Result_4; 
         when Lkt_Logic_Predicate =>
            



   --# scope-start



--# scope-start









   
      Cast_Result_5 := Create_Internal_Entity_Logic_Predicate
        (Node => Match_Prefix.Node,
         Info => Match_Prefix.Info);


Match_5 := Cast_Result_5; 
--# bind _ Match_5

Let_Result_5 := True; 
--# end
Scope_Result_5 := Let_Result_5;


   --# end


            Match_Result := Scope_Result_5; 
         when Lkt_Logic_Propagate =>
            



   --# scope-start



--# scope-start









   
      Cast_Result_6 := Create_Internal_Entity_Logic_Propagate
        (Node => Match_Prefix.Node,
         Info => Match_Prefix.Info);


Match_6 := Cast_Result_6; 
--# bind _ Match_6

Let_Result_6 := True; 
--# end
Scope_Result_6 := Let_Result_6;


   --# end


            Match_Result := Scope_Result_6; 
         when Lkt_Paren_Expr =>
            



   --# scope-start



--# scope-start









   
      Cast_Result_7 := Create_Internal_Entity_Paren_Expr
        (Node => Match_Prefix.Node,
         Info => Match_Prefix.Info);


Match_7 := Cast_Result_7; 
--# bind p Match_7
--# expr-start 97 '<FieldAccess for expected_type_entry_point at nodes.lkt:256:30>' Fld_1 nodes.lkt:256



--# expr-start 96 '<parent at nodes.lkt:256:30>' Fld nodes.lkt:256







   if Match_7.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Liblktlang.Implementation.Parent (Node => Match_7.Node, E_Info => Match_7.Info);
--# expr-done 96



   if Fld.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start LktNode.expected_type_entry_point
Fld_1 := Liblktlang.Implementation.Lkt_Node_P_Expected_Type_Entry_Point (Node => Fld.Node, E_Info => Fld.Info);
--# end
--# expr-done 97
Let_Result_7 := Fld_1; 
--# end
Scope_Result_7 := Let_Result_7;


   --# end


            Match_Result := Scope_Result_7; 
         when Lkt_Lambda_Expr =>
            



   --# scope-start



--# scope-start









   
      Cast_Result_8 := Create_Internal_Entity_Lambda_Expr
        (Node => Match_Prefix.Node,
         Info => Match_Prefix.Info);


Match_8 := Cast_Result_8; 
--# bind p Match_8
--# expr-start 98 '<FieldAccess for xref_entry_point at nodes.lkt:257:31>' Fld_2 nodes.lkt:257







   if Match_8.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]LktNode.xref_entry_point'
Fld_2 := Liblktlang.Implementation.Dispatcher_Lkt_Node_P_Xref_Entry_Point (Node => Match_8.Node, E_Info => Match_8.Info);
--# end
--# expr-done 98
Let_Result_8 := Fld_2; 
--# end
Scope_Result_8 := Let_Result_8;


   --# end


            Match_Result := Scope_Result_8; 
         when Lkt_Lexer_Case_Rule_Cond_Alt .. Lkt_Array_Literal | Lkt_Logic_Propagate_Call | Lkt_Bin_Op .. Lkt_Block_Expr | Lkt_Error_On_Null .. Lkt_If_Expr | Lkt_Keep_Expr | Lkt_Big_Num_Lit .. Lkt_Logic_Expr | Lkt_Logic_Unify | Lkt_Not_Expr | Lkt_Raise_Expr .. Lkt_Var_Bind =>
            



   --# scope-start



--# scope-start









   
      Cast_Result_9 := Create_Internal_Entity
        (Node => Match_Prefix.Node,
         Info => Match_Prefix.Info);


Match_9 := Cast_Result_9; 
--# bind _ Match_9

Let_Result_9 := False; 
--# end
Scope_Result_9 := Let_Result_9;


   --# end


            Match_Result := Scope_Result_9; 
end case;

--# expr-done 99

         Property_Result := Match_Result;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Lkt_Node_P_Expected_Type_Entry_Point;
--# end

   







--# property-start LktNode.solve_expected_types nodes.lkt:263
pragma Warnings (Off, "is not referenced");
 function Lkt_Node_P_Solve_Expected_Types
  
  (Node : Bare_Lkt_Node
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Boolean
is
   Self : Bare_Lkt_Node  := Bare_Lkt_Node (Node);
     Ent : Internal_Entity :=
       Internal_Entity'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Boolean;

      
            procedure Finalizer_Scope_46 with Inline_Always;

      Fld : Logic_Equation;
Solve_Success : Boolean;

            procedure Finalizer_Scope_46 is
            begin
                     Dec_Ref (Fld);
            end Finalizer_Scope_46;

      
      Mmz_Handle : Memoization_Handle;
      Mmz_Val    : Mmz_Value;

      Mmz_Stored : Boolean;
      --  Whether the memoization couple was actually stored. Used to determine
      --  whether to inc-ref the memoized value.

      function Create_Mmz_Key return Mmz_Key;
      --  Create a memoization key for this property call and return it

      --------------------
      -- Create_Mmz_Key --
      --------------------

      function Create_Mmz_Key return Mmz_Key is
      begin
         return Mmz_K : Mmz_Key :=
           (Property => Mmz_Bare_Lkt_Node_Lkt_Node_P_Solve_Expected_Types,
            Items    => new Mmz_Key_Array (1 ..  2))
         do
            Mmz_K.Items (1) := (Kind => Mmz_Bare_Lkt_Node,
                                As_Bare_Lkt_Node => Self);
               Mmz_K.Items (2) :=
                 (Kind => Mmz_Internal_Entity_Info,
                  As_Internal_Entity_Info => E_Info);
         end return;
      end Create_Mmz_Key;

begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;

      if Self /= null then

         if not Self.Unit.Context.In_Populate_Lexical_Env then

            if Find_Memoized_Value
              (Self.Unit, Mmz_Handle, Mmz_Val, Create_Mmz_Key'Access)
            then
               --# memoization-lookup

               if Mmz_Val.Kind = Mmz_Evaluating then
                  --# memoization-return
                  Raise_Property_Exception
                    (Self,
                     Property_Error'Identity,
                     "Infinite recursion detected");

               elsif Mmz_Val.Kind = Mmz_Error then
                  --# memoization-return
                  Reraise_Memoized_Error (Mmz_Val);

               else
                  Property_Result := Mmz_Val.As_Boolean;

                  --# memoization-return
                  return Property_Result;
               end if;
               --# end
            end if;

         end if;
      end if;

      begin
         
   --# scope-start

         --# expr-start 101 '<solve at nodes.lkt:263:40>' Solve_Success nodes.lkt:263
--# expr-start 100 '<FieldAccess for expected_type_equation at nodes.lkt:263:40>' Fld nodes.lkt:263







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]LktNode.expected_type_equation'
Fld := Liblktlang.Implementation.Dispatcher_Lkt_Node_P_Expected_Type_Equation (Node => Ent.Node, E_Info => Ent.Info);
--# end
--# expr-done 100

Solve_Success := Solve_Wrapper (Fld, Self); 
--# expr-done 101

         Property_Result := Solve_Success;
         
   --# end
      Finalizer_Scope_46;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_46;


               if Self /= null then
                     if not Self.Unit.Context.In_Populate_Lexical_Env then
                        Add_Memoized_Error
                          (Self.Unit, Mmz_Handle, Exc, Mmz_Stored);
                     end if;
               end if;


            raise;
      end;

      if Self /= null then
         if not Self.Unit.Context.In_Populate_Lexical_Env then

            Mmz_Val := (Kind => Mmz_Boolean,
                        As_Boolean => Property_Result);
            Add_Memoized_Value (Self.Unit, Mmz_Handle, Mmz_Val, Mmz_Stored);

         end if;
      end if;



   return Property_Result;
end Lkt_Node_P_Solve_Expected_Types;
--# end

   







--# property-start LktNode.generic_type_entry_point nodes.lkt:265
pragma Warnings (Off, "is not referenced");
 function Lkt_Node_P_Generic_Type_Entry_Point
  
  (Node : Bare_Lkt_Node
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Boolean
is
   Self : Bare_Lkt_Node  := Bare_Lkt_Node (Node);
     Ent : Internal_Entity :=
       Internal_Entity'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Boolean;

      

      Is_A : Boolean;



begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         --# expr-start 102 '<IsA CallExpr, LogicPropagate, LogicPredicate at nodes.lkt:266:9>' Is_A nodes.lkt:266

Is_A := Ent.Node /= null 
and then Ent.Node.Kind in Lkt_Call_Expr_Range | Lkt_Logic_Propagate_Range | Lkt_Logic_Predicate_Range; 
--# expr-done 102

         Property_Result := Is_A;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Lkt_Node_P_Generic_Type_Entry_Point;
--# end

   







--# property-start LktNode.solve_generic_types nodes.lkt:270
pragma Warnings (Off, "is not referenced");
 function Lkt_Node_P_Solve_Generic_Types
  
  (Node : Bare_Lkt_Node
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Boolean
is
   Self : Bare_Lkt_Node  := Bare_Lkt_Node (Node);
     Ent : Internal_Entity :=
       Internal_Entity'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Boolean;

      
            procedure Finalizer_Scope_48 with Inline_Always;

      Fld : Logic_Equation;
Solve_Success : Boolean;

            procedure Finalizer_Scope_48 is
            begin
                     Dec_Ref (Fld);
            end Finalizer_Scope_48;

      
      Mmz_Handle : Memoization_Handle;
      Mmz_Val    : Mmz_Value;

      Mmz_Stored : Boolean;
      --  Whether the memoization couple was actually stored. Used to determine
      --  whether to inc-ref the memoized value.

      function Create_Mmz_Key return Mmz_Key;
      --  Create a memoization key for this property call and return it

      --------------------
      -- Create_Mmz_Key --
      --------------------

      function Create_Mmz_Key return Mmz_Key is
      begin
         return Mmz_K : Mmz_Key :=
           (Property => Mmz_Bare_Lkt_Node_Lkt_Node_P_Solve_Generic_Types,
            Items    => new Mmz_Key_Array (1 ..  2))
         do
            Mmz_K.Items (1) := (Kind => Mmz_Bare_Lkt_Node,
                                As_Bare_Lkt_Node => Self);
               Mmz_K.Items (2) :=
                 (Kind => Mmz_Internal_Entity_Info,
                  As_Internal_Entity_Info => E_Info);
         end return;
      end Create_Mmz_Key;

begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;

      if Self /= null then

         if not Self.Unit.Context.In_Populate_Lexical_Env then

            if Find_Memoized_Value
              (Self.Unit, Mmz_Handle, Mmz_Val, Create_Mmz_Key'Access)
            then
               --# memoization-lookup

               if Mmz_Val.Kind = Mmz_Evaluating then
                  --# memoization-return
                  Raise_Property_Exception
                    (Self,
                     Property_Error'Identity,
                     "Infinite recursion detected");

               elsif Mmz_Val.Kind = Mmz_Error then
                  --# memoization-return
                  Reraise_Memoized_Error (Mmz_Val);

               else
                  Property_Result := Mmz_Val.As_Boolean;

                  --# memoization-return
                  return Property_Result;
               end if;
               --# end
            end if;

         end if;
      end if;

      begin
         
   --# scope-start

         --# expr-start 104 '<solve at nodes.lkt:270:39>' Solve_Success nodes.lkt:270
--# expr-start 103 '<FieldAccess for generic_type_equation at nodes.lkt:270:39>' Fld nodes.lkt:270







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]LktNode.generic_type_equation'
Fld := Liblktlang.Implementation.Dispatcher_Lkt_Node_P_Generic_Type_Equation (Node => Ent.Node, E_Info => Ent.Info);
--# end
--# expr-done 103

Solve_Success := Solve_Wrapper (Fld, Self); 
--# expr-done 104

         Property_Result := Solve_Success;
         
   --# end
      Finalizer_Scope_48;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_48;


               if Self /= null then
                     if not Self.Unit.Context.In_Populate_Lexical_Env then
                        Add_Memoized_Error
                          (Self.Unit, Mmz_Handle, Exc, Mmz_Stored);
                     end if;
               end if;


            raise;
      end;

      if Self /= null then
         if not Self.Unit.Context.In_Populate_Lexical_Env then

            Mmz_Val := (Kind => Mmz_Boolean,
                        As_Boolean => Property_Result);
            Add_Memoized_Value (Self.Unit, Mmz_Handle, Mmz_Val, Mmz_Stored);

         end if;
      end if;



   return Property_Result;
end Lkt_Node_P_Solve_Generic_Types;
--# end

   







--# property-start LktNode.unmatched_argument nodes.lkt:275
pragma Warnings (Off, "is not referenced");
 function Lkt_Node_P_Unmatched_Argument
  
  (Node : Bare_Lkt_Node
      ; Callee_Type : Internal_Entity_Type_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Boolean
is
   Self : Bare_Lkt_Node  := Bare_Lkt_Node (Node);
     Ent : Internal_Entity :=
       Internal_Entity'(Node => Self, Info => E_Info);
      --# bind entity Ent

   

   --# bind callee_type Callee_Type

   Property_Result : Boolean;

      

      Var_Expr_2 : Internal_Entity_Function_Type;
Is_Null : Boolean;
Not_Val : Boolean;
Cast_Expr : Internal_Entity_Type_Decl;
Cast_Result : Internal_Entity_Function_Type;
Fld : Boolean;
Scope_Result : Boolean;
Result_Var : Boolean;
If_Result : Boolean;



begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         --# expr-start 109 '<BooleanBinaryOp Or at nodes.lkt:276:9>' If_Result nodes.lkt:276



--# expr-start 106 '<Not at nodes.lkt:276:9>' Not_Val nodes.lkt:276
--# expr-start 105 '<IsNull at nodes.lkt:276:13>' Is_Null nodes.lkt:276

Is_Null := Ent.Node = null; 
--# expr-done 105
Not_Val := not (Is_Null); 
--# expr-done 106
if Not_Val then
   
   If_Result := True;
else
   


--# expr-start 107 '<Cast to FunctionType at nodes.lkt:277:12>' Cast_Result nodes.lkt:277






Cast_Expr := Callee_Type; 



   if Cast_Expr.Node = null
      or else Cast_Expr.Node.Kind in Lkt_Function_Type_Range
   then
      
      Cast_Result := Create_Internal_Entity_Function_Type
        (Node => Cast_Expr.Node,
         Info => Cast_Expr.Info);

   else
         Cast_Result := No_Entity_Function_Type;
   end if;


--# expr-done 107
Var_Expr_2 := Cast_Result;





if Var_Expr_2 /= No_Entity_Function_Type then
   



   --# scope-start


   

--# expr-start 108 '<FieldAccess for should_ignore_constructor_arg at nodes.lkt:277:12>' Fld nodes.lkt:277







   if Var_Expr_2.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start FunctionType.should_ignore_constructor_arg
Fld := Liblktlang.Implementation.Function_Type_P_Should_Ignore_Constructor_Arg (Node => Var_Expr_2.Node, E_Info => Var_Expr_2.Info);
--# end
--# expr-done 108
Scope_Result := Fld;


   --# end


   Result_Var := Scope_Result;
else
   
   Result_Var := False;
end if;



   If_Result := Result_Var;
end if;



--# expr-done 109

         Property_Result := If_Result;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Lkt_Node_P_Unmatched_Argument;
--# end

   







--# property-start LktNode.function_type_helper nodes.lkt:281
pragma Warnings (Off, "is not referenced");
 function Lkt_Node_P_Function_Type_Helper
  
  (Node : Bare_Lkt_Node
      ; Args_Types : Internal_Entity_Type_Decl_Array_Access
      ; Return_Type : Internal_Entity_Type_Decl
      ; Origin : Internal_Entity_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Internal_Entity_Function_Type
is
   Self : Bare_Lkt_Node  := Bare_Lkt_Node (Node);
      --# bind self Self

   

   --# bind args_types Args_Types
   --# bind return_type Return_Type
   --# bind origin Origin

   Property_Result : Internal_Entity_Function_Type;

      

      New_Node : Bare_Function_Type;
As_Entity : Internal_Entity_Function_Type;
Is_Null : Boolean;
If_Result : Internal_Entity_Function_Type;
Cast_Expr : Internal_Entity_Type_Decl;
Cast_Result : Internal_Entity;
Cast_Expr_1 : Internal_Entity_Type_Decl;
Cast_Result_1 : Internal_Entity;
Is_Equiv : Boolean;
Quantifier_Result : Boolean;
Is_Null_1 : Boolean;
If_Result_1 : Boolean;
If_Result_2 : Internal_Entity_Function_Type;


      
      Mmz_Handle : Memoization_Handle;
      Mmz_Val    : Mmz_Value;

      Mmz_Stored : Boolean;
      --  Whether the memoization couple was actually stored. Used to determine
      --  whether to inc-ref the memoized value.

      function Create_Mmz_Key return Mmz_Key;
      --  Create a memoization key for this property call and return it

      --------------------
      -- Create_Mmz_Key --
      --------------------

      function Create_Mmz_Key return Mmz_Key is
      begin
         return Mmz_K : Mmz_Key :=
           (Property => Mmz_Bare_Lkt_Node_Lkt_Node_P_Function_Type_Helper,
            Items    => new Mmz_Key_Array (1 ..  5))
         do
            Mmz_K.Items (1) := (Kind => Mmz_Bare_Lkt_Node,
                                As_Bare_Lkt_Node => Self);
               Mmz_K.Items (2) := (Kind => Mmz_Internal_Entity_Type_Decl_Array_Access,
                                      As_Internal_Entity_Type_Decl_Array_Access => Args_Types);
                  Inc_Ref (Mmz_K.Items (2).As_Internal_Entity_Type_Decl_Array_Access);
               Mmz_K.Items (3) := (Kind => Mmz_Internal_Entity_Type_Decl,
                                      As_Internal_Entity_Type_Decl => Return_Type);
               Mmz_K.Items (4) := (Kind => Mmz_Internal_Entity_Decl,
                                      As_Internal_Entity_Decl => Origin);
               Mmz_K.Items (5) :=
                 (Kind => Mmz_Internal_Entity_Info,
                  As_Internal_Entity_Info => E_Info);
         end return;
      end Create_Mmz_Key;

begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;

      if Self /= null then

         if not Self.Unit.Context.In_Populate_Lexical_Env then

            if Find_Memoized_Value
              (Self.Unit, Mmz_Handle, Mmz_Val, Create_Mmz_Key'Access)
            then
               --# memoization-lookup

               if Mmz_Val.Kind = Mmz_Evaluating then
                  --# memoization-return
                  Raise_Property_Exception
                    (Self,
                     Property_Error'Identity,
                     "Infinite recursion detected");

               elsif Mmz_Val.Kind = Mmz_Error then
                  --# memoization-return
                  Reraise_Memoized_Error (Mmz_Val);

               else
                  Property_Result := Mmz_Val.As_Internal_Entity_Function_Type;

                  --# memoization-return
                  return Property_Result;
               end if;
               --# end
            end if;

         end if;
      end if;

      begin
         
   --# scope-start

         --# expr-start 116 '<If at nodes.lkt:286:9>' If_Result_2 nodes.lkt:286



--# expr-start 113 '<BooleanBinaryOp Or at nodes.lkt:286:12>' If_Result_1 nodes.lkt:286



--# expr-start 111 '<Contains at nodes.lkt:286:12>' Quantifier_Result nodes.lkt:286








   

   

   
      Quantifier_Result := False;
   

   

      

      declare
         
         Collection : constant Internal_Entity_Type_Decl_Array_Access := Args_Types;
      begin
         for Item_0 of
               Collection.Items
         loop

            
   --# scope-start


               --# bind item Item_0

            
      --# expr-start 110 '<Eq at ???>' Is_Equiv None






Cast_Expr := Item_0; 



   
      Cast_Result := Create_Internal_Entity
        (Node => Cast_Expr.Node,
         Info => Cast_Expr.Info);








Cast_Expr_1 := No_Entity_Type_Decl; 



   
      Cast_Result_1 := Create_Internal_Entity
        (Node => Cast_Expr_1.Node,
         Info => Cast_Expr_1.Info);


Is_Equiv := Equivalent (Cast_Result, Cast_Result_1); 
--# expr-done 110
      Quantifier_Result := Is_Equiv;
   

            
   --# end


               exit when Quantifier_Result;

         end loop;
      end;
   

   
   



--# expr-done 111
if Quantifier_Result then
   
   If_Result_1 := True;
else
   --# expr-start 112 '<IsNull at nodes.lkt:286:59>' Is_Null_1 nodes.lkt:286

Is_Null_1 := Return_Type.Node = null; 
--# expr-done 112
   If_Result_1 := Is_Null_1;
end if;



--# expr-done 113
if If_Result_1 then
   
   If_Result_2 := No_Entity_Function_Type;
else
   --# expr-start 115 '<as_entity at nodes.lkt:289:13>' If_Result nodes.lkt:289



--# expr-start 114 '<New FunctionType at nodes.lkt:289:13>' New_Node nodes.lkt:289



Inc_Ref (Args_Types);


if Is_Foreign_Strict (Self.Self_Env, Self) then
   Raise_Property_Exception
     (Self,
      Property_Error'Identity,
      "synthetic nodes cannot have foreign lexical envs");
end if;


New_Node := new Root_Node_Record
  (Lkt_Function_Type);
Initialize
  (Self => New_Node,
   Kind => Lkt_Function_Type,
   Unit => Self.Unit,

   Token_Start_Index => No_Token_Index,
   Token_End_Index   => No_Token_Index,

   Parent => Self,

   Self_Env => Self.Self_Env);
Register_Destroyable (Self.Unit, New_Node);


      New_Node.Function_Type_Args :=
         Args_Types;
      New_Node.Function_Type_Origin :=
         Origin;
      New_Node.Function_Type_Return_Type :=
         Return_Type;

--# expr-done 114
Is_Null := New_Node = null; 
if Is_Null then
   
   If_Result := No_Entity_Function_Type;
else
   

As_Entity := (Info => E_Info, Node => New_Node); 
   If_Result := As_Entity;
end if;



--# expr-done 115
   If_Result_2 := If_Result;
end if;



--# expr-done 116

         Property_Result := If_Result_2;
         
   --# end


      exception
         when Exc : Property_Error =>


               if Self /= null then
                     if not Self.Unit.Context.In_Populate_Lexical_Env then
                        Add_Memoized_Error
                          (Self.Unit, Mmz_Handle, Exc, Mmz_Stored);
                     end if;
               end if;


            raise;
      end;

      if Self /= null then
         if not Self.Unit.Context.In_Populate_Lexical_Env then

            Mmz_Val := (Kind => Mmz_Internal_Entity_Function_Type,
                        As_Internal_Entity_Function_Type => Property_Result);
            Add_Memoized_Value (Self.Unit, Mmz_Handle, Mmz_Val, Mmz_Stored);

         end if;
      end if;



   return Property_Result;
end Lkt_Node_P_Function_Type_Helper;
--# end

   







--# property-start LktNode.shed_rebindings nodes.lkt:298
pragma Warnings (Off, "is not referenced");
 function Lkt_Node_P_Shed_Rebindings
  
  (Node : Bare_Lkt_Node
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Internal_Entity
is
   Self : Bare_Lkt_Node  := Bare_Lkt_Node (Node);
     Ent : Internal_Entity :=
       Internal_Entity'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Internal_Entity;

      
            procedure Finalizer_Scope_51 with Inline_Always;

      Fld : Internal_Entity_Info;
Fld_1 : Lexical_Env := Empty_Env;
Shed_Entity_Info : Internal_Entity_Info;
New_Struct : Internal_Entity;

            procedure Finalizer_Scope_51 is
            begin
                     Dec_Ref (Fld_1);
            end Finalizer_Scope_51;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 120 '<New LktNode.entity at nodes.lkt:299:9>' New_Struct nodes.lkt:299
--# expr-start 119 '<shed_rebindings at nodes.lkt:301:18>' Shed_Entity_Info nodes.lkt:301
--# expr-start 117 '<FieldAccess for info at nodes.lkt:301:52>' Fld nodes.lkt:301









Fld := Ent.Info;
--# expr-done 117
--# expr-start 118 '<FieldAccess for children_env at nodes.lkt:301:18>' Fld_1 nodes.lkt:301







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_1 := Liblktlang.Implementation.Children_Env (Node => Self);
--# expr-done 118
Shed_Entity_Info := AST_Envs.Shed_Rebindings (Fld, Fld_1); 
--# expr-done 119

New_Struct := (Info => Shed_Entity_Info, Node => Self); 
--# expr-done 120

         Property_Result := New_Struct;
         
   --# end
      Finalizer_Scope_51;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_51;




            raise;
      end;



   return Property_Result;
end Lkt_Node_P_Shed_Rebindings;
--# end

   







--# property-start '[dispatcher]LktNode.xref_entry_point' dispatcher
pragma Warnings (Off, "is not referenced");
 function Dispatcher_Lkt_Node_P_Xref_Entry_Point
  
  (Node : Bare_Lkt_Node
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Boolean
is
   Self : Bare_Lkt_Node  := Bare_Lkt_Node (Node);
      --# bind self Self

   


   Property_Result : Boolean;



begin
   --# property-body-start

   pragma Assert (Self = Node);





      if Self = null then
         Raise_Property_Exception
           (Self, Property_Error'Identity, "dispatching on null node");
      end if;

      case Lkt_Lkt_Node (Self.Kind) is
               when Lkt_Lexer_Case_Rule_Cond_Alt .. Lkt_Self_Decl | Lkt_Generic_Decl .. Lkt_Trait_Decl | Lkt_Decl_Annotation_Params .. Lkt_Excludes_Null_Present | Lkt_Full_Decl .. Lkt_Param | Lkt_Var_Bind =>
                  --# property-call-start LktNode.xref_entry_point
                  Property_Result := Lkt_Node_P_Xref_Entry_Point
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Field_Decl .. Lkt_Lambda_Arg_Decl | Lkt_Val_Decl .. Lkt_Fun_Decl =>
                  --# property-call-start UserValDecl.xref_entry_point
                  Property_Result := User_Val_Decl_P_Xref_Entry_Point
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Enum_Lit_Decl =>
                  --# property-call-start EnumLitDecl.xref_entry_point
                  Property_Result := Enum_Lit_Decl_P_Xref_Entry_Point
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Dyn_Var_Decl =>
                  --# property-call-start DynVarDecl.xref_entry_point
                  Property_Result := Dyn_Var_Decl_P_Xref_Entry_Point
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Match_Val_Decl =>
                  --# property-call-start MatchValDecl.xref_entry_point
                  Property_Result := Match_Val_Decl_P_Xref_Entry_Point
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Env_Spec_Decl =>
                  --# property-call-start EnvSpecDecl.xref_entry_point
                  Property_Result := Env_Spec_Decl_P_Xref_Entry_Point
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Decl_Annotation =>
                  --# property-call-start DeclAnnotation.xref_entry_point
                  Property_Result := Decl_Annotation_P_Xref_Entry_Point
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Any_Of .. Lkt_Un_Op =>
                  --# property-call-start Expr.xref_entry_point
                  Property_Result := Expr_P_Xref_Entry_Point
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Default_List_Type_Ref .. Lkt_Simple_Type_Ref =>
                  --# property-call-start TypeRef.xref_entry_point
                  Property_Result := Type_Ref_P_Xref_Entry_Point
                    (Self
                        , E_Info
                    );
                  --# end
      end case;




   return Property_Result;
end Dispatcher_Lkt_Node_P_Xref_Entry_Point;
--# end

   







--# property-start '[dispatcher]LktNode.xref_equation' dispatcher
pragma Warnings (Off, "is not referenced");
 function Dispatcher_Lkt_Node_P_Xref_Equation
  
  (Node : Bare_Lkt_Node
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Logic_Equation
is
   Self : Bare_Lkt_Node  := Bare_Lkt_Node (Node);
      --# bind self Self

   


   Property_Result : Logic_Equation;



begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      if Self = null then
         Raise_Property_Exception
           (Self, Property_Error'Identity, "dispatching on null node");
      end if;

      case Lkt_Lkt_Node (Self.Kind) is
               when Lkt_Lexer_Case_Rule_Cond_Alt .. Lkt_Enum_Lit_Decl | Lkt_Dyn_Var_Decl .. Lkt_Match_Val_Decl | Lkt_Generic_Decl .. Lkt_Trait_Decl | Lkt_Decl_Annotation_Params .. Lkt_Excludes_Null_Present | Lkt_Grammar_Cut .. Lkt_Module_Ref_Id | Lkt_Full_Decl .. Lkt_Op_Plus | Lkt_Default_List_Type_Ref =>
                  --# property-call-start LktNode.xref_equation
                  Property_Result := Lkt_Node_P_Xref_Equation
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Field_Decl .. Lkt_Lambda_Arg_Decl =>
                  --# property-call-start ComponentDecl.xref_equation
                  Property_Result := Component_Decl_P_Xref_Equation
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Val_Decl =>
                  --# property-call-start ValDecl.xref_equation
                  Property_Result := Val_Decl_P_Xref_Equation
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Fun_Decl =>
                  --# property-call-start FunDecl.xref_equation
                  Property_Result := Fun_Decl_P_Xref_Equation
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Env_Spec_Decl =>
                  --# property-call-start EnvSpecDecl.xref_equation
                  Property_Result := Env_Spec_Decl_P_Xref_Equation
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Decl_Annotation =>
                  --# property-call-start DeclAnnotation.xref_equation
                  Property_Result := Decl_Annotation_P_Xref_Equation
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Any_Of =>
                  --# property-call-start AnyOf.xref_equation
                  Property_Result := Any_Of_P_Xref_Equation
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Array_Literal =>
                  --# property-call-start ArrayLiteral.xref_equation
                  Property_Result := Array_Literal_P_Xref_Equation
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Call_Expr | Lkt_Logic_Propagate_Call =>
                  --# property-call-start BaseCallExpr.xref_equation
                  Property_Result := Base_Call_Expr_P_Xref_Equation
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Logic_Predicate =>
                  --# property-call-start LogicPredicate.xref_equation
                  Property_Result := Logic_Predicate_P_Xref_Equation
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Dot_Expr .. Lkt_Null_Cond_Dotted_Name =>
                  --# property-call-start BaseDotExpr.xref_equation
                  Property_Result := Base_Dot_Expr_P_Xref_Equation
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Bin_Op =>
                  --# property-call-start BinOp.xref_equation
                  Property_Result := Bin_Op_P_Xref_Equation
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Block_Expr =>
                  --# property-call-start BlockExpr.xref_equation
                  Property_Result := Block_Expr_P_Xref_Equation
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Cast_Expr =>
                  --# property-call-start CastExpr.xref_equation
                  Property_Result := Cast_Expr_P_Xref_Equation
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Error_On_Null =>
                  --# property-call-start ErrorOnNull.xref_equation
                  Property_Result := Error_On_Null_P_Xref_Equation
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Generic_Instantiation =>
                  --# property-call-start GenericInstantiation.xref_equation
                  Property_Result := Generic_Instantiation_P_Xref_Equation
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Ref_Id =>
                  --# property-call-start RefId.xref_equation
                  Property_Result := Ref_Id_P_Xref_Equation
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_If_Expr =>
                  --# property-call-start IfExpr.xref_equation
                  Property_Result := If_Expr_P_Xref_Equation
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Isa =>
                  --# property-call-start Isa.xref_equation
                  Property_Result := Isa_P_Xref_Equation
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Keep_Expr =>
                  --# property-call-start KeepExpr.xref_equation
                  Property_Result := Keep_Expr_P_Xref_Equation
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Lambda_Expr =>
                  --# property-call-start LambdaExpr.xref_equation
                  Property_Result := Lambda_Expr_P_Xref_Equation
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Big_Num_Lit =>
                  --# property-call-start BigNumLit.xref_equation
                  Property_Result := Big_Num_Lit_P_Xref_Equation
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Char_Lit =>
                  --# property-call-start CharLit.xref_equation
                  Property_Result := Char_Lit_P_Xref_Equation
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Null_Lit =>
                  --# property-call-start NullLit.xref_equation
                  Property_Result := Null_Lit_P_Xref_Equation
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Num_Lit =>
                  --# property-call-start NumLit.xref_equation
                  Property_Result := Num_Lit_P_Xref_Equation
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Block_String_Lit .. Lkt_Pattern_Single_Line_String_Lit =>
                  --# property-call-start StringLit.xref_equation
                  Property_Result := String_Lit_P_Xref_Equation
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Logic_Assign =>
                  --# property-call-start LogicAssign.xref_equation
                  Property_Result := Logic_Assign_P_Xref_Equation
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Logic_Expr =>
                  --# property-call-start LogicExpr.xref_equation
                  Property_Result := Logic_Expr_P_Xref_Equation
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Logic_Propagate =>
                  --# property-call-start LogicPropagate.xref_equation
                  Property_Result := Logic_Propagate_P_Xref_Equation
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Logic_Unify =>
                  --# property-call-start LogicUnify.xref_equation
                  Property_Result := Logic_Unify_P_Xref_Equation
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Match_Expr =>
                  --# property-call-start MatchExpr.xref_equation
                  Property_Result := Match_Expr_P_Xref_Equation
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Not_Expr =>
                  --# property-call-start NotExpr.xref_equation
                  Property_Result := Not_Expr_P_Xref_Equation
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Paren_Expr =>
                  --# property-call-start ParenExpr.xref_equation
                  Property_Result := Paren_Expr_P_Xref_Equation
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Raise_Expr =>
                  --# property-call-start RaiseExpr.xref_equation
                  Property_Result := Raise_Expr_P_Xref_Equation
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Subscript_Expr .. Lkt_Null_Cond_Subscript_Expr =>
                  --# property-call-start SubscriptExpr.xref_equation
                  Property_Result := Subscript_Expr_P_Xref_Equation
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Try_Expr =>
                  --# property-call-start TryExpr.xref_equation
                  Property_Result := Try_Expr_P_Xref_Equation
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Un_Op =>
                  --# property-call-start UnOp.xref_equation
                  Property_Result := Un_Op_P_Xref_Equation
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Param =>
                  --# property-call-start Param.xref_equation
                  Property_Result := Param_P_Xref_Equation
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Function_Type_Ref =>
                  --# property-call-start FunctionTypeRef.xref_equation
                  Property_Result := Function_Type_Ref_P_Xref_Equation
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Generic_Type_Ref =>
                  --# property-call-start GenericTypeRef.xref_equation
                  Property_Result := Generic_Type_Ref_P_Xref_Equation
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Simple_Type_Ref =>
                  --# property-call-start SimpleTypeRef.xref_equation
                  Property_Result := Simple_Type_Ref_P_Xref_Equation
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Var_Bind =>
                  --# property-call-start VarBind.xref_equation
                  Property_Result := Var_Bind_P_Xref_Equation
                    (Self
                        , E_Info
                    );
                  --# end
      end case;




   return Property_Result;
end Dispatcher_Lkt_Node_P_Xref_Equation;
--# end

   







--# property-start '[dispatcher]LktNode.expected_type_equation' dispatcher
pragma Warnings (Off, "is not referenced");
 function Dispatcher_Lkt_Node_P_Expected_Type_Equation
  
  (Node : Bare_Lkt_Node
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Logic_Equation
is
   Self : Bare_Lkt_Node  := Bare_Lkt_Node (Node);
      --# bind self Self

   


   Property_Result : Logic_Equation;



begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      if Self = null then
         Raise_Property_Exception
           (Self, Property_Error'Identity, "dispatching on null node");
      end if;

      case Lkt_Lkt_Node (Self.Kind) is
               when Lkt_Lexer_Case_Rule_Cond_Alt .. Lkt_Excludes_Null_Present | Lkt_Full_Decl .. Lkt_Op_Plus | Lkt_Default_List_Type_Ref .. Lkt_Var_Bind =>
                  --# property-call-start LktNode.expected_type_equation
                  Property_Result := Lkt_Node_P_Expected_Type_Equation
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Any_Of .. Lkt_Array_Literal | Lkt_Bin_Op .. Lkt_Block_Expr | Lkt_Error_On_Null .. Lkt_If_Expr | Lkt_Keep_Expr | Lkt_Big_Num_Lit .. Lkt_Logic_Expr | Lkt_Logic_Unify .. Lkt_Not_Expr | Lkt_Raise_Expr .. Lkt_Un_Op =>
                  --# property-call-start Expr.expected_type_equation
                  Property_Result := Expr_P_Expected_Type_Equation
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Call_Expr | Lkt_Logic_Propagate_Call =>
                  --# property-call-start BaseCallExpr.expected_type_equation
                  Property_Result := Base_Call_Expr_P_Expected_Type_Equation
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Logic_Predicate =>
                  --# property-call-start LogicPredicate.expected_type_equation
                  Property_Result := Logic_Predicate_P_Expected_Type_Equation
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Dot_Expr .. Lkt_Null_Cond_Dotted_Name =>
                  --# property-call-start BaseDotExpr.expected_type_equation
                  Property_Result := Base_Dot_Expr_P_Expected_Type_Equation
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Cast_Expr =>
                  --# property-call-start CastExpr.expected_type_equation
                  Property_Result := Cast_Expr_P_Expected_Type_Equation
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Isa =>
                  --# property-call-start Isa.expected_type_equation
                  Property_Result := Isa_P_Expected_Type_Equation
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Lambda_Expr =>
                  --# property-call-start LambdaExpr.expected_type_equation
                  Property_Result := Lambda_Expr_P_Expected_Type_Equation
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Logic_Propagate =>
                  --# property-call-start LogicPropagate.expected_type_equation
                  Property_Result := Logic_Propagate_P_Expected_Type_Equation
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Paren_Expr =>
                  --# property-call-start ParenExpr.expected_type_equation
                  Property_Result := Paren_Expr_P_Expected_Type_Equation
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Param =>
                  --# property-call-start Param.expected_type_equation
                  Property_Result := Param_P_Expected_Type_Equation
                    (Self
                        , E_Info
                    );
                  --# end
      end case;




   return Property_Result;
end Dispatcher_Lkt_Node_P_Expected_Type_Equation;
--# end

   







--# property-start '[dispatcher]LktNode.generic_type_equation' dispatcher
pragma Warnings (Off, "is not referenced");
 function Dispatcher_Lkt_Node_P_Generic_Type_Equation
  
  (Node : Bare_Lkt_Node
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Logic_Equation
is
   Self : Bare_Lkt_Node  := Bare_Lkt_Node (Node);
      --# bind self Self

   


   Property_Result : Logic_Equation;



begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      if Self = null then
         Raise_Property_Exception
           (Self, Property_Error'Identity, "dispatching on null node");
      end if;

      case Lkt_Lkt_Node (Self.Kind) is
               when Lkt_Lexer_Case_Rule_Cond_Alt .. Lkt_Array_Literal | Lkt_Bin_Op .. Lkt_Module_Ref_Id | Lkt_If_Expr .. Lkt_Keep_Expr | Lkt_Big_Num_Lit .. Lkt_Logic_Expr | Lkt_Logic_Unify .. Lkt_Var_Bind =>
                  --# property-call-start LktNode.generic_type_equation
                  Property_Result := Lkt_Node_P_Generic_Type_Equation
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Call_Expr | Lkt_Logic_Propagate_Call =>
                  --# property-call-start BaseCallExpr.generic_type_equation
                  Property_Result := Base_Call_Expr_P_Generic_Type_Equation
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Logic_Predicate =>
                  --# property-call-start LogicPredicate.generic_type_equation
                  Property_Result := Logic_Predicate_P_Generic_Type_Equation
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Dot_Expr .. Lkt_Null_Cond_Dotted_Name =>
                  --# property-call-start BaseDotExpr.generic_type_equation
                  Property_Result := Base_Dot_Expr_P_Generic_Type_Equation
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Ref_Id =>
                  --# property-call-start RefId.generic_type_equation
                  Property_Result := Ref_Id_P_Generic_Type_Equation
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Lambda_Expr =>
                  --# property-call-start LambdaExpr.generic_type_equation
                  Property_Result := Lambda_Expr_P_Generic_Type_Equation
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Logic_Propagate =>
                  --# property-call-start LogicPropagate.generic_type_equation
                  Property_Result := Logic_Propagate_P_Generic_Type_Equation
                    (Self
                        , E_Info
                    );
                  --# end
      end case;




   return Property_Result;
end Dispatcher_Lkt_Node_P_Generic_Type_Equation;
--# end

   







--# property-start LktNode.can_reach compiled_types.py:0
pragma Warnings (Off, "is not referenced");
 function Lkt_Node_P_Can_Reach
  
  (Node : Bare_Lkt_Node
      ; From_Node : Bare_Lkt_Node
  )

   return Boolean
is
   Self : Bare_Lkt_Node  := Bare_Lkt_Node (Node);
      --# bind self Self

   

   --# bind from_node From_Node

   Property_Result : Boolean;

      

      Cast_Expr : Bare_Lkt_Node;
Cast_Result : Bare_Lkt_Node;
Is_Equal : Boolean;
Fld : Internal_Unit;
Fld_1 : Internal_Unit;
Is_Equal_1 : Boolean;
Not_Val : Boolean;
If_Result : Boolean;
Node_Comp : Boolean;
If_Result_1 : Boolean;
Let_Result : Boolean;



begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         --# expr-start 129 '<Block at ???>' Let_Result None
--# scope-start
--# expr-start 128 '<BinaryBooleanOperator Or at ???>' If_Result_1 None



--# expr-start 126 '<BinaryBooleanOperator Or at ???>' If_Result None



--# expr-start 121 '<Eq at ???>' Is_Equal None






Cast_Expr := From_Node; 



   
      Cast_Result := Cast_Expr;



Is_Equal := Cast_Result = No_Bare_Lkt_Node; 
--# expr-done 121
if Is_Equal then
   
   If_Result := True;
else
   --# expr-start 125 '<Not at ???>' Not_Val None
--# expr-start 124 '<Eq at ???>' Is_Equal_1 None
--# expr-start 122 '<FieldAccess for unit at ???>' Fld None







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Liblktlang.Implementation.Unit (Node => Self);
--# expr-done 122
--# expr-start 123 '<FieldAccess for unit at ???>' Fld_1 None







   if From_Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_1 := Liblktlang.Implementation.Unit (Node => From_Node);
--# expr-done 123
Is_Equal_1 := Fld = Fld_1; 
--# expr-done 124
Not_Val := not (Is_Equal_1); 
--# expr-done 125
   If_Result := Not_Val;
end if;



--# expr-done 126
if If_Result then
   
   If_Result_1 := True;
else
   --# expr-start 127 '<OrderingTest '"'"'lt'"'"' at ???>' Node_Comp None



Node_Comp := Compare (Self, Self, From_Node, Less_Than); 
--# expr-done 127
   If_Result_1 := Node_Comp;
end if;



--# expr-done 128
Let_Result := If_Result_1; 
--# end
--# expr-done 129

         Property_Result := Let_Result;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Lkt_Node_P_Can_Reach;
--# end

   







--# property-start LktNode.xref_entry_point nodes.lkt:308
pragma Warnings (Off, "is not referenced");
 function Lkt_Node_P_Xref_Entry_Point
  
  (Node : Bare_Lkt_Node
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Boolean
is
   Self : Bare_Lkt_Node  := Bare_Lkt_Node (Node);
      --# bind self Self

   


   Property_Result : Boolean;

      

      



begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         

         Property_Result := False;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Lkt_Node_P_Xref_Entry_Point;
--# end

   







--# property-start LktNode.xref_equation nodes.lkt:312
pragma Warnings (Off, "is not referenced");
 function Lkt_Node_P_Xref_Equation
  
  (Node : Bare_Lkt_Node
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Logic_Equation
is
   Self : Bare_Lkt_Node  := Bare_Lkt_Node (Node);
      --# bind self Self

   


   Property_Result : Logic_Equation;

      

      



begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         

         Property_Result := raise Property_Error with "Property LktNode.xref_equation not implemented";
            Inc_Ref (Property_Result);
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Lkt_Node_P_Xref_Equation;
--# end

   







--# property-start LktNode.expected_type_equation nodes.lkt:318
pragma Warnings (Off, "is not referenced");
 function Lkt_Node_P_Expected_Type_Equation
  
  (Node : Bare_Lkt_Node
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Logic_Equation
is
   Self : Bare_Lkt_Node  := Bare_Lkt_Node (Node);
      --# bind self Self

   


   Property_Result : Logic_Equation;

      

      



begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         

         Property_Result := raise Property_Error with "Property LktNode.expected_type_equation not implemented";
            Inc_Ref (Property_Result);
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Lkt_Node_P_Expected_Type_Equation;
--# end

   







--# property-start LktNode.generic_type_equation nodes.lkt:324
pragma Warnings (Off, "is not referenced");
 function Lkt_Node_P_Generic_Type_Equation
  
  (Node : Bare_Lkt_Node
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Logic_Equation
is
   Self : Bare_Lkt_Node  := Bare_Lkt_Node (Node);
      --# bind self Self

   


   Property_Result : Logic_Equation;

      

      



begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         

         Property_Result := raise Property_Error with "Property LktNode.generic_type_equation not implemented";
            Inc_Ref (Property_Result);
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Lkt_Node_P_Generic_Type_Equation;
--# end


   
function Lkt_Node_P_Shed_Rebindings
  (E : Entity
  ) return Internal_Entity
is
   

      E_Info : Internal_Entity_Info :=
         Shed_Rebindings (E.Info, Children_Env (E.Node));
      
begin
   

   declare
      Result : constant Internal_Entity :=
         Lkt_Node_P_Shed_Rebindings (E.Node, E_Info);
   begin
         return (Node => Result.Node, Info => Result.Info);
   end;
end;


   


      

   --
   --  Primitives for Bare_Base_Lexer_Case_Rule_Alt
   --

   




      
   function Base_Lexer_Case_Rule_Alt_F_Send
     (Node : Bare_Base_Lexer_Case_Rule_Alt) return Bare_Lexer_Case_Rule_Send
   is
      

         Kind : constant Lkt_Base_Lexer_Case_Rule_Alt := Node.Kind;
   begin
         case Kind is
               when Lkt_Lexer_Case_Rule_Cond_Alt =>
                     
         return Node.Lexer_Case_Rule_Cond_Alt_F_Send;
      
               when Lkt_Lexer_Case_Rule_Default_Alt =>
                     
         return Node.Lexer_Case_Rule_Default_Alt_F_Send;
      
         end case;
   end;




   


      

   --
   --  Primitives for Bare_Lexer_Case_Rule_Cond_Alt
   --

   



      
      procedure Initialize_Fields_For_Lexer_Case_Rule_Cond_Alt
        (Self : Bare_Lexer_Case_Rule_Cond_Alt
         ; Lexer_Case_Rule_Cond_Alt_F_Cond_Exprs : Bare_Ref_Id_List
         ; Lexer_Case_Rule_Cond_Alt_F_Send : Bare_Lexer_Case_Rule_Send
        ) is
      begin

            Self.Lexer_Case_Rule_Cond_Alt_F_Cond_Exprs := Lexer_Case_Rule_Cond_Alt_F_Cond_Exprs;
            Self.Lexer_Case_Rule_Cond_Alt_F_Send := Lexer_Case_Rule_Cond_Alt_F_Send;
         

      end Initialize_Fields_For_Lexer_Case_Rule_Cond_Alt;

      
   function Lexer_Case_Rule_Cond_Alt_F_Cond_Exprs
     (Node : Bare_Lexer_Case_Rule_Cond_Alt) return Bare_Ref_Id_List
   is
      

   begin
         
         return Node.Lexer_Case_Rule_Cond_Alt_F_Cond_Exprs;
      
   end;




   


      

   --
   --  Primitives for Bare_Lexer_Case_Rule_Default_Alt
   --

   



      
      procedure Initialize_Fields_For_Lexer_Case_Rule_Default_Alt
        (Self : Bare_Lexer_Case_Rule_Default_Alt
         ; Lexer_Case_Rule_Default_Alt_F_Send : Bare_Lexer_Case_Rule_Send
        ) is
      begin

            Self.Lexer_Case_Rule_Default_Alt_F_Send := Lexer_Case_Rule_Default_Alt_F_Send;
         

      end Initialize_Fields_For_Lexer_Case_Rule_Default_Alt;




   


      

   --
   --  Primitives for Bare_Block_String_Line
   --

   







   


      

   --
   --  Primitives for Bare_Class_Qualifier
   --

   





   







--# property-start '[dispatcher]ClassQualifier.as_bool' dispatcher
pragma Warnings (Off, "is not referenced");
 function Dispatcher_Class_Qualifier_P_As_Bool
  
  (Node : Bare_Class_Qualifier
  )

   return Boolean
is
   Self : Bare_Class_Qualifier  := Bare_Class_Qualifier (Node);
      --# bind self Self

   


   Property_Result : Boolean;



begin
   --# property-body-start

   pragma Assert (Self = Node);





      if Self = null then
         Raise_Property_Exception
           (Self, Property_Error'Identity, "dispatching on null node");
      end if;

      case Lkt_Class_Qualifier (Self.Kind) is
               when Lkt_Class_Qualifier_Absent =>
                  --# property-call-start ClassQualifier.Absent.as_bool
                  Property_Result := Class_Qualifier_Absent_P_As_Bool
                    (Self
                    );
                  --# end
               when Lkt_Class_Qualifier_Present =>
                  --# property-call-start ClassQualifier.Present.as_bool
                  Property_Result := Class_Qualifier_Present_P_As_Bool
                    (Self
                    );
                  --# end
      end case;




   return Property_Result;
end Dispatcher_Class_Qualifier_P_As_Bool;
--# end



   


      

   --
   --  Primitives for Bare_Class_Qualifier_Absent
   --

   





   







--# property-start ClassQualifier.Absent.as_bool nodes.lkt:360
pragma Warnings (Off, "is not referenced");
 function Class_Qualifier_Absent_P_As_Bool
  
  (Node : Bare_Class_Qualifier_Absent
  )

   return Boolean
is
   Self : Bare_Class_Qualifier_Absent  := Bare_Class_Qualifier_Absent (Node);
      --# bind self Self

   


   Property_Result : Boolean;

      

      



begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         

         Property_Result := False;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Class_Qualifier_Absent_P_As_Bool;
--# end



   


      

   --
   --  Primitives for Bare_Class_Qualifier_Present
   --

   





   







--# property-start ClassQualifier.Present.as_bool nodes.lkt:360
pragma Warnings (Off, "is not referenced");
 function Class_Qualifier_Present_P_As_Bool
  
  (Node : Bare_Class_Qualifier_Present
  )

   return Boolean
is
   Self : Bare_Class_Qualifier_Present  := Bare_Class_Qualifier_Present (Node);
      --# bind self Self

   


   Property_Result : Boolean;

      

      



begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         

         Property_Result := True;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Class_Qualifier_Present_P_As_Bool;
--# end



   


      

   --
   --  Primitives for Bare_Decl
   --

   



   

   

   

   

   

   

   


      procedure Decl_Pre_Env_Actions
        (Self            : Bare_Decl;
         State           : in out PLE_Node_State;
         Add_To_Env_Only : Boolean := False) is
      begin
            


   

      declare
         Resolver : constant Entity_Resolver :=
            null;

         

         Mappings : Internal_Env_Assoc_Array_Access :=
            Liblktlang.Implementation.Env_Mappings_0 (Node => 
Self);
      begin
         for Mapping of Mappings.Items loop

         Add_To_Env
           (Self,
            State,
            Mapping.Key,
            Mapping.Value,
            Mapping.Metadata,
            Resolver,
            Mapping.Dest_Env,
            DSL_Location => "nodes.lkt:960:9");

         end loop;
         Dec_Ref (Mappings);
      end;
   
   
      end;




      
   function Decl_F_Syn_Name
     (Node : Bare_Decl) return Bare_Def_Id
   is
      

         Kind : constant Lkt_Decl := Node.Kind;
   begin
         case Kind is
               when Lkt_Grammar_Rule_Decl =>
                     
         return Node.Grammar_Rule_Decl_F_Syn_Name;
      
               when Lkt_Synthetic_Lexer_Decl =>
                     return No_Bare_Lkt_Node;
               when Lkt_Node_Decl =>
                     return No_Bare_Lkt_Node;
               when Lkt_Self_Decl =>
                     return No_Bare_Lkt_Node;
               when Lkt_Enum_Lit_Decl =>
                     
         return Node.Enum_Lit_Decl_F_Syn_Name;
      
               when Lkt_Field_Decl =>
                     
         return Node.Field_Decl_F_Syn_Name;
      
               when Lkt_Fun_Arg_Decl =>
                     
         return Node.Fun_Arg_Decl_F_Syn_Name;
      
               when Lkt_Lambda_Arg_Decl =>
                     
         return Node.Lambda_Arg_Decl_F_Syn_Name;
      
               when Lkt_Dyn_Var_Decl =>
                     
         return Node.Dyn_Var_Decl_F_Syn_Name;
      
               when Lkt_Match_Val_Decl =>
                     
         return Node.Match_Val_Decl_F_Syn_Name;
      
               when Lkt_Val_Decl =>
                     
         return Node.Val_Decl_F_Syn_Name;
      
               when Lkt_Fun_Decl =>
                     
         return Node.Fun_Decl_F_Syn_Name;
      
               when Lkt_Env_Spec_Decl =>
                     
         return Node.Env_Spec_Decl_F_Syn_Name;
      
               when Lkt_Generic_Decl =>
                     return No_Bare_Lkt_Node;
               when Lkt_Grammar_Decl =>
                     
         return Node.Grammar_Decl_F_Syn_Name;
      
               when Lkt_Lexer_Decl =>
                     
         return Node.Lexer_Decl_F_Syn_Name;
      
               when Lkt_Lexer_Family_Decl =>
                     
         return Node.Lexer_Family_Decl_F_Syn_Name;
      
               when Lkt_Synth_Arg_Decl =>
                     return No_Bare_Lkt_Node;
               when Lkt_Synth_Fun_Decl =>
                     return No_Bare_Lkt_Node;
               when Lkt_Any_Type_Decl =>
                     return No_Bare_Lkt_Node;
               when Lkt_Enum_Class_Alt_Decl =>
                     
         return Node.Enum_Class_Alt_Decl_F_Syn_Name;
      
               when Lkt_Function_Type =>
                     return No_Bare_Lkt_Node;
               when Lkt_Generic_Formal_Type_Decl =>
                     
         return Node.Generic_Formal_Type_Decl_F_Syn_Name;
      
               when Lkt_Class_Decl | Lkt_Enum_Class_Decl =>
                     
         return Node.Basic_Class_Decl_F_Syn_Name;
      
               when Lkt_Enum_Type_Decl =>
                     
         return Node.Enum_Type_Decl_F_Syn_Name;
      
               when Lkt_Struct_Decl =>
                     
         return Node.Struct_Decl_F_Syn_Name;
      
               when Lkt_Trait_Decl =>
                     
         return Node.Trait_Decl_F_Syn_Name;
      
         end case;
   end;


   







--# property-start '[dispatcher]Decl.decl_type_name' dispatcher
pragma Warnings (Off, "is not referenced");
 function Dispatcher_Decl_P_Decl_Type_Name
  
  (Node : Bare_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return String_Type
is
   Self : Bare_Decl  := Bare_Decl (Node);
      --# bind self Self

   


   Property_Result : String_Type;



begin
   --# property-body-start

   pragma Assert (Self = Node);





      if Self = null then
         Raise_Property_Exception
           (Self, Property_Error'Identity, "dispatching on null node");
      end if;

      case Lkt_Decl (Self.Kind) is
               when Lkt_Grammar_Rule_Decl =>
                  --# property-call-start GrammarRuleDecl.decl_type_name
                  Property_Result := Grammar_Rule_Decl_P_Decl_Type_Name
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Synthetic_Lexer_Decl =>
                  --# property-call-start SyntheticLexerDecl.decl_type_name
                  Property_Result := Synthetic_Lexer_Decl_P_Decl_Type_Name
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Node_Decl =>
                  --# property-call-start NodeDecl.decl_type_name
                  Property_Result := Node_Decl_P_Decl_Type_Name
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Self_Decl =>
                  --# property-call-start SelfDecl.decl_type_name
                  Property_Result := Self_Decl_P_Decl_Type_Name
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Enum_Lit_Decl =>
                  --# property-call-start EnumLitDecl.decl_type_name
                  Property_Result := Enum_Lit_Decl_P_Decl_Type_Name
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Field_Decl =>
                  --# property-call-start FieldDecl.decl_type_name
                  Property_Result := Field_Decl_P_Decl_Type_Name
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Fun_Arg_Decl =>
                  --# property-call-start FunArgDecl.decl_type_name
                  Property_Result := Fun_Arg_Decl_P_Decl_Type_Name
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Lambda_Arg_Decl =>
                  --# property-call-start LambdaArgDecl.decl_type_name
                  Property_Result := Lambda_Arg_Decl_P_Decl_Type_Name
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Dyn_Var_Decl =>
                  --# property-call-start DynVarDecl.decl_type_name
                  Property_Result := Dyn_Var_Decl_P_Decl_Type_Name
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Match_Val_Decl =>
                  --# property-call-start MatchValDecl.decl_type_name
                  Property_Result := Match_Val_Decl_P_Decl_Type_Name
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Val_Decl =>
                  --# property-call-start ValDecl.decl_type_name
                  Property_Result := Val_Decl_P_Decl_Type_Name
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Fun_Decl =>
                  --# property-call-start FunDecl.decl_type_name
                  Property_Result := Fun_Decl_P_Decl_Type_Name
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Env_Spec_Decl =>
                  --# property-call-start EnvSpecDecl.decl_type_name
                  Property_Result := Env_Spec_Decl_P_Decl_Type_Name
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Generic_Decl =>
                  --# property-call-start GenericDecl.decl_type_name
                  Property_Result := Generic_Decl_P_Decl_Type_Name
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Grammar_Decl =>
                  --# property-call-start GrammarDecl.decl_type_name
                  Property_Result := Grammar_Decl_P_Decl_Type_Name
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Lexer_Decl =>
                  --# property-call-start LexerDecl.decl_type_name
                  Property_Result := Lexer_Decl_P_Decl_Type_Name
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Lexer_Family_Decl =>
                  --# property-call-start LexerFamilyDecl.decl_type_name
                  Property_Result := Lexer_Family_Decl_P_Decl_Type_Name
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Synth_Arg_Decl =>
                  --# property-call-start SynthArgDecl.decl_type_name
                  Property_Result := Synth_Arg_Decl_P_Decl_Type_Name
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Synth_Fun_Decl =>
                  --# property-call-start SynthFunDecl.decl_type_name
                  Property_Result := Synth_Fun_Decl_P_Decl_Type_Name
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Any_Type_Decl =>
                  --# property-call-start AnyTypeDecl.decl_type_name
                  Property_Result := Any_Type_Decl_P_Decl_Type_Name
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Enum_Class_Alt_Decl =>
                  --# property-call-start EnumClassAltDecl.decl_type_name
                  Property_Result := Enum_Class_Alt_Decl_P_Decl_Type_Name
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Function_Type =>
                  --# property-call-start FunctionType.decl_type_name
                  Property_Result := Function_Type_P_Decl_Type_Name
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Generic_Formal_Type_Decl =>
                  --# property-call-start GenericFormalTypeDecl.decl_type_name
                  Property_Result := Generic_Formal_Type_Decl_P_Decl_Type_Name
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Class_Decl =>
                  --# property-call-start ClassDecl.decl_type_name
                  Property_Result := Class_Decl_P_Decl_Type_Name
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Enum_Class_Decl =>
                  --# property-call-start EnumClassDecl.decl_type_name
                  Property_Result := Enum_Class_Decl_P_Decl_Type_Name
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Enum_Type_Decl =>
                  --# property-call-start EnumTypeDecl.decl_type_name
                  Property_Result := Enum_Type_Decl_P_Decl_Type_Name
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Struct_Decl =>
                  --# property-call-start StructDecl.decl_type_name
                  Property_Result := Struct_Decl_P_Decl_Type_Name
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Trait_Decl =>
                  --# property-call-start TraitDecl.decl_type_name
                  Property_Result := Trait_Decl_P_Decl_Type_Name
                    (Self
                        , E_Info
                    );
                  --# end
      end case;




   return Property_Result;
end Dispatcher_Decl_P_Decl_Type_Name;
--# end

   







--# property-start Decl.full_decl nodes.lkt:384
pragma Warnings (Off, "is not referenced");
 function Decl_P_Full_Decl
  
  (Node : Bare_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Internal_Entity_Full_Decl
is
   Self : Bare_Decl  := Bare_Decl (Node);
     Ent : Internal_Entity_Decl :=
       Internal_Entity_Decl'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Internal_Entity_Full_Decl;

      

      Match_0 : Internal_Entity_Full_Decl;
Match_1 : Internal_Entity_Generic_Decl;
Match_2 : Internal_Entity;
Fld : Internal_Entity;
Fld_1 : Internal_Entity_Full_Decl;
Match_Prefix : Internal_Entity;
Cast_Result : Internal_Entity_Full_Decl;
Let_Result : Internal_Entity_Full_Decl;
Scope_Result : Internal_Entity_Full_Decl;
Cast_Result_1 : Internal_Entity_Generic_Decl;
Let_Result_1 : Internal_Entity_Full_Decl;
Scope_Result_1 : Internal_Entity_Full_Decl;
Cast_Result_2 : Internal_Entity;
Let_Result_2 : Internal_Entity_Full_Decl;
Scope_Result_2 : Internal_Entity_Full_Decl;
Match_Result : Internal_Entity_Full_Decl;



begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         --# expr-start 132 '<Match at nodes.lkt:384:41>' Match_Result nodes.lkt:384






--# expr-start 130 '<parent at nodes.lkt:384:47>' Fld nodes.lkt:384







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Liblktlang.Implementation.Parent (Node => Ent.Node, E_Info => Ent.Info);
--# expr-done 130



   if Fld.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Match_Prefix := Fld; 

case Lkt_Lkt_Node (Match_Prefix.Node.Kind) is
         when Lkt_Full_Decl =>
            



   --# scope-start



--# scope-start









   
      Cast_Result := Create_Internal_Entity_Full_Decl
        (Node => Match_Prefix.Node,
         Info => Match_Prefix.Info);


Match_0 := Cast_Result; 
--# bind fd Match_0

Let_Result := Match_0; 
--# end
Scope_Result := Let_Result;


   --# end


            Match_Result := Scope_Result; 
         when Lkt_Generic_Decl =>
            



   --# scope-start



--# scope-start









   
      Cast_Result_1 := Create_Internal_Entity_Generic_Decl
        (Node => Match_Prefix.Node,
         Info => Match_Prefix.Info);


Match_1 := Cast_Result_1; 
--# bind gd Match_1
--# expr-start 131 '<FieldAccess for full_decl at nodes.lkt:386:33>' Fld_1 nodes.lkt:386







   if Match_1.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start Decl.full_decl
Fld_1 := Liblktlang.Implementation.Decl_P_Full_Decl (Node => Match_1.Node, E_Info => Match_1.Info);
--# end
--# expr-done 131
Let_Result_1 := Fld_1; 
--# end
Scope_Result_1 := Let_Result_1;


   --# end


            Match_Result := Scope_Result_1; 
         when Lkt_Lexer_Case_Rule_Cond_Alt .. Lkt_Env_Spec_Decl | Lkt_Grammar_Decl .. Lkt_Un_Op | Lkt_Grammar_List_Sep .. Lkt_Var_Bind =>
            



   --# scope-start



--# scope-start









   
      Cast_Result_2 := Create_Internal_Entity
        (Node => Match_Prefix.Node,
         Info => Match_Prefix.Info);


Match_2 := Cast_Result_2; 
--# bind _ Match_2

Let_Result_2 := No_Entity_Full_Decl; 
--# end
Scope_Result_2 := Let_Result_2;


   --# end


            Match_Result := Scope_Result_2; 
end case;

--# expr-done 132

         Property_Result := Match_Result;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Decl_P_Full_Decl;
--# end

   







--# property-start Decl.implements_node nodes.lkt:392
pragma Warnings (Off, "is not referenced");
 function Decl_P_Implements_Node
  
  (Node : Bare_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Boolean
is
   Self : Bare_Decl  := Bare_Decl (Node);
     Ent : Internal_Entity_Decl :=
       Internal_Entity_Decl'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Boolean;

      
            procedure Finalizer_Scope_428 with Inline_Always;

      Var_Expr_0 : Internal_Entity_Class_Decl;
Var_Expr_2 : Internal_Entity_Generic_Type_Ref;
Var_Expr_3 : Internal_Entity_Ref_Id;
Cast_Expr : Internal_Entity_Decl;
Cast_Result : Internal_Entity_Class_Decl;
Fld : Internal_Entity_Type_Ref_List;
Fld_1 : Bare_Type_Ref_List;
Fld_2 : Internal_Entity_Info;
Item_1 : Internal_Entity_Type_Ref;
Bare_Item_1 : Bare_Type_Ref;
Cast_Expr_1 : Internal_Entity_Type_Ref;
Cast_Result_1 : Internal_Entity_Generic_Type_Ref;
Fld_3 : Lexical_Env := Empty_Env;
Fld_4 : Internal_Entity_Expr;
Cast_Result_2 : Internal_Entity_Ref_Id;
Fld_5 : Bare_Ref_Id;
Sym : Symbol_Type;
Scope_Result : Symbol_Type;
Result_Var : Symbol_Type;
Env_Get_Result : Internal_Entity;
Cast_Result_3 : Internal_Entity_Generic_Decl;
Fld_6 : Internal_Entity_Decl;
Scope_Result_1 : Internal_Entity_Decl;
Result_Var_1 : Internal_Entity_Decl;
Fld_7 : Internal_Entity_Trait_Decl;
Cast_Result_4 : Internal_Entity;
Cast_Result_5 : Internal_Entity;
Is_Equiv : Boolean;
As_Entity : Internal_Entity_Type_Ref;
Is_Null : Boolean;
If_Result : Internal_Entity_Type_Ref;
Find_Result : Internal_Entity_Type_Ref;
Is_Null_1 : Boolean;
Not_Val : Boolean;
Scope_Result_2 : Boolean;
Result_Var_2 : Boolean;

            procedure Finalizer_Scope_428 is
            begin
                     Dec_Ref (Fld_3);
            end Finalizer_Scope_428;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         


--# expr-start 133 '<Cast to ClassDecl at nodes.lkt:393:9>' Cast_Result nodes.lkt:393






Cast_Expr := Ent; 



   if Cast_Expr.Node = null
      or else Cast_Expr.Node.Kind in Lkt_Class_Decl_Range
   then
      
      Cast_Result := Create_Internal_Entity_Class_Decl
        (Node => Cast_Expr.Node,
         Info => Cast_Expr.Info);

   else
         Cast_Result := No_Entity_Class_Decl;
   end if;


--# expr-done 133
Var_Expr_0 := Cast_Result;





if Var_Expr_0 /= No_Entity_Class_Decl then
   



   --# scope-start


   --# bind cd Var_Expr_0

--# expr-start 147 '<Not at nodes.lkt:395:13>' Not_Val nodes.lkt:395
--# expr-start 146 '<IsNull at nodes.lkt:395:17>' Is_Null_1 nodes.lkt:395
--# expr-start 145 '<Find at nodes.lkt:395:17>' Find_Result nodes.lkt:395








   

   --# expr-start 134 '<FieldAccess for traits at nodes.lkt:395:17>' Fld nodes.lkt:395







   if Var_Expr_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Create_Internal_Entity_Type_Ref_List (Node => Var_Expr_0.Node.Basic_Class_Decl_F_Traits, Info => Var_Expr_0.Info);
--# expr-done 134









Fld_1 := Fld.Node;

   
      Find_Result := No_Entity_Type_Ref;
   

   

      if Fld_1 = null then
         
      Find_Result := No_Entity_Type_Ref;
   
      else
         

      declare
         
         Collection : constant Bare_Type_Ref_List := Fld_1;
      begin
         for Untyped_Item_1 of
               Collection.Nodes (1 .. Children_Count (Collection))
         loop
                  
                  Bare_Item_1 := Untyped_Item_1; 
                  



Is_Null := Bare_Item_1 = null; 
if Is_Null then
   
   If_Result := No_Entity_Type_Ref;
else
   








Fld_2 := Fld.Info;

As_Entity := (Info => Fld_2, Node => Bare_Item_1); 
   If_Result := As_Entity;
end if;



                  Item_1 := If_Result; 

            
   --# scope-start


               --# bind t Item_1

            
      --# expr-start 144 '<Eq at nodes.lkt:397:17>' Is_Equiv nodes.lkt:397








--# expr-start 135 '<Cast to GenericTypeRef at nodes.lkt:397:17>' Cast_Result_1 nodes.lkt:397






Cast_Expr_1 := Item_1; 



   if Cast_Expr_1.Node = null
      or else Cast_Expr_1.Node.Kind in Lkt_Generic_Type_Ref_Range
   then
      
      Cast_Result_1 := Create_Internal_Entity_Generic_Type_Ref
        (Node => Cast_Expr_1.Node,
         Info => Cast_Expr_1.Info);

   else
         Cast_Result_1 := No_Entity_Generic_Type_Ref;
   end if;


--# expr-done 135
Var_Expr_2 := Cast_Result_1;





if Var_Expr_2 /= No_Entity_Generic_Type_Ref then
   



   --# scope-start


   --# bind gtr Var_Expr_2

--# expr-start 142 '<FieldAccess for decl at nodes.lkt:399:21>' Fld_6 nodes.lkt:399



--# expr-start 141 '<Cast to GenericDecl at nodes.lkt:399:21>' Cast_Result_3 nodes.lkt:399





--# expr-start 140 '<EnvGet at nodes.lkt:399:21>' Env_Get_Result nodes.lkt:399
--# expr-start 136 '<FieldAccess for children_env at nodes.lkt:399:21>' Fld_3 nodes.lkt:399







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_3 := Liblktlang.Implementation.Children_Env (Node => Self);
--# expr-done 136



--# expr-start 138 '<Cast to RefId at nodes.lkt:400:25>' Cast_Result_2 nodes.lkt:400





--# expr-start 137 '<FieldAccess for type_name at nodes.lkt:400:25>' Fld_4 nodes.lkt:400







   if Var_Expr_2.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_4 := Create_Internal_Entity_Expr (Node => Var_Expr_2.Node.Generic_Type_Ref_F_Type_Name, Info => Var_Expr_2.Info);
--# expr-done 137



   if Fld_4.Node = null
      or else Fld_4.Node.Kind in Lkt_Ref_Id_Range
   then
      
      Cast_Result_2 := Create_Internal_Entity_Ref_Id
        (Node => Fld_4.Node,
         Info => Fld_4.Info);

   else
         Cast_Result_2 := No_Entity_Ref_Id;
   end if;


--# expr-done 138
Var_Expr_3 := Cast_Result_2;





if Var_Expr_3 /= No_Entity_Ref_Id then
   



   --# scope-start


   

--# expr-start 139 '<GetSymbol at nodes.lkt:400:25>' Sym nodes.lkt:400









Fld_5 := Var_Expr_3.Node; 
Sym := Get_Symbol (Fld_5); 
--# expr-done 139
Scope_Result := Sym;


   --# end


   Result_Var := Scope_Result;
else
   
   Result_Var := No_Symbol;
end if;





Env_Get_Result := AST_Envs.Get_First (Self => Fld_3, Key => Thin (Result_Var), Lookup_Kind => To_Lookup_Kind_Type (Recursive), Categories => (Nocat => True)); 
--# expr-done 140



   if Env_Get_Result.Node = null
      or else Env_Get_Result.Node.Kind in Lkt_Generic_Decl_Range
   then
      
      Cast_Result_3 := Create_Internal_Entity_Generic_Decl
        (Node => Env_Get_Result.Node,
         Info => Env_Get_Result.Info);

   else
         Cast_Result_3 := No_Entity_Generic_Decl;
   end if;


--# expr-done 141



   if Cast_Result_3.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_6 := Create_Internal_Entity_Decl (Node => Cast_Result_3.Node.Generic_Decl_F_Decl, Info => Cast_Result_3.Info);
--# expr-done 142
Scope_Result_1 := Fld_6;


   --# end
      Finalizer_Scope_428;


   Result_Var_1 := Scope_Result_1;
else
   
   Result_Var_1 := No_Entity_Decl;
end if;






   
      Cast_Result_4 := Create_Internal_Entity
        (Node => Result_Var_1.Node,
         Info => Result_Var_1.Info);







--# expr-start 143 '<FieldAccess for node_trait at nodes.lkt:405:20>' Fld_7 nodes.lkt:405







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start LktNode.node_trait
Fld_7 := Liblktlang.Implementation.Lkt_Node_P_Node_Trait (Node => Self);
--# end
--# expr-done 143



   
      Cast_Result_5 := Create_Internal_Entity
        (Node => Fld_7.Node,
         Info => Fld_7.Info);


Is_Equiv := Equivalent (Cast_Result_4, Cast_Result_5); 
--# expr-done 144
      if Is_Equiv then
         Find_Result := Item_1; 
      end if;
   

            
   --# end


               exit when Is_Equiv;

         end loop;
      end;
   
      end if;

   
   



--# expr-done 145
Is_Null_1 := Find_Result.Node = null; 
--# expr-done 146
Not_Val := not (Is_Null_1); 
--# expr-done 147
Scope_Result_2 := Not_Val;


   --# end


   Result_Var_2 := Scope_Result_2;
else
   
   Result_Var_2 := False;
end if;




         Property_Result := Result_Var_2;
         
   --# end


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_428;




            raise;
      end;



   return Property_Result;
end Decl_P_Implements_Node;
--# end

   







--# property-start Decl.as_bare_decl nodes.lkt:413
pragma Warnings (Off, "is not referenced");
 function Decl_P_As_Bare_Decl
  
  (Node : Bare_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Internal_Entity_Decl
is
   Self : Bare_Decl  := Bare_Decl (Node);
     Ent : Internal_Entity_Decl :=
       Internal_Entity_Decl'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Internal_Entity_Decl;

      

      Fld : Bare_Decl;
As_Entity : Internal_Entity_Decl;
Is_Null : Boolean;
If_Result : Internal_Entity_Decl;



begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         --# expr-start 149 '<as_bare_entity at nodes.lkt:418:9>' If_Result nodes.lkt:418



--# expr-start 148 '<FieldAccess for node at nodes.lkt:418:9>' Fld nodes.lkt:418









Fld := Ent.Node;
--# expr-done 148
Is_Null := Fld = null; 
if Is_Null then
   
   If_Result := No_Entity_Decl;
else
   

As_Entity := (Info => No_Entity_Info, Node => Fld); 
   If_Result := As_Entity;
end if;



--# expr-done 149

         Property_Result := If_Result;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Decl_P_As_Bare_Decl;
--# end

   







--# property-start Decl.is_type_decl nodes.lkt:421
pragma Warnings (Off, "is not referenced");
 function Decl_P_Is_Type_Decl
  
  (Node : Bare_Decl
  )

   return Boolean
is
   Self : Bare_Decl  := Bare_Decl (Node);
      --# bind self Self

   


   Property_Result : Boolean;

      

      Is_A : Boolean;



begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         --# expr-start 150 '<IsA TypeDecl at nodes.lkt:421:32>' Is_A nodes.lkt:421

Is_A := Self /= null 
and then Self.Kind in Lkt_Type_Decl; 
--# expr-done 150

         Property_Result := Is_A;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Decl_P_Is_Type_Decl;
--# end

   







--# property-start Decl.is_defined nodes.lkt:424
pragma Warnings (Off, "is not referenced");
 function Decl_P_Is_Defined
  
  (Node : Bare_Decl
  )

   return Boolean
is
   Self : Bare_Decl  := Bare_Decl (Node);
      --# bind self Self

   


   Property_Result : Boolean;

      

      Is_Null : Boolean;
Not_Val : Boolean;



begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         --# expr-start 152 '<Not at nodes.lkt:424:30>' Not_Val nodes.lkt:424
--# expr-start 151 '<IsNull at nodes.lkt:424:34>' Is_Null nodes.lkt:424

Is_Null := Self = null; 
--# expr-done 151
Not_Val := not (Is_Null); 
--# expr-done 152

         Property_Result := Not_Val;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Decl_P_Is_Defined;
--# end

   







--# property-start Decl.infer_function_type nodes.lkt:431
pragma Warnings (Off, "is not referenced");
 function Decl_P_Infer_Function_Type
  
  (Node : Bare_Decl
      ; Expected_Call : Internal_Entity_Function_Type
      ; In_Logic_Call : Boolean
         := False
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Internal_Entity_Function_Type
is
   Self : Bare_Decl  := Bare_Decl (Node);
     Ent : Internal_Entity_Decl :=
       Internal_Entity_Decl'(Node => Self, Info => E_Info);
      --# bind entity Ent

   

   --# bind expected_call Expected_Call
   --# bind in_logic_call In_Logic_Call

   Property_Result : Internal_Entity_Function_Type;

      
            procedure Finalizer_Scope_84 with Inline_Always;
            procedure Finalizer_Scope_434 with Inline_Always;
            procedure Finalizer_Scope_435 with Inline_Always;

      Local_Origin : Internal_Entity_Decl;
Left_Var : Internal_Entity_Decl;
Local_Generic_Func : Internal_Entity_Function_Type;
Left_Var_1 : Internal_Entity_Function_Type;
Var_Expr_1 : Internal_Entity_Type_Decl_Array_Access;
Var_Expr_2 : Internal_Entity_Type_Decl;
Var_Expr_3 : Internal_Entity_Decl;
Var_Expr_4 : Internal_Entity_Function_Type;
Var_Expr_5 : Internal_Entity_Decl;
Var_Expr_6 : Internal_Entity_Type_Decl;
Cast_Expr : Internal_Entity_Decl;
Cast_Result : Internal_Entity_Function_Type;
Fld : Internal_Entity_Decl;
Scope_Result : Internal_Entity_Decl;
Result_Var : Internal_Entity_Decl;
Scope_Result_1 : Internal_Entity_Decl;
Result_Var_1 : Internal_Entity_Decl;
Cast_Expr_1 : Internal_Entity_Decl;
Cast_Result_1 : Internal_Entity_Function_Type;
Scope_Result_2 : Internal_Entity_Function_Type;
Fld_1 : Internal_Entity_Function_Type;
Scope_Result_3 : Internal_Entity_Function_Type;
Result_Var_2 : Internal_Entity_Function_Type;
Result_Var_3 : Internal_Entity_Function_Type;
Fld_2 : Internal_Entity_Function_Type;
Fld_3 : Internal_Entity_Function_Type;
If_Result : Internal_Entity_Function_Type;
Fld_4 : Internal_Entity;
Cast_Result_2 : Internal_Entity_Generic_Decl;
Fld_5 : Internal_Entity_Generic_Formal_Type_Decl_Array_Access;
Cast_Expr_2 : Internal_Entity_Generic_Formal_Type_Decl;
Cast_Result_3 : Internal_Entity_Type_Decl;
Cast_Expr_3 : Internal_Entity_Function_Type;
Cast_Result_4 : Internal_Entity_Type_Decl;
Fld_6 : Internal_Entity_Type_Decl_Array_Access;
Get_Result : Internal_Entity_Type_Decl;
Fld_7 : Internal_Entity_Type_Decl;
Cast_Expr_4 : Internal_Entity_Generic_Formal_Type_Decl;
Cast_Result_5 : Internal_Entity_Type_Decl;
Fld_8 : Boolean;
If_Result_1 : Internal_Entity_Type_Decl;
Scope_Result_4 : Internal_Entity_Type_Decl;
Result_Var_4 : Internal_Entity_Type_Decl;
Scope_Result_5 : Internal_Entity_Type_Decl;
Result_Var_5 : Internal_Entity_Type_Decl;
Scope_Result_6 : Internal_Entity_Type_Decl;
Result_Var_6 : Internal_Entity_Type_Decl;
Map_Result : Internal_Entity_Type_Decl_Array_Access;
Fld_9 : Internal_Entity_Decl;
Fld_10 : Internal_Entity_Function_Type;
Fld_11 : Internal_Entity_Function_Type;
If_Result_2 : Internal_Entity_Function_Type;
Scope_Result_7 : Internal_Entity_Function_Type;
Result_Var_7 : Internal_Entity_Function_Type;
Fld_12 : Boolean;
Not_Val : Boolean;
If_Result_3 : Internal_Entity_Function_Type;
Is_Null : Boolean;
Is_Null_1 : Boolean;
If_Result_4 : Boolean;
If_Result_5 : Internal_Entity_Function_Type;
Let_Result : Internal_Entity_Function_Type;
Let_Result_1 : Internal_Entity_Function_Type;

            procedure Finalizer_Scope_84 is
            begin
                     Dec_Ref (Fld_5);
                     Dec_Ref (Map_Result);
            end Finalizer_Scope_84;
            procedure Finalizer_Scope_434 is
            begin
                     Dec_Ref (Fld_6);
            end Finalizer_Scope_434;
            procedure Finalizer_Scope_435 is
            begin
                     Dec_Ref (Var_Expr_1);
            end Finalizer_Scope_435;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 181 '<Let at nodes.lkt:434:9>' Let_Result_1 nodes.lkt:434
--# scope-start






--# expr-start 153 '<Cast to FunctionType at nodes.lkt:434:23>' Cast_Result nodes.lkt:434






Cast_Expr := Ent; 



   if Cast_Expr.Node = null
      or else Cast_Expr.Node.Kind in Lkt_Function_Type_Range
   then
      
      Cast_Result := Create_Internal_Entity_Function_Type
        (Node => Cast_Expr.Node,
         Info => Cast_Expr.Info);

   else
         Cast_Result := No_Entity_Function_Type;
   end if;


--# expr-done 153
Var_Expr_4 := Cast_Result;





if Var_Expr_4 /= No_Entity_Function_Type then
   



   --# scope-start


   

--# expr-start 154 '<FieldAccess for origin at nodes.lkt:434:23>' Fld nodes.lkt:434







   if Var_Expr_4.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Var_Expr_4.Node.Function_Type_Origin;
--# expr-done 154
Scope_Result := Fld;


   --# end


   Result_Var := Scope_Result;
else
   
   Result_Var := No_Entity_Decl;
end if;



Left_Var := Result_Var;





if Left_Var /= No_Entity_Decl then
   



   --# scope-start


   


Scope_Result_1 := Left_Var;


   --# end


   Result_Var_1 := Scope_Result_1;
else
   
   Result_Var_1 := Ent;
end if;



Local_Origin := Result_Var_1; 
--# bind origin Local_Origin
--# expr-start 180 '<Let at nodes.lkt:435:9>' Let_Result nodes.lkt:435
--# scope-start



--# expr-start 155 '<Cast to FunctionType at nodes.lkt:435:28>' Cast_Result_1 nodes.lkt:435






Cast_Expr_1 := Ent; 



   if Cast_Expr_1.Node = null
      or else Cast_Expr_1.Node.Kind in Lkt_Function_Type_Range
   then
      
      Cast_Result_1 := Create_Internal_Entity_Function_Type
        (Node => Cast_Expr_1.Node,
         Info => Cast_Expr_1.Info);

   else
         Cast_Result_1 := No_Entity_Function_Type;
   end if;


--# expr-done 155
Left_Var_1 := Cast_Result_1;





if Left_Var_1 /= No_Entity_Function_Type then
   



   --# scope-start


   


Scope_Result_2 := Left_Var_1;


   --# end


   Result_Var_3 := Scope_Result_2;
else
   



Var_Expr_5 := Ent;





if Var_Expr_5 /= No_Entity_Decl then
   



   --# scope-start


   

--# expr-start 156 '<FieldAccess for function_type at nodes.lkt:435:54>' Fld_1 nodes.lkt:435







   if Var_Expr_5.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start Decl.function_type
Fld_1 := Liblktlang.Implementation.Decl_P_Function_Type (Node => Var_Expr_5.Node, E_Info => Var_Expr_5.Info);
--# end
--# expr-done 156
Scope_Result_3 := Fld_1;


   --# end


   Result_Var_2 := Scope_Result_3;
else
   
   Result_Var_2 := No_Entity_Function_Type;
end if;



   Result_Var_3 := Result_Var_2;
end if;



Local_Generic_Func := Result_Var_3; 
--# bind generic_func Local_Generic_Func
--# expr-start 179 '<If at nodes.lkt:437:9>' If_Result_5 nodes.lkt:437



--# expr-start 159 '<BooleanBinaryOp Or at nodes.lkt:437:12>' If_Result_4 nodes.lkt:437



--# expr-start 157 '<IsNull at nodes.lkt:437:12>' Is_Null nodes.lkt:437

Is_Null := Expected_Call.Node = null; 
--# expr-done 157
if Is_Null then
   
   If_Result_4 := True;
else
   --# expr-start 158 '<IsNull at nodes.lkt:437:37>' Is_Null_1 nodes.lkt:437

Is_Null_1 := Local_Origin.Node = null; 
--# expr-done 158
   If_Result_4 := Is_Null_1;
end if;



--# expr-done 159
if If_Result_4 then
   
   If_Result_5 := No_Entity_Function_Type;
else
   --# expr-start 178 '<If at nodes.lkt:437:9>' If_Result_3 nodes.lkt:437



--# expr-start 161 '<Not at nodes.lkt:439:14>' Not_Val nodes.lkt:439
--# expr-start 160 '<FieldAccess for is_generic at nodes.lkt:439:18>' Fld_12 nodes.lkt:439







   if Local_Origin.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start Decl.is_generic
Fld_12 := Liblktlang.Implementation.Decl_P_Is_Generic (Node => Local_Origin.Node, E_Info => Local_Origin.Info);
--# end
--# expr-done 160
Not_Val := not (Fld_12); 
--# expr-done 161
if Not_Val then
   --# expr-start 164 '<If at nodes.lkt:441:13>' If_Result nodes.lkt:441




if In_Logic_Call then
   --# expr-start 162 '<FieldAccess for logic_function_type at nodes.lkt:441:35>' Fld_2 nodes.lkt:441







   if Local_Origin.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start Decl.logic_function_type
Fld_2 := Liblktlang.Implementation.Decl_P_Logic_Function_Type (Node => Local_Origin.Node, E_Info => Local_Origin.Info);
--# end
--# expr-done 162
   If_Result := Fld_2;
else
   --# expr-start 163 '<FieldAccess for function_type at nodes.lkt:442:18>' Fld_3 nodes.lkt:442







   if Local_Origin.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start Decl.function_type
Fld_3 := Liblktlang.Implementation.Decl_P_Function_Type (Node => Local_Origin.Node, E_Info => Local_Origin.Info);
--# end
--# expr-done 163
   If_Result := Fld_3;
end if;



--# expr-done 164
   If_Result_3 := If_Result;
else
   


--# expr-start 174 '<FieldAccess for instantiate_generic_decl at nodes.lkt:444:13>' Fld_9 nodes.lkt:444







   if Local_Origin.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# expr-start 173 '<Map at nodes.lkt:445:17>' Map_Result nodes.lkt:445








   

   --# expr-start 167 '<FieldAccess for generic_formals at nodes.lkt:445:17>' Fld_5 nodes.lkt:445



--# expr-start 166 '<Cast to GenericDecl at nodes.lkt:445:17>' Cast_Result_2 nodes.lkt:445





--# expr-start 165 '<parent at nodes.lkt:445:17>' Fld_4 nodes.lkt:445







   if Local_Origin.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_4 := Liblktlang.Implementation.Parent (Node => Local_Origin.Node, E_Info => Local_Origin.Info);
--# expr-done 165



   if Fld_4.Node = null
      or else Fld_4.Node.Kind in Lkt_Generic_Decl_Range
   then
      
      Cast_Result_2 := Create_Internal_Entity_Generic_Decl
        (Node => Fld_4.Node,
         Info => Fld_4.Info);

   else
         Raise_Property_Exception
           (Self, Property_Error'Identity, "invalid object cast");
   end if;


--# expr-done 166



   if Cast_Result_2.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start GenericDecl.generic_formals
Fld_5 := Liblktlang.Implementation.Generic_Decl_P_Generic_Formals (Node => Cast_Result_2.Node, E_Info => Cast_Result_2.Info);
--# end
--# expr-done 167

   
      declare
         Map_Result_Vec : Internal_Entity_Type_Decl_Vectors.Vector;
      begin
   

   

      

      declare
         
         Collection : constant Internal_Entity_Generic_Formal_Type_Decl_Array_Access := Fld_5;
      begin
         for Item_0 of
               Collection.Items
         loop

            
   --# scope-start


               --# bind gf Item_0

            
         
         
      


--# expr-start 168 '<FieldAccess for find_types_that_replace_ty at nodes.lkt:447:21>' Fld_6 nodes.lkt:447







   if Expected_Call.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;








Cast_Expr_2 := Item_0; 



   
      Cast_Result_3 := Create_Internal_Entity_Type_Decl
        (Node => Cast_Expr_2.Node,
         Info => Cast_Expr_2.Info);








Cast_Expr_3 := Local_Generic_Func; 



   
      Cast_Result_4 := Create_Internal_Entity_Type_Decl
        (Node => Cast_Expr_3.Node,
         Info => Cast_Expr_3.Info);


--# property-call-start TypeDecl.find_types_that_replace_ty
Fld_6 := Liblktlang.Implementation.Type_Decl_P_Find_Types_That_Replace_Ty (Node => Expected_Call.Node, Ty => Cast_Result_3, Origin => Cast_Result_4, E_Info => Expected_Call.Info);
--# end
--# expr-done 168
Var_Expr_1 := Fld_6;

      Inc_Ref (Var_Expr_1);




if Var_Expr_1 /= No_Internal_Entity_Type_Decl_Array_Type then
   



   --# scope-start


   --# bind arr Var_Expr_1




--# expr-start 169 '<at at nodes.lkt:450:25>' Get_Result nodes.lkt:450




Get_Result := Get (Self, Var_Expr_1, 0, True); 
--# expr-done 169
Var_Expr_6 := Get_Result;





if Var_Expr_6 /= No_Entity_Type_Decl then
   



   --# scope-start


   




--# expr-start 170 '<FieldAccess for imprecise_common_ancestor_list at nodes.lkt:450:25>' Fld_7 nodes.lkt:450







   if Var_Expr_6.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;



--# property-call-start TypeDecl.imprecise_common_ancestor_list
Fld_7 := Liblktlang.Implementation.Type_Decl_P_Imprecise_Common_Ancestor_List (Node => Var_Expr_6.Node, Other_Types => Var_Expr_1, E_Info => Var_Expr_6.Info);
--# end
--# expr-done 170
Var_Expr_2 := Fld_7;





if Var_Expr_2 /= No_Entity_Type_Decl then
   



   --# scope-start


   --# bind t Var_Expr_2

--# expr-start 172 '<If at nodes.lkt:452:29>' If_Result_1 nodes.lkt:452



--# expr-start 171 '<FieldAccess for matching_type at nodes.lkt:452:32>' Fld_8 nodes.lkt:452







   if Var_Expr_2.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;








Cast_Expr_4 := Item_0; 



   
      Cast_Result_5 := Create_Internal_Entity_Type_Decl
        (Node => Cast_Expr_4.Node,
         Info => Cast_Expr_4.Info);


--# property-call-start TypeDecl.matching_type
Fld_8 := Liblktlang.Implementation.Type_Decl_P_Matching_Type (Node => Var_Expr_2.Node, Other => Cast_Result_5, E_Info => Var_Expr_2.Info);
--# end
--# expr-done 171
if Fld_8 then
   
   If_Result_1 := No_Entity_Type_Decl;
else
   
   If_Result_1 := Var_Expr_2;
end if;



--# expr-done 172
Scope_Result_4 := If_Result_1;


   --# end


   Result_Var_4 := Scope_Result_4;
else
   
   Result_Var_4 := No_Entity_Type_Decl;
end if;



Scope_Result_5 := Result_Var_4;


   --# end


   Result_Var_5 := Scope_Result_5;
else
   
   Result_Var_5 := No_Entity_Type_Decl;
end if;



Scope_Result_6 := Result_Var_5;


   --# end
      Finalizer_Scope_435;


   Result_Var_6 := Scope_Result_6;
else
   
   Result_Var_6 := No_Entity_Type_Decl;
end if;



      

         declare
            Item_To_Append : constant Internal_Entity_Type_Decl := Result_Var_6;
         begin
            Internal_Entity_Type_Decl_Vectors.Append (Map_Result_Vec, Item_To_Append);
         end;
   
   
   

            
   --# end
      Finalizer_Scope_434;



         end loop;
      end;
   

   

         Map_Result := Create_Internal_Entity_Type_Decl_Array
           (Items_Count => Natural (Internal_Entity_Type_Decl_Vectors.Length (Map_Result_Vec)));
         for I in Map_Result.Items'Range loop
            Map_Result.Items (I) := Internal_Entity_Type_Decl_Vectors.Get
              (Map_Result_Vec,
               I + Internal_Entity_Type_Decl_Vectors.Index_Type'First - Map_Result.Items'First);
         end loop;
         Internal_Entity_Type_Decl_Vectors.Destroy (Map_Result_Vec);

      end;
   



--# expr-done 173
--# property-call-start Decl.instantiate_generic_decl
Fld_9 := Liblktlang.Implementation.Decl_P_Instantiate_Generic_Decl (Node => Local_Origin.Node, Type_Params => Map_Result, E_Info => Local_Origin.Info);
--# end
--# expr-done 174
Var_Expr_3 := Fld_9;





if Var_Expr_3 /= No_Entity_Decl then
   



   --# scope-start


   --# bind rd Var_Expr_3

--# expr-start 177 '<If at nodes.lkt:460:17>' If_Result_2 nodes.lkt:460




if In_Logic_Call then
   --# expr-start 175 '<FieldAccess for logic_function_type at nodes.lkt:460:39>' Fld_10 nodes.lkt:460







   if Var_Expr_3.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start Decl.logic_function_type
Fld_10 := Liblktlang.Implementation.Decl_P_Logic_Function_Type (Node => Var_Expr_3.Node, E_Info => Var_Expr_3.Info);
--# end
--# expr-done 175
   If_Result_2 := Fld_10;
else
   --# expr-start 176 '<FieldAccess for function_type at nodes.lkt:461:22>' Fld_11 nodes.lkt:461







   if Var_Expr_3.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start Decl.function_type
Fld_11 := Liblktlang.Implementation.Decl_P_Function_Type (Node => Var_Expr_3.Node, E_Info => Var_Expr_3.Info);
--# end
--# expr-done 176
   If_Result_2 := Fld_11;
end if;



--# expr-done 177
Scope_Result_7 := If_Result_2;


   --# end


   Result_Var_7 := Scope_Result_7;
else
   
   Result_Var_7 := No_Entity_Function_Type;
end if;



   If_Result_3 := Result_Var_7;
end if;



--# expr-done 178
   If_Result_5 := If_Result_3;
end if;



--# expr-done 179
Let_Result := If_Result_5; 
--# end
--# expr-done 180
Let_Result_1 := Let_Result; 
--# end
--# expr-done 181

         Property_Result := Let_Result_1;
         
   --# end
      Finalizer_Scope_84;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_84;
                     Finalizer_Scope_434;
                     Finalizer_Scope_435;




            raise;
      end;



   return Property_Result;
end Decl_P_Infer_Function_Type;
--# end

   







--# property-start Decl.function_type nodes.lkt:466
pragma Warnings (Off, "is not referenced");
 function Decl_P_Function_Type
  
  (Node : Bare_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Internal_Entity_Function_Type
is
   Self : Bare_Decl  := Bare_Decl (Node);
     Ent : Internal_Entity_Decl :=
       Internal_Entity_Decl'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Internal_Entity_Function_Type;

      

      Match_0 : Internal_Entity_Function_Type;
Match_1 : Internal_Entity_Struct_Decl;
Match_2 : Internal_Entity_Class_Decl;
Match_3 : Internal_Entity_Fun_Decl;
Match_4 : Internal_Entity_Synth_Fun_Decl;
Match_5 : Internal_Entity_Generic_Decl;
Match_6 : Internal_Entity_Decl;
Fld : Internal_Entity_Function_Type;
Fld_1 : Internal_Entity_Function_Type;
Fld_2 : Internal_Entity_Function_Type;
Fld_3 : Internal_Entity_Function_Type;
Fld_4 : Internal_Entity_Decl;
Fld_5 : Internal_Entity_Function_Type;
Match_Prefix : Internal_Entity_Decl;
Cast_Result : Internal_Entity_Function_Type;
Let_Result : Internal_Entity_Function_Type;
Scope_Result : Internal_Entity_Function_Type;
Cast_Result_1 : Internal_Entity_Struct_Decl;
Let_Result_1 : Internal_Entity_Function_Type;
Scope_Result_1 : Internal_Entity_Function_Type;
Cast_Result_2 : Internal_Entity_Class_Decl;
Let_Result_2 : Internal_Entity_Function_Type;
Scope_Result_2 : Internal_Entity_Function_Type;
Cast_Result_3 : Internal_Entity_Fun_Decl;
Let_Result_3 : Internal_Entity_Function_Type;
Scope_Result_3 : Internal_Entity_Function_Type;
Cast_Result_4 : Internal_Entity_Synth_Fun_Decl;
Let_Result_4 : Internal_Entity_Function_Type;
Scope_Result_4 : Internal_Entity_Function_Type;
Cast_Result_5 : Internal_Entity_Generic_Decl;
Let_Result_5 : Internal_Entity_Function_Type;
Scope_Result_5 : Internal_Entity_Function_Type;
Cast_Result_6 : Internal_Entity_Decl;
Let_Result_6 : Internal_Entity_Function_Type;
Scope_Result_6 : Internal_Entity_Function_Type;
Match_Result : Internal_Entity_Function_Type;
Is_Null : Boolean;
If_Result : Internal_Entity_Function_Type;



begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 190 '<If at nodes.lkt:467:9>' If_Result nodes.lkt:467



--# expr-start 182 '<IsNull at nodes.lkt:467:12>' Is_Null nodes.lkt:467

Is_Null := Ent.Node = null; 
--# expr-done 182
if Is_Null then
   
   If_Result := No_Entity_Function_Type;
else
   --# expr-start 189 '<Match at nodes.lkt:469:13>' Match_Result nodes.lkt:469










   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Match_Prefix := Ent; 

case Lkt_Decl (Match_Prefix.Node.Kind) is
         when Lkt_Function_Type =>
            



   --# scope-start



--# scope-start









   
      Cast_Result := Create_Internal_Entity_Function_Type
        (Node => Match_Prefix.Node,
         Info => Match_Prefix.Info);


Match_0 := Cast_Result; 
--# bind ft Match_0

Let_Result := Match_0; 
--# end
Scope_Result := Let_Result;


   --# end


            Match_Result := Scope_Result; 
         when Lkt_Struct_Decl =>
            



   --# scope-start



--# scope-start









   
      Cast_Result_1 := Create_Internal_Entity_Struct_Decl
        (Node => Match_Prefix.Node,
         Info => Match_Prefix.Info);


Match_1 := Cast_Result_1; 
--# bind td Match_1
--# expr-start 183 '<FieldAccess for function_type_aux at nodes.lkt:471:40>' Fld nodes.lkt:471







   if Match_1.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start StructDecl.function_type_aux
Fld := Liblktlang.Implementation.Struct_Decl_P_Function_Type_Aux (Node => Match_1.Node, E_Info => Match_1.Info);
--# end
--# expr-done 183
Let_Result_1 := Fld; 
--# end
Scope_Result_1 := Let_Result_1;


   --# end


            Match_Result := Scope_Result_1; 
         when Lkt_Class_Decl =>
            



   --# scope-start



--# scope-start









   
      Cast_Result_2 := Create_Internal_Entity_Class_Decl
        (Node => Match_Prefix.Node,
         Info => Match_Prefix.Info);


Match_2 := Cast_Result_2; 
--# bind td Match_2
--# expr-start 184 '<FieldAccess for function_type_aux at nodes.lkt:472:39>' Fld_1 nodes.lkt:472







   if Match_2.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start ClassDecl.function_type_aux
Fld_1 := Liblktlang.Implementation.Class_Decl_P_Function_Type_Aux (Node => Match_2.Node, E_Info => Match_2.Info);
--# end
--# expr-done 184
Let_Result_2 := Fld_1; 
--# end
Scope_Result_2 := Let_Result_2;


   --# end


            Match_Result := Scope_Result_2; 
         when Lkt_Fun_Decl =>
            



   --# scope-start



--# scope-start









   
      Cast_Result_3 := Create_Internal_Entity_Fun_Decl
        (Node => Match_Prefix.Node,
         Info => Match_Prefix.Info);


Match_3 := Cast_Result_3; 
--# bind td Match_3
--# expr-start 185 '<FieldAccess for function_type_aux at nodes.lkt:473:37>' Fld_2 nodes.lkt:473







   if Match_3.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start FunDecl.function_type_aux
Fld_2 := Liblktlang.Implementation.Fun_Decl_P_Function_Type_Aux (Node => Match_3.Node, E_Info => Match_3.Info);
--# end
--# expr-done 185
Let_Result_3 := Fld_2; 
--# end
Scope_Result_3 := Let_Result_3;


   --# end


            Match_Result := Scope_Result_3; 
         when Lkt_Synth_Fun_Decl =>
            



   --# scope-start



--# scope-start









   
      Cast_Result_4 := Create_Internal_Entity_Synth_Fun_Decl
        (Node => Match_Prefix.Node,
         Info => Match_Prefix.Info);


Match_4 := Cast_Result_4; 
--# bind td Match_4
--# expr-start 186 '<FieldAccess for function_type_aux at nodes.lkt:474:42>' Fld_3 nodes.lkt:474







   if Match_4.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start SynthFunDecl.function_type_aux
Fld_3 := Liblktlang.Implementation.Synth_Fun_Decl_P_Function_Type_Aux (Node => Match_4.Node, E_Info => Match_4.Info);
--# end
--# expr-done 186
Let_Result_4 := Fld_3; 
--# end
Scope_Result_4 := Let_Result_4;


   --# end


            Match_Result := Scope_Result_4; 
         when Lkt_Generic_Decl =>
            



   --# scope-start



--# scope-start









   
      Cast_Result_5 := Create_Internal_Entity_Generic_Decl
        (Node => Match_Prefix.Node,
         Info => Match_Prefix.Info);


Match_5 := Cast_Result_5; 
--# bind td Match_5
--# expr-start 188 '<FieldAccess for function_type at nodes.lkt:475:41>' Fld_5 nodes.lkt:475



--# expr-start 187 '<FieldAccess for decl at nodes.lkt:475:41>' Fld_4 nodes.lkt:475







   if Match_5.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_4 := Create_Internal_Entity_Decl (Node => Match_5.Node.Generic_Decl_F_Decl, Info => Match_5.Info);
--# expr-done 187



   if Fld_4.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start Decl.function_type
Fld_5 := Liblktlang.Implementation.Decl_P_Function_Type (Node => Fld_4.Node, E_Info => Fld_4.Info);
--# end
--# expr-done 188
Let_Result_5 := Fld_5; 
--# end
Scope_Result_5 := Let_Result_5;


   --# end


            Match_Result := Scope_Result_5; 
         when Lkt_Grammar_Rule_Decl .. Lkt_Val_Decl | Lkt_Env_Spec_Decl | Lkt_Grammar_Decl .. Lkt_Synth_Arg_Decl | Lkt_Any_Type_Decl .. Lkt_Enum_Class_Alt_Decl | Lkt_Generic_Formal_Type_Decl | Lkt_Enum_Class_Decl .. Lkt_Enum_Type_Decl | Lkt_Trait_Decl =>
            



   --# scope-start



--# scope-start









   
      Cast_Result_6 := Create_Internal_Entity_Decl
        (Node => Match_Prefix.Node,
         Info => Match_Prefix.Info);


Match_6 := Cast_Result_6; 
--# bind _ Match_6

Let_Result_6 := No_Entity_Function_Type; 
--# end
Scope_Result_6 := Let_Result_6;


   --# end


            Match_Result := Scope_Result_6; 
end case;

--# expr-done 189
   If_Result := Match_Result;
end if;



--# expr-done 190

         Property_Result := If_Result;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Decl_P_Function_Type;
--# end

   







--# property-start Decl.logic_function_type nodes.lkt:483
pragma Warnings (Off, "is not referenced");
 function Decl_P_Logic_Function_Type
  
  (Node : Bare_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Internal_Entity_Function_Type
is
   Self : Bare_Decl  := Bare_Decl (Node);
     Ent : Internal_Entity_Decl :=
       Internal_Entity_Decl'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Internal_Entity_Function_Type;

      
            procedure Finalizer_Scope_447 with Inline_Always;

      Match_0 : Internal_Entity_Fun_Decl;
Var_Expr_0 : Internal_Entity_Function_Type;
Match_1 : Internal_Entity_Decl;
Fld : Internal_Entity_Function_Type;
Fld_1 : Internal_Entity_Named_Type_Decl;
Fld_2 : Internal_Entity_Type_Decl;
Array_Lit : Internal_Entity_Type_Decl_Array_Access;
Fld_3 : Internal_Entity_Type_Decl;
Fld_4 : Internal_Entity_Decl;
New_Node : Bare_Function_Type;
As_Entity : Internal_Entity_Function_Type;
Is_Null : Boolean;
If_Result : Internal_Entity_Function_Type;
Fld_5 : Internal_Entity_Named_Type_Decl;
Cast_Result : Internal_Entity_Type_Decl;
Array_Lit_1 : Internal_Entity_Type_Decl_Array_Access;
Fld_6 : Internal_Entity_Type_Decl_Array_Access;
Concat_Result : Internal_Entity_Type_Decl_Array_Access;
Fld_7 : Internal_Entity_Type_Decl;
Fld_8 : Internal_Entity_Decl;
New_Node_1 : Bare_Function_Type;
As_Entity_1 : Internal_Entity_Function_Type;
Is_Null_1 : Boolean;
If_Result_1 : Internal_Entity_Function_Type;
Fld_9 : Boolean;
If_Result_2 : Internal_Entity_Function_Type;
Scope_Result : Internal_Entity_Function_Type;
Result_Var : Internal_Entity_Function_Type;
Match_Prefix : Internal_Entity_Decl;
Cast_Result_1 : Internal_Entity_Fun_Decl;
Let_Result : Internal_Entity_Function_Type;
Scope_Result_1 : Internal_Entity_Function_Type;
Cast_Result_2 : Internal_Entity_Decl;
Let_Result_1 : Internal_Entity_Function_Type;
Scope_Result_2 : Internal_Entity_Function_Type;
Match_Result : Internal_Entity_Function_Type;

            procedure Finalizer_Scope_447 is
            begin
                     Dec_Ref (Array_Lit);
                     Dec_Ref (Array_Lit_1);
                     Dec_Ref (Fld_6);
                     Dec_Ref (Concat_Result);
            end Finalizer_Scope_447;

      
      Mmz_Handle : Memoization_Handle;
      Mmz_Val    : Mmz_Value;

      Mmz_Stored : Boolean;
      --  Whether the memoization couple was actually stored. Used to determine
      --  whether to inc-ref the memoized value.

      function Create_Mmz_Key return Mmz_Key;
      --  Create a memoization key for this property call and return it

      --------------------
      -- Create_Mmz_Key --
      --------------------

      function Create_Mmz_Key return Mmz_Key is
      begin
         return Mmz_K : Mmz_Key :=
           (Property => Mmz_Bare_Decl_Decl_P_Logic_Function_Type,
            Items    => new Mmz_Key_Array (1 ..  2))
         do
            Mmz_K.Items (1) := (Kind => Mmz_Bare_Decl,
                                As_Bare_Decl => Self);
               Mmz_K.Items (2) :=
                 (Kind => Mmz_Internal_Entity_Info,
                  As_Internal_Entity_Info => E_Info);
         end return;
      end Create_Mmz_Key;

begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;

      if Self /= null then

         if not Self.Unit.Context.In_Populate_Lexical_Env then

            if Find_Memoized_Value
              (Self.Unit, Mmz_Handle, Mmz_Val, Create_Mmz_Key'Access)
            then
               --# memoization-lookup

               if Mmz_Val.Kind = Mmz_Evaluating then
                  --# memoization-return
                  Raise_Property_Exception
                    (Self,
                     Property_Error'Identity,
                     "Infinite recursion detected");

               elsif Mmz_Val.Kind = Mmz_Error then
                  --# memoization-return
                  Reraise_Memoized_Error (Mmz_Val);

               else
                  Property_Result := Mmz_Val.As_Internal_Entity_Function_Type;

                  --# memoization-return
                  return Property_Result;
               end if;
               --# end
            end if;

         end if;
      end if;

      begin
         
   --# scope-start

         --# expr-start 209 '<Match at nodes.lkt:483:55>' Match_Result nodes.lkt:483










   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Match_Prefix := Ent; 

case Lkt_Decl (Match_Prefix.Node.Kind) is
         when Lkt_Fun_Decl =>
            



   --# scope-start



--# scope-start









   
      Cast_Result_1 := Create_Internal_Entity_Fun_Decl
        (Node => Match_Prefix.Node,
         Info => Match_Prefix.Info);


Match_0 := Cast_Result_1; 
--# bind td Match_0



--# expr-start 191 '<FieldAccess for function_type_aux at nodes.lkt:485:13>' Fld nodes.lkt:485







   if Match_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start FunDecl.function_type_aux
Fld := Liblktlang.Implementation.Fun_Decl_P_Function_Type_Aux (Node => Match_0.Node, E_Info => Match_0.Info);
--# end
--# expr-done 191
Var_Expr_0 := Fld;





if Var_Expr_0 /= No_Entity_Function_Type then
   



   --# scope-start


   --# bind ft Var_Expr_0

--# expr-start 208 '<If at nodes.lkt:487:17>' If_Result_2 nodes.lkt:487



--# expr-start 192 '<FieldAccess for is_dynamic_combiner at nodes.lkt:487:20>' Fld_9 nodes.lkt:487







   if Match_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start FunDecl.is_dynamic_combiner
Fld_9 := Liblktlang.Implementation.Fun_Decl_P_Is_Dynamic_Combiner (Node => Match_0.Node, E_Info => Match_0.Info);
--# end
--# expr-done 192
if Fld_9 then
   --# expr-start 199 '<as_entity at nodes.lkt:489:21>' If_Result nodes.lkt:489



--# expr-start 198 '<New FunctionType at nodes.lkt:489:21>' New_Node nodes.lkt:489
--# expr-start 195 '<ArrayLiteral at nodes.lkt:490:30>' Array_Lit nodes.lkt:490
--# expr-start 194 '<FieldAccess for make_array_type at nodes.lkt:490:31>' Fld_2 nodes.lkt:490



--# expr-start 193 '<FieldAccess for logicvar_type at nodes.lkt:490:31>' Fld_1 nodes.lkt:490







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start LktNode.logicvar_type
Fld_1 := Liblktlang.Implementation.Lkt_Node_P_Logicvar_Type (Node => Ent.Node);
--# end
--# expr-done 193



   if Fld_1.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start TypeDecl.make_array_type
Fld_2 := Liblktlang.Implementation.Type_Decl_P_Make_Array_Type (Node => Fld_1.Node, E_Info => Fld_1.Info);
--# end
--# expr-done 194
Array_Lit := Create_Internal_Entity_Type_Decl_Array (Internal_Internal_Entity_Type_Decl_Array'(1 => Fld_2)); 
--# expr-done 195
--# expr-start 196 '<FieldAccess for origin at nodes.lkt:492:32>' Fld_4 nodes.lkt:492







   if Var_Expr_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_4 := Var_Expr_0.Node.Function_Type_Origin;
--# expr-done 196
--# expr-start 197 '<FieldAccess for return_type at nodes.lkt:491:37>' Fld_3 nodes.lkt:491







   if Var_Expr_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_3 := Var_Expr_0.Node.Function_Type_Return_Type;
--# expr-done 197
Inc_Ref (Array_Lit);


if Is_Foreign_Strict (Self.Self_Env, Self) then
   Raise_Property_Exception
     (Self,
      Property_Error'Identity,
      "synthetic nodes cannot have foreign lexical envs");
end if;


New_Node := new Root_Node_Record
  (Lkt_Function_Type);
Initialize
  (Self => New_Node,
   Kind => Lkt_Function_Type,
   Unit => Self.Unit,

   Token_Start_Index => No_Token_Index,
   Token_End_Index   => No_Token_Index,

   Parent => Self,

   Self_Env => Self.Self_Env);
Register_Destroyable (Self.Unit, New_Node);


      New_Node.Function_Type_Args :=
         Array_Lit;
      New_Node.Function_Type_Origin :=
         Fld_4;
      New_Node.Function_Type_Return_Type :=
         Fld_3;

--# expr-done 198
Is_Null := New_Node = null; 
if Is_Null then
   
   If_Result := No_Entity_Function_Type;
else
   

As_Entity := (Info => E_Info, Node => New_Node); 
   If_Result := As_Entity;
end if;



--# expr-done 199
   If_Result_2 := If_Result;
else
   --# expr-start 207 '<as_entity at nodes.lkt:496:21>' If_Result_1 nodes.lkt:496



--# expr-start 206 '<New FunctionType at nodes.lkt:496:21>' New_Node_1 nodes.lkt:496
--# expr-start 202 '<ArrayLiteral at nodes.lkt:497:30>' Array_Lit_1 nodes.lkt:497
--# expr-start 201 '<Cast to TypeDecl at nodes.lkt:497:31>' Cast_Result nodes.lkt:497





--# expr-start 200 '<FieldAccess for logicvar_type at nodes.lkt:497:31>' Fld_5 nodes.lkt:497







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start LktNode.logicvar_type
Fld_5 := Liblktlang.Implementation.Lkt_Node_P_Logicvar_Type (Node => Ent.Node);
--# end
--# expr-done 200



   
      Cast_Result := Create_Internal_Entity_Type_Decl
        (Node => Fld_5.Node,
         Info => Fld_5.Info);


--# expr-done 201
Array_Lit_1 := Create_Internal_Entity_Type_Decl_Array (Internal_Internal_Entity_Type_Decl_Array'(1 => Cast_Result)); 
--# expr-done 202
--# expr-start 203 '<FieldAccess for args at nodes.lkt:497:68>' Fld_6 nodes.lkt:497







   if Var_Expr_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_6 := Var_Expr_0.Node.Function_Type_Args;
Inc_Ref (Fld_6);
--# expr-done 203
Concat_Result := Concat (Array_Lit_1, Fld_6); 
--# expr-start 204 '<FieldAccess for origin at nodes.lkt:499:32>' Fld_8 nodes.lkt:499







   if Var_Expr_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_8 := Var_Expr_0.Node.Function_Type_Origin;
--# expr-done 204
--# expr-start 205 '<FieldAccess for return_type at nodes.lkt:498:37>' Fld_7 nodes.lkt:498







   if Var_Expr_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_7 := Var_Expr_0.Node.Function_Type_Return_Type;
--# expr-done 205
Inc_Ref (Concat_Result);


if Is_Foreign_Strict (Self.Self_Env, Self) then
   Raise_Property_Exception
     (Self,
      Property_Error'Identity,
      "synthetic nodes cannot have foreign lexical envs");
end if;


New_Node_1 := new Root_Node_Record
  (Lkt_Function_Type);
Initialize
  (Self => New_Node_1,
   Kind => Lkt_Function_Type,
   Unit => Self.Unit,

   Token_Start_Index => No_Token_Index,
   Token_End_Index   => No_Token_Index,

   Parent => Self,

   Self_Env => Self.Self_Env);
Register_Destroyable (Self.Unit, New_Node_1);


      New_Node_1.Function_Type_Args :=
         Concat_Result;
      New_Node_1.Function_Type_Origin :=
         Fld_8;
      New_Node_1.Function_Type_Return_Type :=
         Fld_7;

--# expr-done 206
Is_Null_1 := New_Node_1 = null; 
if Is_Null_1 then
   
   If_Result_1 := No_Entity_Function_Type;
else
   

As_Entity_1 := (Info => E_Info, Node => New_Node_1); 
   If_Result_1 := As_Entity_1;
end if;



--# expr-done 207
   If_Result_2 := If_Result_1;
end if;



--# expr-done 208
Scope_Result := If_Result_2;


   --# end
      Finalizer_Scope_447;


   Result_Var := Scope_Result;
else
   
   Result_Var := No_Entity_Function_Type;
end if;



Let_Result := Result_Var; 
--# end
Scope_Result_1 := Let_Result;


   --# end


            Match_Result := Scope_Result_1; 
         when Lkt_Grammar_Rule_Decl .. Lkt_Val_Decl | Lkt_Env_Spec_Decl .. Lkt_Trait_Decl =>
            



   --# scope-start



--# scope-start









   
      Cast_Result_2 := Create_Internal_Entity_Decl
        (Node => Match_Prefix.Node,
         Info => Match_Prefix.Info);


Match_1 := Cast_Result_2; 
--# bind _ Match_1

Let_Result_1 := No_Entity_Function_Type; 
--# end
Scope_Result_2 := Let_Result_1;


   --# end


            Match_Result := Scope_Result_2; 
end case;

--# expr-done 209

         Property_Result := Match_Result;
         
   --# end


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_447;


               if Self /= null then
                     if not Self.Unit.Context.In_Populate_Lexical_Env then
                        Add_Memoized_Error
                          (Self.Unit, Mmz_Handle, Exc, Mmz_Stored);
                     end if;
               end if;


            raise;
      end;

      if Self /= null then
         if not Self.Unit.Context.In_Populate_Lexical_Env then

            Mmz_Val := (Kind => Mmz_Internal_Entity_Function_Type,
                        As_Internal_Entity_Function_Type => Property_Result);
            Add_Memoized_Value (Self.Unit, Mmz_Handle, Mmz_Val, Mmz_Stored);

         end if;
      end if;



   return Property_Result;
end Decl_P_Logic_Function_Type;
--# end

   







--# property-start Decl.get_type nodes.lkt:510
pragma Warnings (Off, "is not referenced");
 function Decl_P_Get_Type
  
  (Node : Bare_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Internal_Entity_Type_Decl
is
   Self : Bare_Decl  := Bare_Decl (Node);
     Ent : Internal_Entity_Decl :=
       Internal_Entity_Decl'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Internal_Entity_Type_Decl;

      
            procedure Finalizer_Scope_453 with Inline_Always;
            procedure Finalizer_Scope_459 with Inline_Always;

      Var_Expr_0 : Internal_Entity_Decl;
Match_0 : Internal_Entity_Type_Decl;
Match_1 : Internal_Entity_Fun_Decl;
Match_2 : Internal_Entity_Enum_Lit_Decl;
Match_3 : Internal_Entity_Val_Decl;
Match_4 : Internal_Entity_Match_Val_Decl;
Match_5 : Internal_Entity_Lambda_Arg_Decl;
Var_Expr_1 : Internal_Entity_Lambda_Expr;
Match_6 : Internal_Entity_Explicitly_Typed_Decl;
Match_7 : Internal_Entity_Generic_Decl;
Match_8 : Internal_Entity_Self_Decl;
Match_9 : Internal_Entity_Node_Decl;
Match_10 : Internal_Entity_Decl;
Fld : Internal_Entity_Type_Ref;
Fld_1 : Internal_Entity_Type_Decl;
Fld_2 : Internal_Entity_Function_Type;
Cast_Result : Internal_Entity_Type_Decl;
Fld_3 : Internal_Entity_Full_Decl;
Sym : Symbol_Type;
Fld_4 : Boolean;
If_Result : Internal_Entity_Type_Decl;
Fld_5 : Internal_Entity_Type_Decl;
Fld_6 : Internal_Entity_Type_Ref;
Fld_7 : Internal_Entity_Type_Decl;
Fld_8 : Internal_Entity_Expr;
Fld_9 : Internal_Entity_Type_Decl;
Fld_10 : Internal_Solver_Result := No_Solver_Result;
Fld_11 : Boolean;
If_Result_1 : Internal_Entity_Type_Decl;
Fld_12 : Internal_Entity_Type_Ref;
Is_Null : Boolean;
Not_Val : Boolean;
If_Result_2 : Internal_Entity_Type_Decl;
Fld_13 : Internal_Entity_Expr;
Fld_14 : Internal_Entity_Type_Decl;
Fld_15 : Internal_Entity_Expr;
Fld_16 : Internal_Entity_Type_Decl;
Fld_17 : Internal_Entity_Type_Ref;
Fld_18 : Internal_Entity_Type_Decl;
Fld_19 : Internal_Entity_Type_Decl;
Fld_20 : Internal_Entity_Type_Ref;
Is_Null_1 : Boolean;
If_Result_3 : Internal_Entity_Type_Decl;
Fld_21 : Internal_Entity;
Fld_22 : Internal_Entity;
Cast_Result_1 : Internal_Entity_Lambda_Expr;
Fld_23 : Logic_Var;
Is_Logic_Var_Defined : Boolean;
Eq_Solution : Internal_Entity;
If_Result_4 : Internal_Entity;
Cast_Result_2 : Internal_Entity_Type_Decl;
Fld_24 : Boolean;
If_Result_5 : Internal_Entity_Type_Decl;
Scope_Result : Internal_Entity_Type_Decl;
Result_Var : Internal_Entity_Type_Decl;
Fld_25 : Internal_Entity_Type_Ref;
Fld_26 : Internal_Entity_Type_Decl;
Fld_27 : Internal_Entity_Type_Ref;
Is_Null_2 : Boolean;
If_Result_6 : Internal_Entity_Type_Decl;
Fld_28 : Internal_Entity_Type_Ref;
Fld_29 : Internal_Entity_Type_Decl;
Fld_30 : Internal_Entity_Decl;
Fld_31 : Internal_Entity_Type_Decl;
Fld_32 : Internal_Entity_Named_Type_Decl;
Fld_33 : Internal_Entity_Type_Decl;
Array_Lit : Internal_Entity_Type_Decl_Array_Access;
Fld_34 : Internal_Entity_Decl;
Cast_Result_3 : Internal_Entity_Type_Decl;
Fld_35 : Internal_Entity_Type_Decl;
Match_Prefix : Internal_Entity_Decl;
Cast_Result_4 : Internal_Entity_Type_Decl;
Let_Result : Internal_Entity_Type_Decl;
Scope_Result_1 : Internal_Entity_Type_Decl;
Cast_Result_5 : Internal_Entity_Fun_Decl;
Let_Result_1 : Internal_Entity_Type_Decl;
Scope_Result_2 : Internal_Entity_Type_Decl;
Cast_Result_6 : Internal_Entity_Enum_Lit_Decl;
Let_Result_2 : Internal_Entity_Type_Decl;
Scope_Result_3 : Internal_Entity_Type_Decl;
Cast_Result_7 : Internal_Entity_Val_Decl;
Let_Result_3 : Internal_Entity_Type_Decl;
Scope_Result_4 : Internal_Entity_Type_Decl;
Cast_Result_8 : Internal_Entity_Match_Val_Decl;
Let_Result_4 : Internal_Entity_Type_Decl;
Scope_Result_5 : Internal_Entity_Type_Decl;
Cast_Result_9 : Internal_Entity_Lambda_Arg_Decl;
Let_Result_5 : Internal_Entity_Type_Decl;
Scope_Result_6 : Internal_Entity_Type_Decl;
Cast_Result_10 : Internal_Entity_Explicitly_Typed_Decl;
Let_Result_6 : Internal_Entity_Type_Decl;
Scope_Result_7 : Internal_Entity_Type_Decl;
Cast_Result_11 : Internal_Entity_Generic_Decl;
Let_Result_7 : Internal_Entity_Type_Decl;
Scope_Result_8 : Internal_Entity_Type_Decl;
Cast_Result_12 : Internal_Entity_Self_Decl;
Let_Result_8 : Internal_Entity_Type_Decl;
Scope_Result_9 : Internal_Entity_Type_Decl;
Cast_Result_13 : Internal_Entity_Node_Decl;
Let_Result_9 : Internal_Entity_Type_Decl;
Scope_Result_10 : Internal_Entity_Type_Decl;
Cast_Result_14 : Internal_Entity_Decl;
Let_Result_10 : Internal_Entity_Type_Decl;
Scope_Result_11 : Internal_Entity_Type_Decl;
Match_Result : Internal_Entity_Type_Decl;
Scope_Result_12 : Internal_Entity_Type_Decl;
Result_Var_1 : Internal_Entity_Type_Decl;

            procedure Finalizer_Scope_453 is
            begin
                     Dec_Ref (Fld_10);
            end Finalizer_Scope_453;
            procedure Finalizer_Scope_459 is
            begin
                     Dec_Ref (Array_Lit);
            end Finalizer_Scope_459;

      
      Mmz_Handle : Memoization_Handle;
      Mmz_Val    : Mmz_Value;

      Mmz_Stored : Boolean;
      --  Whether the memoization couple was actually stored. Used to determine
      --  whether to inc-ref the memoized value.

      function Create_Mmz_Key return Mmz_Key;
      --  Create a memoization key for this property call and return it

      --------------------
      -- Create_Mmz_Key --
      --------------------

      function Create_Mmz_Key return Mmz_Key is
      begin
         return Mmz_K : Mmz_Key :=
           (Property => Mmz_Bare_Decl_Decl_P_Get_Type,
            Items    => new Mmz_Key_Array (1 ..  2))
         do
            Mmz_K.Items (1) := (Kind => Mmz_Bare_Decl,
                                As_Bare_Decl => Self);
               Mmz_K.Items (2) :=
                 (Kind => Mmz_Internal_Entity_Info,
                  As_Internal_Entity_Info => E_Info);
         end return;
      end Create_Mmz_Key;

begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

            Populate_Lexical_Env_For_Unit (Self);
      end if;

      if Self /= null then

         if not Self.Unit.Context.In_Populate_Lexical_Env then

            if Find_Memoized_Value
              (Self.Unit, Mmz_Handle, Mmz_Val, Create_Mmz_Key'Access)
            then
               --# memoization-lookup

               if Mmz_Val.Kind = Mmz_Evaluating then
                  --# memoization-return
                  Raise_Property_Exception
                    (Self,
                     Property_Error'Identity,
                     "Infinite recursion detected");

               elsif Mmz_Val.Kind = Mmz_Error then
                  --# memoization-return
                  Reraise_Memoized_Error (Mmz_Val);

               else
                  Property_Result := Mmz_Val.As_Internal_Entity_Type_Decl;

                  --# memoization-return
                  return Property_Result;
               end if;
               --# end
            end if;

         end if;
      end if;

      begin
         
   --# scope-start

         



Var_Expr_0 := Ent;





if Var_Expr_0 /= No_Entity_Decl then
   



   --# scope-start


   --# bind v1 Var_Expr_0

--# expr-start 262 '<Match at nodes.lkt:513:13>' Match_Result nodes.lkt:513










   if Var_Expr_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Match_Prefix := Var_Expr_0; 

case Lkt_Decl (Match_Prefix.Node.Kind) is
         when Lkt_Any_Type_Decl .. Lkt_Trait_Decl =>
            



   --# scope-start



--# scope-start









   
      Cast_Result_4 := Create_Internal_Entity_Type_Decl
        (Node => Match_Prefix.Node,
         Info => Match_Prefix.Info);


Match_0 := Cast_Result_4; 
--# bind td Match_0

Let_Result := Match_0; 
--# end
Scope_Result_1 := Let_Result;


   --# end


            Match_Result := Scope_Result_1; 
         when Lkt_Fun_Decl =>
            



   --# scope-start



--# scope-start









   
      Cast_Result_5 := Create_Internal_Entity_Fun_Decl
        (Node => Match_Prefix.Node,
         Info => Match_Prefix.Info);


Match_1 := Cast_Result_5; 
--# bind fd Match_1
--# expr-start 216 '<If at nodes.lkt:516:21>' If_Result nodes.lkt:516



--# expr-start 212 '<FieldAccess for has_annotation at nodes.lkt:516:24>' Fld_4 nodes.lkt:516



--# expr-start 210 '<FieldAccess for full_decl at nodes.lkt:516:24>' Fld_3 nodes.lkt:516







   if Match_1.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start Decl.full_decl
Fld_3 := Liblktlang.Implementation.Decl_P_Full_Decl (Node => Match_1.Node, E_Info => Match_1.Info);
--# end
--# expr-done 210



   if Fld_3.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# expr-start 211 '<Symbol property at nodes.lkt:516:54>' Sym nodes.lkt:516
Sym := Precomputed_Symbol (Precomputed_Symbol_Table (Self.Unit.Context.Symbols), Precomputed_Sym_Property); 
--# expr-done 211
--# property-call-start FullDecl.has_annotation
Fld_4 := Liblktlang.Implementation.Full_Decl_P_Has_Annotation (Node => Fld_3.Node, Name => Sym);
--# end
--# expr-done 212
if Fld_4 then
   --# expr-start 214 '<FieldAccess for referenced_decl at nodes.lkt:517:26>' Fld_1 nodes.lkt:517



--# expr-start 213 '<FieldAccess for return_type at nodes.lkt:517:26>' Fld nodes.lkt:517







   if Match_1.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Create_Internal_Entity_Type_Ref (Node => Match_1.Node.Fun_Decl_F_Return_Type, Info => Match_1.Info);
--# expr-done 213



   if Fld.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start TypeRef.referenced_decl
Fld_1 := Liblktlang.Implementation.Type_Ref_P_Referenced_Decl (Node => Fld.Node, E_Info => Fld.Info);
--# end
--# expr-done 214
   If_Result := Fld_1;
else
   




--# expr-start 215 '<FieldAccess for function_type at nodes.lkt:518:26>' Fld_2 nodes.lkt:518







   if Match_1.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start Decl.function_type
Fld_2 := Liblktlang.Implementation.Decl_P_Function_Type (Node => Match_1.Node, E_Info => Match_1.Info);
--# end
--# expr-done 215



   
      Cast_Result := Create_Internal_Entity_Type_Decl
        (Node => Fld_2.Node,
         Info => Fld_2.Info);


   If_Result := Cast_Result;
end if;



--# expr-done 216
Let_Result_1 := If_Result; 
--# end
Scope_Result_2 := Let_Result_1;


   --# end


            Match_Result := Scope_Result_2; 
         when Lkt_Enum_Lit_Decl =>
            



   --# scope-start



--# scope-start









   
      Cast_Result_6 := Create_Internal_Entity_Enum_Lit_Decl
        (Node => Match_Prefix.Node,
         Info => Match_Prefix.Info);


Match_2 := Cast_Result_6; 
--# bind eld Match_2
--# expr-start 217 '<FieldAccess for parent_type at nodes.lkt:519:42>' Fld_5 nodes.lkt:519







   if Match_2.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start EnumLitDecl.parent_type
Fld_5 := Liblktlang.Implementation.Enum_Lit_Decl_P_Parent_Type (Node => Match_2.Node, E_Info => Match_2.Info);
--# end
--# expr-done 217
Let_Result_2 := Fld_5; 
--# end
Scope_Result_3 := Let_Result_2;


   --# end


            Match_Result := Scope_Result_3; 
         when Lkt_Val_Decl =>
            



   --# scope-start



--# scope-start









   
      Cast_Result_7 := Create_Internal_Entity_Val_Decl
        (Node => Match_Prefix.Node,
         Info => Match_Prefix.Info);


Match_3 := Cast_Result_7; 
--# bind vd Match_3
--# expr-start 228 '<If at nodes.lkt:521:21>' If_Result_2 nodes.lkt:521



--# expr-start 220 '<Not at nodes.lkt:521:24>' Not_Val nodes.lkt:521
--# expr-start 219 '<IsNull at nodes.lkt:521:28>' Is_Null nodes.lkt:521
--# expr-start 218 '<FieldAccess for decl_type at nodes.lkt:521:28>' Fld_12 nodes.lkt:521







   if Match_3.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_12 := Create_Internal_Entity_Type_Ref (Node => Match_3.Node.Val_Decl_F_Decl_Type, Info => Match_3.Info);
--# expr-done 218
Is_Null := Fld_12.Node = null; 
--# expr-done 219
Not_Val := not (Is_Null); 
--# expr-done 220
if Not_Val then
   --# expr-start 222 '<FieldAccess for referenced_decl at nodes.lkt:522:26>' Fld_7 nodes.lkt:522



--# expr-start 221 '<FieldAccess for decl_type at nodes.lkt:522:26>' Fld_6 nodes.lkt:522







   if Match_3.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_6 := Create_Internal_Entity_Type_Ref (Node => Match_3.Node.Val_Decl_F_Decl_Type, Info => Match_3.Info);
--# expr-done 221



   if Fld_6.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start TypeRef.referenced_decl
Fld_7 := Liblktlang.Implementation.Type_Ref_P_Referenced_Decl (Node => Fld_6.Node, E_Info => Fld_6.Info);
--# end
--# expr-done 222
   If_Result_2 := Fld_7;
else
   --# expr-start 227 '<If at nodes.lkt:521:21>' If_Result_1 nodes.lkt:521



--# expr-start 224 '<FieldAccess for success at nodes.lkt:523:26>' Fld_11 nodes.lkt:523



--# expr-start 223 '<FieldAccess for solve_enclosing_context at nodes.lkt:523:26>' Fld_10 nodes.lkt:523







   if Match_3.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start LktNode.solve_enclosing_context
Fld_10 := Liblktlang.Implementation.Lkt_Node_P_Solve_Enclosing_Context (Node => Match_3.Node, E_Info => Match_3.Info);
--# end
--# expr-done 223





Fld_11 := Fld_10.Success;
--# expr-done 224
if Fld_11 then
   --# expr-start 226 '<FieldAccess for get_type at nodes.lkt:524:26>' Fld_9 nodes.lkt:524



--# expr-start 225 '<FieldAccess for expr at nodes.lkt:524:26>' Fld_8 nodes.lkt:524







   if Match_3.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_8 := Create_Internal_Entity_Expr (Node => Match_3.Node.Val_Decl_F_Expr, Info => Match_3.Info);
--# expr-done 225



   if Fld_8.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start Expr.get_type
Fld_9 := Liblktlang.Implementation.Expr_P_Get_Type (Node => Fld_8.Node, E_Info => Fld_8.Info);
--# end
--# expr-done 226
   If_Result_1 := Fld_9;
else
   
   If_Result_1 := No_Entity_Type_Decl;
end if;



--# expr-done 227
   If_Result_2 := If_Result_1;
end if;



--# expr-done 228
Let_Result_3 := If_Result_2; 
--# end
Scope_Result_4 := Let_Result_3;


   --# end
      Finalizer_Scope_453;


            Match_Result := Scope_Result_4; 
         when Lkt_Match_Val_Decl =>
            



   --# scope-start



--# scope-start









   
      Cast_Result_8 := Create_Internal_Entity_Match_Val_Decl
        (Node => Match_Prefix.Node,
         Info => Match_Prefix.Info);


Match_4 := Cast_Result_8; 
--# bind mvd Match_4
--# expr-start 238 '<If at nodes.lkt:527:21>' If_Result_3 nodes.lkt:527



--# expr-start 230 '<IsNull at nodes.lkt:527:24>' Is_Null_1 nodes.lkt:527
--# expr-start 229 '<FieldAccess for decl_type at nodes.lkt:527:24>' Fld_20 nodes.lkt:527







   if Match_4.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_20 := Create_Internal_Entity_Type_Ref (Node => Match_4.Node.Match_Val_Decl_F_Decl_Type, Info => Match_4.Info);
--# expr-done 229
Is_Null_1 := Fld_20.Node = null; 
--# expr-done 230
if Is_Null_1 then
   --# expr-start 232 '<FieldAccess for get_type at nodes.lkt:527:51>' Fld_14 nodes.lkt:527



--# expr-start 231 '<FieldAccess for match_expr at nodes.lkt:527:51>' Fld_13 nodes.lkt:527







   if Match_4.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start MatchValDecl.match_expr
Fld_13 := Liblktlang.Implementation.Match_Val_Decl_P_Match_Expr (Node => Match_4.Node, E_Info => Match_4.Info);
--# end
--# expr-done 231



   if Fld_13.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start Expr.get_type
Fld_14 := Liblktlang.Implementation.Expr_P_Get_Type (Node => Fld_13.Node, E_Info => Fld_13.Info);
--# end
--# expr-done 232
   If_Result_3 := Fld_14;
else
   --# expr-start 237 '<FieldAccess for get_cast_type at nodes.lkt:529:25>' Fld_19 nodes.lkt:529



--# expr-start 234 '<FieldAccess for get_type at nodes.lkt:529:25>' Fld_16 nodes.lkt:529



--# expr-start 233 '<FieldAccess for match_expr at nodes.lkt:529:25>' Fld_15 nodes.lkt:529







   if Match_4.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start MatchValDecl.match_expr
Fld_15 := Liblktlang.Implementation.Match_Val_Decl_P_Match_Expr (Node => Match_4.Node, E_Info => Match_4.Info);
--# end
--# expr-done 233



   if Fld_15.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start Expr.get_type
Fld_16 := Liblktlang.Implementation.Expr_P_Get_Type (Node => Fld_15.Node, E_Info => Fld_15.Info);
--# end
--# expr-done 234



   if Fld_16.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# expr-start 236 '<FieldAccess for referenced_decl at nodes.lkt:530:29>' Fld_18 nodes.lkt:530



--# expr-start 235 '<FieldAccess for decl_type at nodes.lkt:530:29>' Fld_17 nodes.lkt:530







   if Match_4.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_17 := Create_Internal_Entity_Type_Ref (Node => Match_4.Node.Match_Val_Decl_F_Decl_Type, Info => Match_4.Info);
--# expr-done 235



   if Fld_17.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start TypeRef.referenced_decl
Fld_18 := Liblktlang.Implementation.Type_Ref_P_Referenced_Decl (Node => Fld_17.Node, E_Info => Fld_17.Info);
--# end
--# expr-done 236
--# property-call-start Decl.get_cast_type
Fld_19 := Liblktlang.Implementation.Decl_P_Get_Cast_Type (Node => Fld_16.Node, Cast_To => Fld_18, E_Info => Fld_16.Info);
--# end
--# expr-done 237
   If_Result_3 := Fld_19;
end if;



--# expr-done 238
Let_Result_4 := If_Result_3; 
--# end
Scope_Result_5 := Let_Result_4;


   --# end


            Match_Result := Scope_Result_5; 
         when Lkt_Lambda_Arg_Decl =>
            



   --# scope-start



--# scope-start









   
      Cast_Result_9 := Create_Internal_Entity_Lambda_Arg_Decl
        (Node => Match_Prefix.Node,
         Info => Match_Prefix.Info);


Match_5 := Cast_Result_9; 
--# bind lad Match_5
--# expr-start 251 '<If at nodes.lkt:533:21>' If_Result_6 nodes.lkt:533



--# expr-start 240 '<IsNull at nodes.lkt:533:24>' Is_Null_2 nodes.lkt:533
--# expr-start 239 '<FieldAccess for decl_type at nodes.lkt:533:24>' Fld_27 nodes.lkt:533







   if Match_5.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_27 := Create_Internal_Entity_Type_Ref (Node => Match_5.Node.Lambda_Arg_Decl_F_Decl_Type, Info => Match_5.Info);
--# expr-done 239
Is_Null_2 := Fld_27.Node = null; 
--# expr-done 240
if Is_Null_2 then
   


--# expr-start 243 '<Cast to LambdaExpr at nodes.lkt:535:25>' Cast_Result_1 nodes.lkt:535





--# expr-start 242 '<parent at nodes.lkt:535:25>' Fld_22 nodes.lkt:535



--# expr-start 241 '<parent at nodes.lkt:535:25>' Fld_21 nodes.lkt:535







   if Match_5.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_21 := Liblktlang.Implementation.Parent (Node => Match_5.Node, E_Info => Match_5.Info);
--# expr-done 241



   if Fld_21.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_22 := Liblktlang.Implementation.Parent (Node => Fld_21.Node, E_Info => Fld_21.Info);
--# expr-done 242



   if Fld_22.Node = null
      or else Fld_22.Node.Kind in Lkt_Lambda_Expr_Range
   then
      
      Cast_Result_1 := Create_Internal_Entity_Lambda_Expr
        (Node => Fld_22.Node,
         Info => Fld_22.Info);

   else
         Cast_Result_1 := No_Entity_Lambda_Expr;
   end if;


--# expr-done 243
Var_Expr_1 := Cast_Result_1;





if Var_Expr_1 /= No_Entity_Lambda_Expr then
   



   --# scope-start


   --# bind le Var_Expr_1

--# expr-start 248 '<If at nodes.lkt:537:29>' If_Result_5 nodes.lkt:537



--# expr-start 244 '<FieldAccess for solve_generic_types at nodes.lkt:537:32>' Fld_24 nodes.lkt:537







   if Var_Expr_1.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start LktNode.solve_generic_types
Fld_24 := Liblktlang.Implementation.Lkt_Node_P_Solve_Generic_Types (Node => Var_Expr_1.Node, E_Info => Var_Expr_1.Info);
--# end
--# expr-done 244
if Fld_24 then
   --# expr-start 247 '<Cast to TypeDecl at nodes.lkt:538:34>' Cast_Result_2 nodes.lkt:538





--# expr-start 246 '<get_value at nodes.lkt:538:34>' If_Result_4 nodes.lkt:538



--# expr-start 245 '<FieldAccess for type_var at nodes.lkt:538:34>' Fld_23 nodes.lkt:538







   if Match_5.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_23 := Match_5.Node.Lambda_Arg_Decl_Type_Var'Unrestricted_Access;
--# expr-done 245
Is_Logic_Var_Defined := Entity_Vars.Is_Defined (Fld_23); 
if Is_Logic_Var_Defined then
   
Eq_Solution := Entity_Vars.Get_Value (Fld_23); 
   If_Result_4 := Eq_Solution;
else
   
   If_Result_4 := No_Entity;
end if;



--# expr-done 246



   if If_Result_4.Node = null
      or else If_Result_4.Node.Kind in Lkt_Type_Decl
   then
      
      Cast_Result_2 := Create_Internal_Entity_Type_Decl
        (Node => If_Result_4.Node,
         Info => If_Result_4.Info);

   else
         Cast_Result_2 := No_Entity_Type_Decl;
   end if;


--# expr-done 247
   If_Result_5 := Cast_Result_2;
else
   
   If_Result_5 := No_Entity_Type_Decl;
end if;



--# expr-done 248
Scope_Result := If_Result_5;


   --# end


   Result_Var := Scope_Result;
else
   
   Result_Var := No_Entity_Type_Decl;
end if;



   If_Result_6 := Result_Var;
else
   --# expr-start 250 '<FieldAccess for referenced_decl at nodes.lkt:541:26>' Fld_26 nodes.lkt:541



--# expr-start 249 '<FieldAccess for decl_type at nodes.lkt:541:26>' Fld_25 nodes.lkt:541







   if Match_5.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_25 := Create_Internal_Entity_Type_Ref (Node => Match_5.Node.Lambda_Arg_Decl_F_Decl_Type, Info => Match_5.Info);
--# expr-done 249



   if Fld_25.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start TypeRef.referenced_decl
Fld_26 := Liblktlang.Implementation.Type_Ref_P_Referenced_Decl (Node => Fld_25.Node, E_Info => Fld_25.Info);
--# end
--# expr-done 250
   If_Result_6 := Fld_26;
end if;



--# expr-done 251
Let_Result_5 := If_Result_6; 
--# end
Scope_Result_6 := Let_Result_5;


   --# end


            Match_Result := Scope_Result_6; 
         when Lkt_Field_Decl .. Lkt_Fun_Arg_Decl | Lkt_Dyn_Var_Decl =>
            



   --# scope-start



--# scope-start









   
      Cast_Result_10 := Create_Internal_Entity_Explicitly_Typed_Decl
        (Node => Match_Prefix.Node,
         Info => Match_Prefix.Info);


Match_6 := Cast_Result_10; 
--# bind etd Match_6
--# expr-start 253 '<FieldAccess for referenced_decl at nodes.lkt:543:21>' Fld_29 nodes.lkt:543



--# expr-start 252 '<FieldAccess for decl_type at nodes.lkt:543:21>' Fld_28 nodes.lkt:543







   if Match_6.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_28 := Create_Internal_Entity_Type_Ref (Node => Implementation.Explicitly_Typed_Decl_F_Decl_Type (Match_6.Node), Info => Match_6.Info);
--# expr-done 252



   if Fld_28.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start TypeRef.referenced_decl
Fld_29 := Liblktlang.Implementation.Type_Ref_P_Referenced_Decl (Node => Fld_28.Node, E_Info => Fld_28.Info);
--# end
--# expr-done 253
Let_Result_6 := Fld_29; 
--# end
Scope_Result_7 := Let_Result_6;


   --# end


            Match_Result := Scope_Result_7; 
         when Lkt_Generic_Decl =>
            



   --# scope-start



--# scope-start









   
      Cast_Result_11 := Create_Internal_Entity_Generic_Decl
        (Node => Match_Prefix.Node,
         Info => Match_Prefix.Info);


Match_7 := Cast_Result_11; 
--# bind gd Match_7
--# expr-start 255 '<FieldAccess for get_type at nodes.lkt:544:41>' Fld_31 nodes.lkt:544



--# expr-start 254 '<FieldAccess for decl at nodes.lkt:544:41>' Fld_30 nodes.lkt:544







   if Match_7.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_30 := Create_Internal_Entity_Decl (Node => Match_7.Node.Generic_Decl_F_Decl, Info => Match_7.Info);
--# expr-done 254



   if Fld_30.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start Decl.get_type
Fld_31 := Liblktlang.Implementation.Decl_P_Get_Type (Node => Fld_30.Node, E_Info => Fld_30.Info);
--# end
--# expr-done 255
Let_Result_7 := Fld_31; 
--# end
Scope_Result_8 := Let_Result_7;


   --# end


            Match_Result := Scope_Result_8; 
         when Lkt_Self_Decl =>
            



   --# scope-start



--# scope-start









   
      Cast_Result_12 := Create_Internal_Entity_Self_Decl
        (Node => Match_Prefix.Node,
         Info => Match_Prefix.Info);


Match_8 := Cast_Result_12; 
--# bind sd Match_8
--# expr-start 260 '<Cast to TypeDecl at nodes.lkt:546:21>' Cast_Result_3 nodes.lkt:546





--# expr-start 259 '<FieldAccess for instantiate_generic_decl at nodes.lkt:546:21>' Fld_34 nodes.lkt:546



--# expr-start 256 '<FieldAccess for entity_type at nodes.lkt:546:21>' Fld_32 nodes.lkt:546







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start LktNode.entity_type
Fld_32 := Liblktlang.Implementation.Lkt_Node_P_Entity_Type (Node => Ent.Node);
--# end
--# expr-done 256



   if Fld_32.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# expr-start 258 '<ArrayLiteral at nodes.lkt:547:25>' Array_Lit nodes.lkt:547
--# expr-start 257 '<FieldAccess for owning_type at nodes.lkt:547:26>' Fld_33 nodes.lkt:547







   if Match_8.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start SelfDecl.owning_type
Fld_33 := Liblktlang.Implementation.Self_Decl_P_Owning_Type (Node => Match_8.Node, E_Info => Match_8.Info);
--# end
--# expr-done 257
Array_Lit := Create_Internal_Entity_Type_Decl_Array (Internal_Internal_Entity_Type_Decl_Array'(1 => Fld_33)); 
--# expr-done 258
--# property-call-start Decl.instantiate_generic_decl
Fld_34 := Liblktlang.Implementation.Decl_P_Instantiate_Generic_Decl (Node => Fld_32.Node, Type_Params => Array_Lit, E_Info => Fld_32.Info);
--# end
--# expr-done 259



   if Fld_34.Node = null
      or else Fld_34.Node.Kind in Lkt_Type_Decl
   then
      
      Cast_Result_3 := Create_Internal_Entity_Type_Decl
        (Node => Fld_34.Node,
         Info => Fld_34.Info);

   else
         Raise_Property_Exception
           (Self, Property_Error'Identity, "invalid object cast");
   end if;


--# expr-done 260
Let_Result_8 := Cast_Result_3; 
--# end
Scope_Result_9 := Let_Result_8;


   --# end
      Finalizer_Scope_459;


            Match_Result := Scope_Result_9; 
         when Lkt_Node_Decl =>
            



   --# scope-start



--# scope-start









   
      Cast_Result_13 := Create_Internal_Entity_Node_Decl
        (Node => Match_Prefix.Node,
         Info => Match_Prefix.Info);


Match_9 := Cast_Result_13; 
--# bind nd Match_9
--# expr-start 261 '<FieldAccess for owning_type at nodes.lkt:550:38>' Fld_35 nodes.lkt:550







   if Match_9.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start NodeDecl.owning_type
Fld_35 := Liblktlang.Implementation.Node_Decl_P_Owning_Type (Node => Match_9.Node, E_Info => Match_9.Info);
--# end
--# expr-done 261
Let_Result_9 := Fld_35; 
--# end
Scope_Result_10 := Let_Result_9;


   --# end


            Match_Result := Scope_Result_10; 
         when Lkt_Grammar_Rule_Decl .. Lkt_Synthetic_Lexer_Decl | Lkt_Env_Spec_Decl | Lkt_Grammar_Decl .. Lkt_Synth_Fun_Decl =>
            



   --# scope-start



--# scope-start









   
      Cast_Result_14 := Create_Internal_Entity_Decl
        (Node => Match_Prefix.Node,
         Info => Match_Prefix.Info);


Match_10 := Cast_Result_14; 
--# bind _ Match_10

Let_Result_10 := No_Entity_Type_Decl; 
--# end
Scope_Result_11 := Let_Result_10;


   --# end


            Match_Result := Scope_Result_11; 
end case;

--# expr-done 262
Scope_Result_12 := Match_Result;


   --# end


   Result_Var_1 := Scope_Result_12;
else
   
   Result_Var_1 := No_Entity_Type_Decl;
end if;




         Property_Result := Result_Var_1;
         
   --# end


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_453;
                     Finalizer_Scope_459;


               if Self /= null then
                     if not Self.Unit.Context.In_Populate_Lexical_Env then
                        Add_Memoized_Error
                          (Self.Unit, Mmz_Handle, Exc, Mmz_Stored);
                     end if;
               end if;


            raise;
      end;

      if Self /= null then
         if not Self.Unit.Context.In_Populate_Lexical_Env then

            Mmz_Val := (Kind => Mmz_Internal_Entity_Type_Decl,
                        As_Internal_Entity_Type_Decl => Property_Result);
            Add_Memoized_Value (Self.Unit, Mmz_Handle, Mmz_Val, Mmz_Stored);

         end if;
      end if;



   return Property_Result;
end Decl_P_Get_Type;
--# end

   







--# property-start Decl.get_cast_type nodes.lkt:558
pragma Warnings (Off, "is not referenced");
 function Decl_P_Get_Cast_Type
  
  (Node : Bare_Decl
      ; Cast_To : Internal_Entity_Type_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Internal_Entity_Type_Decl
is
   Self : Bare_Decl  := Bare_Decl (Node);
     Ent : Internal_Entity_Decl :=
       Internal_Entity_Decl'(Node => Self, Info => E_Info);
      --# bind entity Ent

   

   --# bind cast_to Cast_To

   Property_Result : Internal_Entity_Type_Decl;

      
            procedure Finalizer_Scope_88 with Inline_Always;

      Fld : Internal_Entity_Named_Type_Decl;
Array_Lit : Internal_Entity_Type_Decl_Array_Access;
Fld_1 : Internal_Entity_Decl;
Cast_Expr : Internal_Entity_Type_Decl;
Cast_Result : Internal_Entity_Decl;
Is_Null : Boolean;
Is_Null_1 : Boolean;
If_Result : Boolean;
Not_Val : Boolean;
Fld_2 : Internal_Entity_Named_Type_Decl;
Fld_3 : Bare_Named_Type_Decl;
Cast_Result_1 : Bare_Decl;
Is_Equal : Boolean;
If_Result_1 : Boolean;
Fld_4 : Bare_Type_Decl;
Fld_5 : Internal_Entity_Named_Type_Decl;
Fld_6 : Bare_Named_Type_Decl;
Cast_Result_2 : Bare_Type_Decl;
Is_Equal_1 : Boolean;
Not_Val_1 : Boolean;
If_Result_2 : Boolean;
If_Result_3 : Internal_Entity_Decl;
Cast_Result_3 : Internal_Entity_Type_Decl;

            procedure Finalizer_Scope_88 is
            begin
                     Dec_Ref (Array_Lit);
            end Finalizer_Scope_88;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

            Populate_Lexical_Env_For_Unit (Self);
      end if;


      begin
         
   --# scope-start

         --# expr-start 281 '<Cast to TypeDecl at nodes.lkt:559:9>' Cast_Result_3 nodes.lkt:559





--# expr-start 280 '<If at nodes.lkt:560:13>' If_Result_3 nodes.lkt:560



--# expr-start 276 '<BooleanBinaryOp And at nodes.lkt:561:17>' If_Result_2 nodes.lkt:561



--# expr-start 270 '<BooleanBinaryOp And at nodes.lkt:562:21>' If_Result_1 nodes.lkt:562



--# expr-start 266 '<Not at nodes.lkt:562:21>' Not_Val nodes.lkt:562
--# expr-start 265 '<BooleanBinaryOp Or at nodes.lkt:562:26>' If_Result nodes.lkt:562



--# expr-start 263 '<IsNull at nodes.lkt:562:26>' Is_Null nodes.lkt:562

Is_Null := Cast_To.Node = null; 
--# expr-done 263
if Is_Null then
   
   If_Result := True;
else
   --# expr-start 264 '<IsNull at nodes.lkt:562:45>' Is_Null_1 nodes.lkt:562

Is_Null_1 := Ent.Node = null; 
--# expr-done 264
   If_Result := Is_Null_1;
end if;



--# expr-done 265
Not_Val := not (If_Result); 
--# expr-done 266
if Not_Val then
   --# expr-start 269 '<Eq at nodes.lkt:563:25>' Is_Equal nodes.lkt:563






--# expr-start 268 '<FieldAccess for node at nodes.lkt:563:33>' Fld_3 nodes.lkt:563



--# expr-start 267 '<FieldAccess for entity_type at nodes.lkt:563:33>' Fld_2 nodes.lkt:563







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start LktNode.entity_type
Fld_2 := Liblktlang.Implementation.Lkt_Node_P_Entity_Type (Node => Self);
--# end
--# expr-done 267





Fld_3 := Fld_2.Node;
--# expr-done 268



   
      Cast_Result_1 := Fld_3;


Is_Equal := Self = Cast_Result_1; 
--# expr-done 269
   If_Result_1 := Is_Equal;
else
   
   If_Result_1 := False;
end if;



--# expr-done 270
if If_Result_1 then
   --# expr-start 275 '<Not at nodes.lkt:565:21>' Not_Val_1 nodes.lkt:565
--# expr-start 274 '<Eq at nodes.lkt:565:21>' Is_Equal_1 nodes.lkt:565
--# expr-start 271 '<FieldAccess for node at nodes.lkt:565:21>' Fld_4 nodes.lkt:565









Fld_4 := Cast_To.Node;
--# expr-done 271





--# expr-start 273 '<FieldAccess for node at nodes.lkt:565:37>' Fld_6 nodes.lkt:565



--# expr-start 272 '<FieldAccess for entity_type at nodes.lkt:565:37>' Fld_5 nodes.lkt:565







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start LktNode.entity_type
Fld_5 := Liblktlang.Implementation.Lkt_Node_P_Entity_Type (Node => Self);
--# end
--# expr-done 272





Fld_6 := Fld_5.Node;
--# expr-done 273



   
      Cast_Result_2 := Fld_6;


Is_Equal_1 := Fld_4 = Cast_Result_2; 
--# expr-done 274
Not_Val_1 := not (Is_Equal_1); 
--# expr-done 275
   If_Result_2 := Not_Val_1;
else
   
   If_Result_2 := False;
end if;



--# expr-done 276
if If_Result_2 then
   --# expr-start 279 '<FieldAccess for instantiate_generic_decl at nodes.lkt:566:18>' Fld_1 nodes.lkt:566



--# expr-start 277 '<FieldAccess for entity_type at nodes.lkt:566:18>' Fld nodes.lkt:566







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start LktNode.entity_type
Fld := Liblktlang.Implementation.Lkt_Node_P_Entity_Type (Node => Self);
--# end
--# expr-done 277



   if Fld.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# expr-start 278 '<ArrayLiteral at nodes.lkt:566:62>' Array_Lit nodes.lkt:566

Array_Lit := Create_Internal_Entity_Type_Decl_Array (Internal_Internal_Entity_Type_Decl_Array'(1 => Cast_To)); 
--# expr-done 278
--# property-call-start Decl.instantiate_generic_decl
Fld_1 := Liblktlang.Implementation.Decl_P_Instantiate_Generic_Decl (Node => Fld.Node, Type_Params => Array_Lit, E_Info => Fld.Info);
--# end
--# expr-done 279
   If_Result_3 := Fld_1;
else
   





Cast_Expr := Cast_To; 



   
      Cast_Result := Create_Internal_Entity_Decl
        (Node => Cast_Expr.Node,
         Info => Cast_Expr.Info);


   If_Result_3 := Cast_Result;
end if;



--# expr-done 280



   if If_Result_3.Node = null
      or else If_Result_3.Node.Kind in Lkt_Type_Decl
   then
      
      Cast_Result_3 := Create_Internal_Entity_Type_Decl
        (Node => If_Result_3.Node,
         Info => If_Result_3.Info);

   else
         Cast_Result_3 := No_Entity_Type_Decl;
   end if;


--# expr-done 281

         Property_Result := Cast_Result_3;
         
   --# end
      Finalizer_Scope_88;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_88;




            raise;
      end;



   return Property_Result;
end Decl_P_Get_Cast_Type;
--# end

   







--# property-start Decl.get_keep_type nodes.lkt:575
pragma Warnings (Off, "is not referenced");
 function Decl_P_Get_Keep_Type
  
  (Node : Bare_Decl
      ; Keep_Type : Internal_Entity_Type_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Internal_Entity_Type_Decl
is
   Self : Bare_Decl  := Bare_Decl (Node);
     Ent : Internal_Entity_Decl :=
       Internal_Entity_Decl'(Node => Self, Info => E_Info);
      --# bind entity Ent

   

   --# bind keep_type Keep_Type

   Property_Result : Internal_Entity_Type_Decl;

      
            procedure Finalizer_Scope_89 with Inline_Always;

      Var_Expr_7 : Internal_Entity_Type_Decl;
Fld : Internal_Entity_Named_Type_Decl;
Array_Lit : Internal_Entity_Type_Decl_Array_Access;
Fld_1 : Internal_Entity_Decl;
Cast_Expr : Internal_Entity_Type_Decl;
Cast_Result : Internal_Entity_Decl;
Is_Null : Boolean;
Is_Null_1 : Boolean;
If_Result : Boolean;
Not_Val : Boolean;
Fld_2 : Internal_Entity_Named_Type_Decl;
Fld_3 : Bare_Named_Type_Decl;
Cast_Result_1 : Bare_Decl;
Is_Equal : Boolean;
Fld_4 : Internal_Entity_Named_Type_Decl;
Fld_5 : Bare_Named_Type_Decl;
Cast_Result_2 : Bare_Decl;
Is_Equal_1 : Boolean;
Cast_Expr_1 : Internal_Entity_Decl;
Cast_Result_3 : Internal_Entity_Type_Decl;
Fld_6 : Internal_Entity_Type_Decl;
Fld_7 : Bare_Type_Decl;
Fld_8 : Internal_Entity_Named_Type_Decl;
Fld_9 : Bare_Named_Type_Decl;
Cast_Result_4 : Bare_Type_Decl;
Is_Equal_2 : Boolean;
If_Result_1 : Boolean;
If_Result_2 : Boolean;
If_Result_3 : Boolean;
Fld_10 : Bare_Type_Decl;
Fld_11 : Internal_Entity_Named_Type_Decl;
Fld_12 : Bare_Named_Type_Decl;
Cast_Result_5 : Bare_Type_Decl;
Is_Equal_3 : Boolean;
Not_Val_1 : Boolean;
If_Result_4 : Boolean;
If_Result_5 : Internal_Entity_Decl;
Cast_Result_6 : Internal_Entity_Type_Decl;
Fld_13 : Internal_Entity_Type_Decl;
Scope_Result : Internal_Entity_Type_Decl;
Result_Var : Internal_Entity_Type_Decl;

            procedure Finalizer_Scope_89 is
            begin
                     Dec_Ref (Array_Lit);
            end Finalizer_Scope_89;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

            Populate_Lexical_Env_For_Unit (Self);
      end if;


      begin
         
   --# scope-start

         


--# expr-start 311 '<Cast to TypeDecl at nodes.lkt:576:9>' Cast_Result_6 nodes.lkt:576





--# expr-start 310 '<If at nodes.lkt:577:13>' If_Result_5 nodes.lkt:577



--# expr-start 306 '<BooleanBinaryOp And at nodes.lkt:578:17>' If_Result_4 nodes.lkt:578



--# expr-start 300 '<BooleanBinaryOp And at nodes.lkt:579:21>' If_Result_3 nodes.lkt:579



--# expr-start 285 '<Not at nodes.lkt:579:21>' Not_Val nodes.lkt:579
--# expr-start 284 '<BooleanBinaryOp Or at nodes.lkt:579:26>' If_Result nodes.lkt:579



--# expr-start 282 '<IsNull at nodes.lkt:579:26>' Is_Null nodes.lkt:579

Is_Null := Keep_Type.Node = null; 
--# expr-done 282
if Is_Null then
   
   If_Result := True;
else
   --# expr-start 283 '<IsNull at nodes.lkt:579:47>' Is_Null_1 nodes.lkt:579

Is_Null_1 := Ent.Node = null; 
--# expr-done 283
   If_Result := Is_Null_1;
end if;



--# expr-done 284
Not_Val := not (If_Result); 
--# expr-done 285
if Not_Val then
   --# expr-start 299 '<BooleanBinaryOp Or at nodes.lkt:581:25>' If_Result_2 nodes.lkt:581



--# expr-start 288 '<Eq at nodes.lkt:581:25>' Is_Equal nodes.lkt:581






--# expr-start 287 '<FieldAccess for node at nodes.lkt:581:33>' Fld_3 nodes.lkt:581



--# expr-start 286 '<FieldAccess for entity_type at nodes.lkt:581:33>' Fld_2 nodes.lkt:581







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start LktNode.entity_type
Fld_2 := Liblktlang.Implementation.Lkt_Node_P_Entity_Type (Node => Self);
--# end
--# expr-done 286





Fld_3 := Fld_2.Node;
--# expr-done 287



   
      Cast_Result_1 := Fld_3;


Is_Equal := Self = Cast_Result_1; 
--# expr-done 288
if Is_Equal then
   
   If_Result_2 := True;
else
   --# expr-start 298 '<BooleanBinaryOp And at nodes.lkt:583:29>' If_Result_1 nodes.lkt:583



--# expr-start 291 '<Eq at nodes.lkt:583:29>' Is_Equal_1 nodes.lkt:583






--# expr-start 290 '<FieldAccess for node at nodes.lkt:583:37>' Fld_5 nodes.lkt:583



--# expr-start 289 '<FieldAccess for array_type at nodes.lkt:583:37>' Fld_4 nodes.lkt:583







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start LktNode.array_type
Fld_4 := Liblktlang.Implementation.Lkt_Node_P_Array_Type (Node => Self);
--# end
--# expr-done 289





Fld_5 := Fld_4.Node;
--# expr-done 290



   
      Cast_Result_2 := Fld_5;


Is_Equal_1 := Self = Cast_Result_2; 
--# expr-done 291
if Is_Equal_1 then
   --# expr-start 297 '<Eq at nodes.lkt:584:33>' Is_Equal_2 nodes.lkt:584
--# expr-start 294 '<FieldAccess for node at nodes.lkt:584:33>' Fld_7 nodes.lkt:584



--# expr-start 293 '<FieldAccess for get_array_content_type at nodes.lkt:584:33>' Fld_6 nodes.lkt:584



--# expr-start 292 '<Cast to TypeDecl at nodes.lkt:584:33>' Cast_Result_3 nodes.lkt:584






Cast_Expr_1 := Ent; 



   if Cast_Expr_1.Node = null
      or else Cast_Expr_1.Node.Kind in Lkt_Type_Decl
   then
      
      Cast_Result_3 := Create_Internal_Entity_Type_Decl
        (Node => Cast_Expr_1.Node,
         Info => Cast_Expr_1.Info);

   else
         Cast_Result_3 := No_Entity_Type_Decl;
   end if;


--# expr-done 292



   if Cast_Result_3.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start TypeDecl.get_array_content_type
Fld_6 := Liblktlang.Implementation.Type_Decl_P_Get_Array_Content_Type (Node => Cast_Result_3.Node, E_Info => Cast_Result_3.Info);
--# end
--# expr-done 293





Fld_7 := Fld_6.Node;
--# expr-done 294





--# expr-start 296 '<FieldAccess for node at nodes.lkt:585:32>' Fld_9 nodes.lkt:585



--# expr-start 295 '<FieldAccess for entity_type at nodes.lkt:585:32>' Fld_8 nodes.lkt:585







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start LktNode.entity_type
Fld_8 := Liblktlang.Implementation.Lkt_Node_P_Entity_Type (Node => Self);
--# end
--# expr-done 295





Fld_9 := Fld_8.Node;
--# expr-done 296



   
      Cast_Result_4 := Fld_9;


Is_Equal_2 := Fld_7 = Cast_Result_4; 
--# expr-done 297
   If_Result_1 := Is_Equal_2;
else
   
   If_Result_1 := False;
end if;



--# expr-done 298
   If_Result_2 := If_Result_1;
end if;



--# expr-done 299
   If_Result_3 := If_Result_2;
else
   
   If_Result_3 := False;
end if;



--# expr-done 300
if If_Result_3 then
   --# expr-start 305 '<Not at nodes.lkt:589:21>' Not_Val_1 nodes.lkt:589
--# expr-start 304 '<Eq at nodes.lkt:589:21>' Is_Equal_3 nodes.lkt:589
--# expr-start 301 '<FieldAccess for node at nodes.lkt:589:21>' Fld_10 nodes.lkt:589









Fld_10 := Keep_Type.Node;
--# expr-done 301





--# expr-start 303 '<FieldAccess for node at nodes.lkt:589:39>' Fld_12 nodes.lkt:589



--# expr-start 302 '<FieldAccess for entity_type at nodes.lkt:589:39>' Fld_11 nodes.lkt:589







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start LktNode.entity_type
Fld_11 := Liblktlang.Implementation.Lkt_Node_P_Entity_Type (Node => Self);
--# end
--# expr-done 302





Fld_12 := Fld_11.Node;
--# expr-done 303



   
      Cast_Result_5 := Fld_12;


Is_Equal_3 := Fld_10 = Cast_Result_5; 
--# expr-done 304
Not_Val_1 := not (Is_Equal_3); 
--# expr-done 305
   If_Result_4 := Not_Val_1;
else
   
   If_Result_4 := False;
end if;



--# expr-done 306
if If_Result_4 then
   --# expr-start 309 '<FieldAccess for instantiate_generic_decl at nodes.lkt:590:18>' Fld_1 nodes.lkt:590



--# expr-start 307 '<FieldAccess for entity_type at nodes.lkt:590:18>' Fld nodes.lkt:590







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start LktNode.entity_type
Fld := Liblktlang.Implementation.Lkt_Node_P_Entity_Type (Node => Self);
--# end
--# expr-done 307



   if Fld.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# expr-start 308 '<ArrayLiteral at nodes.lkt:590:62>' Array_Lit nodes.lkt:590

Array_Lit := Create_Internal_Entity_Type_Decl_Array (Internal_Internal_Entity_Type_Decl_Array'(1 => Keep_Type)); 
--# expr-done 308
--# property-call-start Decl.instantiate_generic_decl
Fld_1 := Liblktlang.Implementation.Decl_P_Instantiate_Generic_Decl (Node => Fld.Node, Type_Params => Array_Lit, E_Info => Fld.Info);
--# end
--# expr-done 309
   If_Result_5 := Fld_1;
else
   





Cast_Expr := Keep_Type; 



   
      Cast_Result := Create_Internal_Entity_Decl
        (Node => Cast_Expr.Node,
         Info => Cast_Expr.Info);


   If_Result_5 := Cast_Result;
end if;



--# expr-done 310



   if If_Result_5.Node = null
      or else If_Result_5.Node.Kind in Lkt_Type_Decl
   then
      
      Cast_Result_6 := Create_Internal_Entity_Type_Decl
        (Node => If_Result_5.Node,
         Info => If_Result_5.Info);

   else
         Cast_Result_6 := No_Entity_Type_Decl;
   end if;


--# expr-done 311
Var_Expr_7 := Cast_Result_6;





if Var_Expr_7 /= No_Entity_Type_Decl then
   



   --# scope-start


   

--# expr-start 312 '<FieldAccess for make_array_type at nodes.lkt:576:9>' Fld_13 nodes.lkt:576







   if Var_Expr_7.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start TypeDecl.make_array_type
Fld_13 := Liblktlang.Implementation.Type_Decl_P_Make_Array_Type (Node => Var_Expr_7.Node, E_Info => Var_Expr_7.Info);
--# end
--# expr-done 312
Scope_Result := Fld_13;


   --# end


   Result_Var := Scope_Result;
else
   
   Result_Var := No_Entity_Type_Decl;
end if;




         Property_Result := Result_Var;
         
   --# end
      Finalizer_Scope_89;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_89;




            raise;
      end;



   return Property_Result;
end Decl_P_Get_Keep_Type;
--# end

   







--# property-start Decl.get_suffix_type nodes.lkt:599
pragma Warnings (Off, "is not referenced");
 function Decl_P_Get_Suffix_Type
  
  (Node : Bare_Decl
      ; Prefix_Type : Internal_Entity_Type_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Internal_Entity_Type_Decl
is
   Self : Bare_Decl  := Bare_Decl (Node);
     Ent : Internal_Entity_Decl :=
       Internal_Entity_Decl'(Node => Self, Info => E_Info);
      --# bind entity Ent

   

   --# bind prefix_type Prefix_Type

   Property_Result : Internal_Entity_Type_Decl;

      
            procedure Finalizer_Scope_90 with Inline_Always;

      Local_Suffix_Type : Internal_Entity_Type_Decl;
Var_Expr_8 : Internal_Entity_Decl;
Var_Expr_9 : Internal_Entity_Full_Decl;
Fld : Internal_Entity_Type_Decl;
Scope_Result : Internal_Entity_Type_Decl;
Result_Var : Internal_Entity_Type_Decl;
Fld_1 : Internal_Entity_Named_Type_Decl;
Array_Lit : Internal_Entity_Type_Decl_Array_Access;
Fld_2 : Internal_Entity_Decl;
Cast_Expr : Internal_Entity_Decl;
Cast_Result : Internal_Entity_Field_Decl;
Fld_3 : Internal_Entity_Function_Type;
Fld_4 : Internal_Entity_Function_Type;
Cast_Result_1 : Internal_Entity_Type_Decl;
Is_Null : Boolean;
Not_Val : Boolean;
Is_Null_1 : Boolean;
If_Result : Boolean;
Is_A : Boolean;
If_Result_1 : Boolean;
Fld_5 : Internal_Entity_Full_Decl;
Sym : Symbol_Type;
Fld_6 : Boolean;
If_Result_2 : Boolean;
If_Result_3 : Internal_Entity_Type_Decl;
Cast_Result_2 : Internal_Entity_Type_Decl;
Is_Null_2 : Boolean;
Not_Val_1 : Boolean;
Is_Null_3 : Boolean;
If_Result_4 : Boolean;
Is_A_1 : Boolean;
If_Result_5 : Boolean;
Fld_7 : Internal_Entity_Full_Decl;
Sym_1 : Symbol_Type;
Fld_8 : Boolean;
If_Result_6 : Boolean;
If_Result_7 : Internal_Entity_Type_Decl;
Cast_Result_3 : Internal_Entity_Decl;
Is_Null_4 : Boolean;
Not_Val_2 : Boolean;
Is_Null_5 : Boolean;
Not_Val_3 : Boolean;
If_Result_8 : Boolean;
Fld_9 : Bare_Type_Decl;
Fld_10 : Internal_Entity_Named_Type_Decl;
Fld_11 : Bare_Named_Type_Decl;
Cast_Result_4 : Bare_Type_Decl;
Is_Equal : Boolean;
If_Result_9 : Boolean;
Fld_12 : Internal_Entity_Full_Decl;
Sym_2 : Symbol_Type;
Fld_13 : Boolean;
Scope_Result_1 : Boolean;
Result_Var_1 : Boolean;
If_Result_10 : Boolean;
If_Result_11 : Internal_Entity_Decl;
Cast_Result_5 : Internal_Entity_Type_Decl;
Let_Result : Internal_Entity_Type_Decl;

            procedure Finalizer_Scope_90 is
            begin
                     Dec_Ref (Array_Lit);
            end Finalizer_Scope_90;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

            Populate_Lexical_Env_For_Unit (Self);
      end if;


      begin
         
   --# scope-start

         --# expr-start 358 '<Let at nodes.lkt:600:9>' Let_Result nodes.lkt:600
--# scope-start




Var_Expr_8 := Ent;





if Var_Expr_8 /= No_Entity_Decl then
   



   --# scope-start


   

--# expr-start 313 '<FieldAccess for get_type at nodes.lkt:600:27>' Fld nodes.lkt:600







   if Var_Expr_8.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start Decl.get_type
Fld := Liblktlang.Implementation.Decl_P_Get_Type (Node => Var_Expr_8.Node, E_Info => Var_Expr_8.Info);
--# end
--# expr-done 313
Scope_Result := Fld;


   --# end


   Result_Var := Scope_Result;
else
   
   Result_Var := No_Entity_Type_Decl;
end if;



Local_Suffix_Type := Result_Var; 
--# bind suffix_type Local_Suffix_Type
--# expr-start 357 '<Cast to TypeDecl at nodes.lkt:602:9>' Cast_Result_5 nodes.lkt:602





--# expr-start 356 '<If at nodes.lkt:603:13>' If_Result_11 nodes.lkt:603



--# expr-start 327 '<BooleanBinaryOp And at nodes.lkt:604:17>' If_Result_10 nodes.lkt:604



--# expr-start 323 '<BooleanBinaryOp And at nodes.lkt:605:21>' If_Result_9 nodes.lkt:605



--# expr-start 318 '<BooleanBinaryOp And at nodes.lkt:605:22>' If_Result_8 nodes.lkt:605



--# expr-start 315 '<Not at nodes.lkt:605:22>' Not_Val_2 nodes.lkt:605
--# expr-start 314 '<IsNull at nodes.lkt:605:26>' Is_Null_4 nodes.lkt:605

Is_Null_4 := Prefix_Type.Node = null; 
--# expr-done 314
Not_Val_2 := not (Is_Null_4); 
--# expr-done 315
if Not_Val_2 then
   --# expr-start 317 '<Not at nodes.lkt:605:50>' Not_Val_3 nodes.lkt:605
--# expr-start 316 '<IsNull at nodes.lkt:605:54>' Is_Null_5 nodes.lkt:605

Is_Null_5 := Ent.Node = null; 
--# expr-done 316
Not_Val_3 := not (Is_Null_5); 
--# expr-done 317
   If_Result_8 := Not_Val_3;
else
   
   If_Result_8 := False;
end if;



--# expr-done 318
if If_Result_8 then
   --# expr-start 322 '<Eq at nodes.lkt:606:25>' Is_Equal nodes.lkt:606
--# expr-start 319 '<FieldAccess for node at nodes.lkt:606:25>' Fld_9 nodes.lkt:606









Fld_9 := Prefix_Type.Node;
--# expr-done 319





--# expr-start 321 '<FieldAccess for node at nodes.lkt:606:45>' Fld_11 nodes.lkt:606



--# expr-start 320 '<FieldAccess for entity_type at nodes.lkt:606:45>' Fld_10 nodes.lkt:606







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start LktNode.entity_type
Fld_10 := Liblktlang.Implementation.Lkt_Node_P_Entity_Type (Node => Self);
--# end
--# expr-done 320





Fld_11 := Fld_10.Node;
--# expr-done 321



   
      Cast_Result_4 := Fld_11;


Is_Equal := Fld_9 = Cast_Result_4; 
--# expr-done 322
   If_Result_9 := Is_Equal;
else
   
   If_Result_9 := False;
end if;



--# expr-done 323
if If_Result_9 then
   


--# expr-start 324 '<FieldAccess for full_decl at nodes.lkt:608:21>' Fld_12 nodes.lkt:608







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start Decl.full_decl
Fld_12 := Liblktlang.Implementation.Decl_P_Full_Decl (Node => Ent.Node, E_Info => Ent.Info);
--# end
--# expr-done 324
Var_Expr_9 := Fld_12;





if Var_Expr_9 /= No_Entity_Full_Decl then
   



   --# scope-start


   

--# expr-start 326 '<FieldAccess for has_annotation at nodes.lkt:608:21>' Fld_13 nodes.lkt:608







   if Var_Expr_9.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# expr-start 325 '<Symbol parse_field at nodes.lkt:608:54>' Sym_2 nodes.lkt:608
Sym_2 := Precomputed_Symbol (Precomputed_Symbol_Table (Self.Unit.Context.Symbols), Precomputed_Sym_Parse_Field); 
--# expr-done 325
--# property-call-start FullDecl.has_annotation
Fld_13 := Liblktlang.Implementation.Full_Decl_P_Has_Annotation (Node => Var_Expr_9.Node, Name => Sym_2);
--# end
--# expr-done 326
Scope_Result_1 := Fld_13;


   --# end


   Result_Var_1 := Scope_Result_1;
else
   
   Result_Var_1 := False;
end if;



   If_Result_10 := Result_Var_1;
else
   
   If_Result_10 := False;
end if;



--# expr-done 327
if If_Result_10 then
   --# expr-start 330 '<FieldAccess for instantiate_generic_decl at nodes.lkt:609:18>' Fld_2 nodes.lkt:609



--# expr-start 328 '<FieldAccess for entity_type at nodes.lkt:609:18>' Fld_1 nodes.lkt:609







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start LktNode.entity_type
Fld_1 := Liblktlang.Implementation.Lkt_Node_P_Entity_Type (Node => Self);
--# end
--# expr-done 328



   if Fld_1.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# expr-start 329 '<ArrayLiteral at nodes.lkt:609:62>' Array_Lit nodes.lkt:609

Array_Lit := Create_Internal_Entity_Type_Decl_Array (Internal_Internal_Entity_Type_Decl_Array'(1 => Local_Suffix_Type)); 
--# expr-done 329
--# property-call-start Decl.instantiate_generic_decl
Fld_2 := Liblktlang.Implementation.Decl_P_Instantiate_Generic_Decl (Node => Fld_1.Node, Type_Params => Array_Lit, E_Info => Fld_1.Info);
--# end
--# expr-done 330
   If_Result_11 := Fld_2;
else
   




--# expr-start 355 '<If at nodes.lkt:603:13>' If_Result_7 nodes.lkt:603



--# expr-start 340 '<BooleanBinaryOp And at nodes.lkt:615:17>' If_Result_6 nodes.lkt:615



--# expr-start 336 '<BooleanBinaryOp And at nodes.lkt:616:21>' If_Result_5 nodes.lkt:616



--# expr-start 334 '<BooleanBinaryOp And at nodes.lkt:616:22>' If_Result_4 nodes.lkt:616



--# expr-start 332 '<Not at nodes.lkt:616:22>' Not_Val_1 nodes.lkt:616
--# expr-start 331 '<IsNull at nodes.lkt:616:26>' Is_Null_2 nodes.lkt:616

Is_Null_2 := Ent.Node = null; 
--# expr-done 331
Not_Val_1 := not (Is_Null_2); 
--# expr-done 332
if Not_Val_1 then
   --# expr-start 333 '<IsNull at nodes.lkt:616:43>' Is_Null_3 nodes.lkt:616

Is_Null_3 := Prefix_Type.Node = null; 
--# expr-done 333
   If_Result_4 := Is_Null_3;
else
   
   If_Result_4 := False;
end if;



--# expr-done 334
if If_Result_4 then
   --# expr-start 335 '<IsA FieldDecl at nodes.lkt:617:25>' Is_A_1 nodes.lkt:617

Is_A_1 := Self /= null 
and then Self.Kind in Lkt_Field_Decl_Range; 
--# expr-done 335
   If_Result_5 := Is_A_1;
else
   
   If_Result_5 := False;
end if;



--# expr-done 336
if If_Result_5 then
   --# expr-start 339 '<FieldAccess for has_annotation at nodes.lkt:619:21>' Fld_8 nodes.lkt:619



--# expr-start 337 '<FieldAccess for full_decl at nodes.lkt:619:21>' Fld_7 nodes.lkt:619







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start Decl.full_decl
Fld_7 := Liblktlang.Implementation.Decl_P_Full_Decl (Node => Ent.Node, E_Info => Ent.Info);
--# end
--# expr-done 337



   if Fld_7.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# expr-start 338 '<Symbol lazy at nodes.lkt:619:53>' Sym_1 nodes.lkt:619
Sym_1 := Precomputed_Symbol (Precomputed_Symbol_Table (Self.Unit.Context.Symbols), Precomputed_Sym_Lazy); 
--# expr-done 338
--# property-call-start FullDecl.has_annotation
Fld_8 := Liblktlang.Implementation.Full_Decl_P_Has_Annotation (Node => Fld_7.Node, Name => Sym_1);
--# end
--# expr-done 339
   If_Result_6 := Fld_8;
else
   
   If_Result_6 := False;
end if;



--# expr-done 340
if If_Result_6 then
   




--# expr-start 342 '<FieldAccess for lazy_field_function_type at nodes.lkt:620:18>' Fld_3 nodes.lkt:620



--# expr-start 341 '<Cast to FieldDecl at nodes.lkt:620:18>' Cast_Result nodes.lkt:620






Cast_Expr := Ent; 



   if Cast_Expr.Node = null
      or else Cast_Expr.Node.Kind in Lkt_Field_Decl_Range
   then
      
      Cast_Result := Create_Internal_Entity_Field_Decl
        (Node => Cast_Expr.Node,
         Info => Cast_Expr.Info);

   else
         Cast_Result := No_Entity_Field_Decl;
   end if;


--# expr-done 341



   if Cast_Result.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start FieldDecl.lazy_field_function_type
Fld_3 := Liblktlang.Implementation.Field_Decl_P_Lazy_Field_Function_Type (Node => Cast_Result.Node, E_Info => Cast_Result.Info);
--# end
--# expr-done 342



   
      Cast_Result_2 := Create_Internal_Entity_Type_Decl
        (Node => Fld_3.Node,
         Info => Fld_3.Info);


   If_Result_7 := Cast_Result_2;
else
   --# expr-start 354 '<If at nodes.lkt:603:13>' If_Result_3 nodes.lkt:603



--# expr-start 352 '<BooleanBinaryOp And at nodes.lkt:622:17>' If_Result_2 nodes.lkt:622



--# expr-start 348 '<BooleanBinaryOp And at nodes.lkt:623:21>' If_Result_1 nodes.lkt:623



--# expr-start 346 '<BooleanBinaryOp And at nodes.lkt:623:22>' If_Result nodes.lkt:623



--# expr-start 344 '<Not at nodes.lkt:623:22>' Not_Val nodes.lkt:623
--# expr-start 343 '<IsNull at nodes.lkt:623:26>' Is_Null nodes.lkt:623

Is_Null := Ent.Node = null; 
--# expr-done 343
Not_Val := not (Is_Null); 
--# expr-done 344
if Not_Val then
   --# expr-start 345 '<IsNull at nodes.lkt:623:43>' Is_Null_1 nodes.lkt:623

Is_Null_1 := Prefix_Type.Node = null; 
--# expr-done 345
   If_Result := Is_Null_1;
else
   
   If_Result := False;
end if;



--# expr-done 346
if If_Result then
   --# expr-start 347 '<IsA FunDecl at nodes.lkt:624:25>' Is_A nodes.lkt:624

Is_A := Self /= null 
and then Self.Kind in Lkt_Fun_Decl_Range; 
--# expr-done 347
   If_Result_1 := Is_A;
else
   
   If_Result_1 := False;
end if;



--# expr-done 348
if If_Result_1 then
   --# expr-start 351 '<FieldAccess for has_annotation at nodes.lkt:626:21>' Fld_6 nodes.lkt:626



--# expr-start 349 '<FieldAccess for full_decl at nodes.lkt:626:21>' Fld_5 nodes.lkt:626







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start Decl.full_decl
Fld_5 := Liblktlang.Implementation.Decl_P_Full_Decl (Node => Ent.Node, E_Info => Ent.Info);
--# end
--# expr-done 349



   if Fld_5.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# expr-start 350 '<Symbol property at nodes.lkt:626:53>' Sym nodes.lkt:626
Sym := Precomputed_Symbol (Precomputed_Symbol_Table (Self.Unit.Context.Symbols), Precomputed_Sym_Property); 
--# expr-done 350
--# property-call-start FullDecl.has_annotation
Fld_6 := Liblktlang.Implementation.Full_Decl_P_Has_Annotation (Node => Fld_5.Node, Name => Sym);
--# end
--# expr-done 351
   If_Result_2 := Fld_6;
else
   
   If_Result_2 := False;
end if;



--# expr-done 352
if If_Result_2 then
   




--# expr-start 353 '<FieldAccess for function_type at nodes.lkt:627:18>' Fld_4 nodes.lkt:627







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start Decl.function_type
Fld_4 := Liblktlang.Implementation.Decl_P_Function_Type (Node => Ent.Node, E_Info => Ent.Info);
--# end
--# expr-done 353



   
      Cast_Result_1 := Create_Internal_Entity_Type_Decl
        (Node => Fld_4.Node,
         Info => Fld_4.Info);


   If_Result_3 := Cast_Result_1;
else
   
   If_Result_3 := Local_Suffix_Type;
end if;



--# expr-done 354
   If_Result_7 := If_Result_3;
end if;



--# expr-done 355



   
      Cast_Result_3 := Create_Internal_Entity_Decl
        (Node => If_Result_7.Node,
         Info => If_Result_7.Info);


   If_Result_11 := Cast_Result_3;
end if;



--# expr-done 356



   if If_Result_11.Node = null
      or else If_Result_11.Node.Kind in Lkt_Type_Decl
   then
      
      Cast_Result_5 := Create_Internal_Entity_Type_Decl
        (Node => If_Result_11.Node,
         Info => If_Result_11.Info);

   else
         Cast_Result_5 := No_Entity_Type_Decl;
   end if;


--# expr-done 357
Let_Result := Cast_Result_5; 
--# end
--# expr-done 358

         Property_Result := Let_Result;
         
   --# end
      Finalizer_Scope_90;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_90;




            raise;
      end;



   return Property_Result;
end Decl_P_Get_Suffix_Type;
--# end

   







--# property-start Decl.type_var_suffix_ref nodes.lkt:642
pragma Warnings (Off, "is not referenced");
 function Decl_P_Type_Var_Suffix_Ref
  
  (Node : Bare_Decl
      ; Current_Name : Internal_Entity_Ref_Id
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Internal_Entity_Decl
is
   Self : Bare_Decl  := Bare_Decl (Node);
     Ent : Internal_Entity_Decl :=
       Internal_Entity_Decl'(Node => Self, Info => E_Info);
      --# bind entity Ent

   

   --# bind current_name Current_Name

   Property_Result : Internal_Entity_Decl;

      
            procedure Finalizer_Scope_466 with Inline_Always;
            procedure Finalizer_Scope_468 with Inline_Always;

      Var_Expr_0 : Internal_Entity_Decl;
Match_0 : Internal_Entity_Enum_Type_Decl;
Match_1 : Internal_Entity_Decl;
Var_Expr_10 : Internal_Entity_Decl;
Var_Expr_11 : Internal_Entity_Decl;
Cast_Expr : Internal_Entity_Decl;
Cast_Result : Internal_Entity;
Bound_Origin : Internal_Entity;
Fld : Internal_Entity_Type_Decl;
Fld_1 : Lexical_Env := Empty_Env;
Fld_2 : Bare_Ref_Id;
Sym : Symbol_Type;
Env_Get_Result : Internal_Entity;
Cast_Result_1 : Internal_Entity_Decl;
Fld_3 : Internal_Entity_Decl;
Scope_Result : Internal_Entity_Decl;
Result_Var : Internal_Entity_Decl;
Dyn_Var_Bind_Result : Internal_Entity_Decl;
Cast_Expr_1 : Internal_Entity_Decl;
Cast_Result_2 : Internal_Entity;
Bound_Origin_1 : Internal_Entity;
Fld_4 : Lexical_Env := Empty_Env;
Fld_5 : Bare_Ref_Id;
Sym_1 : Symbol_Type;
Env_Get_Result_1 : Internal_Entity;
Cast_Result_3 : Internal_Entity_Decl;
Fld_6 : Internal_Entity_Decl;
Scope_Result_1 : Internal_Entity_Decl;
Result_Var_1 : Internal_Entity_Decl;
Dyn_Var_Bind_Result_1 : Internal_Entity_Decl;
Match_Prefix : Internal_Entity_Decl;
Cast_Result_4 : Internal_Entity_Enum_Type_Decl;
Let_Result : Internal_Entity_Decl;
Scope_Result_2 : Internal_Entity_Decl;
Cast_Result_5 : Internal_Entity_Decl;
Let_Result_1 : Internal_Entity_Decl;
Scope_Result_3 : Internal_Entity_Decl;
Match_Result : Internal_Entity_Decl;
Scope_Result_4 : Internal_Entity_Decl;
Result_Var_2 : Internal_Entity_Decl;

            procedure Finalizer_Scope_466 is
            begin
                     Dec_Ref (Fld_1);
            end Finalizer_Scope_466;
            procedure Finalizer_Scope_468 is
            begin
                     Dec_Ref (Fld_4);
            end Finalizer_Scope_468;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         



Var_Expr_0 := Ent;





if Var_Expr_0 /= No_Entity_Decl then
   



   --# scope-start


   --# bind v1 Var_Expr_0

--# expr-start 372 '<Match at nodes.lkt:645:13>' Match_Result nodes.lkt:645










   if Var_Expr_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Match_Prefix := Var_Expr_0; 

case Lkt_Decl (Match_Prefix.Node.Kind) is
         when Lkt_Enum_Type_Decl =>
            



   --# scope-start



--# scope-start









   
      Cast_Result_4 := Create_Internal_Entity_Enum_Type_Decl
        (Node => Match_Prefix.Node,
         Info => Match_Prefix.Info);


Match_0 := Cast_Result_4; 
--# bind e Match_0
--# expr-start 365 '<bind at nodes.lkt:648:25>' Dyn_Var_Bind_Result nodes.lkt:648






Cast_Expr := Ent; 



   
      Cast_Result := Create_Internal_Entity
        (Node => Cast_Expr.Node,
         Info => Cast_Expr.Info);


Bound_Origin := Cast_Result; 



--# expr-start 363 '<Cast to Decl at nodes.lkt:650:25>' Cast_Result_1 nodes.lkt:650





--# expr-start 362 '<EnvGet at nodes.lkt:650:25>' Env_Get_Result nodes.lkt:650
--# expr-start 360 '<FieldAccess for defined_scope at nodes.lkt:650:25>' Fld_1 nodes.lkt:650



--# expr-start 359 '<FieldAccess for basic_trait_from_self at nodes.lkt:650:25>' Fld nodes.lkt:650







   if Match_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start TypeDecl.basic_trait_from_self
Fld := Liblktlang.Implementation.Type_Decl_P_Basic_Trait_From_Self (Node => Match_0.Node, E_Info => Match_0.Info);
--# end
--# expr-done 359



   if Fld.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]Decl.defined_scope'
Fld_1 := Liblktlang.Implementation.Dispatcher_Decl_P_Defined_Scope (Node => Fld.Node, Origin => Bound_Origin, E_Info => Fld.Info);
--# end
--# expr-done 360
--# expr-start 361 '<GetSymbol at nodes.lkt:651:29>' Sym nodes.lkt:651









Fld_2 := Current_Name.Node; 
Sym := Get_Symbol (Fld_2); 
--# expr-done 361


Env_Get_Result := AST_Envs.Get_First (Self => Fld_1, Key => Thin (Sym), Lookup_Kind => To_Lookup_Kind_Type (Flat), Categories => (Nocat => True)); 
--# expr-done 362



   if Env_Get_Result.Node = null
      or else Env_Get_Result.Node.Kind in Lkt_Decl
   then
      
      Cast_Result_1 := Create_Internal_Entity_Decl
        (Node => Env_Get_Result.Node,
         Info => Env_Get_Result.Info);

   else
         Cast_Result_1 := No_Entity_Decl;
   end if;


--# expr-done 363
Var_Expr_10 := Cast_Result_1;





if Var_Expr_10 /= No_Entity_Decl then
   



   --# scope-start


   

--# expr-start 364 '<FieldAccess for subdecl_if_generic at nodes.lkt:650:25>' Fld_3 nodes.lkt:650







   if Var_Expr_10.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start Decl.subdecl_if_generic
Fld_3 := Liblktlang.Implementation.Decl_P_Subdecl_If_Generic (Node => Var_Expr_10.Node, E_Info => Var_Expr_10.Info);
--# end
--# expr-done 364
Scope_Result := Fld_3;


   --# end


   Result_Var := Scope_Result;
else
   
   Result_Var := No_Entity_Decl;
end if;



Dyn_Var_Bind_Result := Result_Var; 
--# expr-done 365
Let_Result := Dyn_Var_Bind_Result; 
--# end
Scope_Result_2 := Let_Result;


   --# end
      Finalizer_Scope_466;


            Match_Result := Scope_Result_2; 
         when Lkt_Grammar_Rule_Decl .. Lkt_Enum_Class_Decl | Lkt_Struct_Decl .. Lkt_Trait_Decl =>
            



   --# scope-start



--# scope-start









   
      Cast_Result_5 := Create_Internal_Entity_Decl
        (Node => Match_Prefix.Node,
         Info => Match_Prefix.Info);


Match_1 := Cast_Result_5; 
--# bind _ Match_1
--# expr-start 371 '<bind at nodes.lkt:659:25>' Dyn_Var_Bind_Result_1 nodes.lkt:659






Cast_Expr_1 := Ent; 



   
      Cast_Result_2 := Create_Internal_Entity
        (Node => Cast_Expr_1.Node,
         Info => Cast_Expr_1.Info);


Bound_Origin_1 := Cast_Result_2; 



--# expr-start 369 '<Cast to Decl at nodes.lkt:661:25>' Cast_Result_3 nodes.lkt:661





--# expr-start 368 '<EnvGet at nodes.lkt:661:25>' Env_Get_Result_1 nodes.lkt:661
--# expr-start 366 '<FieldAccess for defined_scope at nodes.lkt:661:25>' Fld_4 nodes.lkt:661







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]Decl.defined_scope'
Fld_4 := Liblktlang.Implementation.Dispatcher_Decl_P_Defined_Scope (Node => Ent.Node, Origin => Bound_Origin_1, E_Info => Ent.Info);
--# end
--# expr-done 366
--# expr-start 367 '<GetSymbol at nodes.lkt:662:29>' Sym_1 nodes.lkt:662









Fld_5 := Current_Name.Node; 
Sym_1 := Get_Symbol (Fld_5); 
--# expr-done 367


Env_Get_Result_1 := AST_Envs.Get_First (Self => Fld_4, Key => Thin (Sym_1), Lookup_Kind => To_Lookup_Kind_Type (Flat), Categories => (Nocat => True)); 
--# expr-done 368



   if Env_Get_Result_1.Node = null
      or else Env_Get_Result_1.Node.Kind in Lkt_Decl
   then
      
      Cast_Result_3 := Create_Internal_Entity_Decl
        (Node => Env_Get_Result_1.Node,
         Info => Env_Get_Result_1.Info);

   else
         Cast_Result_3 := No_Entity_Decl;
   end if;


--# expr-done 369
Var_Expr_11 := Cast_Result_3;





if Var_Expr_11 /= No_Entity_Decl then
   



   --# scope-start


   

--# expr-start 370 '<FieldAccess for subdecl_if_generic at nodes.lkt:661:25>' Fld_6 nodes.lkt:661







   if Var_Expr_11.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start Decl.subdecl_if_generic
Fld_6 := Liblktlang.Implementation.Decl_P_Subdecl_If_Generic (Node => Var_Expr_11.Node, E_Info => Var_Expr_11.Info);
--# end
--# expr-done 370
Scope_Result_1 := Fld_6;


   --# end


   Result_Var_1 := Scope_Result_1;
else
   
   Result_Var_1 := No_Entity_Decl;
end if;



Dyn_Var_Bind_Result_1 := Result_Var_1; 
--# expr-done 371
Let_Result_1 := Dyn_Var_Bind_Result_1; 
--# end
Scope_Result_3 := Let_Result_1;


   --# end
      Finalizer_Scope_468;


            Match_Result := Scope_Result_3; 
end case;

--# expr-done 372
Scope_Result_4 := Match_Result;


   --# end


   Result_Var_2 := Scope_Result_4;
else
   
   Result_Var_2 := No_Entity_Decl;
end if;




         Property_Result := Result_Var_2;
         
   --# end


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_466;
                     Finalizer_Scope_468;




            raise;
      end;



   return Property_Result;
end Decl_P_Type_Var_Suffix_Ref;
--# end

   







--# property-start Decl.ref_var_suffix_ref nodes.lkt:673
pragma Warnings (Off, "is not referenced");
 function Decl_P_Ref_Var_Suffix_Ref
  
  (Node : Bare_Decl
      ; Type_Var : Internal_Entity_Type_Decl
      ; Current_Name : Internal_Entity_Ref_Id
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Internal_Entity_Decl
is
   Self : Bare_Decl  := Bare_Decl (Node);
     Ent : Internal_Entity_Decl :=
       Internal_Entity_Decl'(Node => Self, Info => E_Info);
      --# bind entity Ent

   

   --# bind type_var Type_Var
   --# bind current_name Current_Name

   Property_Result : Internal_Entity_Decl;

      
            procedure Finalizer_Scope_471 with Inline_Always;
            procedure Finalizer_Scope_472 with Inline_Always;
            procedure Finalizer_Scope_474 with Inline_Always;
            procedure Finalizer_Scope_479 with Inline_Always;
            procedure Finalizer_Scope_483 with Inline_Always;
            procedure Finalizer_Scope_486 with Inline_Always;

      Var_Expr_0 : Internal_Entity_Decl;
Match_0 : Internal_Entity_Enum_Type_Decl;
Match_1 : Internal_Entity_Enum_Lit_Decl;
Match_2 : Internal_Entity_Type_Decl;
Match_3 : Internal_Entity_Match_Val_Decl;
Var_Expr_2 : Internal_Entity_Type_Decl;
Match_4 : Internal_Entity_Lambda_Arg_Decl;
Var_Expr_3 : Internal_Entity_Type_Ref;
Var_Expr_4 : Internal_Entity_Type_Decl;
Match_5 : Internal_Entity_Decl;
Var_Expr_5 : Internal_Entity_Decl;
Var_Expr_12 : Internal_Entity_Decl;
Var_Expr_13 : Internal_Entity_Field_Decl;
Var_Expr_14 : Internal_Entity_Decl;
Var_Expr_15 : Internal_Entity_Decl;
Var_Expr_16 : Internal_Entity_Decl;
Var_Expr_17 : Internal_Entity_Decl;
Cast_Expr : Internal_Entity_Type_Decl;
Cast_Result : Internal_Entity;
Bound_Origin : Internal_Entity;
Fld : Lexical_Env := Empty_Env;
Fld_1 : Bare_Ref_Id;
Sym : Symbol_Type;
Env_Get_Result : Internal_Entity;
Cast_Result_1 : Internal_Entity_Decl;
Dyn_Var_Bind_Result : Internal_Entity_Decl;
Cast_Expr_1 : Internal_Entity_Type_Decl;
Cast_Result_2 : Internal_Entity;
Bound_Origin_1 : Internal_Entity;
Fld_2 : Lexical_Env := Empty_Env;
Fld_3 : Bare_Ref_Id;
Sym_1 : Symbol_Type;
Env_Get_Result_1 : Internal_Entity;
Cast_Result_3 : Internal_Entity_Decl;
Fld_4 : Internal_Entity_Decl;
Scope_Result : Internal_Entity_Decl;
Result_Var : Internal_Entity_Decl;
Dyn_Var_Bind_Result_1 : Internal_Entity_Decl;
Cast_Expr_2 : Internal_Entity_Type_Decl;
Cast_Result_4 : Internal_Entity;
Bound_Origin_2 : Internal_Entity;
Fld_5 : Lexical_Env := Empty_Env;
Fld_6 : Lexical_Env := Empty_Env;
Array_Lit : Lexical_Env_Array_Access;
Group_Env : Lexical_Env := Empty_Env;
Fld_7 : Bare_Ref_Id;
Sym_2 : Symbol_Type;
Env_Get_Result_2 : Internal_Entity_Array_Access;
Is_A : Boolean;
Cast_Expr_3 : Internal_Entity;
Cast_Result_5 : Internal_Entity_Field_Decl;
Fld_8 : Internal_Entity_Full_Decl;
Sym_3 : Symbol_Type;
Fld_9 : Boolean;
Scope_Result_1 : Boolean;
Result_Var_1 : Boolean;
If_Result : Boolean;
Find_Result : Internal_Entity;
Cast_Result_6 : Internal_Entity_Decl;
Fld_10 : Internal_Entity_Decl;
Scope_Result_2 : Internal_Entity_Decl;
Result_Var_2 : Internal_Entity_Decl;
Dyn_Var_Bind_Result_2 : Internal_Entity_Decl;
Cast_Expr_4 : Internal_Entity_Type_Decl;
Cast_Result_7 : Internal_Entity;
Bound_Origin_3 : Internal_Entity;
Fld_11 : Lexical_Env := Empty_Env;
Fld_12 : Bare_Ref_Id;
Sym_4 : Symbol_Type;
Env_Get_Result_3 : Internal_Entity;
Cast_Result_8 : Internal_Entity_Decl;
Fld_13 : Internal_Entity_Decl;
Scope_Result_3 : Internal_Entity_Decl;
Result_Var_3 : Internal_Entity_Decl;
Dyn_Var_Bind_Result_3 : Internal_Entity_Decl;
Scope_Result_4 : Internal_Entity_Decl;
Result_Var_4 : Internal_Entity_Decl;
Fld_14 : Internal_Entity_Type_Ref;
Fld_15 : Internal_Entity_Type_Decl;
Scope_Result_5 : Internal_Entity_Type_Decl;
Result_Var_5 : Internal_Entity_Type_Decl;
Cast_Expr_5 : Internal_Entity_Type_Decl;
Cast_Result_9 : Internal_Entity;
Bound_Origin_4 : Internal_Entity;
Fld_16 : Lexical_Env := Empty_Env;
Fld_17 : Bare_Ref_Id;
Sym_5 : Symbol_Type;
Env_Get_Result_4 : Internal_Entity;
Cast_Result_10 : Internal_Entity_Decl;
Fld_18 : Internal_Entity_Decl;
Scope_Result_6 : Internal_Entity_Decl;
Result_Var_6 : Internal_Entity_Decl;
Dyn_Var_Bind_Result_4 : Internal_Entity_Decl;
Scope_Result_7 : Internal_Entity_Decl;
Result_Var_7 : Internal_Entity_Decl;
Cast_Expr_6 : Internal_Entity_Type_Decl;
Cast_Result_11 : Internal_Entity_Decl;
Fld_19 : Boolean;
Is_Null : Boolean;
If_Result_1 : Boolean;
If_Result_2 : Internal_Entity_Decl;
Cast_Expr_7 : Internal_Entity_Decl;
Cast_Result_12 : Internal_Entity;
Bound_Origin_5 : Internal_Entity;
Fld_20 : Lexical_Env := Empty_Env;
Fld_21 : Bare_Ref_Id;
Sym_6 : Symbol_Type;
Env_Get_Result_5 : Internal_Entity;
Cast_Result_13 : Internal_Entity_Decl;
Fld_22 : Internal_Entity_Decl;
Scope_Result_8 : Internal_Entity_Decl;
Result_Var_8 : Internal_Entity_Decl;
Dyn_Var_Bind_Result_5 : Internal_Entity_Decl;
Scope_Result_9 : Internal_Entity_Decl;
Result_Var_9 : Internal_Entity_Decl;
Match_Prefix : Internal_Entity_Decl;
Cast_Result_14 : Internal_Entity_Enum_Type_Decl;
Let_Result : Internal_Entity_Decl;
Scope_Result_10 : Internal_Entity_Decl;
Cast_Result_15 : Internal_Entity_Enum_Lit_Decl;
Let_Result_1 : Internal_Entity_Decl;
Scope_Result_11 : Internal_Entity_Decl;
Cast_Result_16 : Internal_Entity_Type_Decl;
Let_Result_2 : Internal_Entity_Decl;
Scope_Result_12 : Internal_Entity_Decl;
Cast_Result_17 : Internal_Entity_Match_Val_Decl;
Let_Result_3 : Internal_Entity_Decl;
Scope_Result_13 : Internal_Entity_Decl;
Cast_Result_18 : Internal_Entity_Lambda_Arg_Decl;
Let_Result_4 : Internal_Entity_Decl;
Scope_Result_14 : Internal_Entity_Decl;
Cast_Result_19 : Internal_Entity_Decl;
Let_Result_5 : Internal_Entity_Decl;
Scope_Result_15 : Internal_Entity_Decl;
Match_Result : Internal_Entity_Decl;
Scope_Result_16 : Internal_Entity_Decl;
Result_Var_10 : Internal_Entity_Decl;

            procedure Finalizer_Scope_471 is
            begin
                     Dec_Ref (Fld);
            end Finalizer_Scope_471;
            procedure Finalizer_Scope_472 is
            begin
                     Dec_Ref (Fld_2);
            end Finalizer_Scope_472;
            procedure Finalizer_Scope_474 is
            begin
                     Dec_Ref (Fld_5);
                     Dec_Ref (Fld_6);
                     Dec_Ref (Array_Lit);
                     Dec_Ref (Group_Env);
                     Dec_Ref (Env_Get_Result_2);
            end Finalizer_Scope_474;
            procedure Finalizer_Scope_479 is
            begin
                     Dec_Ref (Fld_11);
            end Finalizer_Scope_479;
            procedure Finalizer_Scope_483 is
            begin
                     Dec_Ref (Fld_16);
            end Finalizer_Scope_483;
            procedure Finalizer_Scope_486 is
            begin
                     Dec_Ref (Fld_20);
            end Finalizer_Scope_486;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         



Var_Expr_0 := Ent;





if Var_Expr_0 /= No_Entity_Decl then
   



   --# scope-start


   --# bind v1 Var_Expr_0

--# expr-start 424 '<Match at nodes.lkt:679:13>' Match_Result nodes.lkt:679










   if Var_Expr_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Match_Prefix := Var_Expr_0; 

case Lkt_Decl (Match_Prefix.Node.Kind) is
         when Lkt_Enum_Type_Decl =>
            



   --# scope-start



--# scope-start









   
      Cast_Result_14 := Create_Internal_Entity_Enum_Type_Decl
        (Node => Match_Prefix.Node,
         Info => Match_Prefix.Info);


Match_0 := Cast_Result_14; 
--# bind e Match_0
--# expr-start 377 '<bind at nodes.lkt:682:25>' Dyn_Var_Bind_Result nodes.lkt:682






Cast_Expr := No_Entity_Type_Decl; 



   
      Cast_Result := Create_Internal_Entity
        (Node => Cast_Expr.Node,
         Info => Cast_Expr.Info);


Bound_Origin := Cast_Result; 
--# expr-start 376 '<Cast to Decl at nodes.lkt:684:25>' Cast_Result_1 nodes.lkt:684





--# expr-start 375 '<EnvGet at nodes.lkt:684:25>' Env_Get_Result nodes.lkt:684
--# expr-start 373 '<FieldAccess for defined_scope at nodes.lkt:684:25>' Fld nodes.lkt:684







   if Match_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]Decl.defined_scope'
Fld := Liblktlang.Implementation.Dispatcher_Decl_P_Defined_Scope (Node => Match_0.Node, Origin => Bound_Origin, E_Info => Match_0.Info);
--# end
--# expr-done 373
--# expr-start 374 '<GetSymbol at nodes.lkt:685:29>' Sym nodes.lkt:685









Fld_1 := Current_Name.Node; 
Sym := Get_Symbol (Fld_1); 
--# expr-done 374


Env_Get_Result := AST_Envs.Get_First (Self => Fld, Key => Thin (Sym), Lookup_Kind => To_Lookup_Kind_Type (Flat), Categories => (Nocat => True)); 
--# expr-done 375



   if Env_Get_Result.Node = null
      or else Env_Get_Result.Node.Kind in Lkt_Decl
   then
      
      Cast_Result_1 := Create_Internal_Entity_Decl
        (Node => Env_Get_Result.Node,
         Info => Env_Get_Result.Info);

   else
         Cast_Result_1 := No_Entity_Decl;
   end if;


--# expr-done 376
Dyn_Var_Bind_Result := Cast_Result_1; 
--# expr-done 377
Let_Result := Dyn_Var_Bind_Result; 
--# end
Scope_Result_10 := Let_Result;


   --# end
      Finalizer_Scope_471;


            Match_Result := Scope_Result_10; 
         when Lkt_Enum_Lit_Decl =>
            



   --# scope-start



--# scope-start









   
      Cast_Result_15 := Create_Internal_Entity_Enum_Lit_Decl
        (Node => Match_Prefix.Node,
         Info => Match_Prefix.Info);


Match_1 := Cast_Result_15; 
--# bind e Match_1
--# expr-start 383 '<bind at nodes.lkt:692:25>' Dyn_Var_Bind_Result_1 nodes.lkt:692






Cast_Expr_1 := No_Entity_Type_Decl; 



   
      Cast_Result_2 := Create_Internal_Entity
        (Node => Cast_Expr_1.Node,
         Info => Cast_Expr_1.Info);


Bound_Origin_1 := Cast_Result_2; 



--# expr-start 381 '<Cast to Decl at nodes.lkt:694:25>' Cast_Result_3 nodes.lkt:694





--# expr-start 380 '<EnvGet at nodes.lkt:694:25>' Env_Get_Result_1 nodes.lkt:694
--# expr-start 378 '<FieldAccess for defined_scope at nodes.lkt:694:25>' Fld_2 nodes.lkt:694







   if Match_1.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]Decl.defined_scope'
Fld_2 := Liblktlang.Implementation.Dispatcher_Decl_P_Defined_Scope (Node => Match_1.Node, Origin => Bound_Origin_1, E_Info => Match_1.Info);
--# end
--# expr-done 378
--# expr-start 379 '<GetSymbol at nodes.lkt:695:29>' Sym_1 nodes.lkt:695









Fld_3 := Current_Name.Node; 
Sym_1 := Get_Symbol (Fld_3); 
--# expr-done 379


Env_Get_Result_1 := AST_Envs.Get_First (Self => Fld_2, Key => Thin (Sym_1), Lookup_Kind => To_Lookup_Kind_Type (Flat), Categories => (Nocat => True)); 
--# expr-done 380



   if Env_Get_Result_1.Node = null
      or else Env_Get_Result_1.Node.Kind in Lkt_Decl
   then
      
      Cast_Result_3 := Create_Internal_Entity_Decl
        (Node => Env_Get_Result_1.Node,
         Info => Env_Get_Result_1.Info);

   else
         Cast_Result_3 := No_Entity_Decl;
   end if;


--# expr-done 381
Var_Expr_12 := Cast_Result_3;





if Var_Expr_12 /= No_Entity_Decl then
   



   --# scope-start


   

--# expr-start 382 '<FieldAccess for subdecl_if_generic at nodes.lkt:694:25>' Fld_4 nodes.lkt:694







   if Var_Expr_12.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start Decl.subdecl_if_generic
Fld_4 := Liblktlang.Implementation.Decl_P_Subdecl_If_Generic (Node => Var_Expr_12.Node, E_Info => Var_Expr_12.Info);
--# end
--# expr-done 382
Scope_Result := Fld_4;


   --# end


   Result_Var := Scope_Result;
else
   
   Result_Var := No_Entity_Decl;
end if;



Dyn_Var_Bind_Result_1 := Result_Var; 
--# expr-done 383
Let_Result_1 := Dyn_Var_Bind_Result_1; 
--# end
Scope_Result_11 := Let_Result_1;


   --# end
      Finalizer_Scope_472;


            Match_Result := Scope_Result_11; 
         when Lkt_Any_Type_Decl .. Lkt_Enum_Class_Decl | Lkt_Struct_Decl .. Lkt_Trait_Decl =>
            



   --# scope-start



--# scope-start









   
      Cast_Result_16 := Create_Internal_Entity_Type_Decl
        (Node => Match_Prefix.Node,
         Info => Match_Prefix.Info);


Match_2 := Cast_Result_16; 
--# bind td Match_2
--# expr-start 399 '<bind at nodes.lkt:703:25>' Dyn_Var_Bind_Result_2 nodes.lkt:703






Cast_Expr_2 := No_Entity_Type_Decl; 



   
      Cast_Result_4 := Create_Internal_Entity
        (Node => Cast_Expr_2.Node,
         Info => Cast_Expr_2.Info);


Bound_Origin_2 := Cast_Result_4; 



--# expr-start 397 '<Cast to Decl at nodes.lkt:705:25>' Cast_Result_6 nodes.lkt:705





--# expr-start 396 '<Find at nodes.lkt:705:25>' Find_Result nodes.lkt:705








   

   --# expr-start 389 '<EnvGet at nodes.lkt:705:25>' Env_Get_Result_2 nodes.lkt:705
--# expr-start 387 '<env_group at nodes.lkt:705:25>' Group_Env nodes.lkt:705
--# expr-start 386 '<ArrayLiteral at nodes.lkt:705:25>' Array_Lit nodes.lkt:705
--# expr-start 384 '<FieldAccess for defined_scope at nodes.lkt:705:26>' Fld_5 nodes.lkt:705







   if Match_2.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]Decl.defined_scope'
Fld_5 := Liblktlang.Implementation.Dispatcher_Decl_P_Defined_Scope (Node => Match_2.Node, Origin => Bound_Origin_2, E_Info => Match_2.Info);
--# end
--# expr-done 384
--# expr-start 385 '<FieldAccess for node_builder_scope at nodes.lkt:705:46>' Fld_6 nodes.lkt:705







   if Match_2.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]TypeDecl.node_builder_scope'
Fld_6 := Liblktlang.Implementation.Dispatcher_Type_Decl_P_Node_Builder_Scope (Node => Match_2.Node, E_Info => Match_2.Info);
--# end
--# expr-done 385
Array_Lit := Create_Lexical_Env_Array (Internal_Lexical_Env_Array'(1 => Fld_5, 2 => Fld_6)); 
--# expr-done 386

Group_Env := Group (Array_Lit, No_Metadata); 
--# expr-done 387
--# expr-start 388 '<GetSymbol at nodes.lkt:707:30>' Sym_2 nodes.lkt:707









Fld_7 := Current_Name.Node; 
Sym_2 := Get_Symbol (Fld_7); 
--# expr-done 388


Env_Get_Result_2 := Construct_Entity_Array (AST_Envs.Get (Self => Group_Env, Key => Thin (Sym_2), Lookup_Kind => To_Lookup_Kind_Type (Flat), Categories => (Nocat => True))); 
--# expr-done 389

   
      Find_Result := No_Entity;
   

   

      

      declare
         
         Collection : constant Internal_Entity_Array_Access := Env_Get_Result_2;
      begin
         for Item_1 of
               Collection.Items
         loop

            
   --# scope-start


               --# bind d Item_1

            
      --# expr-start 395 '<BooleanBinaryOp Or at nodes.lkt:710:29>' If_Result nodes.lkt:710



--# expr-start 390 '<IsA TypeDecl, FunDecl at nodes.lkt:710:29>' Is_A nodes.lkt:710

Is_A := Item_1.Node /= null 
and then Item_1.Node.Kind in Lkt_Type_Decl | Lkt_Fun_Decl_Range; 
--# expr-done 390
if Is_A then
   
   If_Result := True;
else
   


--# expr-start 391 '<Cast to FieldDecl at nodes.lkt:711:32>' Cast_Result_5 nodes.lkt:711






Cast_Expr_3 := Item_1; 



   if Cast_Expr_3.Node = null
      or else Cast_Expr_3.Node.Kind in Lkt_Field_Decl_Range
   then
      
      Cast_Result_5 := Create_Internal_Entity_Field_Decl
        (Node => Cast_Expr_3.Node,
         Info => Cast_Expr_3.Info);

   else
         Cast_Result_5 := No_Entity_Field_Decl;
   end if;


--# expr-done 391
Var_Expr_13 := Cast_Result_5;





if Var_Expr_13 /= No_Entity_Field_Decl then
   



   --# scope-start


   

--# expr-start 394 '<FieldAccess for has_annotation at nodes.lkt:711:32>' Fld_9 nodes.lkt:711



--# expr-start 392 '<FieldAccess for full_decl at nodes.lkt:711:32>' Fld_8 nodes.lkt:711







   if Var_Expr_13.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start Decl.full_decl
Fld_8 := Liblktlang.Implementation.Decl_P_Full_Decl (Node => Var_Expr_13.Node, E_Info => Var_Expr_13.Info);
--# end
--# expr-done 392



   if Fld_8.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# expr-start 393 '<Symbol lazy at nodes.lkt:712:33>' Sym_3 nodes.lkt:712
Sym_3 := Precomputed_Symbol (Precomputed_Symbol_Table (Self.Unit.Context.Symbols), Precomputed_Sym_Lazy); 
--# expr-done 393
--# property-call-start FullDecl.has_annotation
Fld_9 := Liblktlang.Implementation.Full_Decl_P_Has_Annotation (Node => Fld_8.Node, Name => Sym_3);
--# end
--# expr-done 394
Scope_Result_1 := Fld_9;


   --# end


   Result_Var_1 := Scope_Result_1;
else
   
   Result_Var_1 := False;
end if;



   If_Result := Result_Var_1;
end if;



--# expr-done 395
      if If_Result then
         Find_Result := Item_1; 
      end if;
   

            
   --# end


               exit when If_Result;

         end loop;
      end;
   

   
   



--# expr-done 396



   if Find_Result.Node = null
      or else Find_Result.Node.Kind in Lkt_Decl
   then
      
      Cast_Result_6 := Create_Internal_Entity_Decl
        (Node => Find_Result.Node,
         Info => Find_Result.Info);

   else
         Cast_Result_6 := No_Entity_Decl;
   end if;


--# expr-done 397
Var_Expr_14 := Cast_Result_6;





if Var_Expr_14 /= No_Entity_Decl then
   



   --# scope-start


   

--# expr-start 398 '<FieldAccess for subdecl_if_generic at nodes.lkt:705:25>' Fld_10 nodes.lkt:705







   if Var_Expr_14.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start Decl.subdecl_if_generic
Fld_10 := Liblktlang.Implementation.Decl_P_Subdecl_If_Generic (Node => Var_Expr_14.Node, E_Info => Var_Expr_14.Info);
--# end
--# expr-done 398
Scope_Result_2 := Fld_10;


   --# end


   Result_Var_2 := Scope_Result_2;
else
   
   Result_Var_2 := No_Entity_Decl;
end if;



Dyn_Var_Bind_Result_2 := Result_Var_2; 
--# expr-done 399
Let_Result_2 := Dyn_Var_Bind_Result_2; 
--# end
Scope_Result_12 := Let_Result_2;


   --# end
      Finalizer_Scope_474;


            Match_Result := Scope_Result_12; 
         when Lkt_Match_Val_Decl =>
            



   --# scope-start



--# scope-start









   
      Cast_Result_17 := Create_Internal_Entity_Match_Val_Decl
        (Node => Match_Prefix.Node,
         Info => Match_Prefix.Info);


Match_3 := Cast_Result_17; 
--# bind _ Match_3




Var_Expr_2 := Type_Var;





if Var_Expr_2 /= No_Entity_Type_Decl then
   



   --# scope-start


   --# bind t Var_Expr_2

--# expr-start 405 '<bind at nodes.lkt:721:29>' Dyn_Var_Bind_Result_3 nodes.lkt:721






Cast_Expr_4 := Var_Expr_2; 



   
      Cast_Result_7 := Create_Internal_Entity
        (Node => Cast_Expr_4.Node,
         Info => Cast_Expr_4.Info);


Bound_Origin_3 := Cast_Result_7; 



--# expr-start 403 '<Cast to Decl at nodes.lkt:723:29>' Cast_Result_8 nodes.lkt:723





--# expr-start 402 '<EnvGet at nodes.lkt:723:29>' Env_Get_Result_3 nodes.lkt:723
--# expr-start 400 '<FieldAccess for defined_scope at nodes.lkt:723:29>' Fld_11 nodes.lkt:723







   if Var_Expr_2.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]Decl.defined_scope'
Fld_11 := Liblktlang.Implementation.Dispatcher_Decl_P_Defined_Scope (Node => Var_Expr_2.Node, Origin => Bound_Origin_3, E_Info => Var_Expr_2.Info);
--# end
--# expr-done 400
--# expr-start 401 '<GetSymbol at nodes.lkt:724:33>' Sym_4 nodes.lkt:724









Fld_12 := Current_Name.Node; 
Sym_4 := Get_Symbol (Fld_12); 
--# expr-done 401


Env_Get_Result_3 := AST_Envs.Get_First (Self => Fld_11, Key => Thin (Sym_4), Lookup_Kind => To_Lookup_Kind_Type (Flat), Categories => (Nocat => True)); 
--# expr-done 402



   if Env_Get_Result_3.Node = null
      or else Env_Get_Result_3.Node.Kind in Lkt_Decl
   then
      
      Cast_Result_8 := Create_Internal_Entity_Decl
        (Node => Env_Get_Result_3.Node,
         Info => Env_Get_Result_3.Info);

   else
         Cast_Result_8 := No_Entity_Decl;
   end if;


--# expr-done 403
Var_Expr_15 := Cast_Result_8;





if Var_Expr_15 /= No_Entity_Decl then
   



   --# scope-start


   

--# expr-start 404 '<FieldAccess for subdecl_if_generic at nodes.lkt:723:29>' Fld_13 nodes.lkt:723







   if Var_Expr_15.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start Decl.subdecl_if_generic
Fld_13 := Liblktlang.Implementation.Decl_P_Subdecl_If_Generic (Node => Var_Expr_15.Node, E_Info => Var_Expr_15.Info);
--# end
--# expr-done 404
Scope_Result_3 := Fld_13;


   --# end


   Result_Var_3 := Scope_Result_3;
else
   
   Result_Var_3 := No_Entity_Decl;
end if;



Dyn_Var_Bind_Result_3 := Result_Var_3; 
--# expr-done 405
Scope_Result_4 := Dyn_Var_Bind_Result_3;


   --# end
      Finalizer_Scope_479;


   Result_Var_4 := Scope_Result_4;
else
   
   Result_Var_4 := No_Entity_Decl;
end if;



Let_Result_3 := Result_Var_4; 
--# end
Scope_Result_13 := Let_Result_3;


   --# end


            Match_Result := Scope_Result_13; 
         when Lkt_Lambda_Arg_Decl =>
            



   --# scope-start



--# scope-start









   
      Cast_Result_18 := Create_Internal_Entity_Lambda_Arg_Decl
        (Node => Match_Prefix.Node,
         Info => Match_Prefix.Info);


Match_4 := Cast_Result_18; 
--# bind mvd Match_4






--# expr-start 406 '<FieldAccess for decl_type at nodes.lkt:736:21>' Fld_14 nodes.lkt:736







   if Match_4.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_14 := Create_Internal_Entity_Type_Ref (Node => Match_4.Node.Lambda_Arg_Decl_F_Decl_Type, Info => Match_4.Info);
--# expr-done 406
Var_Expr_3 := Fld_14;





if Var_Expr_3 /= No_Entity_Type_Ref then
   



   --# scope-start


   --# bind _ Var_Expr_3

--# expr-start 407 '<FieldAccess for get_type at nodes.lkt:737:32>' Fld_15 nodes.lkt:737







   if Match_4.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start Decl.get_type
Fld_15 := Liblktlang.Implementation.Decl_P_Get_Type (Node => Match_4.Node, E_Info => Match_4.Info);
--# end
--# expr-done 407
Scope_Result_5 := Fld_15;


   --# end


   Result_Var_5 := Scope_Result_5;
else
   
   Result_Var_5 := Type_Var;
end if;



Var_Expr_4 := Result_Var_5;





if Var_Expr_4 /= No_Entity_Type_Decl then
   



   --# scope-start


   --# bind t Var_Expr_4

--# expr-start 413 '<bind at nodes.lkt:742:29>' Dyn_Var_Bind_Result_4 nodes.lkt:742






Cast_Expr_5 := Var_Expr_4; 



   
      Cast_Result_9 := Create_Internal_Entity
        (Node => Cast_Expr_5.Node,
         Info => Cast_Expr_5.Info);


Bound_Origin_4 := Cast_Result_9; 



--# expr-start 411 '<Cast to Decl at nodes.lkt:744:29>' Cast_Result_10 nodes.lkt:744





--# expr-start 410 '<EnvGet at nodes.lkt:744:29>' Env_Get_Result_4 nodes.lkt:744
--# expr-start 408 '<FieldAccess for defined_scope at nodes.lkt:744:29>' Fld_16 nodes.lkt:744







   if Var_Expr_4.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]Decl.defined_scope'
Fld_16 := Liblktlang.Implementation.Dispatcher_Decl_P_Defined_Scope (Node => Var_Expr_4.Node, Origin => Bound_Origin_4, E_Info => Var_Expr_4.Info);
--# end
--# expr-done 408
--# expr-start 409 '<GetSymbol at nodes.lkt:745:33>' Sym_5 nodes.lkt:745









Fld_17 := Current_Name.Node; 
Sym_5 := Get_Symbol (Fld_17); 
--# expr-done 409


Env_Get_Result_4 := AST_Envs.Get_First (Self => Fld_16, Key => Thin (Sym_5), Lookup_Kind => To_Lookup_Kind_Type (Flat), Categories => (Nocat => True)); 
--# expr-done 410



   if Env_Get_Result_4.Node = null
      or else Env_Get_Result_4.Node.Kind in Lkt_Decl
   then
      
      Cast_Result_10 := Create_Internal_Entity_Decl
        (Node => Env_Get_Result_4.Node,
         Info => Env_Get_Result_4.Info);

   else
         Cast_Result_10 := No_Entity_Decl;
   end if;


--# expr-done 411
Var_Expr_16 := Cast_Result_10;





if Var_Expr_16 /= No_Entity_Decl then
   



   --# scope-start


   

--# expr-start 412 '<FieldAccess for subdecl_if_generic at nodes.lkt:744:29>' Fld_18 nodes.lkt:744







   if Var_Expr_16.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start Decl.subdecl_if_generic
Fld_18 := Liblktlang.Implementation.Decl_P_Subdecl_If_Generic (Node => Var_Expr_16.Node, E_Info => Var_Expr_16.Info);
--# end
--# expr-done 412
Scope_Result_6 := Fld_18;


   --# end


   Result_Var_6 := Scope_Result_6;
else
   
   Result_Var_6 := No_Entity_Decl;
end if;



Dyn_Var_Bind_Result_4 := Result_Var_6; 
--# expr-done 413
Scope_Result_7 := Dyn_Var_Bind_Result_4;


   --# end
      Finalizer_Scope_483;


   Result_Var_7 := Scope_Result_7;
else
   
   Result_Var_7 := No_Entity_Decl;
end if;



Let_Result_4 := Result_Var_7; 
--# end
Scope_Result_14 := Let_Result_4;


   --# end


            Match_Result := Scope_Result_14; 
         when Lkt_Grammar_Rule_Decl .. Lkt_Self_Decl | Lkt_Field_Decl .. Lkt_Fun_Arg_Decl | Lkt_Dyn_Var_Decl | Lkt_Val_Decl .. Lkt_Synth_Fun_Decl =>
            



   --# scope-start



--# scope-start









   
      Cast_Result_19 := Create_Internal_Entity_Decl
        (Node => Match_Prefix.Node,
         Info => Match_Prefix.Info);


Match_5 := Cast_Result_19; 
--# bind _ Match_5



--# expr-start 417 '<If at nodes.lkt:754:25>' If_Result_2 nodes.lkt:754



--# expr-start 416 '<BooleanBinaryOp And at nodes.lkt:754:28>' If_Result_1 nodes.lkt:754



--# expr-start 414 '<FieldAccess for xref_entry_point at nodes.lkt:754:28>' Fld_19 nodes.lkt:754







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]LktNode.xref_entry_point'
Fld_19 := Liblktlang.Implementation.Dispatcher_Lkt_Node_P_Xref_Entry_Point (Node => Ent.Node, E_Info => Ent.Info);
--# end
--# expr-done 414
if Fld_19 then
   --# expr-start 415 '<IsNull at nodes.lkt:754:56>' Is_Null nodes.lkt:754

Is_Null := Type_Var.Node = null; 
--# expr-done 415
   If_Result_1 := Is_Null;
else
   
   If_Result_1 := False;
end if;



--# expr-done 416
if If_Result_1 then
   
   If_Result_2 := Ent;
else
   





Cast_Expr_6 := Type_Var; 



   
      Cast_Result_11 := Create_Internal_Entity_Decl
        (Node => Cast_Expr_6.Node,
         Info => Cast_Expr_6.Info);


   If_Result_2 := Cast_Result_11;
end if;



--# expr-done 417
Var_Expr_5 := If_Result_2;





if Var_Expr_5 /= No_Entity_Decl then
   



   --# scope-start


   --# bind t Var_Expr_5

--# expr-start 423 '<bind at nodes.lkt:760:29>' Dyn_Var_Bind_Result_5 nodes.lkt:760






Cast_Expr_7 := Var_Expr_5; 



   
      Cast_Result_12 := Create_Internal_Entity
        (Node => Cast_Expr_7.Node,
         Info => Cast_Expr_7.Info);


Bound_Origin_5 := Cast_Result_12; 



--# expr-start 421 '<Cast to Decl at nodes.lkt:762:29>' Cast_Result_13 nodes.lkt:762





--# expr-start 420 '<EnvGet at nodes.lkt:762:29>' Env_Get_Result_5 nodes.lkt:762
--# expr-start 418 '<FieldAccess for defined_scope at nodes.lkt:762:29>' Fld_20 nodes.lkt:762







   if Var_Expr_5.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]Decl.defined_scope'
Fld_20 := Liblktlang.Implementation.Dispatcher_Decl_P_Defined_Scope (Node => Var_Expr_5.Node, Origin => Bound_Origin_5, E_Info => Var_Expr_5.Info);
--# end
--# expr-done 418
--# expr-start 419 '<GetSymbol at nodes.lkt:763:33>' Sym_6 nodes.lkt:763









Fld_21 := Current_Name.Node; 
Sym_6 := Get_Symbol (Fld_21); 
--# expr-done 419


Env_Get_Result_5 := AST_Envs.Get_First (Self => Fld_20, Key => Thin (Sym_6), Lookup_Kind => To_Lookup_Kind_Type (Flat), Categories => (Nocat => True)); 
--# expr-done 420



   if Env_Get_Result_5.Node = null
      or else Env_Get_Result_5.Node.Kind in Lkt_Decl
   then
      
      Cast_Result_13 := Create_Internal_Entity_Decl
        (Node => Env_Get_Result_5.Node,
         Info => Env_Get_Result_5.Info);

   else
         Cast_Result_13 := No_Entity_Decl;
   end if;


--# expr-done 421
Var_Expr_17 := Cast_Result_13;





if Var_Expr_17 /= No_Entity_Decl then
   



   --# scope-start


   

--# expr-start 422 '<FieldAccess for subdecl_if_generic at nodes.lkt:762:29>' Fld_22 nodes.lkt:762







   if Var_Expr_17.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start Decl.subdecl_if_generic
Fld_22 := Liblktlang.Implementation.Decl_P_Subdecl_If_Generic (Node => Var_Expr_17.Node, E_Info => Var_Expr_17.Info);
--# end
--# expr-done 422
Scope_Result_8 := Fld_22;


   --# end


   Result_Var_8 := Scope_Result_8;
else
   
   Result_Var_8 := No_Entity_Decl;
end if;



Dyn_Var_Bind_Result_5 := Result_Var_8; 
--# expr-done 423
Scope_Result_9 := Dyn_Var_Bind_Result_5;


   --# end
      Finalizer_Scope_486;


   Result_Var_9 := Scope_Result_9;
else
   
   Result_Var_9 := No_Entity_Decl;
end if;



Let_Result_5 := Result_Var_9; 
--# end
Scope_Result_15 := Let_Result_5;


   --# end


            Match_Result := Scope_Result_15; 
end case;

--# expr-done 424
Scope_Result_16 := Match_Result;


   --# end


   Result_Var_10 := Scope_Result_16;
else
   
   Result_Var_10 := No_Entity_Decl;
end if;




         Property_Result := Result_Var_10;
         
   --# end


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_471;
                     Finalizer_Scope_472;
                     Finalizer_Scope_474;
                     Finalizer_Scope_479;
                     Finalizer_Scope_483;
                     Finalizer_Scope_486;




            raise;
      end;



   return Property_Result;
end Decl_P_Ref_Var_Suffix_Ref;
--# end

   







--# property-start Decl.formals nodes.lkt:776
pragma Warnings (Off, "is not referenced");
 function Decl_P_Formals
  
  (Node : Bare_Decl
      ; Is_Logic : Boolean
         := False
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Internal_Formal_Param_Array_Access
is
   Self : Bare_Decl  := Bare_Decl (Node);
     Ent : Internal_Entity_Decl :=
       Internal_Entity_Decl'(Node => Self, Info => E_Info);
      --# bind entity Ent

   

   --# bind is_logic Is_Logic

   Property_Result : Internal_Formal_Param_Array_Access;

      
            procedure Finalizer_Scope_93 with Inline_Always;
            procedure Finalizer_Scope_488 with Inline_Always;
            procedure Finalizer_Scope_489 with Inline_Always;
            procedure Finalizer_Scope_492 with Inline_Always;
            procedure Finalizer_Scope_493 with Inline_Always;
            procedure Finalizer_Scope_495 with Inline_Always;

      Var_Expr_0 : Internal_Entity_Decl;
Match_0 : Internal_Entity_Fun_Decl;
Match_1 : Internal_Entity_Synth_Fun_Decl;
Match_2 : Internal_Entity_Class_Decl;
Match_3 : Internal_Entity_Named_Type_Decl;
Match_4 : Internal_Entity_Decl;
Fld : Internal_Entity_Fun_Arg_Decl_List;
Fld_1 : Bare_Fun_Arg_Decl_List;
Fld_2 : Internal_Entity_Info;
Item_2 : Internal_Entity_Fun_Arg_Decl;
Bare_Item_2 : Bare_Fun_Arg_Decl;
Fld_3 : Internal_Formal_Param;
As_Entity : Internal_Entity_Fun_Arg_Decl;
Is_Null : Boolean;
If_Result : Internal_Entity_Fun_Arg_Decl;
Map_Result : Internal_Formal_Param_Array_Access;
Fld_4 : Internal_Entity_Fun_Arg_Decl_List;
Fld_5 : Bare_Fun_Arg_Decl_List;
Fld_6 : Internal_Entity_Info;
Get_Result : Bare_Fun_Arg_Decl;
As_Entity_1 : Internal_Entity_Fun_Arg_Decl;
Is_Null_1 : Boolean;
If_Result_1 : Internal_Entity_Fun_Arg_Decl;
Fld_7 : Symbol_Type;
Fld_8 : Internal_Entity_Named_Type_Decl;
Fld_9 : Internal_Entity_Type_Decl;
Fld_10 : Internal_Entity_Fun_Arg_Decl_List;
Fld_11 : Bare_Fun_Arg_Decl_List;
Fld_12 : Internal_Entity_Info;
Get_Result_1 : Bare_Fun_Arg_Decl;
As_Entity_2 : Internal_Entity_Fun_Arg_Decl;
Is_Null_2 : Boolean;
If_Result_2 : Internal_Entity_Fun_Arg_Decl;
Cast_Expr : Internal_Entity_Fun_Arg_Decl;
Cast_Result : Internal_Entity_Decl;
New_Struct : Internal_Formal_Param;
Array_Lit : Internal_Formal_Param_Array_Access;
Sym : Symbol_Type;
Fld_13 : Internal_Entity_Named_Type_Decl;
New_Node : Bare_Synth_Arg_Decl;
As_Entity_3 : Internal_Entity_Synth_Arg_Decl;
Is_Null_3 : Boolean;
If_Result_3 : Internal_Entity_Synth_Arg_Decl;
Cast_Result_1 : Internal_Entity_Type_Decl;
Cast_Result_2 : Internal_Entity_Decl;
New_Struct_1 : Internal_Formal_Param;
Array_Lit_1 : Internal_Formal_Param_Array_Access;
Fld_14 : Internal_Entity_Fun_Arg_Decl_List;
Fld_15 : Bare_Fun_Arg_Decl_List;
Fld_16 : Internal_Entity_Info;
Item_1 : Internal_Entity_Fun_Arg_Decl;
Bare_Item_1 : Bare_Fun_Arg_Decl;
Fld_17 : Internal_Formal_Param;
As_Entity_4 : Internal_Entity_Fun_Arg_Decl;
Is_Null_4 : Boolean;
If_Result_4 : Internal_Entity_Fun_Arg_Decl;
Map_Result_1 : Internal_Formal_Param_Array_Access;
Concat_Result : Internal_Formal_Param_Array_Access;
Fld_18 : Boolean;
If_Result_5 : Internal_Formal_Param_Array_Access;
Not_Val : Boolean;
If_Result_6 : Internal_Formal_Param_Array_Access;
Fld_19 : Internal_Formal_Param_Array_Access;
Fld_20 : Internal_Entity_Field_Decl_Array_Access;
Fld_21 : Internal_Formal_Param;
Map_Result_2 : Internal_Formal_Param_Array_Access;
Fld_22 : Internal_Entity_Decl_Block;
Fld_23 : Bare_Decl_Block;
Fld_24 : Internal_Entity_Info;
Item_4 : Internal_Entity_Full_Decl;
Bare_Item_4 : Bare_Full_Decl;
As_Entity_5 : Internal_Entity_Full_Decl;
Is_Null_5 : Boolean;
If_Result_7 : Internal_Entity_Full_Decl;
Fld_25 : Internal_Entity_Decl;
Is_A : Boolean;
Map_Result_3 : Internal_Entity_Full_Decl_Array_Access;
Fld_26 : Internal_Entity_Decl;
Cast_Result_3 : Internal_Entity_Field_Decl;
Fld_27 : Internal_Formal_Param;
Map_Result_4 : Internal_Formal_Param_Array_Access;
Match_Prefix : Internal_Entity_Decl;
Cast_Result_4 : Internal_Entity_Fun_Decl;
Let_Result : Internal_Formal_Param_Array_Access;
Scope_Result : Internal_Formal_Param_Array_Access;
Cast_Result_5 : Internal_Entity_Synth_Fun_Decl;
Let_Result_1 : Internal_Formal_Param_Array_Access;
Scope_Result_1 : Internal_Formal_Param_Array_Access;
Cast_Result_6 : Internal_Entity_Class_Decl;
Let_Result_2 : Internal_Formal_Param_Array_Access;
Scope_Result_2 : Internal_Formal_Param_Array_Access;
Cast_Result_7 : Internal_Entity_Named_Type_Decl;
Let_Result_3 : Internal_Formal_Param_Array_Access;
Scope_Result_3 : Internal_Formal_Param_Array_Access;
Cast_Result_8 : Internal_Entity_Decl;
Let_Result_4 : Internal_Formal_Param_Array_Access;
Scope_Result_4 : Internal_Formal_Param_Array_Access;
Match_Result : Internal_Formal_Param_Array_Access;
Scope_Result_5 : Internal_Formal_Param_Array_Access;
Result_Var : Internal_Formal_Param_Array_Access;

            procedure Finalizer_Scope_93 is
            begin
                     Dec_Ref (Scope_Result_5);
                     Dec_Ref (Result_Var);
            end Finalizer_Scope_93;
            procedure Finalizer_Scope_488 is
            begin
                     Dec_Ref (Let_Result);
                     Dec_Ref (Scope_Result);
                     Dec_Ref (Let_Result_1);
                     Dec_Ref (Scope_Result_1);
                     Dec_Ref (Let_Result_2);
                     Dec_Ref (Scope_Result_2);
                     Dec_Ref (Let_Result_3);
                     Dec_Ref (Scope_Result_3);
                     Dec_Ref (Let_Result_4);
                     Dec_Ref (Scope_Result_4);
                     Dec_Ref (Match_Result);
            end Finalizer_Scope_488;
            procedure Finalizer_Scope_489 is
            begin
                     Dec_Ref (Map_Result);
                     Dec_Ref (Array_Lit);
                     Dec_Ref (Array_Lit_1);
                     Dec_Ref (Map_Result_1);
                     Dec_Ref (Concat_Result);
                     Dec_Ref (If_Result_5);
                     Dec_Ref (If_Result_6);
            end Finalizer_Scope_489;
            procedure Finalizer_Scope_492 is
            begin
                     Dec_Ref (Fld_19);
            end Finalizer_Scope_492;
            procedure Finalizer_Scope_493 is
            begin
                     Dec_Ref (Fld_20);
                     Dec_Ref (Map_Result_2);
            end Finalizer_Scope_493;
            procedure Finalizer_Scope_495 is
            begin
                     Dec_Ref (Map_Result_3);
                     Dec_Ref (Map_Result_4);
            end Finalizer_Scope_495;

      
      Mmz_Handle : Memoization_Handle;
      Mmz_Val    : Mmz_Value;

      Mmz_Stored : Boolean;
      --  Whether the memoization couple was actually stored. Used to determine
      --  whether to inc-ref the memoized value.

      function Create_Mmz_Key return Mmz_Key;
      --  Create a memoization key for this property call and return it

      --------------------
      -- Create_Mmz_Key --
      --------------------

      function Create_Mmz_Key return Mmz_Key is
      begin
         return Mmz_K : Mmz_Key :=
           (Property => Mmz_Bare_Decl_Decl_P_Formals,
            Items    => new Mmz_Key_Array (1 ..  3))
         do
            Mmz_K.Items (1) := (Kind => Mmz_Bare_Decl,
                                As_Bare_Decl => Self);
               Mmz_K.Items (2) := (Kind => Mmz_Boolean,
                                      As_Boolean => Is_Logic);
               Mmz_K.Items (3) :=
                 (Kind => Mmz_Internal_Entity_Info,
                  As_Internal_Entity_Info => E_Info);
         end return;
      end Create_Mmz_Key;

begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;

      if Self /= null then

         if not Self.Unit.Context.In_Populate_Lexical_Env then

            if Find_Memoized_Value
              (Self.Unit, Mmz_Handle, Mmz_Val, Create_Mmz_Key'Access)
            then
               --# memoization-lookup

               if Mmz_Val.Kind = Mmz_Evaluating then
                  --# memoization-return
                  Raise_Property_Exception
                    (Self,
                     Property_Error'Identity,
                     "Infinite recursion detected");

               elsif Mmz_Val.Kind = Mmz_Error then
                  --# memoization-return
                  Reraise_Memoized_Error (Mmz_Val);

               else
                  Property_Result := Mmz_Val.As_Internal_Formal_Param_Array_Access;
                     Inc_Ref (Property_Result);

                  --# memoization-return
                  return Property_Result;
               end if;
               --# end
            end if;

         end if;
      end if;

      begin
         
   --# scope-start

         



Var_Expr_0 := Ent;





if Var_Expr_0 /= No_Entity_Decl then
   



   --# scope-start


   --# bind c Var_Expr_0

--# expr-start 460 '<Match at nodes.lkt:779:13>' Match_Result nodes.lkt:779










   if Var_Expr_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Match_Prefix := Var_Expr_0; 

case Lkt_Decl (Match_Prefix.Node.Kind) is
         when Lkt_Fun_Decl =>
            



   --# scope-start



--# scope-start









   
      Cast_Result_4 := Create_Internal_Entity_Fun_Decl
        (Node => Match_Prefix.Node,
         Info => Match_Prefix.Info);


Match_0 := Cast_Result_4; 
--# bind fd Match_0
--# expr-start 447 '<If at nodes.lkt:781:21>' If_Result_6 nodes.lkt:781



--# expr-start 425 '<Not at nodes.lkt:781:24>' Not_Val nodes.lkt:781

Not_Val := not (Is_Logic); 
--# expr-done 425
if Not_Val then
   --# expr-start 428 '<Map at nodes.lkt:782:26>' Map_Result nodes.lkt:782








   

   --# expr-start 426 '<FieldAccess for args at nodes.lkt:782:26>' Fld nodes.lkt:782







   if Match_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Create_Internal_Entity_Fun_Arg_Decl_List (Node => Match_0.Node.Fun_Decl_F_Args, Info => Match_0.Info);
--# expr-done 426









Fld_1 := Fld.Node;

   
      declare
         Map_Result_Vec : Internal_Formal_Param_Vectors.Vector;
      begin
   

   

      if Fld_1 = null then
         
      Map_Result := Create_Internal_Formal_Param_Array (0);
   
      else
         

      declare
         
         Collection : constant Bare_Fun_Arg_Decl_List := Fld_1;
      begin
         for Untyped_Item_2 of
               Collection.Nodes (1 .. Children_Count (Collection))
         loop
                  
                  Bare_Item_2 := Untyped_Item_2; 
                  



Is_Null := Bare_Item_2 = null; 
if Is_Null then
   
   If_Result := No_Entity_Fun_Arg_Decl;
else
   








Fld_2 := Fld.Info;

As_Entity := (Info => Fld_2, Node => Bare_Item_2); 
   If_Result := As_Entity;
end if;



                  Item_2 := If_Result; 

            
   --# scope-start


               --# bind p Item_2

            
         
         
      --# expr-start 427 '<FieldAccess for to_formal_param at nodes.lkt:782:45>' Fld_3 nodes.lkt:782







   if Item_2.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start ComponentDecl.to_formal_param
Fld_3 := Liblktlang.Implementation.Component_Decl_P_To_Formal_Param (Node => Item_2.Node, E_Info => Item_2.Info);
--# end
--# expr-done 427
      

         declare
            Item_To_Append : constant Internal_Formal_Param := Fld_3;
         begin
            Internal_Formal_Param_Vectors.Append (Map_Result_Vec, Item_To_Append);
         end;
   
   
   

            
   --# end



         end loop;
      end;
   
      end if;

   

         Map_Result := Create_Internal_Formal_Param_Array
           (Items_Count => Natural (Internal_Formal_Param_Vectors.Length (Map_Result_Vec)));
         for I in Map_Result.Items'Range loop
            Map_Result.Items (I) := Internal_Formal_Param_Vectors.Get
              (Map_Result_Vec,
               I + Internal_Formal_Param_Vectors.Index_Type'First - Map_Result.Items'First);
         end loop;
         Internal_Formal_Param_Vectors.Destroy (Map_Result_Vec);

      end;
   



--# expr-done 428
   If_Result_6 := Map_Result;
else
   --# expr-start 446 '<If at nodes.lkt:781:21>' If_Result_5 nodes.lkt:781



--# expr-start 429 '<FieldAccess for is_dynamic_combiner at nodes.lkt:783:26>' Fld_18 nodes.lkt:783







   if Match_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start FunDecl.is_dynamic_combiner
Fld_18 := Liblktlang.Implementation.Fun_Decl_P_Is_Dynamic_Combiner (Node => Match_0.Node, E_Info => Match_0.Info);
--# end
--# expr-done 429
if Fld_18 then
   --# expr-start 436 '<ArrayLiteral at nodes.lkt:785:25>' Array_Lit nodes.lkt:785
--# expr-start 435 '<New FormalParam at nodes.lkt:786:29>' New_Struct nodes.lkt:786






--# expr-start 430 '<FieldAccess for args at nodes.lkt:791:38>' Fld_10 nodes.lkt:791







   if Match_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_10 := Create_Internal_Entity_Fun_Arg_Decl_List (Node => Match_0.Node.Fun_Decl_F_Args, Info => Match_0.Info);
--# expr-done 430













Fld_11 := Fld_10.Node;


Get_Result_1 := Get (Self, Fld_11, 0, True); 
Is_Null_2 := Get_Result_1 = null; 
if Is_Null_2 then
   
   If_Result_2 := No_Entity_Fun_Arg_Decl;
else
   








Fld_12 := Fld_10.Info;

As_Entity_2 := (Info => Fld_12, Node => Get_Result_1); 
   If_Result_2 := As_Entity_2;
end if;



Cast_Expr := If_Result_2; 



   
      Cast_Result := Create_Internal_Entity_Decl
        (Node => Cast_Expr.Node,
         Info => Cast_Expr.Info);


--# expr-start 432 '<FieldAccess for name at nodes.lkt:787:45>' Fld_7 nodes.lkt:787



--# expr-start 431 '<FieldAccess for args at nodes.lkt:787:45>' Fld_4 nodes.lkt:787







   if Match_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_4 := Create_Internal_Entity_Fun_Arg_Decl_List (Node => Match_0.Node.Fun_Decl_F_Args, Info => Match_0.Info);
--# expr-done 431













Fld_5 := Fld_4.Node;


Get_Result := Get (Self, Fld_5, 0, True); 
Is_Null_1 := Get_Result = null; 
if Is_Null_1 then
   
   If_Result_1 := No_Entity_Fun_Arg_Decl;
else
   








Fld_6 := Fld_4.Info;

As_Entity_1 := (Info => Fld_6, Node => Get_Result); 
   If_Result_1 := As_Entity_1;
end if;






   if If_Result_1.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]Decl.name'
Fld_7 := Liblktlang.Implementation.Dispatcher_Decl_P_Name (Node => If_Result_1.Node);
--# end
--# expr-done 432
--# expr-start 434 '<FieldAccess for make_array_type at nodes.lkt:788:45>' Fld_9 nodes.lkt:788



--# expr-start 433 '<FieldAccess for logicvar_type at nodes.lkt:788:45>' Fld_8 nodes.lkt:788







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start LktNode.logicvar_type
Fld_8 := Liblktlang.Implementation.Lkt_Node_P_Logicvar_Type (Node => Ent.Node);
--# end
--# expr-done 433



   if Fld_8.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start TypeDecl.make_array_type
Fld_9 := Liblktlang.Implementation.Type_Decl_P_Make_Array_Type (Node => Fld_8.Node, E_Info => Fld_8.Info);
--# end
--# expr-done 434

New_Struct := (Accept_Logical_Var => False, Decl => Cast_Result, Formal_Name => Fld_7, Formal_Type => Fld_9, Has_Default_Value => False); 
--# expr-done 435
Array_Lit := Create_Internal_Formal_Param_Array (Internal_Internal_Formal_Param_Array'(1 => New_Struct)); 
--# expr-done 436
   If_Result_5 := Array_Lit;
else
   --# expr-start 442 '<ArrayLiteral at nodes.lkt:795:25>' Array_Lit_1 nodes.lkt:795
--# expr-start 441 '<New FormalParam at nodes.lkt:796:29>' New_Struct_1 nodes.lkt:796






--# expr-start 438 '<as_entity at nodes.lkt:800:38>' If_Result_3 nodes.lkt:800



--# expr-start 437 '<New SynthArgDecl at nodes.lkt:800:38>' New_Node nodes.lkt:800



if Is_Foreign_Strict (Self.Self_Env, Self) then
   Raise_Property_Exception
     (Self,
      Property_Error'Identity,
      "synthetic nodes cannot have foreign lexical envs");
end if;


New_Node := new Root_Node_Record
  (Lkt_Synth_Arg_Decl);
Initialize
  (Self => New_Node,
   Kind => Lkt_Synth_Arg_Decl,
   Unit => Self.Unit,

   Token_Start_Index => No_Token_Index,
   Token_End_Index   => No_Token_Index,

   Parent => Self,

   Self_Env => Self.Self_Env);
Register_Destroyable (Self.Unit, New_Node);



--# expr-done 437
Is_Null_3 := New_Node = null; 
if Is_Null_3 then
   
   If_Result_3 := No_Entity_Synth_Arg_Decl;
else
   

As_Entity_3 := (Info => E_Info, Node => New_Node); 
   If_Result_3 := As_Entity_3;
end if;



--# expr-done 438



   
      Cast_Result_2 := Create_Internal_Entity_Decl
        (Node => If_Result_3.Node,
         Info => If_Result_3.Info);


--# expr-start 439 '<Symbol var at nodes.lkt:797:45>' Sym nodes.lkt:797
Sym := Precomputed_Symbol (Precomputed_Symbol_Table (Self.Unit.Context.Symbols), Precomputed_Sym_Var); 
--# expr-done 439





--# expr-start 440 '<FieldAccess for logicvar_type at nodes.lkt:798:45>' Fld_13 nodes.lkt:798







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start LktNode.logicvar_type
Fld_13 := Liblktlang.Implementation.Lkt_Node_P_Logicvar_Type (Node => Ent.Node);
--# end
--# expr-done 440



   
      Cast_Result_1 := Create_Internal_Entity_Type_Decl
        (Node => Fld_13.Node,
         Info => Fld_13.Info);



New_Struct_1 := (Accept_Logical_Var => False, Decl => Cast_Result_2, Formal_Name => Sym, Formal_Type => Cast_Result_1, Has_Default_Value => False); 
--# expr-done 441
Array_Lit_1 := Create_Internal_Formal_Param_Array (Internal_Internal_Formal_Param_Array'(1 => New_Struct_1)); 
--# expr-done 442
--# expr-start 445 '<Map at nodes.lkt:803:27>' Map_Result_1 nodes.lkt:803








   

   --# expr-start 443 '<FieldAccess for args at nodes.lkt:803:27>' Fld_14 nodes.lkt:803







   if Match_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_14 := Create_Internal_Entity_Fun_Arg_Decl_List (Node => Match_0.Node.Fun_Decl_F_Args, Info => Match_0.Info);
--# expr-done 443









Fld_15 := Fld_14.Node;

   
      declare
         Map_Result_1_Vec : Internal_Formal_Param_Vectors.Vector;
      begin
   

   

      if Fld_15 = null then
         
      Map_Result_1 := Create_Internal_Formal_Param_Array (0);
   
      else
         

      declare
         
         Collection : constant Bare_Fun_Arg_Decl_List := Fld_15;
      begin
         for Untyped_Item_1 of
               Collection.Nodes (1 .. Children_Count (Collection))
         loop
                  
                  Bare_Item_1 := Untyped_Item_1; 
                  



Is_Null_4 := Bare_Item_1 = null; 
if Is_Null_4 then
   
   If_Result_4 := No_Entity_Fun_Arg_Decl;
else
   








Fld_16 := Fld_14.Info;

As_Entity_4 := (Info => Fld_16, Node => Bare_Item_1); 
   If_Result_4 := As_Entity_4;
end if;



                  Item_1 := If_Result_4; 

            
   --# scope-start


               --# bind p Item_1

            
         
         
      --# expr-start 444 '<FieldAccess for to_formal_param at nodes.lkt:803:46>' Fld_17 nodes.lkt:803







   if Item_1.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start ComponentDecl.to_formal_param
Fld_17 := Liblktlang.Implementation.Component_Decl_P_To_Formal_Param (Node => Item_1.Node, E_Info => Item_1.Info);
--# end
--# expr-done 444
      

         declare
            Item_To_Append : constant Internal_Formal_Param := Fld_17;
         begin
            Internal_Formal_Param_Vectors.Append (Map_Result_1_Vec, Item_To_Append);
         end;
   
   
   

            
   --# end



         end loop;
      end;
   
      end if;

   

         Map_Result_1 := Create_Internal_Formal_Param_Array
           (Items_Count => Natural (Internal_Formal_Param_Vectors.Length (Map_Result_1_Vec)));
         for I in Map_Result_1.Items'Range loop
            Map_Result_1.Items (I) := Internal_Formal_Param_Vectors.Get
              (Map_Result_1_Vec,
               I + Internal_Formal_Param_Vectors.Index_Type'First - Map_Result_1.Items'First);
         end loop;
         Internal_Formal_Param_Vectors.Destroy (Map_Result_1_Vec);

      end;
   



--# expr-done 445
Concat_Result := Concat (Array_Lit_1, Map_Result_1); 
   If_Result_5 := Concat_Result;
end if;

      Inc_Ref (If_Result_5);


--# expr-done 446
   If_Result_6 := If_Result_5;
end if;

      Inc_Ref (If_Result_6);


--# expr-done 447
Let_Result := If_Result_6; Inc_Ref (Let_Result);
--# end
Scope_Result := Let_Result;
   Inc_Ref (Scope_Result);


   --# end
      Finalizer_Scope_489;


            Match_Result := Scope_Result; Inc_Ref (Match_Result);
         when Lkt_Synth_Fun_Decl =>
            



   --# scope-start



--# scope-start









   
      Cast_Result_5 := Create_Internal_Entity_Synth_Fun_Decl
        (Node => Match_Prefix.Node,
         Info => Match_Prefix.Info);


Match_1 := Cast_Result_5; 
--# bind lfd Match_1
--# expr-start 448 '<FieldAccess for args at nodes.lkt:804:43>' Fld_19 nodes.lkt:804







   if Match_1.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_19 := Match_1.Node.Synth_Fun_Decl_Args;
Inc_Ref (Fld_19);
--# expr-done 448
Let_Result_1 := Fld_19; Inc_Ref (Let_Result_1);
--# end
Scope_Result_1 := Let_Result_1;
   Inc_Ref (Scope_Result_1);


   --# end
      Finalizer_Scope_492;


            Match_Result := Scope_Result_1; Inc_Ref (Match_Result);
         when Lkt_Class_Decl =>
            



   --# scope-start



--# scope-start









   
      Cast_Result_6 := Create_Internal_Entity_Class_Decl
        (Node => Match_Prefix.Node,
         Info => Match_Prefix.Info);


Match_2 := Cast_Result_6; 
--# bind cd Match_2
--# expr-start 451 '<Map at nodes.lkt:806:21>' Map_Result_2 nodes.lkt:806








   

   --# expr-start 449 '<FieldAccess for constructor_fields at nodes.lkt:806:21>' Fld_20 nodes.lkt:806







   if Match_2.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start ClassDecl.constructor_fields
Fld_20 := Liblktlang.Implementation.Class_Decl_P_Constructor_Fields (Node => Match_2.Node, E_Info => Match_2.Info);
--# end
--# expr-done 449

   
      declare
         Map_Result_2_Vec : Internal_Formal_Param_Vectors.Vector;
      begin
   

   

      

      declare
         
         Collection : constant Internal_Entity_Field_Decl_Array_Access := Fld_20;
      begin
         for Item_3 of
               Collection.Items
         loop

            
   --# scope-start


               --# bind d Item_3

            
         
         
      --# expr-start 450 '<FieldAccess for to_formal_param at nodes.lkt:806:56>' Fld_21 nodes.lkt:806







   if Item_3.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start ComponentDecl.to_formal_param
Fld_21 := Liblktlang.Implementation.Component_Decl_P_To_Formal_Param (Node => Item_3.Node, E_Info => Item_3.Info);
--# end
--# expr-done 450
      

         declare
            Item_To_Append : constant Internal_Formal_Param := Fld_21;
         begin
            Internal_Formal_Param_Vectors.Append (Map_Result_2_Vec, Item_To_Append);
         end;
   
   
   

            
   --# end



         end loop;
      end;
   

   

         Map_Result_2 := Create_Internal_Formal_Param_Array
           (Items_Count => Natural (Internal_Formal_Param_Vectors.Length (Map_Result_2_Vec)));
         for I in Map_Result_2.Items'Range loop
            Map_Result_2.Items (I) := Internal_Formal_Param_Vectors.Get
              (Map_Result_2_Vec,
               I + Internal_Formal_Param_Vectors.Index_Type'First - Map_Result_2.Items'First);
         end loop;
         Internal_Formal_Param_Vectors.Destroy (Map_Result_2_Vec);

      end;
   



--# expr-done 451
Let_Result_2 := Map_Result_2; Inc_Ref (Let_Result_2);
--# end
Scope_Result_2 := Let_Result_2;
   Inc_Ref (Scope_Result_2);


   --# end
      Finalizer_Scope_493;


            Match_Result := Scope_Result_2; Inc_Ref (Match_Result);
         when Lkt_Enum_Class_Decl .. Lkt_Trait_Decl =>
            



   --# scope-start



--# scope-start









   
      Cast_Result_7 := Create_Internal_Entity_Named_Type_Decl
        (Node => Match_Prefix.Node,
         Info => Match_Prefix.Info);


Match_3 := Cast_Result_7; 
--# bind td Match_3
--# expr-start 459 '<Map at nodes.lkt:808:21>' Map_Result_4 nodes.lkt:808








   

   --# expr-start 455 '<Map at nodes.lkt:808:21>' Map_Result_3 nodes.lkt:808








   

   --# expr-start 452 '<FieldAccess for decls at nodes.lkt:808:21>' Fld_22 nodes.lkt:808







   if Match_3.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_22 := Create_Internal_Entity_Decl_Block (Node => Implementation.Named_Type_Decl_F_Decls (Match_3.Node), Info => Match_3.Info);
--# expr-done 452









Fld_23 := Fld_22.Node;

   
      declare
         Map_Result_3_Vec : Internal_Entity_Full_Decl_Vectors.Vector;
      begin
   

   

      if Fld_23 = null then
         
      Map_Result_3 := Create_Internal_Entity_Full_Decl_Array (0);
   
      else
         

      declare
         
         Collection : constant Bare_Decl_Block := Fld_23;
      begin
         for Untyped_Item_4 of
               Collection.Nodes (1 .. Children_Count (Collection))
         loop
                  
                  Bare_Item_4 := Untyped_Item_4; 
                  



Is_Null_5 := Bare_Item_4 = null; 
if Is_Null_5 then
   
   If_Result_7 := No_Entity_Full_Decl;
else
   








Fld_24 := Fld_22.Info;

As_Entity_5 := (Info => Fld_24, Node => Bare_Item_4); 
   If_Result_7 := As_Entity_5;
end if;



                  Item_4 := If_Result_7; 

            
   --# scope-start


               --# bind d Item_4

            
         --# expr-start 454 '<IsA FieldDecl at nodes.lkt:808:44>' Is_A nodes.lkt:808
--# expr-start 453 '<FieldAccess for decl at nodes.lkt:808:44>' Fld_25 nodes.lkt:808







   if Item_4.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_25 := Create_Internal_Entity_Decl (Node => Item_4.Node.Full_Decl_F_Decl, Info => Item_4.Info);
--# expr-done 453
Is_A := Fld_25.Node /= null 
and then Fld_25.Node.Kind in Lkt_Field_Decl_Range; 
--# expr-done 454
         if Is_A then
            
         
      
      

         declare
            Item_To_Append : constant Internal_Entity_Full_Decl := Item_4;
         begin
            Internal_Entity_Full_Decl_Vectors.Append (Map_Result_3_Vec, Item_To_Append);
         end;
   
   
         end if;
   

            
   --# end



         end loop;
      end;
   
      end if;

   

         Map_Result_3 := Create_Internal_Entity_Full_Decl_Array
           (Items_Count => Natural (Internal_Entity_Full_Decl_Vectors.Length (Map_Result_3_Vec)));
         for I in Map_Result_3.Items'Range loop
            Map_Result_3.Items (I) := Internal_Entity_Full_Decl_Vectors.Get
              (Map_Result_3_Vec,
               I + Internal_Entity_Full_Decl_Vectors.Index_Type'First - Map_Result_3.Items'First);
         end loop;
         Internal_Entity_Full_Decl_Vectors.Destroy (Map_Result_3_Vec);

      end;
   



--# expr-done 455

   
      declare
         Map_Result_4_Vec : Internal_Formal_Param_Vectors.Vector;
      begin
   

   

      

      declare
         
         Collection : constant Internal_Entity_Full_Decl_Array_Access := Map_Result_3;
      begin
         for Item_5 of
               Collection.Items
         loop

            
   --# scope-start


               --# bind d Item_5

            
         
         
      --# expr-start 458 '<FieldAccess for to_formal_param at nodes.lkt:809:32>' Fld_27 nodes.lkt:809



--# expr-start 457 '<Cast to FieldDecl at nodes.lkt:809:32>' Cast_Result_3 nodes.lkt:809





--# expr-start 456 '<FieldAccess for decl at nodes.lkt:809:32>' Fld_26 nodes.lkt:809







   if Item_5.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_26 := Create_Internal_Entity_Decl (Node => Item_5.Node.Full_Decl_F_Decl, Info => Item_5.Info);
--# expr-done 456



   if Fld_26.Node = null
      or else Fld_26.Node.Kind in Lkt_Field_Decl_Range
   then
      
      Cast_Result_3 := Create_Internal_Entity_Field_Decl
        (Node => Fld_26.Node,
         Info => Fld_26.Info);

   else
         Cast_Result_3 := No_Entity_Field_Decl;
   end if;


--# expr-done 457



   if Cast_Result_3.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start ComponentDecl.to_formal_param
Fld_27 := Liblktlang.Implementation.Component_Decl_P_To_Formal_Param (Node => Cast_Result_3.Node, E_Info => Cast_Result_3.Info);
--# end
--# expr-done 458
      

         declare
            Item_To_Append : constant Internal_Formal_Param := Fld_27;
         begin
            Internal_Formal_Param_Vectors.Append (Map_Result_4_Vec, Item_To_Append);
         end;
   
   
   

            
   --# end



         end loop;
      end;
   

   

         Map_Result_4 := Create_Internal_Formal_Param_Array
           (Items_Count => Natural (Internal_Formal_Param_Vectors.Length (Map_Result_4_Vec)));
         for I in Map_Result_4.Items'Range loop
            Map_Result_4.Items (I) := Internal_Formal_Param_Vectors.Get
              (Map_Result_4_Vec,
               I + Internal_Formal_Param_Vectors.Index_Type'First - Map_Result_4.Items'First);
         end loop;
         Internal_Formal_Param_Vectors.Destroy (Map_Result_4_Vec);

      end;
   



--# expr-done 459
Let_Result_3 := Map_Result_4; Inc_Ref (Let_Result_3);
--# end
Scope_Result_3 := Let_Result_3;
   Inc_Ref (Scope_Result_3);


   --# end
      Finalizer_Scope_495;


            Match_Result := Scope_Result_3; Inc_Ref (Match_Result);
         when Lkt_Grammar_Rule_Decl .. Lkt_Val_Decl | Lkt_Env_Spec_Decl .. Lkt_Synth_Arg_Decl | Lkt_Any_Type_Decl .. Lkt_Generic_Formal_Type_Decl =>
            



   --# scope-start



--# scope-start









   
      Cast_Result_8 := Create_Internal_Entity_Decl
        (Node => Match_Prefix.Node,
         Info => Match_Prefix.Info);


Match_4 := Cast_Result_8; 
--# bind _ Match_4

Let_Result_4 := No_Internal_Formal_Param_Array_Type; Inc_Ref (Let_Result_4);
--# end
Scope_Result_4 := Let_Result_4;
   Inc_Ref (Scope_Result_4);


   --# end


            Match_Result := Scope_Result_4; Inc_Ref (Match_Result);
end case;

--# expr-done 460
Scope_Result_5 := Match_Result;
   Inc_Ref (Scope_Result_5);


   --# end
      Finalizer_Scope_488;


   Result_Var := Scope_Result_5;
else
   
   Result_Var := No_Internal_Formal_Param_Array_Type;
end if;

      Inc_Ref (Result_Var);



         Property_Result := Result_Var;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_93;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_93;
                     Finalizer_Scope_488;
                     Finalizer_Scope_489;
                     Finalizer_Scope_492;
                     Finalizer_Scope_493;
                     Finalizer_Scope_495;


               if Self /= null then
                     if not Self.Unit.Context.In_Populate_Lexical_Env then
                        Add_Memoized_Error
                          (Self.Unit, Mmz_Handle, Exc, Mmz_Stored);
                     end if;
               end if;


            raise;
      end;

      if Self /= null then
         if not Self.Unit.Context.In_Populate_Lexical_Env then

            Mmz_Val := (Kind => Mmz_Internal_Formal_Param_Array_Access,
                        As_Internal_Formal_Param_Array_Access => Property_Result);
            Add_Memoized_Value (Self.Unit, Mmz_Handle, Mmz_Val, Mmz_Stored);
               if Mmz_Stored then
                  Inc_Ref (Property_Result);
               end if;

         end if;
      end if;



   return Property_Result;
end Decl_P_Formals;
--# end

   







--# property-start Decl.subdecl_if_generic nodes.lkt:819
pragma Warnings (Off, "is not referenced");
 function Decl_P_Subdecl_If_Generic
  
  (Node : Bare_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Internal_Entity_Decl
is
   Self : Bare_Decl  := Bare_Decl (Node);
     Ent : Internal_Entity_Decl :=
       Internal_Entity_Decl'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Internal_Entity_Decl;

      

      Match_0 : Internal_Entity_Generic_Decl;
Match_1 : Internal_Entity_Decl;
Fld : Internal_Entity_Decl;
Match_Prefix : Internal_Entity_Decl;
Cast_Result : Internal_Entity_Generic_Decl;
Let_Result : Internal_Entity_Decl;
Scope_Result : Internal_Entity_Decl;
Cast_Result_1 : Internal_Entity_Decl;
Let_Result_1 : Internal_Entity_Decl;
Scope_Result_1 : Internal_Entity_Decl;
Match_Result : Internal_Entity_Decl;



begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         --# expr-start 462 '<Match at nodes.lkt:819:46>' Match_Result nodes.lkt:819










   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Match_Prefix := Ent; 

case Lkt_Decl (Match_Prefix.Node.Kind) is
         when Lkt_Generic_Decl =>
            



   --# scope-start



--# scope-start









   
      Cast_Result := Create_Internal_Entity_Generic_Decl
        (Node => Match_Prefix.Node,
         Info => Match_Prefix.Info);


Match_0 := Cast_Result; 
--# bind gc Match_0
--# expr-start 461 '<FieldAccess for decl at nodes.lkt:820:33>' Fld nodes.lkt:820







   if Match_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Create_Internal_Entity_Decl (Node => Match_0.Node.Generic_Decl_F_Decl, Info => Match_0.Info);
--# expr-done 461
Let_Result := Fld; 
--# end
Scope_Result := Let_Result;


   --# end


            Match_Result := Scope_Result; 
         when Lkt_Grammar_Rule_Decl .. Lkt_Env_Spec_Decl | Lkt_Grammar_Decl .. Lkt_Trait_Decl =>
            



   --# scope-start



--# scope-start









   
      Cast_Result_1 := Create_Internal_Entity_Decl
        (Node => Match_Prefix.Node,
         Info => Match_Prefix.Info);


Match_1 := Cast_Result_1; 
--# bind _ Match_1

Let_Result_1 := Ent; 
--# end
Scope_Result_1 := Let_Result_1;


   --# end


            Match_Result := Scope_Result_1; 
end case;

--# expr-done 462

         Property_Result := Match_Result;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Decl_P_Subdecl_If_Generic;
--# end

   







--# property-start Decl.is_generic nodes.lkt:827
pragma Warnings (Off, "is not referenced");
 function Decl_P_Is_Generic
  
  (Node : Bare_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Boolean
is
   Self : Bare_Decl  := Bare_Decl (Node);
     Ent : Internal_Entity_Decl :=
       Internal_Entity_Decl'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Boolean;

      

      Var_Expr_0 : Internal_Entity_Function_Type;
Var_Expr_18 : Internal_Entity_Decl;
Is_Null : Boolean;
Fld : Internal_Entity;
Is_A : Boolean;
If_Result : Boolean;
Cast_Expr : Internal_Entity_Decl;
Cast_Result : Internal_Entity_Function_Type;
Fld_1 : Internal_Entity_Decl;
Fld_2 : Boolean;
Scope_Result : Boolean;
Result_Var : Boolean;
Scope_Result_1 : Boolean;
Result_Var_1 : Boolean;
If_Result_1 : Boolean;



begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         --# expr-start 470 '<BooleanBinaryOp Or at nodes.lkt:828:9>' If_Result_1 nodes.lkt:828



--# expr-start 466 '<BooleanBinaryOp Or at nodes.lkt:828:10>' If_Result nodes.lkt:828



--# expr-start 463 '<IsNull at nodes.lkt:828:10>' Is_Null nodes.lkt:828

Is_Null := Ent.Node = null; 
--# expr-done 463
if Is_Null then
   
   If_Result := True;
else
   --# expr-start 465 '<IsA GenericDecl at nodes.lkt:828:26>' Is_A nodes.lkt:828
--# expr-start 464 '<parent at nodes.lkt:828:26>' Fld nodes.lkt:828







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Liblktlang.Implementation.Parent (Node => Ent.Node, E_Info => Ent.Info);
--# expr-done 464
Is_A := Fld.Node /= null 
and then Fld.Node.Kind in Lkt_Generic_Decl_Range; 
--# expr-done 465
   If_Result := Is_A;
end if;



--# expr-done 466
if If_Result then
   
   If_Result_1 := True;
else
   


--# expr-start 467 '<Cast to FunctionType at nodes.lkt:829:12>' Cast_Result nodes.lkt:829






Cast_Expr := Ent; 



   if Cast_Expr.Node = null
      or else Cast_Expr.Node.Kind in Lkt_Function_Type_Range
   then
      
      Cast_Result := Create_Internal_Entity_Function_Type
        (Node => Cast_Expr.Node,
         Info => Cast_Expr.Info);

   else
         Cast_Result := No_Entity_Function_Type;
   end if;


--# expr-done 467
Var_Expr_0 := Cast_Result;





if Var_Expr_0 /= No_Entity_Function_Type then
   



   --# scope-start


   --# bind ft Var_Expr_0




--# expr-start 468 '<FieldAccess for origin at nodes.lkt:830:21>' Fld_1 nodes.lkt:830







   if Var_Expr_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_1 := Var_Expr_0.Node.Function_Type_Origin;
--# expr-done 468
Var_Expr_18 := Fld_1;





if Var_Expr_18 /= No_Entity_Decl then
   



   --# scope-start


   

--# expr-start 469 '<FieldAccess for is_generic at nodes.lkt:830:21>' Fld_2 nodes.lkt:830







   if Var_Expr_18.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start Decl.is_generic
Fld_2 := Liblktlang.Implementation.Decl_P_Is_Generic (Node => Var_Expr_18.Node, E_Info => Var_Expr_18.Info);
--# end
--# expr-done 469
Scope_Result := Fld_2;


   --# end


   Result_Var := Scope_Result;
else
   
   Result_Var := False;
end if;



Scope_Result_1 := Result_Var;


   --# end


   Result_Var_1 := Scope_Result_1;
else
   
   Result_Var_1 := False;
end if;



   If_Result_1 := Result_Var_1;
end if;



--# expr-done 470

         Property_Result := If_Result_1;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Decl_P_Is_Generic;
--# end

   







--# property-start Decl.return_type_is_instantiated nodes.lkt:836
pragma Warnings (Off, "is not referenced");
 function Decl_P_Return_Type_Is_Instantiated
  
  (Node : Bare_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Boolean
is
   Self : Bare_Decl  := Bare_Decl (Node);
     Ent : Internal_Entity_Decl :=
       Internal_Entity_Decl'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Boolean;

      

      Var_Expr_19 : Internal_Entity_Function_Type;
Cast_Expr : Internal_Entity_Decl;
Cast_Result : Internal_Entity_Function_Type;
Fld : Internal_Entity_Type_Decl;
Fld_1 : Boolean;
Scope_Result : Boolean;
Result_Var : Boolean;



begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

            Populate_Lexical_Env_For_Unit (Self);
      end if;


      begin
         
   --# scope-start

         


--# expr-start 471 '<Cast to FunctionType at nodes.lkt:837:9>' Cast_Result nodes.lkt:837






Cast_Expr := Ent; 



   if Cast_Expr.Node = null
      or else Cast_Expr.Node.Kind in Lkt_Function_Type_Range
   then
      
      Cast_Result := Create_Internal_Entity_Function_Type
        (Node => Cast_Expr.Node,
         Info => Cast_Expr.Info);

   else
         Cast_Result := No_Entity_Function_Type;
   end if;


--# expr-done 471
Var_Expr_19 := Cast_Result;





if Var_Expr_19 /= No_Entity_Function_Type then
   



   --# scope-start


   

--# expr-start 473 '<FieldAccess for is_instantiated at nodes.lkt:837:9>' Fld_1 nodes.lkt:837



--# expr-start 472 '<FieldAccess for return_type at nodes.lkt:837:9>' Fld nodes.lkt:837







   if Var_Expr_19.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Var_Expr_19.Node.Function_Type_Return_Type;
--# expr-done 472



   if Fld.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start Decl.is_instantiated
Fld_1 := Liblktlang.Implementation.Decl_P_Is_Instantiated (Node => Fld.Node, E_Info => Fld.Info);
--# end
--# expr-done 473
Scope_Result := Fld_1;


   --# end


   Result_Var := Scope_Result;
else
   
   Result_Var := False;
end if;




         Property_Result := Result_Var;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Decl_P_Return_Type_Is_Instantiated;
--# end

   







--# property-start Decl.is_instantiated nodes.lkt:842
pragma Warnings (Off, "is not referenced");
 function Decl_P_Is_Instantiated
  
  (Node : Bare_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Boolean
is
   Self : Bare_Decl  := Bare_Decl (Node);
     Ent : Internal_Entity_Decl :=
       Internal_Entity_Decl'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Boolean;

      
            procedure Finalizer_Scope_505 with Inline_Always;
            procedure Finalizer_Scope_506 with Inline_Always;

      Var_Expr_0 : Internal_Entity_Generic_Decl;
Fld : Internal_Entity;
Cast_Result : Internal_Entity_Generic_Decl;
Fld_1 : Internal_Entity_Generic_Formal_Type_Decl_Array_Access;
Fld_2 : Lexical_Env := Empty_Env;
Fld_3 : Symbol_Type;
Env_Get_Result : Internal_Entity;
Cast_Result_1 : Internal_Entity_Type_Decl;
Cast_Expr : Internal_Entity_Generic_Formal_Type_Decl;
Cast_Result_2 : Internal_Entity_Type_Decl;
Fld_4 : Boolean;
Not_Val : Boolean;
Quantifier_Result : Boolean;
Scope_Result : Boolean;
Result_Var : Boolean;
Is_A : Boolean;
If_Result : Boolean;
Is_Null : Boolean;
If_Result_1 : Boolean;

            procedure Finalizer_Scope_505 is
            begin
                     Dec_Ref (Fld_1);
            end Finalizer_Scope_505;
            procedure Finalizer_Scope_506 is
            begin
                     Dec_Ref (Fld_2);
            end Finalizer_Scope_506;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

            Populate_Lexical_Env_For_Unit (Self);
      end if;


      begin
         
   --# scope-start

         --# expr-start 487 '<If at nodes.lkt:843:9>' If_Result_1 nodes.lkt:843



--# expr-start 474 '<IsNull at nodes.lkt:843:12>' Is_Null nodes.lkt:843

Is_Null := Ent.Node = null; 
--# expr-done 474
if Is_Null then
   
   If_Result_1 := True;
else
   --# expr-start 486 '<If at nodes.lkt:843:9>' If_Result nodes.lkt:843



--# expr-start 475 '<IsA GenericFormalTypeDecl at nodes.lkt:844:14>' Is_A nodes.lkt:844

Is_A := Ent.Node /= null 
and then Ent.Node.Kind in Lkt_Generic_Formal_Type_Decl_Range; 
--# expr-done 475
if Is_A then
   
   If_Result := False;
else
   


--# expr-start 477 '<Cast to GenericDecl at nodes.lkt:846:13>' Cast_Result nodes.lkt:846





--# expr-start 476 '<parent at nodes.lkt:846:13>' Fld nodes.lkt:846







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Liblktlang.Implementation.Parent (Node => Ent.Node, E_Info => Ent.Info);
--# expr-done 476



   if Fld.Node = null
      or else Fld.Node.Kind in Lkt_Generic_Decl_Range
   then
      
      Cast_Result := Create_Internal_Entity_Generic_Decl
        (Node => Fld.Node,
         Info => Fld.Info);

   else
         Cast_Result := No_Entity_Generic_Decl;
   end if;


--# expr-done 477
Var_Expr_0 := Cast_Result;





if Var_Expr_0 /= No_Entity_Generic_Decl then
   



   --# scope-start


   --# bind gd Var_Expr_0

--# expr-start 485 '<AllQuantifier at nodes.lkt:848:17>' Quantifier_Result nodes.lkt:848








   

   --# expr-start 478 '<FieldAccess for generic_formals at nodes.lkt:848:17>' Fld_1 nodes.lkt:848







   if Var_Expr_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start GenericDecl.generic_formals
Fld_1 := Liblktlang.Implementation.Generic_Decl_P_Generic_Formals (Node => Var_Expr_0.Node, E_Info => Var_Expr_0.Info);
--# end
--# expr-done 478

   
      Quantifier_Result := True;
   

   

      

      declare
         
         Collection : constant Internal_Entity_Generic_Formal_Type_Decl_Array_Access := Fld_1;
      begin
         for Item_1 of
               Collection.Items
         loop

            
   --# scope-start


               --# bind gf Item_1

            
      --# expr-start 484 '<Not at nodes.lkt:850:21>' Not_Val nodes.lkt:850
--# expr-start 483 '<FieldAccess for matching_type at nodes.lkt:850:25>' Fld_4 nodes.lkt:850



--# expr-start 482 '<Cast to TypeDecl at nodes.lkt:850:25>' Cast_Result_1 nodes.lkt:850





--# expr-start 481 '<EnvGet at nodes.lkt:850:25>' Env_Get_Result nodes.lkt:850
--# expr-start 479 '<FieldAccess for children_env at nodes.lkt:850:25>' Fld_2 nodes.lkt:850







   if Var_Expr_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_2 := Liblktlang.Implementation.Children_Env (Node => Var_Expr_0.Node, E_Info => Var_Expr_0.Info);
--# expr-done 479
--# expr-start 480 '<FieldAccess for name at nodes.lkt:850:51>' Fld_3 nodes.lkt:850







   if Item_1.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]Decl.name'
Fld_3 := Liblktlang.Implementation.Dispatcher_Decl_P_Name (Node => Item_1.Node);
--# end
--# expr-done 480


Env_Get_Result := AST_Envs.Get_First (Self => Fld_2, Key => Thin (Fld_3), Lookup_Kind => To_Lookup_Kind_Type (Recursive), Categories => (Nocat => True)); 
--# expr-done 481



   if Env_Get_Result.Node = null
      or else Env_Get_Result.Node.Kind in Lkt_Type_Decl
   then
      
      Cast_Result_1 := Create_Internal_Entity_Type_Decl
        (Node => Env_Get_Result.Node,
         Info => Env_Get_Result.Info);

   else
         Raise_Property_Exception
           (Self, Property_Error'Identity, "invalid object cast");
   end if;


--# expr-done 482



   if Cast_Result_1.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;








Cast_Expr := Item_1; 



   
      Cast_Result_2 := Create_Internal_Entity_Type_Decl
        (Node => Cast_Expr.Node,
         Info => Cast_Expr.Info);


--# property-call-start TypeDecl.matching_type
Fld_4 := Liblktlang.Implementation.Type_Decl_P_Matching_Type (Node => Cast_Result_1.Node, Other => Cast_Result_2, E_Info => Cast_Result_1.Info);
--# end
--# expr-done 483
Not_Val := not (Fld_4); 
--# expr-done 484
      Quantifier_Result := Not_Val;
   

            
   --# end
      Finalizer_Scope_506;


               exit when not Quantifier_Result;

         end loop;
      end;
   

   
   



--# expr-done 485
Scope_Result := Quantifier_Result;


   --# end
      Finalizer_Scope_505;


   Result_Var := Scope_Result;
else
   
   Result_Var := True;
end if;



   If_Result := Result_Var;
end if;



--# expr-done 486
   If_Result_1 := If_Result;
end if;



--# expr-done 487

         Property_Result := If_Result_1;
         
   --# end


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_505;
                     Finalizer_Scope_506;




            raise;
      end;



   return Property_Result;
end Decl_P_Is_Instantiated;
--# end

   







--# property-start Decl.has_correct_type_param_number nodes.lkt:859
pragma Warnings (Off, "is not referenced");
 function Decl_P_Has_Correct_Type_Param_Number
  
  (Node : Bare_Decl
      ; Nb_Types : Integer
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Boolean
is
   Self : Bare_Decl  := Bare_Decl (Node);
     Ent : Internal_Entity_Decl :=
       Internal_Entity_Decl'(Node => Self, Info => E_Info);
      --# bind entity Ent

   

   --# bind nb_types Nb_Types

   Property_Result : Boolean;

      

      Match_0 : Internal_Entity_Generic_Decl;
Match_1 : Internal_Entity;
Is_Null : Boolean;
Fld : Internal_Entity;
Fld_1 : Internal_Entity_Generic_Formal_Decl_List;
Fld_2 : Bare_Generic_Formal_Decl_List;
Len : Integer;
Is_Equal : Boolean;
Match_Prefix : Internal_Entity;
Cast_Result : Internal_Entity_Generic_Decl;
Let_Result : Boolean;
Scope_Result : Boolean;
Cast_Result_1 : Internal_Entity;
Let_Result_1 : Boolean;
Scope_Result_1 : Boolean;
Match_Result : Boolean;
If_Result : Boolean;



begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         --# expr-start 494 '<BooleanBinaryOp Or at nodes.lkt:860:9>' If_Result nodes.lkt:860



--# expr-start 488 '<IsNull at nodes.lkt:860:9>' Is_Null nodes.lkt:860

Is_Null := Ent.Node = null; 
--# expr-done 488
if Is_Null then
   
   If_Result := True;
else
   --# expr-start 493 '<Match at nodes.lkt:861:12>' Match_Result nodes.lkt:861






--# expr-start 489 '<parent at nodes.lkt:861:18>' Fld nodes.lkt:861







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Liblktlang.Implementation.Parent (Node => Ent.Node, E_Info => Ent.Info);
--# expr-done 489



   if Fld.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Match_Prefix := Fld; 

case Lkt_Lkt_Node (Match_Prefix.Node.Kind) is
         when Lkt_Generic_Decl =>
            



   --# scope-start



--# scope-start









   
      Cast_Result := Create_Internal_Entity_Generic_Decl
        (Node => Match_Prefix.Node,
         Info => Match_Prefix.Info);


Match_0 := Cast_Result; 
--# bind gd Match_0
--# expr-start 492 '<Eq at nodes.lkt:863:17>' Is_Equal nodes.lkt:863
--# expr-start 491 '<length at nodes.lkt:863:17>' Len nodes.lkt:863



--# expr-start 490 '<FieldAccess for generic_formal_decls at nodes.lkt:863:17>' Fld_1 nodes.lkt:863







   if Match_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_1 := Create_Internal_Entity_Generic_Formal_Decl_List (Node => Match_0.Node.Generic_Decl_F_Generic_Formal_Decls, Info => Match_0.Info);
--# expr-done 490





Fld_2 := Fld_1.Node; 
Len := Length (Fld_2); 
--# expr-done 491

Is_Equal := Len = Nb_Types; 
--# expr-done 492
Let_Result := Is_Equal; 
--# end
Scope_Result := Let_Result;


   --# end


            Match_Result := Scope_Result; 
         when Lkt_Lexer_Case_Rule_Cond_Alt .. Lkt_Env_Spec_Decl | Lkt_Grammar_Decl .. Lkt_Var_Bind =>
            



   --# scope-start



--# scope-start









   
      Cast_Result_1 := Create_Internal_Entity
        (Node => Match_Prefix.Node,
         Info => Match_Prefix.Info);


Match_1 := Cast_Result_1; 
--# bind _ Match_1

Let_Result_1 := True; 
--# end
Scope_Result_1 := Let_Result_1;


   --# end


            Match_Result := Scope_Result_1; 
end case;

--# expr-done 493
   If_Result := Match_Result;
end if;



--# expr-done 494

         Property_Result := If_Result;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Decl_P_Has_Correct_Type_Param_Number;
--# end

   







--# property-start Decl.could_infer nodes.lkt:870
pragma Warnings (Off, "is not referenced");
 function Decl_P_Could_Infer
  
  (Node : Bare_Decl
      ; Generic_Type : Internal_Entity_Function_Type
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Boolean
is
   Self : Bare_Decl  := Bare_Decl (Node);
     Ent : Internal_Entity_Decl :=
       Internal_Entity_Decl'(Node => Self, Info => E_Info);
      --# bind entity Ent

   

   --# bind generic_type Generic_Type

   Property_Result : Boolean;

      

      Is_Null : Boolean;
Is_Null_1 : Boolean;
Not_Val : Boolean;
If_Result : Boolean;



begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         --# expr-start 498 '<BooleanBinaryOp Or at nodes.lkt:871:9>' If_Result nodes.lkt:871



--# expr-start 495 '<IsNull at nodes.lkt:871:9>' Is_Null nodes.lkt:871

Is_Null := Generic_Type.Node = null; 
--# expr-done 495
if Is_Null then
   
   If_Result := True;
else
   --# expr-start 497 '<Not at nodes.lkt:871:33>' Not_Val nodes.lkt:871
--# expr-start 496 '<IsNull at nodes.lkt:871:37>' Is_Null_1 nodes.lkt:871

Is_Null_1 := Ent.Node = null; 
--# expr-done 496
Not_Val := not (Is_Null_1); 
--# expr-done 497
   If_Result := Not_Val;
end if;



--# expr-done 498

         Property_Result := If_Result;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Decl_P_Could_Infer;
--# end

   







--# property-start Decl.instantiate_generic_decl nodes.lkt:876
pragma Warnings (Off, "is not referenced");
 function Decl_P_Instantiate_Generic_Decl
  
  (Node : Bare_Decl
      ; Type_Params : Internal_Entity_Type_Decl_Array_Access
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Internal_Entity_Decl
is
   Self : Bare_Decl  := Bare_Decl (Node);
     Ent : Internal_Entity_Decl :=
       Internal_Entity_Decl'(Node => Self, Info => E_Info);
      --# bind entity Ent

   

   --# bind type_params Type_Params

   Property_Result : Internal_Entity_Decl;

      
            procedure Finalizer_Scope_100 with Inline_Always;
            procedure Finalizer_Scope_509 with Inline_Always;

      Var_Expr_0 : Bare_Dyn_Env_Wrapper;
Fld : Internal_Entity;
Cast_Result : Internal_Entity_Generic_Decl;
Fld_1 : Symbol_Type_Array_Access;
New_Node : Bare_Dyn_Env_Wrapper;
Fld_2 : Lexical_Env := Empty_Env;
Fld_3 : Internal_Entity_Decl;
Scope_Result : Internal_Entity_Decl;
Result_Var : Internal_Entity_Decl;
Cast_Expr : Internal_Entity_Type_Decl;
Cast_Result_1 : Internal_Entity_Decl;
Is_Null : Boolean;
Is_Null_1 : Boolean;
Quantifier_Result : Boolean;
If_Result : Boolean;
If_Result_1 : Internal_Entity_Decl;

            procedure Finalizer_Scope_100 is
            begin
                     Dec_Ref (Fld_1);
            end Finalizer_Scope_100;
            procedure Finalizer_Scope_509 is
            begin
                     Dec_Ref (Fld_2);
            end Finalizer_Scope_509;

      
      Mmz_Handle : Memoization_Handle;
      Mmz_Val    : Mmz_Value;

      Mmz_Stored : Boolean;
      --  Whether the memoization couple was actually stored. Used to determine
      --  whether to inc-ref the memoized value.

      function Create_Mmz_Key return Mmz_Key;
      --  Create a memoization key for this property call and return it

      --------------------
      -- Create_Mmz_Key --
      --------------------

      function Create_Mmz_Key return Mmz_Key is
      begin
         return Mmz_K : Mmz_Key :=
           (Property => Mmz_Bare_Decl_Decl_P_Instantiate_Generic_Decl,
            Items    => new Mmz_Key_Array (1 ..  3))
         do
            Mmz_K.Items (1) := (Kind => Mmz_Bare_Decl,
                                As_Bare_Decl => Self);
               Mmz_K.Items (2) := (Kind => Mmz_Internal_Entity_Type_Decl_Array_Access,
                                      As_Internal_Entity_Type_Decl_Array_Access => Type_Params);
                  Inc_Ref (Mmz_K.Items (2).As_Internal_Entity_Type_Decl_Array_Access);
               Mmz_K.Items (3) :=
                 (Kind => Mmz_Internal_Entity_Info,
                  As_Internal_Entity_Info => E_Info);
         end return;
      end Create_Mmz_Key;

begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;

      if Self /= null then

         if not Self.Unit.Context.In_Populate_Lexical_Env then

            if Find_Memoized_Value
              (Self.Unit, Mmz_Handle, Mmz_Val, Create_Mmz_Key'Access)
            then
               --# memoization-lookup

               if Mmz_Val.Kind = Mmz_Evaluating then
                  --# memoization-return
                  Raise_Property_Exception
                    (Self,
                     Property_Error'Identity,
                     "Infinite recursion detected");

               elsif Mmz_Val.Kind = Mmz_Error then
                  --# memoization-return
                  Reraise_Memoized_Error (Mmz_Val);

               else
                  Property_Result := Mmz_Val.As_Internal_Entity_Decl;

                  --# memoization-return
                  return Property_Result;
               end if;
               --# end
            end if;

         end if;
      end if;

      begin
         
   --# scope-start

         --# expr-start 509 '<If at nodes.lkt:879:9>' If_Result_1 nodes.lkt:879



--# expr-start 502 '<BooleanBinaryOp Or at nodes.lkt:879:12>' If_Result nodes.lkt:879



--# expr-start 499 '<IsNull at nodes.lkt:879:12>' Is_Null nodes.lkt:879

Is_Null := Ent.Node = null; 
--# expr-done 499
if Is_Null then
   
   If_Result := True;
else
   --# expr-start 501 '<AnyQuantifier at nodes.lkt:879:28>' Quantifier_Result nodes.lkt:879








   

   

   
      Quantifier_Result := False;
   

   

      

      declare
         
         Collection : constant Internal_Entity_Type_Decl_Array_Access := Type_Params;
      begin
         for Item_1 of
               Collection.Items
         loop

            
   --# scope-start


               --# bind t Item_1

            
      --# expr-start 500 '<IsNull at nodes.lkt:879:51>' Is_Null_1 nodes.lkt:879

Is_Null_1 := Item_1.Node = null; 
--# expr-done 500
      Quantifier_Result := Is_Null_1;
   

            
   --# end


               exit when Quantifier_Result;

         end loop;
      end;
   

   
   



--# expr-done 501
   If_Result := Quantifier_Result;
end if;



--# expr-done 502
if If_Result then
   





Cast_Expr := No_Entity_Type_Decl; 



   
      Cast_Result_1 := Create_Internal_Entity_Decl
        (Node => Cast_Expr.Node,
         Info => Cast_Expr.Info);


   If_Result_1 := Cast_Result_1;
else
   


--# expr-start 506 '<New DynEnvWrapper at nodes.lkt:882:13>' New_Node nodes.lkt:882
--# expr-start 505 '<FieldAccess for generic_formals_names at nodes.lkt:883:23>' Fld_1 nodes.lkt:883



--# expr-start 504 '<Cast to GenericDecl at nodes.lkt:883:23>' Cast_Result nodes.lkt:883





--# expr-start 503 '<parent at nodes.lkt:883:23>' Fld nodes.lkt:883







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Liblktlang.Implementation.Parent (Node => Ent.Node, E_Info => Ent.Info);
--# expr-done 503



   if Fld.Node = null
      or else Fld.Node.Kind in Lkt_Generic_Decl_Range
   then
      
      Cast_Result := Create_Internal_Entity_Generic_Decl
        (Node => Fld.Node,
         Info => Fld.Info);

   else
         Cast_Result := No_Entity_Generic_Decl;
   end if;


--# expr-done 504



   if Cast_Result.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start GenericDecl.generic_formals_names
Fld_1 := Liblktlang.Implementation.Generic_Decl_P_Generic_Formals_Names (Node => Cast_Result.Node, E_Info => Cast_Result.Info);
--# end
--# expr-done 505

Inc_Ref (Fld_1);
Inc_Ref (Type_Params);


if Is_Foreign_Strict (Self.Self_Env, Self) then
   Raise_Property_Exception
     (Self,
      Property_Error'Identity,
      "synthetic nodes cannot have foreign lexical envs");
end if;


New_Node := new Root_Node_Record
  (Lkt_Dyn_Env_Wrapper);
Initialize
  (Self => New_Node,
   Kind => Lkt_Dyn_Env_Wrapper,
   Unit => Self.Unit,

   Token_Start_Index => No_Token_Index,
   Token_End_Index   => No_Token_Index,

   Parent => Self,

   Self_Env => Self.Self_Env);
Register_Destroyable (Self.Unit, New_Node);


      New_Node.Dyn_Env_Wrapper_Names :=
         Fld_1;
      New_Node.Dyn_Env_Wrapper_Types :=
         Type_Params;

--# expr-done 506
Var_Expr_0 := New_Node;





if Var_Expr_0 /= No_Bare_Lkt_Node then
   



   --# scope-start


   --# bind dew Var_Expr_0

--# expr-start 508 '<FieldAccess for get_rebinded_decl at nodes.lkt:888:17>' Fld_3 nodes.lkt:888







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# expr-start 507 '<FieldAccess for dynenvwrapper_instantiation_env at nodes.lkt:888:40>' Fld_2 nodes.lkt:888







   if Var_Expr_0 = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start DynEnvWrapper.dynenvwrapper_instantiation_env
Fld_2 := Liblktlang.Implementation.Dyn_Env_Wrapper_F_Dynenvwrapper_Instantiation_Env (Node => Var_Expr_0);
--# end
--# expr-done 507
--# property-call-start Decl.get_rebinded_decl
Fld_3 := Liblktlang.Implementation.Decl_P_Get_Rebinded_Decl (Node => Ent.Node, Rebindings_Env => Fld_2, E_Info => Ent.Info);
--# end
--# expr-done 508
Scope_Result := Fld_3;


   --# end
      Finalizer_Scope_509;


   Result_Var := Scope_Result;
else
   
   Result_Var := No_Entity_Decl;
end if;



   If_Result_1 := Result_Var;
end if;



--# expr-done 509

         Property_Result := If_Result_1;
         
   --# end
      Finalizer_Scope_100;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_100;
                     Finalizer_Scope_509;


               if Self /= null then
                     if not Self.Unit.Context.In_Populate_Lexical_Env then
                        Add_Memoized_Error
                          (Self.Unit, Mmz_Handle, Exc, Mmz_Stored);
                     end if;
               end if;


            raise;
      end;

      if Self /= null then
         if not Self.Unit.Context.In_Populate_Lexical_Env then

            Mmz_Val := (Kind => Mmz_Internal_Entity_Decl,
                        As_Internal_Entity_Decl => Property_Result);
            Add_Memoized_Value (Self.Unit, Mmz_Handle, Mmz_Val, Mmz_Stored);

         end if;
      end if;



   return Property_Result;
end Decl_P_Instantiate_Generic_Decl;
--# end

   







--# property-start Decl.get_rebinded_decl nodes.lkt:893
pragma Warnings (Off, "is not referenced");
 function Decl_P_Get_Rebinded_Decl
  
  (Node : Bare_Decl
      ; Rebindings_Env : Lexical_Env
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Internal_Entity_Decl
is
   Self : Bare_Decl  := Bare_Decl (Node);
     Ent : Internal_Entity_Decl :=
       Internal_Entity_Decl'(Node => Self, Info => E_Info);
      --# bind entity Ent

   

   --# bind rebindings_env Rebindings_Env

   Property_Result : Internal_Entity_Decl;

      
            procedure Finalizer_Scope_101 with Inline_Always;

      Local_Shed_Current : Internal_Entity_Info;
Var_Expr_20 : Bare_Generic_Decl;
Fld : Internal_Entity_Info;
Fld_1 : Bare_Lkt_Node;
Fld_2 : Lexical_Env := Empty_Env;
Shed_Entity_Info : Internal_Entity_Info;
Fld_3 : Bare_Lkt_Node;
Cast_Result : Bare_Generic_Decl;
Fld_4 : Bare_Decl;
Scope_Result : Bare_Decl;
Result_Var : Bare_Decl;
Fld_5 : Env_Rebindings;
Fld_6 : Lexical_Env := Empty_Env;
Rebinding : Env_Rebindings;
New_Struct : Internal_Entity_Info;
New_Struct_1 : Internal_Entity_Decl;
Is_Null : Boolean;
Fld_7 : Internal_Entity;
Is_A : Boolean;
Not_Val : Boolean;
If_Result : Boolean;
If_Result_1 : Internal_Entity_Decl;
Let_Result : Internal_Entity_Decl;

            procedure Finalizer_Scope_101 is
            begin
                     Dec_Ref (Fld_2);
                     Dec_Ref (Fld_6);
            end Finalizer_Scope_101;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 528 '<Let at nodes.lkt:894:9>' Let_Result nodes.lkt:894
--# scope-start
--# expr-start 513 '<shed_rebindings at nodes.lkt:894:28>' Shed_Entity_Info nodes.lkt:894
--# expr-start 510 '<FieldAccess for info at nodes.lkt:894:65>' Fld nodes.lkt:894









Fld := Ent.Info;
--# expr-done 510
--# expr-start 512 '<FieldAccess for node_env at nodes.lkt:894:28>' Fld_2 nodes.lkt:894



--# expr-start 511 '<parent at nodes.lkt:894:28>' Fld_1 nodes.lkt:894







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_1 := Self.Parent; 
--# expr-done 511



   if Fld_1 = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_2 := Liblktlang.Implementation.Node_Env (Node => Fld_1);
--# expr-done 512
Shed_Entity_Info := AST_Envs.Shed_Rebindings (Fld, Fld_2); 
--# expr-done 513
Local_Shed_Current := Shed_Entity_Info; 
--# bind shed_current Local_Shed_Current
--# expr-start 527 '<If at nodes.lkt:896:9>' If_Result_1 nodes.lkt:896



--# expr-start 518 '<BooleanBinaryOp Or at nodes.lkt:896:12>' If_Result nodes.lkt:896



--# expr-start 514 '<IsNull at nodes.lkt:896:12>' Is_Null nodes.lkt:896

Is_Null := Ent.Node = null; 
--# expr-done 514
if Is_Null then
   
   If_Result := True;
else
   --# expr-start 517 '<Not at nodes.lkt:896:28>' Not_Val nodes.lkt:896
--# expr-start 516 '<IsA GenericDecl at nodes.lkt:896:32>' Is_A nodes.lkt:896
--# expr-start 515 '<parent at nodes.lkt:896:32>' Fld_7 nodes.lkt:896







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_7 := Liblktlang.Implementation.Parent (Node => Ent.Node, E_Info => Ent.Info);
--# expr-done 515
Is_A := Fld_7.Node /= null 
and then Fld_7.Node.Kind in Lkt_Generic_Decl_Range; 
--# expr-done 516
Not_Val := not (Is_A); 
--# expr-done 517
   If_Result := Not_Val;
end if;



--# expr-done 518
if If_Result then
   
   If_Result_1 := No_Entity_Decl;
else
   --# expr-start 526 '<New Decl.entity at nodes.lkt:899:13>' New_Struct_1 nodes.lkt:899
--# expr-start 522 '<New EntityInfo at nodes.lkt:901:22>' New_Struct nodes.lkt:901


--# expr-start 521 '<append_rebinding at nodes.lkt:903:32>' Rebinding nodes.lkt:903
--# expr-start 519 '<FieldAccess for rebindings at nodes.lkt:903:32>' Fld_5 nodes.lkt:903









Fld_5 := Local_Shed_Current.Rebindings;
--# expr-done 519
--# expr-start 520 '<FieldAccess for node_env at nodes.lkt:904:25>' Fld_6 nodes.lkt:904







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_6 := Liblktlang.Implementation.Node_Env (Node => Self);
--# expr-done 520

Rebinding := AST_Envs.Append_Rebinding (Fld_5, Fld_6, Rebindings_Env); 
--# expr-done 521
New_Struct := (From_Rebound => False, Md => No_Metadata, Rebindings => Rebinding); 
--# expr-done 522



--# expr-start 524 '<Cast to GenericDecl at nodes.lkt:900:22>' Cast_Result nodes.lkt:900





--# expr-start 523 '<parent at nodes.lkt:900:22>' Fld_3 nodes.lkt:900







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_3 := Self.Parent; 
--# expr-done 523



   if Fld_3 = null
      or else Fld_3.Kind in Lkt_Generic_Decl_Range
   then
      
      Cast_Result := Fld_3;

   else
         Cast_Result := No_Bare_Lkt_Node;
   end if;


--# expr-done 524
Var_Expr_20 := Cast_Result;





if Var_Expr_20 /= No_Bare_Lkt_Node then
   



   --# scope-start


   

--# expr-start 525 '<FieldAccess for decl at nodes.lkt:900:22>' Fld_4 nodes.lkt:900







   if Var_Expr_20 = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_4 := Var_Expr_20.Generic_Decl_F_Decl;
--# expr-done 525
Scope_Result := Fld_4;


   --# end


   Result_Var := Scope_Result;
else
   
   Result_Var := No_Bare_Lkt_Node;
end if;



New_Struct_1 := (Info => New_Struct, Node => Result_Var); 
--# expr-done 526
   If_Result_1 := New_Struct_1;
end if;



--# expr-done 527
Let_Result := If_Result_1; 
--# end
--# expr-done 528

         Property_Result := Let_Result;
         
   --# end
      Finalizer_Scope_101;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_101;




            raise;
      end;



   return Property_Result;
end Decl_P_Get_Rebinded_Decl;
--# end

   







--# property-start Decl.is_dynvar nodes.lkt:913
pragma Warnings (Off, "is not referenced");
 function Decl_P_Is_Dynvar
  
  (Node : Bare_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Boolean
is
   Self : Bare_Decl  := Bare_Decl (Node);
     Ent : Internal_Entity_Decl :=
       Internal_Entity_Decl'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Boolean;

      

      Is_Null : Boolean;
Is_A : Boolean;
If_Result : Boolean;



begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         --# expr-start 531 '<BooleanBinaryOp Or at nodes.lkt:913:29>' If_Result nodes.lkt:913



--# expr-start 529 '<IsNull at nodes.lkt:913:29>' Is_Null nodes.lkt:913

Is_Null := Ent.Node = null; 
--# expr-done 529
if Is_Null then
   
   If_Result := True;
else
   --# expr-start 530 '<IsA DynVarDecl at nodes.lkt:913:45>' Is_A nodes.lkt:913

Is_A := Ent.Node /= null 
and then Ent.Node.Kind in Lkt_Dyn_Var_Decl_Range; 
--# expr-done 530
   If_Result := Is_A;
end if;



--# expr-done 531

         Property_Result := If_Result;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Decl_P_Is_Dynvar;
--# end

   







--# property-start '[dispatcher]Decl.name' dispatcher
pragma Warnings (Off, "is not referenced");
 function Dispatcher_Decl_P_Name
  
  (Node : Bare_Decl
  )

   return Symbol_Type
is
   Self : Bare_Decl  := Bare_Decl (Node);
      --# bind self Self

   


   Property_Result : Symbol_Type;



begin
   --# property-body-start

   pragma Assert (Self = Node);





      if Self = null then
         Raise_Property_Exception
           (Self, Property_Error'Identity, "dispatching on null node");
      end if;

      case Lkt_Decl (Self.Kind) is
               when Lkt_Grammar_Rule_Decl | Lkt_Enum_Lit_Decl .. Lkt_Env_Spec_Decl | Lkt_Grammar_Decl .. Lkt_Trait_Decl =>
                  --# property-call-start Decl.name
                  Property_Result := Decl_P_Name
                    (Self
                    );
                  --# end
               when Lkt_Synthetic_Lexer_Decl =>
                  --# property-call-start SyntheticLexerDecl.name
                  Property_Result := Synthetic_Lexer_Decl_P_Name
                    (Self
                    );
                  --# end
               when Lkt_Node_Decl =>
                  --# property-call-start NodeDecl.name
                  Property_Result := Node_Decl_P_Name
                    (Self
                    );
                  --# end
               when Lkt_Self_Decl =>
                  --# property-call-start SelfDecl.name
                  Property_Result := Self_Decl_P_Name
                    (Self
                    );
                  --# end
               when Lkt_Generic_Decl =>
                  --# property-call-start GenericDecl.name
                  Property_Result := Generic_Decl_P_Name
                    (Self
                    );
                  --# end
      end case;




   return Property_Result;
end Dispatcher_Decl_P_Name;
--# end

   







--# property-start '[dispatcher]Decl.full_name' dispatcher
pragma Warnings (Off, "is not referenced");
 function Dispatcher_Decl_P_Full_Name
  
  (Node : Bare_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return String_Type
is
   Self : Bare_Decl  := Bare_Decl (Node);
     Ent : Internal_Entity_Decl :=
       Internal_Entity_Decl'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : String_Type;



begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

            Populate_Lexical_Env_For_Unit (Self);
      end if;


      if Self = null then
         Raise_Property_Exception
           (Self, Property_Error'Identity, "dispatching on null node");
      end if;

      case Lkt_Decl (Self.Kind) is
               when Lkt_Grammar_Rule_Decl .. Lkt_Lexer_Family_Decl | Lkt_Synth_Fun_Decl | Lkt_Enum_Class_Alt_Decl | Lkt_Generic_Formal_Type_Decl .. Lkt_Trait_Decl =>
                  --# property-call-start Decl.full_name
                  Property_Result := Decl_P_Full_Name
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Synth_Arg_Decl =>
                  --# property-call-start SynthArgDecl.full_name
                  Property_Result := Synth_Arg_Decl_P_Full_Name
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Any_Type_Decl =>
                  --# property-call-start AnyTypeDecl.full_name
                  Property_Result := Any_Type_Decl_P_Full_Name
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Function_Type =>
                  --# property-call-start FunctionType.full_name
                  Property_Result := Function_Type_P_Full_Name
                    (Self
                        , E_Info
                    );
                  --# end
      end case;




   return Property_Result;
end Dispatcher_Decl_P_Full_Name;
--# end

   







--# property-start '[dispatcher]Decl.defined_scope' dispatcher
pragma Warnings (Off, "is not referenced");
 function Dispatcher_Decl_P_Defined_Scope
  
  (Node : Bare_Decl
      ; Origin : Internal_Entity
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Lexical_Env
is
   Self : Bare_Decl  := Bare_Decl (Node);
      --# bind self Self

   

   --# bind origin Origin

   Property_Result : Lexical_Env;



begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      if Self = null then
         Raise_Property_Exception
           (Self, Property_Error'Identity, "dispatching on null node");
      end if;

      case Lkt_Decl (Self.Kind) is
               when Lkt_Grammar_Rule_Decl .. Lkt_Synthetic_Lexer_Decl | Lkt_Env_Spec_Decl .. Lkt_Any_Type_Decl | Lkt_Generic_Formal_Type_Decl =>
                  --# property-call-start Decl.defined_scope
                  Property_Result := Decl_P_Defined_Scope
                    (Self
                        , Origin
                        , E_Info
                    );
                  --# end
               when Lkt_Node_Decl .. Lkt_Self_Decl | Lkt_Field_Decl .. Lkt_Fun_Decl =>
                  --# property-call-start BaseValDecl.defined_scope
                  Property_Result := Base_Val_Decl_P_Defined_Scope
                    (Self
                        , Origin
                        , E_Info
                    );
                  --# end
               when Lkt_Enum_Lit_Decl =>
                  --# property-call-start EnumLitDecl.defined_scope
                  Property_Result := Enum_Lit_Decl_P_Defined_Scope
                    (Self
                        , Origin
                        , E_Info
                    );
                  --# end
               when Lkt_Enum_Class_Alt_Decl =>
                  --# property-call-start EnumClassAltDecl.defined_scope
                  Property_Result := Enum_Class_Alt_Decl_P_Defined_Scope
                    (Self
                        , Origin
                        , E_Info
                    );
                  --# end
               when Lkt_Function_Type =>
                  --# property-call-start FunctionType.defined_scope
                  Property_Result := Function_Type_P_Defined_Scope
                    (Self
                        , Origin
                        , E_Info
                    );
                  --# end
               when Lkt_Enum_Type_Decl | Lkt_Trait_Decl =>
                  --# property-call-start NamedTypeDecl.defined_scope
                  Property_Result := Named_Type_Decl_P_Defined_Scope
                    (Self
                        , Origin
                        , E_Info
                    );
                  --# end
               when Lkt_Class_Decl .. Lkt_Enum_Class_Decl =>
                  --# property-call-start BasicClassDecl.defined_scope
                  Property_Result := Basic_Class_Decl_P_Defined_Scope
                    (Self
                        , Origin
                        , E_Info
                    );
                  --# end
               when Lkt_Struct_Decl =>
                  --# property-call-start StructDecl.defined_scope
                  Property_Result := Struct_Decl_P_Defined_Scope
                    (Self
                        , Origin
                        , E_Info
                    );
                  --# end
      end case;




   return Property_Result;
end Dispatcher_Decl_P_Defined_Scope;
--# end

   







--# property-start '[dispatcher]Decl.defined_scope_as_entity' dispatcher
pragma Warnings (Off, "is not referenced");
 function Dispatcher_Decl_P_Defined_Scope_As_Entity
  
  (Node : Bare_Decl
      ; Origin : Internal_Entity
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Lexical_Env
is
   Self : Bare_Decl  := Bare_Decl (Node);
     Ent : Internal_Entity_Decl :=
       Internal_Entity_Decl'(Node => Self, Info => E_Info);
      --# bind entity Ent

   

   --# bind origin Origin

   Property_Result : Lexical_Env;



begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      if Self = null then
         Raise_Property_Exception
           (Self, Property_Error'Identity, "dispatching on null node");
      end if;

      case Lkt_Decl (Self.Kind) is
               when Lkt_Grammar_Rule_Decl .. Lkt_Generic_Formal_Type_Decl | Lkt_Enum_Type_Decl .. Lkt_Struct_Decl =>
                  --# property-call-start Decl.defined_scope_as_entity
                  Property_Result := Decl_P_Defined_Scope_As_Entity
                    (Self
                        , Origin
                        , E_Info
                    );
                  --# end
               when Lkt_Class_Decl .. Lkt_Enum_Class_Decl =>
                  --# property-call-start BasicClassDecl.defined_scope_as_entity
                  Property_Result := Basic_Class_Decl_P_Defined_Scope_As_Entity
                    (Self
                        , Origin
                        , E_Info
                    );
                  --# end
               when Lkt_Trait_Decl =>
                  --# property-call-start TraitDecl.defined_scope_as_entity
                  Property_Result := Trait_Decl_P_Defined_Scope_As_Entity
                    (Self
                        , Origin
                        , E_Info
                    );
                  --# end
      end case;




   return Property_Result;
end Dispatcher_Decl_P_Defined_Scope_As_Entity;
--# end

   







--# property-start Decl._env_mappings_0 nodes.lkt:964
pragma Warnings (Off, "is not referenced");
 function Env_Mappings_0
  
  (Node : Bare_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Internal_Env_Assoc_Array_Access
is
   Self : Bare_Decl  := Bare_Decl (Node);
     Ent : Internal_Entity_Decl :=
       Internal_Entity_Decl'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Internal_Env_Assoc_Array_Access;

      
            procedure Finalizer_Scope_376 with Inline_Always;

      Var_Expr_22 : Internal_Entity_Full_Decl;
Var_Expr_23 : Internal_Entity_Full_Decl;
Sym : Symbol_Type;
New_Struct : Internal_Designated_Env := No_Designated_Env;
Cast_Expr : Bare_Decl;
Cast_Result : Bare_Lkt_Node;
New_Struct_1 : Internal_Env_Assoc := No_Env_Assoc;
Fld : Symbol_Type;
New_Struct_2 : Internal_Designated_Env := No_Designated_Env;
Cast_Expr_1 : Bare_Decl;
Cast_Result_1 : Bare_Lkt_Node;
New_Struct_3 : Internal_Env_Assoc := No_Env_Assoc;
Array_Lit : Internal_Env_Assoc_Array_Access;
Sym_1 : Symbol_Type;
New_Struct_4 : Internal_Designated_Env := No_Designated_Env;
Cast_Expr_2 : Bare_Decl;
Cast_Result_2 : Bare_Lkt_Node;
New_Struct_5 : Internal_Env_Assoc := No_Env_Assoc;
Fld_1 : Symbol_Type;
New_Struct_6 : Internal_Designated_Env := No_Designated_Env;
Cast_Expr_3 : Bare_Decl;
Cast_Result_3 : Bare_Lkt_Node;
New_Struct_7 : Internal_Env_Assoc := No_Env_Assoc;
Array_Lit_1 : Internal_Env_Assoc_Array_Access;
Fld_2 : Symbol_Type;
New_Struct_8 : Internal_Designated_Env := No_Designated_Env;
Cast_Expr_4 : Bare_Decl;
Cast_Result_4 : Bare_Lkt_Node;
New_Struct_9 : Internal_Env_Assoc := No_Env_Assoc;
Array_Lit_2 : Internal_Env_Assoc_Array_Access;
Fld_3 : Internal_Entity_Full_Decl;
Sym_2 : Symbol_Type;
Fld_4 : Boolean;
Scope_Result : Boolean;
Result_Var : Boolean;
Fld_5 : Symbol_Type;
Sym_3 : Symbol_Type;
Is_Equal : Boolean;
Not_Val : Boolean;
If_Result : Boolean;
If_Result_1 : Internal_Env_Assoc_Array_Access;
Fld_6 : Internal_Entity_Full_Decl;
Sym_4 : Symbol_Type;
Fld_7 : Boolean;
Scope_Result_1 : Boolean;
Result_Var_1 : Boolean;
Fld_8 : Boolean;
If_Result_2 : Boolean;
Fld_9 : Symbol_Type;
Sym_5 : Symbol_Type;
Is_Equal_1 : Boolean;
Not_Val_1 : Boolean;
If_Result_3 : Boolean;
If_Result_4 : Internal_Env_Assoc_Array_Access;

            procedure Finalizer_Scope_376 is
            begin
                     Dec_Ref (New_Struct);
                     Dec_Ref (New_Struct_1);
                     Dec_Ref (New_Struct_2);
                     Dec_Ref (New_Struct_3);
                     Dec_Ref (Array_Lit);
                     Dec_Ref (New_Struct_4);
                     Dec_Ref (New_Struct_5);
                     Dec_Ref (New_Struct_6);
                     Dec_Ref (New_Struct_7);
                     Dec_Ref (Array_Lit_1);
                     Dec_Ref (New_Struct_8);
                     Dec_Ref (New_Struct_9);
                     Dec_Ref (Array_Lit_2);
                     Dec_Ref (If_Result_1);
                     Dec_Ref (If_Result_4);
            end Finalizer_Scope_376;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 569 '<If at nodes.lkt:964:13>' If_Result_4 nodes.lkt:964



--# expr-start 541 '<BooleanBinaryOp And at nodes.lkt:965:17>' If_Result_3 nodes.lkt:965



--# expr-start 536 '<BooleanBinaryOp Or at nodes.lkt:966:21>' If_Result_2 nodes.lkt:966






--# expr-start 532 '<FieldAccess for full_decl at nodes.lkt:966:21>' Fld_6 nodes.lkt:966







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start Decl.full_decl
Fld_6 := Liblktlang.Implementation.Decl_P_Full_Decl (Node => Ent.Node, E_Info => Ent.Info);
--# end
--# expr-done 532
Var_Expr_22 := Fld_6;





if Var_Expr_22 /= No_Entity_Full_Decl then
   



   --# scope-start


   

--# expr-start 534 '<FieldAccess for has_annotation at nodes.lkt:966:21>' Fld_7 nodes.lkt:966







   if Var_Expr_22.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# expr-start 533 '<Symbol root_node at nodes.lkt:966:54>' Sym_4 nodes.lkt:966
Sym_4 := Precomputed_Symbol (Precomputed_Symbol_Table (Self.Unit.Context.Symbols), Precomputed_Sym_Root_Node); 
--# expr-done 533
--# property-call-start FullDecl.has_annotation
Fld_7 := Liblktlang.Implementation.Full_Decl_P_Has_Annotation (Node => Var_Expr_22.Node, Name => Sym_4);
--# end
--# expr-done 534
Scope_Result_1 := Fld_7;


   --# end


   Result_Var_1 := Scope_Result_1;
else
   
   Result_Var_1 := False;
end if;



if Result_Var_1 then
   
   If_Result_2 := True;
else
   --# expr-start 535 '<FieldAccess for implements_node at nodes.lkt:967:24>' Fld_8 nodes.lkt:967







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start Decl.implements_node
Fld_8 := Liblktlang.Implementation.Decl_P_Implements_Node (Node => Ent.Node, E_Info => Ent.Info);
--# end
--# expr-done 535
   If_Result_2 := Fld_8;
end if;



--# expr-done 536
if If_Result_2 then
   --# expr-start 540 '<Not at nodes.lkt:969:21>' Not_Val_1 nodes.lkt:969
--# expr-start 539 '<Eq at nodes.lkt:969:21>' Is_Equal_1 nodes.lkt:969
--# expr-start 537 '<FieldAccess for name at nodes.lkt:969:21>' Fld_9 nodes.lkt:969







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]Decl.name'
Fld_9 := Liblktlang.Implementation.Dispatcher_Decl_P_Name (Node => Ent.Node);
--# end
--# expr-done 537
--# expr-start 538 '<Symbol RootNode__ at nodes.lkt:969:36>' Sym_5 nodes.lkt:969
Sym_5 := Precomputed_Symbol (Precomputed_Symbol_Table (Self.Unit.Context.Symbols), Precomputed_Sym_Rootnode); 
--# expr-done 538
Is_Equal_1 := Fld_9 = Sym_5; 
--# expr-done 539
Not_Val_1 := not (Is_Equal_1); 
--# expr-done 540
   If_Result_3 := Not_Val_1;
else
   
   If_Result_3 := False;
end if;



--# expr-done 541
if If_Result_3 then
   --# expr-start 548 '<ArrayLiteral at nodes.lkt:971:17>' Array_Lit nodes.lkt:971
--# expr-start 544 '<New EnvAssoc at nodes.lkt:972:21>' New_Struct_1 nodes.lkt:972
--# expr-start 542 '<New DesignatedEnv at nodes.lkt:975:34>' New_Struct nodes.lkt:975



Inc_Ref (Empty_Env);
New_Struct := (Direct_Env => Empty_Env, Env_Name => No_Symbol, Kind => Current_Env); 
--# expr-done 542
--# expr-start 543 '<Symbol RootNode__ at nodes.lkt:973:29>' Sym nodes.lkt:973
Sym := Precomputed_Symbol (Precomputed_Symbol_Table (Self.Unit.Context.Symbols), Precomputed_Sym_Rootnode); 
--# expr-done 543







Cast_Expr := Self; 



   
      Cast_Result := Cast_Expr;


Inc_Ref (New_Struct);
New_Struct_1 := (Dest_Env => New_Struct, Key => Sym, Metadata => No_Metadata, Value => Cast_Result); 
--# expr-done 544
--# expr-start 547 '<New EnvAssoc at nodes.lkt:982:21>' New_Struct_3 nodes.lkt:982
--# expr-start 545 '<New DesignatedEnv at nodes.lkt:985:34>' New_Struct_2 nodes.lkt:985



Inc_Ref (Empty_Env);
New_Struct_2 := (Direct_Env => Empty_Env, Env_Name => No_Symbol, Kind => Current_Env); 
--# expr-done 545
--# expr-start 546 '<FieldAccess for name at nodes.lkt:983:29>' Fld nodes.lkt:983







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]Decl.name'
Fld := Liblktlang.Implementation.Dispatcher_Decl_P_Name (Node => Ent.Node);
--# end
--# expr-done 546







Cast_Expr_1 := Self; 



   
      Cast_Result_1 := Cast_Expr_1;


Inc_Ref (New_Struct_2);
New_Struct_3 := (Dest_Env => New_Struct_2, Key => Fld, Metadata => No_Metadata, Value => Cast_Result_1); 
--# expr-done 547
Array_Lit := Create_Internal_Env_Assoc_Array (Internal_Internal_Env_Assoc_Array'(1 => New_Struct_1, 2 => New_Struct_3)); 
--# expr-done 548
   If_Result_4 := Array_Lit;
else
   --# expr-start 568 '<If at nodes.lkt:964:13>' If_Result_1 nodes.lkt:964



--# expr-start 556 '<BooleanBinaryOp And at nodes.lkt:994:17>' If_Result nodes.lkt:994






--# expr-start 549 '<FieldAccess for full_decl at nodes.lkt:994:17>' Fld_3 nodes.lkt:994







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start Decl.full_decl
Fld_3 := Liblktlang.Implementation.Decl_P_Full_Decl (Node => Ent.Node, E_Info => Ent.Info);
--# end
--# expr-done 549
Var_Expr_23 := Fld_3;





if Var_Expr_23 /= No_Entity_Full_Decl then
   



   --# scope-start


   

--# expr-start 551 '<FieldAccess for has_annotation at nodes.lkt:994:17>' Fld_4 nodes.lkt:994







   if Var_Expr_23.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# expr-start 550 '<Symbol metadata at nodes.lkt:994:50>' Sym_2 nodes.lkt:994
Sym_2 := Precomputed_Symbol (Precomputed_Symbol_Table (Self.Unit.Context.Symbols), Precomputed_Sym_Metadata_44); 
--# expr-done 550
--# property-call-start FullDecl.has_annotation
Fld_4 := Liblktlang.Implementation.Full_Decl_P_Has_Annotation (Node => Var_Expr_23.Node, Name => Sym_2);
--# end
--# expr-done 551
Scope_Result := Fld_4;


   --# end


   Result_Var := Scope_Result;
else
   
   Result_Var := False;
end if;



if Result_Var then
   --# expr-start 555 '<Not at nodes.lkt:995:21>' Not_Val nodes.lkt:995
--# expr-start 554 '<Eq at nodes.lkt:995:21>' Is_Equal nodes.lkt:995
--# expr-start 552 '<FieldAccess for name at nodes.lkt:995:21>' Fld_5 nodes.lkt:995







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]Decl.name'
Fld_5 := Liblktlang.Implementation.Dispatcher_Decl_P_Name (Node => Ent.Node);
--# end
--# expr-done 552
--# expr-start 553 '<Symbol Metadata at nodes.lkt:995:36>' Sym_3 nodes.lkt:995
Sym_3 := Precomputed_Symbol (Precomputed_Symbol_Table (Self.Unit.Context.Symbols), Precomputed_Sym_Metadata); 
--# expr-done 553
Is_Equal := Fld_5 = Sym_3; 
--# expr-done 554
Not_Val := not (Is_Equal); 
--# expr-done 555
   If_Result := Not_Val;
else
   
   If_Result := False;
end if;



--# expr-done 556
if If_Result then
   --# expr-start 563 '<ArrayLiteral at nodes.lkt:997:17>' Array_Lit_1 nodes.lkt:997
--# expr-start 559 '<New EnvAssoc at nodes.lkt:998:21>' New_Struct_5 nodes.lkt:998
--# expr-start 557 '<New DesignatedEnv at nodes.lkt:1001:34>' New_Struct_4 nodes.lkt:1001



Inc_Ref (Empty_Env);
New_Struct_4 := (Direct_Env => Empty_Env, Env_Name => No_Symbol, Kind => Current_Env); 
--# expr-done 557
--# expr-start 558 '<Symbol Metadata at nodes.lkt:999:29>' Sym_1 nodes.lkt:999
Sym_1 := Precomputed_Symbol (Precomputed_Symbol_Table (Self.Unit.Context.Symbols), Precomputed_Sym_Metadata); 
--# expr-done 558







Cast_Expr_2 := Self; 



   
      Cast_Result_2 := Cast_Expr_2;


Inc_Ref (New_Struct_4);
New_Struct_5 := (Dest_Env => New_Struct_4, Key => Sym_1, Metadata => No_Metadata, Value => Cast_Result_2); 
--# expr-done 559
--# expr-start 562 '<New EnvAssoc at nodes.lkt:1008:21>' New_Struct_7 nodes.lkt:1008
--# expr-start 560 '<New DesignatedEnv at nodes.lkt:1011:34>' New_Struct_6 nodes.lkt:1011



Inc_Ref (Empty_Env);
New_Struct_6 := (Direct_Env => Empty_Env, Env_Name => No_Symbol, Kind => Current_Env); 
--# expr-done 560
--# expr-start 561 '<FieldAccess for name at nodes.lkt:1009:29>' Fld_1 nodes.lkt:1009







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]Decl.name'
Fld_1 := Liblktlang.Implementation.Dispatcher_Decl_P_Name (Node => Ent.Node);
--# end
--# expr-done 561







Cast_Expr_3 := Self; 



   
      Cast_Result_3 := Cast_Expr_3;


Inc_Ref (New_Struct_6);
New_Struct_7 := (Dest_Env => New_Struct_6, Key => Fld_1, Metadata => No_Metadata, Value => Cast_Result_3); 
--# expr-done 562
Array_Lit_1 := Create_Internal_Env_Assoc_Array (Internal_Internal_Env_Assoc_Array'(1 => New_Struct_5, 2 => New_Struct_7)); 
--# expr-done 563
   If_Result_1 := Array_Lit_1;
else
   --# expr-start 567 '<ArrayLiteral at nodes.lkt:1020:17>' Array_Lit_2 nodes.lkt:1020
--# expr-start 566 '<New EnvAssoc at nodes.lkt:1021:21>' New_Struct_9 nodes.lkt:1021
--# expr-start 564 '<New DesignatedEnv at nodes.lkt:1024:34>' New_Struct_8 nodes.lkt:1024



Inc_Ref (Empty_Env);
New_Struct_8 := (Direct_Env => Empty_Env, Env_Name => No_Symbol, Kind => Current_Env); 
--# expr-done 564
--# expr-start 565 '<FieldAccess for name at nodes.lkt:1022:29>' Fld_2 nodes.lkt:1022







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]Decl.name'
Fld_2 := Liblktlang.Implementation.Dispatcher_Decl_P_Name (Node => Ent.Node);
--# end
--# expr-done 565







Cast_Expr_4 := Self; 



   
      Cast_Result_4 := Cast_Expr_4;


Inc_Ref (New_Struct_8);
New_Struct_9 := (Dest_Env => New_Struct_8, Key => Fld_2, Metadata => No_Metadata, Value => Cast_Result_4); 
--# expr-done 566
Array_Lit_2 := Create_Internal_Env_Assoc_Array (Internal_Internal_Env_Assoc_Array'(1 => New_Struct_9)); 
--# expr-done 567
   If_Result_1 := Array_Lit_2;
end if;

      Inc_Ref (If_Result_1);


--# expr-done 568
   If_Result_4 := If_Result_1;
end if;

      Inc_Ref (If_Result_4);


--# expr-done 569

         Property_Result := If_Result_4;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_376;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_376;




            raise;
      end;



   return Property_Result;
end Env_Mappings_0;
--# end

   







--# property-start Decl.name nodes.lkt:917
pragma Warnings (Off, "is not referenced");
 function Decl_P_Name
  
  (Node : Bare_Decl
  )

   return Symbol_Type
is
   Self : Bare_Decl  := Bare_Decl (Node);
      --# bind self Self

   


   Property_Result : Symbol_Type;

      

      Var_Expr_21 : Bare_Def_Id;
Fld : Bare_Def_Id;
Sym : Symbol_Type;
Scope_Result : Symbol_Type;
Result_Var : Symbol_Type;



begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         


--# expr-start 570 '<FieldAccess for syn_name at nodes.lkt:917:26>' Fld nodes.lkt:917







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Implementation.Decl_F_Syn_Name (Self);
--# expr-done 570
Var_Expr_21 := Fld;





if Var_Expr_21 /= No_Bare_Lkt_Node then
   



   --# scope-start


   

--# expr-start 571 '<GetSymbol at nodes.lkt:917:26>' Sym nodes.lkt:917

Sym := Get_Symbol (Var_Expr_21); 
--# expr-done 571
Scope_Result := Sym;


   --# end


   Result_Var := Scope_Result;
else
   
   Result_Var := No_Symbol;
end if;




         Property_Result := Result_Var;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Decl_P_Name;
--# end

   







--# property-start Decl.full_name nodes.lkt:922
pragma Warnings (Off, "is not referenced");
 function Decl_P_Full_Name
  
  (Node : Bare_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return String_Type
is
   Self : Bare_Decl  := Bare_Decl (Node);
     Ent : Internal_Entity_Decl :=
       Internal_Entity_Decl'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : String_Type;

      
            procedure Finalizer_Scope_104 with Inline_Always;
            procedure Finalizer_Scope_513 with Inline_Always;
            procedure Finalizer_Scope_515 with Inline_Always;

      Var_Expr_0 : Internal_Entity_Generic_Decl;
Fld : Symbol_Type;
Fld_1 : String_Type;
Fld_2 : Internal_Entity;
Cast_Result : Internal_Entity_Generic_Decl;
Str : String_Type;
Str_1 : String_Type;
Fld_3 : Internal_Entity_Generic_Formal_Type_Decl_Array_Access;
Fld_4 : Internal_Entity_Decl;
Fld_5 : Lexical_Env := Empty_Env;
Fld_6 : Symbol_Type;
Env_Get_Result : Internal_Entity;
Cast_Result_1 : Internal_Entity_Decl;
Fld_7 : String_Type;
Map_Result : String_Type_Array_Access;
Join_Result : String_Type;
Concat_Result : String_Type;
Str_2 : String_Type;
Concat_Result_1 : String_Type;
Scope_Result : String_Type;
Result_Var : String_Type;
Concat_Result_2 : String_Type;

            procedure Finalizer_Scope_104 is
            begin
                     Dec_Ref (Fld_1);
                     Dec_Ref (Scope_Result);
                     Dec_Ref (Result_Var);
                     Dec_Ref (Concat_Result_2);
            end Finalizer_Scope_104;
            procedure Finalizer_Scope_513 is
            begin
                     Dec_Ref (Str);
                     Dec_Ref (Str_1);
                     Dec_Ref (Fld_3);
                     Dec_Ref (Map_Result);
                     Dec_Ref (Join_Result);
                     Dec_Ref (Concat_Result);
                     Dec_Ref (Str_2);
                     Dec_Ref (Concat_Result_1);
            end Finalizer_Scope_513;
            procedure Finalizer_Scope_515 is
            begin
                     Dec_Ref (Fld_5);
                     Dec_Ref (Fld_7);
            end Finalizer_Scope_515;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 573 '<FieldAccess for image at nodes.lkt:923:9>' Fld_1 nodes.lkt:923



--# expr-start 572 '<FieldAccess for name at nodes.lkt:923:9>' Fld nodes.lkt:923







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]Decl.name'
Fld := Liblktlang.Implementation.Dispatcher_Decl_P_Name (Node => Ent.Node);
--# end
--# expr-done 572





Fld_1 := Liblktlang.Implementation.Image (Self => Fld);
--# expr-done 573



--# expr-start 575 '<Cast to GenericDecl at nodes.lkt:924:11>' Cast_Result nodes.lkt:924





--# expr-start 574 '<parent at nodes.lkt:924:11>' Fld_2 nodes.lkt:924







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_2 := Liblktlang.Implementation.Parent (Node => Ent.Node, E_Info => Ent.Info);
--# expr-done 574



   if Fld_2.Node = null
      or else Fld_2.Node.Kind in Lkt_Generic_Decl_Range
   then
      
      Cast_Result := Create_Internal_Entity_Generic_Decl
        (Node => Fld_2.Node,
         Info => Fld_2.Info);

   else
         Cast_Result := No_Entity_Generic_Decl;
   end if;


--# expr-done 575
Var_Expr_0 := Cast_Result;





if Var_Expr_0 /= No_Entity_Generic_Decl then
   



   --# scope-start


   --# bind gd Var_Expr_0

--# expr-start 576 '<String at nodes.lkt:926:13>' Str nodes.lkt:926
Str := Create_String ("["); 
--# expr-done 576
--# expr-start 586 '<Join at nodes.lkt:927:15>' Join_Result nodes.lkt:927
--# expr-start 577 '<String at nodes.lkt:927:15>' Str_1 nodes.lkt:927
Str_1 := Create_String (", "); 
--# expr-done 577
--# expr-start 585 '<Map at nodes.lkt:928:17>' Map_Result nodes.lkt:928








   

   --# expr-start 578 '<FieldAccess for generic_formals at nodes.lkt:928:17>' Fld_3 nodes.lkt:928







   if Var_Expr_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start GenericDecl.generic_formals
Fld_3 := Liblktlang.Implementation.Generic_Decl_P_Generic_Formals (Node => Var_Expr_0.Node, E_Info => Var_Expr_0.Info);
--# end
--# expr-done 578

   
      declare
         Map_Result_Vec : String_Type_Vectors.Vector;
      begin
   

   

      

      declare
         
         Collection : constant Internal_Entity_Generic_Formal_Type_Decl_Array_Access := Fld_3;
      begin
         for Item_1 of
               Collection.Items
         loop

            
   --# scope-start


               --# bind gf Item_1

            
         
         
      --# expr-start 584 '<FieldAccess for full_name at nodes.lkt:930:21>' Fld_7 nodes.lkt:930



--# expr-start 583 '<Cast to Decl at nodes.lkt:930:21>' Cast_Result_1 nodes.lkt:930





--# expr-start 582 '<EnvGet at nodes.lkt:930:21>' Env_Get_Result nodes.lkt:930
--# expr-start 580 '<FieldAccess for node_env at nodes.lkt:930:21>' Fld_5 nodes.lkt:930



--# expr-start 579 '<FieldAccess for decl at nodes.lkt:930:21>' Fld_4 nodes.lkt:930







   if Var_Expr_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_4 := Create_Internal_Entity_Decl (Node => Var_Expr_0.Node.Generic_Decl_F_Decl, Info => Var_Expr_0.Info);
--# expr-done 579



   if Fld_4.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_5 := Liblktlang.Implementation.Node_Env (Node => Fld_4.Node, E_Info => Fld_4.Info);
--# expr-done 580
--# expr-start 581 '<FieldAccess for name at nodes.lkt:930:48>' Fld_6 nodes.lkt:930







   if Item_1.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]Decl.name'
Fld_6 := Liblktlang.Implementation.Dispatcher_Decl_P_Name (Node => Item_1.Node);
--# end
--# expr-done 581


Env_Get_Result := AST_Envs.Get_First (Self => Fld_5, Key => Thin (Fld_6), Lookup_Kind => To_Lookup_Kind_Type (Recursive), Categories => (Nocat => True)); 
--# expr-done 582



   if Env_Get_Result.Node = null
      or else Env_Get_Result.Node.Kind in Lkt_Decl
   then
      
      Cast_Result_1 := Create_Internal_Entity_Decl
        (Node => Env_Get_Result.Node,
         Info => Env_Get_Result.Info);

   else
         Cast_Result_1 := No_Entity_Decl;
   end if;


--# expr-done 583



   if Cast_Result_1.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]Decl.full_name'
Fld_7 := Liblktlang.Implementation.Dispatcher_Decl_P_Full_Name (Node => Cast_Result_1.Node, E_Info => Cast_Result_1.Info);
--# end
--# expr-done 584
      

         declare
            Item_To_Append : constant String_Type := Fld_7;
         begin
               Inc_Ref (Item_To_Append);
            String_Type_Vectors.Append (Map_Result_Vec, Item_To_Append);
         end;
   
   
   

            
   --# end
      Finalizer_Scope_515;



         end loop;
      end;
   

   

         Map_Result := Create_String_Type_Array
           (Items_Count => Natural (String_Type_Vectors.Length (Map_Result_Vec)));
         for I in Map_Result.Items'Range loop
            Map_Result.Items (I) := String_Type_Vectors.Get
              (Map_Result_Vec,
               I + String_Type_Vectors.Index_Type'First - Map_Result.Items'First);
         end loop;
         String_Type_Vectors.Destroy (Map_Result_Vec);

      end;
   



--# expr-done 585
Join_Result := Join_Strings (Str_1, Map_Result); 
--# expr-done 586
Concat_Result := Concat_String (Str, Join_Result); 
--# expr-start 587 '<String at nodes.lkt:933:15>' Str_2 nodes.lkt:933
Str_2 := Create_String ("]"); 
--# expr-done 587
Concat_Result_1 := Concat_String (Concat_Result, Str_2); 
Scope_Result := Concat_Result_1;
   Inc_Ref (Scope_Result);


   --# end
      Finalizer_Scope_513;


   Result_Var := Scope_Result;
else
   
   Result_Var := Empty_String;
end if;

      Inc_Ref (Result_Var);


Concat_Result_2 := Concat_String (Fld_1, Result_Var); 

         Property_Result := Concat_Result_2;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_104;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_104;
                     Finalizer_Scope_513;
                     Finalizer_Scope_515;




            raise;
      end;



   return Property_Result;
end Decl_P_Full_Name;
--# end

   







--# property-start Decl.defined_scope nodes.lkt:939
pragma Warnings (Off, "is not referenced");
 function Decl_P_Defined_Scope
  
  (Node : Bare_Decl
      ; Origin : Internal_Entity
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Lexical_Env
is
   Self : Bare_Decl  := Bare_Decl (Node);
      --# bind self Self

   

   --# bind origin Origin

   Property_Result : Lexical_Env;

      

      



begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         

         Property_Result := Empty_Env;
            Inc_Ref (Property_Result);
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Decl_P_Defined_Scope;
--# end

   







--# property-start Decl.defined_scope_as_entity nodes.lkt:957
pragma Warnings (Off, "is not referenced");
 function Decl_P_Defined_Scope_As_Entity
  
  (Node : Bare_Decl
      ; Origin : Internal_Entity
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Lexical_Env
is
   Self : Bare_Decl  := Bare_Decl (Node);
     Ent : Internal_Entity_Decl :=
       Internal_Entity_Decl'(Node => Self, Info => E_Info);
      --# bind entity Ent

   

   --# bind origin Origin

   Property_Result : Lexical_Env;

      
            procedure Finalizer_Scope_106 with Inline_Always;

      Fld : Lexical_Env := Empty_Env;

            procedure Finalizer_Scope_106 is
            begin
                     Dec_Ref (Fld);
            end Finalizer_Scope_106;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 588 '<FieldAccess for defined_scope at nodes.lkt:957:49>' Fld nodes.lkt:957







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]Decl.defined_scope'
Fld := Liblktlang.Implementation.Dispatcher_Decl_P_Defined_Scope (Node => Ent.Node, Origin => Origin, E_Info => Ent.Info);
--# end
--# expr-done 588

         Property_Result := Fld;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_106;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_106;




            raise;
      end;



   return Property_Result;
end Decl_P_Defined_Scope_As_Entity;
--# end



   


      

   --
   --  Primitives for Bare_Base_Grammar_Rule_Decl
   --

   




      
   function Base_Grammar_Rule_Decl_F_Expr
     (Node : Bare_Base_Grammar_Rule_Decl) return Bare_Grammar_Expr
   is
      

         Kind : constant Lkt_Base_Grammar_Rule_Decl := Node.Kind;
   begin
         case Kind is
               when Lkt_Grammar_Rule_Decl =>
                     
         return Node.Grammar_Rule_Decl_F_Expr;
      
               when Lkt_Synthetic_Lexer_Decl =>
                     return No_Bare_Lkt_Node;
         end case;
   end;




   


      

   --
   --  Primitives for Bare_Grammar_Rule_Decl
   --

   



      
      procedure Initialize_Fields_For_Grammar_Rule_Decl
        (Self : Bare_Grammar_Rule_Decl
         ; Grammar_Rule_Decl_F_Syn_Name : Bare_Def_Id
         ; Grammar_Rule_Decl_F_Expr : Bare_Grammar_Expr
        ) is
      begin

            Self.Grammar_Rule_Decl_F_Syn_Name := Grammar_Rule_Decl_F_Syn_Name;
            Self.Grammar_Rule_Decl_F_Expr := Grammar_Rule_Decl_F_Expr;
         

      end Initialize_Fields_For_Grammar_Rule_Decl;


   







--# property-start GrammarRuleDecl.decl_type_name nodes.lkt:1052
pragma Warnings (Off, "is not referenced");
 function Grammar_Rule_Decl_P_Decl_Type_Name
  
  (Node : Bare_Grammar_Rule_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return String_Type
is
   Self : Bare_Grammar_Rule_Decl  := Bare_Grammar_Rule_Decl (Node);
      --# bind self Self

   


   Property_Result : String_Type;

      
            procedure Finalizer_Scope_107 with Inline_Always;

      Str : String_Type;

            procedure Finalizer_Scope_107 is
            begin
                     Dec_Ref (Str);
            end Finalizer_Scope_107;


begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         --# expr-start 589 '<String at nodes.lkt:1052:36>' Str nodes.lkt:1052
Str := Create_String ("grammar rule declaration"); 
--# expr-done 589

         Property_Result := Str;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_107;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_107;




            raise;
      end;



   return Property_Result;
end Grammar_Rule_Decl_P_Decl_Type_Name;
--# end



   


      

   --
   --  Primitives for Bare_Synthetic_Lexer_Decl
   --

   



      
      procedure Initialize_Fields_For_Synthetic_Lexer_Decl
        (Self : Bare_Synthetic_Lexer_Decl
        ) is
      begin

         
      Self.Synthetic_Lexer_Decl_Sym := No_Symbol;

      end Initialize_Fields_For_Synthetic_Lexer_Decl;


   







--# property-start SyntheticLexerDecl.name nodes.lkt:1066
pragma Warnings (Off, "is not referenced");
 function Synthetic_Lexer_Decl_P_Name
  
  (Node : Bare_Synthetic_Lexer_Decl
  )

   return Symbol_Type
is
   Self : Bare_Synthetic_Lexer_Decl  := Bare_Synthetic_Lexer_Decl (Node);
      --# bind self Self

   


   Property_Result : Symbol_Type;

      

      Fld : Symbol_Type;



begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         --# expr-start 590 '<FieldAccess for sym at nodes.lkt:1066:26>' Fld nodes.lkt:1066







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Self.Synthetic_Lexer_Decl_Sym;
--# expr-done 590

         Property_Result := Fld;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Synthetic_Lexer_Decl_P_Name;
--# end

   







--# property-start SyntheticLexerDecl.decl_type_name nodes.lkt:1068
pragma Warnings (Off, "is not referenced");
 function Synthetic_Lexer_Decl_P_Decl_Type_Name
  
  (Node : Bare_Synthetic_Lexer_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return String_Type
is
   Self : Bare_Synthetic_Lexer_Decl  := Bare_Synthetic_Lexer_Decl (Node);
      --# bind self Self

   


   Property_Result : String_Type;

      
            procedure Finalizer_Scope_109 with Inline_Always;

      Str : String_Type;

            procedure Finalizer_Scope_109 is
            begin
                     Dec_Ref (Str);
            end Finalizer_Scope_109;


begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         --# expr-start 591 '<String at nodes.lkt:1068:36>' Str nodes.lkt:1068
Str := Create_String ("synthetic lexer declaration"); 
--# expr-done 591

         Property_Result := Str;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_109;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_109;




            raise;
      end;



   return Property_Result;
end Synthetic_Lexer_Decl_P_Decl_Type_Name;
--# end



   


      

   --
   --  Primitives for Bare_Base_Val_Decl
   --

   





   







--# property-start BaseValDecl.defined_scope nodes.lkt:1076
pragma Warnings (Off, "is not referenced");
 function Base_Val_Decl_P_Defined_Scope
  
  (Node : Bare_Base_Val_Decl
      ; Origin : Internal_Entity
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Lexical_Env
is
   Self : Bare_Base_Val_Decl  := Bare_Base_Val_Decl (Node);
     Ent : Internal_Entity_Base_Val_Decl :=
       Internal_Entity_Base_Val_Decl'(Node => Self, Info => E_Info);
      --# bind entity Ent

   

   --# bind origin Origin

   Property_Result : Lexical_Env;

      
            procedure Finalizer_Scope_110 with Inline_Always;
            procedure Finalizer_Scope_518 with Inline_Always;

      Var_Expr_0 : Internal_Entity_Type_Decl;
Fld : Internal_Entity_Type_Decl;
Cast_Expr : Internal_Entity_Type_Decl;
Cast_Result : Internal_Entity;
Bound_Origin : Internal_Entity;
Fld_1 : Lexical_Env := Empty_Env;
Dyn_Var_Bind_Result : Lexical_Env := Empty_Env;
Scope_Result : Lexical_Env := Empty_Env;
Result_Var : Lexical_Env := Empty_Env;

            procedure Finalizer_Scope_110 is
            begin
                     Dec_Ref (Scope_Result);
                     Dec_Ref (Result_Var);
            end Finalizer_Scope_110;
            procedure Finalizer_Scope_518 is
            begin
                     Dec_Ref (Fld_1);
                     Dec_Ref (Dyn_Var_Bind_Result);
            end Finalizer_Scope_518;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         


--# expr-start 592 '<FieldAccess for get_type at nodes.lkt:1077:9>' Fld nodes.lkt:1077







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start Decl.get_type
Fld := Liblktlang.Implementation.Decl_P_Get_Type (Node => Ent.Node, E_Info => Ent.Info);
--# end
--# expr-done 592
Var_Expr_0 := Fld;





if Var_Expr_0 /= No_Entity_Type_Decl then
   



   --# scope-start


   --# bind t Var_Expr_0

--# expr-start 594 '<bind at nodes.lkt:1079:17>' Dyn_Var_Bind_Result nodes.lkt:1079






Cast_Expr := Var_Expr_0; 



   
      Cast_Result := Create_Internal_Entity
        (Node => Cast_Expr.Node,
         Info => Cast_Expr.Info);


Bound_Origin := Cast_Result; 
--# expr-start 593 '<FieldAccess for defined_scope at nodes.lkt:1081:17>' Fld_1 nodes.lkt:1081







   if Var_Expr_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]Decl.defined_scope'
Fld_1 := Liblktlang.Implementation.Dispatcher_Decl_P_Defined_Scope (Node => Var_Expr_0.Node, Origin => Bound_Origin, E_Info => Var_Expr_0.Info);
--# end
--# expr-done 593
Dyn_Var_Bind_Result := Fld_1; Inc_Ref (Dyn_Var_Bind_Result);
--# expr-done 594
Scope_Result := Dyn_Var_Bind_Result;
   Inc_Ref (Scope_Result);


   --# end
      Finalizer_Scope_518;


   Result_Var := Scope_Result;
else
   
   Result_Var := Empty_Env;
end if;

      Inc_Ref (Result_Var);



         Property_Result := Result_Var;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_110;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_110;
                     Finalizer_Scope_518;




            raise;
      end;



   return Property_Result;
end Base_Val_Decl_P_Defined_Scope;
--# end



   


      

   --
   --  Primitives for Bare_Node_Decl
   --

   





   







--# property-start NodeDecl.name nodes.lkt:1094
pragma Warnings (Off, "is not referenced");
 function Node_Decl_P_Name
  
  (Node : Bare_Node_Decl
  )

   return Symbol_Type
is
   Self : Bare_Node_Decl  := Bare_Node_Decl (Node);
      --# bind self Self

   


   Property_Result : Symbol_Type;

      

      Sym : Symbol_Type;



begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         --# expr-start 595 '<Symbol node at nodes.lkt:1094:26>' Sym nodes.lkt:1094
Sym := Precomputed_Symbol (Precomputed_Symbol_Table (Self.Unit.Context.Symbols), Precomputed_Sym_Node_47); 
--# expr-done 595

         Property_Result := Sym;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Node_Decl_P_Name;
--# end

   







--# property-start NodeDecl.decl_type_name nodes.lkt:1096
pragma Warnings (Off, "is not referenced");
 function Node_Decl_P_Decl_Type_Name
  
  (Node : Bare_Node_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return String_Type
is
   Self : Bare_Node_Decl  := Bare_Node_Decl (Node);
      --# bind self Self

   


   Property_Result : String_Type;

      
            procedure Finalizer_Scope_112 with Inline_Always;

      Str : String_Type;

            procedure Finalizer_Scope_112 is
            begin
                     Dec_Ref (Str);
            end Finalizer_Scope_112;


begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         --# expr-start 596 '<String at nodes.lkt:1096:36>' Str nodes.lkt:1096
Str := Create_String ("node declaration"); 
--# expr-done 596

         Property_Result := Str;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_112;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_112;




            raise;
      end;



   return Property_Result;
end Node_Decl_P_Decl_Type_Name;
--# end

   







--# property-start NodeDecl.owning_type nodes.lkt:1098
pragma Warnings (Off, "is not referenced");
 function Node_Decl_P_Owning_Type
  
  (Node : Bare_Node_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Internal_Entity_Type_Decl
is
   Self : Bare_Node_Decl  := Bare_Node_Decl (Node);
     Ent : Internal_Entity_Node_Decl :=
       Internal_Entity_Node_Decl'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Internal_Entity_Type_Decl;

      
            procedure Finalizer_Scope_113 with Inline_Always;

      Fld : Internal_Entity_Array_Access;
Is_A : Boolean;
Find_Result : Internal_Entity;
Cast_Result : Internal_Entity_Type_Decl;

            procedure Finalizer_Scope_113 is
            begin
                     Dec_Ref (Fld);
            end Finalizer_Scope_113;


begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         --# expr-start 600 '<Cast to TypeDecl at nodes.lkt:1099:9>' Cast_Result nodes.lkt:1099





--# expr-start 599 '<Find at nodes.lkt:1099:9>' Find_Result nodes.lkt:1099








   

   --# expr-start 597 '<FieldAccess for parents at nodes.lkt:1099:9>' Fld nodes.lkt:1099







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;



Fld := Liblktlang.Implementation.Parents (Node => Ent.Node, With_Self => True, E_Info => Ent.Info);
--# expr-done 597

   
      Find_Result := No_Entity;
   

   

      

      declare
         
         Collection : constant Internal_Entity_Array_Access := Fld;
      begin
         for Item_0 of
               Collection.Items
         loop

            
   --# scope-start


               --# bind t Item_0

            
      --# expr-start 598 '<IsA TypeDecl at nodes.lkt:1099:36>' Is_A nodes.lkt:1099

Is_A := Item_0.Node /= null 
and then Item_0.Node.Kind in Lkt_Type_Decl; 
--# expr-done 598
      if Is_A then
         Find_Result := Item_0; 
      end if;
   

            
   --# end


               exit when Is_A;

         end loop;
      end;
   

   
   



--# expr-done 599



   if Find_Result.Node = null
      or else Find_Result.Node.Kind in Lkt_Type_Decl
   then
      
      Cast_Result := Create_Internal_Entity_Type_Decl
        (Node => Find_Result.Node,
         Info => Find_Result.Info);

   else
         Cast_Result := No_Entity_Type_Decl;
   end if;


--# expr-done 600

         Property_Result := Cast_Result;
         
   --# end
      Finalizer_Scope_113;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_113;




            raise;
      end;



   return Property_Result;
end Node_Decl_P_Owning_Type;
--# end



   


      

   --
   --  Primitives for Bare_Self_Decl
   --

   





   







--# property-start SelfDecl.name nodes.lkt:1110
pragma Warnings (Off, "is not referenced");
 function Self_Decl_P_Name
  
  (Node : Bare_Self_Decl
  )

   return Symbol_Type
is
   Self : Bare_Self_Decl  := Bare_Self_Decl (Node);
      --# bind self Self

   


   Property_Result : Symbol_Type;

      

      Sym : Symbol_Type;



begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         --# expr-start 601 '<Symbol self at nodes.lkt:1110:26>' Sym nodes.lkt:1110
Sym := Precomputed_Symbol (Precomputed_Symbol_Table (Self.Unit.Context.Symbols), Precomputed_Sym_Self); 
--# expr-done 601

         Property_Result := Sym;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Self_Decl_P_Name;
--# end

   







--# property-start SelfDecl.decl_type_name nodes.lkt:1112
pragma Warnings (Off, "is not referenced");
 function Self_Decl_P_Decl_Type_Name
  
  (Node : Bare_Self_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return String_Type
is
   Self : Bare_Self_Decl  := Bare_Self_Decl (Node);
      --# bind self Self

   


   Property_Result : String_Type;

      
            procedure Finalizer_Scope_115 with Inline_Always;

      Str : String_Type;

            procedure Finalizer_Scope_115 is
            begin
                     Dec_Ref (Str);
            end Finalizer_Scope_115;


begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         --# expr-start 602 '<String at nodes.lkt:1112:36>' Str nodes.lkt:1112
Str := Create_String ("self declaration"); 
--# expr-done 602

         Property_Result := Str;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_115;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_115;




            raise;
      end;



   return Property_Result;
end Self_Decl_P_Decl_Type_Name;
--# end

   







--# property-start SelfDecl.owning_type nodes.lkt:1114
pragma Warnings (Off, "is not referenced");
 function Self_Decl_P_Owning_Type
  
  (Node : Bare_Self_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Internal_Entity_Type_Decl
is
   Self : Bare_Self_Decl  := Bare_Self_Decl (Node);
     Ent : Internal_Entity_Self_Decl :=
       Internal_Entity_Self_Decl'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Internal_Entity_Type_Decl;

      
            procedure Finalizer_Scope_116 with Inline_Always;

      Fld : Internal_Entity_Array_Access;
Is_A : Boolean;
Find_Result : Internal_Entity;
Cast_Result : Internal_Entity_Type_Decl;

            procedure Finalizer_Scope_116 is
            begin
                     Dec_Ref (Fld);
            end Finalizer_Scope_116;


begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         --# expr-start 606 '<Cast to TypeDecl at nodes.lkt:1115:9>' Cast_Result nodes.lkt:1115





--# expr-start 605 '<Find at nodes.lkt:1115:9>' Find_Result nodes.lkt:1115








   

   --# expr-start 603 '<FieldAccess for parents at nodes.lkt:1115:9>' Fld nodes.lkt:1115







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;



Fld := Liblktlang.Implementation.Parents (Node => Ent.Node, With_Self => True, E_Info => Ent.Info);
--# expr-done 603

   
      Find_Result := No_Entity;
   

   

      

      declare
         
         Collection : constant Internal_Entity_Array_Access := Fld;
      begin
         for Item_0 of
               Collection.Items
         loop

            
   --# scope-start


               --# bind t Item_0

            
      --# expr-start 604 '<IsA TypeDecl at nodes.lkt:1115:36>' Is_A nodes.lkt:1115

Is_A := Item_0.Node /= null 
and then Item_0.Node.Kind in Lkt_Type_Decl; 
--# expr-done 604
      if Is_A then
         Find_Result := Item_0; 
      end if;
   

            
   --# end


               exit when Is_A;

         end loop;
      end;
   

   
   



--# expr-done 605



   if Find_Result.Node = null
      or else Find_Result.Node.Kind in Lkt_Type_Decl
   then
      
      Cast_Result := Create_Internal_Entity_Type_Decl
        (Node => Find_Result.Node,
         Info => Find_Result.Info);

   else
         Cast_Result := No_Entity_Type_Decl;
   end if;


--# expr-done 606

         Property_Result := Cast_Result;
         
   --# end
      Finalizer_Scope_116;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_116;




            raise;
      end;



   return Property_Result;
end Self_Decl_P_Owning_Type;
--# end



   


      

   --
   --  Primitives for Bare_User_Val_Decl
   --

   





   







--# property-start UserValDecl.xref_entry_point nodes.lkt:1121
pragma Warnings (Off, "is not referenced");
 function User_Val_Decl_P_Xref_Entry_Point
  
  (Node : Bare_User_Val_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Boolean
is
   Self : Bare_User_Val_Decl  := Bare_User_Val_Decl (Node);
      --# bind self Self

   


   Property_Result : Boolean;

      

      



begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         

         Property_Result := True;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end User_Val_Decl_P_Xref_Entry_Point;
--# end



   


      

   --
   --  Primitives for Bare_Enum_Lit_Decl
   --

   



      
      procedure Initialize_Fields_For_Enum_Lit_Decl
        (Self : Bare_Enum_Lit_Decl
         ; Enum_Lit_Decl_F_Syn_Name : Bare_Def_Id
        ) is
      begin

            Self.Enum_Lit_Decl_F_Syn_Name := Enum_Lit_Decl_F_Syn_Name;
         

      end Initialize_Fields_For_Enum_Lit_Decl;


   







--# property-start EnumLitDecl.decl_type_name nodes.lkt:1129
pragma Warnings (Off, "is not referenced");
 function Enum_Lit_Decl_P_Decl_Type_Name
  
  (Node : Bare_Enum_Lit_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return String_Type
is
   Self : Bare_Enum_Lit_Decl  := Bare_Enum_Lit_Decl (Node);
      --# bind self Self

   


   Property_Result : String_Type;

      
            procedure Finalizer_Scope_118 with Inline_Always;

      Str : String_Type;

            procedure Finalizer_Scope_118 is
            begin
                     Dec_Ref (Str);
            end Finalizer_Scope_118;


begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         --# expr-start 607 '<String at nodes.lkt:1129:36>' Str nodes.lkt:1129
Str := Create_String ("enum literal declaration"); 
--# expr-done 607

         Property_Result := Str;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_118;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_118;




            raise;
      end;



   return Property_Result;
end Enum_Lit_Decl_P_Decl_Type_Name;
--# end

   







--# property-start EnumLitDecl.xref_entry_point nodes.lkt:1131
pragma Warnings (Off, "is not referenced");
 function Enum_Lit_Decl_P_Xref_Entry_Point
  
  (Node : Bare_Enum_Lit_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Boolean
is
   Self : Bare_Enum_Lit_Decl  := Bare_Enum_Lit_Decl (Node);
      --# bind self Self

   


   Property_Result : Boolean;

      

      



begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         

         Property_Result := False;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Enum_Lit_Decl_P_Xref_Entry_Point;
--# end

   







--# property-start EnumLitDecl.defined_scope nodes.lkt:1134
pragma Warnings (Off, "is not referenced");
 function Enum_Lit_Decl_P_Defined_Scope
  
  (Node : Bare_Enum_Lit_Decl
      ; Origin : Internal_Entity
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Lexical_Env
is
   Self : Bare_Enum_Lit_Decl  := Bare_Enum_Lit_Decl (Node);
     Ent : Internal_Entity_Enum_Lit_Decl :=
       Internal_Entity_Enum_Lit_Decl'(Node => Self, Info => E_Info);
      --# bind entity Ent

   

   --# bind origin Origin

   Property_Result : Lexical_Env;

      
            procedure Finalizer_Scope_120 with Inline_Always;

      Fld : Internal_Entity_Type_Decl;
Fld_1 : Internal_Entity_Type_Decl;
Fld_2 : Lexical_Env := Empty_Env;

            procedure Finalizer_Scope_120 is
            begin
                     Dec_Ref (Fld_2);
            end Finalizer_Scope_120;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 610 '<FieldAccess for defined_scope at nodes.lkt:1135:9>' Fld_2 nodes.lkt:1135



--# expr-start 609 '<FieldAccess for basic_trait_from_self at nodes.lkt:1135:9>' Fld_1 nodes.lkt:1135



--# expr-start 608 '<FieldAccess for parent_type at nodes.lkt:1135:9>' Fld nodes.lkt:1135







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start EnumLitDecl.parent_type
Fld := Liblktlang.Implementation.Enum_Lit_Decl_P_Parent_Type (Node => Ent.Node, E_Info => Ent.Info);
--# end
--# expr-done 608



   if Fld.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start TypeDecl.basic_trait_from_self
Fld_1 := Liblktlang.Implementation.Type_Decl_P_Basic_Trait_From_Self (Node => Fld.Node, E_Info => Fld.Info);
--# end
--# expr-done 609



   if Fld_1.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]Decl.defined_scope'
Fld_2 := Liblktlang.Implementation.Dispatcher_Decl_P_Defined_Scope (Node => Fld_1.Node, Origin => Origin, E_Info => Fld_1.Info);
--# end
--# expr-done 610

         Property_Result := Fld_2;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_120;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_120;




            raise;
      end;



   return Property_Result;
end Enum_Lit_Decl_P_Defined_Scope;
--# end

   







--# property-start EnumLitDecl.parent_type nodes.lkt:1138
pragma Warnings (Off, "is not referenced");
 function Enum_Lit_Decl_P_Parent_Type
  
  (Node : Bare_Enum_Lit_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Internal_Entity_Type_Decl
is
   Self : Bare_Enum_Lit_Decl  := Bare_Enum_Lit_Decl (Node);
     Ent : Internal_Entity_Enum_Lit_Decl :=
       Internal_Entity_Enum_Lit_Decl'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Internal_Entity_Type_Decl;

      

      Fld : Internal_Entity;
Fld_1 : Internal_Entity;
Cast_Result : Internal_Entity_Type_Decl;



begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         --# expr-start 613 '<Cast to TypeDecl at nodes.lkt:1138:43>' Cast_Result nodes.lkt:1138





--# expr-start 612 '<parent at nodes.lkt:1138:43>' Fld_1 nodes.lkt:1138



--# expr-start 611 '<parent at nodes.lkt:1138:43>' Fld nodes.lkt:1138







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Liblktlang.Implementation.Parent (Node => Ent.Node, E_Info => Ent.Info);
--# expr-done 611



   if Fld.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_1 := Liblktlang.Implementation.Parent (Node => Fld.Node, E_Info => Fld.Info);
--# expr-done 612



   if Fld_1.Node = null
      or else Fld_1.Node.Kind in Lkt_Type_Decl
   then
      
      Cast_Result := Create_Internal_Entity_Type_Decl
        (Node => Fld_1.Node,
         Info => Fld_1.Info);

   else
         Raise_Property_Exception
           (Self, Property_Error'Identity, "invalid object cast");
   end if;


--# expr-done 613

         Property_Result := Cast_Result;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Enum_Lit_Decl_P_Parent_Type;
--# end



   


      

   --
   --  Primitives for Bare_Explicitly_Typed_Decl
   --

   




      
   function Explicitly_Typed_Decl_F_Decl_Type
     (Node : Bare_Explicitly_Typed_Decl) return Bare_Type_Ref
   is
      

         Kind : constant Lkt_Explicitly_Typed_Decl := Node.Kind;
   begin
         case Kind is
               when Lkt_Field_Decl =>
                     
         return Node.Field_Decl_F_Decl_Type;
      
               when Lkt_Fun_Arg_Decl =>
                     
         return Node.Fun_Arg_Decl_F_Decl_Type;
      
               when Lkt_Lambda_Arg_Decl =>
                     
         return Node.Lambda_Arg_Decl_F_Decl_Type;
      
               when Lkt_Dyn_Var_Decl =>
                     
         return Node.Dyn_Var_Decl_F_Decl_Type;
      
               when Lkt_Match_Val_Decl =>
                     
         return Node.Match_Val_Decl_F_Decl_Type;
      
               when Lkt_Val_Decl =>
                     
         return Node.Val_Decl_F_Decl_Type;
      
         end case;
   end;




   


      

   --
   --  Primitives for Bare_Component_Decl
   --

   




      
   function Component_Decl_F_Default_Val
     (Node : Bare_Component_Decl) return Bare_Expr
   is
      

         Kind : constant Lkt_Component_Decl := Node.Kind;
   begin
         case Kind is
               when Lkt_Field_Decl =>
                     
         return Node.Field_Decl_F_Default_Val;
      
               when Lkt_Fun_Arg_Decl =>
                     
         return Node.Fun_Arg_Decl_F_Default_Val;
      
               when Lkt_Lambda_Arg_Decl =>
                     
         return Node.Lambda_Arg_Decl_F_Default_Val;
      
         end case;
   end;


   







--# property-start ComponentDecl.xref_equation nodes.lkt:1167
pragma Warnings (Off, "is not referenced");
 function Component_Decl_P_Xref_Equation
  
  (Node : Bare_Component_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Logic_Equation
is
   Self : Bare_Component_Decl  := Bare_Component_Decl (Node);
     Ent : Internal_Entity_Component_Decl :=
       Internal_Entity_Component_Decl'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Logic_Equation;

      
            procedure Finalizer_Scope_122 with Inline_Always;

      Var_Expr_24 : Internal_Entity_Type_Ref;
True_Rel : Logic_Equation;
Fld : Internal_Entity_Expr;
Fld_1 : Logic_Equation;
Fld_2 : Internal_Entity_Expr;
Fld_3 : Logic_Var;
Fld_4 : Internal_Entity_Type_Ref;
Fld_5 : Internal_Entity_Type_Decl;
Scope_Result : Internal_Entity_Type_Decl;
Result_Var : Internal_Entity_Type_Decl;
Cast_Result : Internal_Entity;
Bind_Result : Logic_Equation;
And_Pred : Logic_Equation;
Fld_6 : Bare_Expr;
Cast_Result_1 : Bare_Lkt_Node;
Bound_Error_Location : Bare_Lkt_Node;
Fld_7 : Internal_Entity_Expr;
Fld_8 : Logic_Var;
Fld_9 : Internal_Entity_Expr;
Fld_10 : Logic_Var;
Pred : Logic_Equation;
Dyn_Var_Bind_Result : Logic_Equation;
And_Pred_1 : Logic_Equation;
Fld_11 : Internal_Entity_Expr;
Is_Null : Boolean;
If_Result : Logic_Equation;

            procedure Finalizer_Scope_122 is
            begin
                     Dec_Ref (True_Rel);
                     Dec_Ref (Fld_1);
                     Dec_Ref (Bind_Result);
                     Dec_Ref (And_Pred);
                     Dec_Ref (Pred);
                     Dec_Ref (Dyn_Var_Bind_Result);
                     Dec_Ref (And_Pred_1);
                     Dec_Ref (If_Result);
            end Finalizer_Scope_122;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 632 '<If at nodes.lkt:1168:9>' If_Result nodes.lkt:1168



--# expr-start 615 '<IsNull at nodes.lkt:1168:12>' Is_Null nodes.lkt:1168
--# expr-start 614 '<FieldAccess for default_val at nodes.lkt:1168:12>' Fld_11 nodes.lkt:1168







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_11 := Create_Internal_Entity_Expr (Node => Implementation.Component_Decl_F_Default_Val (Ent.Node), Info => Ent.Info);
--# expr-done 614
Is_Null := Fld_11.Node = null; 
--# expr-done 615
if Is_Null then
   True_Rel := Solver.Create_True ((if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:1168:42") else null)); 
   If_Result := True_Rel;
else
   --# expr-start 631 '<LogicBinaryOp And at nodes.lkt:1170:13>' And_Pred_1 nodes.lkt:1170
--# expr-start 623 '<LogicBinaryOp And at nodes.lkt:1171:17>' And_Pred nodes.lkt:1171
--# expr-start 617 '<FieldAccess for xref_equation at nodes.lkt:1171:17>' Fld_1 nodes.lkt:1171



--# expr-start 616 '<FieldAccess for default_val at nodes.lkt:1171:17>' Fld nodes.lkt:1171







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Create_Internal_Entity_Expr (Node => Implementation.Component_Decl_F_Default_Val (Ent.Node), Info => Ent.Info);
--# expr-done 616



   if Fld.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]LktNode.xref_equation'
Fld_1 := Liblktlang.Implementation.Dispatcher_Lkt_Node_P_Xref_Equation (Node => Fld.Node, E_Info => Fld.Info);
--# end
--# expr-done 617
--# expr-start 622 '<Bind at nodes.lkt:1172:22>' Bind_Result nodes.lkt:1172
--# expr-start 619 '<FieldAccess for expected_type_var at nodes.lkt:1172:22>' Fld_3 nodes.lkt:1172



--# expr-start 618 '<FieldAccess for default_val at nodes.lkt:1172:22>' Fld_2 nodes.lkt:1172







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_2 := Create_Internal_Entity_Expr (Node => Implementation.Component_Decl_F_Default_Val (Ent.Node), Info => Ent.Info);
--# expr-done 618



   if Fld_2.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_3 := Fld_2.Node.Expr_Expected_Type_Var'Unrestricted_Access;
--# expr-done 619
Fld_3.Value := No_Entity;
Entity_Vars.Reset (Fld_3);








--# expr-start 620 '<FieldAccess for decl_type at nodes.lkt:1173:20>' Fld_4 nodes.lkt:1173







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_4 := Create_Internal_Entity_Type_Ref (Node => Implementation.Explicitly_Typed_Decl_F_Decl_Type (Ent.Node), Info => Ent.Info);
--# expr-done 620
Var_Expr_24 := Fld_4;





if Var_Expr_24 /= No_Entity_Type_Ref then
   



   --# scope-start


   

--# expr-start 621 '<FieldAccess for referenced_decl at nodes.lkt:1173:20>' Fld_5 nodes.lkt:1173







   if Var_Expr_24.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start TypeRef.referenced_decl
Fld_5 := Liblktlang.Implementation.Type_Ref_P_Referenced_Decl (Node => Var_Expr_24.Node, E_Info => Var_Expr_24.Info);
--# end
--# expr-done 621
Scope_Result := Fld_5;


   --# end


   Result_Var := Scope_Result;
else
   
   Result_Var := No_Entity_Type_Decl;
end if;






   
      Cast_Result := Create_Internal_Entity
        (Node => Result_Var.Node,
         Info => Result_Var.Info);


Bind_Result := Solver.Create_Assign (Fld_3, Cast_Result, Solver_Ifc.No_Converter, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:1172:22") else null)); 
--# expr-done 622
And_Pred := Create_And (Fld_1, Bind_Result, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:1171:17") else null)); 
--# expr-done 623
--# expr-start 630 '<bind at nodes.lkt:1176:17>' Dyn_Var_Bind_Result nodes.lkt:1176





--# expr-start 624 '<FieldAccess for default_val at nodes.lkt:1176:39>' Fld_6 nodes.lkt:1176







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_6 := Implementation.Component_Decl_F_Default_Val (Self);
--# expr-done 624



   
      Cast_Result_1 := Fld_6;


Bound_Error_Location := Cast_Result_1; 
--# expr-start 629 '<Predicate on TypeDecl.matching_type at nodes.lkt:1177:17>' Pred nodes.lkt:1177
--# expr-start 626 '<FieldAccess for expected_type_var at nodes.lkt:1178:21>' Fld_8 nodes.lkt:1178



--# expr-start 625 '<FieldAccess for default_val at nodes.lkt:1178:21>' Fld_7 nodes.lkt:1178







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_7 := Create_Internal_Entity_Expr (Node => Implementation.Component_Decl_F_Default_Val (Ent.Node), Info => Ent.Info);
--# expr-done 625



   if Fld_7.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_8 := Fld_7.Node.Expr_Expected_Type_Var'Unrestricted_Access;
--# expr-done 626
Fld_8.Value := No_Entity;
Entity_Vars.Reset (Fld_8);
--# expr-start 628 '<FieldAccess for actual_type_var at nodes.lkt:1179:21>' Fld_10 nodes.lkt:1179



--# expr-start 627 '<FieldAccess for default_val at nodes.lkt:1179:21>' Fld_9 nodes.lkt:1179







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_9 := Create_Internal_Entity_Expr (Node => Implementation.Component_Decl_F_Default_Val (Ent.Node), Info => Ent.Info);
--# expr-done 627



   if Fld_9.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_10 := Fld_9.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 628
Fld_10.Value := No_Entity;
Entity_Vars.Reset (Fld_10);


Pred := Solver.Create_N_Predicate ((Fld_8, Fld_10), Create_Type_Decl_P_Matching_Type_0_Predicate (2, Bound_Error_Location)); 
--# expr-done 629
Dyn_Var_Bind_Result := Pred; Inc_Ref (Dyn_Var_Bind_Result);
--# expr-done 630
And_Pred_1 := Create_And (And_Pred, Dyn_Var_Bind_Result, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:1170:13") else null)); 
--# expr-done 631
   If_Result := And_Pred_1;
end if;

      Inc_Ref (If_Result);


--# expr-done 632

         Property_Result := If_Result;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_122;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_122;




            raise;
      end;



   return Property_Result;
end Component_Decl_P_Xref_Equation;
--# end

   







--# property-start ComponentDecl.to_formal_param nodes.lkt:1184
pragma Warnings (Off, "is not referenced");
 function Component_Decl_P_To_Formal_Param
  
  (Node : Bare_Component_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Internal_Formal_Param
is
   Self : Bare_Component_Decl  := Bare_Component_Decl (Node);
     Ent : Internal_Entity_Component_Decl :=
       Internal_Entity_Component_Decl'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Internal_Formal_Param;

      

      Var_Expr_25 : Internal_Entity_Full_Decl;
Fld : Internal_Entity_Def_Id;
Fld_1 : Bare_Def_Id;
Sym : Symbol_Type;
Fld_2 : Internal_Entity_Type_Ref;
Fld_3 : Internal_Entity_Type_Decl;
Fld_4 : Internal_Entity_Expr;
Is_Null : Boolean;
Not_Val : Boolean;
Fld_5 : Internal_Entity_Full_Decl;
Sym_1 : Symbol_Type;
Fld_6 : Boolean;
Scope_Result : Boolean;
Result_Var : Boolean;
If_Result : Boolean;
Cast_Expr : Internal_Entity_Component_Decl;
Cast_Result : Internal_Entity_Decl;
New_Struct : Internal_Formal_Param;



begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 644 '<New FormalParam at nodes.lkt:1185:9>' New_Struct nodes.lkt:1185







Cast_Expr := Ent; 



   
      Cast_Result := Create_Internal_Entity_Decl
        (Node => Cast_Expr.Node,
         Info => Cast_Expr.Info);


--# expr-start 634 '<GetSymbol at nodes.lkt:1186:25>' Sym nodes.lkt:1186



--# expr-start 633 '<FieldAccess for syn_name at nodes.lkt:1186:25>' Fld nodes.lkt:1186







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Create_Internal_Entity_Def_Id (Node => Implementation.Decl_F_Syn_Name (Ent.Node), Info => Ent.Info);
--# expr-done 633





Fld_1 := Fld.Node; 
Sym := Get_Symbol (Fld_1); 
--# expr-done 634
--# expr-start 636 '<FieldAccess for referenced_decl at nodes.lkt:1187:25>' Fld_3 nodes.lkt:1187



--# expr-start 635 '<FieldAccess for decl_type at nodes.lkt:1187:25>' Fld_2 nodes.lkt:1187







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_2 := Create_Internal_Entity_Type_Ref (Node => Implementation.Explicitly_Typed_Decl_F_Decl_Type (Ent.Node), Info => Ent.Info);
--# expr-done 635



   if Fld_2.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start TypeRef.referenced_decl
Fld_3 := Liblktlang.Implementation.Type_Ref_P_Referenced_Decl (Node => Fld_2.Node, E_Info => Fld_2.Info);
--# end
--# expr-done 636
--# expr-start 643 '<BooleanBinaryOp Or at nodes.lkt:1188:31>' If_Result nodes.lkt:1188



--# expr-start 639 '<Not at nodes.lkt:1188:31>' Not_Val nodes.lkt:1188
--# expr-start 638 '<IsNull at nodes.lkt:1188:35>' Is_Null nodes.lkt:1188
--# expr-start 637 '<FieldAccess for default_val at nodes.lkt:1188:35>' Fld_4 nodes.lkt:1188







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_4 := Create_Internal_Entity_Expr (Node => Implementation.Component_Decl_F_Default_Val (Ent.Node), Info => Ent.Info);
--# expr-done 637
Is_Null := Fld_4.Node = null; 
--# expr-done 638
Not_Val := not (Is_Null); 
--# expr-done 639
if Not_Val then
   
   If_Result := True;
else
   


--# expr-start 640 '<FieldAccess for full_decl at nodes.lkt:1189:16>' Fld_5 nodes.lkt:1189







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start Decl.full_decl
Fld_5 := Liblktlang.Implementation.Decl_P_Full_Decl (Node => Ent.Node, E_Info => Ent.Info);
--# end
--# expr-done 640
Var_Expr_25 := Fld_5;





if Var_Expr_25 /= No_Entity_Full_Decl then
   



   --# scope-start


   

--# expr-start 642 '<FieldAccess for has_annotation at nodes.lkt:1189:16>' Fld_6 nodes.lkt:1189







   if Var_Expr_25.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# expr-start 641 '<Symbol nullable at nodes.lkt:1189:49>' Sym_1 nodes.lkt:1189
Sym_1 := Precomputed_Symbol (Precomputed_Symbol_Table (Self.Unit.Context.Symbols), Precomputed_Sym_Nullable); 
--# expr-done 641
--# property-call-start FullDecl.has_annotation
Fld_6 := Liblktlang.Implementation.Full_Decl_P_Has_Annotation (Node => Var_Expr_25.Node, Name => Sym_1);
--# end
--# expr-done 642
Scope_Result := Fld_6;


   --# end


   Result_Var := Scope_Result;
else
   
   Result_Var := False;
end if;



   If_Result := Result_Var;
end if;



--# expr-done 643
New_Struct := (Accept_Logical_Var => False, Decl => Cast_Result, Formal_Name => Sym, Formal_Type => Fld_3, Has_Default_Value => If_Result); 
--# expr-done 644

         Property_Result := New_Struct;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Component_Decl_P_To_Formal_Param;
--# end



   


      

   --
   --  Primitives for Bare_Field_Decl
   --

   



   

   

   

   

   

   

   


      procedure Field_Decl_Pre_Env_Actions
        (Self            : Bare_Field_Decl;
         State           : in out PLE_Node_State;
         Add_To_Env_Only : Boolean := False) is
      begin
            


   

      declare
         Resolver : constant Entity_Resolver :=
            null;

         

         Mapping : Internal_Env_Assoc :=
            Liblktlang.Implementation.Env_Mappings_1 (Node => 
Self);
      begin

         Add_To_Env
           (Self,
            State,
            Mapping.Key,
            Mapping.Value,
            Mapping.Metadata,
            Resolver,
            Mapping.Dest_Env,
            DSL_Location => "nodes.lkt:1219:9");
         Dec_Ref (Mapping.Dest_Env);

      end;
   
   
            


   
      if Add_To_Env_Only then
         return;
      end if;

      declare
         No_Parent         : constant Boolean :=
            False;
         Transitive_Parent : constant Boolean :=
            Liblktlang.Implementation.Env_Trans_Parent_2 (Node => 
Self);
         Names             : Symbol_Type_Array_Access :=
            null;
      begin
         Add_Env (Self, State, No_Parent, Transitive_Parent, Names);
      end;
   
   
            


   

      declare
         Resolver : constant Entity_Resolver :=
            null;

         

         Mappings : Internal_Env_Assoc_Array_Access :=
            Liblktlang.Implementation.Env_Mappings_3 (Node => 
Self);
      begin
         for Mapping of Mappings.Items loop

         Add_To_Env
           (Self,
            State,
            Mapping.Key,
            Mapping.Value,
            Mapping.Metadata,
            Resolver,
            Mapping.Dest_Env,
            DSL_Location => "nodes.lkt:1221:9");

         end loop;
         Dec_Ref (Mappings);
      end;
   
   
      end;



      
      procedure Initialize_Fields_For_Field_Decl
        (Self : Bare_Field_Decl
         ; Field_Decl_F_Syn_Name : Bare_Def_Id
         ; Field_Decl_F_Decl_Type : Bare_Type_Ref
         ; Field_Decl_F_Default_Val : Bare_Expr
        ) is
      begin

            Self.Field_Decl_F_Syn_Name := Field_Decl_F_Syn_Name;
            Self.Field_Decl_F_Decl_Type := Field_Decl_F_Decl_Type;
            Self.Field_Decl_F_Default_Val := Field_Decl_F_Default_Val;
         

      end Initialize_Fields_For_Field_Decl;


   







--# property-start FieldDecl.decl_type_name nodes.lkt:1203
pragma Warnings (Off, "is not referenced");
 function Field_Decl_P_Decl_Type_Name
  
  (Node : Bare_Field_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return String_Type
is
   Self : Bare_Field_Decl  := Bare_Field_Decl (Node);
      --# bind self Self

   


   Property_Result : String_Type;

      
            procedure Finalizer_Scope_124 with Inline_Always;

      Str : String_Type;

            procedure Finalizer_Scope_124 is
            begin
                     Dec_Ref (Str);
            end Finalizer_Scope_124;


begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         --# expr-start 645 '<String at nodes.lkt:1203:36>' Str nodes.lkt:1203
Str := Create_String ("field declaration"); 
--# expr-done 645

         Property_Result := Str;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_124;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_124;




            raise;
      end;



   return Property_Result;
end Field_Decl_P_Decl_Type_Name;
--# end

   







--# property-start FieldDecl.owning_type nodes.lkt:1205
pragma Warnings (Off, "is not referenced");
 function Field_Decl_P_Owning_Type
  
  (Node : Bare_Field_Decl
  )

   return Bare_Type_Decl
is
   Self : Bare_Field_Decl  := Bare_Field_Decl (Node);
      --# bind self Self

   


   Property_Result : Bare_Type_Decl;

      
            procedure Finalizer_Scope_125 with Inline_Always;

      Node_Parents : Bare_Lkt_Node_Array_Access;
Is_A : Boolean;
Find_Result : Bare_Lkt_Node;
Cast_Result : Bare_Type_Decl;

            procedure Finalizer_Scope_125 is
            begin
                     Dec_Ref (Node_Parents);
            end Finalizer_Scope_125;


begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         --# expr-start 649 '<Cast to TypeDecl at nodes.lkt:1206:9>' Cast_Result nodes.lkt:1206





--# expr-start 648 '<Find at nodes.lkt:1206:9>' Find_Result nodes.lkt:1206








   

   --# expr-start 646 '<FieldAccess for parents at nodes.lkt:1206:9>' Node_Parents nodes.lkt:1206







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;



Node_Parents := Parents (Self, True); 
--# expr-done 646

   
      Find_Result := No_Bare_Lkt_Node;
   

   

      

      declare
         
         Collection : constant Bare_Lkt_Node_Array_Access := Node_Parents;
      begin
         for Item_0 of
               Collection.Items
         loop

            
   --# scope-start


               --# bind t Item_0

            
      --# expr-start 647 '<IsA TypeDecl at nodes.lkt:1206:36>' Is_A nodes.lkt:1206

Is_A := Item_0 /= null 
and then Item_0.Kind in Lkt_Type_Decl; 
--# expr-done 647
      if Is_A then
         Find_Result := Item_0; 
      end if;
   

            
   --# end


               exit when Is_A;

         end loop;
      end;
   

   
   



--# expr-done 648



   if Find_Result = null
      or else Find_Result.Kind in Lkt_Type_Decl
   then
      
      Cast_Result := Find_Result;

   else
         Cast_Result := No_Bare_Lkt_Node;
   end if;


--# expr-done 649

         Property_Result := Cast_Result;
         
   --# end
      Finalizer_Scope_125;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_125;




            raise;
      end;



   return Property_Result;
end Field_Decl_P_Owning_Type;
--# end

   







--# property-start FieldDecl.lazy_field_function_type nodes.lkt:1211
pragma Warnings (Off, "is not referenced");
 function Field_Decl_P_Lazy_Field_Function_Type
  
  (Node : Bare_Field_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Internal_Entity_Function_Type
is
   Self : Bare_Field_Decl  := Bare_Field_Decl (Node);
     Ent : Internal_Entity_Field_Decl :=
       Internal_Entity_Field_Decl'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Internal_Entity_Function_Type;

      

      Fld : Internal_Entity_Type_Decl;
Cast_Expr : Internal_Entity_Field_Decl;
Cast_Result : Internal_Entity_Decl;
Fld_1 : Internal_Entity_Function_Type;



begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 651 '<FieldAccess for function_type_helper at nodes.lkt:1212:9>' Fld_1 nodes.lkt:1212







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;



--# expr-start 650 '<FieldAccess for get_type at nodes.lkt:1214:13>' Fld nodes.lkt:1214







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start Decl.get_type
Fld := Liblktlang.Implementation.Decl_P_Get_Type (Node => Ent.Node, E_Info => Ent.Info);
--# end
--# expr-done 650






Cast_Expr := Ent; 



   
      Cast_Result := Create_Internal_Entity_Decl
        (Node => Cast_Expr.Node,
         Info => Cast_Expr.Info);


--# property-call-start LktNode.function_type_helper
Fld_1 := Liblktlang.Implementation.Lkt_Node_P_Function_Type_Helper (Node => Ent.Node, Args_Types => No_Internal_Entity_Type_Decl_Array_Type, Return_Type => Fld, Origin => Cast_Result, E_Info => Ent.Info);
--# end
--# expr-done 651

         Property_Result := Fld_1;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Field_Decl_P_Lazy_Field_Function_Type;
--# end

   







--# property-start FieldDecl._env_mappings_1 nodes.lkt:1219
pragma Warnings (Off, "is not referenced");
 function Env_Mappings_1
  
  (Node : Bare_Field_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Internal_Env_Assoc
is
   Self : Bare_Field_Decl  := Bare_Field_Decl (Node);
     Ent : Internal_Entity_Field_Decl :=
       Internal_Entity_Field_Decl'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Internal_Env_Assoc;

      
            procedure Finalizer_Scope_377 with Inline_Always;

      Fld : Symbol_Type;
New_Struct : Internal_Designated_Env := No_Designated_Env;
Cast_Expr : Bare_Field_Decl;
Cast_Result : Bare_Lkt_Node;
New_Struct_1 : Internal_Env_Assoc := No_Env_Assoc;

            procedure Finalizer_Scope_377 is
            begin
                     Dec_Ref (New_Struct);
                     Dec_Ref (New_Struct_1);
            end Finalizer_Scope_377;


begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         --# expr-start 654 '<New EnvAssoc at ???>' New_Struct_1 None
--# expr-start 652 '<New DesignatedEnv at ???>' New_Struct None



Inc_Ref (Empty_Env);
New_Struct := (Direct_Env => Empty_Env, Env_Name => No_Symbol, Kind => Current_Env); 
--# expr-done 652
--# expr-start 653 '<FieldAccess for name at nodes.lkt:1219:23>' Fld nodes.lkt:1219







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]Decl.name'
Fld := Liblktlang.Implementation.Dispatcher_Decl_P_Name (Node => Ent.Node);
--# end
--# expr-done 653







Cast_Expr := Self; 



   
      Cast_Result := Cast_Expr;


Inc_Ref (New_Struct);
New_Struct_1 := (Dest_Env => New_Struct, Key => Fld, Metadata => No_Metadata, Value => Cast_Result); 
--# expr-done 654

         Property_Result := New_Struct_1;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_377;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_377;




            raise;
      end;



   return Property_Result;
end Env_Mappings_1;
--# end

   







--# property-start FieldDecl._env_trans_parent_2 '<builtin>:0'
pragma Warnings (Off, "is not referenced");
 function Env_Trans_Parent_2
  
  (Node : Bare_Field_Decl
  )

   return Boolean
is
   Self : Bare_Field_Decl  := Bare_Field_Decl (Node);
      --# bind self Self

   


   Property_Result : Boolean;

      

      



begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         

         Property_Result := False;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Env_Trans_Parent_2;
--# end

   







--# property-start FieldDecl._env_mappings_3 nodes.lkt:1222
pragma Warnings (Off, "is not referenced");
 function Env_Mappings_3
  
  (Node : Bare_Field_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Internal_Env_Assoc_Array_Access
is
   Self : Bare_Field_Decl  := Bare_Field_Decl (Node);
     Ent : Internal_Entity_Field_Decl :=
       Internal_Entity_Field_Decl'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Internal_Env_Assoc_Array_Access;

      
            procedure Finalizer_Scope_379 with Inline_Always;
            procedure Finalizer_Scope_525 with Inline_Always;

      Var_Expr_0 : Bare_Type_Decl;
Fld : Bare_Type_Decl;
Sym : Symbol_Type;
Fld_1 : Bare_Node_Decl;
New_Struct : Internal_Designated_Env := No_Designated_Env;
Cast_Result : Bare_Lkt_Node;
New_Struct_1 : Internal_Env_Assoc := No_Env_Assoc;
Array_Lit : Internal_Env_Assoc_Array_Access;
Scope_Result : Internal_Env_Assoc_Array_Access;
Result_Var : Internal_Env_Assoc_Array_Access;
Fld_2 : Internal_Entity_Full_Decl;
Sym_1 : Symbol_Type;
Fld_3 : Boolean;
If_Result : Internal_Env_Assoc_Array_Access;

            procedure Finalizer_Scope_379 is
            begin
                     Dec_Ref (Scope_Result);
                     Dec_Ref (Result_Var);
                     Dec_Ref (If_Result);
            end Finalizer_Scope_379;
            procedure Finalizer_Scope_525 is
            begin
                     Dec_Ref (New_Struct);
                     Dec_Ref (New_Struct_1);
                     Dec_Ref (Array_Lit);
            end Finalizer_Scope_525;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 664 '<If at nodes.lkt:1222:13>' If_Result nodes.lkt:1222



--# expr-start 657 '<FieldAccess for has_annotation at nodes.lkt:1222:16>' Fld_3 nodes.lkt:1222



--# expr-start 655 '<FieldAccess for full_decl at nodes.lkt:1222:16>' Fld_2 nodes.lkt:1222







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start Decl.full_decl
Fld_2 := Liblktlang.Implementation.Decl_P_Full_Decl (Node => Ent.Node, E_Info => Ent.Info);
--# end
--# expr-done 655



   if Fld_2.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# expr-start 656 '<Symbol lazy at nodes.lkt:1222:48>' Sym_1 nodes.lkt:1222
Sym_1 := Precomputed_Symbol (Precomputed_Symbol_Table (Self.Unit.Context.Symbols), Precomputed_Sym_Lazy); 
--# expr-done 656
--# property-call-start FullDecl.has_annotation
Fld_3 := Liblktlang.Implementation.Full_Decl_P_Has_Annotation (Node => Fld_2.Node, Name => Sym_1);
--# end
--# expr-done 657
if Fld_3 then
   


--# expr-start 658 '<FieldAccess for owning_type at nodes.lkt:1224:17>' Fld nodes.lkt:1224







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start FieldDecl.owning_type
Fld := Liblktlang.Implementation.Field_Decl_P_Owning_Type (Node => Self);
--# end
--# expr-done 658
Var_Expr_0 := Fld;





if Var_Expr_0 /= No_Bare_Lkt_Node then
   



   --# scope-start


   --# bind ot Var_Expr_0

--# expr-start 663 '<ArrayLiteral at nodes.lkt:1226:21>' Array_Lit nodes.lkt:1226
--# expr-start 662 '<New EnvAssoc at nodes.lkt:1227:25>' New_Struct_1 nodes.lkt:1227
--# expr-start 659 '<New DesignatedEnv at nodes.lkt:1230:38>' New_Struct nodes.lkt:1230



Inc_Ref (Empty_Env);
New_Struct := (Direct_Env => Empty_Env, Env_Name => No_Symbol, Kind => Current_Env); 
--# expr-done 659
--# expr-start 660 '<Symbol node at nodes.lkt:1228:33>' Sym nodes.lkt:1228
Sym := Precomputed_Symbol (Precomputed_Symbol_Table (Self.Unit.Context.Symbols), Precomputed_Sym_Node_47); 
--# expr-done 660






--# expr-start 661 '<FieldAccess for node_decl at nodes.lkt:1229:35>' Fld_1 nodes.lkt:1229







   if Var_Expr_0 = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start TypeDecl.node_decl
Fld_1 := Liblktlang.Implementation.Type_Decl_P_Node_Decl (Node => Var_Expr_0);
--# end
--# expr-done 661



   
      Cast_Result := Fld_1;


Inc_Ref (New_Struct);
New_Struct_1 := (Dest_Env => New_Struct, Key => Sym, Metadata => No_Metadata, Value => Cast_Result); 
--# expr-done 662
Array_Lit := Create_Internal_Env_Assoc_Array (Internal_Internal_Env_Assoc_Array'(1 => New_Struct_1)); 
--# expr-done 663
Scope_Result := Array_Lit;
   Inc_Ref (Scope_Result);


   --# end
      Finalizer_Scope_525;


   Result_Var := Scope_Result;
else
   
   Result_Var := No_Internal_Env_Assoc_Array_Type;
end if;

      Inc_Ref (Result_Var);


   If_Result := Result_Var;
else
   
   If_Result := No_Internal_Env_Assoc_Array_Type;
end if;

      Inc_Ref (If_Result);


--# expr-done 664

         Property_Result := If_Result;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_379;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_379;
                     Finalizer_Scope_525;




            raise;
      end;



   return Property_Result;
end Env_Mappings_3;
--# end



   


      

   --
   --  Primitives for Bare_Fun_Arg_Decl
   --

   



      
      procedure Initialize_Fields_For_Fun_Arg_Decl
        (Self : Bare_Fun_Arg_Decl
         ; Fun_Arg_Decl_F_Decl_Annotations : Bare_Decl_Annotation_List
         ; Fun_Arg_Decl_F_Syn_Name : Bare_Def_Id
         ; Fun_Arg_Decl_F_Decl_Type : Bare_Type_Ref
         ; Fun_Arg_Decl_F_Default_Val : Bare_Expr
        ) is
      begin

            Self.Fun_Arg_Decl_F_Decl_Annotations := Fun_Arg_Decl_F_Decl_Annotations;
            Self.Fun_Arg_Decl_F_Syn_Name := Fun_Arg_Decl_F_Syn_Name;
            Self.Fun_Arg_Decl_F_Decl_Type := Fun_Arg_Decl_F_Decl_Type;
            Self.Fun_Arg_Decl_F_Default_Val := Fun_Arg_Decl_F_Default_Val;
         

      end Initialize_Fields_For_Fun_Arg_Decl;

      
   function Fun_Arg_Decl_F_Decl_Annotations
     (Node : Bare_Fun_Arg_Decl) return Bare_Decl_Annotation_List
   is
      

   begin
         
         return Node.Fun_Arg_Decl_F_Decl_Annotations;
      
   end;


   







--# property-start FunArgDecl.decl_type_name nodes.lkt:1255
pragma Warnings (Off, "is not referenced");
 function Fun_Arg_Decl_P_Decl_Type_Name
  
  (Node : Bare_Fun_Arg_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return String_Type
is
   Self : Bare_Fun_Arg_Decl  := Bare_Fun_Arg_Decl (Node);
      --# bind self Self

   


   Property_Result : String_Type;

      
            procedure Finalizer_Scope_127 with Inline_Always;

      Str : String_Type;

            procedure Finalizer_Scope_127 is
            begin
                     Dec_Ref (Str);
            end Finalizer_Scope_127;


begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         --# expr-start 665 '<String at nodes.lkt:1255:36>' Str nodes.lkt:1255
Str := Create_String ("fun arg declaration"); 
--# expr-done 665

         Property_Result := Str;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_127;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_127;




            raise;
      end;



   return Property_Result;
end Fun_Arg_Decl_P_Decl_Type_Name;
--# end



   


      

   --
   --  Primitives for Bare_Lambda_Arg_Decl
   --

   



      
      procedure Initialize_Fields_For_Lambda_Arg_Decl
        (Self : Bare_Lambda_Arg_Decl
         ; Lambda_Arg_Decl_F_Syn_Name : Bare_Def_Id
         ; Lambda_Arg_Decl_F_Decl_Type : Bare_Type_Ref
         ; Lambda_Arg_Decl_F_Default_Val : Bare_Expr
        ) is
      begin

            Self.Lambda_Arg_Decl_F_Syn_Name := Lambda_Arg_Decl_F_Syn_Name;
            Self.Lambda_Arg_Decl_F_Decl_Type := Lambda_Arg_Decl_F_Decl_Type;
            Self.Lambda_Arg_Decl_F_Default_Val := Lambda_Arg_Decl_F_Default_Val;
         
      Self.Lambda_Arg_Decl_Type_Var := Null_Var_Record;

      end Initialize_Fields_For_Lambda_Arg_Decl;


   







--# property-start LambdaArgDecl.decl_type_name nodes.lkt:1268
pragma Warnings (Off, "is not referenced");
 function Lambda_Arg_Decl_P_Decl_Type_Name
  
  (Node : Bare_Lambda_Arg_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return String_Type
is
   Self : Bare_Lambda_Arg_Decl  := Bare_Lambda_Arg_Decl (Node);
      --# bind self Self

   


   Property_Result : String_Type;

      
            procedure Finalizer_Scope_128 with Inline_Always;

      Str : String_Type;

            procedure Finalizer_Scope_128 is
            begin
                     Dec_Ref (Str);
            end Finalizer_Scope_128;


begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         --# expr-start 666 '<String at nodes.lkt:1268:36>' Str nodes.lkt:1268
Str := Create_String ("lambda arg declaration"); 
--# expr-done 666

         Property_Result := Str;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_128;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_128;




            raise;
      end;



   return Property_Result;
end Lambda_Arg_Decl_P_Decl_Type_Name;
--# end



   


      

   --
   --  Primitives for Bare_Dyn_Var_Decl
   --

   



      
      procedure Initialize_Fields_For_Dyn_Var_Decl
        (Self : Bare_Dyn_Var_Decl
         ; Dyn_Var_Decl_F_Syn_Name : Bare_Def_Id
         ; Dyn_Var_Decl_F_Decl_Type : Bare_Type_Ref
        ) is
      begin

            Self.Dyn_Var_Decl_F_Syn_Name := Dyn_Var_Decl_F_Syn_Name;
            Self.Dyn_Var_Decl_F_Decl_Type := Dyn_Var_Decl_F_Decl_Type;
         

      end Initialize_Fields_For_Dyn_Var_Decl;


   







--# property-start DynVarDecl.decl_type_name nodes.lkt:1278
pragma Warnings (Off, "is not referenced");
 function Dyn_Var_Decl_P_Decl_Type_Name
  
  (Node : Bare_Dyn_Var_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return String_Type
is
   Self : Bare_Dyn_Var_Decl  := Bare_Dyn_Var_Decl (Node);
      --# bind self Self

   


   Property_Result : String_Type;

      
            procedure Finalizer_Scope_129 with Inline_Always;

      Str : String_Type;

            procedure Finalizer_Scope_129 is
            begin
                     Dec_Ref (Str);
            end Finalizer_Scope_129;


begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         --# expr-start 667 '<String at nodes.lkt:1278:36>' Str nodes.lkt:1278
Str := Create_String ("dynamic variable declaration"); 
--# expr-done 667

         Property_Result := Str;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_129;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_129;




            raise;
      end;



   return Property_Result;
end Dyn_Var_Decl_P_Decl_Type_Name;
--# end

   







--# property-start DynVarDecl.xref_entry_point nodes.lkt:1280
pragma Warnings (Off, "is not referenced");
 function Dyn_Var_Decl_P_Xref_Entry_Point
  
  (Node : Bare_Dyn_Var_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Boolean
is
   Self : Bare_Dyn_Var_Decl  := Bare_Dyn_Var_Decl (Node);
      --# bind self Self

   


   Property_Result : Boolean;

      

      



begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         

         Property_Result := False;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Dyn_Var_Decl_P_Xref_Entry_Point;
--# end



   


      

   --
   --  Primitives for Bare_Match_Val_Decl
   --

   



      
      procedure Initialize_Fields_For_Match_Val_Decl
        (Self : Bare_Match_Val_Decl
         ; Match_Val_Decl_F_Syn_Name : Bare_Def_Id
         ; Match_Val_Decl_F_Decl_Type : Bare_Type_Ref
        ) is
      begin

            Self.Match_Val_Decl_F_Syn_Name := Match_Val_Decl_F_Syn_Name;
            Self.Match_Val_Decl_F_Decl_Type := Match_Val_Decl_F_Decl_Type;
         

      end Initialize_Fields_For_Match_Val_Decl;


   







--# property-start MatchValDecl.decl_type_name nodes.lkt:1290
pragma Warnings (Off, "is not referenced");
 function Match_Val_Decl_P_Decl_Type_Name
  
  (Node : Bare_Match_Val_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return String_Type
is
   Self : Bare_Match_Val_Decl  := Bare_Match_Val_Decl (Node);
      --# bind self Self

   


   Property_Result : String_Type;

      
            procedure Finalizer_Scope_131 with Inline_Always;

      Str : String_Type;

            procedure Finalizer_Scope_131 is
            begin
                     Dec_Ref (Str);
            end Finalizer_Scope_131;


begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         --# expr-start 668 '<String at nodes.lkt:1290:36>' Str nodes.lkt:1290
Str := Create_String ("match value declaration"); 
--# expr-done 668

         Property_Result := Str;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_131;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_131;




            raise;
      end;



   return Property_Result;
end Match_Val_Decl_P_Decl_Type_Name;
--# end

   







--# property-start MatchValDecl.xref_entry_point nodes.lkt:1292
pragma Warnings (Off, "is not referenced");
 function Match_Val_Decl_P_Xref_Entry_Point
  
  (Node : Bare_Match_Val_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Boolean
is
   Self : Bare_Match_Val_Decl  := Bare_Match_Val_Decl (Node);
      --# bind self Self

   


   Property_Result : Boolean;

      

      



begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         

         Property_Result := False;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Match_Val_Decl_P_Xref_Entry_Point;
--# end

   







--# property-start MatchValDecl.match_expr nodes.lkt:1294
pragma Warnings (Off, "is not referenced");
 function Match_Val_Decl_P_Match_Expr
  
  (Node : Bare_Match_Val_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Internal_Entity_Expr
is
   Self : Bare_Match_Val_Decl  := Bare_Match_Val_Decl (Node);
     Ent : Internal_Entity_Match_Val_Decl :=
       Internal_Entity_Match_Val_Decl'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Internal_Entity_Expr;

      
            procedure Finalizer_Scope_133 with Inline_Always;

      Fld : Internal_Entity_Array_Access;
Is_A : Boolean;
Find_Result : Internal_Entity;
Cast_Result : Internal_Entity_Match_Expr;
Fld_1 : Internal_Entity_Expr;

            procedure Finalizer_Scope_133 is
            begin
                     Dec_Ref (Fld);
            end Finalizer_Scope_133;


begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         --# expr-start 673 '<FieldAccess for match_expr at nodes.lkt:1295:9>' Fld_1 nodes.lkt:1295



--# expr-start 672 '<Cast to MatchExpr at nodes.lkt:1295:9>' Cast_Result nodes.lkt:1295





--# expr-start 671 '<Find at nodes.lkt:1295:9>' Find_Result nodes.lkt:1295








   

   --# expr-start 669 '<FieldAccess for parents at nodes.lkt:1295:9>' Fld nodes.lkt:1295







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;



Fld := Liblktlang.Implementation.Parents (Node => Ent.Node, With_Self => True, E_Info => Ent.Info);
--# expr-done 669

   
      Find_Result := No_Entity;
   

   

      

      declare
         
         Collection : constant Internal_Entity_Array_Access := Fld;
      begin
         for Item_0 of
               Collection.Items
         loop

            
   --# scope-start


               --# bind p Item_0

            
      --# expr-start 670 '<IsA MatchExpr at nodes.lkt:1295:36>' Is_A nodes.lkt:1295

Is_A := Item_0.Node /= null 
and then Item_0.Node.Kind in Lkt_Match_Expr_Range; 
--# expr-done 670
      if Is_A then
         Find_Result := Item_0; 
      end if;
   

            
   --# end


               exit when Is_A;

         end loop;
      end;
   

   
   



--# expr-done 671



   if Find_Result.Node = null
      or else Find_Result.Node.Kind in Lkt_Match_Expr_Range
   then
      
      Cast_Result := Create_Internal_Entity_Match_Expr
        (Node => Find_Result.Node,
         Info => Find_Result.Info);

   else
         Cast_Result := No_Entity_Match_Expr;
   end if;


--# expr-done 672



   if Cast_Result.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_1 := Create_Internal_Entity_Expr (Node => Cast_Result.Node.Match_Expr_F_Match_Expr, Info => Cast_Result.Info);
--# expr-done 673

         Property_Result := Fld_1;
         
   --# end
      Finalizer_Scope_133;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_133;




            raise;
      end;



   return Property_Result;
end Match_Val_Decl_P_Match_Expr;
--# end



   


      

   --
   --  Primitives for Bare_Val_Decl
   --

   



      
      procedure Initialize_Fields_For_Val_Decl
        (Self : Bare_Val_Decl
         ; Val_Decl_F_Syn_Name : Bare_Def_Id
         ; Val_Decl_F_Decl_Type : Bare_Type_Ref
         ; Val_Decl_F_Expr : Bare_Expr
        ) is
      begin

            Self.Val_Decl_F_Syn_Name := Val_Decl_F_Syn_Name;
            Self.Val_Decl_F_Decl_Type := Val_Decl_F_Decl_Type;
            Self.Val_Decl_F_Expr := Val_Decl_F_Expr;
         

      end Initialize_Fields_For_Val_Decl;

      
   function Val_Decl_F_Expr
     (Node : Bare_Val_Decl) return Bare_Expr
   is
      

   begin
         
         return Node.Val_Decl_F_Expr;
      
   end;


   







--# property-start ValDecl.decl_type_name nodes.lkt:1307
pragma Warnings (Off, "is not referenced");
 function Val_Decl_P_Decl_Type_Name
  
  (Node : Bare_Val_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return String_Type
is
   Self : Bare_Val_Decl  := Bare_Val_Decl (Node);
      --# bind self Self

   


   Property_Result : String_Type;

      
            procedure Finalizer_Scope_134 with Inline_Always;

      Str : String_Type;

            procedure Finalizer_Scope_134 is
            begin
                     Dec_Ref (Str);
            end Finalizer_Scope_134;


begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         --# expr-start 674 '<String at nodes.lkt:1307:36>' Str nodes.lkt:1307
Str := Create_String ("value declaration"); 
--# expr-done 674

         Property_Result := Str;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_134;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_134;




            raise;
      end;



   return Property_Result;
end Val_Decl_P_Decl_Type_Name;
--# end

   







--# property-start ValDecl.xref_equation nodes.lkt:1309
pragma Warnings (Off, "is not referenced");
 function Val_Decl_P_Xref_Equation
  
  (Node : Bare_Val_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Logic_Equation
is
   Self : Bare_Val_Decl  := Bare_Val_Decl (Node);
     Ent : Internal_Entity_Val_Decl :=
       Internal_Entity_Val_Decl'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Logic_Equation;

      
            procedure Finalizer_Scope_135 with Inline_Always;

      Fld : Internal_Entity_Expr;
Fld_1 : Logic_Equation;
Fld_2 : Internal_Entity_Expr;
Fld_3 : Logic_Var;
Cast_Expr : Internal_Entity_Type_Decl;
Cast_Result : Internal_Entity;
Bind_Result : Logic_Equation;
And_Pred : Logic_Equation;
Fld_4 : Internal_Entity_Expr;
Fld_5 : Logic_Equation;
Fld_6 : Internal_Entity_Expr;
Fld_7 : Logic_Var;
Fld_8 : Internal_Entity_Type_Ref;
Fld_9 : Internal_Entity_Type_Decl;
Cast_Result_1 : Internal_Entity;
Bind_Result_1 : Logic_Equation;
And_Pred_1 : Logic_Equation;
False_Rel : Logic_Equation;
Fld_10 : Bare_Expr;
Cast_Result_2 : Bare_Lkt_Node;
Bound_Error_Location : Bare_Lkt_Node;
Fld_11 : Internal_Entity_Expr;
Fld_12 : Logic_Var;
Fld_13 : Internal_Entity_Expr;
Fld_14 : Logic_Var;
Pred : Logic_Equation;
Dyn_Var_Bind_Result : Logic_Equation;
Fld_15 : Internal_Entity_Type_Ref;
Fld_16 : Internal_Entity_Type_Decl;
Is_Null : Boolean;
If_Result : Logic_Equation;
And_Pred_2 : Logic_Equation;
Fld_17 : Internal_Entity_Type_Ref;
Is_Null_1 : Boolean;
If_Result_1 : Logic_Equation;
Fld_18 : Bare_Def_Id;
Cast_Result_3 : Bare_Lkt_Node;
Bound_Error_Location_1 : Bare_Lkt_Node;
Fld_19 : Internal_Entity_Expr;
Fld_20 : Logic_Var;
Pred_1 : Logic_Equation;
Dyn_Var_Bind_Result_1 : Logic_Equation;
And_Pred_3 : Logic_Equation;

            procedure Finalizer_Scope_135 is
            begin
                     Dec_Ref (Fld_1);
                     Dec_Ref (Bind_Result);
                     Dec_Ref (And_Pred);
                     Dec_Ref (Fld_5);
                     Dec_Ref (Bind_Result_1);
                     Dec_Ref (And_Pred_1);
                     Dec_Ref (False_Rel);
                     Dec_Ref (Pred);
                     Dec_Ref (Dyn_Var_Bind_Result);
                     Dec_Ref (If_Result);
                     Dec_Ref (And_Pred_2);
                     Dec_Ref (If_Result_1);
                     Dec_Ref (Pred_1);
                     Dec_Ref (Dyn_Var_Bind_Result_1);
                     Dec_Ref (And_Pred_3);
            end Finalizer_Scope_135;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 709 '<LogicBinaryOp And at nodes.lkt:1310:9>' And_Pred_3 nodes.lkt:1310
--# expr-start 703 '<If at nodes.lkt:1311:13>' If_Result_1 nodes.lkt:1311



--# expr-start 676 '<IsNull at nodes.lkt:1311:16>' Is_Null_1 nodes.lkt:1311
--# expr-start 675 '<FieldAccess for decl_type at nodes.lkt:1311:16>' Fld_17 nodes.lkt:1311







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_17 := Create_Internal_Entity_Type_Ref (Node => Ent.Node.Val_Decl_F_Decl_Type, Info => Ent.Info);
--# expr-done 675
Is_Null_1 := Fld_17.Node = null; 
--# expr-done 676
if Is_Null_1 then
   --# expr-start 682 '<LogicBinaryOp And at nodes.lkt:1313:17>' And_Pred nodes.lkt:1313
--# expr-start 678 '<FieldAccess for xref_equation at nodes.lkt:1313:17>' Fld_1 nodes.lkt:1313



--# expr-start 677 '<FieldAccess for expr at nodes.lkt:1313:17>' Fld nodes.lkt:1313







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Create_Internal_Entity_Expr (Node => Ent.Node.Val_Decl_F_Expr, Info => Ent.Info);
--# expr-done 677



   if Fld.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]LktNode.xref_equation'
Fld_1 := Liblktlang.Implementation.Dispatcher_Lkt_Node_P_Xref_Equation (Node => Fld.Node, E_Info => Fld.Info);
--# end
--# expr-done 678
--# expr-start 681 '<Bind at nodes.lkt:1314:22>' Bind_Result nodes.lkt:1314
--# expr-start 680 '<FieldAccess for expected_type_var at nodes.lkt:1314:22>' Fld_3 nodes.lkt:1314



--# expr-start 679 '<FieldAccess for expr at nodes.lkt:1314:22>' Fld_2 nodes.lkt:1314







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_2 := Create_Internal_Entity_Expr (Node => Ent.Node.Val_Decl_F_Expr, Info => Ent.Info);
--# expr-done 679



   if Fld_2.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_3 := Fld_2.Node.Expr_Expected_Type_Var'Unrestricted_Access;
--# expr-done 680
Fld_3.Value := No_Entity;
Entity_Vars.Reset (Fld_3);






Cast_Expr := No_Entity_Type_Decl; 



   
      Cast_Result := Create_Internal_Entity
        (Node => Cast_Expr.Node,
         Info => Cast_Expr.Info);


Bind_Result := Solver.Create_Assign (Fld_3, Cast_Result, Solver_Ifc.No_Converter, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:1314:22") else null)); 
--# expr-done 681
And_Pred := Create_And (Fld_1, Bind_Result, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:1313:17") else null)); 
--# expr-done 682
   If_Result_1 := And_Pred;
else
   --# expr-start 702 '<LogicBinaryOp And at nodes.lkt:1316:17>' And_Pred_2 nodes.lkt:1316
--# expr-start 690 '<LogicBinaryOp And at nodes.lkt:1317:21>' And_Pred_1 nodes.lkt:1317
--# expr-start 684 '<FieldAccess for xref_equation at nodes.lkt:1317:21>' Fld_5 nodes.lkt:1317



--# expr-start 683 '<FieldAccess for expr at nodes.lkt:1317:21>' Fld_4 nodes.lkt:1317







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_4 := Create_Internal_Entity_Expr (Node => Ent.Node.Val_Decl_F_Expr, Info => Ent.Info);
--# expr-done 683



   if Fld_4.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]LktNode.xref_equation'
Fld_5 := Liblktlang.Implementation.Dispatcher_Lkt_Node_P_Xref_Equation (Node => Fld_4.Node, E_Info => Fld_4.Info);
--# end
--# expr-done 684
--# expr-start 689 '<Bind at nodes.lkt:1318:26>' Bind_Result_1 nodes.lkt:1318
--# expr-start 686 '<FieldAccess for expected_type_var at nodes.lkt:1318:26>' Fld_7 nodes.lkt:1318



--# expr-start 685 '<FieldAccess for expr at nodes.lkt:1318:26>' Fld_6 nodes.lkt:1318







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_6 := Create_Internal_Entity_Expr (Node => Ent.Node.Val_Decl_F_Expr, Info => Ent.Info);
--# expr-done 685



   if Fld_6.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_7 := Fld_6.Node.Expr_Expected_Type_Var'Unrestricted_Access;
--# expr-done 686
Fld_7.Value := No_Entity;
Entity_Vars.Reset (Fld_7);





--# expr-start 688 '<FieldAccess for referenced_decl at nodes.lkt:1319:24>' Fld_9 nodes.lkt:1319



--# expr-start 687 '<FieldAccess for decl_type at nodes.lkt:1319:24>' Fld_8 nodes.lkt:1319







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_8 := Create_Internal_Entity_Type_Ref (Node => Ent.Node.Val_Decl_F_Decl_Type, Info => Ent.Info);
--# expr-done 687



   if Fld_8.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start TypeRef.referenced_decl
Fld_9 := Liblktlang.Implementation.Type_Ref_P_Referenced_Decl (Node => Fld_8.Node, E_Info => Fld_8.Info);
--# end
--# expr-done 688



   
      Cast_Result_1 := Create_Internal_Entity
        (Node => Fld_9.Node,
         Info => Fld_9.Info);


Bind_Result_1 := Solver.Create_Assign (Fld_7, Cast_Result_1, Solver_Ifc.No_Converter, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:1318:26") else null)); 
--# expr-done 689
And_Pred_1 := Create_And (Fld_5, Bind_Result_1, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:1317:21") else null)); 
--# expr-done 690
--# expr-start 701 '<If at nodes.lkt:1322:21>' If_Result nodes.lkt:1322



--# expr-start 693 '<IsNull at nodes.lkt:1322:24>' Is_Null nodes.lkt:1322
--# expr-start 692 '<FieldAccess for referenced_decl at nodes.lkt:1322:24>' Fld_16 nodes.lkt:1322



--# expr-start 691 '<FieldAccess for decl_type at nodes.lkt:1322:24>' Fld_15 nodes.lkt:1322







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_15 := Create_Internal_Entity_Type_Ref (Node => Ent.Node.Val_Decl_F_Decl_Type, Info => Ent.Info);
--# expr-done 691



   if Fld_15.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start TypeRef.referenced_decl
Fld_16 := Liblktlang.Implementation.Type_Ref_P_Referenced_Decl (Node => Fld_15.Node, E_Info => Fld_15.Info);
--# end
--# expr-done 692
Is_Null := Fld_16.Node = null; 
--# expr-done 693
if Is_Null then
   False_Rel := Solver.Create_False ((if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:1322:70") else null)); 
   If_Result := False_Rel;
else
   --# expr-start 700 '<bind at nodes.lkt:1324:25>' Dyn_Var_Bind_Result nodes.lkt:1324





--# expr-start 694 '<FieldAccess for expr at nodes.lkt:1324:47>' Fld_10 nodes.lkt:1324







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_10 := Self.Val_Decl_F_Expr;
--# expr-done 694



   
      Cast_Result_2 := Fld_10;


Bound_Error_Location := Cast_Result_2; 
--# expr-start 699 '<Predicate on TypeDecl.matching_type at nodes.lkt:1325:25>' Pred nodes.lkt:1325
--# expr-start 696 '<FieldAccess for expected_type_var at nodes.lkt:1326:29>' Fld_12 nodes.lkt:1326



--# expr-start 695 '<FieldAccess for expr at nodes.lkt:1326:29>' Fld_11 nodes.lkt:1326







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_11 := Create_Internal_Entity_Expr (Node => Ent.Node.Val_Decl_F_Expr, Info => Ent.Info);
--# expr-done 695



   if Fld_11.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_12 := Fld_11.Node.Expr_Expected_Type_Var'Unrestricted_Access;
--# expr-done 696
Fld_12.Value := No_Entity;
Entity_Vars.Reset (Fld_12);
--# expr-start 698 '<FieldAccess for actual_type_var at nodes.lkt:1327:29>' Fld_14 nodes.lkt:1327



--# expr-start 697 '<FieldAccess for expr at nodes.lkt:1327:29>' Fld_13 nodes.lkt:1327







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_13 := Create_Internal_Entity_Expr (Node => Ent.Node.Val_Decl_F_Expr, Info => Ent.Info);
--# expr-done 697



   if Fld_13.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_14 := Fld_13.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 698
Fld_14.Value := No_Entity;
Entity_Vars.Reset (Fld_14);


Pred := Solver.Create_N_Predicate ((Fld_12, Fld_14), Create_Type_Decl_P_Matching_Type_0_Predicate (2, Bound_Error_Location)); 
--# expr-done 699
Dyn_Var_Bind_Result := Pred; Inc_Ref (Dyn_Var_Bind_Result);
--# expr-done 700
   If_Result := Dyn_Var_Bind_Result;
end if;

      Inc_Ref (If_Result);


--# expr-done 701
And_Pred_2 := Create_And (And_Pred_1, If_Result, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:1316:17") else null)); 
--# expr-done 702
   If_Result_1 := And_Pred_2;
end if;

      Inc_Ref (If_Result_1);


--# expr-done 703
--# expr-start 708 '<bind at nodes.lkt:1333:13>' Dyn_Var_Bind_Result_1 nodes.lkt:1333





--# expr-start 704 '<FieldAccess for syn_name at nodes.lkt:1333:35>' Fld_18 nodes.lkt:1333







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_18 := Self.Val_Decl_F_Syn_Name;
--# expr-done 704



   
      Cast_Result_3 := Fld_18;


Bound_Error_Location_1 := Cast_Result_3; 
--# expr-start 707 '<Predicate on TypeDecl.could_determine_type at nodes.lkt:1334:13>' Pred_1 nodes.lkt:1334
--# expr-start 706 '<FieldAccess for actual_type_var at nodes.lkt:1334:44>' Fld_20 nodes.lkt:1334



--# expr-start 705 '<FieldAccess for expr at nodes.lkt:1334:44>' Fld_19 nodes.lkt:1334







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_19 := Create_Internal_Entity_Expr (Node => Ent.Node.Val_Decl_F_Expr, Info => Ent.Info);
--# expr-done 705



   if Fld_19.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_20 := Fld_19.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 706
Fld_20.Value := No_Entity;
Entity_Vars.Reset (Fld_20);

Pred_1 := Solver.Create_Predicate (Fld_20, Create_Type_Decl_P_Could_Determine_Type_0_Predicate (Bound_Error_Location_1)); 
--# expr-done 707
Dyn_Var_Bind_Result_1 := Pred_1; Inc_Ref (Dyn_Var_Bind_Result_1);
--# expr-done 708
And_Pred_3 := Create_And (If_Result_1, Dyn_Var_Bind_Result_1, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:1310:9") else null)); 
--# expr-done 709

         Property_Result := And_Pred_3;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_135;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_135;




            raise;
      end;



   return Property_Result;
end Val_Decl_P_Xref_Equation;
--# end



   


      

   --
   --  Primitives for Bare_Fun_Decl
   --

   



   

   

   

   

   

   

   


      procedure Fun_Decl_Pre_Env_Actions
        (Self            : Bare_Fun_Decl;
         State           : in out PLE_Node_State;
         Add_To_Env_Only : Boolean := False) is
      begin
            


   

      declare
         Resolver : constant Entity_Resolver :=
            null;

         

         Mapping : Internal_Env_Assoc :=
            Liblktlang.Implementation.Env_Mappings_4 (Node => 
Self);
      begin

         Add_To_Env
           (Self,
            State,
            Mapping.Key,
            Mapping.Value,
            Mapping.Metadata,
            Resolver,
            Mapping.Dest_Env,
            DSL_Location => "nodes.lkt:1386:9");
         Dec_Ref (Mapping.Dest_Env);

      end;
   
   
            


   
      if Add_To_Env_Only then
         return;
      end if;

      declare
         No_Parent         : constant Boolean :=
            False;
         Transitive_Parent : constant Boolean :=
            Liblktlang.Implementation.Env_Trans_Parent_5 (Node => 
Self);
         Names             : Symbol_Type_Array_Access :=
            null;
      begin
         Add_Env (Self, State, No_Parent, Transitive_Parent, Names);
      end;
   
   
            


   

      declare
         Resolver : constant Entity_Resolver :=
            null;

         

         Mappings : Internal_Env_Assoc_Array_Access :=
            Liblktlang.Implementation.Env_Mappings_6 (Node => 
Self);
      begin
         for Mapping of Mappings.Items loop

         Add_To_Env
           (Self,
            State,
            Mapping.Key,
            Mapping.Value,
            Mapping.Metadata,
            Resolver,
            Mapping.Dest_Env,
            DSL_Location => "nodes.lkt:1389:9");

         end loop;
         Dec_Ref (Mappings);
      end;
   
   
      end;



      
      procedure Initialize_Fields_For_Fun_Decl
        (Self : Bare_Fun_Decl
         ; Fun_Decl_F_Syn_Name : Bare_Def_Id
         ; Fun_Decl_F_Args : Bare_Fun_Arg_Decl_List
         ; Fun_Decl_F_Return_Type : Bare_Type_Ref
         ; Fun_Decl_F_Body : Bare_Expr
        ) is
      begin

            Self.Fun_Decl_F_Syn_Name := Fun_Decl_F_Syn_Name;
            Self.Fun_Decl_F_Args := Fun_Decl_F_Args;
            Self.Fun_Decl_F_Return_Type := Fun_Decl_F_Return_Type;
            Self.Fun_Decl_F_Body := Fun_Decl_F_Body;
         

      end Initialize_Fields_For_Fun_Decl;

      
   function Fun_Decl_F_Args
     (Node : Bare_Fun_Decl) return Bare_Fun_Arg_Decl_List
   is
      

   begin
         
         return Node.Fun_Decl_F_Args;
      
   end;

      
   function Fun_Decl_F_Return_Type
     (Node : Bare_Fun_Decl) return Bare_Type_Ref
   is
      

   begin
         
         return Node.Fun_Decl_F_Return_Type;
      
   end;

      
   function Fun_Decl_F_Body
     (Node : Bare_Fun_Decl) return Bare_Expr
   is
      

   begin
         
         return Node.Fun_Decl_F_Body;
      
   end;


   







--# property-start FunDecl.decl_type_name nodes.lkt:1350
pragma Warnings (Off, "is not referenced");
 function Fun_Decl_P_Decl_Type_Name
  
  (Node : Bare_Fun_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return String_Type
is
   Self : Bare_Fun_Decl  := Bare_Fun_Decl (Node);
      --# bind self Self

   


   Property_Result : String_Type;

      
            procedure Finalizer_Scope_136 with Inline_Always;

      Str : String_Type;

            procedure Finalizer_Scope_136 is
            begin
                     Dec_Ref (Str);
            end Finalizer_Scope_136;


begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         --# expr-start 710 '<String at nodes.lkt:1350:36>' Str nodes.lkt:1350
Str := Create_String ("function declaration"); 
--# expr-done 710

         Property_Result := Str;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_136;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_136;




            raise;
      end;



   return Property_Result;
end Fun_Decl_P_Decl_Type_Name;
--# end

   







--# property-start FunDecl.owning_type nodes.lkt:1352
pragma Warnings (Off, "is not referenced");
 function Fun_Decl_P_Owning_Type
  
  (Node : Bare_Fun_Decl
  )

   return Bare_Type_Decl
is
   Self : Bare_Fun_Decl  := Bare_Fun_Decl (Node);
      --# bind self Self

   


   Property_Result : Bare_Type_Decl;

      
            procedure Finalizer_Scope_137 with Inline_Always;

      Node_Parents : Bare_Lkt_Node_Array_Access;
Is_A : Boolean;
Find_Result : Bare_Lkt_Node;
Cast_Result : Bare_Type_Decl;

            procedure Finalizer_Scope_137 is
            begin
                     Dec_Ref (Node_Parents);
            end Finalizer_Scope_137;


begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         --# expr-start 714 '<Cast to TypeDecl at nodes.lkt:1353:9>' Cast_Result nodes.lkt:1353





--# expr-start 713 '<Find at nodes.lkt:1353:9>' Find_Result nodes.lkt:1353








   

   --# expr-start 711 '<FieldAccess for parents at nodes.lkt:1353:9>' Node_Parents nodes.lkt:1353







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;



Node_Parents := Parents (Self, True); 
--# expr-done 711

   
      Find_Result := No_Bare_Lkt_Node;
   

   

      

      declare
         
         Collection : constant Bare_Lkt_Node_Array_Access := Node_Parents;
      begin
         for Item_0 of
               Collection.Items
         loop

            
   --# scope-start


               --# bind t Item_0

            
      --# expr-start 712 '<IsA TypeDecl at nodes.lkt:1353:36>' Is_A nodes.lkt:1353

Is_A := Item_0 /= null 
and then Item_0.Kind in Lkt_Type_Decl; 
--# expr-done 712
      if Is_A then
         Find_Result := Item_0; 
      end if;
   

            
   --# end


               exit when Is_A;

         end loop;
      end;
   

   
   



--# expr-done 713



   if Find_Result = null
      or else Find_Result.Kind in Lkt_Type_Decl
   then
      
      Cast_Result := Find_Result;

   else
         Cast_Result := No_Bare_Lkt_Node;
   end if;


--# expr-done 714

         Property_Result := Cast_Result;
         
   --# end
      Finalizer_Scope_137;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_137;




            raise;
      end;



   return Property_Result;
end Fun_Decl_P_Owning_Type;
--# end

   







--# property-start FunDecl.is_dynamic_combiner nodes.lkt:1358
pragma Warnings (Off, "is not referenced");
 function Fun_Decl_P_Is_Dynamic_Combiner
  
  (Node : Bare_Fun_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Boolean
is
   Self : Bare_Fun_Decl  := Bare_Fun_Decl (Node);
     Ent : Internal_Entity_Fun_Decl :=
       Internal_Entity_Fun_Decl'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Boolean;

      

      Var_Expr_26 : Internal_Entity_Fun_Arg_Decl;
Fld : Internal_Entity_Fun_Arg_Decl_List;
Fld_1 : Bare_Fun_Arg_Decl_List;
Fld_2 : Internal_Entity_Info;
Get_Result : Bare_Fun_Arg_Decl;
As_Entity : Internal_Entity_Fun_Arg_Decl;
Is_Null : Boolean;
If_Result : Internal_Entity_Fun_Arg_Decl;
Fld_3 : Internal_Entity_Type_Decl;
Fld_4 : Bare_Type_Decl;
Scope_Result : Bare_Type_Decl;
Result_Var : Bare_Type_Decl;
Fld_5 : Internal_Entity_Named_Type_Decl;
Fld_6 : Bare_Named_Type_Decl;
Cast_Result : Bare_Type_Decl;
Is_Equal : Boolean;



begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

            Populate_Lexical_Env_For_Unit (Self);
      end if;


      begin
         
   --# scope-start

         --# expr-start 720 '<Eq at nodes.lkt:1359:9>' Is_Equal nodes.lkt:1359



--# expr-start 715 '<FieldAccess for args at nodes.lkt:1359:9>' Fld nodes.lkt:1359







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Create_Internal_Entity_Fun_Arg_Decl_List (Node => Ent.Node.Fun_Decl_F_Args, Info => Ent.Info);
--# expr-done 715













Fld_1 := Fld.Node;


Get_Result := Get (Self, Fld_1, 0, True); 
Is_Null := Get_Result = null; 
if Is_Null then
   
   If_Result := No_Entity_Fun_Arg_Decl;
else
   








Fld_2 := Fld.Info;

As_Entity := (Info => Fld_2, Node => Get_Result); 
   If_Result := As_Entity;
end if;



Var_Expr_26 := If_Result;





if Var_Expr_26 /= No_Entity_Fun_Arg_Decl then
   



   --# scope-start


   

--# expr-start 717 '<FieldAccess for node at nodes.lkt:1359:9>' Fld_4 nodes.lkt:1359



--# expr-start 716 '<FieldAccess for get_type at nodes.lkt:1359:9>' Fld_3 nodes.lkt:1359







   if Var_Expr_26.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start Decl.get_type
Fld_3 := Liblktlang.Implementation.Decl_P_Get_Type (Node => Var_Expr_26.Node, E_Info => Var_Expr_26.Info);
--# end
--# expr-done 716





Fld_4 := Fld_3.Node;
--# expr-done 717
Scope_Result := Fld_4;


   --# end


   Result_Var := Scope_Result;
else
   
   Result_Var := No_Bare_Lkt_Node;
end if;








--# expr-start 719 '<FieldAccess for node at nodes.lkt:1359:43>' Fld_6 nodes.lkt:1359



--# expr-start 718 '<FieldAccess for array_type at nodes.lkt:1359:43>' Fld_5 nodes.lkt:1359







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start LktNode.array_type
Fld_5 := Liblktlang.Implementation.Lkt_Node_P_Array_Type (Node => Ent.Node);
--# end
--# expr-done 718





Fld_6 := Fld_5.Node;
--# expr-done 719



   
      Cast_Result := Fld_6;


Is_Equal := Result_Var = Cast_Result; 
--# expr-done 720

         Property_Result := Is_Equal;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Fun_Decl_P_Is_Dynamic_Combiner;
--# end

   







--# property-start FunDecl.xref_equation nodes.lkt:1361
pragma Warnings (Off, "is not referenced");
 function Fun_Decl_P_Xref_Equation
  
  (Node : Bare_Fun_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Logic_Equation
is
   Self : Bare_Fun_Decl  := Bare_Fun_Decl (Node);
     Ent : Internal_Entity_Fun_Decl :=
       Internal_Entity_Fun_Decl'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Logic_Equation;

      
            procedure Finalizer_Scope_139 with Inline_Always;

      True_Rel : Logic_Equation;
Fld : Internal_Entity_Expr;
Fld_1 : Logic_Equation;
Fld_2 : Internal_Entity_Expr;
Fld_3 : Logic_Var;
Fld_4 : Internal_Entity_Type_Ref;
Fld_5 : Internal_Entity_Type_Decl;
Cast_Result : Internal_Entity;
Bind_Result : Logic_Equation;
And_Pred : Logic_Equation;
Fld_6 : Bare_Expr;
Cast_Result_1 : Bare_Lkt_Node;
Bound_Error_Location : Bare_Lkt_Node;
Fld_7 : Internal_Entity_Expr;
Fld_8 : Logic_Var;
Fld_9 : Internal_Entity_Expr;
Fld_10 : Logic_Var;
Pred : Logic_Equation;
Dyn_Var_Bind_Result : Logic_Equation;
And_Pred_1 : Logic_Equation;
Fld_11 : Internal_Entity_Expr;
Is_Null : Boolean;
If_Result : Logic_Equation;

            procedure Finalizer_Scope_139 is
            begin
                     Dec_Ref (True_Rel);
                     Dec_Ref (Fld_1);
                     Dec_Ref (Bind_Result);
                     Dec_Ref (And_Pred);
                     Dec_Ref (Pred);
                     Dec_Ref (Dyn_Var_Bind_Result);
                     Dec_Ref (And_Pred_1);
                     Dec_Ref (If_Result);
            end Finalizer_Scope_139;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 739 '<If at nodes.lkt:1362:9>' If_Result nodes.lkt:1362



--# expr-start 722 '<IsNull at nodes.lkt:1362:12>' Is_Null nodes.lkt:1362
--# expr-start 721 '<FieldAccess for body at nodes.lkt:1362:12>' Fld_11 nodes.lkt:1362







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_11 := Create_Internal_Entity_Expr (Node => Ent.Node.Fun_Decl_F_Body, Info => Ent.Info);
--# expr-done 721
Is_Null := Fld_11.Node = null; 
--# expr-done 722
if Is_Null then
   True_Rel := Solver.Create_True ((if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:1362:35") else null)); 
   If_Result := True_Rel;
else
   --# expr-start 738 '<LogicBinaryOp And at nodes.lkt:1364:13>' And_Pred_1 nodes.lkt:1364
--# expr-start 730 '<LogicBinaryOp And at nodes.lkt:1365:17>' And_Pred nodes.lkt:1365
--# expr-start 724 '<FieldAccess for xref_equation at nodes.lkt:1365:17>' Fld_1 nodes.lkt:1365



--# expr-start 723 '<FieldAccess for body at nodes.lkt:1365:17>' Fld nodes.lkt:1365







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Create_Internal_Entity_Expr (Node => Ent.Node.Fun_Decl_F_Body, Info => Ent.Info);
--# expr-done 723



   if Fld.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]LktNode.xref_equation'
Fld_1 := Liblktlang.Implementation.Dispatcher_Lkt_Node_P_Xref_Equation (Node => Fld.Node, E_Info => Fld.Info);
--# end
--# expr-done 724
--# expr-start 729 '<Bind at nodes.lkt:1366:22>' Bind_Result nodes.lkt:1366
--# expr-start 726 '<FieldAccess for expected_type_var at nodes.lkt:1366:22>' Fld_3 nodes.lkt:1366



--# expr-start 725 '<FieldAccess for body at nodes.lkt:1366:22>' Fld_2 nodes.lkt:1366







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_2 := Create_Internal_Entity_Expr (Node => Ent.Node.Fun_Decl_F_Body, Info => Ent.Info);
--# expr-done 725



   if Fld_2.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_3 := Fld_2.Node.Expr_Expected_Type_Var'Unrestricted_Access;
--# expr-done 726
Fld_3.Value := No_Entity;
Entity_Vars.Reset (Fld_3);





--# expr-start 728 '<FieldAccess for referenced_decl at nodes.lkt:1367:20>' Fld_5 nodes.lkt:1367



--# expr-start 727 '<FieldAccess for return_type at nodes.lkt:1367:20>' Fld_4 nodes.lkt:1367







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_4 := Create_Internal_Entity_Type_Ref (Node => Ent.Node.Fun_Decl_F_Return_Type, Info => Ent.Info);
--# expr-done 727



   if Fld_4.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start TypeRef.referenced_decl
Fld_5 := Liblktlang.Implementation.Type_Ref_P_Referenced_Decl (Node => Fld_4.Node, E_Info => Fld_4.Info);
--# end
--# expr-done 728



   
      Cast_Result := Create_Internal_Entity
        (Node => Fld_5.Node,
         Info => Fld_5.Info);


Bind_Result := Solver.Create_Assign (Fld_3, Cast_Result, Solver_Ifc.No_Converter, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:1366:22") else null)); 
--# expr-done 729
And_Pred := Create_And (Fld_1, Bind_Result, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:1365:17") else null)); 
--# expr-done 730
--# expr-start 737 '<bind at nodes.lkt:1370:17>' Dyn_Var_Bind_Result nodes.lkt:1370





--# expr-start 731 '<FieldAccess for body at nodes.lkt:1370:39>' Fld_6 nodes.lkt:1370







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_6 := Self.Fun_Decl_F_Body;
--# expr-done 731



   
      Cast_Result_1 := Fld_6;


Bound_Error_Location := Cast_Result_1; 
--# expr-start 736 '<Predicate on TypeDecl.matching_type at nodes.lkt:1371:17>' Pred nodes.lkt:1371
--# expr-start 733 '<FieldAccess for expected_type_var at nodes.lkt:1372:21>' Fld_8 nodes.lkt:1372



--# expr-start 732 '<FieldAccess for body at nodes.lkt:1372:21>' Fld_7 nodes.lkt:1372







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_7 := Create_Internal_Entity_Expr (Node => Ent.Node.Fun_Decl_F_Body, Info => Ent.Info);
--# expr-done 732



   if Fld_7.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_8 := Fld_7.Node.Expr_Expected_Type_Var'Unrestricted_Access;
--# expr-done 733
Fld_8.Value := No_Entity;
Entity_Vars.Reset (Fld_8);
--# expr-start 735 '<FieldAccess for actual_type_var at nodes.lkt:1373:21>' Fld_10 nodes.lkt:1373



--# expr-start 734 '<FieldAccess for body at nodes.lkt:1373:21>' Fld_9 nodes.lkt:1373







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_9 := Create_Internal_Entity_Expr (Node => Ent.Node.Fun_Decl_F_Body, Info => Ent.Info);
--# expr-done 734



   if Fld_9.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_10 := Fld_9.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 735
Fld_10.Value := No_Entity;
Entity_Vars.Reset (Fld_10);


Pred := Solver.Create_N_Predicate ((Fld_8, Fld_10), Create_Type_Decl_P_Matching_Type_0_Predicate (2, Bound_Error_Location)); 
--# expr-done 736
Dyn_Var_Bind_Result := Pred; Inc_Ref (Dyn_Var_Bind_Result);
--# expr-done 737
And_Pred_1 := Create_And (And_Pred, Dyn_Var_Bind_Result, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:1364:13") else null)); 
--# expr-done 738
   If_Result := And_Pred_1;
end if;

      Inc_Ref (If_Result);


--# expr-done 739

         Property_Result := If_Result;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_139;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_139;




            raise;
      end;



   return Property_Result;
end Fun_Decl_P_Xref_Equation;
--# end

   







--# property-start FunDecl.function_type_aux nodes.lkt:1378
pragma Warnings (Off, "is not referenced");
 function Fun_Decl_P_Function_Type_Aux
  
  (Node : Bare_Fun_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Internal_Entity_Function_Type
is
   Self : Bare_Fun_Decl  := Bare_Fun_Decl (Node);
     Ent : Internal_Entity_Fun_Decl :=
       Internal_Entity_Fun_Decl'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Internal_Entity_Function_Type;

      
            procedure Finalizer_Scope_140 with Inline_Always;

      Fld : Internal_Entity_Fun_Arg_Decl_List;
Fld_1 : Bare_Fun_Arg_Decl_List;
Fld_2 : Internal_Entity_Info;
Item_0 : Internal_Entity_Fun_Arg_Decl;
Bare_Item_0 : Bare_Fun_Arg_Decl;
Fld_3 : Internal_Entity_Type_Decl;
As_Entity : Internal_Entity_Fun_Arg_Decl;
Is_Null : Boolean;
If_Result : Internal_Entity_Fun_Arg_Decl;
Map_Result : Internal_Entity_Type_Decl_Array_Access;
Fld_4 : Internal_Entity_Type_Ref;
Fld_5 : Internal_Entity_Type_Decl;
Cast_Expr : Internal_Entity_Fun_Decl;
Cast_Result : Internal_Entity_Decl;
Fld_6 : Internal_Entity_Function_Type;

            procedure Finalizer_Scope_140 is
            begin
                     Dec_Ref (Map_Result);
            end Finalizer_Scope_140;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 745 '<FieldAccess for function_type_helper at nodes.lkt:1379:9>' Fld_6 nodes.lkt:1379







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# expr-start 742 '<Map at nodes.lkt:1380:13>' Map_Result nodes.lkt:1380








   

   --# expr-start 740 '<FieldAccess for args at nodes.lkt:1380:13>' Fld nodes.lkt:1380







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Create_Internal_Entity_Fun_Arg_Decl_List (Node => Ent.Node.Fun_Decl_F_Args, Info => Ent.Info);
--# expr-done 740









Fld_1 := Fld.Node;

   
      declare
         Map_Result_Vec : Internal_Entity_Type_Decl_Vectors.Vector;
      begin
   

   

      if Fld_1 = null then
         
      Map_Result := Create_Internal_Entity_Type_Decl_Array (0);
   
      else
         

      declare
         
         Collection : constant Bare_Fun_Arg_Decl_List := Fld_1;
      begin
         for Untyped_Item_0 of
               Collection.Nodes (1 .. Children_Count (Collection))
         loop
                  
                  Bare_Item_0 := Untyped_Item_0; 
                  



Is_Null := Bare_Item_0 = null; 
if Is_Null then
   
   If_Result := No_Entity_Fun_Arg_Decl;
else
   








Fld_2 := Fld.Info;

As_Entity := (Info => Fld_2, Node => Bare_Item_0); 
   If_Result := As_Entity;
end if;



                  Item_0 := If_Result; 

            
   --# scope-start


               --# bind a Item_0

            
         
         
      --# expr-start 741 '<FieldAccess for get_type at nodes.lkt:1380:34>' Fld_3 nodes.lkt:1380







   if Item_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start Decl.get_type
Fld_3 := Liblktlang.Implementation.Decl_P_Get_Type (Node => Item_0.Node, E_Info => Item_0.Info);
--# end
--# expr-done 741
      

         declare
            Item_To_Append : constant Internal_Entity_Type_Decl := Fld_3;
         begin
            Internal_Entity_Type_Decl_Vectors.Append (Map_Result_Vec, Item_To_Append);
         end;
   
   
   

            
   --# end



         end loop;
      end;
   
      end if;

   

         Map_Result := Create_Internal_Entity_Type_Decl_Array
           (Items_Count => Natural (Internal_Entity_Type_Decl_Vectors.Length (Map_Result_Vec)));
         for I in Map_Result.Items'Range loop
            Map_Result.Items (I) := Internal_Entity_Type_Decl_Vectors.Get
              (Map_Result_Vec,
               I + Internal_Entity_Type_Decl_Vectors.Index_Type'First - Map_Result.Items'First);
         end loop;
         Internal_Entity_Type_Decl_Vectors.Destroy (Map_Result_Vec);

      end;
   



--# expr-done 742
--# expr-start 744 '<FieldAccess for referenced_decl at nodes.lkt:1381:13>' Fld_5 nodes.lkt:1381



--# expr-start 743 '<FieldAccess for return_type at nodes.lkt:1381:13>' Fld_4 nodes.lkt:1381







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_4 := Create_Internal_Entity_Type_Ref (Node => Ent.Node.Fun_Decl_F_Return_Type, Info => Ent.Info);
--# expr-done 743



   if Fld_4.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start TypeRef.referenced_decl
Fld_5 := Liblktlang.Implementation.Type_Ref_P_Referenced_Decl (Node => Fld_4.Node, E_Info => Fld_4.Info);
--# end
--# expr-done 744






Cast_Expr := Ent; 



   
      Cast_Result := Create_Internal_Entity_Decl
        (Node => Cast_Expr.Node,
         Info => Cast_Expr.Info);


--# property-call-start LktNode.function_type_helper
Fld_6 := Liblktlang.Implementation.Lkt_Node_P_Function_Type_Helper (Node => Ent.Node, Args_Types => Map_Result, Return_Type => Fld_5, Origin => Cast_Result, E_Info => Ent.Info);
--# end
--# expr-done 745

         Property_Result := Fld_6;
         
   --# end
      Finalizer_Scope_140;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_140;




            raise;
      end;



   return Property_Result;
end Fun_Decl_P_Function_Type_Aux;
--# end

   







--# property-start FunDecl._env_mappings_4 nodes.lkt:1386
pragma Warnings (Off, "is not referenced");
 function Env_Mappings_4
  
  (Node : Bare_Fun_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Internal_Env_Assoc
is
   Self : Bare_Fun_Decl  := Bare_Fun_Decl (Node);
     Ent : Internal_Entity_Fun_Decl :=
       Internal_Entity_Fun_Decl'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Internal_Env_Assoc;

      
            procedure Finalizer_Scope_380 with Inline_Always;

      Fld : Symbol_Type;
New_Struct : Internal_Designated_Env := No_Designated_Env;
Cast_Expr : Bare_Fun_Decl;
Cast_Result : Bare_Lkt_Node;
New_Struct_1 : Internal_Env_Assoc := No_Env_Assoc;

            procedure Finalizer_Scope_380 is
            begin
                     Dec_Ref (New_Struct);
                     Dec_Ref (New_Struct_1);
            end Finalizer_Scope_380;


begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         --# expr-start 748 '<New EnvAssoc at ???>' New_Struct_1 None
--# expr-start 746 '<New DesignatedEnv at ???>' New_Struct None



Inc_Ref (Empty_Env);
New_Struct := (Direct_Env => Empty_Env, Env_Name => No_Symbol, Kind => Current_Env); 
--# expr-done 746
--# expr-start 747 '<FieldAccess for name at nodes.lkt:1386:23>' Fld nodes.lkt:1386







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]Decl.name'
Fld := Liblktlang.Implementation.Dispatcher_Decl_P_Name (Node => Ent.Node);
--# end
--# expr-done 747







Cast_Expr := Self; 



   
      Cast_Result := Cast_Expr;


Inc_Ref (New_Struct);
New_Struct_1 := (Dest_Env => New_Struct, Key => Fld, Metadata => No_Metadata, Value => Cast_Result); 
--# expr-done 748

         Property_Result := New_Struct_1;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_380;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_380;




            raise;
      end;



   return Property_Result;
end Env_Mappings_4;
--# end

   







--# property-start FunDecl._env_trans_parent_5 '<builtin>:0'
pragma Warnings (Off, "is not referenced");
 function Env_Trans_Parent_5
  
  (Node : Bare_Fun_Decl
  )

   return Boolean
is
   Self : Bare_Fun_Decl  := Bare_Fun_Decl (Node);
      --# bind self Self

   


   Property_Result : Boolean;

      

      



begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         

         Property_Result := False;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Env_Trans_Parent_5;
--# end

   







--# property-start FunDecl._env_mappings_6 nodes.lkt:1390
pragma Warnings (Off, "is not referenced");
 function Env_Mappings_6
  
  (Node : Bare_Fun_Decl
  )

   return Internal_Env_Assoc_Array_Access
is
   Self : Bare_Fun_Decl  := Bare_Fun_Decl (Node);
      --# bind self Self

   


   Property_Result : Internal_Env_Assoc_Array_Access;

      
            procedure Finalizer_Scope_382 with Inline_Always;
            procedure Finalizer_Scope_530 with Inline_Always;

      Var_Expr_0 : Bare_Type_Decl;
Fld : Bare_Type_Decl;
Sym : Symbol_Type;
Fld_1 : Bare_Self_Decl;
New_Struct : Internal_Designated_Env := No_Designated_Env;
Cast_Result : Bare_Lkt_Node;
New_Struct_1 : Internal_Env_Assoc := No_Env_Assoc;
Sym_1 : Symbol_Type;
Fld_2 : Bare_Node_Decl;
New_Struct_2 : Internal_Designated_Env := No_Designated_Env;
Cast_Result_1 : Bare_Lkt_Node;
New_Struct_3 : Internal_Env_Assoc := No_Env_Assoc;
Array_Lit : Internal_Env_Assoc_Array_Access;
Scope_Result : Internal_Env_Assoc_Array_Access;
Result_Var : Internal_Env_Assoc_Array_Access;

            procedure Finalizer_Scope_382 is
            begin
                     Dec_Ref (Scope_Result);
                     Dec_Ref (Result_Var);
            end Finalizer_Scope_382;
            procedure Finalizer_Scope_530 is
            begin
                     Dec_Ref (New_Struct);
                     Dec_Ref (New_Struct_1);
                     Dec_Ref (New_Struct_2);
                     Dec_Ref (New_Struct_3);
                     Dec_Ref (Array_Lit);
            end Finalizer_Scope_530;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         


--# expr-start 749 '<FieldAccess for owning_type at nodes.lkt:1390:13>' Fld nodes.lkt:1390







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start FunDecl.owning_type
Fld := Liblktlang.Implementation.Fun_Decl_P_Owning_Type (Node => Self);
--# end
--# expr-done 749
Var_Expr_0 := Fld;





if Var_Expr_0 /= No_Bare_Lkt_Node then
   



   --# scope-start


   --# bind ot Var_Expr_0

--# expr-start 758 '<ArrayLiteral at nodes.lkt:1392:17>' Array_Lit nodes.lkt:1392
--# expr-start 753 '<New EnvAssoc at nodes.lkt:1393:21>' New_Struct_1 nodes.lkt:1393
--# expr-start 750 '<New DesignatedEnv at nodes.lkt:1396:34>' New_Struct nodes.lkt:1396



Inc_Ref (Empty_Env);
New_Struct := (Direct_Env => Empty_Env, Env_Name => No_Symbol, Kind => Current_Env); 
--# expr-done 750
--# expr-start 751 '<Symbol self at nodes.lkt:1394:29>' Sym nodes.lkt:1394
Sym := Precomputed_Symbol (Precomputed_Symbol_Table (Self.Unit.Context.Symbols), Precomputed_Sym_Self); 
--# expr-done 751






--# expr-start 752 '<FieldAccess for self_decl at nodes.lkt:1395:31>' Fld_1 nodes.lkt:1395







   if Var_Expr_0 = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start TypeDecl.self_decl
Fld_1 := Liblktlang.Implementation.Type_Decl_P_Self_Decl (Node => Var_Expr_0);
--# end
--# expr-done 752



   
      Cast_Result := Fld_1;


Inc_Ref (New_Struct);
New_Struct_1 := (Dest_Env => New_Struct, Key => Sym, Metadata => No_Metadata, Value => Cast_Result); 
--# expr-done 753
--# expr-start 757 '<New EnvAssoc at nodes.lkt:1403:21>' New_Struct_3 nodes.lkt:1403
--# expr-start 754 '<New DesignatedEnv at nodes.lkt:1406:34>' New_Struct_2 nodes.lkt:1406



Inc_Ref (Empty_Env);
New_Struct_2 := (Direct_Env => Empty_Env, Env_Name => No_Symbol, Kind => Current_Env); 
--# expr-done 754
--# expr-start 755 '<Symbol node at nodes.lkt:1404:29>' Sym_1 nodes.lkt:1404
Sym_1 := Precomputed_Symbol (Precomputed_Symbol_Table (Self.Unit.Context.Symbols), Precomputed_Sym_Node_47); 
--# expr-done 755






--# expr-start 756 '<FieldAccess for node_decl at nodes.lkt:1405:31>' Fld_2 nodes.lkt:1405







   if Var_Expr_0 = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start TypeDecl.node_decl
Fld_2 := Liblktlang.Implementation.Type_Decl_P_Node_Decl (Node => Var_Expr_0);
--# end
--# expr-done 756



   
      Cast_Result_1 := Fld_2;


Inc_Ref (New_Struct_2);
New_Struct_3 := (Dest_Env => New_Struct_2, Key => Sym_1, Metadata => No_Metadata, Value => Cast_Result_1); 
--# expr-done 757
Array_Lit := Create_Internal_Env_Assoc_Array (Internal_Internal_Env_Assoc_Array'(1 => New_Struct_1, 2 => New_Struct_3)); 
--# expr-done 758
Scope_Result := Array_Lit;
   Inc_Ref (Scope_Result);


   --# end
      Finalizer_Scope_530;


   Result_Var := Scope_Result;
else
   
   Result_Var := No_Internal_Env_Assoc_Array_Type;
end if;

      Inc_Ref (Result_Var);



         Property_Result := Result_Var;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_382;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_382;
                     Finalizer_Scope_530;




            raise;
      end;



   return Property_Result;
end Env_Mappings_6;
--# end



   


      

   --
   --  Primitives for Bare_Env_Spec_Decl
   --

   



   

   

   

   

   

   

   


      procedure Env_Spec_Decl_Pre_Env_Actions
        (Self            : Bare_Env_Spec_Decl;
         State           : in out PLE_Node_State;
         Add_To_Env_Only : Boolean := False) is
      begin
            


   
      if Add_To_Env_Only then
         return;
      end if;

      declare
         No_Parent         : constant Boolean :=
            False;
         Transitive_Parent : constant Boolean :=
            Liblktlang.Implementation.Env_Trans_Parent_7 (Node => 
Self);
         Names             : Symbol_Type_Array_Access :=
            null;
      begin
         Add_Env (Self, State, No_Parent, Transitive_Parent, Names);
      end;
   
   
            


   

      declare
         Resolver : constant Entity_Resolver :=
            null;

         

         Mappings : Internal_Env_Assoc_Array_Access :=
            Liblktlang.Implementation.Env_Mappings_8 (Node => 
Self);
      begin
         for Mapping of Mappings.Items loop

         Add_To_Env
           (Self,
            State,
            Mapping.Key,
            Mapping.Value,
            Mapping.Metadata,
            Resolver,
            Mapping.Dest_Env,
            DSL_Location => "nodes.lkt:1456:9");

         end loop;
         Dec_Ref (Mappings);
      end;
   
   
      end;



      
      procedure Initialize_Fields_For_Env_Spec_Decl
        (Self : Bare_Env_Spec_Decl
         ; Env_Spec_Decl_F_Syn_Name : Bare_Def_Id
         ; Env_Spec_Decl_F_Actions : Bare_Call_Expr_List
        ) is
      begin

            Self.Env_Spec_Decl_F_Syn_Name := Env_Spec_Decl_F_Syn_Name;
            Self.Env_Spec_Decl_F_Actions := Env_Spec_Decl_F_Actions;
         

      end Initialize_Fields_For_Env_Spec_Decl;

      
   function Env_Spec_Decl_F_Actions
     (Node : Bare_Env_Spec_Decl) return Bare_Call_Expr_List
   is
      

   begin
         
         return Node.Env_Spec_Decl_F_Actions;
      
   end;


   







--# property-start EnvSpecDecl.owning_type nodes.lkt:1429
pragma Warnings (Off, "is not referenced");
 function Env_Spec_Decl_P_Owning_Type
  
  (Node : Bare_Env_Spec_Decl
  )

   return Bare_Type_Decl
is
   Self : Bare_Env_Spec_Decl  := Bare_Env_Spec_Decl (Node);
      --# bind self Self

   


   Property_Result : Bare_Type_Decl;

      
            procedure Finalizer_Scope_141 with Inline_Always;

      Node_Parents : Bare_Lkt_Node_Array_Access;
Is_A : Boolean;
Find_Result : Bare_Lkt_Node;
Cast_Result : Bare_Type_Decl;

            procedure Finalizer_Scope_141 is
            begin
                     Dec_Ref (Node_Parents);
            end Finalizer_Scope_141;


begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         --# expr-start 762 '<Cast to TypeDecl at nodes.lkt:1430:9>' Cast_Result nodes.lkt:1430





--# expr-start 761 '<Find at nodes.lkt:1430:9>' Find_Result nodes.lkt:1430








   

   --# expr-start 759 '<FieldAccess for parents at nodes.lkt:1430:9>' Node_Parents nodes.lkt:1430







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;



Node_Parents := Parents (Self, True); 
--# expr-done 759

   
      Find_Result := No_Bare_Lkt_Node;
   

   

      

      declare
         
         Collection : constant Bare_Lkt_Node_Array_Access := Node_Parents;
      begin
         for Item_0 of
               Collection.Items
         loop

            
   --# scope-start


               --# bind t Item_0

            
      --# expr-start 760 '<IsA TypeDecl at nodes.lkt:1430:36>' Is_A nodes.lkt:1430

Is_A := Item_0 /= null 
and then Item_0.Kind in Lkt_Type_Decl; 
--# expr-done 760
      if Is_A then
         Find_Result := Item_0; 
      end if;
   

            
   --# end


               exit when Is_A;

         end loop;
      end;
   

   
   



--# expr-done 761



   if Find_Result = null
      or else Find_Result.Kind in Lkt_Type_Decl
   then
      
      Cast_Result := Find_Result;

   else
         Cast_Result := No_Bare_Lkt_Node;
   end if;


--# expr-done 762

         Property_Result := Cast_Result;
         
   --# end
      Finalizer_Scope_141;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_141;




            raise;
      end;



   return Property_Result;
end Env_Spec_Decl_P_Owning_Type;
--# end

   







--# property-start EnvSpecDecl.decl_type_name nodes.lkt:1432
pragma Warnings (Off, "is not referenced");
 function Env_Spec_Decl_P_Decl_Type_Name
  
  (Node : Bare_Env_Spec_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return String_Type
is
   Self : Bare_Env_Spec_Decl  := Bare_Env_Spec_Decl (Node);
      --# bind self Self

   


   Property_Result : String_Type;

      
            procedure Finalizer_Scope_142 with Inline_Always;

      Str : String_Type;

            procedure Finalizer_Scope_142 is
            begin
                     Dec_Ref (Str);
            end Finalizer_Scope_142;


begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         --# expr-start 763 '<String at nodes.lkt:1432:36>' Str nodes.lkt:1432
Str := Create_String ("env spec declaration"); 
--# expr-done 763

         Property_Result := Str;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_142;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_142;




            raise;
      end;



   return Property_Result;
end Env_Spec_Decl_P_Decl_Type_Name;
--# end

   







--# property-start EnvSpecDecl.xref_entry_point nodes.lkt:1434
pragma Warnings (Off, "is not referenced");
 function Env_Spec_Decl_P_Xref_Entry_Point
  
  (Node : Bare_Env_Spec_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Boolean
is
   Self : Bare_Env_Spec_Decl  := Bare_Env_Spec_Decl (Node);
      --# bind self Self

   


   Property_Result : Boolean;

      

      



begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         

         Property_Result := True;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Env_Spec_Decl_P_Xref_Entry_Point;
--# end

   







--# property-start EnvSpecDecl.xref_equation nodes.lkt:1436
pragma Warnings (Off, "is not referenced");
 function Env_Spec_Decl_P_Xref_Equation
  
  (Node : Bare_Env_Spec_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Logic_Equation
is
   Self : Bare_Env_Spec_Decl  := Bare_Env_Spec_Decl (Node);
     Ent : Internal_Entity_Env_Spec_Decl :=
       Internal_Entity_Env_Spec_Decl'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Logic_Equation;

      
            procedure Finalizer_Scope_144 with Inline_Always;
            procedure Finalizer_Scope_533 with Inline_Always;

      Fld : Internal_Entity_Call_Expr_List;
Fld_1 : Bare_Call_Expr_List;
Fld_2 : Internal_Entity_Info;
Item_0 : Internal_Entity_Call_Expr;
Bare_Item_0 : Bare_Call_Expr;
Fld_3 : Logic_Equation;
Fld_4 : Logic_Var;
Sym : Symbol_Type;
Fld_5 : Internal_Entity_Named_Type_Decl;
Cast_Result : Internal_Entity;
Bind_Result : Logic_Equation;
And_Pred : Logic_Equation;
Fld_6 : Bare_Call_Expr;
Cast_Result_1 : Bare_Lkt_Node;
Bound_Error_Location : Bare_Lkt_Node;
Fld_7 : Logic_Var;
Fld_8 : Logic_Var;
Pred : Logic_Equation;
Dyn_Var_Bind_Result : Logic_Equation;
And_Pred_1 : Logic_Equation;
As_Entity : Internal_Entity_Call_Expr;
Is_Null : Boolean;
If_Result : Internal_Entity_Call_Expr;
Map_Result : Logic_Equation_Array_Access;
Logic_Boolean_Op : Logic_Equation;

            procedure Finalizer_Scope_144 is
            begin
                     Dec_Ref (Map_Result);
                     Dec_Ref (Logic_Boolean_Op);
            end Finalizer_Scope_144;
            procedure Finalizer_Scope_533 is
            begin
                     Dec_Ref (Fld_3);
                     Dec_Ref (Bind_Result);
                     Dec_Ref (And_Pred);
                     Dec_Ref (Pred);
                     Dec_Ref (Dyn_Var_Bind_Result);
                     Dec_Ref (And_Pred_1);
            end Finalizer_Scope_533;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 778 '<LogicAll at nodes.lkt:1437:9>' Logic_Boolean_Op nodes.lkt:1437
--# expr-start 777 '<Map at nodes.lkt:1437:9>' Map_Result nodes.lkt:1437








   

   --# expr-start 764 '<FieldAccess for actions at nodes.lkt:1437:9>' Fld nodes.lkt:1437







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Create_Internal_Entity_Call_Expr_List (Node => Ent.Node.Env_Spec_Decl_F_Actions, Info => Ent.Info);
--# expr-done 764









Fld_1 := Fld.Node;

   
      declare
         Map_Result_Vec : Logic_Equation_Vectors.Vector;
      begin
   

   

      if Fld_1 = null then
         
      Map_Result := Create_Logic_Equation_Array (0);
   
      else
         

      declare
         
         Collection : constant Bare_Call_Expr_List := Fld_1;
      begin
         for Untyped_Item_0 of
               Collection.Nodes (1 .. Children_Count (Collection))
         loop
                  
                  Bare_Item_0 := Untyped_Item_0; 
                  



Is_Null := Bare_Item_0 = null; 
if Is_Null then
   
   If_Result := No_Entity_Call_Expr;
else
   








Fld_2 := Fld.Info;

As_Entity := (Info => Fld_2, Node => Bare_Item_0); 
   If_Result := As_Entity;
end if;



                  Item_0 := If_Result; 

            
   --# scope-start


               --# bind action Item_0

            
         
         
      --# expr-start 776 '<LogicBinaryOp And at nodes.lkt:1439:13>' And_Pred_1 nodes.lkt:1439
--# expr-start 770 '<LogicBinaryOp And at nodes.lkt:1440:17>' And_Pred nodes.lkt:1440
--# expr-start 765 '<FieldAccess for xref_equation at nodes.lkt:1440:17>' Fld_3 nodes.lkt:1440







   if Item_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]LktNode.xref_equation'
Fld_3 := Liblktlang.Implementation.Dispatcher_Lkt_Node_P_Xref_Equation (Node => Item_0.Node, E_Info => Item_0.Info);
--# end
--# expr-done 765
--# expr-start 769 '<Bind at nodes.lkt:1441:22>' Bind_Result nodes.lkt:1441
--# expr-start 766 '<FieldAccess for expected_type_var at nodes.lkt:1441:22>' Fld_4 nodes.lkt:1441







   if Item_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_4 := Item_0.Node.Expr_Expected_Type_Var'Unrestricted_Access;
--# expr-done 766
Fld_4.Value := No_Entity;
Entity_Vars.Reset (Fld_4);





--# expr-start 768 '<FieldAccess for get_builtin_type at nodes.lkt:1442:20>' Fld_5 nodes.lkt:1442







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# expr-start 767 '<Symbol EnvAction at nodes.lkt:1442:42>' Sym nodes.lkt:1442
Sym := Precomputed_Symbol (Precomputed_Symbol_Table (Self.Unit.Context.Symbols), Precomputed_Sym_Envaction); 
--# expr-done 767
--# property-call-start LktNode.get_builtin_type
Fld_5 := Liblktlang.Implementation.Lkt_Node_P_Get_Builtin_Type (Node => Ent.Node, Entity_Name => Sym);
--# end
--# expr-done 768



   
      Cast_Result := Create_Internal_Entity
        (Node => Fld_5.Node,
         Info => Fld_5.Info);


Bind_Result := Solver.Create_Assign (Fld_4, Cast_Result, Solver_Ifc.No_Converter, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:1441:22") else null)); 
--# expr-done 769
And_Pred := Create_And (Fld_3, Bind_Result, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:1440:17") else null)); 
--# expr-done 770
--# expr-start 775 '<bind at nodes.lkt:1445:17>' Dyn_Var_Bind_Result nodes.lkt:1445





--# expr-start 771 '<FieldAccess for node at nodes.lkt:1445:39>' Fld_6 nodes.lkt:1445









Fld_6 := Item_0.Node;
--# expr-done 771



   
      Cast_Result_1 := Fld_6;


Bound_Error_Location := Cast_Result_1; 
--# expr-start 774 '<Predicate on TypeDecl.matching_type at nodes.lkt:1446:17>' Pred nodes.lkt:1446
--# expr-start 772 '<FieldAccess for expected_type_var at nodes.lkt:1447:21>' Fld_7 nodes.lkt:1447







   if Item_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_7 := Item_0.Node.Expr_Expected_Type_Var'Unrestricted_Access;
--# expr-done 772
Fld_7.Value := No_Entity;
Entity_Vars.Reset (Fld_7);
--# expr-start 773 '<FieldAccess for actual_type_var at nodes.lkt:1448:21>' Fld_8 nodes.lkt:1448







   if Item_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_8 := Item_0.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 773
Fld_8.Value := No_Entity;
Entity_Vars.Reset (Fld_8);


Pred := Solver.Create_N_Predicate ((Fld_7, Fld_8), Create_Type_Decl_P_Matching_Type_0_Predicate (2, Bound_Error_Location)); 
--# expr-done 774
Dyn_Var_Bind_Result := Pred; Inc_Ref (Dyn_Var_Bind_Result);
--# expr-done 775
And_Pred_1 := Create_And (And_Pred, Dyn_Var_Bind_Result, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:1439:13") else null)); 
--# expr-done 776
      

         declare
            Item_To_Append : constant Logic_Equation := And_Pred_1;
         begin
               Inc_Ref (Item_To_Append);
            Logic_Equation_Vectors.Append (Map_Result_Vec, Item_To_Append);
         end;
   
   
   

            
   --# end
      Finalizer_Scope_533;



         end loop;
      end;
   
      end if;

   

         Map_Result := Create_Logic_Equation_Array
           (Items_Count => Natural (Logic_Equation_Vectors.Length (Map_Result_Vec)));
         for I in Map_Result.Items'Range loop
            Map_Result.Items (I) := Logic_Equation_Vectors.Get
              (Map_Result_Vec,
               I + Logic_Equation_Vectors.Index_Type'First - Map_Result.Items'First);
         end loop;
         Logic_Equation_Vectors.Destroy (Map_Result_Vec);

      end;
   



--# expr-done 777
Logic_Boolean_Op := Solver.Create_All (Relation_Array (Map_Result.Items), (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:1437:9") else null)); 
--# expr-done 778

         Property_Result := Logic_Boolean_Op;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_144;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_144;
                     Finalizer_Scope_533;




            raise;
      end;



   return Property_Result;
end Env_Spec_Decl_P_Xref_Equation;
--# end

   







--# property-start EnvSpecDecl._env_trans_parent_7 '<builtin>:0'
pragma Warnings (Off, "is not referenced");
 function Env_Trans_Parent_7
  
  (Node : Bare_Env_Spec_Decl
  )

   return Boolean
is
   Self : Bare_Env_Spec_Decl  := Bare_Env_Spec_Decl (Node);
      --# bind self Self

   


   Property_Result : Boolean;

      

      



begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         

         Property_Result := False;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Env_Trans_Parent_7;
--# end

   







--# property-start EnvSpecDecl._env_mappings_8 nodes.lkt:1457
pragma Warnings (Off, "is not referenced");
 function Env_Mappings_8
  
  (Node : Bare_Env_Spec_Decl
  )

   return Internal_Env_Assoc_Array_Access
is
   Self : Bare_Env_Spec_Decl  := Bare_Env_Spec_Decl (Node);
      --# bind self Self

   


   Property_Result : Internal_Env_Assoc_Array_Access;

      
            procedure Finalizer_Scope_384 with Inline_Always;
            procedure Finalizer_Scope_534 with Inline_Always;

      Var_Expr_0 : Bare_Type_Decl;
Fld : Bare_Type_Decl;
Sym : Symbol_Type;
Fld_1 : Bare_Self_Decl;
New_Struct : Internal_Designated_Env := No_Designated_Env;
Cast_Result : Bare_Lkt_Node;
New_Struct_1 : Internal_Env_Assoc := No_Env_Assoc;
Sym_1 : Symbol_Type;
Fld_2 : Bare_Node_Decl;
New_Struct_2 : Internal_Designated_Env := No_Designated_Env;
Cast_Result_1 : Bare_Lkt_Node;
New_Struct_3 : Internal_Env_Assoc := No_Env_Assoc;
Array_Lit : Internal_Env_Assoc_Array_Access;
Scope_Result : Internal_Env_Assoc_Array_Access;
Result_Var : Internal_Env_Assoc_Array_Access;

            procedure Finalizer_Scope_384 is
            begin
                     Dec_Ref (Scope_Result);
                     Dec_Ref (Result_Var);
            end Finalizer_Scope_384;
            procedure Finalizer_Scope_534 is
            begin
                     Dec_Ref (New_Struct);
                     Dec_Ref (New_Struct_1);
                     Dec_Ref (New_Struct_2);
                     Dec_Ref (New_Struct_3);
                     Dec_Ref (Array_Lit);
            end Finalizer_Scope_534;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         


--# expr-start 779 '<FieldAccess for owning_type at nodes.lkt:1457:13>' Fld nodes.lkt:1457







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start EnvSpecDecl.owning_type
Fld := Liblktlang.Implementation.Env_Spec_Decl_P_Owning_Type (Node => Self);
--# end
--# expr-done 779
Var_Expr_0 := Fld;





if Var_Expr_0 /= No_Bare_Lkt_Node then
   



   --# scope-start


   --# bind ot Var_Expr_0

--# expr-start 788 '<ArrayLiteral at nodes.lkt:1459:17>' Array_Lit nodes.lkt:1459
--# expr-start 783 '<New EnvAssoc at nodes.lkt:1460:21>' New_Struct_1 nodes.lkt:1460
--# expr-start 780 '<New DesignatedEnv at nodes.lkt:1463:34>' New_Struct nodes.lkt:1463



Inc_Ref (Empty_Env);
New_Struct := (Direct_Env => Empty_Env, Env_Name => No_Symbol, Kind => Current_Env); 
--# expr-done 780
--# expr-start 781 '<Symbol self at nodes.lkt:1461:29>' Sym nodes.lkt:1461
Sym := Precomputed_Symbol (Precomputed_Symbol_Table (Self.Unit.Context.Symbols), Precomputed_Sym_Self); 
--# expr-done 781






--# expr-start 782 '<FieldAccess for self_decl at nodes.lkt:1462:31>' Fld_1 nodes.lkt:1462







   if Var_Expr_0 = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start TypeDecl.self_decl
Fld_1 := Liblktlang.Implementation.Type_Decl_P_Self_Decl (Node => Var_Expr_0);
--# end
--# expr-done 782



   
      Cast_Result := Fld_1;


Inc_Ref (New_Struct);
New_Struct_1 := (Dest_Env => New_Struct, Key => Sym, Metadata => No_Metadata, Value => Cast_Result); 
--# expr-done 783
--# expr-start 787 '<New EnvAssoc at nodes.lkt:1470:21>' New_Struct_3 nodes.lkt:1470
--# expr-start 784 '<New DesignatedEnv at nodes.lkt:1473:34>' New_Struct_2 nodes.lkt:1473



Inc_Ref (Empty_Env);
New_Struct_2 := (Direct_Env => Empty_Env, Env_Name => No_Symbol, Kind => Current_Env); 
--# expr-done 784
--# expr-start 785 '<Symbol node at nodes.lkt:1471:29>' Sym_1 nodes.lkt:1471
Sym_1 := Precomputed_Symbol (Precomputed_Symbol_Table (Self.Unit.Context.Symbols), Precomputed_Sym_Node_47); 
--# expr-done 785






--# expr-start 786 '<FieldAccess for node_decl at nodes.lkt:1472:31>' Fld_2 nodes.lkt:1472







   if Var_Expr_0 = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start TypeDecl.node_decl
Fld_2 := Liblktlang.Implementation.Type_Decl_P_Node_Decl (Node => Var_Expr_0);
--# end
--# expr-done 786



   
      Cast_Result_1 := Fld_2;


Inc_Ref (New_Struct_2);
New_Struct_3 := (Dest_Env => New_Struct_2, Key => Sym_1, Metadata => No_Metadata, Value => Cast_Result_1); 
--# expr-done 787
Array_Lit := Create_Internal_Env_Assoc_Array (Internal_Internal_Env_Assoc_Array'(1 => New_Struct_1, 2 => New_Struct_3)); 
--# expr-done 788
Scope_Result := Array_Lit;
   Inc_Ref (Scope_Result);


   --# end
      Finalizer_Scope_534;


   Result_Var := Scope_Result;
else
   
   Result_Var := No_Internal_Env_Assoc_Array_Type;
end if;

      Inc_Ref (Result_Var);



         Property_Result := Result_Var;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_384;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_384;
                     Finalizer_Scope_534;




            raise;
      end;



   return Property_Result;
end Env_Mappings_8;
--# end



   


      

   --
   --  Primitives for Bare_Generic_Decl
   --

   



   

   

   

   

   

   

   


      procedure Generic_Decl_Pre_Env_Actions
        (Self            : Bare_Generic_Decl;
         State           : in out PLE_Node_State;
         Add_To_Env_Only : Boolean := False) is
      begin
            


   

      declare
         Resolver : constant Entity_Resolver :=
            null;

         

         Mapping : Internal_Env_Assoc :=
            Liblktlang.Implementation.Env_Mappings_9 (Node => 
Self);
      begin

         Add_To_Env
           (Self,
            State,
            Mapping.Key,
            Mapping.Value,
            Mapping.Metadata,
            Resolver,
            Mapping.Dest_Env,
            DSL_Location => "nodes.lkt:1517:9");
         Dec_Ref (Mapping.Dest_Env);

      end;
   
   
            


   
      if Add_To_Env_Only then
         return;
      end if;

      declare
         No_Parent         : constant Boolean :=
            False;
         Transitive_Parent : constant Boolean :=
            Liblktlang.Implementation.Env_Trans_Parent_10 (Node => 
Self);
         Names             : Symbol_Type_Array_Access :=
            null;
      begin
         Add_Env (Self, State, No_Parent, Transitive_Parent, Names);
      end;
   
   
      end;



      
      procedure Initialize_Fields_For_Generic_Decl
        (Self : Bare_Generic_Decl
         ; Generic_Decl_F_Generic_Formal_Decls : Bare_Generic_Formal_Decl_List
         ; Generic_Decl_F_Decl : Bare_Decl
        ) is
      begin

            Self.Generic_Decl_F_Generic_Formal_Decls := Generic_Decl_F_Generic_Formal_Decls;
            Self.Generic_Decl_F_Decl := Generic_Decl_F_Decl;
         

      end Initialize_Fields_For_Generic_Decl;

      
   function Generic_Decl_F_Generic_Formal_Decls
     (Node : Bare_Generic_Decl) return Bare_Generic_Formal_Decl_List
   is
      

   begin
         
         return Node.Generic_Decl_F_Generic_Formal_Decls;
      
   end;

      
   function Generic_Decl_F_Decl
     (Node : Bare_Generic_Decl) return Bare_Decl
   is
      

   begin
         
         return Node.Generic_Decl_F_Decl;
      
   end;


   







--# property-start GenericDecl.name nodes.lkt:1497
pragma Warnings (Off, "is not referenced");
 function Generic_Decl_P_Name
  
  (Node : Bare_Generic_Decl
  )

   return Symbol_Type
is
   Self : Bare_Generic_Decl  := Bare_Generic_Decl (Node);
      --# bind self Self

   


   Property_Result : Symbol_Type;

      

      Fld : Bare_Decl;
Fld_1 : Symbol_Type;



begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         --# expr-start 790 '<FieldAccess for name at nodes.lkt:1497:26>' Fld_1 nodes.lkt:1497



--# expr-start 789 '<FieldAccess for decl at nodes.lkt:1497:26>' Fld nodes.lkt:1497







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Self.Generic_Decl_F_Decl;
--# expr-done 789



   if Fld = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]Decl.name'
Fld_1 := Liblktlang.Implementation.Dispatcher_Decl_P_Name (Node => Fld);
--# end
--# expr-done 790

         Property_Result := Fld_1;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Generic_Decl_P_Name;
--# end

   







--# property-start GenericDecl.generic_formals nodes.lkt:1499
pragma Warnings (Off, "is not referenced");
 function Generic_Decl_P_Generic_Formals
  
  (Node : Bare_Generic_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Internal_Entity_Generic_Formal_Type_Decl_Array_Access
is
   Self : Bare_Generic_Decl  := Bare_Generic_Decl (Node);
     Ent : Internal_Entity_Generic_Decl :=
       Internal_Entity_Generic_Decl'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Internal_Entity_Generic_Formal_Type_Decl_Array_Access;

      
            procedure Finalizer_Scope_146 with Inline_Always;

      Fld : Internal_Entity_Generic_Formal_Decl_List;
Fld_1 : Bare_Generic_Formal_Decl_List;
Fld_2 : Internal_Entity_Info;
Item_0 : Internal_Entity_Full_Decl;
Bare_Item_0 : Bare_Full_Decl;
Fld_3 : Internal_Entity_Decl;
Cast_Result : Internal_Entity_Generic_Formal_Type_Decl;
As_Entity : Internal_Entity_Full_Decl;
Is_Null : Boolean;
If_Result : Internal_Entity_Full_Decl;
Map_Result : Internal_Entity_Generic_Formal_Type_Decl_Array_Access;

            procedure Finalizer_Scope_146 is
            begin
                     Dec_Ref (Map_Result);
            end Finalizer_Scope_146;


begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         --# expr-start 794 '<Map at nodes.lkt:1500:9>' Map_Result nodes.lkt:1500








   

   --# expr-start 791 '<FieldAccess for generic_formal_decls at nodes.lkt:1500:9>' Fld nodes.lkt:1500







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Create_Internal_Entity_Generic_Formal_Decl_List (Node => Ent.Node.Generic_Decl_F_Generic_Formal_Decls, Info => Ent.Info);
--# expr-done 791









Fld_1 := Fld.Node;

   
      declare
         Map_Result_Vec : Internal_Entity_Generic_Formal_Type_Decl_Vectors.Vector;
      begin
   

   

      if Fld_1 = null then
         
      Map_Result := Create_Internal_Entity_Generic_Formal_Type_Decl_Array (0);
   
      else
         

      declare
         
         Collection : constant Bare_Generic_Formal_Decl_List := Fld_1;
      begin
         for Untyped_Item_0 of
               Collection.Nodes (1 .. Children_Count (Collection))
         loop
                  
                  Bare_Item_0 := Untyped_Item_0; 
                  



Is_Null := Bare_Item_0 = null; 
if Is_Null then
   
   If_Result := No_Entity_Full_Decl;
else
   








Fld_2 := Fld.Info;

As_Entity := (Info => Fld_2, Node => Bare_Item_0); 
   If_Result := As_Entity;
end if;



                  Item_0 := If_Result; 

            
   --# scope-start


               --# bind gfd Item_0

            
         
         
      --# expr-start 793 '<Cast to GenericFormalTypeDecl at nodes.lkt:1501:22>' Cast_Result nodes.lkt:1501





--# expr-start 792 '<FieldAccess for decl at nodes.lkt:1501:22>' Fld_3 nodes.lkt:1501







   if Item_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_3 := Create_Internal_Entity_Decl (Node => Item_0.Node.Full_Decl_F_Decl, Info => Item_0.Info);
--# expr-done 792



   if Fld_3.Node = null
      or else Fld_3.Node.Kind in Lkt_Generic_Formal_Type_Decl_Range
   then
      
      Cast_Result := Create_Internal_Entity_Generic_Formal_Type_Decl
        (Node => Fld_3.Node,
         Info => Fld_3.Info);

   else
         Cast_Result := No_Entity_Generic_Formal_Type_Decl;
   end if;


--# expr-done 793
      

         declare
            Item_To_Append : constant Internal_Entity_Generic_Formal_Type_Decl := Cast_Result;
         begin
            Internal_Entity_Generic_Formal_Type_Decl_Vectors.Append (Map_Result_Vec, Item_To_Append);
         end;
   
   
   

            
   --# end



         end loop;
      end;
   
      end if;

   

         Map_Result := Create_Internal_Entity_Generic_Formal_Type_Decl_Array
           (Items_Count => Natural (Internal_Entity_Generic_Formal_Type_Decl_Vectors.Length (Map_Result_Vec)));
         for I in Map_Result.Items'Range loop
            Map_Result.Items (I) := Internal_Entity_Generic_Formal_Type_Decl_Vectors.Get
              (Map_Result_Vec,
               I + Internal_Entity_Generic_Formal_Type_Decl_Vectors.Index_Type'First - Map_Result.Items'First);
         end loop;
         Internal_Entity_Generic_Formal_Type_Decl_Vectors.Destroy (Map_Result_Vec);

      end;
   



--# expr-done 794

         Property_Result := Map_Result;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_146;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_146;




            raise;
      end;



   return Property_Result;
end Generic_Decl_P_Generic_Formals;
--# end

   







--# property-start GenericDecl.generic_formals_names nodes.lkt:1504
pragma Warnings (Off, "is not referenced");
 function Generic_Decl_P_Generic_Formals_Names
  
  (Node : Bare_Generic_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Symbol_Type_Array_Access
is
   Self : Bare_Generic_Decl  := Bare_Generic_Decl (Node);
     Ent : Internal_Entity_Generic_Decl :=
       Internal_Entity_Generic_Decl'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Symbol_Type_Array_Access;

      
            procedure Finalizer_Scope_147 with Inline_Always;

      Fld : Internal_Entity_Generic_Formal_Decl_List;
Fld_1 : Bare_Generic_Formal_Decl_List;
Fld_2 : Internal_Entity_Info;
Item_0 : Internal_Entity_Full_Decl;
Bare_Item_0 : Bare_Full_Decl;
Fld_3 : Internal_Entity_Decl;
Cast_Result : Internal_Entity_Generic_Formal_Type_Decl;
Fld_4 : Symbol_Type;
As_Entity : Internal_Entity_Full_Decl;
Is_Null : Boolean;
If_Result : Internal_Entity_Full_Decl;
Map_Result : Symbol_Type_Array_Access;

            procedure Finalizer_Scope_147 is
            begin
                     Dec_Ref (Map_Result);
            end Finalizer_Scope_147;


begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         --# expr-start 799 '<Map at nodes.lkt:1505:9>' Map_Result nodes.lkt:1505








   

   --# expr-start 795 '<FieldAccess for generic_formal_decls at nodes.lkt:1505:9>' Fld nodes.lkt:1505







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Create_Internal_Entity_Generic_Formal_Decl_List (Node => Ent.Node.Generic_Decl_F_Generic_Formal_Decls, Info => Ent.Info);
--# expr-done 795









Fld_1 := Fld.Node;

   
      declare
         Map_Result_Vec : Symbol_Type_Vectors.Vector;
      begin
   

   

      if Fld_1 = null then
         
      Map_Result := Create_Symbol_Type_Array (0);
   
      else
         

      declare
         
         Collection : constant Bare_Generic_Formal_Decl_List := Fld_1;
      begin
         for Untyped_Item_0 of
               Collection.Nodes (1 .. Children_Count (Collection))
         loop
                  
                  Bare_Item_0 := Untyped_Item_0; 
                  



Is_Null := Bare_Item_0 = null; 
if Is_Null then
   
   If_Result := No_Entity_Full_Decl;
else
   








Fld_2 := Fld.Info;

As_Entity := (Info => Fld_2, Node => Bare_Item_0); 
   If_Result := As_Entity;
end if;



                  Item_0 := If_Result; 

            
   --# scope-start


               --# bind gfd Item_0

            
         
         
      --# expr-start 798 '<FieldAccess for name at nodes.lkt:1506:22>' Fld_4 nodes.lkt:1506



--# expr-start 797 '<Cast to GenericFormalTypeDecl at nodes.lkt:1506:22>' Cast_Result nodes.lkt:1506





--# expr-start 796 '<FieldAccess for decl at nodes.lkt:1506:22>' Fld_3 nodes.lkt:1506







   if Item_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_3 := Create_Internal_Entity_Decl (Node => Item_0.Node.Full_Decl_F_Decl, Info => Item_0.Info);
--# expr-done 796



   if Fld_3.Node = null
      or else Fld_3.Node.Kind in Lkt_Generic_Formal_Type_Decl_Range
   then
      
      Cast_Result := Create_Internal_Entity_Generic_Formal_Type_Decl
        (Node => Fld_3.Node,
         Info => Fld_3.Info);

   else
         Cast_Result := No_Entity_Generic_Formal_Type_Decl;
   end if;


--# expr-done 797



   if Cast_Result.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]Decl.name'
Fld_4 := Liblktlang.Implementation.Dispatcher_Decl_P_Name (Node => Cast_Result.Node);
--# end
--# expr-done 798
      

         declare
            Item_To_Append : constant Symbol_Type := Fld_4;
         begin
            Symbol_Type_Vectors.Append (Map_Result_Vec, Item_To_Append);
         end;
   
   
   

            
   --# end



         end loop;
      end;
   
      end if;

   

         Map_Result := Create_Symbol_Type_Array
           (Items_Count => Natural (Symbol_Type_Vectors.Length (Map_Result_Vec)));
         for I in Map_Result.Items'Range loop
            Map_Result.Items (I) := Symbol_Type_Vectors.Get
              (Map_Result_Vec,
               I + Symbol_Type_Vectors.Index_Type'First - Map_Result.Items'First);
         end loop;
         Symbol_Type_Vectors.Destroy (Map_Result_Vec);

      end;
   



--# expr-done 799

         Property_Result := Map_Result;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_147;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_147;




            raise;
      end;



   return Property_Result;
end Generic_Decl_P_Generic_Formals_Names;
--# end

   







--# property-start GenericDecl.decl_type_name nodes.lkt:1509
pragma Warnings (Off, "is not referenced");
 function Generic_Decl_P_Decl_Type_Name
  
  (Node : Bare_Generic_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return String_Type
is
   Self : Bare_Generic_Decl  := Bare_Generic_Decl (Node);
     Ent : Internal_Entity_Generic_Decl :=
       Internal_Entity_Generic_Decl'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : String_Type;

      
            procedure Finalizer_Scope_148 with Inline_Always;

      Str : String_Type;
Fld : Internal_Entity_Decl;
Fld_1 : String_Type;
Concat_Result : String_Type;

            procedure Finalizer_Scope_148 is
            begin
                     Dec_Ref (Str);
                     Dec_Ref (Fld_1);
                     Dec_Ref (Concat_Result);
            end Finalizer_Scope_148;


begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         --# expr-start 800 '<String at nodes.lkt:1509:36>' Str nodes.lkt:1509
Str := Create_String ("generic "); 
--# expr-done 800
--# expr-start 802 '<FieldAccess for decl_type_name at nodes.lkt:1509:49>' Fld_1 nodes.lkt:1509



--# expr-start 801 '<FieldAccess for decl at nodes.lkt:1509:49>' Fld nodes.lkt:1509







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Create_Internal_Entity_Decl (Node => Ent.Node.Generic_Decl_F_Decl, Info => Ent.Info);
--# expr-done 801



   if Fld.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]Decl.decl_type_name'
Fld_1 := Liblktlang.Implementation.Dispatcher_Decl_P_Decl_Type_Name (Node => Fld.Node, E_Info => Fld.Info);
--# end
--# expr-done 802
Concat_Result := Concat_String (Str, Fld_1); 

         Property_Result := Concat_Result;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_148;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_148;




            raise;
      end;



   return Property_Result;
end Generic_Decl_P_Decl_Type_Name;
--# end

   







--# property-start GenericDecl.instantiated_generic_formals nodes.lkt:1511
pragma Warnings (Off, "is not referenced");
 function Generic_Decl_P_Instantiated_Generic_Formals
  
  (Node : Bare_Generic_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Internal_Entity_Type_Decl_Array_Access
is
   Self : Bare_Generic_Decl  := Bare_Generic_Decl (Node);
     Ent : Internal_Entity_Generic_Decl :=
       Internal_Entity_Generic_Decl'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Internal_Entity_Type_Decl_Array_Access;

      
            procedure Finalizer_Scope_149 with Inline_Always;
            procedure Finalizer_Scope_537 with Inline_Always;

      Fld : Internal_Entity_Generic_Formal_Decl_List;
Fld_1 : Bare_Generic_Formal_Decl_List;
Fld_2 : Internal_Entity_Info;
Item_0 : Internal_Entity_Full_Decl;
Bare_Item_0 : Bare_Full_Decl;
Fld_3 : Lexical_Env := Empty_Env;
Fld_4 : Internal_Entity_Decl;
Fld_5 : Symbol_Type;
Env_Get_Result : Internal_Entity;
Cast_Result : Internal_Entity_Type_Decl;
As_Entity : Internal_Entity_Full_Decl;
Is_Null : Boolean;
If_Result : Internal_Entity_Full_Decl;
Map_Result : Internal_Entity_Type_Decl_Array_Access;

            procedure Finalizer_Scope_149 is
            begin
                     Dec_Ref (Map_Result);
            end Finalizer_Scope_149;
            procedure Finalizer_Scope_537 is
            begin
                     Dec_Ref (Fld_3);
            end Finalizer_Scope_537;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 809 '<Map at nodes.lkt:1512:9>' Map_Result nodes.lkt:1512








   

   --# expr-start 803 '<FieldAccess for generic_formal_decls at nodes.lkt:1512:9>' Fld nodes.lkt:1512







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Create_Internal_Entity_Generic_Formal_Decl_List (Node => Ent.Node.Generic_Decl_F_Generic_Formal_Decls, Info => Ent.Info);
--# expr-done 803









Fld_1 := Fld.Node;

   
      declare
         Map_Result_Vec : Internal_Entity_Type_Decl_Vectors.Vector;
      begin
   

   

      if Fld_1 = null then
         
      Map_Result := Create_Internal_Entity_Type_Decl_Array (0);
   
      else
         

      declare
         
         Collection : constant Bare_Generic_Formal_Decl_List := Fld_1;
      begin
         for Untyped_Item_0 of
               Collection.Nodes (1 .. Children_Count (Collection))
         loop
                  
                  Bare_Item_0 := Untyped_Item_0; 
                  



Is_Null := Bare_Item_0 = null; 
if Is_Null then
   
   If_Result := No_Entity_Full_Decl;
else
   








Fld_2 := Fld.Info;

As_Entity := (Info => Fld_2, Node => Bare_Item_0); 
   If_Result := As_Entity;
end if;



                  Item_0 := If_Result; 

            
   --# scope-start


               --# bind gfd Item_0

            
         
         
      --# expr-start 808 '<Cast to TypeDecl at nodes.lkt:1513:22>' Cast_Result nodes.lkt:1513





--# expr-start 807 '<EnvGet at nodes.lkt:1513:22>' Env_Get_Result nodes.lkt:1513
--# expr-start 804 '<FieldAccess for children_env at nodes.lkt:1513:22>' Fld_3 nodes.lkt:1513







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_3 := Liblktlang.Implementation.Children_Env (Node => Ent.Node, E_Info => Ent.Info);
--# expr-done 804
--# expr-start 806 '<FieldAccess for name at nodes.lkt:1513:50>' Fld_5 nodes.lkt:1513



--# expr-start 805 '<FieldAccess for decl at nodes.lkt:1513:50>' Fld_4 nodes.lkt:1513







   if Item_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_4 := Create_Internal_Entity_Decl (Node => Item_0.Node.Full_Decl_F_Decl, Info => Item_0.Info);
--# expr-done 805



   if Fld_4.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]Decl.name'
Fld_5 := Liblktlang.Implementation.Dispatcher_Decl_P_Name (Node => Fld_4.Node);
--# end
--# expr-done 806


Env_Get_Result := AST_Envs.Get_First (Self => Fld_3, Key => Thin (Fld_5), Lookup_Kind => To_Lookup_Kind_Type (Recursive), Categories => (Nocat => True)); 
--# expr-done 807



   if Env_Get_Result.Node = null
      or else Env_Get_Result.Node.Kind in Lkt_Type_Decl
   then
      
      Cast_Result := Create_Internal_Entity_Type_Decl
        (Node => Env_Get_Result.Node,
         Info => Env_Get_Result.Info);

   else
         Cast_Result := No_Entity_Type_Decl;
   end if;


--# expr-done 808
      

         declare
            Item_To_Append : constant Internal_Entity_Type_Decl := Cast_Result;
         begin
            Internal_Entity_Type_Decl_Vectors.Append (Map_Result_Vec, Item_To_Append);
         end;
   
   
   

            
   --# end
      Finalizer_Scope_537;



         end loop;
      end;
   
      end if;

   

         Map_Result := Create_Internal_Entity_Type_Decl_Array
           (Items_Count => Natural (Internal_Entity_Type_Decl_Vectors.Length (Map_Result_Vec)));
         for I in Map_Result.Items'Range loop
            Map_Result.Items (I) := Internal_Entity_Type_Decl_Vectors.Get
              (Map_Result_Vec,
               I + Internal_Entity_Type_Decl_Vectors.Index_Type'First - Map_Result.Items'First);
         end loop;
         Internal_Entity_Type_Decl_Vectors.Destroy (Map_Result_Vec);

      end;
   



--# expr-done 809

         Property_Result := Map_Result;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_149;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_149;
                     Finalizer_Scope_537;




            raise;
      end;



   return Property_Result;
end Generic_Decl_P_Instantiated_Generic_Formals;
--# end

   







--# property-start GenericDecl._env_mappings_9 nodes.lkt:1517
pragma Warnings (Off, "is not referenced");
 function Env_Mappings_9
  
  (Node : Bare_Generic_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Internal_Env_Assoc
is
   Self : Bare_Generic_Decl  := Bare_Generic_Decl (Node);
     Ent : Internal_Entity_Generic_Decl :=
       Internal_Entity_Generic_Decl'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Internal_Env_Assoc;

      
            procedure Finalizer_Scope_385 with Inline_Always;

      Fld : Symbol_Type;
New_Struct : Internal_Designated_Env := No_Designated_Env;
Cast_Expr : Bare_Generic_Decl;
Cast_Result : Bare_Lkt_Node;
New_Struct_1 : Internal_Env_Assoc := No_Env_Assoc;

            procedure Finalizer_Scope_385 is
            begin
                     Dec_Ref (New_Struct);
                     Dec_Ref (New_Struct_1);
            end Finalizer_Scope_385;


begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         --# expr-start 812 '<New EnvAssoc at ???>' New_Struct_1 None
--# expr-start 810 '<New DesignatedEnv at ???>' New_Struct None



Inc_Ref (Empty_Env);
New_Struct := (Direct_Env => Empty_Env, Env_Name => No_Symbol, Kind => Current_Env); 
--# expr-done 810
--# expr-start 811 '<FieldAccess for name at nodes.lkt:1517:23>' Fld nodes.lkt:1517







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]Decl.name'
Fld := Liblktlang.Implementation.Dispatcher_Decl_P_Name (Node => Ent.Node);
--# end
--# expr-done 811







Cast_Expr := Self; 



   
      Cast_Result := Cast_Expr;


Inc_Ref (New_Struct);
New_Struct_1 := (Dest_Env => New_Struct, Key => Fld, Metadata => No_Metadata, Value => Cast_Result); 
--# expr-done 812

         Property_Result := New_Struct_1;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_385;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_385;




            raise;
      end;



   return Property_Result;
end Env_Mappings_9;
--# end

   







--# property-start GenericDecl._env_trans_parent_10 '<builtin>:0'
pragma Warnings (Off, "is not referenced");
 function Env_Trans_Parent_10
  
  (Node : Bare_Generic_Decl
  )

   return Boolean
is
   Self : Bare_Generic_Decl  := Bare_Generic_Decl (Node);
      --# bind self Self

   


   Property_Result : Boolean;

      

      



begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         

         Property_Result := False;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Env_Trans_Parent_10;
--# end



   


      

   --
   --  Primitives for Bare_Grammar_Decl
   --

   



   

   

   

   

   

   

   


      procedure Grammar_Decl_Pre_Env_Actions
        (Self            : Bare_Grammar_Decl;
         State           : in out PLE_Node_State;
         Add_To_Env_Only : Boolean := False) is
      begin
            


   

      declare
         Resolver : constant Entity_Resolver :=
            null;

         

         Mapping : Internal_Env_Assoc :=
            Liblktlang.Implementation.Env_Mappings_11 (Node => 
Self);
      begin

         Add_To_Env
           (Self,
            State,
            Mapping.Key,
            Mapping.Value,
            Mapping.Metadata,
            Resolver,
            Mapping.Dest_Env,
            DSL_Location => "nodes.lkt:1532:9");
         Dec_Ref (Mapping.Dest_Env);

      end;
   
   
            


   
      if Add_To_Env_Only then
         return;
      end if;

      declare
         No_Parent         : constant Boolean :=
            False;
         Transitive_Parent : constant Boolean :=
            Liblktlang.Implementation.Env_Trans_Parent_12 (Node => 
Self);
         Names             : Symbol_Type_Array_Access :=
            null;
      begin
         Add_Env (Self, State, No_Parent, Transitive_Parent, Names);
      end;
   
   
      end;



      
      procedure Initialize_Fields_For_Grammar_Decl
        (Self : Bare_Grammar_Decl
         ; Grammar_Decl_F_Syn_Name : Bare_Def_Id
         ; Grammar_Decl_F_Rules : Bare_Full_Decl_List
        ) is
      begin

            Self.Grammar_Decl_F_Syn_Name := Grammar_Decl_F_Syn_Name;
            Self.Grammar_Decl_F_Rules := Grammar_Decl_F_Rules;
         

      end Initialize_Fields_For_Grammar_Decl;

      
   function Grammar_Decl_F_Rules
     (Node : Bare_Grammar_Decl) return Bare_Full_Decl_List
   is
      

   begin
         
         return Node.Grammar_Decl_F_Rules;
      
   end;


   







--# property-start GrammarDecl.decl_type_name nodes.lkt:1529
pragma Warnings (Off, "is not referenced");
 function Grammar_Decl_P_Decl_Type_Name
  
  (Node : Bare_Grammar_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return String_Type
is
   Self : Bare_Grammar_Decl  := Bare_Grammar_Decl (Node);
      --# bind self Self

   


   Property_Result : String_Type;

      
            procedure Finalizer_Scope_150 with Inline_Always;

      Str : String_Type;

            procedure Finalizer_Scope_150 is
            begin
                     Dec_Ref (Str);
            end Finalizer_Scope_150;


begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         --# expr-start 813 '<String at nodes.lkt:1529:36>' Str nodes.lkt:1529
Str := Create_String ("grammar declaration"); 
--# expr-done 813

         Property_Result := Str;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_150;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_150;




            raise;
      end;



   return Property_Result;
end Grammar_Decl_P_Decl_Type_Name;
--# end

   







--# property-start GrammarDecl._env_mappings_11 nodes.lkt:1532
pragma Warnings (Off, "is not referenced");
 function Env_Mappings_11
  
  (Node : Bare_Grammar_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Internal_Env_Assoc
is
   Self : Bare_Grammar_Decl  := Bare_Grammar_Decl (Node);
     Ent : Internal_Entity_Grammar_Decl :=
       Internal_Entity_Grammar_Decl'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Internal_Env_Assoc;

      
            procedure Finalizer_Scope_387 with Inline_Always;

      Fld : Symbol_Type;
New_Struct : Internal_Designated_Env := No_Designated_Env;
Cast_Expr : Bare_Grammar_Decl;
Cast_Result : Bare_Lkt_Node;
New_Struct_1 : Internal_Env_Assoc := No_Env_Assoc;

            procedure Finalizer_Scope_387 is
            begin
                     Dec_Ref (New_Struct);
                     Dec_Ref (New_Struct_1);
            end Finalizer_Scope_387;


begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         --# expr-start 816 '<New EnvAssoc at ???>' New_Struct_1 None
--# expr-start 814 '<New DesignatedEnv at ???>' New_Struct None



Inc_Ref (Empty_Env);
New_Struct := (Direct_Env => Empty_Env, Env_Name => No_Symbol, Kind => Current_Env); 
--# expr-done 814
--# expr-start 815 '<FieldAccess for name at nodes.lkt:1532:23>' Fld nodes.lkt:1532







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]Decl.name'
Fld := Liblktlang.Implementation.Dispatcher_Decl_P_Name (Node => Ent.Node);
--# end
--# expr-done 815







Cast_Expr := Self; 



   
      Cast_Result := Cast_Expr;


Inc_Ref (New_Struct);
New_Struct_1 := (Dest_Env => New_Struct, Key => Fld, Metadata => No_Metadata, Value => Cast_Result); 
--# expr-done 816

         Property_Result := New_Struct_1;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_387;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_387;




            raise;
      end;



   return Property_Result;
end Env_Mappings_11;
--# end

   







--# property-start GrammarDecl._env_trans_parent_12 '<builtin>:0'
pragma Warnings (Off, "is not referenced");
 function Env_Trans_Parent_12
  
  (Node : Bare_Grammar_Decl
  )

   return Boolean
is
   Self : Bare_Grammar_Decl  := Bare_Grammar_Decl (Node);
      --# bind self Self

   


   Property_Result : Boolean;

      

      



begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         

         Property_Result := False;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Env_Trans_Parent_12;
--# end



   


      

   --
   --  Primitives for Bare_Lexer_Decl
   --

   



   

   

   

   

   

   

   


      procedure Lexer_Decl_Pre_Env_Actions
        (Self            : Bare_Lexer_Decl;
         State           : in out PLE_Node_State;
         Add_To_Env_Only : Boolean := False) is
      begin
            


   

      declare
         Resolver : constant Entity_Resolver :=
            null;

         

         Mapping : Internal_Env_Assoc :=
            Liblktlang.Implementation.Env_Mappings_13 (Node => 
Self);
      begin

         Add_To_Env
           (Self,
            State,
            Mapping.Key,
            Mapping.Value,
            Mapping.Metadata,
            Resolver,
            Mapping.Dest_Env,
            DSL_Location => "nodes.lkt:1563:9");
         Dec_Ref (Mapping.Dest_Env);

      end;
   
   
            


   
      if Add_To_Env_Only then
         return;
      end if;

      declare
         No_Parent         : constant Boolean :=
            False;
         Transitive_Parent : constant Boolean :=
            Liblktlang.Implementation.Env_Trans_Parent_14 (Node => 
Self);
         Names             : Symbol_Type_Array_Access :=
            null;
      begin
         Add_Env (Self, State, No_Parent, Transitive_Parent, Names);
      end;
   
   
            


   

      declare
         Resolver : constant Entity_Resolver :=
            null;

         

         Mappings : Internal_Env_Assoc_Array_Access :=
            Liblktlang.Implementation.Env_Mappings_15 (Node => 
Self);
      begin
         for Mapping of Mappings.Items loop

         Add_To_Env
           (Self,
            State,
            Mapping.Key,
            Mapping.Value,
            Mapping.Metadata,
            Resolver,
            Mapping.Dest_Env,
            DSL_Location => "nodes.lkt:1565:9");

         end loop;
         Dec_Ref (Mappings);
      end;
   
   
      end;



      
      procedure Initialize_Fields_For_Lexer_Decl
        (Self : Bare_Lexer_Decl
         ; Lexer_Decl_F_Syn_Name : Bare_Def_Id
         ; Lexer_Decl_F_Rules : Bare_Lkt_Node_List
        ) is
      begin

            Self.Lexer_Decl_F_Syn_Name := Lexer_Decl_F_Syn_Name;
            Self.Lexer_Decl_F_Rules := Lexer_Decl_F_Rules;
         

      end Initialize_Fields_For_Lexer_Decl;

      
   function Lexer_Decl_F_Rules
     (Node : Bare_Lexer_Decl) return Bare_Lkt_Node_List
   is
      

   begin
         
         return Node.Lexer_Decl_F_Rules;
      
   end;


   







--# property-start LexerDecl.decl_type_name nodes.lkt:1544
pragma Warnings (Off, "is not referenced");
 function Lexer_Decl_P_Decl_Type_Name
  
  (Node : Bare_Lexer_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return String_Type
is
   Self : Bare_Lexer_Decl  := Bare_Lexer_Decl (Node);
      --# bind self Self

   


   Property_Result : String_Type;

      
            procedure Finalizer_Scope_151 with Inline_Always;

      Str : String_Type;

            procedure Finalizer_Scope_151 is
            begin
                     Dec_Ref (Str);
            end Finalizer_Scope_151;


begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         --# expr-start 817 '<String at nodes.lkt:1544:36>' Str nodes.lkt:1544
Str := Create_String ("lexer declaration"); 
--# expr-done 817

         Property_Result := Str;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_151;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_151;




            raise;
      end;



   return Property_Result;
end Lexer_Decl_P_Decl_Type_Name;
--# end

   







--# property-start LexerDecl.builtin_decls nodes.lkt:1547
pragma Warnings (Off, "is not referenced");
 function Lexer_Decl_P_Builtin_Decls
  
  (Node : Bare_Lexer_Decl
  )

   return Internal_Env_Assoc_Array_Access
is
   Self : Bare_Lexer_Decl  := Bare_Lexer_Decl (Node);
      --# bind self Self

   


   Property_Result : Internal_Env_Assoc_Array_Access;

      
            procedure Finalizer_Scope_152 with Inline_Always;
            procedure Finalizer_Scope_538 with Inline_Always;

      Sym : Symbol_Type;
Sym_1 : Symbol_Type;
Sym_2 : Symbol_Type;
Array_Lit : Symbol_Type_Array_Access;
New_Node : Bare_Synthetic_Lexer_Decl;
Fld : Lexical_Env := Empty_Env;
New_Struct : Internal_Designated_Env := No_Designated_Env;
Cast_Result : Bare_Lkt_Node;
New_Struct_1 : Internal_Env_Assoc := No_Env_Assoc;
Map_Result : Internal_Env_Assoc_Array_Access;

            procedure Finalizer_Scope_152 is
            begin
                     Dec_Ref (Array_Lit);
                     Dec_Ref (Map_Result);
            end Finalizer_Scope_152;
            procedure Finalizer_Scope_538 is
            begin
                     Dec_Ref (Fld);
                     Dec_Ref (New_Struct);
                     Dec_Ref (New_Struct_1);
            end Finalizer_Scope_538;

      
      Mmz_Handle : Memoization_Handle;
      Mmz_Val    : Mmz_Value;

      Mmz_Stored : Boolean;
      --  Whether the memoization couple was actually stored. Used to determine
      --  whether to inc-ref the memoized value.

      function Create_Mmz_Key return Mmz_Key;
      --  Create a memoization key for this property call and return it

      --------------------
      -- Create_Mmz_Key --
      --------------------

      function Create_Mmz_Key return Mmz_Key is
      begin
         return Mmz_K : Mmz_Key :=
           (Property => Mmz_Bare_Lexer_Decl_Lexer_Decl_P_Builtin_Decls,
            Items    => new Mmz_Key_Array (1 ..  1))
         do
            Mmz_K.Items (1) := (Kind => Mmz_Bare_Lexer_Decl,
                                As_Bare_Lexer_Decl => Self);
         end return;
      end Create_Mmz_Key;

begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;

      if Self /= null then

         if not Self.Unit.Context.In_Populate_Lexical_Env then

            if Find_Memoized_Value
              (Self.Unit, Mmz_Handle, Mmz_Val, Create_Mmz_Key'Access)
            then
               --# memoization-lookup

               if Mmz_Val.Kind = Mmz_Evaluating then
                  --# memoization-return
                  Raise_Property_Exception
                    (Self,
                     Property_Error'Identity,
                     "Infinite recursion detected");

               elsif Mmz_Val.Kind = Mmz_Error then
                  --# memoization-return
                  Reraise_Memoized_Error (Mmz_Val);

               else
                  Property_Result := Mmz_Val.As_Internal_Env_Assoc_Array_Access;
                     Inc_Ref (Property_Result);

                  --# memoization-return
                  return Property_Result;
               end if;
               --# end
            end if;

         end if;
      end if;

      begin
         
   --# scope-start

         --# expr-start 826 '<Map at nodes.lkt:1548:9>' Map_Result nodes.lkt:1548








   

   --# expr-start 821 '<ArrayLiteral at nodes.lkt:1548:9>' Array_Lit nodes.lkt:1548
--# expr-start 818 '<Symbol newline at nodes.lkt:1548:10>' Sym nodes.lkt:1548
Sym := Precomputed_Symbol (Precomputed_Symbol_Table (Self.Unit.Context.Symbols), Precomputed_Sym_Newline); 
--# expr-done 818
--# expr-start 819 '<Symbol indent at nodes.lkt:1548:22>' Sym_1 nodes.lkt:1548
Sym_1 := Precomputed_Symbol (Precomputed_Symbol_Table (Self.Unit.Context.Symbols), Precomputed_Sym_Indent); 
--# expr-done 819
--# expr-start 820 '<Symbol dedent at nodes.lkt:1548:33>' Sym_2 nodes.lkt:1548
Sym_2 := Precomputed_Symbol (Precomputed_Symbol_Table (Self.Unit.Context.Symbols), Precomputed_Sym_Dedent); 
--# expr-done 820
Array_Lit := Create_Symbol_Type_Array (Internal_Symbol_Type_Array'(1 => Sym, 2 => Sym_1, 3 => Sym_2)); 
--# expr-done 821

   
      declare
         Map_Result_Vec : Internal_Env_Assoc_Vectors.Vector;
      begin
   

   

      

      declare
         
         Collection : constant Symbol_Type_Array_Access := Array_Lit;
      begin
         for Item_0 of
               Collection.Items
         loop

            
   --# scope-start


               --# bind sym Item_0

            
         
         
      --# expr-start 825 '<New EnvAssoc at nodes.lkt:1550:13>' New_Struct_1 nodes.lkt:1550
--# expr-start 823 '<New DesignatedEnv at nodes.lkt:1553:26>' New_Struct nodes.lkt:1553
--# expr-start 822 '<FieldAccess for children_env at nodes.lkt:1556:32>' Fld nodes.lkt:1556







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Liblktlang.Implementation.Children_Env (Node => Self);
--# expr-done 822


Inc_Ref (Fld);
New_Struct := (Direct_Env => Fld, Env_Name => No_Symbol, Kind => Direct_Env); 
--# expr-done 823







--# expr-start 824 '<New SyntheticLexerDecl at nodes.lkt:1552:23>' New_Node nodes.lkt:1552



if Is_Foreign_Strict (Self.Self_Env, Self) then
   Raise_Property_Exception
     (Self,
      Property_Error'Identity,
      "synthetic nodes cannot have foreign lexical envs");
end if;


New_Node := new Root_Node_Record
  (Lkt_Synthetic_Lexer_Decl);
Initialize
  (Self => New_Node,
   Kind => Lkt_Synthetic_Lexer_Decl,
   Unit => Self.Unit,

   Token_Start_Index => No_Token_Index,
   Token_End_Index   => No_Token_Index,

   Parent => Self,

   Self_Env => Self.Self_Env);
Register_Destroyable (Self.Unit, New_Node);


      New_Node.Synthetic_Lexer_Decl_Sym :=
         Item_0;

--# expr-done 824



   
      Cast_Result := New_Node;


Inc_Ref (New_Struct);
New_Struct_1 := (Dest_Env => New_Struct, Key => Item_0, Metadata => No_Metadata, Value => Cast_Result); 
--# expr-done 825
      

         declare
            Item_To_Append : constant Internal_Env_Assoc := New_Struct_1;
         begin
               Inc_Ref (Item_To_Append);
            Internal_Env_Assoc_Vectors.Append (Map_Result_Vec, Item_To_Append);
         end;
   
   
   

            
   --# end
      Finalizer_Scope_538;



         end loop;
      end;
   

   

         Map_Result := Create_Internal_Env_Assoc_Array
           (Items_Count => Natural (Internal_Env_Assoc_Vectors.Length (Map_Result_Vec)));
         for I in Map_Result.Items'Range loop
            Map_Result.Items (I) := Internal_Env_Assoc_Vectors.Get
              (Map_Result_Vec,
               I + Internal_Env_Assoc_Vectors.Index_Type'First - Map_Result.Items'First);
         end loop;
         Internal_Env_Assoc_Vectors.Destroy (Map_Result_Vec);

      end;
   



--# expr-done 826

         Property_Result := Map_Result;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_152;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_152;
                     Finalizer_Scope_538;


               if Self /= null then
                     if not Self.Unit.Context.In_Populate_Lexical_Env then
                        Add_Memoized_Error
                          (Self.Unit, Mmz_Handle, Exc, Mmz_Stored);
                     end if;
               end if;


            raise;
      end;

      if Self /= null then
         if not Self.Unit.Context.In_Populate_Lexical_Env then

            Mmz_Val := (Kind => Mmz_Internal_Env_Assoc_Array_Access,
                        As_Internal_Env_Assoc_Array_Access => Property_Result);
            Add_Memoized_Value (Self.Unit, Mmz_Handle, Mmz_Val, Mmz_Stored);
               if Mmz_Stored then
                  Inc_Ref (Property_Result);
               end if;

         end if;
      end if;



   return Property_Result;
end Lexer_Decl_P_Builtin_Decls;
--# end

   







--# property-start LexerDecl._env_mappings_13 nodes.lkt:1563
pragma Warnings (Off, "is not referenced");
 function Env_Mappings_13
  
  (Node : Bare_Lexer_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Internal_Env_Assoc
is
   Self : Bare_Lexer_Decl  := Bare_Lexer_Decl (Node);
     Ent : Internal_Entity_Lexer_Decl :=
       Internal_Entity_Lexer_Decl'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Internal_Env_Assoc;

      
            procedure Finalizer_Scope_389 with Inline_Always;

      Fld : Symbol_Type;
New_Struct : Internal_Designated_Env := No_Designated_Env;
Cast_Expr : Bare_Lexer_Decl;
Cast_Result : Bare_Lkt_Node;
New_Struct_1 : Internal_Env_Assoc := No_Env_Assoc;

            procedure Finalizer_Scope_389 is
            begin
                     Dec_Ref (New_Struct);
                     Dec_Ref (New_Struct_1);
            end Finalizer_Scope_389;


begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         --# expr-start 829 '<New EnvAssoc at ???>' New_Struct_1 None
--# expr-start 827 '<New DesignatedEnv at ???>' New_Struct None



Inc_Ref (Empty_Env);
New_Struct := (Direct_Env => Empty_Env, Env_Name => No_Symbol, Kind => Current_Env); 
--# expr-done 827
--# expr-start 828 '<FieldAccess for name at nodes.lkt:1563:23>' Fld nodes.lkt:1563







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]Decl.name'
Fld := Liblktlang.Implementation.Dispatcher_Decl_P_Name (Node => Ent.Node);
--# end
--# expr-done 828







Cast_Expr := Self; 



   
      Cast_Result := Cast_Expr;


Inc_Ref (New_Struct);
New_Struct_1 := (Dest_Env => New_Struct, Key => Fld, Metadata => No_Metadata, Value => Cast_Result); 
--# expr-done 829

         Property_Result := New_Struct_1;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_389;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_389;




            raise;
      end;



   return Property_Result;
end Env_Mappings_13;
--# end

   







--# property-start LexerDecl._env_trans_parent_14 '<builtin>:0'
pragma Warnings (Off, "is not referenced");
 function Env_Trans_Parent_14
  
  (Node : Bare_Lexer_Decl
  )

   return Boolean
is
   Self : Bare_Lexer_Decl  := Bare_Lexer_Decl (Node);
      --# bind self Self

   


   Property_Result : Boolean;

      

      



begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         

         Property_Result := False;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Env_Trans_Parent_14;
--# end

   







--# property-start LexerDecl._env_mappings_15 nodes.lkt:1565
pragma Warnings (Off, "is not referenced");
 function Env_Mappings_15
  
  (Node : Bare_Lexer_Decl
  )

   return Internal_Env_Assoc_Array_Access
is
   Self : Bare_Lexer_Decl  := Bare_Lexer_Decl (Node);
      --# bind self Self

   


   Property_Result : Internal_Env_Assoc_Array_Access;

      
            procedure Finalizer_Scope_391 with Inline_Always;

      Fld : Internal_Env_Assoc_Array_Access;

            procedure Finalizer_Scope_391 is
            begin
                     Dec_Ref (Fld);
            end Finalizer_Scope_391;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 830 '<FieldAccess for builtin_decls at nodes.lkt:1565:24>' Fld nodes.lkt:1565







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start LexerDecl.builtin_decls
Fld := Liblktlang.Implementation.Lexer_Decl_P_Builtin_Decls (Node => Self);
--# end
--# expr-done 830

         Property_Result := Fld;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_391;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_391;




            raise;
      end;



   return Property_Result;
end Env_Mappings_15;
--# end



   


      

   --
   --  Primitives for Bare_Lexer_Family_Decl
   --

   



      
      procedure Initialize_Fields_For_Lexer_Family_Decl
        (Self : Bare_Lexer_Family_Decl
         ; Lexer_Family_Decl_F_Syn_Name : Bare_Def_Id
         ; Lexer_Family_Decl_F_Rules : Bare_Full_Decl_List
        ) is
      begin

            Self.Lexer_Family_Decl_F_Syn_Name := Lexer_Family_Decl_F_Syn_Name;
            Self.Lexer_Family_Decl_F_Rules := Lexer_Family_Decl_F_Rules;
         

      end Initialize_Fields_For_Lexer_Family_Decl;

      
   function Lexer_Family_Decl_F_Rules
     (Node : Bare_Lexer_Family_Decl) return Bare_Full_Decl_List
   is
      

   begin
         
         return Node.Lexer_Family_Decl_F_Rules;
      
   end;


   







--# property-start LexerFamilyDecl.decl_type_name nodes.lkt:1576
pragma Warnings (Off, "is not referenced");
 function Lexer_Family_Decl_P_Decl_Type_Name
  
  (Node : Bare_Lexer_Family_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return String_Type
is
   Self : Bare_Lexer_Family_Decl  := Bare_Lexer_Family_Decl (Node);
      --# bind self Self

   


   Property_Result : String_Type;

      
            procedure Finalizer_Scope_153 with Inline_Always;

      Str : String_Type;

            procedure Finalizer_Scope_153 is
            begin
                     Dec_Ref (Str);
            end Finalizer_Scope_153;


begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         --# expr-start 831 '<String at nodes.lkt:1576:36>' Str nodes.lkt:1576
Str := Create_String ("lexer family declaration"); 
--# expr-done 831

         Property_Result := Str;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_153;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_153;




            raise;
      end;



   return Property_Result;
end Lexer_Family_Decl_P_Decl_Type_Name;
--# end



   


      

   --
   --  Primitives for Bare_Synth_Arg_Decl
   --

   





   







--# property-start SynthArgDecl.full_name nodes.lkt:1586
pragma Warnings (Off, "is not referenced");
 function Synth_Arg_Decl_P_Full_Name
  
  (Node : Bare_Synth_Arg_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return String_Type
is
   Self : Bare_Synth_Arg_Decl  := Bare_Synth_Arg_Decl (Node);
      --# bind self Self

   


   Property_Result : String_Type;

      
            procedure Finalizer_Scope_154 with Inline_Always;

      Str : String_Type;

            procedure Finalizer_Scope_154 is
            begin
                     Dec_Ref (Str);
            end Finalizer_Scope_154;


begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         --# expr-start 832 '<String at nodes.lkt:1586:31>' Str nodes.lkt:1586
Str := Create_String ("[Synthetic argument]"); 
--# expr-done 832

         Property_Result := Str;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_154;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_154;




            raise;
      end;



   return Property_Result;
end Synth_Arg_Decl_P_Full_Name;
--# end

   







--# property-start SynthArgDecl.decl_type_name nodes.lkt:1588
pragma Warnings (Off, "is not referenced");
 function Synth_Arg_Decl_P_Decl_Type_Name
  
  (Node : Bare_Synth_Arg_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return String_Type
is
   Self : Bare_Synth_Arg_Decl  := Bare_Synth_Arg_Decl (Node);
      --# bind self Self

   


   Property_Result : String_Type;

      
            procedure Finalizer_Scope_155 with Inline_Always;

      Str : String_Type;

            procedure Finalizer_Scope_155 is
            begin
                     Dec_Ref (Str);
            end Finalizer_Scope_155;


begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         --# expr-start 833 '<String at nodes.lkt:1588:36>' Str nodes.lkt:1588
Str := Create_String ("function argument declaration"); 
--# expr-done 833

         Property_Result := Str;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_155;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_155;




            raise;
      end;



   return Property_Result;
end Synth_Arg_Decl_P_Decl_Type_Name;
--# end



   


      

   --
   --  Primitives for Bare_Synth_Fun_Decl
   --

   



      
      procedure Initialize_Fields_For_Synth_Fun_Decl
        (Self : Bare_Synth_Fun_Decl
        ) is
      begin

         
      Self.Synth_Fun_Decl_Args := No_Internal_Formal_Param_Array_Type;
      Self.Synth_Fun_Decl_Return_Type := No_Entity_Type_Decl;

      end Initialize_Fields_For_Synth_Fun_Decl;


   







--# property-start SynthFunDecl.function_type_aux nodes.lkt:1600
pragma Warnings (Off, "is not referenced");
 function Synth_Fun_Decl_P_Function_Type_Aux
  
  (Node : Bare_Synth_Fun_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Internal_Entity_Function_Type
is
   Self : Bare_Synth_Fun_Decl  := Bare_Synth_Fun_Decl (Node);
     Ent : Internal_Entity_Synth_Fun_Decl :=
       Internal_Entity_Synth_Fun_Decl'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Internal_Entity_Function_Type;

      
            procedure Finalizer_Scope_156 with Inline_Always;

      Fld : Internal_Formal_Param_Array_Access;
Fld_1 : Internal_Entity_Type_Decl;
Map_Result : Internal_Entity_Type_Decl_Array_Access;
Fld_2 : Internal_Entity_Type_Decl;
Cast_Expr : Internal_Entity_Synth_Fun_Decl;
Cast_Result : Internal_Entity_Decl;
Fld_3 : Internal_Entity_Function_Type;

            procedure Finalizer_Scope_156 is
            begin
                     Dec_Ref (Fld);
                     Dec_Ref (Map_Result);
            end Finalizer_Scope_156;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 838 '<FieldAccess for function_type_helper at nodes.lkt:1601:9>' Fld_3 nodes.lkt:1601







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# expr-start 836 '<Map at nodes.lkt:1602:13>' Map_Result nodes.lkt:1602








   

   --# expr-start 834 '<FieldAccess for args at nodes.lkt:1602:13>' Fld nodes.lkt:1602







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Ent.Node.Synth_Fun_Decl_Args;
Inc_Ref (Fld);
--# expr-done 834

   
      declare
         Map_Result_Vec : Internal_Entity_Type_Decl_Vectors.Vector;
      begin
   

   

      

      declare
         
         Collection : constant Internal_Formal_Param_Array_Access := Fld;
      begin
         for Item_0 of
               Collection.Items
         loop

            
   --# scope-start


               --# bind a Item_0

            
         
         
      --# expr-start 835 '<FieldAccess for formal_type at nodes.lkt:1602:34>' Fld_1 nodes.lkt:1602









Fld_1 := Item_0.Formal_Type;
--# expr-done 835
      

         declare
            Item_To_Append : constant Internal_Entity_Type_Decl := Fld_1;
         begin
            Internal_Entity_Type_Decl_Vectors.Append (Map_Result_Vec, Item_To_Append);
         end;
   
   
   

            
   --# end



         end loop;
      end;
   

   

         Map_Result := Create_Internal_Entity_Type_Decl_Array
           (Items_Count => Natural (Internal_Entity_Type_Decl_Vectors.Length (Map_Result_Vec)));
         for I in Map_Result.Items'Range loop
            Map_Result.Items (I) := Internal_Entity_Type_Decl_Vectors.Get
              (Map_Result_Vec,
               I + Internal_Entity_Type_Decl_Vectors.Index_Type'First - Map_Result.Items'First);
         end loop;
         Internal_Entity_Type_Decl_Vectors.Destroy (Map_Result_Vec);

      end;
   



--# expr-done 836
--# expr-start 837 '<FieldAccess for return_type at nodes.lkt:1603:13>' Fld_2 nodes.lkt:1603







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_2 := Ent.Node.Synth_Fun_Decl_Return_Type;
--# expr-done 837






Cast_Expr := Ent; 



   
      Cast_Result := Create_Internal_Entity_Decl
        (Node => Cast_Expr.Node,
         Info => Cast_Expr.Info);


--# property-call-start LktNode.function_type_helper
Fld_3 := Liblktlang.Implementation.Lkt_Node_P_Function_Type_Helper (Node => Ent.Node, Args_Types => Map_Result, Return_Type => Fld_2, Origin => Cast_Result, E_Info => Ent.Info);
--# end
--# expr-done 838

         Property_Result := Fld_3;
         
   --# end
      Finalizer_Scope_156;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_156;




            raise;
      end;



   return Property_Result;
end Synth_Fun_Decl_P_Function_Type_Aux;
--# end

   







--# property-start SynthFunDecl.decl_type_name nodes.lkt:1607
pragma Warnings (Off, "is not referenced");
 function Synth_Fun_Decl_P_Decl_Type_Name
  
  (Node : Bare_Synth_Fun_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return String_Type
is
   Self : Bare_Synth_Fun_Decl  := Bare_Synth_Fun_Decl (Node);
      --# bind self Self

   


   Property_Result : String_Type;

      
            procedure Finalizer_Scope_157 with Inline_Always;

      Str : String_Type;

            procedure Finalizer_Scope_157 is
            begin
                     Dec_Ref (Str);
            end Finalizer_Scope_157;


begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         --# expr-start 839 '<String at nodes.lkt:1607:36>' Str nodes.lkt:1607
Str := Create_String ("function declaration"); 
--# expr-done 839

         Property_Result := Str;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_157;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_157;




            raise;
      end;



   return Property_Result;
end Synth_Fun_Decl_P_Decl_Type_Name;
--# end



   


      

   --
   --  Primitives for Bare_Type_Decl
   --

   




      
   function Type_Decl_F_Traits
     (Node : Bare_Type_Decl) return Bare_Type_Ref_List
   is
      

         Kind : constant Lkt_Type_Decl := Node.Kind;
   begin
         case Kind is
               when Lkt_Any_Type_Decl =>
                     return No_Bare_Lkt_Node;
               when Lkt_Enum_Class_Alt_Decl =>
                     return No_Bare_Lkt_Node;
               when Lkt_Function_Type =>
                     return No_Bare_Lkt_Node;
               when Lkt_Generic_Formal_Type_Decl =>
                     return No_Bare_Lkt_Node;
               when Lkt_Class_Decl | Lkt_Enum_Class_Decl =>
                     
         return Node.Basic_Class_Decl_F_Traits;
      
               when Lkt_Enum_Type_Decl =>
                     
         return Node.Enum_Type_Decl_F_Traits;
      
               when Lkt_Struct_Decl =>
                     
         return Node.Struct_Decl_F_Traits;
      
               when Lkt_Trait_Decl =>
                     return No_Bare_Lkt_Node;
         end case;
   end;

      
   function Type_Decl_F_Syn_Base_Type
     (Node : Bare_Type_Decl) return Bare_Type_Ref
   is
      

         Kind : constant Lkt_Type_Decl := Node.Kind;
   begin
         case Kind is
               when Lkt_Any_Type_Decl =>
                     return No_Bare_Lkt_Node;
               when Lkt_Enum_Class_Alt_Decl =>
                     return No_Bare_Lkt_Node;
               when Lkt_Function_Type =>
                     return No_Bare_Lkt_Node;
               when Lkt_Generic_Formal_Type_Decl =>
                     return No_Bare_Lkt_Node;
               when Lkt_Class_Decl | Lkt_Enum_Class_Decl =>
                     
         return Node.Basic_Class_Decl_F_Syn_Base_Type;
      
               when Lkt_Enum_Type_Decl =>
                     return No_Bare_Lkt_Node;
               when Lkt_Struct_Decl =>
                     return No_Bare_Lkt_Node;
               when Lkt_Trait_Decl =>
                     return No_Bare_Lkt_Node;
         end case;
   end;


   







--# property-start TypeDecl.self_decl nodes.lkt:1623
pragma Warnings (Off, "is not referenced");
 function Type_Decl_P_Self_Decl
  
  (Node : Bare_Type_Decl
  )

   return Bare_Self_Decl
is
   Self : Bare_Type_Decl  := Bare_Type_Decl (Node);
      --# bind self Self

   


   Property_Result : Bare_Self_Decl;

      

      New_Node : Bare_Self_Decl;


      
      Mmz_Handle : Memoization_Handle;
      Mmz_Val    : Mmz_Value;

      Mmz_Stored : Boolean;
      --  Whether the memoization couple was actually stored. Used to determine
      --  whether to inc-ref the memoized value.

      function Create_Mmz_Key return Mmz_Key;
      --  Create a memoization key for this property call and return it

      --------------------
      -- Create_Mmz_Key --
      --------------------

      function Create_Mmz_Key return Mmz_Key is
      begin
         return Mmz_K : Mmz_Key :=
           (Property => Mmz_Bare_Type_Decl_Type_Decl_P_Self_Decl,
            Items    => new Mmz_Key_Array (1 ..  1))
         do
            Mmz_K.Items (1) := (Kind => Mmz_Bare_Type_Decl,
                                As_Bare_Type_Decl => Self);
         end return;
      end Create_Mmz_Key;

begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;

      if Self /= null then

         if not Self.Unit.Context.In_Populate_Lexical_Env then

            if Find_Memoized_Value
              (Self.Unit, Mmz_Handle, Mmz_Val, Create_Mmz_Key'Access)
            then
               --# memoization-lookup

               if Mmz_Val.Kind = Mmz_Evaluating then
                  --# memoization-return
                  Raise_Property_Exception
                    (Self,
                     Property_Error'Identity,
                     "Infinite recursion detected");

               elsif Mmz_Val.Kind = Mmz_Error then
                  --# memoization-return
                  Reraise_Memoized_Error (Mmz_Val);

               else
                  Property_Result := Mmz_Val.As_Bare_Self_Decl;

                  --# memoization-return
                  return Property_Result;
               end if;
               --# end
            end if;

         end if;
      end if;

      begin
         
   --# scope-start

         --# expr-start 840 '<New SelfDecl at nodes.lkt:1623:33>' New_Node nodes.lkt:1623



if Is_Foreign_Strict (Self.Self_Env, Self) then
   Raise_Property_Exception
     (Self,
      Property_Error'Identity,
      "synthetic nodes cannot have foreign lexical envs");
end if;


New_Node := new Root_Node_Record
  (Lkt_Self_Decl);
Initialize
  (Self => New_Node,
   Kind => Lkt_Self_Decl,
   Unit => Self.Unit,

   Token_Start_Index => No_Token_Index,
   Token_End_Index   => No_Token_Index,

   Parent => Self,

   Self_Env => Self.Self_Env);
Register_Destroyable (Self.Unit, New_Node);



--# expr-done 840

         Property_Result := New_Node;
         
   --# end


      exception
         when Exc : Property_Error =>


               if Self /= null then
                     if not Self.Unit.Context.In_Populate_Lexical_Env then
                        Add_Memoized_Error
                          (Self.Unit, Mmz_Handle, Exc, Mmz_Stored);
                     end if;
               end if;


            raise;
      end;

      if Self /= null then
         if not Self.Unit.Context.In_Populate_Lexical_Env then

            Mmz_Val := (Kind => Mmz_Bare_Self_Decl,
                        As_Bare_Self_Decl => Property_Result);
            Add_Memoized_Value (Self.Unit, Mmz_Handle, Mmz_Val, Mmz_Stored);

         end if;
      end if;



   return Property_Result;
end Type_Decl_P_Self_Decl;
--# end

   







--# property-start TypeDecl.node_decl nodes.lkt:1626
pragma Warnings (Off, "is not referenced");
 function Type_Decl_P_Node_Decl
  
  (Node : Bare_Type_Decl
  )

   return Bare_Node_Decl
is
   Self : Bare_Type_Decl  := Bare_Type_Decl (Node);
      --# bind self Self

   


   Property_Result : Bare_Node_Decl;

      

      New_Node : Bare_Node_Decl;


      
      Mmz_Handle : Memoization_Handle;
      Mmz_Val    : Mmz_Value;

      Mmz_Stored : Boolean;
      --  Whether the memoization couple was actually stored. Used to determine
      --  whether to inc-ref the memoized value.

      function Create_Mmz_Key return Mmz_Key;
      --  Create a memoization key for this property call and return it

      --------------------
      -- Create_Mmz_Key --
      --------------------

      function Create_Mmz_Key return Mmz_Key is
      begin
         return Mmz_K : Mmz_Key :=
           (Property => Mmz_Bare_Type_Decl_Type_Decl_P_Node_Decl,
            Items    => new Mmz_Key_Array (1 ..  1))
         do
            Mmz_K.Items (1) := (Kind => Mmz_Bare_Type_Decl,
                                As_Bare_Type_Decl => Self);
         end return;
      end Create_Mmz_Key;

begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;

      if Self /= null then

         if not Self.Unit.Context.In_Populate_Lexical_Env then

            if Find_Memoized_Value
              (Self.Unit, Mmz_Handle, Mmz_Val, Create_Mmz_Key'Access)
            then
               --# memoization-lookup

               if Mmz_Val.Kind = Mmz_Evaluating then
                  --# memoization-return
                  Raise_Property_Exception
                    (Self,
                     Property_Error'Identity,
                     "Infinite recursion detected");

               elsif Mmz_Val.Kind = Mmz_Error then
                  --# memoization-return
                  Reraise_Memoized_Error (Mmz_Val);

               else
                  Property_Result := Mmz_Val.As_Bare_Node_Decl;

                  --# memoization-return
                  return Property_Result;
               end if;
               --# end
            end if;

         end if;
      end if;

      begin
         
   --# scope-start

         --# expr-start 841 '<New NodeDecl at nodes.lkt:1626:33>' New_Node nodes.lkt:1626



if Is_Foreign_Strict (Self.Self_Env, Self) then
   Raise_Property_Exception
     (Self,
      Property_Error'Identity,
      "synthetic nodes cannot have foreign lexical envs");
end if;


New_Node := new Root_Node_Record
  (Lkt_Node_Decl);
Initialize
  (Self => New_Node,
   Kind => Lkt_Node_Decl,
   Unit => Self.Unit,

   Token_Start_Index => No_Token_Index,
   Token_End_Index   => No_Token_Index,

   Parent => Self,

   Self_Env => Self.Self_Env);
Register_Destroyable (Self.Unit, New_Node);



--# expr-done 841

         Property_Result := New_Node;
         
   --# end


      exception
         when Exc : Property_Error =>


               if Self /= null then
                     if not Self.Unit.Context.In_Populate_Lexical_Env then
                        Add_Memoized_Error
                          (Self.Unit, Mmz_Handle, Exc, Mmz_Stored);
                     end if;
               end if;


            raise;
      end;

      if Self /= null then
         if not Self.Unit.Context.In_Populate_Lexical_Env then

            Mmz_Val := (Kind => Mmz_Bare_Node_Decl,
                        As_Bare_Node_Decl => Property_Result);
            Add_Memoized_Value (Self.Unit, Mmz_Handle, Mmz_Val, Mmz_Stored);

         end if;
      end if;



   return Property_Result;
end Type_Decl_P_Node_Decl;
--# end

   







--# property-start TypeDecl.base_type nodes.lkt:1630
pragma Warnings (Off, "is not referenced");
 function Type_Decl_P_Base_Type
  
  (Node : Bare_Type_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Internal_Entity_Type_Ref
is
   Self : Bare_Type_Decl  := Bare_Type_Decl (Node);
     Ent : Internal_Entity_Type_Decl :=
       Internal_Entity_Type_Decl'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Internal_Entity_Type_Ref;

      

      Fld : Internal_Entity_Type_Ref;



begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         --# expr-start 842 '<FieldAccess for syn_base_type at nodes.lkt:1630:40>' Fld nodes.lkt:1630







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Create_Internal_Entity_Type_Ref (Node => Implementation.Type_Decl_F_Syn_Base_Type (Ent.Node), Info => Ent.Info);
--# expr-done 842

         Property_Result := Fld;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Type_Decl_P_Base_Type;
--# end

   







--# property-start TypeDecl.base_type_if_entity nodes.lkt:1634
pragma Warnings (Off, "is not referenced");
 function Type_Decl_P_Base_Type_If_Entity
  
  (Node : Bare_Type_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Internal_Entity_Type_Decl
is
   Self : Bare_Type_Decl  := Bare_Type_Decl (Node);
     Ent : Internal_Entity_Type_Decl :=
       Internal_Entity_Type_Decl'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Internal_Entity_Type_Decl;

      

      Var_Expr_27 : Internal_Entity_Type_Ref;
Fld : Internal_Entity_Type_Decl;
Fld_1 : Internal_Entity_Named_Type_Decl;
Fld_2 : Bare_Named_Type_Decl;
Cast_Result : Bare_Type_Decl;
Is_Equal : Boolean;
If_Result : Internal_Entity_Type_Decl;
Fld_3 : Internal_Entity_Type_Ref;
Fld_4 : Internal_Entity_Type_Decl;
Scope_Result : Internal_Entity_Type_Decl;
Result_Var : Internal_Entity_Type_Decl;



begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

            Populate_Lexical_Env_For_Unit (Self);
      end if;


      begin
         
   --# scope-start

         


--# expr-start 848 '<FieldAccess for base_type at nodes.lkt:1635:9>' Fld_3 nodes.lkt:1635



--# expr-start 847 '<If at nodes.lkt:1636:13>' If_Result nodes.lkt:1636



--# expr-start 845 '<Eq at nodes.lkt:1636:16>' Is_Equal nodes.lkt:1636






--# expr-start 844 '<FieldAccess for node at nodes.lkt:1636:24>' Fld_2 nodes.lkt:1636



--# expr-start 843 '<FieldAccess for entity_type at nodes.lkt:1636:24>' Fld_1 nodes.lkt:1636







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start LktNode.entity_type
Fld_1 := Liblktlang.Implementation.Lkt_Node_P_Entity_Type (Node => Self);
--# end
--# expr-done 843





Fld_2 := Fld_1.Node;
--# expr-done 844



   
      Cast_Result := Fld_2;


Is_Equal := Self = Cast_Result; 
--# expr-done 845
if Is_Equal then
   --# expr-start 846 '<FieldAccess for get_entity_node_type at nodes.lkt:1636:53>' Fld nodes.lkt:1636







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start TypeDecl.get_entity_node_type
Fld := Liblktlang.Implementation.Type_Decl_P_Get_Entity_Node_Type (Node => Ent.Node, E_Info => Ent.Info);
--# end
--# expr-done 846
   If_Result := Fld;
else
   
   If_Result := Ent;
end if;



--# expr-done 847



   if If_Result.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start TypeDecl.base_type
Fld_3 := Liblktlang.Implementation.Type_Decl_P_Base_Type (Node => If_Result.Node, E_Info => If_Result.Info);
--# end
--# expr-done 848
Var_Expr_27 := Fld_3;





if Var_Expr_27 /= No_Entity_Type_Ref then
   



   --# scope-start


   

--# expr-start 849 '<FieldAccess for referenced_decl at nodes.lkt:1635:9>' Fld_4 nodes.lkt:1635







   if Var_Expr_27.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start TypeRef.referenced_decl
Fld_4 := Liblktlang.Implementation.Type_Ref_P_Referenced_Decl (Node => Var_Expr_27.Node, E_Info => Var_Expr_27.Info);
--# end
--# expr-done 849
Scope_Result := Fld_4;


   --# end


   Result_Var := Scope_Result;
else
   
   Result_Var := No_Entity_Type_Decl;
end if;




         Property_Result := Result_Var;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Type_Decl_P_Base_Type_If_Entity;
--# end

   







--# property-start TypeDecl.is_equation nodes.lkt:1645
pragma Warnings (Off, "is not referenced");
 function Type_Decl_P_Is_Equation
  
  (Node : Bare_Type_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Boolean
is
   Self : Bare_Type_Decl  := Bare_Type_Decl (Node);
     Ent : Internal_Entity_Type_Decl :=
       Internal_Entity_Type_Decl'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Boolean;

      

      Is_Null : Boolean;
Fld : Internal_Entity_Named_Type_Decl;
Cast_Expr : Internal_Entity_Type_Decl;
Cast_Result : Internal_Entity;
Cast_Result_1 : Internal_Entity;
Is_Equiv : Boolean;
If_Result : Boolean;



begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 853 '<BooleanBinaryOp Or at nodes.lkt:1645:31>' If_Result nodes.lkt:1645



--# expr-start 850 '<IsNull at nodes.lkt:1645:31>' Is_Null nodes.lkt:1645

Is_Null := Ent.Node = null; 
--# expr-done 850
if Is_Null then
   
   If_Result := True;
else
   --# expr-start 852 '<Eq at nodes.lkt:1645:47>' Is_Equiv nodes.lkt:1645






Cast_Expr := Ent; 



   
      Cast_Result := Create_Internal_Entity
        (Node => Cast_Expr.Node,
         Info => Cast_Expr.Info);







--# expr-start 851 '<FieldAccess for equation_type at nodes.lkt:1645:55>' Fld nodes.lkt:1645







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start LktNode.equation_type
Fld := Liblktlang.Implementation.Lkt_Node_P_Equation_Type (Node => Self);
--# end
--# expr-done 851



   
      Cast_Result_1 := Create_Internal_Entity
        (Node => Fld.Node,
         Info => Fld.Info);


Is_Equiv := Equivalent (Cast_Result, Cast_Result_1); 
--# expr-done 852
   If_Result := Is_Equiv;
end if;



--# expr-done 853

         Property_Result := If_Result;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Type_Decl_P_Is_Equation;
--# end

   







--# property-start TypeDecl.is_bool nodes.lkt:1652
pragma Warnings (Off, "is not referenced");
 function Type_Decl_P_Is_Bool
  
  (Node : Bare_Type_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Boolean
is
   Self : Bare_Type_Decl  := Bare_Type_Decl (Node);
     Ent : Internal_Entity_Type_Decl :=
       Internal_Entity_Type_Decl'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Boolean;

      

      Is_Null : Boolean;
Fld : Internal_Entity_Named_Type_Decl;
Cast_Expr : Internal_Entity_Type_Decl;
Cast_Result : Internal_Entity;
Cast_Result_1 : Internal_Entity;
Is_Equiv : Boolean;
If_Result : Boolean;



begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 857 '<BooleanBinaryOp Or at nodes.lkt:1652:27>' If_Result nodes.lkt:1652



--# expr-start 854 '<IsNull at nodes.lkt:1652:27>' Is_Null nodes.lkt:1652

Is_Null := Ent.Node = null; 
--# expr-done 854
if Is_Null then
   
   If_Result := True;
else
   --# expr-start 856 '<Eq at nodes.lkt:1652:43>' Is_Equiv nodes.lkt:1652






Cast_Expr := Ent; 



   
      Cast_Result := Create_Internal_Entity
        (Node => Cast_Expr.Node,
         Info => Cast_Expr.Info);







--# expr-start 855 '<FieldAccess for bool_type at nodes.lkt:1652:51>' Fld nodes.lkt:1652







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start LktNode.bool_type
Fld := Liblktlang.Implementation.Lkt_Node_P_Bool_Type (Node => Self);
--# end
--# expr-done 855



   
      Cast_Result_1 := Create_Internal_Entity
        (Node => Fld.Node,
         Info => Fld.Info);


Is_Equiv := Equivalent (Cast_Result, Cast_Result_1); 
--# expr-done 856
   If_Result := Is_Equiv;
end if;



--# expr-done 857

         Property_Result := If_Result;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Type_Decl_P_Is_Bool;
--# end

   







--# property-start TypeDecl.is_string_or_array_type nodes.lkt:1655
pragma Warnings (Off, "is not referenced");
 function Type_Decl_P_Is_String_Or_Array_Type
  
  (Node : Bare_Type_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Boolean
is
   Self : Bare_Type_Decl  := Bare_Type_Decl (Node);
     Ent : Internal_Entity_Type_Decl :=
       Internal_Entity_Type_Decl'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Boolean;

      

      Is_Null : Boolean;
Fld : Internal_Entity_Named_Type_Decl;
Cast_Expr : Internal_Entity_Type_Decl;
Cast_Result : Internal_Entity;
Cast_Result_1 : Internal_Entity;
Is_Equiv : Boolean;
If_Result : Boolean;
Fld_1 : Internal_Entity_Named_Type_Decl;
Fld_2 : Bare_Named_Type_Decl;
Cast_Result_2 : Bare_Type_Decl;
Is_Equal : Boolean;
If_Result_1 : Boolean;



begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 865 '<BooleanBinaryOp Or at nodes.lkt:1656:9>' If_Result_1 nodes.lkt:1656



--# expr-start 861 '<BooleanBinaryOp Or at nodes.lkt:1656:10>' If_Result nodes.lkt:1656



--# expr-start 858 '<IsNull at nodes.lkt:1656:10>' Is_Null nodes.lkt:1656

Is_Null := Ent.Node = null; 
--# expr-done 858
if Is_Null then
   
   If_Result := True;
else
   --# expr-start 860 '<Eq at nodes.lkt:1656:26>' Is_Equiv nodes.lkt:1656






Cast_Expr := Ent; 



   
      Cast_Result := Create_Internal_Entity
        (Node => Cast_Expr.Node,
         Info => Cast_Expr.Info);







--# expr-start 859 '<FieldAccess for string_type at nodes.lkt:1656:34>' Fld nodes.lkt:1656







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start LktNode.string_type
Fld := Liblktlang.Implementation.Lkt_Node_P_String_Type (Node => Ent.Node);
--# end
--# expr-done 859



   
      Cast_Result_1 := Create_Internal_Entity
        (Node => Fld.Node,
         Info => Fld.Info);


Is_Equiv := Equivalent (Cast_Result, Cast_Result_1); 
--# expr-done 860
   If_Result := Is_Equiv;
end if;



--# expr-done 861
if If_Result then
   
   If_Result_1 := True;
else
   --# expr-start 864 '<Eq at nodes.lkt:1657:12>' Is_Equal nodes.lkt:1657






--# expr-start 863 '<FieldAccess for node at nodes.lkt:1657:20>' Fld_2 nodes.lkt:1657



--# expr-start 862 '<FieldAccess for array_type at nodes.lkt:1657:20>' Fld_1 nodes.lkt:1657







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start LktNode.array_type
Fld_1 := Liblktlang.Implementation.Lkt_Node_P_Array_Type (Node => Ent.Node);
--# end
--# expr-done 862





Fld_2 := Fld_1.Node;
--# expr-done 863



   
      Cast_Result_2 := Fld_2;


Is_Equal := Self = Cast_Result_2; 
--# expr-done 864
   If_Result_1 := Is_Equal;
end if;



--# expr-done 865

         Property_Result := If_Result_1;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Type_Decl_P_Is_String_Or_Array_Type;
--# end

   







--# property-start TypeDecl.is_int_type nodes.lkt:1660
pragma Warnings (Off, "is not referenced");
 function Type_Decl_P_Is_Int_Type
  
  (Node : Bare_Type_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Boolean
is
   Self : Bare_Type_Decl  := Bare_Type_Decl (Node);
     Ent : Internal_Entity_Type_Decl :=
       Internal_Entity_Type_Decl'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Boolean;

      

      Is_Null : Boolean;
Fld : Internal_Entity_Named_Type_Decl;
Cast_Expr : Internal_Entity_Type_Decl;
Cast_Result : Internal_Entity;
Cast_Result_1 : Internal_Entity;
Is_Equiv : Boolean;
If_Result : Boolean;
Fld_1 : Internal_Entity_Named_Type_Decl;
Cast_Expr_1 : Internal_Entity_Type_Decl;
Cast_Result_2 : Internal_Entity;
Cast_Result_3 : Internal_Entity;
Is_Equiv_1 : Boolean;
If_Result_1 : Boolean;



begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 872 '<BooleanBinaryOp Or at nodes.lkt:1661:9>' If_Result_1 nodes.lkt:1661



--# expr-start 869 '<BooleanBinaryOp Or at nodes.lkt:1661:10>' If_Result nodes.lkt:1661



--# expr-start 866 '<IsNull at nodes.lkt:1661:10>' Is_Null nodes.lkt:1661

Is_Null := Ent.Node = null; 
--# expr-done 866
if Is_Null then
   
   If_Result := True;
else
   --# expr-start 868 '<Eq at nodes.lkt:1661:26>' Is_Equiv nodes.lkt:1661






Cast_Expr := Ent; 



   
      Cast_Result := Create_Internal_Entity
        (Node => Cast_Expr.Node,
         Info => Cast_Expr.Info);







--# expr-start 867 '<FieldAccess for int_type at nodes.lkt:1661:34>' Fld nodes.lkt:1661







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start LktNode.int_type
Fld := Liblktlang.Implementation.Lkt_Node_P_Int_Type (Node => Ent.Node);
--# end
--# expr-done 867



   
      Cast_Result_1 := Create_Internal_Entity
        (Node => Fld.Node,
         Info => Fld.Info);


Is_Equiv := Equivalent (Cast_Result, Cast_Result_1); 
--# expr-done 868
   If_Result := Is_Equiv;
end if;



--# expr-done 869
if If_Result then
   
   If_Result_1 := True;
else
   --# expr-start 871 '<Eq at nodes.lkt:1661:54>' Is_Equiv_1 nodes.lkt:1661






Cast_Expr_1 := Ent; 



   
      Cast_Result_2 := Create_Internal_Entity
        (Node => Cast_Expr_1.Node,
         Info => Cast_Expr_1.Info);







--# expr-start 870 '<FieldAccess for bigint_type at nodes.lkt:1661:62>' Fld_1 nodes.lkt:1661







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start LktNode.bigint_type
Fld_1 := Liblktlang.Implementation.Lkt_Node_P_Bigint_Type (Node => Ent.Node);
--# end
--# expr-done 870



   
      Cast_Result_3 := Create_Internal_Entity
        (Node => Fld_1.Node,
         Info => Fld_1.Info);


Is_Equiv_1 := Equivalent (Cast_Result_2, Cast_Result_3); 
--# expr-done 871
   If_Result_1 := Is_Equiv_1;
end if;



--# expr-done 872

         Property_Result := If_Result_1;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Type_Decl_P_Is_Int_Type;
--# end

   







--# property-start TypeDecl.is_int_or_node nodes.lkt:1666
pragma Warnings (Off, "is not referenced");
 function Type_Decl_P_Is_Int_Or_Node
  
  (Node : Bare_Type_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Boolean
is
   Self : Bare_Type_Decl  := Bare_Type_Decl (Node);
     Ent : Internal_Entity_Type_Decl :=
       Internal_Entity_Type_Decl'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Boolean;

      
            procedure Finalizer_Scope_166 with Inline_Always;

      Is_Null : Boolean;
Fld : Boolean;
If_Result : Boolean;
Fld_1 : Lexical_Env := Empty_Env;
Sym : Symbol_Type;
Env_Get_Result : Internal_Entity;
Cast_Result : Internal_Entity_Type_Decl;
Fld_2 : Boolean;
If_Result_1 : Boolean;

            procedure Finalizer_Scope_166 is
            begin
                     Dec_Ref (Fld_1);
            end Finalizer_Scope_166;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 881 '<BooleanBinaryOp Or at nodes.lkt:1667:9>' If_Result_1 nodes.lkt:1667



--# expr-start 875 '<BooleanBinaryOp Or at nodes.lkt:1667:10>' If_Result nodes.lkt:1667



--# expr-start 873 '<IsNull at nodes.lkt:1667:10>' Is_Null nodes.lkt:1667

Is_Null := Ent.Node = null; 
--# expr-done 873
if Is_Null then
   
   If_Result := True;
else
   --# expr-start 874 '<FieldAccess for is_int_type at nodes.lkt:1667:26>' Fld nodes.lkt:1667







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start TypeDecl.is_int_type
Fld := Liblktlang.Implementation.Type_Decl_P_Is_Int_Type (Node => Ent.Node, E_Info => Ent.Info);
--# end
--# expr-done 874
   If_Result := Fld;
end if;



--# expr-done 875
if If_Result then
   
   If_Result_1 := True;
else
   --# expr-start 880 '<FieldAccess for is_subtype_or_eq at nodes.lkt:1668:12>' Fld_2 nodes.lkt:1668



--# expr-start 879 '<Cast to TypeDecl at nodes.lkt:1668:12>' Cast_Result nodes.lkt:1668





--# expr-start 878 '<EnvGet at nodes.lkt:1668:12>' Env_Get_Result nodes.lkt:1668
--# expr-start 876 '<FieldAccess for node_env at nodes.lkt:1668:12>' Fld_1 nodes.lkt:1668







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_1 := Liblktlang.Implementation.Node_Env (Node => Ent.Node, E_Info => Ent.Info);
--# expr-done 876
--# expr-start 877 '<Symbol RootNode__ at nodes.lkt:1668:36>' Sym nodes.lkt:1668
Sym := Precomputed_Symbol (Precomputed_Symbol_Table (Self.Unit.Context.Symbols), Precomputed_Sym_Rootnode); 
--# expr-done 877


Env_Get_Result := AST_Envs.Get_First (Self => Fld_1, Key => Thin (Sym), Lookup_Kind => To_Lookup_Kind_Type (Recursive), Categories => (Nocat => True)); 
--# expr-done 878



   if Env_Get_Result.Node = null
      or else Env_Get_Result.Node.Kind in Lkt_Type_Decl
   then
      
      Cast_Result := Create_Internal_Entity_Type_Decl
        (Node => Env_Get_Result.Node,
         Info => Env_Get_Result.Info);

   else
         Cast_Result := No_Entity_Type_Decl;
   end if;


--# expr-done 879



   if Cast_Result.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;



--# property-call-start TypeDecl.is_subtype_or_eq
Fld_2 := Liblktlang.Implementation.Type_Decl_P_Is_Subtype_Or_Eq (Node => Cast_Result.Node, Rhs => Ent, E_Info => Cast_Result.Info);
--# end
--# expr-done 880
   If_Result_1 := Fld_2;
end if;



--# expr-done 881

         Property_Result := If_Result_1;
         
   --# end
      Finalizer_Scope_166;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_166;




            raise;
      end;



   return Property_Result;
end Type_Decl_P_Is_Int_Or_Node;
--# end

   







--# property-start TypeDecl.get_entity_node_type nodes.lkt:1674
pragma Warnings (Off, "is not referenced");
 function Type_Decl_P_Get_Entity_Node_Type
  
  (Node : Bare_Type_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Internal_Entity_Type_Decl
is
   Self : Bare_Type_Decl  := Bare_Type_Decl (Node);
     Ent : Internal_Entity_Type_Decl :=
       Internal_Entity_Type_Decl'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Internal_Entity_Type_Decl;

      
            procedure Finalizer_Scope_541 with Inline_Always;

      Var_Expr_0 : Internal_Entity_Type_Decl;
Var_Expr_28 : Internal_Entity_Generic_Decl;
Fld : Internal_Entity;
Cast_Result : Internal_Entity_Generic_Decl;
Fld_1 : Lexical_Env := Empty_Env;
Fld_2 : Internal_Entity_Generic_Decl;
Fld_3 : Internal_Entity_Generic_Formal_Decl_List;
Fld_4 : Bare_Generic_Formal_Decl_List;
Fld_5 : Internal_Entity_Info;
Get_Result : Bare_Full_Decl;
As_Entity : Internal_Entity_Full_Decl;
Is_Null : Boolean;
If_Result : Internal_Entity_Full_Decl;
Fld_6 : Internal_Entity_Decl;
Fld_7 : Symbol_Type;
Env_Get_Result : Internal_Entity;
Scope_Result : Internal_Entity;
Result_Var : Internal_Entity;
Cast_Result_1 : Internal_Entity_Type_Decl;
Fld_8 : Internal_Entity_Decl;
Cast_Result_2 : Internal_Entity_Type_Decl;
Fld_9 : Boolean;
If_Result_1 : Internal_Entity_Type_Decl;
Scope_Result_1 : Internal_Entity_Type_Decl;
Result_Var_1 : Internal_Entity_Type_Decl;
Fld_10 : Internal_Entity_Named_Type_Decl;
Fld_11 : Bare_Named_Type_Decl;
Cast_Result_3 : Bare_Type_Decl;
Is_Equal : Boolean;
If_Result_2 : Internal_Entity_Type_Decl;
Is_Null_1 : Boolean;
If_Result_3 : Internal_Entity_Type_Decl;

            procedure Finalizer_Scope_541 is
            begin
                     Dec_Ref (Fld_1);
            end Finalizer_Scope_541;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 900 '<If at nodes.lkt:1675:9>' If_Result_3 nodes.lkt:1675



--# expr-start 882 '<IsNull at nodes.lkt:1675:12>' Is_Null_1 nodes.lkt:1675

Is_Null_1 := Ent.Node = null; 
--# expr-done 882
if Is_Null_1 then
   
   If_Result_3 := No_Entity_Type_Decl;
else
   --# expr-start 899 '<If at nodes.lkt:1675:9>' If_Result_2 nodes.lkt:1675



--# expr-start 885 '<Eq at nodes.lkt:1676:14>' Is_Equal nodes.lkt:1676






--# expr-start 884 '<FieldAccess for node at nodes.lkt:1676:22>' Fld_11 nodes.lkt:1676



--# expr-start 883 '<FieldAccess for entity_type at nodes.lkt:1676:22>' Fld_10 nodes.lkt:1676







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start LktNode.entity_type
Fld_10 := Liblktlang.Implementation.Lkt_Node_P_Entity_Type (Node => Ent.Node);
--# end
--# expr-done 883





Fld_11 := Fld_10.Node;
--# expr-done 884



   
      Cast_Result_3 := Fld_11;


Is_Equal := Self = Cast_Result_3; 
--# expr-done 885
if Is_Equal then
   


--# expr-start 894 '<Cast to TypeDecl at nodes.lkt:1678:13>' Cast_Result_1 nodes.lkt:1678








--# expr-start 887 '<Cast to GenericDecl at nodes.lkt:1678:13>' Cast_Result nodes.lkt:1678





--# expr-start 886 '<parent at nodes.lkt:1678:13>' Fld nodes.lkt:1678







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Liblktlang.Implementation.Parent (Node => Ent.Node, E_Info => Ent.Info);
--# expr-done 886



   if Fld.Node = null
      or else Fld.Node.Kind in Lkt_Generic_Decl_Range
   then
      
      Cast_Result := Create_Internal_Entity_Generic_Decl
        (Node => Fld.Node,
         Info => Fld.Info);

   else
         Cast_Result := No_Entity_Generic_Decl;
   end if;


--# expr-done 887
Var_Expr_28 := Cast_Result;





if Var_Expr_28 /= No_Entity_Generic_Decl then
   



   --# scope-start


   

--# expr-start 893 '<EnvGet at nodes.lkt:1678:13>' Env_Get_Result nodes.lkt:1678
--# expr-start 888 '<FieldAccess for children_env at nodes.lkt:1678:13>' Fld_1 nodes.lkt:1678







   if Var_Expr_28.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_1 := Liblktlang.Implementation.Children_Env (Node => Var_Expr_28.Node, E_Info => Var_Expr_28.Info);
--# expr-done 888
--# expr-start 892 '<FieldAccess for name at nodes.lkt:1679:17>' Fld_7 nodes.lkt:1679



--# expr-start 891 '<FieldAccess for decl at nodes.lkt:1679:17>' Fld_6 nodes.lkt:1679



--# expr-start 890 '<FieldAccess for generic_formal_decls at nodes.lkt:1679:17>' Fld_3 nodes.lkt:1679



--# expr-start 889 '<FieldAccess for entity_gen_type at nodes.lkt:1679:17>' Fld_2 nodes.lkt:1679







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start LktNode.entity_gen_type
Fld_2 := Liblktlang.Implementation.Lkt_Node_P_Entity_Gen_Type (Node => Ent.Node);
--# end
--# expr-done 889



   if Fld_2.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_3 := Create_Internal_Entity_Generic_Formal_Decl_List (Node => Fld_2.Node.Generic_Decl_F_Generic_Formal_Decls, Info => Fld_2.Info);
--# expr-done 890













Fld_4 := Fld_3.Node;


Get_Result := Get (Self, Fld_4, 0, True); 
Is_Null := Get_Result = null; 
if Is_Null then
   
   If_Result := No_Entity_Full_Decl;
else
   








Fld_5 := Fld_3.Info;

As_Entity := (Info => Fld_5, Node => Get_Result); 
   If_Result := As_Entity;
end if;






   if If_Result.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_6 := Create_Internal_Entity_Decl (Node => If_Result.Node.Full_Decl_F_Decl, Info => If_Result.Info);
--# expr-done 891



   if Fld_6.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]Decl.name'
Fld_7 := Liblktlang.Implementation.Dispatcher_Decl_P_Name (Node => Fld_6.Node);
--# end
--# expr-done 892


Env_Get_Result := AST_Envs.Get_First (Self => Fld_1, Key => Thin (Fld_7), Lookup_Kind => To_Lookup_Kind_Type (Recursive), Categories => (Nocat => True)); 
--# expr-done 893
Scope_Result := Env_Get_Result;


   --# end
      Finalizer_Scope_541;


   Result_Var := Scope_Result;
else
   
   Result_Var := No_Entity;
end if;






   if Result_Var.Node = null
      or else Result_Var.Node.Kind in Lkt_Type_Decl
   then
      
      Cast_Result_1 := Create_Internal_Entity_Type_Decl
        (Node => Result_Var.Node,
         Info => Result_Var.Info);

   else
         Cast_Result_1 := No_Entity_Type_Decl;
   end if;


--# expr-done 894
Var_Expr_0 := Cast_Result_1;





if Var_Expr_0 /= No_Entity_Type_Decl then
   



   --# scope-start


   --# bind td Var_Expr_0

--# expr-start 898 '<If at nodes.lkt:1684:17>' If_Result_1 nodes.lkt:1684



--# expr-start 895 '<FieldAccess for is_generic at nodes.lkt:1684:20>' Fld_9 nodes.lkt:1684







   if Var_Expr_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start Decl.is_generic
Fld_9 := Liblktlang.Implementation.Decl_P_Is_Generic (Node => Var_Expr_0.Node, E_Info => Var_Expr_0.Info);
--# end
--# expr-done 895
if Fld_9 then
   
   If_Result_1 := Var_Expr_0;
else
   --# expr-start 897 '<Cast to TypeDecl at nodes.lkt:1684:49>' Cast_Result_2 nodes.lkt:1684





--# expr-start 896 '<FieldAccess for as_bare_decl at nodes.lkt:1684:49>' Fld_8 nodes.lkt:1684







   if Var_Expr_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start Decl.as_bare_decl
Fld_8 := Liblktlang.Implementation.Decl_P_As_Bare_Decl (Node => Var_Expr_0.Node, E_Info => Var_Expr_0.Info);
--# end
--# expr-done 896



   if Fld_8.Node = null
      or else Fld_8.Node.Kind in Lkt_Type_Decl
   then
      
      Cast_Result_2 := Create_Internal_Entity_Type_Decl
        (Node => Fld_8.Node,
         Info => Fld_8.Info);

   else
         Raise_Property_Exception
           (Self, Property_Error'Identity, "invalid object cast");
   end if;


--# expr-done 897
   If_Result_1 := Cast_Result_2;
end if;



--# expr-done 898
Scope_Result_1 := If_Result_1;


   --# end


   Result_Var_1 := Scope_Result_1;
else
   
   Result_Var_1 := No_Entity_Type_Decl;
end if;



   If_Result_2 := Result_Var_1;
else
   
   If_Result_2 := Ent;
end if;



--# expr-done 899
   If_Result_3 := If_Result_2;
end if;



--# expr-done 900

         Property_Result := If_Result_3;
         
   --# end


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_541;




            raise;
      end;



   return Property_Result;
end Type_Decl_P_Get_Entity_Node_Type;
--# end

   







--# property-start TypeDecl.is_subtype_or_eq nodes.lkt:1692
pragma Warnings (Off, "is not referenced");
 function Type_Decl_P_Is_Subtype_Or_Eq
  
  (Node : Bare_Type_Decl
      ; Rhs : Internal_Entity_Type_Decl
      ; Allow_Entity : Boolean
         := False
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Boolean
is
   Self : Bare_Type_Decl  := Bare_Type_Decl (Node);
     Ent : Internal_Entity_Type_Decl :=
       Internal_Entity_Type_Decl'(Node => Self, Info => E_Info);
      --# bind entity Ent

   

   --# bind rhs Rhs
   --# bind allow_entity Allow_Entity

   Property_Result : Boolean;

      
            procedure Finalizer_Scope_168 with Inline_Always;

      Fld : Internal_Entity_Type_Decl;
Fld_1 : Internal_Entity_Type_Decl;
Fld_2 : Boolean;
Is_Null : Boolean;
Is_Null_1 : Boolean;
If_Result : Boolean;
Cast_Expr : Internal_Entity_Type_Decl;
Cast_Result : Internal_Entity;
Cast_Expr_1 : Internal_Entity_Type_Decl;
Cast_Result_1 : Internal_Entity;
Is_Equiv : Boolean;
If_Result_1 : Boolean;
Fld_3 : Internal_Entity_Type_Decl_Array_Access;
Cast_Expr_2 : Internal_Entity_Type_Decl;
Cast_Result_2 : Internal_Entity;
Cast_Expr_3 : Internal_Entity_Type_Decl;
Cast_Result_3 : Internal_Entity;
Is_Equiv_1 : Boolean;
Quantifier_Result : Boolean;
If_Result_2 : Boolean;
Is_Null_2 : Boolean;
Is_Null_3 : Boolean;
If_Result_3 : Boolean;
Not_Val : Boolean;
If_Result_4 : Boolean;
If_Result_5 : Boolean;

            procedure Finalizer_Scope_168 is
            begin
                     Dec_Ref (Fld_3);
            end Finalizer_Scope_168;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 918 '<If at nodes.lkt:1696:9>' If_Result_5 nodes.lkt:1696



--# expr-start 905 '<BooleanBinaryOp And at nodes.lkt:1696:12>' If_Result_4 nodes.lkt:1696




if Allow_Entity then
   --# expr-start 904 '<Not at nodes.lkt:1696:29>' Not_Val nodes.lkt:1696
--# expr-start 903 '<BooleanBinaryOp Or at nodes.lkt:1696:34>' If_Result_3 nodes.lkt:1696



--# expr-start 901 '<IsNull at nodes.lkt:1696:34>' Is_Null_2 nodes.lkt:1696

Is_Null_2 := Ent.Node = null; 
--# expr-done 901
if Is_Null_2 then
   
   If_Result_3 := True;
else
   --# expr-start 902 '<IsNull at nodes.lkt:1696:50>' Is_Null_3 nodes.lkt:1696

Is_Null_3 := Rhs.Node = null; 
--# expr-done 902
   If_Result_3 := Is_Null_3;
end if;



--# expr-done 903
Not_Val := not (If_Result_3); 
--# expr-done 904
   If_Result_4 := Not_Val;
else
   
   If_Result_4 := False;
end if;



--# expr-done 905
if If_Result_4 then
   --# expr-start 908 '<FieldAccess for is_subtype_or_eq at nodes.lkt:1698:13>' Fld_2 nodes.lkt:1698



--# expr-start 906 '<FieldAccess for get_entity_node_type at nodes.lkt:1698:13>' Fld nodes.lkt:1698







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start TypeDecl.get_entity_node_type
Fld := Liblktlang.Implementation.Type_Decl_P_Get_Entity_Node_Type (Node => Ent.Node, E_Info => Ent.Info);
--# end
--# expr-done 906



   if Fld.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# expr-start 907 '<FieldAccess for get_entity_node_type at nodes.lkt:1699:17>' Fld_1 nodes.lkt:1699







   if Rhs.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start TypeDecl.get_entity_node_type
Fld_1 := Liblktlang.Implementation.Type_Decl_P_Get_Entity_Node_Type (Node => Rhs.Node, E_Info => Rhs.Info);
--# end
--# expr-done 907
--# property-call-start TypeDecl.is_subtype_or_eq
Fld_2 := Liblktlang.Implementation.Type_Decl_P_Is_Subtype_Or_Eq (Node => Fld.Node, Rhs => Fld_1, E_Info => Fld.Info);
--# end
--# expr-done 908
   If_Result_5 := Fld_2;
else
   --# expr-start 917 '<BooleanBinaryOp Or at nodes.lkt:1702:13>' If_Result_2 nodes.lkt:1702



--# expr-start 913 '<BooleanBinaryOp Or at nodes.lkt:1702:14>' If_Result_1 nodes.lkt:1702



--# expr-start 911 '<BooleanBinaryOp Or at nodes.lkt:1702:15>' If_Result nodes.lkt:1702



--# expr-start 909 '<IsNull at nodes.lkt:1702:15>' Is_Null nodes.lkt:1702

Is_Null := Ent.Node = null; 
--# expr-done 909
if Is_Null then
   
   If_Result := True;
else
   --# expr-start 910 '<IsNull at nodes.lkt:1702:31>' Is_Null_1 nodes.lkt:1702

Is_Null_1 := Rhs.Node = null; 
--# expr-done 910
   If_Result := Is_Null_1;
end if;



--# expr-done 911
if If_Result then
   
   If_Result_1 := True;
else
   --# expr-start 912 '<Eq at nodes.lkt:1702:47>' Is_Equiv nodes.lkt:1702






Cast_Expr := Ent; 



   
      Cast_Result := Create_Internal_Entity
        (Node => Cast_Expr.Node,
         Info => Cast_Expr.Info);








Cast_Expr_1 := Rhs; 



   
      Cast_Result_1 := Create_Internal_Entity
        (Node => Cast_Expr_1.Node,
         Info => Cast_Expr_1.Info);


Is_Equiv := Equivalent (Cast_Result, Cast_Result_1); 
--# expr-done 912
   If_Result_1 := Is_Equiv;
end if;



--# expr-done 913
if If_Result_1 then
   
   If_Result_2 := True;
else
   --# expr-start 916 '<Contains at nodes.lkt:1703:16>' Quantifier_Result nodes.lkt:1703








   

   --# expr-start 914 '<FieldAccess for base_types at nodes.lkt:1703:16>' Fld_3 nodes.lkt:1703







   if Rhs.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]TypeDecl.base_types'
Fld_3 := Liblktlang.Implementation.Dispatcher_Type_Decl_P_Base_Types (Node => Rhs.Node, E_Info => Rhs.Info);
--# end
--# expr-done 914

   
      Quantifier_Result := False;
   

   

      

      declare
         
         Collection : constant Internal_Entity_Type_Decl_Array_Access := Fld_3;
      begin
         for Item_1 of
               Collection.Items
         loop

            
   --# scope-start


               --# bind item Item_1

            
      --# expr-start 915 '<Eq at ???>' Is_Equiv_1 None






Cast_Expr_2 := Item_1; 



   
      Cast_Result_2 := Create_Internal_Entity
        (Node => Cast_Expr_2.Node,
         Info => Cast_Expr_2.Info);








Cast_Expr_3 := Ent; 



   
      Cast_Result_3 := Create_Internal_Entity
        (Node => Cast_Expr_3.Node,
         Info => Cast_Expr_3.Info);


Is_Equiv_1 := Equivalent (Cast_Result_2, Cast_Result_3); 
--# expr-done 915
      Quantifier_Result := Is_Equiv_1;
   

            
   --# end


               exit when Quantifier_Result;

         end loop;
      end;
   

   
   



--# expr-done 916
   If_Result_2 := Quantifier_Result;
end if;



--# expr-done 917
   If_Result_5 := If_Result_2;
end if;



--# expr-done 918

         Property_Result := If_Result_5;
         
   --# end
      Finalizer_Scope_168;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_168;




            raise;
      end;



   return Property_Result;
end Type_Decl_P_Is_Subtype_Or_Eq;
--# end

   







--# property-start TypeDecl.common_ancestor_helper nodes.lkt:1705
pragma Warnings (Off, "is not referenced");
 function Type_Decl_P_Common_Ancestor_Helper
  
  (Node : Bare_Type_Decl
      ; Other_Types : Internal_Entity_Type_Decl_Array_Access
      ; Idx : Integer
      ; Imprecise : Boolean
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Internal_Entity_Type_Decl
is
   Self : Bare_Type_Decl  := Bare_Type_Decl (Node);
     Ent : Internal_Entity_Type_Decl :=
       Internal_Entity_Type_Decl'(Node => Self, Info => E_Info);
      --# bind entity Ent

   

   --# bind other_types Other_Types
   --# bind idx Idx
   --# bind imprecise Imprecise

   Property_Result : Internal_Entity_Type_Decl;

      

      Var_Expr_0 : Internal_Entity_Type_Decl;
Get_Result : Internal_Entity_Type_Decl;
Fld : Internal_Entity_Type_Decl;
Get_Result_1 : Internal_Entity_Type_Decl;
Arith_Result : Integer;
Fld_1 : Internal_Entity_Type_Decl;
Fld_2 : Internal_Entity_Type_Decl;
Scope_Result : Internal_Entity_Type_Decl;
Result_Var : Internal_Entity_Type_Decl;
Len : Integer;
Arith_Result_1 : Integer;
Is_Equal : Boolean;
If_Result : Internal_Entity_Type_Decl;



begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 928 '<If at nodes.lkt:1710:9>' If_Result nodes.lkt:1710



--# expr-start 921 '<Eq at nodes.lkt:1710:12>' Is_Equal nodes.lkt:1710

--# expr-start 920 '<Arithmetic - at nodes.lkt:1710:19>' Arith_Result_1 nodes.lkt:1710
--# expr-start 919 '<length at nodes.lkt:1710:19>' Len nodes.lkt:1710

Len := Length (Other_Types); 
--# expr-done 919

Arith_Result_1 := (Len - 1); 
--# expr-done 920
Is_Equal := Idx = Arith_Result_1; 
--# expr-done 921
if Is_Equal then
   --# expr-start 923 '<FieldAccess for common_ancestor at nodes.lkt:1711:14>' Fld nodes.lkt:1711







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# expr-start 922 '<at at nodes.lkt:1711:35>' Get_Result nodes.lkt:1711




Get_Result := Get (Self, Other_Types, Idx, True); 
--# expr-done 922

--# property-call-start '[dispatcher]TypeDecl.common_ancestor'
Fld := Liblktlang.Implementation.Dispatcher_Type_Decl_P_Common_Ancestor (Node => Ent.Node, Other => Get_Result, Imprecise => Imprecise, E_Info => Ent.Info);
--# end
--# expr-done 923
   If_Result := Fld;
else
   


--# expr-start 924 '<at at nodes.lkt:1713:13>' Get_Result_1 nodes.lkt:1713




Get_Result_1 := Get (Self, Other_Types, Idx, True); 
--# expr-done 924
Var_Expr_0 := Get_Result_1;





if Var_Expr_0 /= No_Entity_Type_Decl then
   



   --# scope-start


   --# bind t Var_Expr_0

--# expr-start 927 '<FieldAccess for common_ancestor at nodes.lkt:1715:17>' Fld_2 nodes.lkt:1715







   if Var_Expr_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# expr-start 926 '<FieldAccess for common_ancestor_helper at nodes.lkt:1716:21>' Fld_1 nodes.lkt:1716







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;



--# expr-start 925 '<Arithmetic + at nodes.lkt:1718:25>' Arith_Result nodes.lkt:1718


Arith_Result := (Idx + 1); 
--# expr-done 925

--# property-call-start TypeDecl.common_ancestor_helper
Fld_1 := Liblktlang.Implementation.Type_Decl_P_Common_Ancestor_Helper (Node => Ent.Node, Other_Types => Other_Types, Idx => Arith_Result, Imprecise => Imprecise, E_Info => Ent.Info);
--# end
--# expr-done 926

--# property-call-start '[dispatcher]TypeDecl.common_ancestor'
Fld_2 := Liblktlang.Implementation.Dispatcher_Type_Decl_P_Common_Ancestor (Node => Var_Expr_0.Node, Other => Fld_1, Imprecise => Imprecise, E_Info => Var_Expr_0.Info);
--# end
--# expr-done 927
Scope_Result := Fld_2;


   --# end


   Result_Var := Scope_Result;
else
   
   Result_Var := No_Entity_Type_Decl;
end if;



   If_Result := Result_Var;
end if;



--# expr-done 928

         Property_Result := If_Result;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Type_Decl_P_Common_Ancestor_Helper;
--# end

   







--# property-start TypeDecl.imprecise_common_ancestor_list nodes.lkt:1730
pragma Warnings (Off, "is not referenced");
 function Type_Decl_P_Imprecise_Common_Ancestor_List
  
  (Node : Bare_Type_Decl
      ; Other_Types : Internal_Entity_Type_Decl_Array_Access
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Internal_Entity_Type_Decl
is
   Self : Bare_Type_Decl  := Bare_Type_Decl (Node);
     Ent : Internal_Entity_Type_Decl :=
       Internal_Entity_Type_Decl'(Node => Self, Info => E_Info);
      --# bind entity Ent

   

   --# bind other_types Other_Types

   Property_Result : Internal_Entity_Type_Decl;

      
            procedure Finalizer_Scope_170 with Inline_Always;
            procedure Finalizer_Scope_549 with Inline_Always;

      Local_No_Entity_Other_Types : Internal_Entity_Type_Decl_Array_Access;
Var_Expr_2 : Internal_Entity_Type_Decl;
Var_Expr_29 : Internal_Entity_Type_Decl;
Var_Expr_30 : Internal_Entity_Type_Decl;
Var_Expr_31 : Internal_Entity_Type_Decl;
Fld : Internal_Entity_Type_Decl;
Scope_Result : Internal_Entity_Type_Decl;
Result_Var : Internal_Entity_Type_Decl;
Map_Result : Internal_Entity_Type_Decl_Array_Access;
Is_Null : Boolean;
Not_Val : Boolean;
Find_Result : Internal_Entity_Type_Decl;
Fld_1 : Internal_Entity_Type_Decl;
Scope_Result_1 : Internal_Entity_Type_Decl;
Result_Var_1 : Internal_Entity_Type_Decl;
Fld_2 : Internal_Entity_Type_Decl;
Fld_3 : Internal_Entity_Type_Decl;
Is_Null_1 : Boolean;
If_Result : Internal_Entity_Type_Decl;
Len : Integer;
Is_Equal : Boolean;
If_Result_1 : Internal_Entity_Type_Decl;
Fld_4 : Internal_Entity_Named_Type_Decl;
Array_Lit : Internal_Entity_Type_Decl_Array_Access;
Fld_5 : Internal_Entity_Decl;
Cast_Result : Internal_Entity_Type_Decl;
Fld_6 : Bare_Type_Decl;
Fld_7 : Internal_Entity_Named_Type_Decl;
Fld_8 : Bare_Named_Type_Decl;
Cast_Result_1 : Bare_Type_Decl;
Is_Equal_1 : Boolean;
Not_Val_1 : Boolean;
Fld_9 : Internal_Entity_Named_Type_Decl;
Fld_10 : Bare_Named_Type_Decl;
Cast_Result_2 : Bare_Type_Decl;
Is_Equal_2 : Boolean;
Fld_11 : Bare_Type_Decl;
Scope_Result_2 : Bare_Type_Decl;
Result_Var_2 : Bare_Type_Decl;
Fld_12 : Internal_Entity_Named_Type_Decl;
Fld_13 : Bare_Named_Type_Decl;
Cast_Result_3 : Bare_Type_Decl;
Is_Equal_3 : Boolean;
Quantifier_Result : Boolean;
If_Result_2 : Boolean;
If_Result_3 : Boolean;
If_Result_4 : Internal_Entity_Type_Decl;
Scope_Result_3 : Internal_Entity_Type_Decl;
Result_Var_3 : Internal_Entity_Type_Decl;
Let_Result : Internal_Entity_Type_Decl;

            procedure Finalizer_Scope_170 is
            begin
                     Dec_Ref (Map_Result);
                     Dec_Ref (Local_No_Entity_Other_Types);
            end Finalizer_Scope_170;
            procedure Finalizer_Scope_549 is
            begin
                     Dec_Ref (Array_Lit);
            end Finalizer_Scope_549;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 962 '<Let at nodes.lkt:1733:9>' Let_Result nodes.lkt:1733
--# scope-start
--# expr-start 930 '<Map at nodes.lkt:1734:13>' Map_Result nodes.lkt:1734








   

   

   
      declare
         Map_Result_Vec : Internal_Entity_Type_Decl_Vectors.Vector;
      begin
   

   

      

      declare
         
         Collection : constant Internal_Entity_Type_Decl_Array_Access := Other_Types;
      begin
         for Item_0 of
               Collection.Items
         loop

            
   --# scope-start


               --# bind t Item_0

            
         
         
      



Var_Expr_29 := Item_0;





if Var_Expr_29 /= No_Entity_Type_Decl then
   



   --# scope-start


   

--# expr-start 929 '<FieldAccess for get_entity_node_type at nodes.lkt:1734:36>' Fld nodes.lkt:1734







   if Var_Expr_29.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start TypeDecl.get_entity_node_type
Fld := Liblktlang.Implementation.Type_Decl_P_Get_Entity_Node_Type (Node => Var_Expr_29.Node, E_Info => Var_Expr_29.Info);
--# end
--# expr-done 929
Scope_Result := Fld;


   --# end


   Result_Var := Scope_Result;
else
   
   Result_Var := No_Entity_Type_Decl;
end if;



      

         declare
            Item_To_Append : constant Internal_Entity_Type_Decl := Result_Var;
         begin
            Internal_Entity_Type_Decl_Vectors.Append (Map_Result_Vec, Item_To_Append);
         end;
   
   
   

            
   --# end



         end loop;
      end;
   

   

         Map_Result := Create_Internal_Entity_Type_Decl_Array
           (Items_Count => Natural (Internal_Entity_Type_Decl_Vectors.Length (Map_Result_Vec)));
         for I in Map_Result.Items'Range loop
            Map_Result.Items (I) := Internal_Entity_Type_Decl_Vectors.Get
              (Map_Result_Vec,
               I + Internal_Entity_Type_Decl_Vectors.Index_Type'First - Map_Result.Items'First);
         end loop;
         Internal_Entity_Type_Decl_Vectors.Destroy (Map_Result_Vec);

      end;
   



--# expr-done 930
Local_No_Entity_Other_Types := Map_Result; Inc_Ref (Local_No_Entity_Other_Types);
--# bind no_entity_other_types Local_No_Entity_Other_Types



--# expr-start 941 '<If at nodes.lkt:1737:13>' If_Result_1 nodes.lkt:1737



--# expr-start 932 '<Eq at nodes.lkt:1737:16>' Is_Equal nodes.lkt:1737
--# expr-start 931 '<length at nodes.lkt:1737:16>' Len nodes.lkt:1737

Len := Length (Other_Types); 
--# expr-done 931

Is_Equal := Len = 0; 
--# expr-done 932
if Is_Equal then
   
   If_Result_1 := Ent;
else
   --# expr-start 940 '<If at nodes.lkt:1737:13>' If_Result nodes.lkt:1737



--# expr-start 933 '<IsNull at nodes.lkt:1738:18>' Is_Null_1 nodes.lkt:1738

Is_Null_1 := Ent.Node = null; 
--# expr-done 933
if Is_Null_1 then
   


--# expr-start 936 '<Find at nodes.lkt:1740:17>' Find_Result nodes.lkt:1740








   

   

   
      Find_Result := No_Entity_Type_Decl;
   

   

      

      declare
         
         Collection : constant Internal_Entity_Type_Decl_Array_Access := Local_No_Entity_Other_Types;
      begin
         for Item_1 of
               Collection.Items
         loop

            
   --# scope-start


               --# bind t Item_1

            
      --# expr-start 935 '<Not at nodes.lkt:1740:51>' Not_Val nodes.lkt:1740
--# expr-start 934 '<IsNull at nodes.lkt:1740:55>' Is_Null nodes.lkt:1740

Is_Null := Item_1.Node = null; 
--# expr-done 934
Not_Val := not (Is_Null); 
--# expr-done 935
      if Not_Val then
         Find_Result := Item_1; 
      end if;
   

            
   --# end


               exit when Not_Val;

         end loop;
      end;
   

   
   



--# expr-done 936
Var_Expr_30 := Find_Result;





if Var_Expr_30 /= No_Entity_Type_Decl then
   



   --# scope-start


   

--# expr-start 937 '<FieldAccess for imprecise_common_ancestor_list at nodes.lkt:1740:17>' Fld_1 nodes.lkt:1740







   if Var_Expr_30.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;



--# property-call-start TypeDecl.imprecise_common_ancestor_list
Fld_1 := Liblktlang.Implementation.Type_Decl_P_Imprecise_Common_Ancestor_List (Node => Var_Expr_30.Node, Other_Types => Local_No_Entity_Other_Types, E_Info => Var_Expr_30.Info);
--# end
--# expr-done 937
Scope_Result_1 := Fld_1;


   --# end


   Result_Var_1 := Scope_Result_1;
else
   
   Result_Var_1 := No_Entity_Type_Decl;
end if;



   If_Result := Result_Var_1;
else
   --# expr-start 939 '<FieldAccess for common_ancestor_helper at nodes.lkt:1743:17>' Fld_3 nodes.lkt:1743



--# expr-start 938 '<FieldAccess for get_entity_node_type at nodes.lkt:1743:17>' Fld_2 nodes.lkt:1743







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start TypeDecl.get_entity_node_type
Fld_2 := Liblktlang.Implementation.Type_Decl_P_Get_Entity_Node_Type (Node => Ent.Node, E_Info => Ent.Info);
--# end
--# expr-done 938



   if Fld_2.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;





--# property-call-start TypeDecl.common_ancestor_helper
Fld_3 := Liblktlang.Implementation.Type_Decl_P_Common_Ancestor_Helper (Node => Fld_2.Node, Other_Types => Local_No_Entity_Other_Types, Idx => 0, Imprecise => True, E_Info => Fld_2.Info);
--# end
--# expr-done 939
   If_Result := Fld_3;
end if;



--# expr-done 940
   If_Result_1 := If_Result;
end if;



--# expr-done 941
Var_Expr_2 := If_Result_1;





if Var_Expr_2 /= No_Entity_Type_Decl then
   



   --# scope-start


   --# bind t Var_Expr_2

--# expr-start 961 '<If at nodes.lkt:1751:13>' If_Result_4 nodes.lkt:1751



--# expr-start 956 '<BooleanBinaryOp And at nodes.lkt:1752:17>' If_Result_3 nodes.lkt:1752



--# expr-start 946 '<Not at nodes.lkt:1752:17>' Not_Val_1 nodes.lkt:1752
--# expr-start 945 '<Eq at nodes.lkt:1752:17>' Is_Equal_1 nodes.lkt:1752
--# expr-start 942 '<FieldAccess for node at nodes.lkt:1752:17>' Fld_6 nodes.lkt:1752









Fld_6 := Var_Expr_2.Node;
--# expr-done 942





--# expr-start 944 '<FieldAccess for node at nodes.lkt:1752:27>' Fld_8 nodes.lkt:1752



--# expr-start 943 '<FieldAccess for entity_type at nodes.lkt:1752:27>' Fld_7 nodes.lkt:1752







   if Var_Expr_2.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start LktNode.entity_type
Fld_7 := Liblktlang.Implementation.Lkt_Node_P_Entity_Type (Node => Var_Expr_2.Node);
--# end
--# expr-done 943





Fld_8 := Fld_7.Node;
--# expr-done 944



   
      Cast_Result_1 := Fld_8;


Is_Equal_1 := Fld_6 = Cast_Result_1; 
--# expr-done 945
Not_Val_1 := not (Is_Equal_1); 
--# expr-done 946
if Not_Val_1 then
   --# expr-start 955 '<BooleanBinaryOp Or at nodes.lkt:1754:21>' If_Result_2 nodes.lkt:1754



--# expr-start 949 '<Eq at nodes.lkt:1754:21>' Is_Equal_2 nodes.lkt:1754






--# expr-start 948 '<FieldAccess for node at nodes.lkt:1754:29>' Fld_10 nodes.lkt:1754



--# expr-start 947 '<FieldAccess for entity_type at nodes.lkt:1754:29>' Fld_9 nodes.lkt:1754







   if Var_Expr_2.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start LktNode.entity_type
Fld_9 := Liblktlang.Implementation.Lkt_Node_P_Entity_Type (Node => Var_Expr_2.Node);
--# end
--# expr-done 947





Fld_10 := Fld_9.Node;
--# expr-done 948



   
      Cast_Result_2 := Fld_10;


Is_Equal_2 := Self = Cast_Result_2; 
--# expr-done 949
if Is_Equal_2 then
   
   If_Result_2 := True;
else
   --# expr-start 954 '<AnyQuantifier at nodes.lkt:1755:24>' Quantifier_Result nodes.lkt:1755








   

   

   
      Quantifier_Result := False;
   

   

      

      declare
         
         Collection : constant Internal_Entity_Type_Decl_Array_Access := Other_Types;
      begin
         for Item_3 of
               Collection.Items
         loop

            
   --# scope-start


               --# bind ot Item_3

            
      --# expr-start 953 '<Eq at nodes.lkt:1756:33>' Is_Equal_3 nodes.lkt:1756




Var_Expr_31 := Item_3;





if Var_Expr_31 /= No_Entity_Type_Decl then
   



   --# scope-start


   

--# expr-start 950 '<FieldAccess for node at nodes.lkt:1756:33>' Fld_11 nodes.lkt:1756









Fld_11 := Var_Expr_31.Node;
--# expr-done 950
Scope_Result_2 := Fld_11;


   --# end


   Result_Var_2 := Scope_Result_2;
else
   
   Result_Var_2 := No_Bare_Lkt_Node;
end if;








--# expr-start 952 '<FieldAccess for node at nodes.lkt:1756:45>' Fld_13 nodes.lkt:1756



--# expr-start 951 '<FieldAccess for entity_type at nodes.lkt:1756:45>' Fld_12 nodes.lkt:1756







   if Var_Expr_2.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start LktNode.entity_type
Fld_12 := Liblktlang.Implementation.Lkt_Node_P_Entity_Type (Node => Var_Expr_2.Node);
--# end
--# expr-done 951





Fld_13 := Fld_12.Node;
--# expr-done 952



   
      Cast_Result_3 := Fld_13;


Is_Equal_3 := Result_Var_2 = Cast_Result_3; 
--# expr-done 953
      Quantifier_Result := Is_Equal_3;
   

            
   --# end


               exit when Quantifier_Result;

         end loop;
      end;
   

   
   



--# expr-done 954
   If_Result_2 := Quantifier_Result;
end if;



--# expr-done 955
   If_Result_3 := If_Result_2;
else
   
   If_Result_3 := False;
end if;



--# expr-done 956
if If_Result_3 then
   --# expr-start 960 '<Cast to TypeDecl at nodes.lkt:1759:18>' Cast_Result nodes.lkt:1759





--# expr-start 959 '<FieldAccess for instantiate_generic_decl at nodes.lkt:1759:18>' Fld_5 nodes.lkt:1759



--# expr-start 957 '<FieldAccess for entity_type at nodes.lkt:1759:18>' Fld_4 nodes.lkt:1759







   if Var_Expr_2.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start LktNode.entity_type
Fld_4 := Liblktlang.Implementation.Lkt_Node_P_Entity_Type (Node => Var_Expr_2.Node);
--# end
--# expr-done 957



   if Fld_4.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# expr-start 958 '<ArrayLiteral at nodes.lkt:1759:59>' Array_Lit nodes.lkt:1759

Array_Lit := Create_Internal_Entity_Type_Decl_Array (Internal_Internal_Entity_Type_Decl_Array'(1 => Var_Expr_2)); 
--# expr-done 958
--# property-call-start Decl.instantiate_generic_decl
Fld_5 := Liblktlang.Implementation.Decl_P_Instantiate_Generic_Decl (Node => Fld_4.Node, Type_Params => Array_Lit, E_Info => Fld_4.Info);
--# end
--# expr-done 959



   if Fld_5.Node = null
      or else Fld_5.Node.Kind in Lkt_Type_Decl
   then
      
      Cast_Result := Create_Internal_Entity_Type_Decl
        (Node => Fld_5.Node,
         Info => Fld_5.Info);

   else
         Cast_Result := No_Entity_Type_Decl;
   end if;


--# expr-done 960
   If_Result_4 := Cast_Result;
else
   
   If_Result_4 := Var_Expr_2;
end if;



--# expr-done 961
Scope_Result_3 := If_Result_4;


   --# end
      Finalizer_Scope_549;


   Result_Var_3 := Scope_Result_3;
else
   
   Result_Var_3 := No_Entity_Type_Decl;
end if;



Let_Result := Result_Var_3; 
--# end
--# expr-done 962

         Property_Result := Let_Result;
         
   --# end
      Finalizer_Scope_170;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_170;
                     Finalizer_Scope_549;




            raise;
      end;



   return Property_Result;
end Type_Decl_P_Imprecise_Common_Ancestor_List;
--# end

   







--# property-start TypeDecl.commutative_matching_type nodes.lkt:1766
pragma Warnings (Off, "is not referenced");
 function Type_Decl_P_Commutative_Matching_Type
  
  (Node : Bare_Type_Decl
      ; Other : Internal_Entity_Type_Decl
      ; Allow_Common_Ancestor : Boolean
         := False
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Boolean
is
   Self : Bare_Type_Decl  := Bare_Type_Decl (Node);
     Ent : Internal_Entity_Type_Decl :=
       Internal_Entity_Type_Decl'(Node => Self, Info => E_Info);
      --# bind entity Ent

   

   --# bind other Other
   --# bind allow_common_ancestor Allow_Common_Ancestor

   Property_Result : Boolean;

      

      Is_Null : Boolean;
Is_Null_1 : Boolean;
If_Result : Boolean;
Fld : Boolean;
If_Result_1 : Boolean;
Fld_1 : Boolean;
If_Result_2 : Boolean;
Fld_2 : Internal_Entity_Type_Decl;
Is_Null_2 : Boolean;
Not_Val : Boolean;
If_Result_3 : Boolean;
If_Result_4 : Boolean;



begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 974 '<BooleanBinaryOp Or at nodes.lkt:1770:9>' If_Result_4 nodes.lkt:1770



--# expr-start 969 '<BooleanBinaryOp Or at nodes.lkt:1771:13>' If_Result_2 nodes.lkt:1771



--# expr-start 967 '<BooleanBinaryOp Or at nodes.lkt:1771:14>' If_Result_1 nodes.lkt:1771



--# expr-start 965 '<BooleanBinaryOp Or at nodes.lkt:1771:15>' If_Result nodes.lkt:1771



--# expr-start 963 '<IsNull at nodes.lkt:1771:15>' Is_Null nodes.lkt:1771

Is_Null := Ent.Node = null; 
--# expr-done 963
if Is_Null then
   
   If_Result := True;
else
   --# expr-start 964 '<IsNull at nodes.lkt:1771:31>' Is_Null_1 nodes.lkt:1771

Is_Null_1 := Other.Node = null; 
--# expr-done 964
   If_Result := Is_Null_1;
end if;



--# expr-done 965
if If_Result then
   
   If_Result_1 := True;
else
   --# expr-start 966 '<FieldAccess for matching_type at nodes.lkt:1771:49>' Fld nodes.lkt:1771







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;



--# property-call-start TypeDecl.matching_type
Fld := Liblktlang.Implementation.Type_Decl_P_Matching_Type (Node => Ent.Node, Other => Other, E_Info => Ent.Info);
--# end
--# expr-done 966
   If_Result_1 := Fld;
end if;



--# expr-done 967
if If_Result_1 then
   
   If_Result_2 := True;
else
   --# expr-start 968 '<FieldAccess for matching_type at nodes.lkt:1772:16>' Fld_1 nodes.lkt:1772







   if Other.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;



--# property-call-start TypeDecl.matching_type
Fld_1 := Liblktlang.Implementation.Type_Decl_P_Matching_Type (Node => Other.Node, Other => Ent, E_Info => Other.Info);
--# end
--# expr-done 968
   If_Result_2 := Fld_1;
end if;



--# expr-done 969
if If_Result_2 then
   
   If_Result_4 := True;
else
   --# expr-start 973 '<BooleanBinaryOp And at nodes.lkt:1774:13>' If_Result_3 nodes.lkt:1774




if Allow_Common_Ancestor then
   --# expr-start 972 '<Not at nodes.lkt:1774:39>' Not_Val nodes.lkt:1774
--# expr-start 971 '<IsNull at nodes.lkt:1774:43>' Is_Null_2 nodes.lkt:1774
--# expr-start 970 '<FieldAccess for common_ancestor at nodes.lkt:1774:43>' Fld_2 nodes.lkt:1774







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;



--# property-call-start '[dispatcher]TypeDecl.common_ancestor'
Fld_2 := Liblktlang.Implementation.Dispatcher_Type_Decl_P_Common_Ancestor (Node => Ent.Node, Other => Other, E_Info => Ent.Info);
--# end
--# expr-done 970
Is_Null_2 := Fld_2.Node = null; 
--# expr-done 971
Not_Val := not (Is_Null_2); 
--# expr-done 972
   If_Result_3 := Not_Val;
else
   
   If_Result_3 := False;
end if;



--# expr-done 973
   If_Result_4 := If_Result_3;
end if;



--# expr-done 974

         Property_Result := If_Result_4;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Type_Decl_P_Commutative_Matching_Type;
--# end

   







--# property-start TypeDecl.could_determine_type nodes.lkt:1778
pragma Warnings (Off, "is not referenced");
 function Type_Decl_P_Could_Determine_Type
  
  (Node : Bare_Type_Decl
  )

   return Boolean
is
   Self : Bare_Type_Decl  := Bare_Type_Decl (Node);
      --# bind self Self

   


   Property_Result : Boolean;

      

      Is_Null : Boolean;
Not_Val : Boolean;



begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         --# expr-start 976 '<Not at nodes.lkt:1778:40>' Not_Val nodes.lkt:1778
--# expr-start 975 '<IsNull at nodes.lkt:1778:44>' Is_Null nodes.lkt:1778

Is_Null := Self = null; 
--# expr-done 975
Not_Val := not (Is_Null); 
--# expr-done 976

         Property_Result := Not_Val;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Type_Decl_P_Could_Determine_Type;
--# end

   







--# property-start TypeDecl.matching_generic_types nodes.lkt:1782
pragma Warnings (Off, "is not referenced");
 function Type_Decl_P_Matching_Generic_Types
  
  (Node : Bare_Type_Decl
      ; Other : Internal_Entity_Type_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Boolean
is
   Self : Bare_Type_Decl  := Bare_Type_Decl (Node);
     Ent : Internal_Entity_Type_Decl :=
       Internal_Entity_Type_Decl'(Node => Self, Info => E_Info);
      --# bind entity Ent

   

   --# bind other Other

   Property_Result : Boolean;

      
            procedure Finalizer_Scope_554 with Inline_Always;

      Var_Expr_0 : Internal_Entity_Generic_Decl;
Var_Expr_1 : Internal_Entity_Generic_Decl;
Fld : Internal_Entity;
Cast_Result : Internal_Entity_Generic_Decl;
Fld_1 : Internal_Entity;
Cast_Result_1 : Internal_Entity_Generic_Decl;
Fld_2 : Internal_Entity_Decl;
Fld_3 : Bare_Decl;
Fld_4 : Internal_Entity_Decl;
Fld_5 : Bare_Decl;
Cast_Result_2 : Bare_Decl;
Is_Equal : Boolean;
Fld_6 : Internal_Entity_Generic_Formal_Decl_List;
Fld_7 : Bare_Generic_Formal_Decl_List;
Fld_8 : Internal_Entity_Info;
Item_2 : Internal_Entity_Full_Decl;
Bare_Item_2 : Bare_Full_Decl;
Fld_9 : Lexical_Env := Empty_Env;
Fld_10 : Internal_Entity_Decl;
Fld_11 : Symbol_Type;
Env_Get_Result : Internal_Entity;
Cast_Result_3 : Internal_Entity_Type_Decl;
Fld_12 : Lexical_Env := Empty_Env;
Fld_13 : Internal_Entity_Decl;
Fld_14 : Symbol_Type;
Env_Get_Result_1 : Internal_Entity;
Cast_Result_4 : Internal_Entity_Type_Decl;
Fld_15 : Boolean;
As_Entity : Internal_Entity_Full_Decl;
Is_Null : Boolean;
If_Result : Internal_Entity_Full_Decl;
Quantifier_Result : Boolean;
If_Result_1 : Boolean;
Scope_Result : Boolean;
Result_Var : Boolean;
Scope_Result_1 : Boolean;
Fld_16 : Bare_Type_Decl;
Cast_Expr : Bare_Type_Decl;
Cast_Result_5 : Bare_Type_Decl;
Is_Equal_1 : Boolean;
Result_Var_1 : Boolean;

            procedure Finalizer_Scope_554 is
            begin
                     Dec_Ref (Fld_9);
                     Dec_Ref (Fld_12);
            end Finalizer_Scope_554;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         


--# expr-start 978 '<Cast to GenericDecl at nodes.lkt:1783:9>' Cast_Result nodes.lkt:1783





--# expr-start 977 '<parent at nodes.lkt:1783:9>' Fld nodes.lkt:1783







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Liblktlang.Implementation.Parent (Node => Ent.Node, E_Info => Ent.Info);
--# expr-done 977



   if Fld.Node = null
      or else Fld.Node.Kind in Lkt_Generic_Decl_Range
   then
      
      Cast_Result := Create_Internal_Entity_Generic_Decl
        (Node => Fld.Node,
         Info => Fld.Info);

   else
         Cast_Result := No_Entity_Generic_Decl;
   end if;


--# expr-done 978
Var_Expr_0 := Cast_Result;





if Var_Expr_0 /= No_Entity_Generic_Decl then
   



   --# scope-start


   --# bind lhs_gen Var_Expr_0




--# expr-start 980 '<Cast to GenericDecl at nodes.lkt:1785:13>' Cast_Result_1 nodes.lkt:1785





--# expr-start 979 '<parent at nodes.lkt:1785:13>' Fld_1 nodes.lkt:1785







   if Other.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_1 := Liblktlang.Implementation.Parent (Node => Other.Node, E_Info => Other.Info);
--# expr-done 979



   if Fld_1.Node = null
      or else Fld_1.Node.Kind in Lkt_Generic_Decl_Range
   then
      
      Cast_Result_1 := Create_Internal_Entity_Generic_Decl
        (Node => Fld_1.Node,
         Info => Fld_1.Info);

   else
         Cast_Result_1 := No_Entity_Generic_Decl;
   end if;


--# expr-done 980
Var_Expr_1 := Cast_Result_1;





if Var_Expr_1 /= No_Entity_Generic_Decl then
   



   --# scope-start


   --# bind rhs_gen Var_Expr_1

--# expr-start 999 '<BooleanBinaryOp And at nodes.lkt:1787:17>' If_Result_1 nodes.lkt:1787



--# expr-start 985 '<Eq at nodes.lkt:1787:17>' Is_Equal nodes.lkt:1787





--# expr-start 982 '<FieldAccess for node at nodes.lkt:1787:17>' Fld_3 nodes.lkt:1787



--# expr-start 981 '<FieldAccess for decl at nodes.lkt:1787:17>' Fld_2 nodes.lkt:1787







   if Var_Expr_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_2 := Create_Internal_Entity_Decl (Node => Var_Expr_0.Node.Generic_Decl_F_Decl, Info => Var_Expr_0.Info);
--# expr-done 981





Fld_3 := Fld_2.Node;
--# expr-done 982



   
      Cast_Result_2 := Fld_3;


--# expr-start 984 '<FieldAccess for node at nodes.lkt:1787:38>' Fld_5 nodes.lkt:1787



--# expr-start 983 '<FieldAccess for decl at nodes.lkt:1787:38>' Fld_4 nodes.lkt:1787







   if Var_Expr_1.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_4 := Create_Internal_Entity_Decl (Node => Var_Expr_1.Node.Generic_Decl_F_Decl, Info => Var_Expr_1.Info);
--# expr-done 983





Fld_5 := Fld_4.Node;
--# expr-done 984
Is_Equal := Cast_Result_2 = Fld_5; 
--# expr-done 985
if Is_Equal then
   --# expr-start 998 '<AllQuantifier at nodes.lkt:1788:21>' Quantifier_Result nodes.lkt:1788








   

   --# expr-start 986 '<FieldAccess for generic_formal_decls at nodes.lkt:1788:21>' Fld_6 nodes.lkt:1788







   if Var_Expr_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_6 := Create_Internal_Entity_Generic_Formal_Decl_List (Node => Var_Expr_0.Node.Generic_Decl_F_Generic_Formal_Decls, Info => Var_Expr_0.Info);
--# expr-done 986









Fld_7 := Fld_6.Node;

   
      Quantifier_Result := True;
   

   

      if Fld_7 = null then
         
      null;
   
      else
         

      declare
         
         Collection : constant Bare_Generic_Formal_Decl_List := Fld_7;
      begin
         for Untyped_Item_2 of
               Collection.Nodes (1 .. Children_Count (Collection))
         loop
                  
                  Bare_Item_2 := Untyped_Item_2; 
                  



Is_Null := Bare_Item_2 = null; 
if Is_Null then
   
   If_Result := No_Entity_Full_Decl;
else
   








Fld_8 := Fld_6.Info;

As_Entity := (Info => Fld_8, Node => Bare_Item_2); 
   If_Result := As_Entity;
end if;



                  Item_2 := If_Result; 

            
   --# scope-start


               --# bind f Item_2

            
      --# expr-start 997 '<FieldAccess for matching_type at nodes.lkt:1790:21>' Fld_15 nodes.lkt:1790



--# expr-start 991 '<Cast to TypeDecl at nodes.lkt:1790:21>' Cast_Result_3 nodes.lkt:1790





--# expr-start 990 '<EnvGet at nodes.lkt:1790:21>' Env_Get_Result nodes.lkt:1790
--# expr-start 987 '<FieldAccess for children_env at nodes.lkt:1790:21>' Fld_9 nodes.lkt:1790







   if Var_Expr_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_9 := Liblktlang.Implementation.Children_Env (Node => Var_Expr_0.Node, E_Info => Var_Expr_0.Info);
--# expr-done 987
--# expr-start 989 '<FieldAccess for name at nodes.lkt:1790:52>' Fld_11 nodes.lkt:1790



--# expr-start 988 '<FieldAccess for decl at nodes.lkt:1790:52>' Fld_10 nodes.lkt:1790







   if Item_2.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_10 := Create_Internal_Entity_Decl (Node => Item_2.Node.Full_Decl_F_Decl, Info => Item_2.Info);
--# expr-done 988



   if Fld_10.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]Decl.name'
Fld_11 := Liblktlang.Implementation.Dispatcher_Decl_P_Name (Node => Fld_10.Node);
--# end
--# expr-done 989


Env_Get_Result := AST_Envs.Get_First (Self => Fld_9, Key => Thin (Fld_11), Lookup_Kind => To_Lookup_Kind_Type (Recursive), Categories => (Nocat => True)); 
--# expr-done 990



   if Env_Get_Result.Node = null
      or else Env_Get_Result.Node.Kind in Lkt_Type_Decl
   then
      
      Cast_Result_3 := Create_Internal_Entity_Type_Decl
        (Node => Env_Get_Result.Node,
         Info => Env_Get_Result.Info);

   else
         Raise_Property_Exception
           (Self, Property_Error'Identity, "invalid object cast");
   end if;


--# expr-done 991



   if Cast_Result_3.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# expr-start 996 '<Cast to TypeDecl at nodes.lkt:1793:25>' Cast_Result_4 nodes.lkt:1793





--# expr-start 995 '<EnvGet at nodes.lkt:1793:25>' Env_Get_Result_1 nodes.lkt:1793
--# expr-start 992 '<FieldAccess for children_env at nodes.lkt:1793:25>' Fld_12 nodes.lkt:1793







   if Var_Expr_1.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_12 := Liblktlang.Implementation.Children_Env (Node => Var_Expr_1.Node, E_Info => Var_Expr_1.Info);
--# expr-done 992
--# expr-start 994 '<FieldAccess for name at nodes.lkt:1793:56>' Fld_14 nodes.lkt:1793



--# expr-start 993 '<FieldAccess for decl at nodes.lkt:1793:56>' Fld_13 nodes.lkt:1793







   if Item_2.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_13 := Create_Internal_Entity_Decl (Node => Item_2.Node.Full_Decl_F_Decl, Info => Item_2.Info);
--# expr-done 993



   if Fld_13.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]Decl.name'
Fld_14 := Liblktlang.Implementation.Dispatcher_Decl_P_Name (Node => Fld_13.Node);
--# end
--# expr-done 994


Env_Get_Result_1 := AST_Envs.Get_First (Self => Fld_12, Key => Thin (Fld_14), Lookup_Kind => To_Lookup_Kind_Type (Recursive), Categories => (Nocat => True)); 
--# expr-done 995



   if Env_Get_Result_1.Node = null
      or else Env_Get_Result_1.Node.Kind in Lkt_Type_Decl
   then
      
      Cast_Result_4 := Create_Internal_Entity_Type_Decl
        (Node => Env_Get_Result_1.Node,
         Info => Env_Get_Result_1.Info);

   else
         Raise_Property_Exception
           (Self, Property_Error'Identity, "invalid object cast");
   end if;


--# expr-done 996
--# property-call-start TypeDecl.matching_type
Fld_15 := Liblktlang.Implementation.Type_Decl_P_Matching_Type (Node => Cast_Result_3.Node, Other => Cast_Result_4, E_Info => Cast_Result_3.Info);
--# end
--# expr-done 997
      Quantifier_Result := Fld_15;
   

            
   --# end
      Finalizer_Scope_554;


               exit when not Quantifier_Result;

         end loop;
      end;
   
      end if;

   
   



--# expr-done 998
   If_Result_1 := Quantifier_Result;
else
   
   If_Result_1 := False;
end if;



--# expr-done 999
Scope_Result := If_Result_1;


   --# end


   Result_Var := Scope_Result;
else
   
   Result_Var := False;
end if;



Scope_Result_1 := Result_Var;


   --# end


   Result_Var_1 := Scope_Result_1;
else
   --# expr-start 1001 '<Eq at nodes.lkt:1799:25>' Is_Equal_1 nodes.lkt:1799






Cast_Expr := Self; 



   
      Cast_Result_5 := Cast_Expr;


--# expr-start 1000 '<FieldAccess for node at nodes.lkt:1799:33>' Fld_16 nodes.lkt:1799









Fld_16 := Other.Node;
--# expr-done 1000
Is_Equal_1 := Cast_Result_5 = Fld_16; 
--# expr-done 1001
   Result_Var_1 := Is_Equal_1;
end if;




         Property_Result := Result_Var_1;
         
   --# end


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_554;




            raise;
      end;



   return Property_Result;
end Type_Decl_P_Matching_Generic_Types;
--# end

   







--# property-start TypeDecl.matching_type nodes.lkt:1804
pragma Warnings (Off, "is not referenced");
 function Type_Decl_P_Matching_Type
  
  (Node : Bare_Type_Decl
      ; Other : Internal_Entity_Type_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Boolean
is
   Self : Bare_Type_Decl  := Bare_Type_Decl (Node);
     Ent : Internal_Entity_Type_Decl :=
       Internal_Entity_Type_Decl'(Node => Self, Info => E_Info);
      --# bind entity Ent

   

   --# bind other Other

   Property_Result : Boolean;

      
            procedure Finalizer_Scope_556 with Inline_Always;
            procedure Finalizer_Scope_557 with Inline_Always;

      Match_0 : Internal_Entity_Function_Type;
Var_Expr_0 : Internal_Entity_Function_Type;
Match_1 : Internal_Entity_Type_Decl;
Is_Null : Boolean;
Is_Null_1 : Boolean;
If_Result : Boolean;
Cast_Expr : Internal_Entity_Type_Decl;
Cast_Result : Internal_Entity_Function_Type;
Fld : Internal_Entity_Type_Decl_Array_Access;
Len : Integer;
Fld_1 : Internal_Entity_Type_Decl_Array_Access;
Len_1 : Integer;
Is_Equal : Boolean;
Fld_2 : Internal_Entity_Type_Decl_Array_Access;
Index_2 : Integer;
Fld_3 : Internal_Entity_Type_Decl_Array_Access;
Get_Result : Internal_Entity_Type_Decl;
Fld_4 : Boolean;
Quantifier_Result : Boolean;
If_Result_1 : Boolean;
Fld_5 : Internal_Entity_Type_Decl;
Fld_6 : Internal_Entity_Type_Decl;
Fld_7 : Boolean;
If_Result_2 : Boolean;
Scope_Result : Boolean;
Result_Var : Boolean;
Cast_Expr_1 : Internal_Entity_Type_Decl;
Cast_Result_1 : Internal_Entity;
Cast_Expr_2 : Internal_Entity_Type_Decl;
Cast_Result_2 : Internal_Entity;
Is_Equiv : Boolean;
Fld_8 : Boolean;
If_Result_3 : Boolean;
Fld_9 : Boolean;
If_Result_4 : Boolean;
Match_Prefix : Internal_Entity_Type_Decl;
Cast_Result_3 : Internal_Entity_Function_Type;
Let_Result : Boolean;
Scope_Result_1 : Boolean;
Cast_Result_4 : Internal_Entity_Type_Decl;
Let_Result_1 : Boolean;
Scope_Result_2 : Boolean;
Match_Result : Boolean;
If_Result_5 : Boolean;
Is_A : Boolean;
Is_A_1 : Boolean;
If_Result_6 : Boolean;
If_Result_7 : Boolean;

            procedure Finalizer_Scope_556 is
            begin
                     Dec_Ref (Fld);
                     Dec_Ref (Fld_1);
                     Dec_Ref (Fld_2);
            end Finalizer_Scope_556;
            procedure Finalizer_Scope_557 is
            begin
                     Dec_Ref (Fld_3);
            end Finalizer_Scope_557;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 1031 '<If at nodes.lkt:1805:9>' If_Result_7 nodes.lkt:1805



--# expr-start 1004 '<BooleanBinaryOp Or at nodes.lkt:1805:12>' If_Result_6 nodes.lkt:1805



--# expr-start 1002 '<IsA AnyTypeDecl at nodes.lkt:1805:12>' Is_A nodes.lkt:1805

Is_A := Ent.Node /= null 
and then Ent.Node.Kind in Lkt_Any_Type_Decl_Range; 
--# expr-done 1002
if Is_A then
   
   If_Result_6 := True;
else
   --# expr-start 1003 '<IsA AnyTypeDecl at nodes.lkt:1805:35>' Is_A_1 nodes.lkt:1805

Is_A_1 := Other.Node /= null 
and then Other.Node.Kind in Lkt_Any_Type_Decl_Range; 
--# expr-done 1003
   If_Result_6 := Is_A_1;
end if;



--# expr-done 1004
if If_Result_6 then
   
   If_Result_7 := True;
else
   --# expr-start 1030 '<BooleanBinaryOp Or at nodes.lkt:1810:13>' If_Result_5 nodes.lkt:1810



--# expr-start 1007 '<BooleanBinaryOp Or at nodes.lkt:1810:14>' If_Result nodes.lkt:1810



--# expr-start 1005 '<IsNull at nodes.lkt:1810:14>' Is_Null nodes.lkt:1810

Is_Null := Ent.Node = null; 
--# expr-done 1005
if Is_Null then
   
   If_Result := True;
else
   --# expr-start 1006 '<IsNull at nodes.lkt:1810:30>' Is_Null_1 nodes.lkt:1810

Is_Null_1 := Other.Node = null; 
--# expr-done 1006
   If_Result := Is_Null_1;
end if;



--# expr-done 1007
if If_Result then
   
   If_Result_5 := True;
else
   --# expr-start 1029 '<Match at nodes.lkt:1811:16>' Match_Result nodes.lkt:1811










   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Match_Prefix := Ent; 

case Lkt_Type_Decl (Match_Prefix.Node.Kind) is
         when Lkt_Function_Type =>
            



   --# scope-start



--# scope-start









   
      Cast_Result_3 := Create_Internal_Entity_Function_Type
        (Node => Match_Prefix.Node,
         Info => Match_Prefix.Info);


Match_0 := Cast_Result_3; 
--# bind ft Match_0



--# expr-start 1008 '<Cast to FunctionType at nodes.lkt:1813:21>' Cast_Result nodes.lkt:1813






Cast_Expr := Other; 



   if Cast_Expr.Node = null
      or else Cast_Expr.Node.Kind in Lkt_Function_Type_Range
   then
      
      Cast_Result := Create_Internal_Entity_Function_Type
        (Node => Cast_Expr.Node,
         Info => Cast_Expr.Info);

   else
         Cast_Result := No_Entity_Function_Type;
   end if;


--# expr-done 1008
Var_Expr_0 := Cast_Result;





if Var_Expr_0 /= No_Entity_Function_Type then
   



   --# scope-start


   --# bind rhs Var_Expr_0

--# expr-start 1023 '<BooleanBinaryOp And at nodes.lkt:1815:25>' If_Result_2 nodes.lkt:1815



--# expr-start 1019 '<BooleanBinaryOp And at nodes.lkt:1816:29>' If_Result_1 nodes.lkt:1816



--# expr-start 1013 '<Eq at nodes.lkt:1816:29>' Is_Equal nodes.lkt:1816
--# expr-start 1010 '<length at nodes.lkt:1816:29>' Len nodes.lkt:1816
--# expr-start 1009 '<FieldAccess for args at nodes.lkt:1816:29>' Fld nodes.lkt:1816







   if Match_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Match_0.Node.Function_Type_Args;
Inc_Ref (Fld);
--# expr-done 1009
Len := Length (Fld); 
--# expr-done 1010
--# expr-start 1012 '<length at nodes.lkt:1816:49>' Len_1 nodes.lkt:1816
--# expr-start 1011 '<FieldAccess for args at nodes.lkt:1816:49>' Fld_1 nodes.lkt:1816







   if Var_Expr_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_1 := Var_Expr_0.Node.Function_Type_Args;
Inc_Ref (Fld_1);
--# expr-done 1011
Len_1 := Length (Fld_1); 
--# expr-done 1012
Is_Equal := Len = Len_1; 
--# expr-done 1013
if Is_Equal then
   --# expr-start 1018 '<AllQuantifier at nodes.lkt:1817:33>' Quantifier_Result nodes.lkt:1817








   

   --# expr-start 1014 '<FieldAccess for args at nodes.lkt:1817:33>' Fld_2 nodes.lkt:1817







   if Match_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_2 := Match_0.Node.Function_Type_Args;
Inc_Ref (Fld_2);
--# expr-done 1014

   
      Quantifier_Result := True;
   

   

      
         Index_2 := 0;

      declare
         
         Collection : constant Internal_Entity_Type_Decl_Array_Access := Fld_2;
      begin
         for Item_1 of
               Collection.Items
         loop

            
   --# scope-start


               --# bind a Item_1
               --# bind idx Index_2

            
      --# expr-start 1017 '<FieldAccess for matching_type at nodes.lkt:1818:45>' Fld_4 nodes.lkt:1818







   if Item_1.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# expr-start 1016 '<at at nodes.lkt:1818:61>' Get_Result nodes.lkt:1818

--# expr-start 1015 '<FieldAccess for args at nodes.lkt:1818:61>' Fld_3 nodes.lkt:1818







   if Var_Expr_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_3 := Var_Expr_0.Node.Function_Type_Args;
Inc_Ref (Fld_3);
--# expr-done 1015


Get_Result := Get (Self, Fld_3, Index_2, True); 
--# expr-done 1016
--# property-call-start TypeDecl.matching_type
Fld_4 := Liblktlang.Implementation.Type_Decl_P_Matching_Type (Node => Item_1.Node, Other => Get_Result, E_Info => Item_1.Info);
--# end
--# expr-done 1017
      Quantifier_Result := Fld_4;
   

            
   --# end
      Finalizer_Scope_557;


               exit when not Quantifier_Result;

               Index_2 := Index_2 + 1;
         end loop;
      end;
   

   
   



--# expr-done 1018
   If_Result_1 := Quantifier_Result;
else
   
   If_Result_1 := False;
end if;



--# expr-done 1019
if If_Result_1 then
   --# expr-start 1022 '<FieldAccess for matching_type at nodes.lkt:1821:29>' Fld_7 nodes.lkt:1821



--# expr-start 1020 '<FieldAccess for return_type at nodes.lkt:1821:29>' Fld_5 nodes.lkt:1821







   if Match_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_5 := Match_0.Node.Function_Type_Return_Type;
--# expr-done 1020



   if Fld_5.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# expr-start 1021 '<FieldAccess for return_type at nodes.lkt:1821:58>' Fld_6 nodes.lkt:1821







   if Var_Expr_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_6 := Var_Expr_0.Node.Function_Type_Return_Type;
--# expr-done 1021
--# property-call-start TypeDecl.matching_type
Fld_7 := Liblktlang.Implementation.Type_Decl_P_Matching_Type (Node => Fld_5.Node, Other => Fld_6, E_Info => Fld_5.Info);
--# end
--# expr-done 1022
   If_Result_2 := Fld_7;
else
   
   If_Result_2 := False;
end if;



--# expr-done 1023
Scope_Result := If_Result_2;


   --# end
      Finalizer_Scope_556;


   Result_Var := Scope_Result;
else
   
   Result_Var := False;
end if;



Let_Result := Result_Var; 
--# end
Scope_Result_1 := Let_Result;


   --# end


            Match_Result := Scope_Result_1; 
         when Lkt_Any_Type_Decl .. Lkt_Enum_Class_Alt_Decl | Lkt_Generic_Formal_Type_Decl .. Lkt_Trait_Decl =>
            



   --# scope-start



--# scope-start









   
      Cast_Result_4 := Create_Internal_Entity_Type_Decl
        (Node => Match_Prefix.Node,
         Info => Match_Prefix.Info);


Match_1 := Cast_Result_4; 
--# bind _ Match_1
--# expr-start 1028 '<BooleanBinaryOp Or at nodes.lkt:1825:21>' If_Result_4 nodes.lkt:1825



--# expr-start 1026 '<BooleanBinaryOp Or at nodes.lkt:1825:22>' If_Result_3 nodes.lkt:1825



--# expr-start 1024 '<Eq at nodes.lkt:1825:22>' Is_Equiv nodes.lkt:1825






Cast_Expr_1 := Ent; 



   
      Cast_Result_1 := Create_Internal_Entity
        (Node => Cast_Expr_1.Node,
         Info => Cast_Expr_1.Info);








Cast_Expr_2 := Other; 



   
      Cast_Result_2 := Create_Internal_Entity
        (Node => Cast_Expr_2.Node,
         Info => Cast_Expr_2.Info);


Is_Equiv := Equivalent (Cast_Result_1, Cast_Result_2); 
--# expr-done 1024
if Is_Equiv then
   
   If_Result_3 := True;
else
   --# expr-start 1025 '<FieldAccess for is_subtype at nodes.lkt:1825:39>' Fld_8 nodes.lkt:1825







   if Other.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;



--# property-call-start '[dispatcher]TypeDecl.is_subtype'
Fld_8 := Liblktlang.Implementation.Dispatcher_Type_Decl_P_Is_Subtype (Node => Other.Node, Other => Ent, E_Info => Other.Info);
--# end
--# expr-done 1025
   If_Result_3 := Fld_8;
end if;



--# expr-done 1026
if If_Result_3 then
   
   If_Result_4 := True;
else
   --# expr-start 1027 '<FieldAccess for matching_generic_types at nodes.lkt:1826:24>' Fld_9 nodes.lkt:1826







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;



--# property-call-start TypeDecl.matching_generic_types
Fld_9 := Liblktlang.Implementation.Type_Decl_P_Matching_Generic_Types (Node => Ent.Node, Other => Other, E_Info => Ent.Info);
--# end
--# expr-done 1027
   If_Result_4 := Fld_9;
end if;



--# expr-done 1028
Let_Result_1 := If_Result_4; 
--# end
Scope_Result_2 := Let_Result_1;


   --# end


            Match_Result := Scope_Result_2; 
end case;

--# expr-done 1029
   If_Result_5 := Match_Result;
end if;



--# expr-done 1030
   If_Result_7 := If_Result_5;
end if;



--# expr-done 1031

         Property_Result := If_Result_7;
         
   --# end


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_556;
                     Finalizer_Scope_557;




            raise;
      end;



   return Property_Result;
end Type_Decl_P_Matching_Type;
--# end

   







--# property-start TypeDecl.matching_logic_type nodes.lkt:1833
pragma Warnings (Off, "is not referenced");
 function Type_Decl_P_Matching_Logic_Type
  
  (Node : Bare_Type_Decl
      ; Other : Internal_Entity_Type_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Boolean
is
   Self : Bare_Type_Decl  := Bare_Type_Decl (Node);
     Ent : Internal_Entity_Type_Decl :=
       Internal_Entity_Type_Decl'(Node => Self, Info => E_Info);
      --# bind entity Ent

   

   --# bind other Other

   Property_Result : Boolean;

      

      Is_Null : Boolean;
Is_Null_1 : Boolean;
If_Result : Boolean;
Fld : Internal_Entity_Named_Type_Decl;
Fld_1 : Bare_Named_Type_Decl;
Cast_Result : Bare_Type_Decl;
Is_Equal : Boolean;
Fld_2 : Internal_Entity_Named_Type_Decl;
Cast_Result_1 : Internal_Entity_Type_Decl;
Fld_3 : Boolean;
If_Result_1 : Boolean;
If_Result_2 : Boolean;
Fld_4 : Boolean;
If_Result_3 : Boolean;



begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 1043 '<BooleanBinaryOp Or at nodes.lkt:1834:9>' If_Result_3 nodes.lkt:1834



--# expr-start 1041 '<BooleanBinaryOp Or at nodes.lkt:1835:13>' If_Result_2 nodes.lkt:1835



--# expr-start 1034 '<BooleanBinaryOp Or at nodes.lkt:1835:14>' If_Result nodes.lkt:1835



--# expr-start 1032 '<IsNull at nodes.lkt:1835:14>' Is_Null nodes.lkt:1835

Is_Null := Ent.Node = null; 
--# expr-done 1032
if Is_Null then
   
   If_Result := True;
else
   --# expr-start 1033 '<IsNull at nodes.lkt:1835:30>' Is_Null_1 nodes.lkt:1835

Is_Null_1 := Other.Node = null; 
--# expr-done 1033
   If_Result := Is_Null_1;
end if;



--# expr-done 1034
if If_Result then
   
   If_Result_2 := True;
else
   --# expr-start 1040 '<BooleanBinaryOp And at nodes.lkt:1837:17>' If_Result_1 nodes.lkt:1837



--# expr-start 1037 '<Eq at nodes.lkt:1837:17>' Is_Equal nodes.lkt:1837






--# expr-start 1036 '<FieldAccess for node at nodes.lkt:1837:25>' Fld_1 nodes.lkt:1837



--# expr-start 1035 '<FieldAccess for entity_type at nodes.lkt:1837:25>' Fld nodes.lkt:1837







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start LktNode.entity_type
Fld := Liblktlang.Implementation.Lkt_Node_P_Entity_Type (Node => Ent.Node);
--# end
--# expr-done 1035





Fld_1 := Fld.Node;
--# expr-done 1036



   
      Cast_Result := Fld_1;


Is_Equal := Self = Cast_Result; 
--# expr-done 1037
if Is_Equal then
   --# expr-start 1039 '<FieldAccess for matching_type at nodes.lkt:1838:21>' Fld_3 nodes.lkt:1838







   if Other.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;







--# expr-start 1038 '<FieldAccess for logicvar_type at nodes.lkt:1838:41>' Fld_2 nodes.lkt:1838







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start LktNode.logicvar_type
Fld_2 := Liblktlang.Implementation.Lkt_Node_P_Logicvar_Type (Node => Self);
--# end
--# expr-done 1038



   
      Cast_Result_1 := Create_Internal_Entity_Type_Decl
        (Node => Fld_2.Node,
         Info => Fld_2.Info);


--# property-call-start TypeDecl.matching_type
Fld_3 := Liblktlang.Implementation.Type_Decl_P_Matching_Type (Node => Other.Node, Other => Cast_Result_1, E_Info => Other.Info);
--# end
--# expr-done 1039
   If_Result_1 := Fld_3;
else
   
   If_Result_1 := False;
end if;



--# expr-done 1040
   If_Result_2 := If_Result_1;
end if;



--# expr-done 1041
if If_Result_2 then
   
   If_Result_3 := True;
else
   --# expr-start 1042 '<FieldAccess for matching_type at nodes.lkt:1841:12>' Fld_4 nodes.lkt:1841







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;



--# property-call-start TypeDecl.matching_type
Fld_4 := Liblktlang.Implementation.Type_Decl_P_Matching_Type (Node => Ent.Node, Other => Other, E_Info => Ent.Info);
--# end
--# expr-done 1042
   If_Result_3 := Fld_4;
end if;



--# expr-done 1043

         Property_Result := If_Result_3;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Type_Decl_P_Matching_Logic_Type;
--# end

   







--# property-start TypeDecl.is_of_array_type nodes.lkt:1846
pragma Warnings (Off, "is not referenced");
 function Type_Decl_P_Is_Of_Array_Type
  
  (Node : Bare_Type_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Boolean
is
   Self : Bare_Type_Decl  := Bare_Type_Decl (Node);
     Ent : Internal_Entity_Type_Decl :=
       Internal_Entity_Type_Decl'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Boolean;

      
            procedure Finalizer_Scope_176 with Inline_Always;

      Var_Expr_32 : Internal_Entity_Fun_Decl;
Is_Null : Boolean;
Cast_Expr : Internal_Entity_Type_Decl;
Cast_Result : Internal_Entity;
Bound_Origin : Internal_Entity;
Fld : Lexical_Env := Empty_Env;
Sym : Symbol_Type;
Env_Get_Result : Internal_Entity;
Cast_Result_1 : Internal_Entity_Fun_Decl;
Fld_1 : Bare_Type_Decl;
Scope_Result : Bare_Type_Decl;
Result_Var : Bare_Type_Decl;
Dyn_Var_Bind_Result : Bare_Type_Decl;
Fld_2 : Internal_Entity_Trait_Decl;
Fld_3 : Bare_Trait_Decl;
Cast_Result_2 : Bare_Type_Decl;
Is_Equal : Boolean;
If_Result : Boolean;

            procedure Finalizer_Scope_176 is
            begin
                     Dec_Ref (Fld);
            end Finalizer_Scope_176;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 1054 '<BooleanBinaryOp Or at nodes.lkt:1847:9>' If_Result nodes.lkt:1847



--# expr-start 1044 '<IsNull at nodes.lkt:1847:9>' Is_Null nodes.lkt:1847

Is_Null := Ent.Node = null; 
--# expr-done 1044
if Is_Null then
   
   If_Result := True;
else
   --# expr-start 1053 '<Eq at nodes.lkt:1848:12>' Is_Equal nodes.lkt:1848
--# expr-start 1050 '<bind at nodes.lkt:1849:13>' Dyn_Var_Bind_Result nodes.lkt:1849






Cast_Expr := Ent; 



   
      Cast_Result := Create_Internal_Entity
        (Node => Cast_Expr.Node,
         Info => Cast_Expr.Info);


Bound_Origin := Cast_Result; 



--# expr-start 1048 '<Cast to FunDecl at nodes.lkt:1851:13>' Cast_Result_1 nodes.lkt:1851





--# expr-start 1047 '<EnvGet at nodes.lkt:1851:13>' Env_Get_Result nodes.lkt:1851
--# expr-start 1045 '<FieldAccess for defined_scope at nodes.lkt:1851:13>' Fld nodes.lkt:1851







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]Decl.defined_scope'
Fld := Liblktlang.Implementation.Dispatcher_Decl_P_Defined_Scope (Node => Ent.Node, Origin => Bound_Origin, E_Info => Ent.Info);
--# end
--# expr-done 1045
--# expr-start 1046 '<Symbol __call__ at nodes.lkt:1851:44>' Sym nodes.lkt:1851
Sym := Precomputed_Symbol (Precomputed_Symbol_Table (Self.Unit.Context.Symbols), Precomputed_Sym_Call); 
--# expr-done 1046


Env_Get_Result := AST_Envs.Get_First (Self => Fld, Key => Thin (Sym), Lookup_Kind => To_Lookup_Kind_Type (Recursive), Categories => (Nocat => True)); 
--# expr-done 1047



   if Env_Get_Result.Node = null
      or else Env_Get_Result.Node.Kind in Lkt_Fun_Decl_Range
   then
      
      Cast_Result_1 := Create_Internal_Entity_Fun_Decl
        (Node => Env_Get_Result.Node,
         Info => Env_Get_Result.Info);

   else
         Cast_Result_1 := No_Entity_Fun_Decl;
   end if;


--# expr-done 1048
Var_Expr_32 := Cast_Result_1;





if Var_Expr_32 /= No_Entity_Fun_Decl then
   



   --# scope-start


   

--# expr-start 1049 '<FieldAccess for owning_type at nodes.lkt:1851:13>' Fld_1 nodes.lkt:1851







   if Var_Expr_32.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start FunDecl.owning_type
Fld_1 := Liblktlang.Implementation.Fun_Decl_P_Owning_Type (Node => Var_Expr_32.Node);
--# end
--# expr-done 1049
Scope_Result := Fld_1;


   --# end


   Result_Var := Scope_Result;
else
   
   Result_Var := No_Bare_Lkt_Node;
end if;



Dyn_Var_Bind_Result := Result_Var; 
--# expr-done 1050





--# expr-start 1052 '<FieldAccess for node at nodes.lkt:1855:12>' Fld_3 nodes.lkt:1855



--# expr-start 1051 '<FieldAccess for indexable_trait at nodes.lkt:1855:12>' Fld_2 nodes.lkt:1855







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start LktNode.indexable_trait
Fld_2 := Liblktlang.Implementation.Lkt_Node_P_Indexable_Trait (Node => Self);
--# end
--# expr-done 1051





Fld_3 := Fld_2.Node;
--# expr-done 1052



   
      Cast_Result_2 := Fld_3;


Is_Equal := Dyn_Var_Bind_Result = Cast_Result_2; 
--# expr-done 1053
   If_Result := Is_Equal;
end if;



--# expr-done 1054

         Property_Result := If_Result;
         
   --# end
      Finalizer_Scope_176;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_176;




            raise;
      end;



   return Property_Result;
end Type_Decl_P_Is_Of_Array_Type;
--# end

   







--# property-start TypeDecl.is_callable nodes.lkt:1860
pragma Warnings (Off, "is not referenced");
 function Type_Decl_P_Is_Callable
  
  (Node : Bare_Type_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Boolean
is
   Self : Bare_Type_Decl  := Bare_Type_Decl (Node);
     Ent : Internal_Entity_Type_Decl :=
       Internal_Entity_Type_Decl'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Boolean;

      

      Is_Null : Boolean;
Is_A : Boolean;
If_Result : Boolean;



begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         --# expr-start 1057 '<BooleanBinaryOp Or at nodes.lkt:1860:31>' If_Result nodes.lkt:1860



--# expr-start 1055 '<IsNull at nodes.lkt:1860:31>' Is_Null nodes.lkt:1860

Is_Null := Ent.Node = null; 
--# expr-done 1055
if Is_Null then
   
   If_Result := True;
else
   --# expr-start 1056 '<IsA FunctionType at nodes.lkt:1860:47>' Is_A nodes.lkt:1860

Is_A := Ent.Node /= null 
and then Ent.Node.Kind in Lkt_Function_Type_Range; 
--# expr-done 1056
   If_Result := Is_A;
end if;



--# expr-done 1057

         Property_Result := If_Result;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Type_Decl_P_Is_Callable;
--# end

   







--# property-start TypeDecl.match_param_get_type nodes.lkt:1864
pragma Warnings (Off, "is not referenced");
 function Type_Decl_P_Match_Param_Get_Type
  
  (Node : Bare_Type_Decl
      ; Current_Name : Internal_Entity_Param
      ; In_Logic_Call : Boolean
         := False
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Internal_Entity_Decl
is
   Self : Bare_Type_Decl  := Bare_Type_Decl (Node);
     Ent : Internal_Entity_Type_Decl :=
       Internal_Entity_Type_Decl'(Node => Self, Info => E_Info);
      --# bind entity Ent

   

   --# bind current_name Current_Name
   --# bind in_logic_call In_Logic_Call

   Property_Result : Internal_Entity_Decl;

      
            procedure Finalizer_Scope_178 with Inline_Always;
            procedure Finalizer_Scope_561 with Inline_Always;

      Local_Ft : Internal_Entity_Function_Type;
Local_Origin : Internal_Entity_Decl;
Var_Expr_0 : Internal_Entity;
Match_0 : Internal_Entity_Call_Expr;
Match_1 : Internal_Entity_Logic_Propagate;
Match_2 : Internal_Entity_Logic_Predicate;
Match_3 : Internal_Entity;
Var_Expr_33 : Internal_Entity_Function_Type;
Var_Expr_34 : Internal_Param_Match;
Cast_Expr : Internal_Entity_Type_Decl;
Cast_Result : Internal_Entity_Function_Type;
Fld : Internal_Entity_Decl;
Scope_Result : Internal_Entity_Decl;
Result_Var : Internal_Entity_Decl;
Fld_1 : Internal_Entity;
Fld_2 : Internal_Entity;
Cast_Expr_1 : Internal_Entity;
Cast_Result_1 : Internal_Entity_Expr;
Fld_3 : Internal_Formal_Param_Array_Access;
Fld_4 : Internal_Entity_Param_List;
Fld_5 : Internal_Entity_Logic_Propagate_Call;
Fld_6 : Internal_Entity_Param_List;
Fld_7 : Internal_Entity_Param_List;
Match_Prefix : Internal_Entity;
Cast_Result_2 : Internal_Entity_Call_Expr;
Let_Result : Internal_Entity_Param_List;
Scope_Result_1 : Internal_Entity_Param_List;
Cast_Result_3 : Internal_Entity_Logic_Propagate;
Let_Result_1 : Internal_Entity_Param_List;
Scope_Result_2 : Internal_Entity_Param_List;
Cast_Result_4 : Internal_Entity_Logic_Predicate;
Let_Result_2 : Internal_Entity_Param_List;
Scope_Result_3 : Internal_Entity_Param_List;
Cast_Result_5 : Internal_Entity;
Let_Result_3 : Internal_Entity_Param_List;
Scope_Result_4 : Internal_Entity_Param_List;
Match_Result : Internal_Entity_Param_List;
Fld_8 : Internal_Param_Match_Array_Access;
Scope_Result_5 : Internal_Param_Match_Array_Access;
Result_Var_1 : Internal_Param_Match_Array_Access;
Fld_9 : Internal_Entity_Param;
Cast_Result_6 : Internal_Entity;
Cast_Expr_2 : Internal_Entity_Param;
Cast_Result_7 : Internal_Entity;
Is_Equiv : Boolean;
Find_Result : Internal_Param_Match;
Fld_10 : Internal_Formal_Param;
Fld_11 : Internal_Entity_Type_Decl;
Scope_Result_6 : Internal_Entity_Type_Decl;
Result_Var_2 : Internal_Entity_Type_Decl;
Cast_Result_8 : Internal_Entity_Decl;
Is_Null : Boolean;
If_Result : Internal_Entity_Decl;
Let_Result_4 : Internal_Entity_Decl;
Let_Result_5 : Internal_Entity_Decl;

            procedure Finalizer_Scope_178 is
            begin
                     Dec_Ref (Scope_Result_5);
                     Dec_Ref (Result_Var_1);
            end Finalizer_Scope_178;
            procedure Finalizer_Scope_561 is
            begin
                     Dec_Ref (Fld_3);
                     Dec_Ref (Fld_8);
            end Finalizer_Scope_561;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 1078 '<Let at nodes.lkt:1865:9>' Let_Result_5 nodes.lkt:1865
--# scope-start
--# expr-start 1058 '<Cast to FunctionType at nodes.lkt:1865:18>' Cast_Result nodes.lkt:1865






Cast_Expr := Ent; 



   if Cast_Expr.Node = null
      or else Cast_Expr.Node.Kind in Lkt_Function_Type_Range
   then
      
      Cast_Result := Create_Internal_Entity_Function_Type
        (Node => Cast_Expr.Node,
         Info => Cast_Expr.Info);

   else
         Cast_Result := No_Entity_Function_Type;
   end if;


--# expr-done 1058
Local_Ft := Cast_Result; 
--# bind ft Local_Ft
--# expr-start 1077 '<Let at nodes.lkt:1866:9>' Let_Result_4 nodes.lkt:1866
--# scope-start




Var_Expr_33 := Local_Ft;





if Var_Expr_33 /= No_Entity_Function_Type then
   



   --# scope-start


   

--# expr-start 1059 '<FieldAccess for origin at nodes.lkt:1866:22>' Fld nodes.lkt:1866







   if Var_Expr_33.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Var_Expr_33.Node.Function_Type_Origin;
--# expr-done 1059
Scope_Result := Fld;


   --# end


   Result_Var := Scope_Result;
else
   
   Result_Var := No_Entity_Decl;
end if;



Local_Origin := Result_Var; 
--# bind origin Local_Origin
--# expr-start 1076 '<If at nodes.lkt:1868:9>' If_Result nodes.lkt:1868



--# expr-start 1060 '<IsNull at nodes.lkt:1868:12>' Is_Null nodes.lkt:1868

Is_Null := Local_Origin.Node = null; 
--# expr-done 1060
if Is_Null then
   
   If_Result := No_Entity_Decl;
else
   







--# expr-start 1073 '<Find at nodes.lkt:1870:13>' Find_Result nodes.lkt:1870








   

   


--# expr-start 1062 '<parent at nodes.lkt:1870:13>' Fld_2 nodes.lkt:1870



--# expr-start 1061 '<parent at nodes.lkt:1870:13>' Fld_1 nodes.lkt:1870







   if Current_Name.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_1 := Liblktlang.Implementation.Parent (Node => Current_Name.Node, E_Info => Current_Name.Info);
--# expr-done 1061



   if Fld_1.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_2 := Liblktlang.Implementation.Parent (Node => Fld_1.Node, E_Info => Fld_1.Info);
--# expr-done 1062
Var_Expr_0 := Fld_2;





if Var_Expr_0 /= No_Entity then
   



   --# scope-start


   --# bind ce Var_Expr_0

--# expr-start 1070 '<FieldAccess for match_params at nodes.lkt:1872:17>' Fld_8 nodes.lkt:1872



--# expr-start 1063 '<Cast to Expr at nodes.lkt:1872:17>' Cast_Result_1 nodes.lkt:1872






Cast_Expr_1 := Var_Expr_0; 



   if Cast_Expr_1.Node = null
      or else Cast_Expr_1.Node.Kind in Lkt_Expr
   then
      
      Cast_Result_1 := Create_Internal_Entity_Expr
        (Node => Cast_Expr_1.Node,
         Info => Cast_Expr_1.Info);

   else
         Cast_Result_1 := No_Entity_Expr;
   end if;


--# expr-done 1063



   if Cast_Result_1.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# expr-start 1064 '<FieldAccess for formals at nodes.lkt:1873:21>' Fld_3 nodes.lkt:1873







   if Local_Origin.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;



--# property-call-start Decl.formals
Fld_3 := Liblktlang.Implementation.Decl_P_Formals (Node => Local_Origin.Node, Is_Logic => In_Logic_Call, E_Info => Local_Origin.Info);
--# end
--# expr-done 1064
--# expr-start 1069 '<Match at nodes.lkt:1874:21>' Match_Result nodes.lkt:1874










   if Var_Expr_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Match_Prefix := Var_Expr_0; 

case Lkt_Lkt_Node (Match_Prefix.Node.Kind) is
         when Lkt_Call_Expr =>
            



   --# scope-start



--# scope-start









   
      Cast_Result_2 := Create_Internal_Entity_Call_Expr
        (Node => Match_Prefix.Node,
         Info => Match_Prefix.Info);


Match_0 := Cast_Result_2; 
--# bind c Match_0
--# expr-start 1065 '<FieldAccess for args at nodes.lkt:1875:45>' Fld_4 nodes.lkt:1875







   if Match_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_4 := Create_Internal_Entity_Param_List (Node => Match_0.Node.Base_Call_Expr_F_Args, Info => Match_0.Info);
--# expr-done 1065
Let_Result := Fld_4; 
--# end
Scope_Result_1 := Let_Result;


   --# end


            Match_Result := Scope_Result_1; 
         when Lkt_Logic_Propagate =>
            



   --# scope-start



--# scope-start









   
      Cast_Result_3 := Create_Internal_Entity_Logic_Propagate
        (Node => Match_Prefix.Node,
         Info => Match_Prefix.Info);


Match_1 := Cast_Result_3; 
--# bind c Match_1
--# expr-start 1067 '<FieldAccess for args at nodes.lkt:1876:51>' Fld_6 nodes.lkt:1876



--# expr-start 1066 '<FieldAccess for call at nodes.lkt:1876:51>' Fld_5 nodes.lkt:1876







   if Match_1.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_5 := Create_Internal_Entity_Logic_Propagate_Call (Node => Match_1.Node.Logic_Propagate_F_Call, Info => Match_1.Info);
--# expr-done 1066



   if Fld_5.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_6 := Create_Internal_Entity_Param_List (Node => Fld_5.Node.Base_Call_Expr_F_Args, Info => Fld_5.Info);
--# expr-done 1067
Let_Result_1 := Fld_6; 
--# end
Scope_Result_2 := Let_Result_1;


   --# end


            Match_Result := Scope_Result_2; 
         when Lkt_Logic_Predicate =>
            



   --# scope-start



--# scope-start









   
      Cast_Result_4 := Create_Internal_Entity_Logic_Predicate
        (Node => Match_Prefix.Node,
         Info => Match_Prefix.Info);


Match_2 := Cast_Result_4; 
--# bind c Match_2
--# expr-start 1068 '<FieldAccess for args at nodes.lkt:1877:51>' Fld_7 nodes.lkt:1877







   if Match_2.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_7 := Create_Internal_Entity_Param_List (Node => Match_2.Node.Base_Call_Expr_F_Args, Info => Match_2.Info);
--# expr-done 1068
Let_Result_2 := Fld_7; 
--# end
Scope_Result_3 := Let_Result_2;


   --# end


            Match_Result := Scope_Result_3; 
         when Lkt_Lexer_Case_Rule_Cond_Alt .. Lkt_Array_Literal | Lkt_Logic_Propagate_Call .. Lkt_Logic_Expr | Lkt_Logic_Unify .. Lkt_Var_Bind =>
            



   --# scope-start



--# scope-start









   
      Cast_Result_5 := Create_Internal_Entity
        (Node => Match_Prefix.Node,
         Info => Match_Prefix.Info);


Match_3 := Cast_Result_5; 
--# bind _ Match_3

Let_Result_3 := No_Entity_Param_List; 
--# end
Scope_Result_4 := Let_Result_3;


   --# end


            Match_Result := Scope_Result_4; 
end case;

--# expr-done 1069
--# property-call-start Expr.match_params
Fld_8 := Liblktlang.Implementation.Expr_P_Match_Params (Node => Cast_Result_1.Node, Formals => Fld_3, Args => Match_Result);
--# end
--# expr-done 1070
Scope_Result_5 := Fld_8;
   Inc_Ref (Scope_Result_5);


   --# end
      Finalizer_Scope_561;


   Result_Var_1 := Scope_Result_5;
else
   
   Result_Var_1 := No_Internal_Param_Match_Array_Type;
end if;

      Inc_Ref (Result_Var_1);



   
      Find_Result := No_Param_Match;
   

   

      

      declare
         
         Collection : constant Internal_Param_Match_Array_Access := Result_Var_1;
      begin
         for Item_1 of
               Collection.Items
         loop

            
   --# scope-start


               --# bind pm Item_1

            
      --# expr-start 1072 '<Eq at nodes.lkt:1882:27>' Is_Equiv nodes.lkt:1882





--# expr-start 1071 '<FieldAccess for actual at nodes.lkt:1882:27>' Fld_9 nodes.lkt:1882









Fld_9 := Item_1.Actual;
--# expr-done 1071



   
      Cast_Result_6 := Create_Internal_Entity
        (Node => Fld_9.Node,
         Info => Fld_9.Info);








Cast_Expr_2 := Current_Name; 



   
      Cast_Result_7 := Create_Internal_Entity
        (Node => Cast_Expr_2.Node,
         Info => Cast_Expr_2.Info);


Is_Equiv := Equivalent (Cast_Result_6, Cast_Result_7); 
--# expr-done 1072
      if Is_Equiv then
         Find_Result := Item_1; 
      end if;
   

            
   --# end


               exit when Is_Equiv;

         end loop;
      end;
   

   
   



--# expr-done 1073
Var_Expr_34 := Find_Result;





if Var_Expr_34 /= No_Param_Match then
   



   --# scope-start


   

--# expr-start 1075 '<FieldAccess for formal_type at nodes.lkt:1870:13>' Fld_11 nodes.lkt:1870



--# expr-start 1074 '<FieldAccess for formal at nodes.lkt:1870:13>' Fld_10 nodes.lkt:1870









Fld_10 := Var_Expr_34.Formal;
--# expr-done 1074





Fld_11 := Fld_10.Formal_Type;
--# expr-done 1075
Scope_Result_6 := Fld_11;


   --# end


   Result_Var_2 := Scope_Result_6;
else
   
   Result_Var_2 := No_Entity_Type_Decl;
end if;






   
      Cast_Result_8 := Create_Internal_Entity_Decl
        (Node => Result_Var_2.Node,
         Info => Result_Var_2.Info);


   If_Result := Cast_Result_8;
end if;



--# expr-done 1076
Let_Result_4 := If_Result; 
--# end
--# expr-done 1077
Let_Result_5 := Let_Result_4; 
--# end
--# expr-done 1078

         Property_Result := Let_Result_5;
         
   --# end
      Finalizer_Scope_178;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_178;
                     Finalizer_Scope_561;




            raise;
      end;



   return Property_Result;
end Type_Decl_P_Match_Param_Get_Type;
--# end

   







--# property-start TypeDecl.match_param_get_decl nodes.lkt:1889
pragma Warnings (Off, "is not referenced");
 function Type_Decl_P_Match_Param_Get_Decl
  
  (Node : Bare_Type_Decl
      ; Current_Name : Internal_Entity_Param
      ; In_Logic_Call : Boolean
         := False
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Internal_Entity_Decl
is
   Self : Bare_Type_Decl  := Bare_Type_Decl (Node);
     Ent : Internal_Entity_Type_Decl :=
       Internal_Entity_Type_Decl'(Node => Self, Info => E_Info);
      --# bind entity Ent

   

   --# bind current_name Current_Name
   --# bind in_logic_call In_Logic_Call

   Property_Result : Internal_Entity_Decl;

      
            procedure Finalizer_Scope_179 with Inline_Always;
            procedure Finalizer_Scope_569 with Inline_Always;

      Local_Ft : Internal_Entity_Function_Type;
Local_Origin : Internal_Entity_Decl;
Var_Expr_0 : Internal_Entity_Call_Expr;
Var_Expr_35 : Internal_Entity_Function_Type;
Var_Expr_36 : Internal_Param_Match;
Cast_Expr : Internal_Entity_Type_Decl;
Cast_Result : Internal_Entity_Function_Type;
Fld : Internal_Entity_Decl;
Scope_Result : Internal_Entity_Decl;
Result_Var : Internal_Entity_Decl;
Fld_1 : Internal_Entity;
Fld_2 : Internal_Entity;
Cast_Result_1 : Internal_Entity_Call_Expr;
Fld_3 : Internal_Formal_Param_Array_Access;
Fld_4 : Internal_Entity_Param_List;
Fld_5 : Internal_Param_Match_Array_Access;
Scope_Result_1 : Internal_Param_Match_Array_Access;
Result_Var_1 : Internal_Param_Match_Array_Access;
Fld_6 : Internal_Entity_Param;
Cast_Result_2 : Internal_Entity;
Cast_Expr_1 : Internal_Entity_Param;
Cast_Result_3 : Internal_Entity;
Is_Equiv : Boolean;
Find_Result : Internal_Param_Match;
Fld_7 : Internal_Formal_Param;
Fld_8 : Internal_Entity_Decl;
Scope_Result_2 : Internal_Entity_Decl;
Result_Var_2 : Internal_Entity_Decl;
Is_Null : Boolean;
If_Result : Internal_Entity_Decl;
Let_Result : Internal_Entity_Decl;
Let_Result_1 : Internal_Entity_Decl;

            procedure Finalizer_Scope_179 is
            begin
                     Dec_Ref (Scope_Result_1);
                     Dec_Ref (Result_Var_1);
            end Finalizer_Scope_179;
            procedure Finalizer_Scope_569 is
            begin
                     Dec_Ref (Fld_3);
                     Dec_Ref (Fld_5);
            end Finalizer_Scope_569;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 1095 '<Let at nodes.lkt:1890:9>' Let_Result_1 nodes.lkt:1890
--# scope-start
--# expr-start 1079 '<Cast to FunctionType at nodes.lkt:1890:18>' Cast_Result nodes.lkt:1890






Cast_Expr := Ent; 



   if Cast_Expr.Node = null
      or else Cast_Expr.Node.Kind in Lkt_Function_Type_Range
   then
      
      Cast_Result := Create_Internal_Entity_Function_Type
        (Node => Cast_Expr.Node,
         Info => Cast_Expr.Info);

   else
         Cast_Result := No_Entity_Function_Type;
   end if;


--# expr-done 1079
Local_Ft := Cast_Result; 
--# bind ft Local_Ft
--# expr-start 1094 '<Let at nodes.lkt:1891:9>' Let_Result nodes.lkt:1891
--# scope-start




Var_Expr_35 := Local_Ft;





if Var_Expr_35 /= No_Entity_Function_Type then
   



   --# scope-start


   

--# expr-start 1080 '<FieldAccess for origin at nodes.lkt:1891:22>' Fld nodes.lkt:1891







   if Var_Expr_35.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Var_Expr_35.Node.Function_Type_Origin;
--# expr-done 1080
Scope_Result := Fld;


   --# end


   Result_Var := Scope_Result;
else
   
   Result_Var := No_Entity_Decl;
end if;



Local_Origin := Result_Var; 
--# bind origin Local_Origin
--# expr-start 1093 '<If at nodes.lkt:1893:9>' If_Result nodes.lkt:1893



--# expr-start 1081 '<IsNull at nodes.lkt:1893:12>' Is_Null nodes.lkt:1893

Is_Null := Local_Origin.Node = null; 
--# expr-done 1081
if Is_Null then
   
   If_Result := No_Entity_Decl;
else
   


--# expr-start 1090 '<Find at nodes.lkt:1895:13>' Find_Result nodes.lkt:1895








   

   


--# expr-start 1084 '<Cast to CallExpr at nodes.lkt:1895:13>' Cast_Result_1 nodes.lkt:1895





--# expr-start 1083 '<parent at nodes.lkt:1895:13>' Fld_2 nodes.lkt:1895



--# expr-start 1082 '<parent at nodes.lkt:1895:13>' Fld_1 nodes.lkt:1895







   if Current_Name.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_1 := Liblktlang.Implementation.Parent (Node => Current_Name.Node, E_Info => Current_Name.Info);
--# expr-done 1082



   if Fld_1.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_2 := Liblktlang.Implementation.Parent (Node => Fld_1.Node, E_Info => Fld_1.Info);
--# expr-done 1083



   if Fld_2.Node = null
      or else Fld_2.Node.Kind in Lkt_Call_Expr_Range
   then
      
      Cast_Result_1 := Create_Internal_Entity_Call_Expr
        (Node => Fld_2.Node,
         Info => Fld_2.Info);

   else
         Raise_Property_Exception
           (Self, Property_Error'Identity, "invalid object cast");
   end if;


--# expr-done 1084
Var_Expr_0 := Cast_Result_1;





if Var_Expr_0 /= No_Entity_Call_Expr then
   



   --# scope-start


   --# bind ce Var_Expr_0

--# expr-start 1087 '<FieldAccess for match_params at nodes.lkt:1896:25>' Fld_5 nodes.lkt:1896







   if Var_Expr_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# expr-start 1085 '<FieldAccess for formals at nodes.lkt:1896:41>' Fld_3 nodes.lkt:1896







   if Local_Origin.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;



--# property-call-start Decl.formals
Fld_3 := Liblktlang.Implementation.Decl_P_Formals (Node => Local_Origin.Node, Is_Logic => In_Logic_Call, E_Info => Local_Origin.Info);
--# end
--# expr-done 1085
--# expr-start 1086 '<FieldAccess for args at nodes.lkt:1896:72>' Fld_4 nodes.lkt:1896







   if Var_Expr_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_4 := Create_Internal_Entity_Param_List (Node => Var_Expr_0.Node.Base_Call_Expr_F_Args, Info => Var_Expr_0.Info);
--# expr-done 1086
--# property-call-start Expr.match_params
Fld_5 := Liblktlang.Implementation.Expr_P_Match_Params (Node => Var_Expr_0.Node, Formals => Fld_3, Args => Fld_4);
--# end
--# expr-done 1087
Scope_Result_1 := Fld_5;
   Inc_Ref (Scope_Result_1);


   --# end
      Finalizer_Scope_569;


   Result_Var_1 := Scope_Result_1;
else
   
   Result_Var_1 := No_Internal_Param_Match_Array_Type;
end if;

      Inc_Ref (Result_Var_1);



   
      Find_Result := No_Param_Match;
   

   

      

      declare
         
         Collection : constant Internal_Param_Match_Array_Access := Result_Var_1;
      begin
         for Item_1 of
               Collection.Items
         loop

            
   --# scope-start


               --# bind pm Item_1

            
      --# expr-start 1089 '<Eq at nodes.lkt:1898:27>' Is_Equiv nodes.lkt:1898





--# expr-start 1088 '<FieldAccess for actual at nodes.lkt:1898:27>' Fld_6 nodes.lkt:1898









Fld_6 := Item_1.Actual;
--# expr-done 1088



   
      Cast_Result_2 := Create_Internal_Entity
        (Node => Fld_6.Node,
         Info => Fld_6.Info);








Cast_Expr_1 := Current_Name; 



   
      Cast_Result_3 := Create_Internal_Entity
        (Node => Cast_Expr_1.Node,
         Info => Cast_Expr_1.Info);


Is_Equiv := Equivalent (Cast_Result_2, Cast_Result_3); 
--# expr-done 1089
      if Is_Equiv then
         Find_Result := Item_1; 
      end if;
   

            
   --# end


               exit when Is_Equiv;

         end loop;
      end;
   

   
   



--# expr-done 1090
Var_Expr_36 := Find_Result;





if Var_Expr_36 /= No_Param_Match then
   



   --# scope-start


   

--# expr-start 1092 '<FieldAccess for decl at nodes.lkt:1895:13>' Fld_8 nodes.lkt:1895



--# expr-start 1091 '<FieldAccess for formal at nodes.lkt:1895:13>' Fld_7 nodes.lkt:1895









Fld_7 := Var_Expr_36.Formal;
--# expr-done 1091





Fld_8 := Fld_7.Decl;
--# expr-done 1092
Scope_Result_2 := Fld_8;


   --# end


   Result_Var_2 := Scope_Result_2;
else
   
   Result_Var_2 := No_Entity_Decl;
end if;



   If_Result := Result_Var_2;
end if;



--# expr-done 1093
Let_Result := If_Result; 
--# end
--# expr-done 1094
Let_Result_1 := Let_Result; 
--# end
--# expr-done 1095

         Property_Result := Let_Result_1;
         
   --# end
      Finalizer_Scope_179;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_179;
                     Finalizer_Scope_569;




            raise;
      end;



   return Property_Result;
end Type_Decl_P_Match_Param_Get_Decl;
--# end

   







--# property-start TypeDecl.lambda_param_get_type nodes.lkt:1905
pragma Warnings (Off, "is not referenced");
 function Type_Decl_P_Lambda_Param_Get_Type
  
  (Node : Bare_Type_Decl
      ; Current_Largdecl : Internal_Entity_Lambda_Arg_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Internal_Entity_Type_Decl
is
   Self : Bare_Type_Decl  := Bare_Type_Decl (Node);
     Ent : Internal_Entity_Type_Decl :=
       Internal_Entity_Type_Decl'(Node => Self, Info => E_Info);
      --# bind entity Ent

   

   --# bind current_largdecl Current_Largdecl

   Property_Result : Internal_Entity_Type_Decl;

      
            procedure Finalizer_Scope_180 with Inline_Always;
            procedure Finalizer_Scope_575 with Inline_Always;

      Local_Param_Idx : Integer;
Var_Expr_3 : Internal_Entity_Function_Type;
Fld : Internal_Entity;
Fld_1 : Internal_Entity;
Cast_Result : Internal_Entity_Lambda_Expr;
Fld_2 : Internal_Entity_Lambda_Arg_Decl_List;
Fld_3 : Bare_Lambda_Arg_Decl_List;
Fld_4 : Internal_Entity_Info;
Item_0 : Internal_Entity_Lambda_Arg_Decl;
Bare_Item_0 : Bare_Lambda_Arg_Decl;
Index_1 : Integer;
Neg : Integer;
Cast_Expr : Internal_Entity_Lambda_Arg_Decl;
Cast_Result_1 : Internal_Entity;
Cast_Expr_1 : Internal_Entity_Lambda_Arg_Decl;
Cast_Result_2 : Internal_Entity;
Is_Equiv : Boolean;
If_Result : Integer;
As_Entity : Internal_Entity_Lambda_Arg_Decl;
Is_Null : Boolean;
If_Result_1 : Internal_Entity_Lambda_Arg_Decl;
Map_Result : Integer_Array_Access;
Neg_1 : Integer;
Is_Equal : Boolean;
Not_Val : Boolean;
Map_Result_1 : Integer_Array_Access;
Get_Result : Integer;
Cast_Expr_2 : Internal_Entity_Type_Decl;
Cast_Result_3 : Internal_Entity_Function_Type;
Fld_5 : Internal_Entity_Type_Decl_Array_Access;
Get_Result_1 : Internal_Entity_Type_Decl;
Scope_Result : Internal_Entity_Type_Decl;
Result_Var : Internal_Entity_Type_Decl;
Let_Result : Internal_Entity_Type_Decl;

            procedure Finalizer_Scope_180 is
            begin
                     Dec_Ref (Map_Result);
                     Dec_Ref (Map_Result_1);
            end Finalizer_Scope_180;
            procedure Finalizer_Scope_575 is
            begin
                     Dec_Ref (Fld_5);
            end Finalizer_Scope_575;


begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         --# expr-start 1110 '<Let at nodes.lkt:1908:9>' Let_Result nodes.lkt:1908
--# scope-start
--# expr-start 1106 '<at at nodes.lkt:1909:13>' Get_Result nodes.lkt:1909

--# expr-start 1105 '<Map at nodes.lkt:1909:13>' Map_Result_1 nodes.lkt:1909








   

   --# expr-start 1102 '<Map at nodes.lkt:1909:13>' Map_Result nodes.lkt:1909








   

   --# expr-start 1099 '<FieldAccess for params at nodes.lkt:1909:13>' Fld_2 nodes.lkt:1909



--# expr-start 1098 '<Cast to LambdaExpr at nodes.lkt:1909:13>' Cast_Result nodes.lkt:1909





--# expr-start 1097 '<parent at nodes.lkt:1909:13>' Fld_1 nodes.lkt:1909



--# expr-start 1096 '<parent at nodes.lkt:1909:13>' Fld nodes.lkt:1909







   if Current_Largdecl.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Liblktlang.Implementation.Parent (Node => Current_Largdecl.Node, E_Info => Current_Largdecl.Info);
--# expr-done 1096



   if Fld.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_1 := Liblktlang.Implementation.Parent (Node => Fld.Node, E_Info => Fld.Info);
--# expr-done 1097



   if Fld_1.Node = null
      or else Fld_1.Node.Kind in Lkt_Lambda_Expr_Range
   then
      
      Cast_Result := Create_Internal_Entity_Lambda_Expr
        (Node => Fld_1.Node,
         Info => Fld_1.Info);

   else
         Cast_Result := No_Entity_Lambda_Expr;
   end if;


--# expr-done 1098



   if Cast_Result.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_2 := Create_Internal_Entity_Lambda_Arg_Decl_List (Node => Cast_Result.Node.Lambda_Expr_F_Params, Info => Cast_Result.Info);
--# expr-done 1099









Fld_3 := Fld_2.Node;

   
      declare
         Map_Result_Vec : Integer_Vectors.Vector;
      begin
   

   

      if Fld_3 = null then
         
      Map_Result := Create_Integer_Array (0);
   
      else
         
         Index_1 := 0;

      declare
         
         Collection : constant Bare_Lambda_Arg_Decl_List := Fld_3;
      begin
         for Untyped_Item_0 of
               Collection.Nodes (1 .. Children_Count (Collection))
         loop
                  
                  Bare_Item_0 := Untyped_Item_0; 
                  



Is_Null := Bare_Item_0 = null; 
if Is_Null then
   
   If_Result_1 := No_Entity_Lambda_Arg_Decl;
else
   








Fld_4 := Fld_2.Info;

As_Entity := (Info => Fld_4, Node => Bare_Item_0); 
   If_Result_1 := As_Entity;
end if;



                  Item_0 := If_Result_1; 

            
   --# scope-start


               --# bind p Item_0
               --# bind idx Index_1

            
         
         
      --# expr-start 1101 '<If at nodes.lkt:1910:29>' If_Result nodes.lkt:1910



--# expr-start 1100 '<Eq at nodes.lkt:1910:32>' Is_Equiv nodes.lkt:1910






Cast_Expr := Item_0; 



   
      Cast_Result_1 := Create_Internal_Entity
        (Node => Cast_Expr.Node,
         Info => Cast_Expr.Info);








Cast_Expr_1 := Current_Largdecl; 



   
      Cast_Result_2 := Create_Internal_Entity
        (Node => Cast_Expr_1.Node,
         Info => Cast_Expr_1.Info);


Is_Equiv := Equivalent (Cast_Result_1, Cast_Result_2); 
--# expr-done 1100
if Is_Equiv then
   
   If_Result := Index_1;
else
   
Neg := -1; 
   If_Result := Neg;
end if;



--# expr-done 1101
      

         declare
            Item_To_Append : constant Integer := If_Result;
         begin
            Integer_Vectors.Append (Map_Result_Vec, Item_To_Append);
         end;
   
   
   

            
   --# end



               Index_1 := Index_1 + 1;
         end loop;
      end;
   
      end if;

   

         Map_Result := Create_Integer_Array
           (Items_Count => Natural (Integer_Vectors.Length (Map_Result_Vec)));
         for I in Map_Result.Items'Range loop
            Map_Result.Items (I) := Integer_Vectors.Get
              (Map_Result_Vec,
               I + Integer_Vectors.Index_Type'First - Map_Result.Items'First);
         end loop;
         Integer_Vectors.Destroy (Map_Result_Vec);

      end;
   



--# expr-done 1102

   
      declare
         Map_Result_1_Vec : Integer_Vectors.Vector;
      begin
   

   

      

      declare
         
         Collection : constant Integer_Array_Access := Map_Result;
      begin
         for Item_2 of
               Collection.Items
         loop

            
   --# scope-start


               --# bind i Item_2

            
         --# expr-start 1104 '<Not at nodes.lkt:1912:28>' Not_Val nodes.lkt:1912
--# expr-start 1103 '<Eq at nodes.lkt:1912:28>' Is_Equal nodes.lkt:1912


Neg_1 := -1; 
Is_Equal := Item_2 = Neg_1; 
--# expr-done 1103
Not_Val := not (Is_Equal); 
--# expr-done 1104
         if Not_Val then
            
         
      
      

         declare
            Item_To_Append : constant Integer := Item_2;
         begin
            Integer_Vectors.Append (Map_Result_1_Vec, Item_To_Append);
         end;
   
   
         end if;
   

            
   --# end



         end loop;
      end;
   

   

         Map_Result_1 := Create_Integer_Array
           (Items_Count => Natural (Integer_Vectors.Length (Map_Result_1_Vec)));
         for I in Map_Result_1.Items'Range loop
            Map_Result_1.Items (I) := Integer_Vectors.Get
              (Map_Result_1_Vec,
               I + Integer_Vectors.Index_Type'First - Map_Result_1.Items'First);
         end loop;
         Integer_Vectors.Destroy (Map_Result_1_Vec);

      end;
   



--# expr-done 1105


Get_Result := Get (Self, Map_Result_1, 0, True); 
--# expr-done 1106
Local_Param_Idx := Get_Result; 
--# bind param_idx Local_Param_Idx



--# expr-start 1107 '<Cast to FunctionType at nodes.lkt:1916:9>' Cast_Result_3 nodes.lkt:1916






Cast_Expr_2 := Ent; 



   if Cast_Expr_2.Node = null
      or else Cast_Expr_2.Node.Kind in Lkt_Function_Type_Range
   then
      
      Cast_Result_3 := Create_Internal_Entity_Function_Type
        (Node => Cast_Expr_2.Node,
         Info => Cast_Expr_2.Info);

   else
         Cast_Result_3 := No_Entity_Function_Type;
   end if;


--# expr-done 1107
Var_Expr_3 := Cast_Result_3;





if Var_Expr_3 /= No_Entity_Function_Type then
   



   --# scope-start


   --# bind ft Var_Expr_3

--# expr-start 1109 '<at at nodes.lkt:1916:42>' Get_Result_1 nodes.lkt:1916

--# expr-start 1108 '<FieldAccess for args at nodes.lkt:1916:42>' Fld_5 nodes.lkt:1916







   if Var_Expr_3.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_5 := Var_Expr_3.Node.Function_Type_Args;
Inc_Ref (Fld_5);
--# expr-done 1108


Get_Result_1 := Get (Self, Fld_5, Local_Param_Idx, True); 
--# expr-done 1109
Scope_Result := Get_Result_1;


   --# end
      Finalizer_Scope_575;


   Result_Var := Scope_Result;
else
   
   Result_Var := No_Entity_Type_Decl;
end if;



Let_Result := Result_Var; 
--# end
--# expr-done 1110

         Property_Result := Let_Result;
         
   --# end
      Finalizer_Scope_180;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_180;
                     Finalizer_Scope_575;




            raise;
      end;



   return Property_Result;
end Type_Decl_P_Lambda_Param_Get_Type;
--# end

   







--# property-start TypeDecl.is_valid_call nodes.lkt:1923
pragma Warnings (Off, "is not referenced");
 function Type_Decl_P_Is_Valid_Call
  
  (Node : Bare_Type_Decl
      ; Args : Internal_Entity_Param_List
      ; In_Logic_Call : Boolean
         := False
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Boolean
is
   Self : Bare_Type_Decl  := Bare_Type_Decl (Node);
     Ent : Internal_Entity_Type_Decl :=
       Internal_Entity_Type_Decl'(Node => Self, Info => E_Info);
      --# bind entity Ent

   

   --# bind args Args
   --# bind in_logic_call In_Logic_Call

   Property_Result : Boolean;

      
            procedure Finalizer_Scope_181 with Inline_Always;
            procedure Finalizer_Scope_576 with Inline_Always;
            procedure Finalizer_Scope_577 with Inline_Always;
            procedure Finalizer_Scope_578 with Inline_Always;

      Local_Matched : Internal_Param_Match_Array_Access;
Var_Expr_0 : Internal_Entity_Function_Type;
Var_Expr_1 : Internal_Entity_Decl;
Var_Expr_2 : Internal_Entity_Function_Type;
Cast_Expr : Internal_Entity_Type_Decl;
Cast_Result : Internal_Entity_Function_Type;
Fld : Internal_Entity;
Cast_Result_1 : Internal_Entity_Expr;
Fld_1 : Internal_Entity_Decl;
Fld_2 : Internal_Formal_Param_Array_Access;
Scope_Result : Internal_Formal_Param_Array_Access;
Result_Var : Internal_Formal_Param_Array_Access;
Fld_3 : Internal_Param_Match_Array_Access;
Scope_Result_1 : Internal_Param_Match_Array_Access;
Result_Var_1 : Internal_Param_Match_Array_Access;
Cast_Expr_1 : Internal_Entity_Type_Decl;
Cast_Result_2 : Internal_Entity_Function_Type;
Is_Equal : Boolean;
Fld_4 : Bare_Param_List;
Len : Integer;
Fld_5 : Internal_Entity_Type_Decl_Array_Access;
Len_1 : Integer;
Is_Equal_1 : Boolean;
If_Result : Boolean;
Saved : Internal_Entity_Param_List;
Fld_6 : Bare_Param_List;
Fld_7 : Internal_Entity_Info;
Item_3 : Internal_Entity_Param;
Bare_Item_3 : Bare_Param;
Fld_8 : Internal_Entity_Ref_Id;
Is_Null : Boolean;
Fld_9 : Internal_Entity_Param;
Cast_Result_3 : Internal_Entity;
Cast_Expr_2 : Internal_Entity_Param;
Cast_Result_4 : Internal_Entity;
Is_Equiv : Boolean;
Find_Result : Internal_Param_Match;
Is_Equal_2 : Boolean;
If_Result_1 : Boolean;
Not_Val : Boolean;
As_Entity : Internal_Entity_Param;
Is_Null_1 : Boolean;
If_Result_2 : Internal_Entity_Param;
Quantifier_Result : Boolean;
Fld_10 : Internal_Entity_Param;
Is_Null_2 : Boolean;
Not_Val_1 : Boolean;
Fld_11 : Internal_Formal_Param;
Fld_12 : Boolean;
If_Result_3 : Boolean;
Quantifier_Result_1 : Boolean;
If_Result_4 : Boolean;
If_Result_5 : Boolean;
Scope_Result_2 : Boolean;
Result_Var_2 : Boolean;
Let_Result : Boolean;

            procedure Finalizer_Scope_181 is
            begin
                     Dec_Ref (Scope_Result_1);
                     Dec_Ref (Result_Var_1);
                     Dec_Ref (Local_Matched);
            end Finalizer_Scope_181;
            procedure Finalizer_Scope_576 is
            begin
                     Dec_Ref (Scope_Result);
                     Dec_Ref (Result_Var);
                     Dec_Ref (Fld_3);
            end Finalizer_Scope_576;
            procedure Finalizer_Scope_577 is
            begin
                     Dec_Ref (Fld_2);
            end Finalizer_Scope_577;
            procedure Finalizer_Scope_578 is
            begin
                     Dec_Ref (Fld_5);
            end Finalizer_Scope_578;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 1142 '<Let at nodes.lkt:1924:9>' Let_Result nodes.lkt:1924
--# scope-start



--# expr-start 1111 '<Cast to FunctionType at nodes.lkt:1925:13>' Cast_Result nodes.lkt:1925






Cast_Expr := Ent; 



   if Cast_Expr.Node = null
      or else Cast_Expr.Node.Kind in Lkt_Function_Type_Range
   then
      
      Cast_Result := Create_Internal_Entity_Function_Type
        (Node => Cast_Expr.Node,
         Info => Cast_Expr.Info);

   else
         Cast_Result := No_Entity_Function_Type;
   end if;


--# expr-done 1111
Var_Expr_0 := Cast_Result;





if Var_Expr_0 /= No_Entity_Function_Type then
   



   --# scope-start


   --# bind ft Var_Expr_0

--# expr-start 1116 '<FieldAccess for match_params at nodes.lkt:1927:17>' Fld_3 nodes.lkt:1927



--# expr-start 1113 '<Cast to Expr at nodes.lkt:1927:17>' Cast_Result_1 nodes.lkt:1927





--# expr-start 1112 '<parent at nodes.lkt:1927:17>' Fld nodes.lkt:1927







   if Args.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Liblktlang.Implementation.Parent (Node => Args.Node, E_Info => Args.Info);
--# expr-done 1112



   if Fld.Node = null
      or else Fld.Node.Kind in Lkt_Expr
   then
      
      Cast_Result_1 := Create_Internal_Entity_Expr
        (Node => Fld.Node,
         Info => Fld.Info);

   else
         Cast_Result_1 := No_Entity_Expr;
   end if;


--# expr-done 1113



   if Cast_Result_1.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;





--# expr-start 1114 '<FieldAccess for origin at nodes.lkt:1928:21>' Fld_1 nodes.lkt:1928







   if Var_Expr_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_1 := Var_Expr_0.Node.Function_Type_Origin;
--# expr-done 1114
Var_Expr_1 := Fld_1;





if Var_Expr_1 /= No_Entity_Decl then
   



   --# scope-start


   --# bind origin Var_Expr_1

--# expr-start 1115 '<FieldAccess for formals at nodes.lkt:1928:46>' Fld_2 nodes.lkt:1928







   if Var_Expr_1.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;



--# property-call-start Decl.formals
Fld_2 := Liblktlang.Implementation.Decl_P_Formals (Node => Var_Expr_1.Node, Is_Logic => In_Logic_Call, E_Info => Var_Expr_1.Info);
--# end
--# expr-done 1115
Scope_Result := Fld_2;
   Inc_Ref (Scope_Result);


   --# end
      Finalizer_Scope_577;


   Result_Var := Scope_Result;
else
   
   Result_Var := No_Internal_Formal_Param_Array_Type;
end if;

      Inc_Ref (Result_Var);



--# property-call-start Expr.match_params
Fld_3 := Liblktlang.Implementation.Expr_P_Match_Params (Node => Cast_Result_1.Node, Formals => Result_Var, Args => Args);
--# end
--# expr-done 1116
Scope_Result_1 := Fld_3;
   Inc_Ref (Scope_Result_1);


   --# end
      Finalizer_Scope_576;


   Result_Var_1 := Scope_Result_1;
else
   
   Result_Var_1 := No_Internal_Param_Match_Array_Type;
end if;

      Inc_Ref (Result_Var_1);


Local_Matched := Result_Var_1; Inc_Ref (Local_Matched);
--# bind matched Local_Matched



--# expr-start 1117 '<Cast to FunctionType at nodes.lkt:1933:9>' Cast_Result_2 nodes.lkt:1933






Cast_Expr_1 := Ent; 



   if Cast_Expr_1.Node = null
      or else Cast_Expr_1.Node.Kind in Lkt_Function_Type_Range
   then
      
      Cast_Result_2 := Create_Internal_Entity_Function_Type
        (Node => Cast_Expr_1.Node,
         Info => Cast_Expr_1.Info);

   else
         Cast_Result_2 := No_Entity_Function_Type;
   end if;


--# expr-done 1117
Var_Expr_2 := Cast_Result_2;





if Var_Expr_2 /= No_Entity_Function_Type then
   



   --# scope-start


   --# bind ft Var_Expr_2

--# expr-start 1141 '<BooleanBinaryOp Or at nodes.lkt:1935:13>' If_Result_5 nodes.lkt:1935



--# expr-start 1123 '<BooleanBinaryOp And at nodes.lkt:1936:17>' If_Result nodes.lkt:1936



--# expr-start 1118 '<Eq at nodes.lkt:1936:17>' Is_Equal nodes.lkt:1936


Is_Equal := Equivalent (Local_Matched, No_Internal_Param_Match_Array_Type); 
--# expr-done 1118
if Is_Equal then
   --# expr-start 1122 '<Eq at nodes.lkt:1937:21>' Is_Equal_1 nodes.lkt:1937
--# expr-start 1119 '<length at nodes.lkt:1937:21>' Len nodes.lkt:1937









Fld_4 := Args.Node; 
Len := Length (Fld_4); 
--# expr-done 1119
--# expr-start 1121 '<length at nodes.lkt:1937:38>' Len_1 nodes.lkt:1937
--# expr-start 1120 '<FieldAccess for args at nodes.lkt:1937:38>' Fld_5 nodes.lkt:1937







   if Var_Expr_2.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_5 := Var_Expr_2.Node.Function_Type_Args;
Inc_Ref (Fld_5);
--# expr-done 1120
Len_1 := Length (Fld_5); 
--# expr-done 1121
Is_Equal_1 := Len = Len_1; 
--# expr-done 1122
   If_Result := Is_Equal_1;
else
   
   If_Result := False;
end if;



--# expr-done 1123
if If_Result then
   
   If_Result_5 := True;
else
   --# expr-start 1140 '<BooleanBinaryOp And at nodes.lkt:1942:17>' If_Result_4 nodes.lkt:1942



--# expr-start 1132 '<AllQuantifier at nodes.lkt:1942:17>' Quantifier_Result nodes.lkt:1942








   

   
Saved := Args; 









Fld_6 := Saved.Node;

   
      Quantifier_Result := True;
   

   

      if Fld_6 = null then
         
      null;
   
      else
         

      declare
         
         Collection : constant Bare_Param_List := Fld_6;
      begin
         for Untyped_Item_3 of
               Collection.Nodes (1 .. Children_Count (Collection))
         loop
                  
                  Bare_Item_3 := Untyped_Item_3; 
                  



Is_Null_1 := Bare_Item_3 = null; 
if Is_Null_1 then
   
   If_Result_2 := No_Entity_Param;
else
   








Fld_7 := Saved.Info;

As_Entity := (Info => Fld_7, Node => Bare_Item_3); 
   If_Result_2 := As_Entity;
end if;



                  Item_3 := If_Result_2; 

            
   --# scope-start


               --# bind p Item_3

            
      --# expr-start 1131 '<Not at nodes.lkt:1944:21>' Not_Val nodes.lkt:1944
--# expr-start 1130 '<BooleanBinaryOp And at nodes.lkt:1945:25>' If_Result_1 nodes.lkt:1945



--# expr-start 1125 '<IsNull at nodes.lkt:1945:25>' Is_Null nodes.lkt:1945
--# expr-start 1124 '<FieldAccess for name at nodes.lkt:1945:25>' Fld_8 nodes.lkt:1945







   if Item_3.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_8 := Create_Internal_Entity_Ref_Id (Node => Item_3.Node.Param_F_Name, Info => Item_3.Info);
--# expr-done 1124
Is_Null := Fld_8.Node = null; 
--# expr-done 1125
if Is_Null then
   --# expr-start 1129 '<IsNull at nodes.lkt:1946:29>' Is_Equal_2 nodes.lkt:1946
--# expr-start 1128 '<Find at nodes.lkt:1946:29>' Find_Result nodes.lkt:1946








   

   

   
      Find_Result := No_Param_Match;
   

   

      

      declare
         
         Collection : constant Internal_Param_Match_Array_Access := Local_Matched;
      begin
         for Item_4 of
               Collection.Items
         loop

            
   --# scope-start


               --# bind m Item_4

            
      --# expr-start 1127 '<Eq at nodes.lkt:1946:49>' Is_Equiv nodes.lkt:1946





--# expr-start 1126 '<FieldAccess for actual at nodes.lkt:1946:49>' Fld_9 nodes.lkt:1946









Fld_9 := Item_4.Actual;
--# expr-done 1126



   
      Cast_Result_3 := Create_Internal_Entity
        (Node => Fld_9.Node,
         Info => Fld_9.Info);








Cast_Expr_2 := Item_3; 



   
      Cast_Result_4 := Create_Internal_Entity
        (Node => Cast_Expr_2.Node,
         Info => Cast_Expr_2.Info);


Is_Equiv := Equivalent (Cast_Result_3, Cast_Result_4); 
--# expr-done 1127
      if Is_Equiv then
         Find_Result := Item_4; 
      end if;
   

            
   --# end


               exit when Is_Equiv;

         end loop;
      end;
   

   
   



--# expr-done 1128

Is_Equal_2 := Find_Result = No_Param_Match; 
--# expr-done 1129
   If_Result_1 := Is_Equal_2;
else
   
   If_Result_1 := False;
end if;



--# expr-done 1130
Not_Val := not (If_Result_1); 
--# expr-done 1131
      Quantifier_Result := Not_Val;
   

            
   --# end


               exit when not Quantifier_Result;

         end loop;
      end;
   
      end if;

   
   



--# expr-done 1132
if Quantifier_Result then
   --# expr-start 1139 '<AllQuantifier at nodes.lkt:1952:21>' Quantifier_Result_1 nodes.lkt:1952








   

   

   
      Quantifier_Result_1 := True;
   

   

      

      declare
         
         Collection : constant Internal_Param_Match_Array_Access := Local_Matched;
      begin
         for Item_5 of
               Collection.Items
         loop

            
   --# scope-start


               --# bind p Item_5

            
      --# expr-start 1138 '<BooleanBinaryOp Or at nodes.lkt:1954:25>' If_Result_3 nodes.lkt:1954



--# expr-start 1135 '<Not at nodes.lkt:1954:25>' Not_Val_1 nodes.lkt:1954
--# expr-start 1134 '<IsNull at nodes.lkt:1954:29>' Is_Null_2 nodes.lkt:1954
--# expr-start 1133 '<FieldAccess for actual at nodes.lkt:1954:29>' Fld_10 nodes.lkt:1954









Fld_10 := Item_5.Actual;
--# expr-done 1133
Is_Null_2 := Fld_10.Node = null; 
--# expr-done 1134
Not_Val_1 := not (Is_Null_2); 
--# expr-done 1135
if Not_Val_1 then
   
   If_Result_3 := True;
else
   --# expr-start 1137 '<FieldAccess for has_default_value at nodes.lkt:1954:49>' Fld_12 nodes.lkt:1954



--# expr-start 1136 '<FieldAccess for formal at nodes.lkt:1954:49>' Fld_11 nodes.lkt:1954









Fld_11 := Item_5.Formal;
--# expr-done 1136





Fld_12 := Fld_11.Has_Default_Value;
--# expr-done 1137
   If_Result_3 := Fld_12;
end if;



--# expr-done 1138
      Quantifier_Result_1 := If_Result_3;
   

            
   --# end


               exit when not Quantifier_Result_1;

         end loop;
      end;
   

   
   



--# expr-done 1139
   If_Result_4 := Quantifier_Result_1;
else
   
   If_Result_4 := False;
end if;



--# expr-done 1140
   If_Result_5 := If_Result_4;
end if;



--# expr-done 1141
Scope_Result_2 := If_Result_5;


   --# end
      Finalizer_Scope_578;


   Result_Var_2 := Scope_Result_2;
else
   
   Result_Var_2 := True;
end if;



Let_Result := Result_Var_2; 
--# end
--# expr-done 1142

         Property_Result := Let_Result;
         
   --# end
      Finalizer_Scope_181;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_181;
                     Finalizer_Scope_576;
                     Finalizer_Scope_577;
                     Finalizer_Scope_578;




            raise;
      end;



   return Property_Result;
end Type_Decl_P_Is_Valid_Call;
--# end

   







--# property-start TypeDecl.get_return_type nodes.lkt:1963
pragma Warnings (Off, "is not referenced");
 function Type_Decl_P_Get_Return_Type
  
  (Node : Bare_Type_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Internal_Entity_Type_Decl
is
   Self : Bare_Type_Decl  := Bare_Type_Decl (Node);
     Ent : Internal_Entity_Type_Decl :=
       Internal_Entity_Type_Decl'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Internal_Entity_Type_Decl;

      

      Var_Expr_37 : Internal_Entity_Function_Type;
Cast_Expr : Internal_Entity_Type_Decl;
Cast_Result : Internal_Entity_Function_Type;
Fld : Internal_Entity_Type_Decl;
Scope_Result : Internal_Entity_Type_Decl;
Result_Var : Internal_Entity_Type_Decl;



begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         


--# expr-start 1143 '<Cast to FunctionType at nodes.lkt:1964:9>' Cast_Result nodes.lkt:1964






Cast_Expr := Ent; 



   if Cast_Expr.Node = null
      or else Cast_Expr.Node.Kind in Lkt_Function_Type_Range
   then
      
      Cast_Result := Create_Internal_Entity_Function_Type
        (Node => Cast_Expr.Node,
         Info => Cast_Expr.Info);

   else
         Cast_Result := No_Entity_Function_Type;
   end if;


--# expr-done 1143
Var_Expr_37 := Cast_Result;





if Var_Expr_37 /= No_Entity_Function_Type then
   



   --# scope-start


   

--# expr-start 1144 '<FieldAccess for return_type at nodes.lkt:1964:9>' Fld nodes.lkt:1964







   if Var_Expr_37.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Var_Expr_37.Node.Function_Type_Return_Type;
--# expr-done 1144
Scope_Result := Fld;


   --# end


   Result_Var := Scope_Result;
else
   
   Result_Var := No_Entity_Type_Decl;
end if;




         Property_Result := Result_Var;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Type_Decl_P_Get_Return_Type;
--# end

   







--# property-start TypeDecl.create_function_type nodes.lkt:1968
pragma Warnings (Off, "is not referenced");
 function Type_Decl_P_Create_Function_Type
  
  (Node : Bare_Type_Decl
      ; Args : Internal_Entity_Type_Decl_Array_Access
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Internal_Entity_Type_Decl
is
   Self : Bare_Type_Decl  := Bare_Type_Decl (Node);
     Ent : Internal_Entity_Type_Decl :=
       Internal_Entity_Type_Decl'(Node => Self, Info => E_Info);
      --# bind entity Ent

   

   --# bind args Args

   Property_Result : Internal_Entity_Type_Decl;

      
            procedure Finalizer_Scope_183 with Inline_Always;

      Var_Expr_1 : Internal_Entity_Type_Decl;
Var_Expr_2 : Internal_Entity_Type_Decl;
Array_Lit : Internal_Entity_Type_Decl_Array_Access;
Concat_Result : Internal_Entity_Type_Decl_Array_Access;
Is_Null : Boolean;
Not_Val : Boolean;
Find_Result : Internal_Entity_Type_Decl;
Scope_Result : Internal_Entity_Type_Decl;
Fld : Internal_Entity_Type_Decl;
Result_Var : Internal_Entity_Type_Decl;
Fld_1 : Internal_Entity_Function_Type;
Scope_Result_1 : Internal_Entity_Function_Type;
Result_Var_1 : Internal_Entity_Function_Type;
Cast_Result : Internal_Entity_Type_Decl;

            procedure Finalizer_Scope_183 is
            begin
                     Dec_Ref (Array_Lit);
                     Dec_Ref (Concat_Result);
            end Finalizer_Scope_183;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         







--# expr-start 1148 '<Find at nodes.lkt:1969:9>' Find_Result nodes.lkt:1969








   

   --# expr-start 1145 '<ArrayLiteral at nodes.lkt:1969:10>' Array_Lit nodes.lkt:1969

Array_Lit := Create_Internal_Entity_Type_Decl_Array (Internal_Internal_Entity_Type_Decl_Array'(1 => Ent)); 
--# expr-done 1145

Concat_Result := Concat (Array_Lit, Args); 

   
      Find_Result := No_Entity_Type_Decl;
   

   

      

      declare
         
         Collection : constant Internal_Entity_Type_Decl_Array_Access := Concat_Result;
      begin
         for Item_0 of
               Collection.Items
         loop

            
   --# scope-start


               --# bind t Item_0

            
      --# expr-start 1147 '<Not at nodes.lkt:1969:37>' Not_Val nodes.lkt:1969
--# expr-start 1146 '<IsNull at nodes.lkt:1969:41>' Is_Null nodes.lkt:1969

Is_Null := Item_0.Node = null; 
--# expr-done 1146
Not_Val := not (Is_Null); 
--# expr-done 1147
      if Not_Val then
         Find_Result := Item_0; 
      end if;
   

            
   --# end


               exit when Not_Val;

         end loop;
      end;
   

   
   



--# expr-done 1148
Var_Expr_1 := Find_Result;





if Var_Expr_1 /= No_Entity_Type_Decl then
   



   --# scope-start


   --# bind t Var_Expr_1

--# expr-start 1150 '<FieldAccess for function_type_helper at nodes.lkt:1971:13>' Fld_1 nodes.lkt:1971







   if Var_Expr_1.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;







Var_Expr_2 := Ent;





if Var_Expr_2 /= No_Entity_Type_Decl then
   



   --# scope-start


   --# bind e Var_Expr_2


Scope_Result := Var_Expr_2;


   --# end


   Result_Var := Scope_Result;
else
   --# expr-start 1149 '<FieldAccess for any_type at nodes.lkt:1973:47>' Fld nodes.lkt:1973







   if Var_Expr_1.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start LktNode.any_type
Fld := Liblktlang.Implementation.Lkt_Node_P_Any_Type (Node => Var_Expr_1.Node, E_Info => Var_Expr_1.Info);
--# end
--# expr-done 1149
   Result_Var := Fld;
end if;




--# property-call-start LktNode.function_type_helper
Fld_1 := Liblktlang.Implementation.Lkt_Node_P_Function_Type_Helper (Node => Var_Expr_1.Node, Args_Types => Args, Return_Type => Result_Var, Origin => No_Entity_Decl, E_Info => Var_Expr_1.Info);
--# end
--# expr-done 1150
Scope_Result_1 := Fld_1;


   --# end


   Result_Var_1 := Scope_Result_1;
else
   
   Result_Var_1 := No_Entity_Function_Type;
end if;






   
      Cast_Result := Create_Internal_Entity_Type_Decl
        (Node => Result_Var_1.Node,
         Info => Result_Var_1.Info);



         Property_Result := Cast_Result;
         
   --# end
      Finalizer_Scope_183;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_183;




            raise;
      end;



   return Property_Result;
end Type_Decl_P_Create_Function_Type;
--# end

   







--# property-start TypeDecl.make_array_type nodes.lkt:1981
pragma Warnings (Off, "is not referenced");
 function Type_Decl_P_Make_Array_Type
  
  (Node : Bare_Type_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Internal_Entity_Type_Decl
is
   Self : Bare_Type_Decl  := Bare_Type_Decl (Node);
     Ent : Internal_Entity_Type_Decl :=
       Internal_Entity_Type_Decl'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Internal_Entity_Type_Decl;

      
            procedure Finalizer_Scope_586 with Inline_Always;

      Var_Expr_38 : Internal_Entity_Type_Decl;
Fld : Internal_Entity_Named_Type_Decl;
Array_Lit : Internal_Entity_Type_Decl_Array_Access;
Fld_1 : Internal_Entity_Decl;
Scope_Result : Internal_Entity_Decl;
Result_Var : Internal_Entity_Decl;
Cast_Result : Internal_Entity_Type_Decl;

            procedure Finalizer_Scope_586 is
            begin
                     Dec_Ref (Array_Lit);
            end Finalizer_Scope_586;

      
      Mmz_Handle : Memoization_Handle;
      Mmz_Val    : Mmz_Value;

      Mmz_Stored : Boolean;
      --  Whether the memoization couple was actually stored. Used to determine
      --  whether to inc-ref the memoized value.

      function Create_Mmz_Key return Mmz_Key;
      --  Create a memoization key for this property call and return it

      --------------------
      -- Create_Mmz_Key --
      --------------------

      function Create_Mmz_Key return Mmz_Key is
      begin
         return Mmz_K : Mmz_Key :=
           (Property => Mmz_Bare_Type_Decl_Type_Decl_P_Make_Array_Type,
            Items    => new Mmz_Key_Array (1 ..  2))
         do
            Mmz_K.Items (1) := (Kind => Mmz_Bare_Type_Decl,
                                As_Bare_Type_Decl => Self);
               Mmz_K.Items (2) :=
                 (Kind => Mmz_Internal_Entity_Info,
                  As_Internal_Entity_Info => E_Info);
         end return;
      end Create_Mmz_Key;

begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;

      if Self /= null then

         if not Self.Unit.Context.In_Populate_Lexical_Env then

            if Find_Memoized_Value
              (Self.Unit, Mmz_Handle, Mmz_Val, Create_Mmz_Key'Access)
            then
               --# memoization-lookup

               if Mmz_Val.Kind = Mmz_Evaluating then
                  --# memoization-return
                  Raise_Property_Exception
                    (Self,
                     Property_Error'Identity,
                     "Infinite recursion detected");

               elsif Mmz_Val.Kind = Mmz_Error then
                  --# memoization-return
                  Reraise_Memoized_Error (Mmz_Val);

               else
                  Property_Result := Mmz_Val.As_Internal_Entity_Type_Decl;

                  --# memoization-return
                  return Property_Result;
               end if;
               --# end
            end if;

         end if;
      end if;

      begin
         
   --# scope-start

         --# expr-start 1154 '<Cast to TypeDecl at nodes.lkt:1982:9>' Cast_Result nodes.lkt:1982









Var_Expr_38 := Ent;





if Var_Expr_38 /= No_Entity_Type_Decl then
   



   --# scope-start


   

--# expr-start 1153 '<FieldAccess for instantiate_generic_decl at nodes.lkt:1982:9>' Fld_1 nodes.lkt:1982



--# expr-start 1151 '<FieldAccess for array_type at nodes.lkt:1982:9>' Fld nodes.lkt:1982







   if Var_Expr_38.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start LktNode.array_type
Fld := Liblktlang.Implementation.Lkt_Node_P_Array_Type (Node => Var_Expr_38.Node);
--# end
--# expr-done 1151



   if Fld.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# expr-start 1152 '<ArrayLiteral at nodes.lkt:1982:53>' Array_Lit nodes.lkt:1982

Array_Lit := Create_Internal_Entity_Type_Decl_Array (Internal_Internal_Entity_Type_Decl_Array'(1 => Ent)); 
--# expr-done 1152
--# property-call-start Decl.instantiate_generic_decl
Fld_1 := Liblktlang.Implementation.Decl_P_Instantiate_Generic_Decl (Node => Fld.Node, Type_Params => Array_Lit, E_Info => Fld.Info);
--# end
--# expr-done 1153
Scope_Result := Fld_1;


   --# end
      Finalizer_Scope_586;


   Result_Var := Scope_Result;
else
   
   Result_Var := No_Entity_Decl;
end if;






   if Result_Var.Node = null
      or else Result_Var.Node.Kind in Lkt_Type_Decl
   then
      
      Cast_Result := Create_Internal_Entity_Type_Decl
        (Node => Result_Var.Node,
         Info => Result_Var.Info);

   else
         Cast_Result := No_Entity_Type_Decl;
   end if;


--# expr-done 1154

         Property_Result := Cast_Result;
         
   --# end


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_586;


               if Self /= null then
                     if not Self.Unit.Context.In_Populate_Lexical_Env then
                        Add_Memoized_Error
                          (Self.Unit, Mmz_Handle, Exc, Mmz_Stored);
                     end if;
               end if;


            raise;
      end;

      if Self /= null then
         if not Self.Unit.Context.In_Populate_Lexical_Env then

            Mmz_Val := (Kind => Mmz_Internal_Entity_Type_Decl,
                        As_Internal_Entity_Type_Decl => Property_Result);
            Add_Memoized_Value (Self.Unit, Mmz_Handle, Mmz_Val, Mmz_Stored);

         end if;
      end if;



   return Property_Result;
end Type_Decl_P_Make_Array_Type;
--# end

   







--# property-start TypeDecl.get_array_content_type nodes.lkt:1985
pragma Warnings (Off, "is not referenced");
 function Type_Decl_P_Get_Array_Content_Type
  
  (Node : Bare_Type_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Internal_Entity_Type_Decl
is
   Self : Bare_Type_Decl  := Bare_Type_Decl (Node);
     Ent : Internal_Entity_Type_Decl :=
       Internal_Entity_Type_Decl'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Internal_Entity_Type_Decl;

      
            procedure Finalizer_Scope_185 with Inline_Always;

      Cast_Expr : Internal_Entity_Type_Decl;
Cast_Result : Internal_Entity;
Bound_Origin : Internal_Entity;
Fld : Lexical_Env := Empty_Env;
Sym : Symbol_Type;
Env_Get_Result : Internal_Entity;
Cast_Result_1 : Internal_Entity_Fun_Decl;
Fld_1 : Internal_Entity_Type_Ref;
Fld_2 : Internal_Entity_Type_Decl;
Dyn_Var_Bind_Result : Internal_Entity_Type_Decl;
Fld_3 : Boolean;
If_Result : Internal_Entity_Type_Decl;
Is_Null : Boolean;
If_Result_1 : Internal_Entity_Type_Decl;

            procedure Finalizer_Scope_185 is
            begin
                     Dec_Ref (Fld);
            end Finalizer_Scope_185;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 1165 '<If at nodes.lkt:1986:9>' If_Result_1 nodes.lkt:1986



--# expr-start 1155 '<IsNull at nodes.lkt:1986:12>' Is_Null nodes.lkt:1986

Is_Null := Ent.Node = null; 
--# expr-done 1155
if Is_Null then
   
   If_Result_1 := No_Entity_Type_Decl;
else
   --# expr-start 1164 '<If at nodes.lkt:1986:9>' If_Result nodes.lkt:1986



--# expr-start 1156 '<FieldAccess for is_of_array_type at nodes.lkt:1987:14>' Fld_3 nodes.lkt:1987







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start TypeDecl.is_of_array_type
Fld_3 := Liblktlang.Implementation.Type_Decl_P_Is_Of_Array_Type (Node => Ent.Node, E_Info => Ent.Info);
--# end
--# expr-done 1156
if Fld_3 then
   --# expr-start 1163 '<bind at nodes.lkt:1993:17>' Dyn_Var_Bind_Result nodes.lkt:1993






Cast_Expr := Ent; 



   
      Cast_Result := Create_Internal_Entity
        (Node => Cast_Expr.Node,
         Info => Cast_Expr.Info);


Bound_Origin := Cast_Result; 
--# expr-start 1162 '<FieldAccess for referenced_decl at nodes.lkt:1995:17>' Fld_2 nodes.lkt:1995



--# expr-start 1161 '<FieldAccess for return_type at nodes.lkt:1995:17>' Fld_1 nodes.lkt:1995



--# expr-start 1160 '<Cast to FunDecl at nodes.lkt:1995:17>' Cast_Result_1 nodes.lkt:1995





--# expr-start 1159 '<EnvGet at nodes.lkt:1995:17>' Env_Get_Result nodes.lkt:1995
--# expr-start 1157 '<FieldAccess for defined_scope at nodes.lkt:1995:17>' Fld nodes.lkt:1995







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]Decl.defined_scope'
Fld := Liblktlang.Implementation.Dispatcher_Decl_P_Defined_Scope (Node => Ent.Node, Origin => Bound_Origin, E_Info => Ent.Info);
--# end
--# expr-done 1157
--# expr-start 1158 '<Symbol __call__ at nodes.lkt:1995:48>' Sym nodes.lkt:1995
Sym := Precomputed_Symbol (Precomputed_Symbol_Table (Self.Unit.Context.Symbols), Precomputed_Sym_Call); 
--# expr-done 1158


Env_Get_Result := AST_Envs.Get_First (Self => Fld, Key => Thin (Sym), Lookup_Kind => To_Lookup_Kind_Type (Recursive), Categories => (Nocat => True)); 
--# expr-done 1159



   if Env_Get_Result.Node = null
      or else Env_Get_Result.Node.Kind in Lkt_Fun_Decl_Range
   then
      
      Cast_Result_1 := Create_Internal_Entity_Fun_Decl
        (Node => Env_Get_Result.Node,
         Info => Env_Get_Result.Info);

   else
         Raise_Property_Exception
           (Self, Property_Error'Identity, "invalid object cast");
   end if;


--# expr-done 1160



   if Cast_Result_1.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_1 := Create_Internal_Entity_Type_Ref (Node => Cast_Result_1.Node.Fun_Decl_F_Return_Type, Info => Cast_Result_1.Info);
--# expr-done 1161



   if Fld_1.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start TypeRef.referenced_decl
Fld_2 := Liblktlang.Implementation.Type_Ref_P_Referenced_Decl (Node => Fld_1.Node, E_Info => Fld_1.Info);
--# end
--# expr-done 1162
Dyn_Var_Bind_Result := Fld_2; 
--# expr-done 1163
   If_Result := Dyn_Var_Bind_Result;
else
   
   If_Result := No_Entity_Type_Decl;
end if;



--# expr-done 1164
   If_Result_1 := If_Result;
end if;



--# expr-done 1165

         Property_Result := If_Result_1;
         
   --# end
      Finalizer_Scope_185;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_185;




            raise;
      end;



   return Property_Result;
end Type_Decl_P_Get_Array_Content_Type;
--# end

   







--# property-start TypeDecl.get_super_of_parent nodes.lkt:2004
pragma Warnings (Off, "is not referenced");
 function Type_Decl_P_Get_Super_Of_Parent
  
  (Node : Bare_Type_Decl
      ; Origin : Internal_Entity
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Internal_Entity_Decl
is
   Self : Bare_Type_Decl  := Bare_Type_Decl (Node);
     Ent : Internal_Entity_Type_Decl :=
       Internal_Entity_Type_Decl'(Node => Self, Info => E_Info);
      --# bind entity Ent

   

   --# bind origin Origin

   Property_Result : Internal_Entity_Decl;

      
            procedure Finalizer_Scope_588 with Inline_Always;

      Var_Expr_39 : Internal_Entity_Type_Decl;
Var_Expr_40 : Internal_Entity_Type_Decl;
Var_Expr_41 : Internal_Entity_Decl;
Fld : Internal_Entity_Type_Decl;
Fld_1 : Lexical_Env := Empty_Env;
Cast_Expr : Internal_Entity;
Cast_Result : Internal_Entity_Fun_Decl;
Fld_2 : Symbol_Type;
Env_Get_Result : Internal_Entity;
Scope_Result : Internal_Entity;
Result_Var : Internal_Entity;
Scope_Result_1 : Internal_Entity;
Result_Var_1 : Internal_Entity;
Cast_Result_1 : Internal_Entity_Decl;
Fld_3 : Internal_Entity_Decl;
Scope_Result_2 : Internal_Entity_Decl;
Result_Var_2 : Internal_Entity_Decl;

            procedure Finalizer_Scope_588 is
            begin
                     Dec_Ref (Fld_1);
            end Finalizer_Scope_588;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         


--# expr-start 1171 '<Cast to Decl at nodes.lkt:2005:9>' Cast_Result_1 nodes.lkt:2005









Var_Expr_39 := Ent;





if Var_Expr_39 /= No_Entity_Type_Decl then
   



   --# scope-start


   




--# expr-start 1166 '<FieldAccess for base_type_if_entity at nodes.lkt:2005:9>' Fld nodes.lkt:2005







   if Var_Expr_39.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start TypeDecl.base_type_if_entity
Fld := Liblktlang.Implementation.Type_Decl_P_Base_Type_If_Entity (Node => Var_Expr_39.Node, E_Info => Var_Expr_39.Info);
--# end
--# expr-done 1166
Var_Expr_40 := Fld;





if Var_Expr_40 /= No_Entity_Type_Decl then
   



   --# scope-start


   

--# expr-start 1170 '<EnvGet at nodes.lkt:2005:9>' Env_Get_Result nodes.lkt:2005
--# expr-start 1167 '<FieldAccess for defined_scope at nodes.lkt:2005:9>' Fld_1 nodes.lkt:2005







   if Var_Expr_40.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]Decl.defined_scope'
Fld_1 := Liblktlang.Implementation.Dispatcher_Decl_P_Defined_Scope (Node => Var_Expr_40.Node, Origin => Origin, E_Info => Var_Expr_40.Info);
--# end
--# expr-done 1167
--# expr-start 1169 '<FieldAccess for name at nodes.lkt:2006:13>' Fld_2 nodes.lkt:2006



--# expr-start 1168 '<Cast to FunDecl at nodes.lkt:2006:13>' Cast_Result nodes.lkt:2006






Cast_Expr := Origin; 



   if Cast_Expr.Node = null
      or else Cast_Expr.Node.Kind in Lkt_Fun_Decl_Range
   then
      
      Cast_Result := Create_Internal_Entity_Fun_Decl
        (Node => Cast_Expr.Node,
         Info => Cast_Expr.Info);

   else
         Cast_Result := No_Entity_Fun_Decl;
   end if;


--# expr-done 1168



   if Cast_Result.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]Decl.name'
Fld_2 := Liblktlang.Implementation.Dispatcher_Decl_P_Name (Node => Cast_Result.Node);
--# end
--# expr-done 1169


Env_Get_Result := AST_Envs.Get_First (Self => Fld_1, Key => Thin (Fld_2), Lookup_Kind => To_Lookup_Kind_Type (Flat), Categories => (Nocat => True)); 
--# expr-done 1170
Scope_Result := Env_Get_Result;


   --# end
      Finalizer_Scope_588;


   Result_Var := Scope_Result;
else
   
   Result_Var := No_Entity;
end if;



Scope_Result_1 := Result_Var;


   --# end


   Result_Var_1 := Scope_Result_1;
else
   
   Result_Var_1 := No_Entity;
end if;






   if Result_Var_1.Node = null
      or else Result_Var_1.Node.Kind in Lkt_Decl
   then
      
      Cast_Result_1 := Create_Internal_Entity_Decl
        (Node => Result_Var_1.Node,
         Info => Result_Var_1.Info);

   else
         Cast_Result_1 := No_Entity_Decl;
   end if;


--# expr-done 1171
Var_Expr_41 := Cast_Result_1;





if Var_Expr_41 /= No_Entity_Decl then
   



   --# scope-start


   

--# expr-start 1172 '<FieldAccess for subdecl_if_generic at nodes.lkt:2005:9>' Fld_3 nodes.lkt:2005







   if Var_Expr_41.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start Decl.subdecl_if_generic
Fld_3 := Liblktlang.Implementation.Decl_P_Subdecl_If_Generic (Node => Var_Expr_41.Node, E_Info => Var_Expr_41.Info);
--# end
--# expr-done 1172
Scope_Result_2 := Fld_3;


   --# end


   Result_Var_2 := Scope_Result_2;
else
   
   Result_Var_2 := No_Entity_Decl;
end if;




         Property_Result := Result_Var_2;
         
   --# end


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_588;




            raise;
      end;



   return Property_Result;
end Type_Decl_P_Get_Super_Of_Parent;
--# end

   







--# property-start TypeDecl.basic_trait_from_self nodes.lkt:2014
pragma Warnings (Off, "is not referenced");
 function Type_Decl_P_Basic_Trait_From_Self
  
  (Node : Bare_Type_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Internal_Entity_Type_Decl
is
   Self : Bare_Type_Decl  := Bare_Type_Decl (Node);
     Ent : Internal_Entity_Type_Decl :=
       Internal_Entity_Type_Decl'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Internal_Entity_Type_Decl;

      
            procedure Finalizer_Scope_187 with Inline_Always;

      Fld : Internal_Entity_Trait_Decl;
Array_Lit : Internal_Entity_Type_Decl_Array_Access;
Fld_1 : Internal_Entity_Decl;
Cast_Result : Internal_Entity_Type_Decl;

            procedure Finalizer_Scope_187 is
            begin
                     Dec_Ref (Array_Lit);
            end Finalizer_Scope_187;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 1176 '<Cast to TypeDecl at nodes.lkt:2015:9>' Cast_Result nodes.lkt:2015





--# expr-start 1175 '<FieldAccess for instantiate_generic_decl at nodes.lkt:2015:9>' Fld_1 nodes.lkt:2015



--# expr-start 1173 '<FieldAccess for basic_trait at nodes.lkt:2015:9>' Fld nodes.lkt:2015







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start LktNode.basic_trait
Fld := Liblktlang.Implementation.Lkt_Node_P_Basic_Trait (Node => Ent.Node);
--# end
--# expr-done 1173



   if Fld.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# expr-start 1174 '<ArrayLiteral at nodes.lkt:2015:53>' Array_Lit nodes.lkt:2015

Array_Lit := Create_Internal_Entity_Type_Decl_Array (Internal_Internal_Entity_Type_Decl_Array'(1 => Ent)); 
--# expr-done 1174
--# property-call-start Decl.instantiate_generic_decl
Fld_1 := Liblktlang.Implementation.Decl_P_Instantiate_Generic_Decl (Node => Fld.Node, Type_Params => Array_Lit, E_Info => Fld.Info);
--# end
--# expr-done 1175



   if Fld_1.Node = null
      or else Fld_1.Node.Kind in Lkt_Type_Decl
   then
      
      Cast_Result := Create_Internal_Entity_Type_Decl
        (Node => Fld_1.Node,
         Info => Fld_1.Info);

   else
         Cast_Result := No_Entity_Type_Decl;
   end if;


--# expr-done 1176

         Property_Result := Cast_Result;
         
   --# end
      Finalizer_Scope_187;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_187;




            raise;
      end;



   return Property_Result;
end Type_Decl_P_Basic_Trait_From_Self;
--# end

   







--# property-start TypeDecl.find_types_that_replace_ty nodes.lkt:2026
pragma Warnings (Off, "is not referenced");
 function Type_Decl_P_Find_Types_That_Replace_Ty
  
  (Node : Bare_Type_Decl
      ; Ty : Internal_Entity_Type_Decl
      ; Origin : Internal_Entity_Type_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Internal_Entity_Type_Decl_Array_Access
is
   Self : Bare_Type_Decl  := Bare_Type_Decl (Node);
     Ent : Internal_Entity_Type_Decl :=
       Internal_Entity_Type_Decl'(Node => Self, Info => E_Info);
      --# bind entity Ent

   

   --# bind ty Ty
   --# bind origin Origin

   Property_Result : Internal_Entity_Type_Decl_Array_Access;

      
            procedure Finalizer_Scope_188 with Inline_Always;
            procedure Finalizer_Scope_590 with Inline_Always;
            procedure Finalizer_Scope_591 with Inline_Always;
            procedure Finalizer_Scope_592 with Inline_Always;
            procedure Finalizer_Scope_593 with Inline_Always;
            procedure Finalizer_Scope_594 with Inline_Always;
            procedure Finalizer_Scope_595 with Inline_Always;
            procedure Finalizer_Scope_596 with Inline_Always;
            procedure Finalizer_Scope_597 with Inline_Always;

      Var_Expr_0 : Internal_Entity_Function_Type;
Var_Expr_1 : Internal_Entity_Type_Decl_Array_Access;
Var_Expr_2 : Internal_Entity_Function_Type;
Var_Expr_5 : Internal_Entity_Generic_Decl;
Var_Expr_6 : Internal_Entity_Generic_Decl;
Var_Expr_42 : Internal_Entity_Type_Decl;
Array_Lit : Internal_Entity_Type_Decl_Array_Access;
Cast_Expr : Internal_Entity_Type_Decl;
Cast_Result : Internal_Entity_Function_Type;
Fld : Internal_Entity_Type_Decl_Array_Access;
Fld_1 : Internal_Entity_Type_Decl;
Array_Lit_1 : Internal_Entity_Type_Decl_Array_Access;
Concat_Result : Internal_Entity_Type_Decl_Array_Access;
Cast_Expr_1 : Internal_Entity_Type_Decl;
Cast_Result_1 : Internal_Entity_Function_Type;
Fld_2 : Internal_Entity_Type_Decl_Array_Access;
Fld_3 : Internal_Entity_Type_Decl;
Array_Lit_2 : Internal_Entity_Type_Decl_Array_Access;
Concat_Result_1 : Internal_Entity_Type_Decl_Array_Access;
Index_4 : Integer;
Get_Result : Internal_Entity_Type_Decl;
Fld_4 : Internal_Entity_Type_Decl_Array_Access;
Scope_Result : Internal_Entity_Type_Decl_Array_Access;
Result_Var : Internal_Entity_Type_Decl_Array_Access;
Map_Result : Internal_Entity_Type_Decl_Array_Access;
Scope_Result_1 : Internal_Entity_Type_Decl_Array_Access;
Result_Var_1 : Internal_Entity_Type_Decl_Array_Access;
Scope_Result_2 : Internal_Entity_Type_Decl_Array_Access;
Result_Var_2 : Internal_Entity_Type_Decl_Array_Access;
Scope_Result_3 : Internal_Entity_Type_Decl_Array_Access;
Fld_5 : Internal_Entity;
Cast_Result_2 : Internal_Entity_Generic_Decl;
Fld_6 : Internal_Entity;
Cast_Result_3 : Internal_Entity_Generic_Decl;
Fld_7 : Internal_Entity_Type_Decl_Array_Access;
Index_8 : Integer;
Fld_8 : Internal_Entity_Type_Decl_Array_Access;
Get_Result_1 : Internal_Entity_Type_Decl;
Fld_9 : Internal_Entity_Type_Decl_Array_Access;
Map_Result_1 : Internal_Entity_Type_Decl_Array_Access;
Scope_Result_4 : Internal_Entity_Type_Decl_Array_Access;
Result_Var_3 : Internal_Entity_Type_Decl_Array_Access;
Scope_Result_5 : Internal_Entity_Type_Decl_Array_Access;
Result_Var_4 : Internal_Entity_Type_Decl_Array_Access;
Result_Var_5 : Internal_Entity_Type_Decl_Array_Access;
Cast_Expr_2 : Internal_Entity_Type_Decl;
Cast_Result_4 : Internal_Entity;
Cast_Expr_3 : Internal_Entity_Type_Decl;
Cast_Result_5 : Internal_Entity;
Is_Equiv : Boolean;
Is_A : Boolean;
Not_Val : Boolean;
If_Result : Boolean;
If_Result_1 : Internal_Entity_Type_Decl_Array_Access;

            procedure Finalizer_Scope_188 is
            begin
                     Dec_Ref (Array_Lit);
                     Dec_Ref (Scope_Result_3);
                     Dec_Ref (Scope_Result_5);
                     Dec_Ref (Result_Var_4);
                     Dec_Ref (Result_Var_5);
                     Dec_Ref (If_Result_1);
            end Finalizer_Scope_188;
            procedure Finalizer_Scope_590 is
            begin
                     Dec_Ref (Fld);
                     Dec_Ref (Array_Lit_1);
                     Dec_Ref (Concat_Result);
                     Dec_Ref (Scope_Result_2);
                     Dec_Ref (Result_Var_2);
            end Finalizer_Scope_590;
            procedure Finalizer_Scope_591 is
            begin
                     Dec_Ref (Var_Expr_1);
                     Dec_Ref (Scope_Result_1);
                     Dec_Ref (Result_Var_1);
            end Finalizer_Scope_591;
            procedure Finalizer_Scope_592 is
            begin
                     Dec_Ref (Fld_2);
                     Dec_Ref (Array_Lit_2);
                     Dec_Ref (Concat_Result_1);
                     Dec_Ref (Map_Result);
            end Finalizer_Scope_592;
            procedure Finalizer_Scope_593 is
            begin
                     Dec_Ref (Scope_Result);
                     Dec_Ref (Result_Var);
            end Finalizer_Scope_593;
            procedure Finalizer_Scope_594 is
            begin
                     Dec_Ref (Fld_4);
            end Finalizer_Scope_594;
            procedure Finalizer_Scope_595 is
            begin
                     Dec_Ref (Scope_Result_4);
                     Dec_Ref (Result_Var_3);
            end Finalizer_Scope_595;
            procedure Finalizer_Scope_596 is
            begin
                     Dec_Ref (Fld_7);
                     Dec_Ref (Map_Result_1);
            end Finalizer_Scope_596;
            procedure Finalizer_Scope_597 is
            begin
                     Dec_Ref (Fld_8);
                     Dec_Ref (Fld_9);
            end Finalizer_Scope_597;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 1202 '<If at nodes.lkt:2030:9>' If_Result_1 nodes.lkt:2030



--# expr-start 1180 '<BooleanBinaryOp And at nodes.lkt:2030:12>' If_Result nodes.lkt:2030



--# expr-start 1177 '<Eq at nodes.lkt:2030:12>' Is_Equiv nodes.lkt:2030






Cast_Expr_2 := Origin; 



   
      Cast_Result_4 := Create_Internal_Entity
        (Node => Cast_Expr_2.Node,
         Info => Cast_Expr_2.Info);








Cast_Expr_3 := Ty; 



   
      Cast_Result_5 := Create_Internal_Entity
        (Node => Cast_Expr_3.Node,
         Info => Cast_Expr_3.Info);


Is_Equiv := Equivalent (Cast_Result_4, Cast_Result_5); 
--# expr-done 1177
if Is_Equiv then
   --# expr-start 1179 '<Not at nodes.lkt:2030:29>' Not_Val nodes.lkt:2030
--# expr-start 1178 '<IsA AnyTypeDecl at nodes.lkt:2030:33>' Is_A nodes.lkt:2030

Is_A := Ent.Node /= null 
and then Ent.Node.Kind in Lkt_Any_Type_Decl_Range; 
--# expr-done 1178
Not_Val := not (Is_A); 
--# expr-done 1179
   If_Result := Not_Val;
else
   
   If_Result := False;
end if;



--# expr-done 1180
if If_Result then
   --# expr-start 1181 '<ArrayLiteral at nodes.lkt:2033:13>' Array_Lit nodes.lkt:2033

Array_Lit := Create_Internal_Entity_Type_Decl_Array (Internal_Internal_Entity_Type_Decl_Array'(1 => Ent)); 
--# expr-done 1181
   If_Result_1 := Array_Lit;
else
   


--# expr-start 1182 '<Cast to FunctionType at nodes.lkt:2037:13>' Cast_Result nodes.lkt:2037






Cast_Expr := Ent; 



   if Cast_Expr.Node = null
      or else Cast_Expr.Node.Kind in Lkt_Function_Type_Range
   then
      
      Cast_Result := Create_Internal_Entity_Function_Type
        (Node => Cast_Expr.Node,
         Info => Cast_Expr.Info);

   else
         Cast_Result := No_Entity_Function_Type;
   end if;


--# expr-done 1182
Var_Expr_0 := Cast_Result;





if Var_Expr_0 /= No_Entity_Function_Type then
   



   --# scope-start


   --# bind ft Var_Expr_0




--# expr-start 1183 '<FieldAccess for args at nodes.lkt:2039:18>' Fld nodes.lkt:2039







   if Var_Expr_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Var_Expr_0.Node.Function_Type_Args;
Inc_Ref (Fld);
--# expr-done 1183
--# expr-start 1185 '<ArrayLiteral at nodes.lkt:2039:28>' Array_Lit_1 nodes.lkt:2039
--# expr-start 1184 '<FieldAccess for return_type at nodes.lkt:2039:29>' Fld_1 nodes.lkt:2039







   if Var_Expr_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_1 := Var_Expr_0.Node.Function_Type_Return_Type;
--# expr-done 1184
Array_Lit_1 := Create_Internal_Entity_Type_Decl_Array (Internal_Internal_Entity_Type_Decl_Array'(1 => Fld_1)); 
--# expr-done 1185
Concat_Result := Concat (Fld, Array_Lit_1); 
Var_Expr_1 := Concat_Result;

      Inc_Ref (Var_Expr_1);




if Var_Expr_1 /= No_Internal_Entity_Type_Decl_Array_Type then
   



   --# scope-start


   --# bind lhs_types Var_Expr_1




--# expr-start 1186 '<Cast to FunctionType at nodes.lkt:2041:21>' Cast_Result_1 nodes.lkt:2041






Cast_Expr_1 := Origin; 



   if Cast_Expr_1.Node = null
      or else Cast_Expr_1.Node.Kind in Lkt_Function_Type_Range
   then
      
      Cast_Result_1 := Create_Internal_Entity_Function_Type
        (Node => Cast_Expr_1.Node,
         Info => Cast_Expr_1.Info);

   else
         Cast_Result_1 := No_Entity_Function_Type;
   end if;


--# expr-done 1186
Var_Expr_2 := Cast_Result_1;





if Var_Expr_2 /= No_Entity_Function_Type then
   



   --# scope-start


   --# bind oft Var_Expr_2

--# expr-start 1192 '<Mapcat at nodes.lkt:2043:25>' Map_Result nodes.lkt:2043








   

   --# expr-start 1187 '<FieldAccess for args at nodes.lkt:2043:26>' Fld_2 nodes.lkt:2043







   if Var_Expr_2.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_2 := Var_Expr_2.Node.Function_Type_Args;
Inc_Ref (Fld_2);
--# expr-done 1187
--# expr-start 1189 '<ArrayLiteral at nodes.lkt:2043:37>' Array_Lit_2 nodes.lkt:2043
--# expr-start 1188 '<FieldAccess for return_type at nodes.lkt:2043:38>' Fld_3 nodes.lkt:2043







   if Var_Expr_2.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_3 := Var_Expr_2.Node.Function_Type_Return_Type;
--# expr-done 1188
Array_Lit_2 := Create_Internal_Entity_Type_Decl_Array (Internal_Internal_Entity_Type_Decl_Array'(1 => Fld_3)); 
--# expr-done 1189
Concat_Result_1 := Concat (Fld_2, Array_Lit_2); 

   
      declare
         Map_Result_Vec : Internal_Entity_Type_Decl_Vectors.Vector;
      begin
   

   

      
         Index_4 := 0;

      declare
         
         Collection : constant Internal_Entity_Type_Decl_Array_Access := Concat_Result_1;
      begin
         for Item_3 of
               Collection.Items
         loop

            
   --# scope-start


               --# bind ot Item_3
               --# bind idx Index_4

            
         
         
      


--# expr-start 1190 '<at at nodes.lkt:2045:29>' Get_Result nodes.lkt:2045




Get_Result := Get (Self, Var_Expr_1, Index_4, True); 
--# expr-done 1190
Var_Expr_42 := Get_Result;





if Var_Expr_42 /= No_Entity_Type_Decl then
   



   --# scope-start


   

--# expr-start 1191 '<FieldAccess for find_types_that_replace_ty at nodes.lkt:2045:29>' Fld_4 nodes.lkt:2045







   if Var_Expr_42.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;




--# property-call-start TypeDecl.find_types_that_replace_ty
Fld_4 := Liblktlang.Implementation.Type_Decl_P_Find_Types_That_Replace_Ty (Node => Var_Expr_42.Node, Ty => Ty, Origin => Item_3, E_Info => Var_Expr_42.Info);
--# end
--# expr-done 1191
Scope_Result := Fld_4;
   Inc_Ref (Scope_Result);


   --# end
      Finalizer_Scope_594;


   Result_Var := Scope_Result;
else
   
   Result_Var := No_Internal_Entity_Type_Decl_Array_Type;
end if;

      Inc_Ref (Result_Var);


      

         for Item_To_Append of
               Result_Var.Items
         loop
            Internal_Entity_Type_Decl_Vectors.Append (Map_Result_Vec, Item_To_Append);
         end loop;

   
   
   

            
   --# end
      Finalizer_Scope_593;



               Index_4 := Index_4 + 1;
         end loop;
      end;
   

   

         Map_Result := Create_Internal_Entity_Type_Decl_Array
           (Items_Count => Natural (Internal_Entity_Type_Decl_Vectors.Length (Map_Result_Vec)));
         for I in Map_Result.Items'Range loop
            Map_Result.Items (I) := Internal_Entity_Type_Decl_Vectors.Get
              (Map_Result_Vec,
               I + Internal_Entity_Type_Decl_Vectors.Index_Type'First - Map_Result.Items'First);
         end loop;
         Internal_Entity_Type_Decl_Vectors.Destroy (Map_Result_Vec);

      end;
   



--# expr-done 1192
Scope_Result_1 := Map_Result;
   Inc_Ref (Scope_Result_1);


   --# end
      Finalizer_Scope_592;


   Result_Var_1 := Scope_Result_1;
else
   
   Result_Var_1 := No_Internal_Entity_Type_Decl_Array_Type;
end if;

      Inc_Ref (Result_Var_1);


Scope_Result_2 := Result_Var_1;
   Inc_Ref (Scope_Result_2);


   --# end
      Finalizer_Scope_591;


   Result_Var_2 := Scope_Result_2;
else
   
   Result_Var_2 := No_Internal_Entity_Type_Decl_Array_Type;
end if;

      Inc_Ref (Result_Var_2);


Scope_Result_3 := Result_Var_2;
   Inc_Ref (Scope_Result_3);


   --# end
      Finalizer_Scope_590;


   Result_Var_5 := Scope_Result_3;
else
   


--# expr-start 1194 '<Cast to GenericDecl at nodes.lkt:2050:29>' Cast_Result_2 nodes.lkt:2050





--# expr-start 1193 '<parent at nodes.lkt:2050:29>' Fld_5 nodes.lkt:2050







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_5 := Liblktlang.Implementation.Parent (Node => Ent.Node, E_Info => Ent.Info);
--# expr-done 1193



   if Fld_5.Node = null
      or else Fld_5.Node.Kind in Lkt_Generic_Decl_Range
   then
      
      Cast_Result_2 := Create_Internal_Entity_Generic_Decl
        (Node => Fld_5.Node,
         Info => Fld_5.Info);

   else
         Cast_Result_2 := No_Entity_Generic_Decl;
   end if;


--# expr-done 1194
Var_Expr_5 := Cast_Result_2;





if Var_Expr_5 /= No_Entity_Generic_Decl then
   



   --# scope-start


   --# bind gd Var_Expr_5




--# expr-start 1196 '<Cast to GenericDecl at nodes.lkt:2052:21>' Cast_Result_3 nodes.lkt:2052





--# expr-start 1195 '<parent at nodes.lkt:2052:21>' Fld_6 nodes.lkt:2052







   if Origin.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_6 := Liblktlang.Implementation.Parent (Node => Origin.Node, E_Info => Origin.Info);
--# expr-done 1195



   if Fld_6.Node = null
      or else Fld_6.Node.Kind in Lkt_Generic_Decl_Range
   then
      
      Cast_Result_3 := Create_Internal_Entity_Generic_Decl
        (Node => Fld_6.Node,
         Info => Fld_6.Info);

   else
         Cast_Result_3 := No_Entity_Generic_Decl;
   end if;


--# expr-done 1196
Var_Expr_6 := Cast_Result_3;





if Var_Expr_6 /= No_Entity_Generic_Decl then
   



   --# scope-start


   --# bind ogd Var_Expr_6

--# expr-start 1201 '<Mapcat at nodes.lkt:2054:25>' Map_Result_1 nodes.lkt:2054








   

   --# expr-start 1197 '<FieldAccess for instantiated_generic_formals at nodes.lkt:2054:25>' Fld_7 nodes.lkt:2054







   if Var_Expr_5.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start GenericDecl.instantiated_generic_formals
Fld_7 := Liblktlang.Implementation.Generic_Decl_P_Instantiated_Generic_Formals (Node => Var_Expr_5.Node, E_Info => Var_Expr_5.Info);
--# end
--# expr-done 1197

   
      declare
         Map_Result_1_Vec : Internal_Entity_Type_Decl_Vectors.Vector;
      begin
   

   

      
         Index_8 := 0;

      declare
         
         Collection : constant Internal_Entity_Type_Decl_Array_Access := Fld_7;
      begin
         for Item_7 of
               Collection.Items
         loop

            
   --# scope-start


               --# bind t Item_7
               --# bind i Index_8

            
         
         
      --# expr-start 1200 '<FieldAccess for find_types_that_replace_ty at nodes.lkt:2056:29>' Fld_9 nodes.lkt:2056







   if Item_7.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;



--# expr-start 1199 '<at at nodes.lkt:2058:33>' Get_Result_1 nodes.lkt:2058

--# expr-start 1198 '<FieldAccess for instantiated_generic_formals at nodes.lkt:2058:33>' Fld_8 nodes.lkt:2058







   if Var_Expr_6.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start GenericDecl.instantiated_generic_formals
Fld_8 := Liblktlang.Implementation.Generic_Decl_P_Instantiated_Generic_Formals (Node => Var_Expr_6.Node, E_Info => Var_Expr_6.Info);
--# end
--# expr-done 1198


Get_Result_1 := Get (Self, Fld_8, Index_8, True); 
--# expr-done 1199
--# property-call-start TypeDecl.find_types_that_replace_ty
Fld_9 := Liblktlang.Implementation.Type_Decl_P_Find_Types_That_Replace_Ty (Node => Item_7.Node, Ty => Ty, Origin => Get_Result_1, E_Info => Item_7.Info);
--# end
--# expr-done 1200
      

         for Item_To_Append of
               Fld_9.Items
         loop
            Internal_Entity_Type_Decl_Vectors.Append (Map_Result_1_Vec, Item_To_Append);
         end loop;

   
   
   

            
   --# end
      Finalizer_Scope_597;



               Index_8 := Index_8 + 1;
         end loop;
      end;
   

   

         Map_Result_1 := Create_Internal_Entity_Type_Decl_Array
           (Items_Count => Natural (Internal_Entity_Type_Decl_Vectors.Length (Map_Result_1_Vec)));
         for I in Map_Result_1.Items'Range loop
            Map_Result_1.Items (I) := Internal_Entity_Type_Decl_Vectors.Get
              (Map_Result_1_Vec,
               I + Internal_Entity_Type_Decl_Vectors.Index_Type'First - Map_Result_1.Items'First);
         end loop;
         Internal_Entity_Type_Decl_Vectors.Destroy (Map_Result_1_Vec);

      end;
   



--# expr-done 1201
Scope_Result_4 := Map_Result_1;
   Inc_Ref (Scope_Result_4);


   --# end
      Finalizer_Scope_596;


   Result_Var_3 := Scope_Result_4;
else
   
   Result_Var_3 := No_Internal_Entity_Type_Decl_Array_Type;
end if;

      Inc_Ref (Result_Var_3);


Scope_Result_5 := Result_Var_3;
   Inc_Ref (Scope_Result_5);


   --# end
      Finalizer_Scope_595;


   Result_Var_4 := Scope_Result_5;
else
   
   Result_Var_4 := No_Internal_Entity_Type_Decl_Array_Type;
end if;

      Inc_Ref (Result_Var_4);


   Result_Var_5 := Result_Var_4;
end if;

      Inc_Ref (Result_Var_5);


   If_Result_1 := Result_Var_5;
end if;

      Inc_Ref (If_Result_1);


--# expr-done 1202

         Property_Result := If_Result_1;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_188;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_188;
                     Finalizer_Scope_590;
                     Finalizer_Scope_591;
                     Finalizer_Scope_592;
                     Finalizer_Scope_593;
                     Finalizer_Scope_594;
                     Finalizer_Scope_595;
                     Finalizer_Scope_596;
                     Finalizer_Scope_597;




            raise;
      end;



   return Property_Result;
end Type_Decl_P_Find_Types_That_Replace_Ty;
--# end

   







--# property-start TypeDecl.as_node_builder_type nodes.lkt:2069
pragma Warnings (Off, "is not referenced");
 function Type_Decl_P_As_Node_Builder_Type
  
  (Node : Bare_Type_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Internal_Entity_Type_Decl
is
   Self : Bare_Type_Decl  := Bare_Type_Decl (Node);
     Ent : Internal_Entity_Type_Decl :=
       Internal_Entity_Type_Decl'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Internal_Entity_Type_Decl;

      
            procedure Finalizer_Scope_598 with Inline_Always;

      Var_Expr_0 : Internal_Entity_Class_Decl;
Cast_Expr : Internal_Entity_Type_Decl;
Cast_Result : Internal_Entity_Class_Decl;
Fld : Internal_Entity_Named_Type_Decl;
Array_Lit : Internal_Entity_Type_Decl_Array_Access;
Fld_1 : Internal_Entity_Decl;
Scope_Result : Internal_Entity_Decl;
Cast_Expr_1 : Internal_Entity_Type_Decl;
Cast_Result_1 : Internal_Entity_Decl;
Result_Var : Internal_Entity_Decl;
Cast_Result_2 : Internal_Entity_Type_Decl;

            procedure Finalizer_Scope_598 is
            begin
                     Dec_Ref (Array_Lit);
            end Finalizer_Scope_598;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 1207 '<Cast to TypeDecl at nodes.lkt:2070:9>' Cast_Result_2 nodes.lkt:2070








--# expr-start 1203 '<Cast to ClassDecl at nodes.lkt:2070:9>' Cast_Result nodes.lkt:2070






Cast_Expr := Ent; 



   if Cast_Expr.Node = null
      or else Cast_Expr.Node.Kind in Lkt_Class_Decl_Range
   then
      
      Cast_Result := Create_Internal_Entity_Class_Decl
        (Node => Cast_Expr.Node,
         Info => Cast_Expr.Info);

   else
         Cast_Result := No_Entity_Class_Decl;
   end if;


--# expr-done 1203
Var_Expr_0 := Cast_Result;





if Var_Expr_0 /= No_Entity_Class_Decl then
   



   --# scope-start


   --# bind _ Var_Expr_0

--# expr-start 1206 '<FieldAccess for instantiate_generic_decl at nodes.lkt:2071:20>' Fld_1 nodes.lkt:2071



--# expr-start 1204 '<FieldAccess for node_builder_type at nodes.lkt:2071:20>' Fld nodes.lkt:2071







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start LktNode.node_builder_type
Fld := Liblktlang.Implementation.Lkt_Node_P_Node_Builder_Type (Node => Ent.Node);
--# end
--# expr-done 1204



   if Fld.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# expr-start 1205 '<ArrayLiteral at nodes.lkt:2071:70>' Array_Lit nodes.lkt:2071

Array_Lit := Create_Internal_Entity_Type_Decl_Array (Internal_Internal_Entity_Type_Decl_Array'(1 => Ent)); 
--# expr-done 1205
--# property-call-start Decl.instantiate_generic_decl
Fld_1 := Liblktlang.Implementation.Decl_P_Instantiate_Generic_Decl (Node => Fld.Node, Type_Params => Array_Lit, E_Info => Fld.Info);
--# end
--# expr-done 1206
Scope_Result := Fld_1;


   --# end
      Finalizer_Scope_598;


   Result_Var := Scope_Result;
else
   





Cast_Expr_1 := Ent; 



   
      Cast_Result_1 := Create_Internal_Entity_Decl
        (Node => Cast_Expr_1.Node,
         Info => Cast_Expr_1.Info);


   Result_Var := Cast_Result_1;
end if;






   if Result_Var.Node = null
      or else Result_Var.Node.Kind in Lkt_Type_Decl
   then
      
      Cast_Result_2 := Create_Internal_Entity_Type_Decl
        (Node => Result_Var.Node,
         Info => Result_Var.Info);

   else
         Cast_Result_2 := No_Entity_Type_Decl;
   end if;


--# expr-done 1207

         Property_Result := Cast_Result_2;
         
   --# end


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_598;




            raise;
      end;



   return Property_Result;
end Type_Decl_P_As_Node_Builder_Type;
--# end

   







--# property-start '[dispatcher]TypeDecl.base_types' dispatcher
pragma Warnings (Off, "is not referenced");
 function Dispatcher_Type_Decl_P_Base_Types
  
  (Node : Bare_Type_Decl
      ; Include_Self : Boolean
         := False
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Internal_Entity_Type_Decl_Array_Access
is
   Self : Bare_Type_Decl  := Bare_Type_Decl (Node);
     Ent : Internal_Entity_Type_Decl :=
       Internal_Entity_Type_Decl'(Node => Self, Info => E_Info);
      --# bind entity Ent

   

   --# bind include_self Include_Self

   Property_Result : Internal_Entity_Type_Decl_Array_Access;



begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      if Self = null then
         Raise_Property_Exception
           (Self, Property_Error'Identity, "dispatching on null node");
      end if;

      case Lkt_Type_Decl (Self.Kind) is
               when Lkt_Any_Type_Decl | Lkt_Function_Type .. Lkt_Trait_Decl =>
                  --# property-call-start TypeDecl.base_types
                  Property_Result := Type_Decl_P_Base_Types
                    (Self
                        , Include_Self
                        , E_Info
                    );
                  --# end
               when Lkt_Enum_Class_Alt_Decl =>
                  --# property-call-start EnumClassAltDecl.base_types
                  Property_Result := Enum_Class_Alt_Decl_P_Base_Types
                    (Self
                        , Include_Self
                        , E_Info
                    );
                  --# end
      end case;




   return Property_Result;
end Dispatcher_Type_Decl_P_Base_Types;
--# end

   







--# property-start '[dispatcher]TypeDecl.is_subtype' dispatcher
pragma Warnings (Off, "is not referenced");
 function Dispatcher_Type_Decl_P_Is_Subtype
  
  (Node : Bare_Type_Decl
      ; Other : Internal_Entity_Type_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Boolean
is
   Self : Bare_Type_Decl  := Bare_Type_Decl (Node);
      --# bind self Self

   

   --# bind other Other

   Property_Result : Boolean;



begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      if Self = null then
         Raise_Property_Exception
           (Self, Property_Error'Identity, "dispatching on null node");
      end if;

      case Lkt_Type_Decl (Self.Kind) is
               when Lkt_Any_Type_Decl | Lkt_Function_Type .. Lkt_Generic_Formal_Type_Decl | Lkt_Enum_Type_Decl .. Lkt_Trait_Decl =>
                  --# property-call-start TypeDecl.is_subtype
                  Property_Result := Type_Decl_P_Is_Subtype
                    (Self
                        , Other
                        , E_Info
                    );
                  --# end
               when Lkt_Enum_Class_Alt_Decl =>
                  --# property-call-start EnumClassAltDecl.is_subtype
                  Property_Result := Enum_Class_Alt_Decl_P_Is_Subtype
                    (Self
                        , Other
                        , E_Info
                    );
                  --# end
               when Lkt_Class_Decl .. Lkt_Enum_Class_Decl =>
                  --# property-call-start BasicClassDecl.is_subtype
                  Property_Result := Basic_Class_Decl_P_Is_Subtype
                    (Self
                        , Other
                        , E_Info
                    );
                  --# end
      end case;




   return Property_Result;
end Dispatcher_Type_Decl_P_Is_Subtype;
--# end

   







--# property-start '[dispatcher]TypeDecl.common_ancestor' dispatcher
pragma Warnings (Off, "is not referenced");
 function Dispatcher_Type_Decl_P_Common_Ancestor
  
  (Node : Bare_Type_Decl
      ; Other : Internal_Entity_Type_Decl
      ; Imprecise : Boolean
         := False
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Internal_Entity_Type_Decl
is
   Self : Bare_Type_Decl  := Bare_Type_Decl (Node);
     Ent : Internal_Entity_Type_Decl :=
       Internal_Entity_Type_Decl'(Node => Self, Info => E_Info);
      --# bind entity Ent

   

   --# bind other Other
   --# bind imprecise Imprecise

   Property_Result : Internal_Entity_Type_Decl;



begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      if Self = null then
         Raise_Property_Exception
           (Self, Property_Error'Identity, "dispatching on null node");
      end if;

      case Lkt_Type_Decl (Self.Kind) is
               when Lkt_Any_Type_Decl .. Lkt_Generic_Formal_Type_Decl | Lkt_Enum_Type_Decl .. Lkt_Trait_Decl =>
                  --# property-call-start TypeDecl.common_ancestor
                  Property_Result := Type_Decl_P_Common_Ancestor
                    (Self
                        , Other
                        , Imprecise
                        , E_Info
                    );
                  --# end
               when Lkt_Class_Decl .. Lkt_Enum_Class_Decl =>
                  --# property-call-start BasicClassDecl.common_ancestor
                  Property_Result := Basic_Class_Decl_P_Common_Ancestor
                    (Self
                        , Other
                        , Imprecise
                        , E_Info
                    );
                  --# end
      end case;




   return Property_Result;
end Dispatcher_Type_Decl_P_Common_Ancestor;
--# end

   







--# property-start '[dispatcher]TypeDecl.node_builder_scope' dispatcher
pragma Warnings (Off, "is not referenced");
 function Dispatcher_Type_Decl_P_Node_Builder_Scope
  
  (Node : Bare_Type_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Lexical_Env
is
   Self : Bare_Type_Decl  := Bare_Type_Decl (Node);
      --# bind self Self

   


   Property_Result : Lexical_Env;



begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      if Self = null then
         Raise_Property_Exception
           (Self, Property_Error'Identity, "dispatching on null node");
      end if;

      case Lkt_Type_Decl (Self.Kind) is
               when Lkt_Any_Type_Decl .. Lkt_Generic_Formal_Type_Decl | Lkt_Enum_Class_Decl .. Lkt_Trait_Decl =>
                  --# property-call-start TypeDecl.node_builder_scope
                  Property_Result := Type_Decl_P_Node_Builder_Scope
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Class_Decl =>
                  --# property-call-start ClassDecl.node_builder_scope
                  Property_Result := Class_Decl_P_Node_Builder_Scope
                    (Self
                        , E_Info
                    );
                  --# end
      end case;




   return Property_Result;
end Dispatcher_Type_Decl_P_Node_Builder_Scope;
--# end

   







--# property-start TypeDecl.base_types nodes.lkt:2077
pragma Warnings (Off, "is not referenced");
 function Type_Decl_P_Base_Types
  
  (Node : Bare_Type_Decl
      ; Include_Self : Boolean
         := False
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Internal_Entity_Type_Decl_Array_Access
is
   Self : Bare_Type_Decl  := Bare_Type_Decl (Node);
     Ent : Internal_Entity_Type_Decl :=
       Internal_Entity_Type_Decl'(Node => Self, Info => E_Info);
      --# bind entity Ent

   

   --# bind include_self Include_Self

   Property_Result : Internal_Entity_Type_Decl_Array_Access;

      
            procedure Finalizer_Scope_190 with Inline_Always;
            procedure Finalizer_Scope_599 with Inline_Always;
            procedure Finalizer_Scope_600 with Inline_Always;

      Var_Expr_0 : Internal_Entity_Type_Ref;
Var_Expr_1 : Internal_Entity_Type_Decl;
Array_Lit : Internal_Entity_Type_Decl_Array_Access;
If_Result : Internal_Entity_Type_Decl_Array_Access;
Fld : Internal_Entity_Type_Ref;
Fld_1 : Internal_Entity_Type_Decl;
Array_Lit_1 : Internal_Entity_Type_Decl_Array_Access;
Fld_2 : Internal_Entity_Type_Decl_Array_Access;
Concat_Result : Internal_Entity_Type_Decl_Array_Access;
Scope_Result : Internal_Entity_Type_Decl_Array_Access;
Result_Var : Internal_Entity_Type_Decl_Array_Access;
Scope_Result_1 : Internal_Entity_Type_Decl_Array_Access;
Result_Var_1 : Internal_Entity_Type_Decl_Array_Access;
Concat_Result_1 : Internal_Entity_Type_Decl_Array_Access;

            procedure Finalizer_Scope_190 is
            begin
                     Dec_Ref (Array_Lit);
                     Dec_Ref (If_Result);
                     Dec_Ref (Scope_Result_1);
                     Dec_Ref (Result_Var_1);
                     Dec_Ref (Concat_Result_1);
            end Finalizer_Scope_190;
            procedure Finalizer_Scope_599 is
            begin
                     Dec_Ref (Scope_Result);
                     Dec_Ref (Result_Var);
            end Finalizer_Scope_599;
            procedure Finalizer_Scope_600 is
            begin
                     Dec_Ref (Array_Lit_1);
                     Dec_Ref (Fld_2);
                     Dec_Ref (Concat_Result);
            end Finalizer_Scope_600;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 1209 '<If at nodes.lkt:2078:10>' If_Result nodes.lkt:2078




if Include_Self then
   --# expr-start 1208 '<ArrayLiteral at nodes.lkt:2078:31>' Array_Lit nodes.lkt:2078

Array_Lit := Create_Internal_Entity_Type_Decl_Array (Internal_Internal_Entity_Type_Decl_Array'(1 => Ent)); 
--# expr-done 1208
   If_Result := Array_Lit;
else
   
   If_Result := No_Internal_Entity_Type_Decl_Array_Type;
end if;

      Inc_Ref (If_Result);


--# expr-done 1209



--# expr-start 1210 '<FieldAccess for base_type at nodes.lkt:2079:11>' Fld nodes.lkt:2079







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start TypeDecl.base_type
Fld := Liblktlang.Implementation.Type_Decl_P_Base_Type (Node => Ent.Node, E_Info => Ent.Info);
--# end
--# expr-done 1210
Var_Expr_0 := Fld;





if Var_Expr_0 /= No_Entity_Type_Ref then
   



   --# scope-start


   --# bind bt Var_Expr_0




--# expr-start 1211 '<FieldAccess for referenced_decl at nodes.lkt:2080:21>' Fld_1 nodes.lkt:2080







   if Var_Expr_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start TypeRef.referenced_decl
Fld_1 := Liblktlang.Implementation.Type_Ref_P_Referenced_Decl (Node => Var_Expr_0.Node, E_Info => Var_Expr_0.Info);
--# end
--# expr-done 1211
Var_Expr_1 := Fld_1;





if Var_Expr_1 /= No_Entity_Type_Decl then
   



   --# scope-start


   --# bind b Var_Expr_1

--# expr-start 1212 '<ArrayLiteral at nodes.lkt:2080:52>' Array_Lit_1 nodes.lkt:2080

Array_Lit_1 := Create_Internal_Entity_Type_Decl_Array (Internal_Internal_Entity_Type_Decl_Array'(1 => Var_Expr_1)); 
--# expr-done 1212
--# expr-start 1213 '<FieldAccess for base_types at nodes.lkt:2080:58>' Fld_2 nodes.lkt:2080







   if Var_Expr_1.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]TypeDecl.base_types'
Fld_2 := Liblktlang.Implementation.Dispatcher_Type_Decl_P_Base_Types (Node => Var_Expr_1.Node, E_Info => Var_Expr_1.Info);
--# end
--# expr-done 1213
Concat_Result := Concat (Array_Lit_1, Fld_2); 
Scope_Result := Concat_Result;
   Inc_Ref (Scope_Result);


   --# end
      Finalizer_Scope_600;


   Result_Var := Scope_Result;
else
   
   Result_Var := No_Internal_Entity_Type_Decl_Array_Type;
end if;

      Inc_Ref (Result_Var);


Scope_Result_1 := Result_Var;
   Inc_Ref (Scope_Result_1);


   --# end
      Finalizer_Scope_599;


   Result_Var_1 := Scope_Result_1;
else
   
   Result_Var_1 := No_Internal_Entity_Type_Decl_Array_Type;
end if;

      Inc_Ref (Result_Var_1);


Concat_Result_1 := Concat (If_Result, Result_Var_1); 

         Property_Result := Concat_Result_1;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_190;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_190;
                     Finalizer_Scope_599;
                     Finalizer_Scope_600;




            raise;
      end;



   return Property_Result;
end Type_Decl_P_Base_Types;
--# end

   







--# property-start TypeDecl.is_subtype nodes.lkt:2084
pragma Warnings (Off, "is not referenced");
 function Type_Decl_P_Is_Subtype
  
  (Node : Bare_Type_Decl
      ; Other : Internal_Entity_Type_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Boolean
is
   Self : Bare_Type_Decl  := Bare_Type_Decl (Node);
      --# bind self Self

   

   --# bind other Other

   Property_Result : Boolean;

      

      



begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         

         Property_Result := False;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Type_Decl_P_Is_Subtype;
--# end

   







--# property-start TypeDecl.common_ancestor nodes.lkt:2092
pragma Warnings (Off, "is not referenced");
 function Type_Decl_P_Common_Ancestor
  
  (Node : Bare_Type_Decl
      ; Other : Internal_Entity_Type_Decl
      ; Imprecise : Boolean
         := False
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Internal_Entity_Type_Decl
is
   Self : Bare_Type_Decl  := Bare_Type_Decl (Node);
     Ent : Internal_Entity_Type_Decl :=
       Internal_Entity_Type_Decl'(Node => Self, Info => E_Info);
      --# bind entity Ent

   

   --# bind other Other
   --# bind imprecise Imprecise

   Property_Result : Internal_Entity_Type_Decl;

      

      Var_Expr_0 : Internal_Entity_Type_Decl;
Fld : Internal_Entity_Type_Decl;
Fld_1 : Internal_Entity_Type_Decl;
Fld_2 : Internal_Entity_Type_Decl;
Cast_Expr : Internal_Entity_Type_Decl;
Cast_Result : Internal_Entity;
Cast_Expr_1 : Internal_Entity_Type_Decl;
Cast_Result_1 : Internal_Entity;
Is_Equiv : Boolean;
If_Result : Internal_Entity_Type_Decl;
Fld_3 : Internal_Entity_Named_Type_Decl;
Fld_4 : Bare_Named_Type_Decl;
Cast_Result_2 : Bare_Type_Decl;
Is_Equal : Boolean;
Fld_5 : Bare_Type_Decl;
Fld_6 : Internal_Entity_Named_Type_Decl;
Fld_7 : Bare_Named_Type_Decl;
Cast_Result_3 : Bare_Type_Decl;
Is_Equal_1 : Boolean;
If_Result_1 : Boolean;
If_Result_2 : Internal_Entity_Type_Decl;
Scope_Result : Internal_Entity_Type_Decl;
Is_Null : Boolean;
If_Result_3 : Internal_Entity_Type_Decl;
If_Result_4 : Internal_Entity_Type_Decl;
Result_Var : Internal_Entity_Type_Decl;



begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         


--# expr-start 1227 '<If at nodes.lkt:2097:13>' If_Result_2 nodes.lkt:2097



--# expr-start 1221 '<BooleanBinaryOp And at nodes.lkt:2098:17>' If_Result_1 nodes.lkt:2098



--# expr-start 1216 '<Eq at nodes.lkt:2098:17>' Is_Equal nodes.lkt:2098






--# expr-start 1215 '<FieldAccess for node at nodes.lkt:2098:25>' Fld_4 nodes.lkt:2098



--# expr-start 1214 '<FieldAccess for entity_type at nodes.lkt:2098:25>' Fld_3 nodes.lkt:2098







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start LktNode.entity_type
Fld_3 := Liblktlang.Implementation.Lkt_Node_P_Entity_Type (Node => Ent.Node);
--# end
--# expr-done 1214





Fld_4 := Fld_3.Node;
--# expr-done 1215



   
      Cast_Result_2 := Fld_4;


Is_Equal := Self = Cast_Result_2; 
--# expr-done 1216
if Is_Equal then
   --# expr-start 1220 '<Eq at nodes.lkt:2099:21>' Is_Equal_1 nodes.lkt:2099
--# expr-start 1217 '<FieldAccess for node at nodes.lkt:2099:21>' Fld_5 nodes.lkt:2099









Fld_5 := Other.Node;
--# expr-done 1217





--# expr-start 1219 '<FieldAccess for node at nodes.lkt:2099:35>' Fld_7 nodes.lkt:2099



--# expr-start 1218 '<FieldAccess for entity_type at nodes.lkt:2099:35>' Fld_6 nodes.lkt:2099







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start LktNode.entity_type
Fld_6 := Liblktlang.Implementation.Lkt_Node_P_Entity_Type (Node => Ent.Node);
--# end
--# expr-done 1218





Fld_7 := Fld_6.Node;
--# expr-done 1219



   
      Cast_Result_3 := Fld_7;


Is_Equal_1 := Fld_5 = Cast_Result_3; 
--# expr-done 1220
   If_Result_1 := Is_Equal_1;
else
   
   If_Result_1 := False;
end if;



--# expr-done 1221
if If_Result_1 then
   --# expr-start 1224 '<FieldAccess for common_ancestor at nodes.lkt:2101:17>' Fld_2 nodes.lkt:2101



--# expr-start 1222 '<FieldAccess for get_entity_node_type at nodes.lkt:2101:17>' Fld nodes.lkt:2101







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start TypeDecl.get_entity_node_type
Fld := Liblktlang.Implementation.Type_Decl_P_Get_Entity_Node_Type (Node => Ent.Node, E_Info => Ent.Info);
--# end
--# expr-done 1222



   if Fld.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# expr-start 1223 '<FieldAccess for get_entity_node_type at nodes.lkt:2102:21>' Fld_1 nodes.lkt:2102







   if Other.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start TypeDecl.get_entity_node_type
Fld_1 := Liblktlang.Implementation.Type_Decl_P_Get_Entity_Node_Type (Node => Other.Node, E_Info => Other.Info);
--# end
--# expr-done 1223
--# property-call-start '[dispatcher]TypeDecl.common_ancestor'
Fld_2 := Liblktlang.Implementation.Dispatcher_Type_Decl_P_Common_Ancestor (Node => Fld.Node, Other => Fld_1, E_Info => Fld.Info);
--# end
--# expr-done 1224
   If_Result_2 := Fld_2;
else
   --# expr-start 1226 '<If at nodes.lkt:2097:13>' If_Result nodes.lkt:2097



--# expr-start 1225 '<Eq at nodes.lkt:2104:18>' Is_Equiv nodes.lkt:2104






Cast_Expr := Ent; 



   
      Cast_Result := Create_Internal_Entity
        (Node => Cast_Expr.Node,
         Info => Cast_Expr.Info);








Cast_Expr_1 := Other; 



   
      Cast_Result_1 := Create_Internal_Entity
        (Node => Cast_Expr_1.Node,
         Info => Cast_Expr_1.Info);


Is_Equiv := Equivalent (Cast_Result, Cast_Result_1); 
--# expr-done 1225
if Is_Equiv then
   
   If_Result := Ent;
else
   
   If_Result := No_Entity_Type_Decl;
end if;



--# expr-done 1226
   If_Result_2 := If_Result;
end if;



--# expr-done 1227
Var_Expr_0 := If_Result_2;





if Var_Expr_0 /= No_Entity_Type_Decl then
   



   --# scope-start


   --# bind ca Var_Expr_0


Scope_Result := Var_Expr_0;


   --# end


   Result_Var := Scope_Result;
else
   --# expr-start 1230 '<If at nodes.lkt:2109:25>' If_Result_4 nodes.lkt:2109




if Imprecise then
   --# expr-start 1229 '<If at nodes.lkt:2109:43>' If_Result_3 nodes.lkt:2109



--# expr-start 1228 '<IsNull at nodes.lkt:2109:46>' Is_Null nodes.lkt:2109

Is_Null := Ent.Node = null; 
--# expr-done 1228
if Is_Null then
   
   If_Result_3 := Other;
else
   
   If_Result_3 := Ent;
end if;



--# expr-done 1229
   If_Result_4 := If_Result_3;
else
   
   If_Result_4 := No_Entity_Type_Decl;
end if;



--# expr-done 1230
   Result_Var := If_Result_4;
end if;




         Property_Result := Result_Var;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Type_Decl_P_Common_Ancestor;
--# end

   







--# property-start TypeDecl.node_builder_scope nodes.lkt:2117
pragma Warnings (Off, "is not referenced");
 function Type_Decl_P_Node_Builder_Scope
  
  (Node : Bare_Type_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Lexical_Env
is
   Self : Bare_Type_Decl  := Bare_Type_Decl (Node);
      --# bind self Self

   


   Property_Result : Lexical_Env;

      

      


      
      Mmz_Handle : Memoization_Handle;
      Mmz_Val    : Mmz_Value;

      Mmz_Stored : Boolean;
      --  Whether the memoization couple was actually stored. Used to determine
      --  whether to inc-ref the memoized value.

      function Create_Mmz_Key return Mmz_Key;
      --  Create a memoization key for this property call and return it

      --------------------
      -- Create_Mmz_Key --
      --------------------

      function Create_Mmz_Key return Mmz_Key is
      begin
         return Mmz_K : Mmz_Key :=
           (Property => Mmz_Bare_Type_Decl_Type_Decl_P_Node_Builder_Scope,
            Items    => new Mmz_Key_Array (1 ..  2))
         do
            Mmz_K.Items (1) := (Kind => Mmz_Bare_Type_Decl,
                                As_Bare_Type_Decl => Self);
               Mmz_K.Items (2) :=
                 (Kind => Mmz_Internal_Entity_Info,
                  As_Internal_Entity_Info => E_Info);
         end return;
      end Create_Mmz_Key;

begin
   --# property-body-start

   pragma Assert (Self = Node);




      if Self /= null then

         if not Self.Unit.Context.In_Populate_Lexical_Env then

            if Find_Memoized_Value
              (Self.Unit, Mmz_Handle, Mmz_Val, Create_Mmz_Key'Access)
            then
               --# memoization-lookup

               if Mmz_Val.Kind = Mmz_Evaluating then
                  --# memoization-return
                  Raise_Property_Exception
                    (Self,
                     Property_Error'Identity,
                     "Infinite recursion detected");

               elsif Mmz_Val.Kind = Mmz_Error then
                  --# memoization-return
                  Reraise_Memoized_Error (Mmz_Val);

               else
                  Property_Result := Mmz_Val.As_Lexical_Env;
                     Inc_Ref (Property_Result);

                  --# memoization-return
                  return Property_Result;
               end if;
               --# end
            end if;

         end if;
      end if;

      begin
         
   --# scope-start

         

         Property_Result := Empty_Env;
            Inc_Ref (Property_Result);
         
   --# end


      exception
         when Exc : Property_Error =>


               if Self /= null then
                     if not Self.Unit.Context.In_Populate_Lexical_Env then
                        Add_Memoized_Error
                          (Self.Unit, Mmz_Handle, Exc, Mmz_Stored);
                     end if;
               end if;


            raise;
      end;

      if Self /= null then
         if not Self.Unit.Context.In_Populate_Lexical_Env then

            Mmz_Val := (Kind => Mmz_Lexical_Env,
                        As_Lexical_Env => Property_Result);
            Add_Memoized_Value (Self.Unit, Mmz_Handle, Mmz_Val, Mmz_Stored);
               if Mmz_Stored then
                  Inc_Ref (Property_Result);
               end if;

         end if;
      end if;



   return Property_Result;
end Type_Decl_P_Node_Builder_Scope;
--# end



   


      

   --
   --  Primitives for Bare_Any_Type_Decl
   --

   





   







--# property-start AnyTypeDecl.full_name nodes.lkt:2133
pragma Warnings (Off, "is not referenced");
 function Any_Type_Decl_P_Full_Name
  
  (Node : Bare_Any_Type_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return String_Type
is
   Self : Bare_Any_Type_Decl  := Bare_Any_Type_Decl (Node);
      --# bind self Self

   


   Property_Result : String_Type;

      
            procedure Finalizer_Scope_194 with Inline_Always;

      Str : String_Type;

            procedure Finalizer_Scope_194 is
            begin
                     Dec_Ref (Str);
            end Finalizer_Scope_194;


begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         --# expr-start 1231 '<String at nodes.lkt:2133:31>' Str nodes.lkt:2133
Str := Create_String ("[Any]"); 
--# expr-done 1231

         Property_Result := Str;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_194;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_194;




            raise;
      end;



   return Property_Result;
end Any_Type_Decl_P_Full_Name;
--# end

   







--# property-start AnyTypeDecl.decl_type_name nodes.lkt:2135
pragma Warnings (Off, "is not referenced");
 function Any_Type_Decl_P_Decl_Type_Name
  
  (Node : Bare_Any_Type_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return String_Type
is
   Self : Bare_Any_Type_Decl  := Bare_Any_Type_Decl (Node);
      --# bind self Self

   


   Property_Result : String_Type;

      
            procedure Finalizer_Scope_195 with Inline_Always;

      Str : String_Type;

            procedure Finalizer_Scope_195 is
            begin
                     Dec_Ref (Str);
            end Finalizer_Scope_195;


begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         --# expr-start 1232 '<String at nodes.lkt:2135:36>' Str nodes.lkt:2135
Str := Create_String ("Any Type"); 
--# expr-done 1232

         Property_Result := Str;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_195;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_195;




            raise;
      end;



   return Property_Result;
end Any_Type_Decl_P_Decl_Type_Name;
--# end



   


      

   --
   --  Primitives for Bare_Enum_Class_Alt_Decl
   --

   



      
      procedure Initialize_Fields_For_Enum_Class_Alt_Decl
        (Self : Bare_Enum_Class_Alt_Decl
         ; Enum_Class_Alt_Decl_F_Syn_Name : Bare_Def_Id
        ) is
      begin

            Self.Enum_Class_Alt_Decl_F_Syn_Name := Enum_Class_Alt_Decl_F_Syn_Name;
         

      end Initialize_Fields_For_Enum_Class_Alt_Decl;


   







--# property-start EnumClassAltDecl.decl_type_name nodes.lkt:2149
pragma Warnings (Off, "is not referenced");
 function Enum_Class_Alt_Decl_P_Decl_Type_Name
  
  (Node : Bare_Enum_Class_Alt_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return String_Type
is
   Self : Bare_Enum_Class_Alt_Decl  := Bare_Enum_Class_Alt_Decl (Node);
      --# bind self Self

   


   Property_Result : String_Type;

      
            procedure Finalizer_Scope_196 with Inline_Always;

      Str : String_Type;

            procedure Finalizer_Scope_196 is
            begin
                     Dec_Ref (Str);
            end Finalizer_Scope_196;


begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         --# expr-start 1233 '<String at nodes.lkt:2149:36>' Str nodes.lkt:2149
Str := Create_String ("enum class alt declaration"); 
--# expr-done 1233

         Property_Result := Str;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_196;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_196;




            raise;
      end;



   return Property_Result;
end Enum_Class_Alt_Decl_P_Decl_Type_Name;
--# end

   







--# property-start EnumClassAltDecl.is_subtype nodes.lkt:2151
pragma Warnings (Off, "is not referenced");
 function Enum_Class_Alt_Decl_P_Is_Subtype
  
  (Node : Bare_Enum_Class_Alt_Decl
      ; Other : Internal_Entity_Type_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Boolean
is
   Self : Bare_Enum_Class_Alt_Decl  := Bare_Enum_Class_Alt_Decl (Node);
     Ent : Internal_Entity_Enum_Class_Alt_Decl :=
       Internal_Entity_Enum_Class_Alt_Decl'(Node => Self, Info => E_Info);
      --# bind entity Ent

   

   --# bind other Other

   Property_Result : Boolean;

      

      Fld : Internal_Entity_Type_Decl;
Fld_1 : Boolean;



begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 1235 '<FieldAccess for is_subtype at nodes.lkt:2152:9>' Fld_1 nodes.lkt:2152



--# expr-start 1234 '<FieldAccess for parent_type at nodes.lkt:2152:9>' Fld nodes.lkt:2152







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start EnumClassAltDecl.parent_type
Fld := Liblktlang.Implementation.Enum_Class_Alt_Decl_P_Parent_Type (Node => Ent.Node, E_Info => Ent.Info);
--# end
--# expr-done 1234



   if Fld.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;



--# property-call-start '[dispatcher]TypeDecl.is_subtype'
Fld_1 := Liblktlang.Implementation.Dispatcher_Type_Decl_P_Is_Subtype (Node => Fld.Node, Other => Other, E_Info => Fld.Info);
--# end
--# expr-done 1235

         Property_Result := Fld_1;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Enum_Class_Alt_Decl_P_Is_Subtype;
--# end

   







--# property-start EnumClassAltDecl.defined_scope nodes.lkt:2155
pragma Warnings (Off, "is not referenced");
 function Enum_Class_Alt_Decl_P_Defined_Scope
  
  (Node : Bare_Enum_Class_Alt_Decl
      ; Origin : Internal_Entity
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Lexical_Env
is
   Self : Bare_Enum_Class_Alt_Decl  := Bare_Enum_Class_Alt_Decl (Node);
     Ent : Internal_Entity_Enum_Class_Alt_Decl :=
       Internal_Entity_Enum_Class_Alt_Decl'(Node => Self, Info => E_Info);
      --# bind entity Ent

   

   --# bind origin Origin

   Property_Result : Lexical_Env;

      
            procedure Finalizer_Scope_198 with Inline_Always;

      Fld : Internal_Entity_Type_Decl;
Fld_1 : Lexical_Env := Empty_Env;

            procedure Finalizer_Scope_198 is
            begin
                     Dec_Ref (Fld_1);
            end Finalizer_Scope_198;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 1237 '<FieldAccess for defined_scope at nodes.lkt:2155:39>' Fld_1 nodes.lkt:2155



--# expr-start 1236 '<FieldAccess for parent_type at nodes.lkt:2155:39>' Fld nodes.lkt:2155







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start EnumClassAltDecl.parent_type
Fld := Liblktlang.Implementation.Enum_Class_Alt_Decl_P_Parent_Type (Node => Ent.Node, E_Info => Ent.Info);
--# end
--# expr-done 1236



   if Fld.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]Decl.defined_scope'
Fld_1 := Liblktlang.Implementation.Dispatcher_Decl_P_Defined_Scope (Node => Fld.Node, Origin => Origin, E_Info => Fld.Info);
--# end
--# expr-done 1237

         Property_Result := Fld_1;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_198;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_198;




            raise;
      end;



   return Property_Result;
end Enum_Class_Alt_Decl_P_Defined_Scope;
--# end

   







--# property-start EnumClassAltDecl.parent_type nodes.lkt:2158
pragma Warnings (Off, "is not referenced");
 function Enum_Class_Alt_Decl_P_Parent_Type
  
  (Node : Bare_Enum_Class_Alt_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Internal_Entity_Type_Decl
is
   Self : Bare_Enum_Class_Alt_Decl  := Bare_Enum_Class_Alt_Decl (Node);
     Ent : Internal_Entity_Enum_Class_Alt_Decl :=
       Internal_Entity_Enum_Class_Alt_Decl'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Internal_Entity_Type_Decl;

      

      Fld : Internal_Entity;
Fld_1 : Internal_Entity;
Fld_2 : Internal_Entity;
Fld_3 : Internal_Entity;
Cast_Result : Internal_Entity_Type_Decl;



begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         --# expr-start 1242 '<Cast to TypeDecl at nodes.lkt:2159:9>' Cast_Result nodes.lkt:2159





--# expr-start 1241 '<parent at nodes.lkt:2159:9>' Fld_3 nodes.lkt:2159



--# expr-start 1240 '<parent at nodes.lkt:2159:9>' Fld_2 nodes.lkt:2159



--# expr-start 1239 '<parent at nodes.lkt:2159:9>' Fld_1 nodes.lkt:2159



--# expr-start 1238 '<parent at nodes.lkt:2159:9>' Fld nodes.lkt:2159







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Liblktlang.Implementation.Parent (Node => Ent.Node, E_Info => Ent.Info);
--# expr-done 1238



   if Fld.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_1 := Liblktlang.Implementation.Parent (Node => Fld.Node, E_Info => Fld.Info);
--# expr-done 1239



   if Fld_1.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_2 := Liblktlang.Implementation.Parent (Node => Fld_1.Node, E_Info => Fld_1.Info);
--# expr-done 1240



   if Fld_2.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_3 := Liblktlang.Implementation.Parent (Node => Fld_2.Node, E_Info => Fld_2.Info);
--# expr-done 1241



   if Fld_3.Node = null
      or else Fld_3.Node.Kind in Lkt_Type_Decl
   then
      
      Cast_Result := Create_Internal_Entity_Type_Decl
        (Node => Fld_3.Node,
         Info => Fld_3.Info);

   else
         Raise_Property_Exception
           (Self, Property_Error'Identity, "invalid object cast");
   end if;


--# expr-done 1242

         Property_Result := Cast_Result;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Enum_Class_Alt_Decl_P_Parent_Type;
--# end

   







--# property-start EnumClassAltDecl.base_types nodes.lkt:2162
pragma Warnings (Off, "is not referenced");
 function Enum_Class_Alt_Decl_P_Base_Types
  
  (Node : Bare_Enum_Class_Alt_Decl
      ; Include_Self : Boolean
         := False
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Internal_Entity_Type_Decl_Array_Access
is
   Self : Bare_Enum_Class_Alt_Decl  := Bare_Enum_Class_Alt_Decl (Node);
     Ent : Internal_Entity_Enum_Class_Alt_Decl :=
       Internal_Entity_Enum_Class_Alt_Decl'(Node => Self, Info => E_Info);
      --# bind entity Ent

   

   --# bind include_self Include_Self

   Property_Result : Internal_Entity_Type_Decl_Array_Access;

      
            procedure Finalizer_Scope_200 with Inline_Always;

      Cast_Expr : Internal_Entity_Enum_Class_Alt_Decl;
Cast_Result : Internal_Entity_Type_Decl;
Array_Lit : Internal_Entity_Type_Decl_Array_Access;
If_Result : Internal_Entity_Type_Decl_Array_Access;
Fld : Internal_Entity_Type_Decl;
Fld_1 : Internal_Entity_Type_Decl_Array_Access;
Concat_Result : Internal_Entity_Type_Decl_Array_Access;

            procedure Finalizer_Scope_200 is
            begin
                     Dec_Ref (Array_Lit);
                     Dec_Ref (If_Result);
                     Dec_Ref (Fld_1);
                     Dec_Ref (Concat_Result);
            end Finalizer_Scope_200;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 1245 '<If at nodes.lkt:2164:13>' If_Result nodes.lkt:2164




if Include_Self then
   --# expr-start 1244 '<ArrayLiteral at nodes.lkt:2164:34>' Array_Lit nodes.lkt:2164
--# expr-start 1243 '<Cast to TypeDecl at nodes.lkt:2164:35>' Cast_Result nodes.lkt:2164






Cast_Expr := Ent; 



   
      Cast_Result := Create_Internal_Entity_Type_Decl
        (Node => Cast_Expr.Node,
         Info => Cast_Expr.Info);


--# expr-done 1243
Array_Lit := Create_Internal_Entity_Type_Decl_Array (Internal_Internal_Entity_Type_Decl_Array'(1 => Cast_Result)); 
--# expr-done 1244
   If_Result := Array_Lit;
else
   
   If_Result := No_Internal_Entity_Type_Decl_Array_Type;
end if;

      Inc_Ref (If_Result);


--# expr-done 1245
--# expr-start 1247 '<FieldAccess for base_types at nodes.lkt:2167:11>' Fld_1 nodes.lkt:2167



--# expr-start 1246 '<FieldAccess for parent_type at nodes.lkt:2167:11>' Fld nodes.lkt:2167







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start EnumClassAltDecl.parent_type
Fld := Liblktlang.Implementation.Enum_Class_Alt_Decl_P_Parent_Type (Node => Ent.Node, E_Info => Ent.Info);
--# end
--# expr-done 1246



   if Fld.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;



--# property-call-start '[dispatcher]TypeDecl.base_types'
Fld_1 := Liblktlang.Implementation.Dispatcher_Type_Decl_P_Base_Types (Node => Fld.Node, Include_Self => True, E_Info => Fld.Info);
--# end
--# expr-done 1247
Concat_Result := Concat (If_Result, Fld_1); 

         Property_Result := Concat_Result;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_200;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_200;




            raise;
      end;



   return Property_Result;
end Enum_Class_Alt_Decl_P_Base_Types;
--# end



   


      

   --
   --  Primitives for Bare_Function_Type
   --

   



      
      procedure Initialize_Fields_For_Function_Type
        (Self : Bare_Function_Type
        ) is
      begin

         
      Self.Function_Type_Args := No_Internal_Entity_Type_Decl_Array_Type;
      Self.Function_Type_Return_Type := No_Entity_Type_Decl;
      Self.Function_Type_Origin := No_Entity_Decl;

      end Initialize_Fields_For_Function_Type;


   







--# property-start FunctionType.full_name nodes.lkt:2190
pragma Warnings (Off, "is not referenced");
 function Function_Type_P_Full_Name
  
  (Node : Bare_Function_Type
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return String_Type
is
   Self : Bare_Function_Type  := Bare_Function_Type (Node);
     Ent : Internal_Entity_Function_Type :=
       Internal_Entity_Function_Type'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : String_Type;

      
            procedure Finalizer_Scope_201 with Inline_Always;
            procedure Finalizer_Scope_602 with Inline_Always;

      Str : String_Type;
Str_1 : String_Type;
Fld : Internal_Entity_Type_Decl_Array_Access;
Fld_1 : String_Type;
Map_Result : String_Type_Array_Access;
Join_Result : String_Type;
Concat_Result : String_Type;
Str_2 : String_Type;
Concat_Result_1 : String_Type;
Fld_2 : Internal_Entity_Type_Decl;
Fld_3 : String_Type;
Concat_Result_2 : String_Type;

            procedure Finalizer_Scope_201 is
            begin
                     Dec_Ref (Str);
                     Dec_Ref (Str_1);
                     Dec_Ref (Fld);
                     Dec_Ref (Map_Result);
                     Dec_Ref (Join_Result);
                     Dec_Ref (Concat_Result);
                     Dec_Ref (Str_2);
                     Dec_Ref (Concat_Result_1);
                     Dec_Ref (Fld_3);
                     Dec_Ref (Concat_Result_2);
            end Finalizer_Scope_201;
            procedure Finalizer_Scope_602 is
            begin
                     Dec_Ref (Fld_1);
            end Finalizer_Scope_602;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 1248 '<String at nodes.lkt:2191:9>' Str nodes.lkt:2191
Str := Create_String ("("); 
--# expr-done 1248
--# expr-start 1253 '<Join at nodes.lkt:2191:15>' Join_Result nodes.lkt:2191
--# expr-start 1249 '<String at nodes.lkt:2191:15>' Str_1 nodes.lkt:2191
Str_1 := Create_String (", "); 
--# expr-done 1249
--# expr-start 1252 '<Map at nodes.lkt:2191:25>' Map_Result nodes.lkt:2191








   

   --# expr-start 1250 '<FieldAccess for args at nodes.lkt:2191:25>' Fld nodes.lkt:2191







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Ent.Node.Function_Type_Args;
Inc_Ref (Fld);
--# expr-done 1250

   
      declare
         Map_Result_Vec : String_Type_Vectors.Vector;
      begin
   

   

      

      declare
         
         Collection : constant Internal_Entity_Type_Decl_Array_Access := Fld;
      begin
         for Item_0 of
               Collection.Items
         loop

            
   --# scope-start


               --# bind t Item_0

            
         
         
      --# expr-start 1251 '<FieldAccess for full_name at nodes.lkt:2191:46>' Fld_1 nodes.lkt:2191







   if Item_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]Decl.full_name'
Fld_1 := Liblktlang.Implementation.Dispatcher_Decl_P_Full_Name (Node => Item_0.Node, E_Info => Item_0.Info);
--# end
--# expr-done 1251
      

         declare
            Item_To_Append : constant String_Type := Fld_1;
         begin
               Inc_Ref (Item_To_Append);
            String_Type_Vectors.Append (Map_Result_Vec, Item_To_Append);
         end;
   
   
   

            
   --# end
      Finalizer_Scope_602;



         end loop;
      end;
   

   

         Map_Result := Create_String_Type_Array
           (Items_Count => Natural (String_Type_Vectors.Length (Map_Result_Vec)));
         for I in Map_Result.Items'Range loop
            Map_Result.Items (I) := String_Type_Vectors.Get
              (Map_Result_Vec,
               I + String_Type_Vectors.Index_Type'First - Map_Result.Items'First);
         end loop;
         String_Type_Vectors.Destroy (Map_Result_Vec);

      end;
   



--# expr-done 1252
Join_Result := Join_Strings (Str_1, Map_Result); 
--# expr-done 1253
Concat_Result := Concat_String (Str, Join_Result); 
--# expr-start 1254 '<String at nodes.lkt:2191:64>' Str_2 nodes.lkt:2191
Str_2 := Create_String (") -> "); 
--# expr-done 1254
Concat_Result_1 := Concat_String (Concat_Result, Str_2); 
--# expr-start 1256 '<FieldAccess for full_name at nodes.lkt:2192:11>' Fld_3 nodes.lkt:2192



--# expr-start 1255 '<FieldAccess for return_type at nodes.lkt:2192:11>' Fld_2 nodes.lkt:2192







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_2 := Ent.Node.Function_Type_Return_Type;
--# expr-done 1255



   if Fld_2.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]Decl.full_name'
Fld_3 := Liblktlang.Implementation.Dispatcher_Decl_P_Full_Name (Node => Fld_2.Node, E_Info => Fld_2.Info);
--# end
--# expr-done 1256
Concat_Result_2 := Concat_String (Concat_Result_1, Fld_3); 

         Property_Result := Concat_Result_2;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_201;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_201;
                     Finalizer_Scope_602;




            raise;
      end;



   return Property_Result;
end Function_Type_P_Full_Name;
--# end

   







--# property-start FunctionType.decl_type_name nodes.lkt:2194
pragma Warnings (Off, "is not referenced");
 function Function_Type_P_Decl_Type_Name
  
  (Node : Bare_Function_Type
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return String_Type
is
   Self : Bare_Function_Type  := Bare_Function_Type (Node);
      --# bind self Self

   


   Property_Result : String_Type;

      
            procedure Finalizer_Scope_202 with Inline_Always;

      Str : String_Type;

            procedure Finalizer_Scope_202 is
            begin
                     Dec_Ref (Str);
            end Finalizer_Scope_202;


begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         --# expr-start 1257 '<String at nodes.lkt:2194:36>' Str nodes.lkt:2194
Str := Create_String ("function type"); 
--# expr-done 1257

         Property_Result := Str;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_202;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_202;




            raise;
      end;



   return Property_Result;
end Function_Type_P_Decl_Type_Name;
--# end

   







--# property-start FunctionType.defined_scope nodes.lkt:2197
pragma Warnings (Off, "is not referenced");
 function Function_Type_P_Defined_Scope
  
  (Node : Bare_Function_Type
      ; Origin : Internal_Entity
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Lexical_Env
is
   Self : Bare_Function_Type  := Bare_Function_Type (Node);
      --# bind self Self

   

   --# bind origin Origin

   Property_Result : Lexical_Env;

      

      



begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         

         Property_Result := Empty_Env;
            Inc_Ref (Property_Result);
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Function_Type_P_Defined_Scope;
--# end

   







--# property-start FunctionType.should_ignore_constructor_arg nodes.lkt:2200
pragma Warnings (Off, "is not referenced");
 function Function_Type_P_Should_Ignore_Constructor_Arg
  
  (Node : Bare_Function_Type
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Boolean
is
   Self : Bare_Function_Type  := Bare_Function_Type (Node);
     Ent : Internal_Entity_Function_Type :=
       Internal_Entity_Function_Type'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Boolean;

      

      Var_Expr_43 : Internal_Entity_Function_Type;
Var_Expr_44 : Internal_Entity_Decl;
Var_Expr_45 : Internal_Entity_Full_Decl;
Fld : Internal_Entity_Decl;
Fld_1 : Internal_Entity_Full_Decl;
Sym : Symbol_Type;
Fld_2 : Boolean;
Scope_Result : Boolean;
Result_Var : Boolean;
Scope_Result_1 : Boolean;
Result_Var_1 : Boolean;
Scope_Result_2 : Boolean;
Result_Var_2 : Boolean;



begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         



Var_Expr_43 := Ent;





if Var_Expr_43 /= No_Entity_Function_Type then
   



   --# scope-start


   




--# expr-start 1258 '<FieldAccess for origin at nodes.lkt:2201:9>' Fld nodes.lkt:2201







   if Var_Expr_43.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Var_Expr_43.Node.Function_Type_Origin;
--# expr-done 1258
Var_Expr_44 := Fld;





if Var_Expr_44 /= No_Entity_Decl then
   



   --# scope-start


   




--# expr-start 1259 '<FieldAccess for full_decl at nodes.lkt:2201:9>' Fld_1 nodes.lkt:2201







   if Var_Expr_44.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start Decl.full_decl
Fld_1 := Liblktlang.Implementation.Decl_P_Full_Decl (Node => Var_Expr_44.Node, E_Info => Var_Expr_44.Info);
--# end
--# expr-done 1259
Var_Expr_45 := Fld_1;





if Var_Expr_45 /= No_Entity_Full_Decl then
   



   --# scope-start


   

--# expr-start 1261 '<FieldAccess for has_annotation at nodes.lkt:2201:9>' Fld_2 nodes.lkt:2201







   if Var_Expr_45.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# expr-start 1260 '<Symbol ignore_constructor_arg at nodes.lkt:2201:51>' Sym nodes.lkt:2201
Sym := Precomputed_Symbol (Precomputed_Symbol_Table (Self.Unit.Context.Symbols), Precomputed_Sym_Ignore_Constructor_Arg); 
--# expr-done 1260
--# property-call-start FullDecl.has_annotation
Fld_2 := Liblktlang.Implementation.Full_Decl_P_Has_Annotation (Node => Var_Expr_45.Node, Name => Sym);
--# end
--# expr-done 1261
Scope_Result := Fld_2;


   --# end


   Result_Var := Scope_Result;
else
   
   Result_Var := False;
end if;



Scope_Result_1 := Result_Var;


   --# end


   Result_Var_1 := Scope_Result_1;
else
   
   Result_Var_1 := False;
end if;



Scope_Result_2 := Result_Var_1;


   --# end


   Result_Var_2 := Scope_Result_2;
else
   
   Result_Var_2 := False;
end if;




         Property_Result := Result_Var_2;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Function_Type_P_Should_Ignore_Constructor_Arg;
--# end

   







--# property-start FunctionType.returns_entity nodes.lkt:2204
pragma Warnings (Off, "is not referenced");
 function Function_Type_P_Returns_Entity
  
  (Node : Bare_Function_Type
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Boolean
is
   Self : Bare_Function_Type  := Bare_Function_Type (Node);
     Ent : Internal_Entity_Function_Type :=
       Internal_Entity_Function_Type'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Boolean;

      

      Is_Null : Boolean;
Fld : Internal_Entity_Type_Decl;
Fld_1 : Bare_Type_Decl;
Fld_2 : Internal_Entity_Named_Type_Decl;
Fld_3 : Bare_Named_Type_Decl;
Cast_Result : Bare_Type_Decl;
Is_Equal : Boolean;
If_Result : Boolean;



begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 1268 '<BooleanBinaryOp Or at nodes.lkt:2205:9>' If_Result nodes.lkt:2205



--# expr-start 1262 '<IsNull at nodes.lkt:2205:9>' Is_Null nodes.lkt:2205

Is_Null := Ent.Node = null; 
--# expr-done 1262
if Is_Null then
   
   If_Result := True;
else
   --# expr-start 1267 '<Eq at nodes.lkt:2205:25>' Is_Equal nodes.lkt:2205
--# expr-start 1264 '<FieldAccess for node at nodes.lkt:2205:25>' Fld_1 nodes.lkt:2205



--# expr-start 1263 '<FieldAccess for return_type at nodes.lkt:2205:25>' Fld nodes.lkt:2205







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Ent.Node.Function_Type_Return_Type;
--# expr-done 1263





Fld_1 := Fld.Node;
--# expr-done 1264





--# expr-start 1266 '<FieldAccess for node at nodes.lkt:2205:50>' Fld_3 nodes.lkt:2205



--# expr-start 1265 '<FieldAccess for entity_type at nodes.lkt:2205:50>' Fld_2 nodes.lkt:2205







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start LktNode.entity_type
Fld_2 := Liblktlang.Implementation.Lkt_Node_P_Entity_Type (Node => Ent.Node);
--# end
--# expr-done 1265





Fld_3 := Fld_2.Node;
--# expr-done 1266



   
      Cast_Result := Fld_3;


Is_Equal := Fld_1 = Cast_Result; 
--# expr-done 1267
   If_Result := Is_Equal;
end if;



--# expr-done 1268

         Property_Result := If_Result;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Function_Type_P_Returns_Entity;
--# end

   







--# property-start FunctionType.returns_bool nodes.lkt:2208
pragma Warnings (Off, "is not referenced");
 function Function_Type_P_Returns_Bool
  
  (Node : Bare_Function_Type
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Boolean
is
   Self : Bare_Function_Type  := Bare_Function_Type (Node);
     Ent : Internal_Entity_Function_Type :=
       Internal_Entity_Function_Type'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Boolean;

      

      Is_Null : Boolean;
Fld : Internal_Entity_Type_Decl;
Fld_1 : Internal_Entity_Named_Type_Decl;
Cast_Result : Internal_Entity_Type_Decl;
Fld_2 : Boolean;
If_Result : Boolean;



begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 1273 '<BooleanBinaryOp Or at nodes.lkt:2209:9>' If_Result nodes.lkt:2209



--# expr-start 1269 '<IsNull at nodes.lkt:2209:9>' Is_Null nodes.lkt:2209

Is_Null := Ent.Node = null; 
--# expr-done 1269
if Is_Null then
   
   If_Result := True;
else
   --# expr-start 1272 '<FieldAccess for matching_type at nodes.lkt:2209:25>' Fld_2 nodes.lkt:2209



--# expr-start 1270 '<FieldAccess for return_type at nodes.lkt:2209:25>' Fld nodes.lkt:2209







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Ent.Node.Function_Type_Return_Type;
--# expr-done 1270



   if Fld.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;







--# expr-start 1271 '<FieldAccess for bool_type at nodes.lkt:2209:56>' Fld_1 nodes.lkt:2209







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start LktNode.bool_type
Fld_1 := Liblktlang.Implementation.Lkt_Node_P_Bool_Type (Node => Ent.Node);
--# end
--# expr-done 1271



   
      Cast_Result := Create_Internal_Entity_Type_Decl
        (Node => Fld_1.Node,
         Info => Fld_1.Info);


--# property-call-start TypeDecl.matching_type
Fld_2 := Liblktlang.Implementation.Type_Decl_P_Matching_Type (Node => Fld.Node, Other => Cast_Result, E_Info => Fld.Info);
--# end
--# expr-done 1272
   If_Result := Fld_2;
end if;



--# expr-done 1273

         Property_Result := If_Result;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Function_Type_P_Returns_Bool;
--# end



   


      

   --
   --  Primitives for Bare_Generic_Formal_Type_Decl
   --

   



      
      procedure Initialize_Fields_For_Generic_Formal_Type_Decl
        (Self : Bare_Generic_Formal_Type_Decl
         ; Generic_Formal_Type_Decl_F_Has_Class : Bare_Class_Qualifier
         ; Generic_Formal_Type_Decl_F_Syn_Name : Bare_Def_Id
        ) is
      begin

            Self.Generic_Formal_Type_Decl_F_Has_Class := Generic_Formal_Type_Decl_F_Has_Class;
            Self.Generic_Formal_Type_Decl_F_Syn_Name := Generic_Formal_Type_Decl_F_Syn_Name;
         

      end Initialize_Fields_For_Generic_Formal_Type_Decl;

      
   function Generic_Formal_Type_Decl_F_Has_Class
     (Node : Bare_Generic_Formal_Type_Decl) return Bare_Class_Qualifier
   is
      

   begin
         
         return Node.Generic_Formal_Type_Decl_F_Has_Class;
      
   end;


   







--# property-start GenericFormalTypeDecl.decl_type_name nodes.lkt:2225
pragma Warnings (Off, "is not referenced");
 function Generic_Formal_Type_Decl_P_Decl_Type_Name
  
  (Node : Bare_Generic_Formal_Type_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return String_Type
is
   Self : Bare_Generic_Formal_Type_Decl  := Bare_Generic_Formal_Type_Decl (Node);
      --# bind self Self

   


   Property_Result : String_Type;

      
            procedure Finalizer_Scope_207 with Inline_Always;

      Str : String_Type;
Str_1 : String_Type;
Fld : Bare_Class_Qualifier;
Fld_1 : Boolean;
If_Result : String_Type;

            procedure Finalizer_Scope_207 is
            begin
                     Dec_Ref (Str);
                     Dec_Ref (Str_1);
                     Dec_Ref (If_Result);
            end Finalizer_Scope_207;


begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         --# expr-start 1278 '<If at nodes.lkt:2226:9>' If_Result nodes.lkt:2226



--# expr-start 1275 '<FieldAccess for as_bool at nodes.lkt:2226:12>' Fld_1 nodes.lkt:2226



--# expr-start 1274 '<FieldAccess for has_class at nodes.lkt:2226:12>' Fld nodes.lkt:2226







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Self.Generic_Formal_Type_Decl_F_Has_Class;
--# expr-done 1274



   if Fld = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]ClassQualifier.as_bool'
Fld_1 := Liblktlang.Implementation.Dispatcher_Class_Qualifier_P_As_Bool (Node => Fld);
--# end
--# expr-done 1275
if Fld_1 then
   --# expr-start 1276 '<String at nodes.lkt:2227:14>' Str nodes.lkt:2227
Str := Create_String ("generic formal class type declaration"); 
--# expr-done 1276
   If_Result := Str;
else
   --# expr-start 1277 '<String at nodes.lkt:2228:14>' Str_1 nodes.lkt:2228
Str_1 := Create_String ("generic formal type declaration"); 
--# expr-done 1277
   If_Result := Str_1;
end if;

      Inc_Ref (If_Result);


--# expr-done 1278

         Property_Result := If_Result;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_207;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_207;




            raise;
      end;



   return Property_Result;
end Generic_Formal_Type_Decl_P_Decl_Type_Name;
--# end



   


      

   --
   --  Primitives for Bare_Named_Type_Decl
   --

   




      
   function Named_Type_Decl_F_Decls
     (Node : Bare_Named_Type_Decl) return Bare_Decl_Block
   is
      

         Kind : constant Lkt_Named_Type_Decl := Node.Kind;
   begin
         case Kind is
               when Lkt_Class_Decl =>
                     
         return Node.Class_Decl_F_Decls;
      
               when Lkt_Enum_Class_Decl =>
                     
         return Node.Enum_Class_Decl_F_Decls;
      
               when Lkt_Enum_Type_Decl =>
                     
         return Node.Enum_Type_Decl_F_Decls;
      
               when Lkt_Struct_Decl =>
                     
         return Node.Struct_Decl_F_Decls;
      
               when Lkt_Trait_Decl =>
                     
         return Node.Trait_Decl_F_Decls;
      
         end case;
   end;


   







--# property-start NamedTypeDecl.defined_scope nodes.lkt:2239
pragma Warnings (Off, "is not referenced");
 function Named_Type_Decl_P_Defined_Scope
  
  (Node : Bare_Named_Type_Decl
      ; Origin : Internal_Entity
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Lexical_Env
is
   Self : Bare_Named_Type_Decl  := Bare_Named_Type_Decl (Node);
     Ent : Internal_Entity_Named_Type_Decl :=
       Internal_Entity_Named_Type_Decl'(Node => Self, Info => E_Info);
      --# bind entity Ent

   

   --# bind origin Origin

   Property_Result : Lexical_Env;

      
            procedure Finalizer_Scope_208 with Inline_Always;
            procedure Finalizer_Scope_606 with Inline_Always;

      Var_Expr_0 : Lexical_Env := Empty_Env;
Fld : Internal_Entity_Decl_Block;
Fld_1 : Lexical_Env := Empty_Env;
Fld_2 : Internal_Entity_Type_Decl;
Fld_3 : Lexical_Env := Empty_Env;
Array_Lit : Lexical_Env_Array_Access;
Group_Env : Lexical_Env := Empty_Env;
Cast_Expr : Internal_Entity_Named_Type_Decl;
Cast_Result : Internal_Entity;
Is_Equiv : Boolean;
If_Result : Lexical_Env := Empty_Env;
Scope_Result : Lexical_Env := Empty_Env;
Result_Var : Lexical_Env := Empty_Env;

            procedure Finalizer_Scope_208 is
            begin
                     Dec_Ref (Fld_1);
                     Dec_Ref (Scope_Result);
                     Dec_Ref (Result_Var);
            end Finalizer_Scope_208;
            procedure Finalizer_Scope_606 is
            begin
                     Dec_Ref (Var_Expr_0);
                     Dec_Ref (Fld_3);
                     Dec_Ref (Array_Lit);
                     Dec_Ref (Group_Env);
                     Dec_Ref (If_Result);
            end Finalizer_Scope_606;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         


--# expr-start 1280 '<FieldAccess for children_env at nodes.lkt:2240:9>' Fld_1 nodes.lkt:2240



--# expr-start 1279 '<FieldAccess for decls at nodes.lkt:2240:9>' Fld nodes.lkt:2240







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Create_Internal_Entity_Decl_Block (Node => Implementation.Named_Type_Decl_F_Decls (Ent.Node), Info => Ent.Info);
--# expr-done 1279



   if Fld.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_1 := Liblktlang.Implementation.Children_Env (Node => Fld.Node, E_Info => Fld.Info);
--# expr-done 1280
Var_Expr_0 := Fld_1;

      Inc_Ref (Var_Expr_0);




if Var_Expr_0 /= Empty_Env then
   



   --# scope-start


   --# bind le Var_Expr_0

--# expr-start 1286 '<If at nodes.lkt:2242:13>' If_Result nodes.lkt:2242



--# expr-start 1281 '<Eq at nodes.lkt:2242:16>' Is_Equiv nodes.lkt:2242






Cast_Expr := Ent; 



   
      Cast_Result := Create_Internal_Entity
        (Node => Cast_Expr.Node,
         Info => Cast_Expr.Info);



Is_Equiv := Equivalent (Cast_Result, Origin); 
--# expr-done 1281
if Is_Equiv then
   --# expr-start 1285 '<env_group at nodes.lkt:2243:18>' Group_Env nodes.lkt:2243
--# expr-start 1284 '<ArrayLiteral at nodes.lkt:2243:18>' Array_Lit nodes.lkt:2243

--# expr-start 1283 '<FieldAccess for defined_scope at nodes.lkt:2243:23>' Fld_3 nodes.lkt:2243



--# expr-start 1282 '<FieldAccess for basic_trait_from_self at nodes.lkt:2243:23>' Fld_2 nodes.lkt:2243







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start TypeDecl.basic_trait_from_self
Fld_2 := Liblktlang.Implementation.Type_Decl_P_Basic_Trait_From_Self (Node => Ent.Node, E_Info => Ent.Info);
--# end
--# expr-done 1282



   if Fld_2.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]Decl.defined_scope'
Fld_3 := Liblktlang.Implementation.Dispatcher_Decl_P_Defined_Scope (Node => Fld_2.Node, Origin => Origin, E_Info => Fld_2.Info);
--# end
--# expr-done 1283
Array_Lit := Create_Lexical_Env_Array (Internal_Lexical_Env_Array'(1 => Var_Expr_0, 2 => Fld_3)); 
--# expr-done 1284

Group_Env := Group (Array_Lit, No_Metadata); 
--# expr-done 1285
   If_Result := Group_Env;
else
   
   If_Result := Var_Expr_0;
end if;

      Inc_Ref (If_Result);


--# expr-done 1286
Scope_Result := If_Result;
   Inc_Ref (Scope_Result);


   --# end
      Finalizer_Scope_606;


   Result_Var := Scope_Result;
else
   
   Result_Var := Empty_Env;
end if;

      Inc_Ref (Result_Var);



         Property_Result := Result_Var;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_208;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_208;
                     Finalizer_Scope_606;




            raise;
      end;



   return Property_Result;
end Named_Type_Decl_P_Defined_Scope;
--# end



   


      

   --
   --  Primitives for Bare_Basic_Class_Decl
   --

   



      
      procedure Initialize_Fields_For_Basic_Class_Decl
        (Self : Bare_Basic_Class_Decl
         ; Basic_Class_Decl_F_Syn_Name : Bare_Def_Id
         ; Basic_Class_Decl_F_Syn_Base_Type : Bare_Type_Ref
         ; Basic_Class_Decl_F_Traits : Bare_Type_Ref_List
        ) is
      begin

            Self.Basic_Class_Decl_F_Syn_Name := Basic_Class_Decl_F_Syn_Name;
            Self.Basic_Class_Decl_F_Syn_Base_Type := Basic_Class_Decl_F_Syn_Base_Type;
            Self.Basic_Class_Decl_F_Traits := Basic_Class_Decl_F_Traits;
         

      end Initialize_Fields_For_Basic_Class_Decl;


   







--# property-start BasicClassDecl.is_subtype nodes.lkt:2258
pragma Warnings (Off, "is not referenced");
 function Basic_Class_Decl_P_Is_Subtype
  
  (Node : Bare_Basic_Class_Decl
      ; Other : Internal_Entity_Type_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Boolean
is
   Self : Bare_Basic_Class_Decl  := Bare_Basic_Class_Decl (Node);
     Ent : Internal_Entity_Basic_Class_Decl :=
       Internal_Entity_Basic_Class_Decl'(Node => Self, Info => E_Info);
      --# bind entity Ent

   

   --# bind other Other

   Property_Result : Boolean;

      
            procedure Finalizer_Scope_209 with Inline_Always;

      Fld : Internal_Entity_Type_Decl_Array_Access;
Cast_Expr : Internal_Entity_Type_Decl;
Cast_Result : Internal_Entity;
Cast_Expr_1 : Internal_Entity_Type_Decl;
Cast_Result_1 : Internal_Entity;
Is_Equiv : Boolean;
Find_Result : Internal_Entity_Type_Decl;
Is_Null : Boolean;
Not_Val : Boolean;

            procedure Finalizer_Scope_209 is
            begin
                     Dec_Ref (Fld);
            end Finalizer_Scope_209;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 1291 '<Not at nodes.lkt:2259:9>' Not_Val nodes.lkt:2259
--# expr-start 1290 '<IsNull at nodes.lkt:2259:13>' Is_Null nodes.lkt:2259
--# expr-start 1289 '<Find at nodes.lkt:2259:13>' Find_Result nodes.lkt:2259








   

   --# expr-start 1287 '<FieldAccess for base_types at nodes.lkt:2259:13>' Fld nodes.lkt:2259







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]TypeDecl.base_types'
Fld := Liblktlang.Implementation.Dispatcher_Type_Decl_P_Base_Types (Node => Ent.Node, E_Info => Ent.Info);
--# end
--# expr-done 1287

   
      Find_Result := No_Entity_Type_Decl;
   

   

      

      declare
         
         Collection : constant Internal_Entity_Type_Decl_Array_Access := Fld;
      begin
         for Item_0 of
               Collection.Items
         loop

            
   --# scope-start


               --# bind b Item_0

            
      --# expr-start 1288 '<Eq at nodes.lkt:2259:43>' Is_Equiv nodes.lkt:2259






Cast_Expr := Item_0; 



   
      Cast_Result := Create_Internal_Entity
        (Node => Cast_Expr.Node,
         Info => Cast_Expr.Info);








Cast_Expr_1 := Other; 



   
      Cast_Result_1 := Create_Internal_Entity
        (Node => Cast_Expr_1.Node,
         Info => Cast_Expr_1.Info);


Is_Equiv := Equivalent (Cast_Result, Cast_Result_1); 
--# expr-done 1288
      if Is_Equiv then
         Find_Result := Item_0; 
      end if;
   

            
   --# end


               exit when Is_Equiv;

         end loop;
      end;
   

   
   



--# expr-done 1289
Is_Null := Find_Result.Node = null; 
--# expr-done 1290
Not_Val := not (Is_Null); 
--# expr-done 1291

         Property_Result := Not_Val;
         
   --# end
      Finalizer_Scope_209;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_209;




            raise;
      end;



   return Property_Result;
end Basic_Class_Decl_P_Is_Subtype;
--# end

   







--# property-start BasicClassDecl.defined_scope nodes.lkt:2264
pragma Warnings (Off, "is not referenced");
 function Basic_Class_Decl_P_Defined_Scope
  
  (Node : Bare_Basic_Class_Decl
      ; Origin : Internal_Entity
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Lexical_Env
is
   Self : Bare_Basic_Class_Decl  := Bare_Basic_Class_Decl (Node);
     Ent : Internal_Entity_Basic_Class_Decl :=
       Internal_Entity_Basic_Class_Decl'(Node => Self, Info => E_Info);
      --# bind entity Ent

   

   --# bind origin Origin

   Property_Result : Lexical_Env;

      
            procedure Finalizer_Scope_210 with Inline_Always;
            procedure Finalizer_Scope_609 with Inline_Always;
            procedure Finalizer_Scope_610 with Inline_Always;
            procedure Finalizer_Scope_611 with Inline_Always;
            procedure Finalizer_Scope_612 with Inline_Always;

      Var_Expr_1 : Lexical_Env := Empty_Env;
Var_Expr_46 : Internal_Entity_Type_Ref;
Var_Expr_47 : Internal_Entity_Named_Type_Decl;
Var_Expr_48 : Internal_Entity_Type_Decl;
Fld : Internal_Entity_Decl_Block;
Fld_1 : Lexical_Env := Empty_Env;
Fld_2 : Internal_Entity_Type_Ref;
Fld_3 : Internal_Entity_Type_Decl;
Scope_Result : Internal_Entity_Type_Decl;
Result_Var : Internal_Entity_Type_Decl;
Cast_Result : Internal_Entity_Named_Type_Decl;
Fld_4 : Lexical_Env := Empty_Env;
Scope_Result_1 : Lexical_Env := Empty_Env;
Result_Var_1 : Lexical_Env := Empty_Env;
Array_Lit : Lexical_Env_Array_Access;
Fld_5 : Internal_Entity_Type_Ref_List;
Fld_6 : Bare_Type_Ref_List;
Fld_7 : Internal_Entity_Info;
Item_0 : Internal_Entity_Type_Ref;
Bare_Item_0 : Bare_Type_Ref;
Fld_8 : Internal_Entity_Type_Decl;
Fld_9 : Lexical_Env := Empty_Env;
Scope_Result_2 : Lexical_Env := Empty_Env;
Result_Var_2 : Lexical_Env := Empty_Env;
As_Entity : Internal_Entity_Type_Ref;
Is_Null : Boolean;
If_Result : Internal_Entity_Type_Ref;
Map_Result : Lexical_Env_Array_Access;
Concat_Result : Lexical_Env_Array_Access;
Group_Env : Lexical_Env := Empty_Env;
Fld_10 : Internal_Entity_Type_Decl;
Fld_11 : Lexical_Env := Empty_Env;
Array_Lit_1 : Lexical_Env_Array_Access;
Group_Env_1 : Lexical_Env := Empty_Env;
Cast_Expr : Internal_Entity_Basic_Class_Decl;
Cast_Result_1 : Internal_Entity;
Is_Equiv : Boolean;
If_Result_1 : Lexical_Env := Empty_Env;
Scope_Result_3 : Lexical_Env := Empty_Env;
Result_Var_3 : Lexical_Env := Empty_Env;

            procedure Finalizer_Scope_210 is
            begin
                     Dec_Ref (Fld_1);
                     Dec_Ref (Scope_Result_1);
                     Dec_Ref (Result_Var_1);
                     Dec_Ref (Array_Lit);
                     Dec_Ref (Map_Result);
                     Dec_Ref (Concat_Result);
                     Dec_Ref (Group_Env);
                     Dec_Ref (Scope_Result_3);
                     Dec_Ref (Result_Var_3);
            end Finalizer_Scope_210;
            procedure Finalizer_Scope_609 is
            begin
                     Dec_Ref (Fld_4);
            end Finalizer_Scope_609;
            procedure Finalizer_Scope_610 is
            begin
                     Dec_Ref (Scope_Result_2);
                     Dec_Ref (Result_Var_2);
            end Finalizer_Scope_610;
            procedure Finalizer_Scope_611 is
            begin
                     Dec_Ref (Fld_9);
            end Finalizer_Scope_611;
            procedure Finalizer_Scope_612 is
            begin
                     Dec_Ref (Var_Expr_1);
                     Dec_Ref (Fld_11);
                     Dec_Ref (Array_Lit_1);
                     Dec_Ref (Group_Env_1);
                     Dec_Ref (If_Result_1);
            end Finalizer_Scope_612;

      
      Mmz_Handle : Memoization_Handle;
      Mmz_Val    : Mmz_Value;

      Mmz_Stored : Boolean;
      --  Whether the memoization couple was actually stored. Used to determine
      --  whether to inc-ref the memoized value.

      function Create_Mmz_Key return Mmz_Key;
      --  Create a memoization key for this property call and return it

      --------------------
      -- Create_Mmz_Key --
      --------------------

      function Create_Mmz_Key return Mmz_Key is
      begin
         return Mmz_K : Mmz_Key :=
           (Property => Mmz_Bare_Basic_Class_Decl_Basic_Class_Decl_P_Defined_Scope,
            Items    => new Mmz_Key_Array (1 ..  3))
         do
            Mmz_K.Items (1) := (Kind => Mmz_Bare_Basic_Class_Decl,
                                As_Bare_Basic_Class_Decl => Self);
               Mmz_K.Items (2) := (Kind => Mmz_Internal_Entity,
                                      As_Internal_Entity => Origin);
               Mmz_K.Items (3) :=
                 (Kind => Mmz_Internal_Entity_Info,
                  As_Internal_Entity_Info => E_Info);
         end return;
      end Create_Mmz_Key;

begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;

      if Self /= null then

         if not Self.Unit.Context.In_Populate_Lexical_Env then

            if Find_Memoized_Value
              (Self.Unit, Mmz_Handle, Mmz_Val, Create_Mmz_Key'Access)
            then
               --# memoization-lookup

               if Mmz_Val.Kind = Mmz_Evaluating then
                  --# memoization-return
                  Raise_Property_Exception
                    (Self,
                     Property_Error'Identity,
                     "Infinite recursion detected");

               elsif Mmz_Val.Kind = Mmz_Error then
                  --# memoization-return
                  Reraise_Memoized_Error (Mmz_Val);

               else
                  Property_Result := Mmz_Val.As_Lexical_Env;
                     Inc_Ref (Property_Result);

                  --# memoization-return
                  return Property_Result;
               end if;
               --# end
            end if;

         end if;
      end if;

      begin
         
   --# scope-start

         


--# expr-start 1303 '<env_group at nodes.lkt:2265:9>' Group_Env nodes.lkt:2265
--# expr-start 1298 '<ArrayLiteral at nodes.lkt:2266:13>' Array_Lit nodes.lkt:2266
--# expr-start 1293 '<FieldAccess for children_env at nodes.lkt:2267:17>' Fld_1 nodes.lkt:2267



--# expr-start 1292 '<FieldAccess for decls at nodes.lkt:2267:17>' Fld nodes.lkt:2267







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Create_Internal_Entity_Decl_Block (Node => Implementation.Named_Type_Decl_F_Decls (Ent.Node), Info => Ent.Info);
--# expr-done 1292



   if Fld.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_1 := Liblktlang.Implementation.Children_Env (Node => Fld.Node, E_Info => Fld.Info);
--# expr-done 1293



--# expr-start 1296 '<Cast to NamedTypeDecl at nodes.lkt:2268:17>' Cast_Result nodes.lkt:2268








--# expr-start 1294 '<FieldAccess for base_type at nodes.lkt:2268:17>' Fld_2 nodes.lkt:2268







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start TypeDecl.base_type
Fld_2 := Liblktlang.Implementation.Type_Decl_P_Base_Type (Node => Ent.Node, E_Info => Ent.Info);
--# end
--# expr-done 1294
Var_Expr_46 := Fld_2;





if Var_Expr_46 /= No_Entity_Type_Ref then
   



   --# scope-start


   

--# expr-start 1295 '<FieldAccess for referenced_decl at nodes.lkt:2268:17>' Fld_3 nodes.lkt:2268







   if Var_Expr_46.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start TypeRef.referenced_decl
Fld_3 := Liblktlang.Implementation.Type_Ref_P_Referenced_Decl (Node => Var_Expr_46.Node, E_Info => Var_Expr_46.Info);
--# end
--# expr-done 1295
Scope_Result := Fld_3;


   --# end


   Result_Var := Scope_Result;
else
   
   Result_Var := No_Entity_Type_Decl;
end if;






   if Result_Var.Node = null
      or else Result_Var.Node.Kind in Lkt_Named_Type_Decl
   then
      
      Cast_Result := Create_Internal_Entity_Named_Type_Decl
        (Node => Result_Var.Node,
         Info => Result_Var.Info);

   else
         Cast_Result := No_Entity_Named_Type_Decl;
   end if;


--# expr-done 1296
Var_Expr_47 := Cast_Result;





if Var_Expr_47 /= No_Entity_Named_Type_Decl then
   



   --# scope-start


   

--# expr-start 1297 '<FieldAccess for defined_scope at nodes.lkt:2268:17>' Fld_4 nodes.lkt:2268







   if Var_Expr_47.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]Decl.defined_scope'
Fld_4 := Liblktlang.Implementation.Dispatcher_Decl_P_Defined_Scope (Node => Var_Expr_47.Node, Origin => Origin, E_Info => Var_Expr_47.Info);
--# end
--# expr-done 1297
Scope_Result_1 := Fld_4;
   Inc_Ref (Scope_Result_1);


   --# end
      Finalizer_Scope_609;


   Result_Var_1 := Scope_Result_1;
else
   
   Result_Var_1 := Empty_Env;
end if;

      Inc_Ref (Result_Var_1);


Array_Lit := Create_Lexical_Env_Array (Internal_Lexical_Env_Array'(1 => Fld_1, 2 => Result_Var_1)); 
--# expr-done 1298
--# expr-start 1302 '<Map at nodes.lkt:2272:15>' Map_Result nodes.lkt:2272








   

   --# expr-start 1299 '<FieldAccess for traits at nodes.lkt:2272:15>' Fld_5 nodes.lkt:2272







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_5 := Create_Internal_Entity_Type_Ref_List (Node => Ent.Node.Basic_Class_Decl_F_Traits, Info => Ent.Info);
--# expr-done 1299









Fld_6 := Fld_5.Node;

   
      declare
         Map_Result_Vec : Lexical_Env_Vectors.Vector;
      begin
   

   

      if Fld_6 = null then
         
      Map_Result := Create_Lexical_Env_Array (0);
   
      else
         

      declare
         
         Collection : constant Bare_Type_Ref_List := Fld_6;
      begin
         for Untyped_Item_0 of
               Collection.Nodes (1 .. Children_Count (Collection))
         loop
                  
                  Bare_Item_0 := Untyped_Item_0; 
                  



Is_Null := Bare_Item_0 = null; 
if Is_Null then
   
   If_Result := No_Entity_Type_Ref;
else
   








Fld_7 := Fld_5.Info;

As_Entity := (Info => Fld_7, Node => Bare_Item_0); 
   If_Result := As_Entity;
end if;



                  Item_0 := If_Result; 

            
   --# scope-start


               --# bind t Item_0

            
         
         
      


--# expr-start 1300 '<FieldAccess for referenced_decl at nodes.lkt:2272:38>' Fld_8 nodes.lkt:2272







   if Item_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start TypeRef.referenced_decl
Fld_8 := Liblktlang.Implementation.Type_Ref_P_Referenced_Decl (Node => Item_0.Node, E_Info => Item_0.Info);
--# end
--# expr-done 1300
Var_Expr_48 := Fld_8;





if Var_Expr_48 /= No_Entity_Type_Decl then
   



   --# scope-start


   

--# expr-start 1301 '<FieldAccess for defined_scope at nodes.lkt:2272:38>' Fld_9 nodes.lkt:2272







   if Var_Expr_48.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]Decl.defined_scope'
Fld_9 := Liblktlang.Implementation.Dispatcher_Decl_P_Defined_Scope (Node => Var_Expr_48.Node, Origin => Origin, E_Info => Var_Expr_48.Info);
--# end
--# expr-done 1301
Scope_Result_2 := Fld_9;
   Inc_Ref (Scope_Result_2);


   --# end
      Finalizer_Scope_611;


   Result_Var_2 := Scope_Result_2;
else
   
   Result_Var_2 := Empty_Env;
end if;

      Inc_Ref (Result_Var_2);


      

         declare
            Item_To_Append : constant Lexical_Env := Result_Var_2;
         begin
               Inc_Ref (Item_To_Append);
            Lexical_Env_Vectors.Append (Map_Result_Vec, Item_To_Append);
         end;
   
   
   

            
   --# end
      Finalizer_Scope_610;



         end loop;
      end;
   
      end if;

   

         Map_Result := Create_Lexical_Env_Array
           (Items_Count => Natural (Lexical_Env_Vectors.Length (Map_Result_Vec)));
         for I in Map_Result.Items'Range loop
            Map_Result.Items (I) := Lexical_Env_Vectors.Get
              (Map_Result_Vec,
               I + Lexical_Env_Vectors.Index_Type'First - Map_Result.Items'First);
         end loop;
         Lexical_Env_Vectors.Destroy (Map_Result_Vec);

      end;
   



--# expr-done 1302
Concat_Result := Concat (Array_Lit, Map_Result); 

Group_Env := Group (Concat_Result, No_Metadata); 
--# expr-done 1303
Var_Expr_1 := Group_Env;

      Inc_Ref (Var_Expr_1);




if Var_Expr_1 /= Empty_Env then
   



   --# scope-start


   --# bind le Var_Expr_1

--# expr-start 1309 '<If at nodes.lkt:2277:13>' If_Result_1 nodes.lkt:2277



--# expr-start 1304 '<Eq at nodes.lkt:2277:16>' Is_Equiv nodes.lkt:2277






Cast_Expr := Ent; 



   
      Cast_Result_1 := Create_Internal_Entity
        (Node => Cast_Expr.Node,
         Info => Cast_Expr.Info);



Is_Equiv := Equivalent (Cast_Result_1, Origin); 
--# expr-done 1304
if Is_Equiv then
   --# expr-start 1308 '<env_group at nodes.lkt:2278:18>' Group_Env_1 nodes.lkt:2278
--# expr-start 1307 '<ArrayLiteral at nodes.lkt:2278:18>' Array_Lit_1 nodes.lkt:2278

--# expr-start 1306 '<FieldAccess for defined_scope at nodes.lkt:2278:23>' Fld_11 nodes.lkt:2278



--# expr-start 1305 '<FieldAccess for basic_trait_from_self at nodes.lkt:2278:23>' Fld_10 nodes.lkt:2278







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start TypeDecl.basic_trait_from_self
Fld_10 := Liblktlang.Implementation.Type_Decl_P_Basic_Trait_From_Self (Node => Ent.Node, E_Info => Ent.Info);
--# end
--# expr-done 1305



   if Fld_10.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]Decl.defined_scope'
Fld_11 := Liblktlang.Implementation.Dispatcher_Decl_P_Defined_Scope (Node => Fld_10.Node, Origin => Origin, E_Info => Fld_10.Info);
--# end
--# expr-done 1306
Array_Lit_1 := Create_Lexical_Env_Array (Internal_Lexical_Env_Array'(1 => Var_Expr_1, 2 => Fld_11)); 
--# expr-done 1307

Group_Env_1 := Group (Array_Lit_1, No_Metadata); 
--# expr-done 1308
   If_Result_1 := Group_Env_1;
else
   
   If_Result_1 := Var_Expr_1;
end if;

      Inc_Ref (If_Result_1);


--# expr-done 1309
Scope_Result_3 := If_Result_1;
   Inc_Ref (Scope_Result_3);


   --# end
      Finalizer_Scope_612;


   Result_Var_3 := Scope_Result_3;
else
   
   Result_Var_3 := Empty_Env;
end if;

      Inc_Ref (Result_Var_3);



         Property_Result := Result_Var_3;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_210;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_210;
                     Finalizer_Scope_609;
                     Finalizer_Scope_610;
                     Finalizer_Scope_611;
                     Finalizer_Scope_612;


               if Self /= null then
                     if not Self.Unit.Context.In_Populate_Lexical_Env then
                        Add_Memoized_Error
                          (Self.Unit, Mmz_Handle, Exc, Mmz_Stored);
                     end if;
               end if;


            raise;
      end;

      if Self /= null then
         if not Self.Unit.Context.In_Populate_Lexical_Env then

            Mmz_Val := (Kind => Mmz_Lexical_Env,
                        As_Lexical_Env => Property_Result);
            Add_Memoized_Value (Self.Unit, Mmz_Handle, Mmz_Val, Mmz_Stored);
               if Mmz_Stored then
                  Inc_Ref (Property_Result);
               end if;

         end if;
      end if;



   return Property_Result;
end Basic_Class_Decl_P_Defined_Scope;
--# end

   







--# property-start BasicClassDecl.defined_scope_as_entity nodes.lkt:2283
pragma Warnings (Off, "is not referenced");
 function Basic_Class_Decl_P_Defined_Scope_As_Entity
  
  (Node : Bare_Basic_Class_Decl
      ; Origin : Internal_Entity
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Lexical_Env
is
   Self : Bare_Basic_Class_Decl  := Bare_Basic_Class_Decl (Node);
     Ent : Internal_Entity_Basic_Class_Decl :=
       Internal_Entity_Basic_Class_Decl'(Node => Self, Info => E_Info);
      --# bind entity Ent

   

   --# bind origin Origin

   Property_Result : Lexical_Env;

      
            procedure Finalizer_Scope_211 with Inline_Always;
            procedure Finalizer_Scope_614 with Inline_Always;
            procedure Finalizer_Scope_615 with Inline_Always;
            procedure Finalizer_Scope_616 with Inline_Always;
            procedure Finalizer_Scope_617 with Inline_Always;

      Local_Entity : Internal_Entity_Basic_Class_Decl;
Var_Expr_1 : Lexical_Env := Empty_Env;
Var_Expr_49 : Internal_Entity_Type_Ref;
Var_Expr_50 : Internal_Entity_Named_Type_Decl;
Var_Expr_51 : Internal_Entity_Type_Decl;
Fld : Internal_Entity_Decl;
Fld_1 : Internal_Entity_Named_Type_Decl;
Fld_2 : Internal_Entity_Decl;
Fld_3 : Lexical_Env := Empty_Env;
Sym : Symbol_Type;
Env_Get_Result : Internal_Entity;
Cast_Result : Internal_Entity_Type_Decl;
Array_Lit : Internal_Entity_Type_Decl_Array_Access;
Fld_4 : Internal_Entity_Decl;
Cast_Result_1 : Internal_Entity_Type_Decl;
Array_Lit_1 : Internal_Entity_Type_Decl_Array_Access;
Fld_5 : Internal_Entity_Decl;
Cast_Result_2 : Internal_Entity_Basic_Class_Decl;
Fld_6 : Internal_Entity_Named_Type_Decl;
Fld_7 : Bare_Named_Type_Decl;
Cast_Expr : Bare_Basic_Class_Decl;
Cast_Result_3 : Bare_Named_Type_Decl;
Is_Equal : Boolean;
If_Result : Internal_Entity_Basic_Class_Decl;
Fld_8 : Internal_Entity_Decl_Block;
Fld_9 : Lexical_Env := Empty_Env;
Fld_10 : Internal_Entity_Type_Ref;
Fld_11 : Internal_Entity_Type_Decl;
Scope_Result : Internal_Entity_Type_Decl;
Result_Var : Internal_Entity_Type_Decl;
Cast_Result_4 : Internal_Entity_Named_Type_Decl;
Fld_12 : Lexical_Env := Empty_Env;
Scope_Result_1 : Lexical_Env := Empty_Env;
Result_Var_1 : Lexical_Env := Empty_Env;
Array_Lit_2 : Lexical_Env_Array_Access;
Fld_13 : Internal_Entity_Type_Ref_List;
Fld_14 : Bare_Type_Ref_List;
Fld_15 : Internal_Entity_Info;
Item_0 : Internal_Entity_Type_Ref;
Bare_Item_0 : Bare_Type_Ref;
Fld_16 : Internal_Entity_Type_Decl;
Fld_17 : Lexical_Env := Empty_Env;
Scope_Result_2 : Lexical_Env := Empty_Env;
Result_Var_2 : Lexical_Env := Empty_Env;
As_Entity : Internal_Entity_Type_Ref;
Is_Null : Boolean;
If_Result_1 : Internal_Entity_Type_Ref;
Map_Result : Lexical_Env_Array_Access;
Concat_Result : Lexical_Env_Array_Access;
Group_Env : Lexical_Env := Empty_Env;
Fld_18 : Internal_Entity_Type_Decl;
Fld_19 : Lexical_Env := Empty_Env;
Array_Lit_3 : Lexical_Env_Array_Access;
Group_Env_1 : Lexical_Env := Empty_Env;
Cast_Expr_1 : Internal_Entity_Basic_Class_Decl;
Cast_Result_5 : Internal_Entity;
Is_Equiv : Boolean;
If_Result_2 : Lexical_Env := Empty_Env;
Scope_Result_3 : Lexical_Env := Empty_Env;
Result_Var_3 : Lexical_Env := Empty_Env;
Let_Result : Lexical_Env := Empty_Env;

            procedure Finalizer_Scope_211 is
            begin
                     Dec_Ref (Fld_3);
                     Dec_Ref (Array_Lit);
                     Dec_Ref (Array_Lit_1);
                     Dec_Ref (Fld_9);
                     Dec_Ref (Scope_Result_1);
                     Dec_Ref (Result_Var_1);
                     Dec_Ref (Array_Lit_2);
                     Dec_Ref (Map_Result);
                     Dec_Ref (Concat_Result);
                     Dec_Ref (Group_Env);
                     Dec_Ref (Scope_Result_3);
                     Dec_Ref (Result_Var_3);
                     Dec_Ref (Let_Result);
            end Finalizer_Scope_211;
            procedure Finalizer_Scope_614 is
            begin
                     Dec_Ref (Fld_12);
            end Finalizer_Scope_614;
            procedure Finalizer_Scope_615 is
            begin
                     Dec_Ref (Scope_Result_2);
                     Dec_Ref (Result_Var_2);
            end Finalizer_Scope_615;
            procedure Finalizer_Scope_616 is
            begin
                     Dec_Ref (Fld_17);
            end Finalizer_Scope_616;
            procedure Finalizer_Scope_617 is
            begin
                     Dec_Ref (Var_Expr_1);
                     Dec_Ref (Fld_19);
                     Dec_Ref (Array_Lit_3);
                     Dec_Ref (Group_Env_1);
                     Dec_Ref (If_Result_2);
            end Finalizer_Scope_617;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 1345 '<Let at nodes.lkt:2284:9>' Let_Result nodes.lkt:2284
--# scope-start
--# expr-start 1326 '<If at nodes.lkt:2285:13>' If_Result nodes.lkt:2285



--# expr-start 1312 '<Eq at nodes.lkt:2285:16>' Is_Equal nodes.lkt:2285






Cast_Expr := Self; 



   
      Cast_Result_3 := Cast_Expr;


--# expr-start 1311 '<FieldAccess for node at nodes.lkt:2285:24>' Fld_7 nodes.lkt:2285



--# expr-start 1310 '<FieldAccess for astlist_type at nodes.lkt:2285:24>' Fld_6 nodes.lkt:2285







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start LktNode.astlist_type
Fld_6 := Liblktlang.Implementation.Lkt_Node_P_Astlist_Type (Node => Self);
--# end
--# expr-done 1310





Fld_7 := Fld_6.Node;
--# expr-done 1311
Is_Equal := Cast_Result_3 = Fld_7; 
--# expr-done 1312
if Is_Equal then
   --# expr-start 1325 '<Cast to BasicClassDecl at nodes.lkt:2287:17>' Cast_Result_2 nodes.lkt:2287





--# expr-start 1324 '<FieldAccess for instantiate_generic_decl at nodes.lkt:2287:17>' Fld_5 nodes.lkt:2287



--# expr-start 1313 '<FieldAccess for as_bare_decl at nodes.lkt:2287:17>' Fld nodes.lkt:2287







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start Decl.as_bare_decl
Fld := Liblktlang.Implementation.Decl_P_As_Bare_Decl (Node => Ent.Node, E_Info => Ent.Info);
--# end
--# expr-done 1313



   if Fld.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# expr-start 1323 '<ArrayLiteral at nodes.lkt:2288:21>' Array_Lit_1 nodes.lkt:2288
--# expr-start 1322 '<Cast to TypeDecl at nodes.lkt:2289:25>' Cast_Result_1 nodes.lkt:2289





--# expr-start 1321 '<FieldAccess for instantiate_generic_decl at nodes.lkt:2289:25>' Fld_4 nodes.lkt:2289



--# expr-start 1315 '<FieldAccess for as_bare_decl at nodes.lkt:2289:25>' Fld_2 nodes.lkt:2289



--# expr-start 1314 '<FieldAccess for entity_type at nodes.lkt:2289:25>' Fld_1 nodes.lkt:2289







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start LktNode.entity_type
Fld_1 := Liblktlang.Implementation.Lkt_Node_P_Entity_Type (Node => Ent.Node);
--# end
--# expr-done 1314



   if Fld_1.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start Decl.as_bare_decl
Fld_2 := Liblktlang.Implementation.Decl_P_As_Bare_Decl (Node => Fld_1.Node, E_Info => Fld_1.Info);
--# end
--# expr-done 1315



   if Fld_2.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# expr-start 1320 '<ArrayLiteral at nodes.lkt:2291:29>' Array_Lit nodes.lkt:2291
--# expr-start 1319 '<Cast to TypeDecl at nodes.lkt:2291:30>' Cast_Result nodes.lkt:2291





--# expr-start 1318 '<EnvGet at nodes.lkt:2291:30>' Env_Get_Result nodes.lkt:2291
--# expr-start 1316 '<FieldAccess for node_env at nodes.lkt:2291:30>' Fld_3 nodes.lkt:2291







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_3 := Liblktlang.Implementation.Node_Env (Node => Ent.Node, E_Info => Ent.Info);
--# expr-done 1316
--# expr-start 1317 '<Symbol T at nodes.lkt:2291:54>' Sym nodes.lkt:2291
Sym := Precomputed_Symbol (Precomputed_Symbol_Table (Self.Unit.Context.Symbols), Precomputed_Sym_T); 
--# expr-done 1317


Env_Get_Result := AST_Envs.Get_First (Self => Fld_3, Key => Thin (Sym), Lookup_Kind => To_Lookup_Kind_Type (Recursive), Categories => (Nocat => True)); 
--# expr-done 1318



   if Env_Get_Result.Node = null
      or else Env_Get_Result.Node.Kind in Lkt_Type_Decl
   then
      
      Cast_Result := Create_Internal_Entity_Type_Decl
        (Node => Env_Get_Result.Node,
         Info => Env_Get_Result.Info);

   else
         Cast_Result := No_Entity_Type_Decl;
   end if;


--# expr-done 1319
Array_Lit := Create_Internal_Entity_Type_Decl_Array (Internal_Internal_Entity_Type_Decl_Array'(1 => Cast_Result)); 
--# expr-done 1320
--# property-call-start Decl.instantiate_generic_decl
Fld_4 := Liblktlang.Implementation.Decl_P_Instantiate_Generic_Decl (Node => Fld_2.Node, Type_Params => Array_Lit, E_Info => Fld_2.Info);
--# end
--# expr-done 1321



   if Fld_4.Node = null
      or else Fld_4.Node.Kind in Lkt_Type_Decl
   then
      
      Cast_Result_1 := Create_Internal_Entity_Type_Decl
        (Node => Fld_4.Node,
         Info => Fld_4.Info);

   else
         Cast_Result_1 := No_Entity_Type_Decl;
   end if;


--# expr-done 1322
Array_Lit_1 := Create_Internal_Entity_Type_Decl_Array (Internal_Internal_Entity_Type_Decl_Array'(1 => Cast_Result_1)); 
--# expr-done 1323
--# property-call-start Decl.instantiate_generic_decl
Fld_5 := Liblktlang.Implementation.Decl_P_Instantiate_Generic_Decl (Node => Fld.Node, Type_Params => Array_Lit_1, E_Info => Fld.Info);
--# end
--# expr-done 1324



   if Fld_5.Node = null
      or else Fld_5.Node.Kind in Lkt_Basic_Class_Decl
   then
      
      Cast_Result_2 := Create_Internal_Entity_Basic_Class_Decl
        (Node => Fld_5.Node,
         Info => Fld_5.Info);

   else
         Cast_Result_2 := No_Entity_Basic_Class_Decl;
   end if;


--# expr-done 1325
   If_Result := Cast_Result_2;
else
   
   If_Result := Ent;
end if;



--# expr-done 1326
Local_Entity := If_Result; 
--# bind entity Local_Entity



--# expr-start 1338 '<env_group at nodes.lkt:2299:9>' Group_Env nodes.lkt:2299
--# expr-start 1333 '<ArrayLiteral at nodes.lkt:2300:13>' Array_Lit_2 nodes.lkt:2300
--# expr-start 1328 '<FieldAccess for children_env at nodes.lkt:2301:17>' Fld_9 nodes.lkt:2301



--# expr-start 1327 '<FieldAccess for decls at nodes.lkt:2301:17>' Fld_8 nodes.lkt:2301







   if Local_Entity.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_8 := Create_Internal_Entity_Decl_Block (Node => Implementation.Named_Type_Decl_F_Decls (Local_Entity.Node), Info => Local_Entity.Info);
--# expr-done 1327



   if Fld_8.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_9 := Liblktlang.Implementation.Children_Env (Node => Fld_8.Node, E_Info => Fld_8.Info);
--# expr-done 1328



--# expr-start 1331 '<Cast to NamedTypeDecl at nodes.lkt:2302:17>' Cast_Result_4 nodes.lkt:2302








--# expr-start 1329 '<FieldAccess for base_type at nodes.lkt:2302:17>' Fld_10 nodes.lkt:2302







   if Local_Entity.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start TypeDecl.base_type
Fld_10 := Liblktlang.Implementation.Type_Decl_P_Base_Type (Node => Local_Entity.Node, E_Info => Local_Entity.Info);
--# end
--# expr-done 1329
Var_Expr_49 := Fld_10;





if Var_Expr_49 /= No_Entity_Type_Ref then
   



   --# scope-start


   

--# expr-start 1330 '<FieldAccess for referenced_decl at nodes.lkt:2302:17>' Fld_11 nodes.lkt:2302







   if Var_Expr_49.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start TypeRef.referenced_decl
Fld_11 := Liblktlang.Implementation.Type_Ref_P_Referenced_Decl (Node => Var_Expr_49.Node, E_Info => Var_Expr_49.Info);
--# end
--# expr-done 1330
Scope_Result := Fld_11;


   --# end


   Result_Var := Scope_Result;
else
   
   Result_Var := No_Entity_Type_Decl;
end if;






   if Result_Var.Node = null
      or else Result_Var.Node.Kind in Lkt_Named_Type_Decl
   then
      
      Cast_Result_4 := Create_Internal_Entity_Named_Type_Decl
        (Node => Result_Var.Node,
         Info => Result_Var.Info);

   else
         Cast_Result_4 := No_Entity_Named_Type_Decl;
   end if;


--# expr-done 1331
Var_Expr_50 := Cast_Result_4;





if Var_Expr_50 /= No_Entity_Named_Type_Decl then
   



   --# scope-start


   

--# expr-start 1332 '<FieldAccess for defined_scope_as_entity at nodes.lkt:2302:17>' Fld_12 nodes.lkt:2302







   if Var_Expr_50.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]Decl.defined_scope_as_entity'
Fld_12 := Liblktlang.Implementation.Dispatcher_Decl_P_Defined_Scope_As_Entity (Node => Var_Expr_50.Node, Origin => Origin, E_Info => Var_Expr_50.Info);
--# end
--# expr-done 1332
Scope_Result_1 := Fld_12;
   Inc_Ref (Scope_Result_1);


   --# end
      Finalizer_Scope_614;


   Result_Var_1 := Scope_Result_1;
else
   
   Result_Var_1 := Empty_Env;
end if;

      Inc_Ref (Result_Var_1);


Array_Lit_2 := Create_Lexical_Env_Array (Internal_Lexical_Env_Array'(1 => Fld_9, 2 => Result_Var_1)); 
--# expr-done 1333
--# expr-start 1337 '<Map at nodes.lkt:2306:15>' Map_Result nodes.lkt:2306








   

   --# expr-start 1334 '<FieldAccess for traits at nodes.lkt:2306:15>' Fld_13 nodes.lkt:2306







   if Local_Entity.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_13 := Create_Internal_Entity_Type_Ref_List (Node => Local_Entity.Node.Basic_Class_Decl_F_Traits, Info => Local_Entity.Info);
--# expr-done 1334









Fld_14 := Fld_13.Node;

   
      declare
         Map_Result_Vec : Lexical_Env_Vectors.Vector;
      begin
   

   

      if Fld_14 = null then
         
      Map_Result := Create_Lexical_Env_Array (0);
   
      else
         

      declare
         
         Collection : constant Bare_Type_Ref_List := Fld_14;
      begin
         for Untyped_Item_0 of
               Collection.Nodes (1 .. Children_Count (Collection))
         loop
                  
                  Bare_Item_0 := Untyped_Item_0; 
                  



Is_Null := Bare_Item_0 = null; 
if Is_Null then
   
   If_Result_1 := No_Entity_Type_Ref;
else
   








Fld_15 := Fld_13.Info;

As_Entity := (Info => Fld_15, Node => Bare_Item_0); 
   If_Result_1 := As_Entity;
end if;



                  Item_0 := If_Result_1; 

            
   --# scope-start


               --# bind t Item_0

            
         
         
      


--# expr-start 1335 '<FieldAccess for referenced_decl at nodes.lkt:2307:24>' Fld_16 nodes.lkt:2307







   if Item_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start TypeRef.referenced_decl
Fld_16 := Liblktlang.Implementation.Type_Ref_P_Referenced_Decl (Node => Item_0.Node, E_Info => Item_0.Info);
--# end
--# expr-done 1335
Var_Expr_51 := Fld_16;





if Var_Expr_51 /= No_Entity_Type_Decl then
   



   --# scope-start


   

--# expr-start 1336 '<FieldAccess for defined_scope_as_entity at nodes.lkt:2307:24>' Fld_17 nodes.lkt:2307







   if Var_Expr_51.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]Decl.defined_scope_as_entity'
Fld_17 := Liblktlang.Implementation.Dispatcher_Decl_P_Defined_Scope_As_Entity (Node => Var_Expr_51.Node, Origin => Origin, E_Info => Var_Expr_51.Info);
--# end
--# expr-done 1336
Scope_Result_2 := Fld_17;
   Inc_Ref (Scope_Result_2);


   --# end
      Finalizer_Scope_616;


   Result_Var_2 := Scope_Result_2;
else
   
   Result_Var_2 := Empty_Env;
end if;

      Inc_Ref (Result_Var_2);


      

         declare
            Item_To_Append : constant Lexical_Env := Result_Var_2;
         begin
               Inc_Ref (Item_To_Append);
            Lexical_Env_Vectors.Append (Map_Result_Vec, Item_To_Append);
         end;
   
   
   

            
   --# end
      Finalizer_Scope_615;



         end loop;
      end;
   
      end if;

   

         Map_Result := Create_Lexical_Env_Array
           (Items_Count => Natural (Lexical_Env_Vectors.Length (Map_Result_Vec)));
         for I in Map_Result.Items'Range loop
            Map_Result.Items (I) := Lexical_Env_Vectors.Get
              (Map_Result_Vec,
               I + Lexical_Env_Vectors.Index_Type'First - Map_Result.Items'First);
         end loop;
         Lexical_Env_Vectors.Destroy (Map_Result_Vec);

      end;
   



--# expr-done 1337
Concat_Result := Concat (Array_Lit_2, Map_Result); 

Group_Env := Group (Concat_Result, No_Metadata); 
--# expr-done 1338
Var_Expr_1 := Group_Env;

      Inc_Ref (Var_Expr_1);




if Var_Expr_1 /= Empty_Env then
   



   --# scope-start


   --# bind le Var_Expr_1

--# expr-start 1344 '<If at nodes.lkt:2313:13>' If_Result_2 nodes.lkt:2313



--# expr-start 1339 '<Eq at nodes.lkt:2313:16>' Is_Equiv nodes.lkt:2313






Cast_Expr_1 := Ent; 



   
      Cast_Result_5 := Create_Internal_Entity
        (Node => Cast_Expr_1.Node,
         Info => Cast_Expr_1.Info);



Is_Equiv := Equivalent (Cast_Result_5, Origin); 
--# expr-done 1339
if Is_Equiv then
   --# expr-start 1343 '<env_group at nodes.lkt:2315:17>' Group_Env_1 nodes.lkt:2315
--# expr-start 1342 '<ArrayLiteral at nodes.lkt:2315:17>' Array_Lit_3 nodes.lkt:2315

--# expr-start 1341 '<FieldAccess for defined_scope at nodes.lkt:2315:22>' Fld_19 nodes.lkt:2315



--# expr-start 1340 '<FieldAccess for basic_trait_from_self at nodes.lkt:2315:22>' Fld_18 nodes.lkt:2315







   if Local_Entity.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start TypeDecl.basic_trait_from_self
Fld_18 := Liblktlang.Implementation.Type_Decl_P_Basic_Trait_From_Self (Node => Local_Entity.Node, E_Info => Local_Entity.Info);
--# end
--# expr-done 1340



   if Fld_18.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]Decl.defined_scope'
Fld_19 := Liblktlang.Implementation.Dispatcher_Decl_P_Defined_Scope (Node => Fld_18.Node, Origin => Origin, E_Info => Fld_18.Info);
--# end
--# expr-done 1341
Array_Lit_3 := Create_Lexical_Env_Array (Internal_Lexical_Env_Array'(1 => Var_Expr_1, 2 => Fld_19)); 
--# expr-done 1342

Group_Env_1 := Group (Array_Lit_3, No_Metadata); 
--# expr-done 1343
   If_Result_2 := Group_Env_1;
else
   
   If_Result_2 := Var_Expr_1;
end if;

      Inc_Ref (If_Result_2);


--# expr-done 1344
Scope_Result_3 := If_Result_2;
   Inc_Ref (Scope_Result_3);


   --# end
      Finalizer_Scope_617;


   Result_Var_3 := Scope_Result_3;
else
   
   Result_Var_3 := Empty_Env;
end if;

      Inc_Ref (Result_Var_3);


Let_Result := Result_Var_3; Inc_Ref (Let_Result);
--# end
--# expr-done 1345

         Property_Result := Let_Result;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_211;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_211;
                     Finalizer_Scope_614;
                     Finalizer_Scope_615;
                     Finalizer_Scope_616;
                     Finalizer_Scope_617;




            raise;
      end;



   return Property_Result;
end Basic_Class_Decl_P_Defined_Scope_As_Entity;
--# end

   







--# property-start BasicClassDecl.common_ancestor nodes.lkt:2321
pragma Warnings (Off, "is not referenced");
 function Basic_Class_Decl_P_Common_Ancestor
  
  (Node : Bare_Basic_Class_Decl
      ; Other : Internal_Entity_Type_Decl
      ; Imprecise : Boolean
         := False
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Internal_Entity_Type_Decl
is
   Self : Bare_Basic_Class_Decl  := Bare_Basic_Class_Decl (Node);
     Ent : Internal_Entity_Basic_Class_Decl :=
       Internal_Entity_Basic_Class_Decl'(Node => Self, Info => E_Info);
      --# bind entity Ent

   

   --# bind other Other
   --# bind imprecise Imprecise

   Property_Result : Internal_Entity_Type_Decl;

      
            procedure Finalizer_Scope_212 with Inline_Always;
            procedure Finalizer_Scope_618 with Inline_Always;
            procedure Finalizer_Scope_619 with Inline_Always;

      Local_Other_Bases : Internal_Entity_Type_Decl_Array_Access;
Var_Expr_1 : Internal_Entity_Type_Decl;
Var_Expr_52 : Internal_Entity_Type_Decl;
Var_Expr_53 : Internal_Entity_Basic_Class_Decl;
Fld : Internal_Entity_Type_Decl_Array_Access;
Scope_Result : Internal_Entity_Type_Decl_Array_Access;
Result_Var : Internal_Entity_Type_Decl_Array_Access;
Fld_1 : Internal_Entity_Type_Decl_Array_Access;
Cast_Expr : Internal_Entity_Type_Decl;
Cast_Result : Internal_Entity;
Cast_Expr_1 : Internal_Entity_Type_Decl;
Cast_Result_1 : Internal_Entity;
Is_Equiv : Boolean;
Quantifier_Result : Boolean;
Find_Result : Internal_Entity_Type_Decl;
Scope_Result_1 : Internal_Entity_Type_Decl;
Result_Var_1 : Internal_Entity_Type_Decl;
Is_Null : Boolean;
If_Result : Internal_Entity_Type_Decl;
Scope_Result_2 : Internal_Entity_Type_Decl;
Cast_Expr_2 : Internal_Entity_Basic_Class_Decl;
Cast_Result_2 : Internal_Entity_Type_Decl;
Is_Null_1 : Boolean;
If_Result_1 : Internal_Entity_Type_Decl;
If_Result_2 : Internal_Entity_Type_Decl;
Result_Var_2 : Internal_Entity_Type_Decl;
Let_Result : Internal_Entity_Type_Decl;

            procedure Finalizer_Scope_212 is
            begin
                     Dec_Ref (Scope_Result);
                     Dec_Ref (Result_Var);
                     Dec_Ref (Local_Other_Bases);
            end Finalizer_Scope_212;
            procedure Finalizer_Scope_618 is
            begin
                     Dec_Ref (Fld);
            end Finalizer_Scope_618;
            procedure Finalizer_Scope_619 is
            begin
                     Dec_Ref (Fld_1);
            end Finalizer_Scope_619;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 1356 '<Let at nodes.lkt:2325:9>' Let_Result nodes.lkt:2325
--# scope-start




Var_Expr_52 := Other;





if Var_Expr_52 /= No_Entity_Type_Decl then
   



   --# scope-start


   

--# expr-start 1346 '<FieldAccess for base_types at nodes.lkt:2325:27>' Fld nodes.lkt:2325







   if Var_Expr_52.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;



--# property-call-start '[dispatcher]TypeDecl.base_types'
Fld := Liblktlang.Implementation.Dispatcher_Type_Decl_P_Base_Types (Node => Var_Expr_52.Node, Include_Self => True, E_Info => Var_Expr_52.Info);
--# end
--# expr-done 1346
Scope_Result := Fld;
   Inc_Ref (Scope_Result);


   --# end
      Finalizer_Scope_618;


   Result_Var := Scope_Result;
else
   
   Result_Var := No_Internal_Entity_Type_Decl_Array_Type;
end if;

      Inc_Ref (Result_Var);


Local_Other_Bases := Result_Var; Inc_Ref (Local_Other_Bases);
--# bind other_bases Local_Other_Bases



--# expr-start 1352 '<If at nodes.lkt:2328:13>' If_Result nodes.lkt:2328



--# expr-start 1347 '<IsNull at nodes.lkt:2328:16>' Is_Null nodes.lkt:2328

Is_Null := Other.Node = null; 
--# expr-done 1347
if Is_Null then
   
   If_Result := No_Entity_Type_Decl;
else
   



Var_Expr_53 := Ent;





if Var_Expr_53 /= No_Entity_Basic_Class_Decl then
   



   --# scope-start


   

--# expr-start 1351 '<Find at nodes.lkt:2329:18>' Find_Result nodes.lkt:2329








   

   --# expr-start 1348 '<FieldAccess for base_types at nodes.lkt:2329:18>' Fld_1 nodes.lkt:2329







   if Var_Expr_53.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;



--# property-call-start '[dispatcher]TypeDecl.base_types'
Fld_1 := Liblktlang.Implementation.Dispatcher_Type_Decl_P_Base_Types (Node => Var_Expr_53.Node, Include_Self => True, E_Info => Var_Expr_53.Info);
--# end
--# expr-done 1348

   
      Find_Result := No_Entity_Type_Decl;
   

   

      

      declare
         
         Collection : constant Internal_Entity_Type_Decl_Array_Access := Fld_1;
      begin
         for Item_0 of
               Collection.Items
         loop

            
   --# scope-start


               --# bind b Item_0

            
      --# expr-start 1350 '<Contains at nodes.lkt:2329:53>' Quantifier_Result nodes.lkt:2329








   

   

   
      Quantifier_Result := False;
   

   

      

      declare
         
         Collection : constant Internal_Entity_Type_Decl_Array_Access := Local_Other_Bases;
      begin
         for Item_2 of
               Collection.Items
         loop

            
   --# scope-start


               --# bind item Item_2

            
      --# expr-start 1349 '<Eq at ???>' Is_Equiv None






Cast_Expr := Item_2; 



   
      Cast_Result := Create_Internal_Entity
        (Node => Cast_Expr.Node,
         Info => Cast_Expr.Info);








Cast_Expr_1 := Item_0; 



   
      Cast_Result_1 := Create_Internal_Entity
        (Node => Cast_Expr_1.Node,
         Info => Cast_Expr_1.Info);


Is_Equiv := Equivalent (Cast_Result, Cast_Result_1); 
--# expr-done 1349
      Quantifier_Result := Is_Equiv;
   

            
   --# end


               exit when Quantifier_Result;

         end loop;
      end;
   

   
   



--# expr-done 1350
      if Quantifier_Result then
         Find_Result := Item_0; 
      end if;
   

            
   --# end


               exit when Quantifier_Result;

         end loop;
      end;
   

   
   



--# expr-done 1351
Scope_Result_1 := Find_Result;


   --# end
      Finalizer_Scope_619;


   Result_Var_1 := Scope_Result_1;
else
   
   Result_Var_1 := No_Entity_Type_Decl;
end if;



   If_Result := Result_Var_1;
end if;



--# expr-done 1352
Var_Expr_1 := If_Result;





if Var_Expr_1 /= No_Entity_Type_Decl then
   



   --# scope-start


   --# bind ca Var_Expr_1


Scope_Result_2 := Var_Expr_1;


   --# end


   Result_Var_2 := Scope_Result_2;
else
   --# expr-start 1355 '<If at nodes.lkt:2333:25>' If_Result_2 nodes.lkt:2333




if Imprecise then
   --# expr-start 1354 '<If at nodes.lkt:2333:43>' If_Result_1 nodes.lkt:2333



--# expr-start 1353 '<IsNull at nodes.lkt:2333:46>' Is_Null_1 nodes.lkt:2333

Is_Null_1 := Ent.Node = null; 
--# expr-done 1353
if Is_Null_1 then
   
   If_Result_1 := Other;
else
   





Cast_Expr_2 := Ent; 



   
      Cast_Result_2 := Create_Internal_Entity_Type_Decl
        (Node => Cast_Expr_2.Node,
         Info => Cast_Expr_2.Info);


   If_Result_1 := Cast_Result_2;
end if;



--# expr-done 1354
   If_Result_2 := If_Result_1;
else
   
   If_Result_2 := No_Entity_Type_Decl;
end if;



--# expr-done 1355
   Result_Var_2 := If_Result_2;
end if;



Let_Result := Result_Var_2; 
--# end
--# expr-done 1356

         Property_Result := Let_Result;
         
   --# end
      Finalizer_Scope_212;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_212;
                     Finalizer_Scope_618;
                     Finalizer_Scope_619;




            raise;
      end;



   return Property_Result;
end Basic_Class_Decl_P_Common_Ancestor;
--# end



   


      

   --
   --  Primitives for Bare_Class_Decl
   --

   



      
      procedure Initialize_Fields_For_Class_Decl
        (Self : Bare_Class_Decl
         ; Basic_Class_Decl_F_Syn_Name : Bare_Def_Id
         ; Basic_Class_Decl_F_Syn_Base_Type : Bare_Type_Ref
         ; Basic_Class_Decl_F_Traits : Bare_Type_Ref_List
         ; Class_Decl_F_Decls : Bare_Decl_Block
        ) is
      begin
            Initialize_Fields_For_Basic_Class_Decl
              (Self, Basic_Class_Decl_F_Syn_Name, Basic_Class_Decl_F_Syn_Base_Type, Basic_Class_Decl_F_Traits);

            Self.Class_Decl_F_Decls := Class_Decl_F_Decls;
         

      end Initialize_Fields_For_Class_Decl;


   







--# property-start ClassDecl.decl_type_name nodes.lkt:2345
pragma Warnings (Off, "is not referenced");
 function Class_Decl_P_Decl_Type_Name
  
  (Node : Bare_Class_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return String_Type
is
   Self : Bare_Class_Decl  := Bare_Class_Decl (Node);
      --# bind self Self

   


   Property_Result : String_Type;

      
            procedure Finalizer_Scope_213 with Inline_Always;

      Str : String_Type;

            procedure Finalizer_Scope_213 is
            begin
                     Dec_Ref (Str);
            end Finalizer_Scope_213;


begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         --# expr-start 1357 '<String at nodes.lkt:2345:36>' Str nodes.lkt:2345
Str := Create_String ("class declaration"); 
--# expr-done 1357

         Property_Result := Str;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_213;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_213;




            raise;
      end;



   return Property_Result;
end Class_Decl_P_Decl_Type_Name;
--# end

   







--# property-start ClassDecl.constructor_fields nodes.lkt:2349
pragma Warnings (Off, "is not referenced");
 function Class_Decl_P_Constructor_Fields
  
  (Node : Bare_Class_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Internal_Entity_Field_Decl_Array_Access
is
   Self : Bare_Class_Decl  := Bare_Class_Decl (Node);
     Ent : Internal_Entity_Class_Decl :=
       Internal_Entity_Class_Decl'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Internal_Entity_Field_Decl_Array_Access;

      
            procedure Finalizer_Scope_214 with Inline_Always;
            procedure Finalizer_Scope_623 with Inline_Always;

      Fld : Internal_Entity_Type_Decl_Array_Access;
Cast_Expr : Internal_Entity_Type_Decl;
Cast_Result : Internal_Entity_Class_Decl;
Fld_1 : Internal_Entity_Decl_Block;
Fld_2 : Bare_Decl_Block;
Fld_3 : Internal_Entity_Info;
Item_1 : Internal_Entity_Full_Decl;
Bare_Item_1 : Bare_Full_Decl;
Fld_4 : Internal_Entity_Decl;
Cast_Result_1 : Internal_Entity_Field_Decl;
As_Entity : Internal_Entity_Full_Decl;
Is_Null : Boolean;
If_Result : Internal_Entity_Full_Decl;
Fld_5 : Internal_Entity_Decl;
Is_A : Boolean;
Sym : Symbol_Type;
Fld_6 : Boolean;
Not_Val : Boolean;
Sym_1 : Symbol_Type;
Fld_7 : Boolean;
Not_Val_1 : Boolean;
If_Result_1 : Boolean;
Sym_2 : Symbol_Type;
Fld_8 : Boolean;
If_Result_2 : Boolean;
If_Result_3 : Boolean;
Map_Result : Internal_Entity_Field_Decl_Array_Access;
Map_Result_1 : Internal_Entity_Field_Decl_Array_Access;

            procedure Finalizer_Scope_214 is
            begin
                     Dec_Ref (Fld);
                     Dec_Ref (Map_Result_1);
            end Finalizer_Scope_214;
            procedure Finalizer_Scope_623 is
            begin
                     Dec_Ref (Map_Result);
            end Finalizer_Scope_623;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 1377 '<Mapcat at nodes.lkt:2350:9>' Map_Result_1 nodes.lkt:2350








   

   --# expr-start 1358 '<FieldAccess for base_types at nodes.lkt:2350:9>' Fld nodes.lkt:2350







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;



--# property-call-start '[dispatcher]TypeDecl.base_types'
Fld := Liblktlang.Implementation.Dispatcher_Type_Decl_P_Base_Types (Node => Ent.Node, Include_Self => True, E_Info => Ent.Info);
--# end
--# expr-done 1358

   
      declare
         Map_Result_1_Vec : Internal_Entity_Field_Decl_Vectors.Vector;
      begin
   

   

      

      declare
         
         Collection : constant Internal_Entity_Type_Decl_Array_Access := Fld;
      begin
         for Item_0 of
               Collection.Items
         loop

            
   --# scope-start


               --# bind base Item_0

            
         
         
      --# expr-start 1376 '<Map at nodes.lkt:2352:13>' Map_Result nodes.lkt:2352








   

   --# expr-start 1360 '<FieldAccess for decls at nodes.lkt:2352:13>' Fld_1 nodes.lkt:2352



--# expr-start 1359 '<Cast to ClassDecl at nodes.lkt:2352:13>' Cast_Result nodes.lkt:2352






Cast_Expr := Item_0; 



   if Cast_Expr.Node = null
      or else Cast_Expr.Node.Kind in Lkt_Class_Decl_Range
   then
      
      Cast_Result := Create_Internal_Entity_Class_Decl
        (Node => Cast_Expr.Node,
         Info => Cast_Expr.Info);

   else
         Cast_Result := No_Entity_Class_Decl;
   end if;


--# expr-done 1359



   if Cast_Result.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_1 := Create_Internal_Entity_Decl_Block (Node => Cast_Result.Node.Class_Decl_F_Decls, Info => Cast_Result.Info);
--# expr-done 1360









Fld_2 := Fld_1.Node;

   
      declare
         Map_Result_Vec : Internal_Entity_Field_Decl_Vectors.Vector;
      begin
   

   

      if Fld_2 = null then
         
      Map_Result := Create_Internal_Entity_Field_Decl_Array (0);
   
      else
         

      declare
         
         Collection : constant Bare_Decl_Block := Fld_2;
      begin
         for Untyped_Item_1 of
               Collection.Nodes (1 .. Children_Count (Collection))
         loop
                  
                  Bare_Item_1 := Untyped_Item_1; 
                  



Is_Null := Bare_Item_1 = null; 
if Is_Null then
   
   If_Result := No_Entity_Full_Decl;
else
   








Fld_3 := Fld_1.Info;

As_Entity := (Info => Fld_3, Node => Bare_Item_1); 
   If_Result := As_Entity;
end if;



                  Item_1 := If_Result; 

            
   --# scope-start


               --# bind d Item_1

            
         --# expr-start 1373 '<BooleanBinaryOp And at nodes.lkt:2355:17>' If_Result_3 nodes.lkt:2355



--# expr-start 1362 '<IsA FieldDecl at nodes.lkt:2355:17>' Is_A nodes.lkt:2355
--# expr-start 1361 '<FieldAccess for decl at nodes.lkt:2355:17>' Fld_5 nodes.lkt:2355







   if Item_1.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_5 := Create_Internal_Entity_Decl (Node => Item_1.Node.Full_Decl_F_Decl, Info => Item_1.Info);
--# expr-done 1361
Is_A := Fld_5.Node /= null 
and then Fld_5.Node.Kind in Lkt_Field_Decl_Range; 
--# expr-done 1362
if Is_A then
   --# expr-start 1372 '<If at nodes.lkt:2357:21>' If_Result_2 nodes.lkt:2357



--# expr-start 1364 '<FieldAccess for has_annotation at nodes.lkt:2357:24>' Fld_8 nodes.lkt:2357







   if Item_1.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# expr-start 1363 '<Symbol parse_field at nodes.lkt:2357:41>' Sym_2 nodes.lkt:2357
Sym_2 := Precomputed_Symbol (Precomputed_Symbol_Table (Self.Unit.Context.Symbols), Precomputed_Sym_Parse_Field); 
--# expr-done 1363
--# property-call-start FullDecl.has_annotation
Fld_8 := Liblktlang.Implementation.Full_Decl_P_Has_Annotation (Node => Item_1.Node, Name => Sym_2);
--# end
--# expr-done 1364
if Fld_8 then
   --# expr-start 1371 '<BooleanBinaryOp And at nodes.lkt:2359:25>' If_Result_1 nodes.lkt:2359



--# expr-start 1367 '<Not at nodes.lkt:2359:25>' Not_Val nodes.lkt:2359
--# expr-start 1366 '<FieldAccess for has_annotation at nodes.lkt:2359:29>' Fld_6 nodes.lkt:2359







   if Item_1.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# expr-start 1365 '<Symbol abstract at nodes.lkt:2359:46>' Sym nodes.lkt:2359
Sym := Precomputed_Symbol (Precomputed_Symbol_Table (Self.Unit.Context.Symbols), Precomputed_Sym_Abstract); 
--# expr-done 1365
--# property-call-start FullDecl.has_annotation
Fld_6 := Liblktlang.Implementation.Full_Decl_P_Has_Annotation (Node => Item_1.Node, Name => Sym);
--# end
--# expr-done 1366
Not_Val := not (Fld_6); 
--# expr-done 1367
if Not_Val then
   --# expr-start 1370 '<Not at nodes.lkt:2360:29>' Not_Val_1 nodes.lkt:2360
--# expr-start 1369 '<FieldAccess for has_annotation at nodes.lkt:2360:33>' Fld_7 nodes.lkt:2360







   if Item_1.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# expr-start 1368 '<Symbol null_field at nodes.lkt:2360:50>' Sym_1 nodes.lkt:2360
Sym_1 := Precomputed_Symbol (Precomputed_Symbol_Table (Self.Unit.Context.Symbols), Precomputed_Sym_Null_Field); 
--# expr-done 1368
--# property-call-start FullDecl.has_annotation
Fld_7 := Liblktlang.Implementation.Full_Decl_P_Has_Annotation (Node => Item_1.Node, Name => Sym_1);
--# end
--# expr-done 1369
Not_Val_1 := not (Fld_7); 
--# expr-done 1370
   If_Result_1 := Not_Val_1;
else
   
   If_Result_1 := False;
end if;



--# expr-done 1371
   If_Result_2 := If_Result_1;
else
   
   If_Result_2 := True;
end if;



--# expr-done 1372
   If_Result_3 := If_Result_2;
else
   
   If_Result_3 := False;
end if;



--# expr-done 1373
         if If_Result_3 then
            
         
      --# expr-start 1375 '<Cast to FieldDecl at nodes.lkt:2353:24>' Cast_Result_1 nodes.lkt:2353





--# expr-start 1374 '<FieldAccess for decl at nodes.lkt:2353:24>' Fld_4 nodes.lkt:2353







   if Item_1.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_4 := Create_Internal_Entity_Decl (Node => Item_1.Node.Full_Decl_F_Decl, Info => Item_1.Info);
--# expr-done 1374



   if Fld_4.Node = null
      or else Fld_4.Node.Kind in Lkt_Field_Decl_Range
   then
      
      Cast_Result_1 := Create_Internal_Entity_Field_Decl
        (Node => Fld_4.Node,
         Info => Fld_4.Info);

   else
         Cast_Result_1 := No_Entity_Field_Decl;
   end if;


--# expr-done 1375
      

         declare
            Item_To_Append : constant Internal_Entity_Field_Decl := Cast_Result_1;
         begin
            Internal_Entity_Field_Decl_Vectors.Append (Map_Result_Vec, Item_To_Append);
         end;
   
   
         end if;
   

            
   --# end



         end loop;
      end;
   
      end if;

   

         Map_Result := Create_Internal_Entity_Field_Decl_Array
           (Items_Count => Natural (Internal_Entity_Field_Decl_Vectors.Length (Map_Result_Vec)));
         for I in Map_Result.Items'Range loop
            Map_Result.Items (I) := Internal_Entity_Field_Decl_Vectors.Get
              (Map_Result_Vec,
               I + Internal_Entity_Field_Decl_Vectors.Index_Type'First - Map_Result.Items'First);
         end loop;
         Internal_Entity_Field_Decl_Vectors.Destroy (Map_Result_Vec);

      end;
   



--# expr-done 1376
      

         for Item_To_Append of
               Map_Result.Items
         loop
            Internal_Entity_Field_Decl_Vectors.Append (Map_Result_1_Vec, Item_To_Append);
         end loop;

   
   
   

            
   --# end
      Finalizer_Scope_623;



         end loop;
      end;
   

   

         Map_Result_1 := Create_Internal_Entity_Field_Decl_Array
           (Items_Count => Natural (Internal_Entity_Field_Decl_Vectors.Length (Map_Result_1_Vec)));
         for I in Map_Result_1.Items'Range loop
            Map_Result_1.Items (I) := Internal_Entity_Field_Decl_Vectors.Get
              (Map_Result_1_Vec,
               I + Internal_Entity_Field_Decl_Vectors.Index_Type'First - Map_Result_1.Items'First);
         end loop;
         Internal_Entity_Field_Decl_Vectors.Destroy (Map_Result_1_Vec);

      end;
   



--# expr-done 1377

         Property_Result := Map_Result_1;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_214;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_214;
                     Finalizer_Scope_623;




            raise;
      end;



   return Property_Result;
end Class_Decl_P_Constructor_Fields;
--# end

   







--# property-start ClassDecl.node_builder_scope nodes.lkt:2367
pragma Warnings (Off, "is not referenced");
 function Class_Decl_P_Node_Builder_Scope
  
  (Node : Bare_Class_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Lexical_Env
is
   Self : Bare_Class_Decl  := Bare_Class_Decl (Node);
     Ent : Internal_Entity_Class_Decl :=
       Internal_Entity_Class_Decl'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Lexical_Env;

      
            procedure Finalizer_Scope_215 with Inline_Always;
            procedure Finalizer_Scope_626 with Inline_Always;

      Var_Expr_1 : Bare_Dyn_Env_Wrapper;
Sym : Symbol_Type;
Array_Lit : Symbol_Type_Array_Access;
Fld : Internal_Entity_Field_Decl_Array_Access;
Fld_1 : Symbol_Type;
Fld_2 : Internal_Entity_Type_Decl;
Fld_3 : Internal_Entity_Type_Decl;
New_Node : Bare_Synth_Arg_Decl;
As_Entity : Internal_Entity_Synth_Arg_Decl;
Is_Null : Boolean;
If_Result : Internal_Entity_Synth_Arg_Decl;
Cast_Result : Internal_Entity_Decl;
New_Struct : Internal_Formal_Param;
Map_Result : Internal_Formal_Param_Array_Access;
Fld_4 : Internal_Entity_Type_Decl;
New_Node_1 : Bare_Synth_Fun_Decl;
As_Entity_1 : Internal_Entity_Synth_Fun_Decl;
Is_Null_1 : Boolean;
If_Result_1 : Internal_Entity_Synth_Fun_Decl;
Fld_5 : Internal_Entity_Function_Type;
Cast_Result_1 : Internal_Entity_Type_Decl;
Array_Lit_1 : Internal_Entity_Type_Decl_Array_Access;
New_Node_2 : Bare_Dyn_Env_Wrapper;
Fld_6 : Lexical_Env := Empty_Env;
Scope_Result : Lexical_Env := Empty_Env;
Result_Var : Lexical_Env := Empty_Env;
Fld_7 : Internal_Entity_Full_Decl;
Sym_1 : Symbol_Type;
Fld_8 : Boolean;
If_Result_2 : Lexical_Env := Empty_Env;

            procedure Finalizer_Scope_215 is
            begin
                     Dec_Ref (Array_Lit);
                     Dec_Ref (Fld);
                     Dec_Ref (Map_Result);
                     Dec_Ref (Array_Lit_1);
                     Dec_Ref (Scope_Result);
                     Dec_Ref (Result_Var);
                     Dec_Ref (If_Result_2);
            end Finalizer_Scope_215;
            procedure Finalizer_Scope_626 is
            begin
                     Dec_Ref (Fld_6);
            end Finalizer_Scope_626;

      
      Mmz_Handle : Memoization_Handle;
      Mmz_Val    : Mmz_Value;

      Mmz_Stored : Boolean;
      --  Whether the memoization couple was actually stored. Used to determine
      --  whether to inc-ref the memoized value.

      function Create_Mmz_Key return Mmz_Key;
      --  Create a memoization key for this property call and return it

      --------------------
      -- Create_Mmz_Key --
      --------------------

      function Create_Mmz_Key return Mmz_Key is
      begin
         return Mmz_K : Mmz_Key :=
           (Property => Mmz_Bare_Class_Decl_Class_Decl_P_Node_Builder_Scope,
            Items    => new Mmz_Key_Array (1 ..  2))
         do
            Mmz_K.Items (1) := (Kind => Mmz_Bare_Class_Decl,
                                As_Bare_Class_Decl => Self);
               Mmz_K.Items (2) :=
                 (Kind => Mmz_Internal_Entity_Info,
                  As_Internal_Entity_Info => E_Info);
         end return;
      end Create_Mmz_Key;

begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;

      if Self /= null then

         if not Self.Unit.Context.In_Populate_Lexical_Env then

            if Find_Memoized_Value
              (Self.Unit, Mmz_Handle, Mmz_Val, Create_Mmz_Key'Access)
            then
               --# memoization-lookup

               if Mmz_Val.Kind = Mmz_Evaluating then
                  --# memoization-return
                  Raise_Property_Exception
                    (Self,
                     Property_Error'Identity,
                     "Infinite recursion detected");

               elsif Mmz_Val.Kind = Mmz_Error then
                  --# memoization-return
                  Reraise_Memoized_Error (Mmz_Val);

               else
                  Property_Result := Mmz_Val.As_Lexical_Env;
                     Inc_Ref (Property_Result);

                  --# memoization-return
                  return Property_Result;
               end if;
               --# end
            end if;

         end if;
      end if;

      begin
         
   --# scope-start

         --# expr-start 1399 '<If at nodes.lkt:2368:9>' If_Result_2 nodes.lkt:2368



--# expr-start 1380 '<FieldAccess for has_annotation at nodes.lkt:2368:12>' Fld_8 nodes.lkt:2368



--# expr-start 1378 '<FieldAccess for full_decl at nodes.lkt:2368:12>' Fld_7 nodes.lkt:2368







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start Decl.full_decl
Fld_7 := Liblktlang.Implementation.Decl_P_Full_Decl (Node => Ent.Node, E_Info => Ent.Info);
--# end
--# expr-done 1378



   if Fld_7.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# expr-start 1379 '<Symbol synthetic at nodes.lkt:2368:44>' Sym_1 nodes.lkt:2368
Sym_1 := Precomputed_Symbol (Precomputed_Symbol_Table (Self.Unit.Context.Symbols), Precomputed_Sym_Synthetic); 
--# expr-done 1379
--# property-call-start FullDecl.has_annotation
Fld_8 := Liblktlang.Implementation.Full_Decl_P_Has_Annotation (Node => Fld_7.Node, Name => Sym_1);
--# end
--# expr-done 1380
if Fld_8 then
   


--# expr-start 1397 '<New DynEnvWrapper at nodes.lkt:2370:13>' New_Node_2 nodes.lkt:2370
--# expr-start 1382 '<ArrayLiteral at nodes.lkt:2371:23>' Array_Lit nodes.lkt:2371
--# expr-start 1381 '<Symbol builder at nodes.lkt:2371:24>' Sym nodes.lkt:2371
Sym := Precomputed_Symbol (Precomputed_Symbol_Table (Self.Unit.Context.Symbols), Precomputed_Sym_Builder); 
--# expr-done 1381
Array_Lit := Create_Symbol_Type_Array (Internal_Symbol_Type_Array'(1 => Sym)); 
--# expr-done 1382
--# expr-start 1396 '<ArrayLiteral at nodes.lkt:2372:23>' Array_Lit_1 nodes.lkt:2372
--# expr-start 1395 '<Cast to TypeDecl at nodes.lkt:2373:21>' Cast_Result_1 nodes.lkt:2373





--# expr-start 1394 '<FieldAccess for function_type_aux at nodes.lkt:2373:21>' Fld_5 nodes.lkt:2373



--# expr-start 1393 '<as_bare_entity at nodes.lkt:2373:21>' If_Result_1 nodes.lkt:2373



--# expr-start 1392 '<New SynthFunDecl at nodes.lkt:2373:21>' New_Node_1 nodes.lkt:2373
--# expr-start 1390 '<Map at nodes.lkt:2374:30>' Map_Result nodes.lkt:2374








   

   --# expr-start 1383 '<FieldAccess for constructor_fields at nodes.lkt:2374:30>' Fld nodes.lkt:2374







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start ClassDecl.constructor_fields
Fld := Liblktlang.Implementation.Class_Decl_P_Constructor_Fields (Node => Ent.Node, E_Info => Ent.Info);
--# end
--# expr-done 1383

   
      declare
         Map_Result_Vec : Internal_Formal_Param_Vectors.Vector;
      begin
   

   

      

      declare
         
         Collection : constant Internal_Entity_Field_Decl_Array_Access := Fld;
      begin
         for Item_0 of
               Collection.Items
         loop

            
   --# scope-start


               --# bind a Item_0

            
         
         
      --# expr-start 1389 '<New FormalParam at nodes.lkt:2376:29>' New_Struct nodes.lkt:2376






--# expr-start 1385 '<as_entity at nodes.lkt:2381:38>' If_Result nodes.lkt:2381



--# expr-start 1384 '<New SynthArgDecl at nodes.lkt:2381:38>' New_Node nodes.lkt:2381



if Is_Foreign_Strict (Self.Self_Env, Self) then
   Raise_Property_Exception
     (Self,
      Property_Error'Identity,
      "synthetic nodes cannot have foreign lexical envs");
end if;


New_Node := new Root_Node_Record
  (Lkt_Synth_Arg_Decl);
Initialize
  (Self => New_Node,
   Kind => Lkt_Synth_Arg_Decl,
   Unit => Self.Unit,

   Token_Start_Index => No_Token_Index,
   Token_End_Index   => No_Token_Index,

   Parent => Self,

   Self_Env => Self.Self_Env);
Register_Destroyable (Self.Unit, New_Node);



--# expr-done 1384
Is_Null := New_Node = null; 
if Is_Null then
   
   If_Result := No_Entity_Synth_Arg_Decl;
else
   

As_Entity := (Info => E_Info, Node => New_Node); 
   If_Result := As_Entity;
end if;



--# expr-done 1385



   
      Cast_Result := Create_Internal_Entity_Decl
        (Node => If_Result.Node,
         Info => If_Result.Info);


--# expr-start 1386 '<FieldAccess for name at nodes.lkt:2377:45>' Fld_1 nodes.lkt:2377







   if Item_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]Decl.name'
Fld_1 := Liblktlang.Implementation.Dispatcher_Decl_P_Name (Node => Item_0.Node);
--# end
--# expr-done 1386
--# expr-start 1388 '<FieldAccess for as_node_builder_type at nodes.lkt:2378:45>' Fld_3 nodes.lkt:2378



--# expr-start 1387 '<FieldAccess for get_type at nodes.lkt:2378:45>' Fld_2 nodes.lkt:2378







   if Item_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start Decl.get_type
Fld_2 := Liblktlang.Implementation.Decl_P_Get_Type (Node => Item_0.Node, E_Info => Item_0.Info);
--# end
--# expr-done 1387



   if Fld_2.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start TypeDecl.as_node_builder_type
Fld_3 := Liblktlang.Implementation.Type_Decl_P_As_Node_Builder_Type (Node => Fld_2.Node, E_Info => Fld_2.Info);
--# end
--# expr-done 1388

New_Struct := (Accept_Logical_Var => False, Decl => Cast_Result, Formal_Name => Fld_1, Formal_Type => Fld_3, Has_Default_Value => False); 
--# expr-done 1389
      

         declare
            Item_To_Append : constant Internal_Formal_Param := New_Struct;
         begin
            Internal_Formal_Param_Vectors.Append (Map_Result_Vec, Item_To_Append);
         end;
   
   
   

            
   --# end



         end loop;
      end;
   

   

         Map_Result := Create_Internal_Formal_Param_Array
           (Items_Count => Natural (Internal_Formal_Param_Vectors.Length (Map_Result_Vec)));
         for I in Map_Result.Items'Range loop
            Map_Result.Items (I) := Internal_Formal_Param_Vectors.Get
              (Map_Result_Vec,
               I + Internal_Formal_Param_Vectors.Index_Type'First - Map_Result.Items'First);
         end loop;
         Internal_Formal_Param_Vectors.Destroy (Map_Result_Vec);

      end;
   



--# expr-done 1390
--# expr-start 1391 '<FieldAccess for as_node_builder_type at nodes.lkt:2384:37>' Fld_4 nodes.lkt:2384







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start TypeDecl.as_node_builder_type
Fld_4 := Liblktlang.Implementation.Type_Decl_P_As_Node_Builder_Type (Node => Ent.Node, E_Info => Ent.Info);
--# end
--# expr-done 1391
Inc_Ref (Map_Result);


if Is_Foreign_Strict (Self.Self_Env, Self) then
   Raise_Property_Exception
     (Self,
      Property_Error'Identity,
      "synthetic nodes cannot have foreign lexical envs");
end if;


New_Node_1 := new Root_Node_Record
  (Lkt_Synth_Fun_Decl);
Initialize
  (Self => New_Node_1,
   Kind => Lkt_Synth_Fun_Decl,
   Unit => Self.Unit,

   Token_Start_Index => No_Token_Index,
   Token_End_Index   => No_Token_Index,

   Parent => Self,

   Self_Env => Self.Self_Env);
Register_Destroyable (Self.Unit, New_Node_1);


      New_Node_1.Synth_Fun_Decl_Args :=
         Map_Result;
      New_Node_1.Synth_Fun_Decl_Return_Type :=
         Fld_4;

--# expr-done 1392
Is_Null_1 := New_Node_1 = null; 
if Is_Null_1 then
   
   If_Result_1 := No_Entity_Synth_Fun_Decl;
else
   

As_Entity_1 := (Info => No_Entity_Info, Node => New_Node_1); 
   If_Result_1 := As_Entity_1;
end if;



--# expr-done 1393



   if If_Result_1.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start SynthFunDecl.function_type_aux
Fld_5 := Liblktlang.Implementation.Synth_Fun_Decl_P_Function_Type_Aux (Node => If_Result_1.Node, E_Info => If_Result_1.Info);
--# end
--# expr-done 1394



   
      Cast_Result_1 := Create_Internal_Entity_Type_Decl
        (Node => Fld_5.Node,
         Info => Fld_5.Info);


--# expr-done 1395
Array_Lit_1 := Create_Internal_Entity_Type_Decl_Array (Internal_Internal_Entity_Type_Decl_Array'(1 => Cast_Result_1)); 
--# expr-done 1396
Inc_Ref (Array_Lit);
Inc_Ref (Array_Lit_1);


if Is_Foreign_Strict (Self.Self_Env, Self) then
   Raise_Property_Exception
     (Self,
      Property_Error'Identity,
      "synthetic nodes cannot have foreign lexical envs");
end if;


New_Node_2 := new Root_Node_Record
  (Lkt_Dyn_Env_Wrapper);
Initialize
  (Self => New_Node_2,
   Kind => Lkt_Dyn_Env_Wrapper,
   Unit => Self.Unit,

   Token_Start_Index => No_Token_Index,
   Token_End_Index   => No_Token_Index,

   Parent => Self,

   Self_Env => Self.Self_Env);
Register_Destroyable (Self.Unit, New_Node_2);


      New_Node_2.Dyn_Env_Wrapper_Names :=
         Array_Lit;
      New_Node_2.Dyn_Env_Wrapper_Types :=
         Array_Lit_1;

--# expr-done 1397
Var_Expr_1 := New_Node_2;





if Var_Expr_1 /= No_Bare_Lkt_Node then
   



   --# scope-start


   --# bind dew Var_Expr_1

--# expr-start 1398 '<FieldAccess for dynenvwrapper_instantiation_env at nodes.lkt:2391:26>' Fld_6 nodes.lkt:2391







   if Var_Expr_1 = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start DynEnvWrapper.dynenvwrapper_instantiation_env
Fld_6 := Liblktlang.Implementation.Dyn_Env_Wrapper_F_Dynenvwrapper_Instantiation_Env (Node => Var_Expr_1);
--# end
--# expr-done 1398
Scope_Result := Fld_6;
   Inc_Ref (Scope_Result);


   --# end
      Finalizer_Scope_626;


   Result_Var := Scope_Result;
else
   
   Result_Var := Empty_Env;
end if;

      Inc_Ref (Result_Var);


   If_Result_2 := Result_Var;
else
   
   If_Result_2 := Empty_Env;
end if;

      Inc_Ref (If_Result_2);


--# expr-done 1399

         Property_Result := If_Result_2;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_215;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_215;
                     Finalizer_Scope_626;


               if Self /= null then
                     if not Self.Unit.Context.In_Populate_Lexical_Env then
                        Add_Memoized_Error
                          (Self.Unit, Mmz_Handle, Exc, Mmz_Stored);
                     end if;
               end if;


            raise;
      end;

      if Self /= null then
         if not Self.Unit.Context.In_Populate_Lexical_Env then

            Mmz_Val := (Kind => Mmz_Lexical_Env,
                        As_Lexical_Env => Property_Result);
            Add_Memoized_Value (Self.Unit, Mmz_Handle, Mmz_Val, Mmz_Stored);
               if Mmz_Stored then
                  Inc_Ref (Property_Result);
               end if;

         end if;
      end if;



   return Property_Result;
end Class_Decl_P_Node_Builder_Scope;
--# end

   







--# property-start ClassDecl.function_type_aux nodes.lkt:2396
pragma Warnings (Off, "is not referenced");
 function Class_Decl_P_Function_Type_Aux
  
  (Node : Bare_Class_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Internal_Entity_Function_Type
is
   Self : Bare_Class_Decl  := Bare_Class_Decl (Node);
     Ent : Internal_Entity_Class_Decl :=
       Internal_Entity_Class_Decl'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Internal_Entity_Function_Type;

      
            procedure Finalizer_Scope_216 with Inline_Always;

      Fld : Internal_Entity_Field_Decl_Array_Access;
Fld_1 : Internal_Entity_Type_Ref;
Fld_2 : Internal_Entity_Type_Decl;
Map_Result : Internal_Entity_Type_Decl_Array_Access;
Cast_Expr : Internal_Entity_Class_Decl;
Cast_Result : Internal_Entity_Type_Decl;
Cast_Expr_1 : Internal_Entity_Class_Decl;
Cast_Result_1 : Internal_Entity_Decl;
Fld_3 : Internal_Entity_Function_Type;

            procedure Finalizer_Scope_216 is
            begin
                     Dec_Ref (Fld);
                     Dec_Ref (Map_Result);
            end Finalizer_Scope_216;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 1404 '<FieldAccess for function_type_helper at nodes.lkt:2397:9>' Fld_3 nodes.lkt:2397







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# expr-start 1403 '<Map at nodes.lkt:2398:13>' Map_Result nodes.lkt:2398








   

   --# expr-start 1400 '<FieldAccess for constructor_fields at nodes.lkt:2398:13>' Fld nodes.lkt:2398







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start ClassDecl.constructor_fields
Fld := Liblktlang.Implementation.Class_Decl_P_Constructor_Fields (Node => Ent.Node, E_Info => Ent.Info);
--# end
--# expr-done 1400

   
      declare
         Map_Result_Vec : Internal_Entity_Type_Decl_Vectors.Vector;
      begin
   

   

      

      declare
         
         Collection : constant Internal_Entity_Field_Decl_Array_Access := Fld;
      begin
         for Item_0 of
               Collection.Items
         loop

            
   --# scope-start


               --# bind f Item_0

            
         
         
      --# expr-start 1402 '<FieldAccess for referenced_decl at nodes.lkt:2399:24>' Fld_2 nodes.lkt:2399



--# expr-start 1401 '<FieldAccess for decl_type at nodes.lkt:2399:24>' Fld_1 nodes.lkt:2399







   if Item_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_1 := Create_Internal_Entity_Type_Ref (Node => Item_0.Node.Field_Decl_F_Decl_Type, Info => Item_0.Info);
--# expr-done 1401



   if Fld_1.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start TypeRef.referenced_decl
Fld_2 := Liblktlang.Implementation.Type_Ref_P_Referenced_Decl (Node => Fld_1.Node, E_Info => Fld_1.Info);
--# end
--# expr-done 1402
      

         declare
            Item_To_Append : constant Internal_Entity_Type_Decl := Fld_2;
         begin
            Internal_Entity_Type_Decl_Vectors.Append (Map_Result_Vec, Item_To_Append);
         end;
   
   
   

            
   --# end



         end loop;
      end;
   

   

         Map_Result := Create_Internal_Entity_Type_Decl_Array
           (Items_Count => Natural (Internal_Entity_Type_Decl_Vectors.Length (Map_Result_Vec)));
         for I in Map_Result.Items'Range loop
            Map_Result.Items (I) := Internal_Entity_Type_Decl_Vectors.Get
              (Map_Result_Vec,
               I + Internal_Entity_Type_Decl_Vectors.Index_Type'First - Map_Result.Items'First);
         end loop;
         Internal_Entity_Type_Decl_Vectors.Destroy (Map_Result_Vec);

      end;
   



--# expr-done 1403






Cast_Expr := Ent; 



   
      Cast_Result := Create_Internal_Entity_Type_Decl
        (Node => Cast_Expr.Node,
         Info => Cast_Expr.Info);








Cast_Expr_1 := Ent; 



   
      Cast_Result_1 := Create_Internal_Entity_Decl
        (Node => Cast_Expr_1.Node,
         Info => Cast_Expr_1.Info);


--# property-call-start LktNode.function_type_helper
Fld_3 := Liblktlang.Implementation.Lkt_Node_P_Function_Type_Helper (Node => Ent.Node, Args_Types => Map_Result, Return_Type => Cast_Result, Origin => Cast_Result_1, E_Info => Ent.Info);
--# end
--# expr-done 1404

         Property_Result := Fld_3;
         
   --# end
      Finalizer_Scope_216;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_216;




            raise;
      end;



   return Property_Result;
end Class_Decl_P_Function_Type_Aux;
--# end



   


      

   --
   --  Primitives for Bare_Enum_Class_Decl
   --

   



   

   

   

   

   

   

   


      procedure Enum_Class_Decl_Pre_Env_Actions
        (Self            : Bare_Enum_Class_Decl;
         State           : in out PLE_Node_State;
         Add_To_Env_Only : Boolean := False) is
      begin
            


   

      declare
         Resolver : constant Entity_Resolver :=
            null;

         

         Mapping : Internal_Env_Assoc :=
            Liblktlang.Implementation.Env_Mappings_16 (Node => 
Self);
      begin

         Add_To_Env
           (Self,
            State,
            Mapping.Key,
            Mapping.Value,
            Mapping.Metadata,
            Resolver,
            Mapping.Dest_Env,
            DSL_Location => "nodes.lkt:2420:9");
         Dec_Ref (Mapping.Dest_Env);

      end;
   
   
      end;

      procedure Enum_Class_Decl_Post_Env_Actions
        (Self : Bare_Enum_Class_Decl; State : in out PLE_Node_State) is
      begin
            


   

      declare
         Resolver : constant Entity_Resolver :=
            null;

         

         Mappings : Internal_Env_Assoc_Array_Access :=
            Liblktlang.Implementation.Env_Mappings_17 (Node => 
Self);
      begin
         for Mapping of Mappings.Items loop

         Add_To_Env
           (Self,
            State,
            Mapping.Key,
            Mapping.Value,
            Mapping.Metadata,
            Resolver,
            Mapping.Dest_Env,
            DSL_Location => "nodes.lkt:2422:9");

         end loop;
         Dec_Ref (Mappings);
      end;
   
   
      end;


      
      procedure Initialize_Fields_For_Enum_Class_Decl
        (Self : Bare_Enum_Class_Decl
         ; Basic_Class_Decl_F_Syn_Name : Bare_Def_Id
         ; Basic_Class_Decl_F_Syn_Base_Type : Bare_Type_Ref
         ; Basic_Class_Decl_F_Traits : Bare_Type_Ref_List
         ; Enum_Class_Decl_F_Branches : Bare_Enum_Class_Case_List
         ; Enum_Class_Decl_F_Decls : Bare_Decl_Block
        ) is
      begin
            Initialize_Fields_For_Basic_Class_Decl
              (Self, Basic_Class_Decl_F_Syn_Name, Basic_Class_Decl_F_Syn_Base_Type, Basic_Class_Decl_F_Traits);

            Self.Enum_Class_Decl_F_Branches := Enum_Class_Decl_F_Branches;
            Self.Enum_Class_Decl_F_Decls := Enum_Class_Decl_F_Decls;
         

      end Initialize_Fields_For_Enum_Class_Decl;

      
   function Enum_Class_Decl_F_Branches
     (Node : Bare_Enum_Class_Decl) return Bare_Enum_Class_Case_List
   is
      

   begin
         
         return Node.Enum_Class_Decl_F_Branches;
      
   end;


   







--# property-start EnumClassDecl.decl_type_name nodes.lkt:2414
pragma Warnings (Off, "is not referenced");
 function Enum_Class_Decl_P_Decl_Type_Name
  
  (Node : Bare_Enum_Class_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return String_Type
is
   Self : Bare_Enum_Class_Decl  := Bare_Enum_Class_Decl (Node);
      --# bind self Self

   


   Property_Result : String_Type;

      
            procedure Finalizer_Scope_217 with Inline_Always;

      Str : String_Type;

            procedure Finalizer_Scope_217 is
            begin
                     Dec_Ref (Str);
            end Finalizer_Scope_217;


begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         --# expr-start 1405 '<String at nodes.lkt:2414:36>' Str nodes.lkt:2414
Str := Create_String ("enum class declaration"); 
--# expr-done 1405

         Property_Result := Str;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_217;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_217;




            raise;
      end;



   return Property_Result;
end Enum_Class_Decl_P_Decl_Type_Name;
--# end

   







--# property-start EnumClassDecl.alts nodes.lkt:2416
pragma Warnings (Off, "is not referenced");
 function Enum_Class_Decl_P_Alts
  
  (Node : Bare_Enum_Class_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Internal_Entity_Enum_Class_Alt_Decl_Array_Access
is
   Self : Bare_Enum_Class_Decl  := Bare_Enum_Class_Decl (Node);
     Ent : Internal_Entity_Enum_Class_Decl :=
       Internal_Entity_Enum_Class_Decl'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Internal_Entity_Enum_Class_Alt_Decl_Array_Access;

      
            procedure Finalizer_Scope_218 with Inline_Always;
            procedure Finalizer_Scope_628 with Inline_Always;

      Fld : Internal_Entity_Enum_Class_Case_List;
Fld_1 : Bare_Enum_Class_Case_List;
Fld_2 : Internal_Entity_Info;
Item_0 : Internal_Entity_Enum_Class_Case;
Bare_Item_0 : Bare_Enum_Class_Case;
Fld_3 : Internal_Entity_Enum_Class_Alt_Decl_List;
Fld_4 : Bare_Enum_Class_Alt_Decl_List;
Fld_5 : Internal_Entity_Info;
Item_1 : Internal_Entity_Enum_Class_Alt_Decl;
Bare_Item_1 : Bare_Enum_Class_Alt_Decl;
As_Entity : Internal_Entity_Enum_Class_Alt_Decl;
Is_Null : Boolean;
If_Result : Internal_Entity_Enum_Class_Alt_Decl;
Map_Result : Internal_Entity_Enum_Class_Alt_Decl_Array_Access;
As_Entity_1 : Internal_Entity_Enum_Class_Case;
Is_Null_1 : Boolean;
If_Result_1 : Internal_Entity_Enum_Class_Case;
Map_Result_1 : Internal_Entity_Enum_Class_Alt_Decl_Array_Access;

            procedure Finalizer_Scope_218 is
            begin
                     Dec_Ref (Map_Result_1);
            end Finalizer_Scope_218;
            procedure Finalizer_Scope_628 is
            begin
                     Dec_Ref (Map_Result);
            end Finalizer_Scope_628;


begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         --# expr-start 1409 '<Mapcat at nodes.lkt:2417:9>' Map_Result_1 nodes.lkt:2417








   

   --# expr-start 1406 '<FieldAccess for branches at nodes.lkt:2417:9>' Fld nodes.lkt:2417







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Create_Internal_Entity_Enum_Class_Case_List (Node => Ent.Node.Enum_Class_Decl_F_Branches, Info => Ent.Info);
--# expr-done 1406









Fld_1 := Fld.Node;

   
      declare
         Map_Result_1_Vec : Internal_Entity_Enum_Class_Alt_Decl_Vectors.Vector;
      begin
   

   

      if Fld_1 = null then
         
      Map_Result_1 := Create_Internal_Entity_Enum_Class_Alt_Decl_Array (0);
   
      else
         

      declare
         
         Collection : constant Bare_Enum_Class_Case_List := Fld_1;
      begin
         for Untyped_Item_0 of
               Collection.Nodes (1 .. Children_Count (Collection))
         loop
                  
                  Bare_Item_0 := Untyped_Item_0; 
                  



Is_Null_1 := Bare_Item_0 = null; 
if Is_Null_1 then
   
   If_Result_1 := No_Entity_Enum_Class_Case;
else
   








Fld_2 := Fld.Info;

As_Entity_1 := (Info => Fld_2, Node => Bare_Item_0); 
   If_Result_1 := As_Entity_1;
end if;



                  Item_0 := If_Result_1; 

            
   --# scope-start


               --# bind branch Item_0

            
         
         
      --# expr-start 1408 '<Map at nodes.lkt:2417:42>' Map_Result nodes.lkt:2417








   

   --# expr-start 1407 '<FieldAccess for decls at nodes.lkt:2417:42>' Fld_3 nodes.lkt:2417







   if Item_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_3 := Create_Internal_Entity_Enum_Class_Alt_Decl_List (Node => Item_0.Node.Enum_Class_Case_F_Decls, Info => Item_0.Info);
--# expr-done 1407









Fld_4 := Fld_3.Node;

   
      declare
         Map_Result_Vec : Internal_Entity_Enum_Class_Alt_Decl_Vectors.Vector;
      begin
   

   

      if Fld_4 = null then
         
      Map_Result := Create_Internal_Entity_Enum_Class_Alt_Decl_Array (0);
   
      else
         

      declare
         
         Collection : constant Bare_Enum_Class_Alt_Decl_List := Fld_4;
      begin
         for Untyped_Item_1 of
               Collection.Nodes (1 .. Children_Count (Collection))
         loop
                  
                  Bare_Item_1 := Untyped_Item_1; 
                  



Is_Null := Bare_Item_1 = null; 
if Is_Null then
   
   If_Result := No_Entity_Enum_Class_Alt_Decl;
else
   








Fld_5 := Fld_3.Info;

As_Entity := (Info => Fld_5, Node => Bare_Item_1); 
   If_Result := As_Entity;
end if;



                  Item_1 := If_Result; 

            
   --# scope-start


               --# bind d Item_1

            
         
         
      
      

         declare
            Item_To_Append : constant Internal_Entity_Enum_Class_Alt_Decl := Item_1;
         begin
            Internal_Entity_Enum_Class_Alt_Decl_Vectors.Append (Map_Result_Vec, Item_To_Append);
         end;
   
   
   

            
   --# end



         end loop;
      end;
   
      end if;

   

         Map_Result := Create_Internal_Entity_Enum_Class_Alt_Decl_Array
           (Items_Count => Natural (Internal_Entity_Enum_Class_Alt_Decl_Vectors.Length (Map_Result_Vec)));
         for I in Map_Result.Items'Range loop
            Map_Result.Items (I) := Internal_Entity_Enum_Class_Alt_Decl_Vectors.Get
              (Map_Result_Vec,
               I + Internal_Entity_Enum_Class_Alt_Decl_Vectors.Index_Type'First - Map_Result.Items'First);
         end loop;
         Internal_Entity_Enum_Class_Alt_Decl_Vectors.Destroy (Map_Result_Vec);

      end;
   



--# expr-done 1408
      

         for Item_To_Append of
               Map_Result.Items
         loop
            Internal_Entity_Enum_Class_Alt_Decl_Vectors.Append (Map_Result_1_Vec, Item_To_Append);
         end loop;

   
   
   

            
   --# end
      Finalizer_Scope_628;



         end loop;
      end;
   
      end if;

   

         Map_Result_1 := Create_Internal_Entity_Enum_Class_Alt_Decl_Array
           (Items_Count => Natural (Internal_Entity_Enum_Class_Alt_Decl_Vectors.Length (Map_Result_1_Vec)));
         for I in Map_Result_1.Items'Range loop
            Map_Result_1.Items (I) := Internal_Entity_Enum_Class_Alt_Decl_Vectors.Get
              (Map_Result_1_Vec,
               I + Internal_Entity_Enum_Class_Alt_Decl_Vectors.Index_Type'First - Map_Result_1.Items'First);
         end loop;
         Internal_Entity_Enum_Class_Alt_Decl_Vectors.Destroy (Map_Result_1_Vec);

      end;
   



--# expr-done 1409

         Property_Result := Map_Result_1;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_218;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_218;
                     Finalizer_Scope_628;




            raise;
      end;



   return Property_Result;
end Enum_Class_Decl_P_Alts;
--# end

   







--# property-start EnumClassDecl._env_mappings_16 nodes.lkt:2420
pragma Warnings (Off, "is not referenced");
 function Env_Mappings_16
  
  (Node : Bare_Enum_Class_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Internal_Env_Assoc
is
   Self : Bare_Enum_Class_Decl  := Bare_Enum_Class_Decl (Node);
     Ent : Internal_Entity_Enum_Class_Decl :=
       Internal_Entity_Enum_Class_Decl'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Internal_Env_Assoc;

      
            procedure Finalizer_Scope_392 with Inline_Always;

      Fld : Symbol_Type;
New_Struct : Internal_Designated_Env := No_Designated_Env;
Cast_Expr : Bare_Enum_Class_Decl;
Cast_Result : Bare_Lkt_Node;
New_Struct_1 : Internal_Env_Assoc := No_Env_Assoc;

            procedure Finalizer_Scope_392 is
            begin
                     Dec_Ref (New_Struct);
                     Dec_Ref (New_Struct_1);
            end Finalizer_Scope_392;


begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         --# expr-start 1412 '<New EnvAssoc at ???>' New_Struct_1 None
--# expr-start 1410 '<New DesignatedEnv at ???>' New_Struct None



Inc_Ref (Empty_Env);
New_Struct := (Direct_Env => Empty_Env, Env_Name => No_Symbol, Kind => Current_Env); 
--# expr-done 1410
--# expr-start 1411 '<FieldAccess for name at nodes.lkt:2420:23>' Fld nodes.lkt:2420







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]Decl.name'
Fld := Liblktlang.Implementation.Dispatcher_Decl_P_Name (Node => Ent.Node);
--# end
--# expr-done 1411







Cast_Expr := Self; 



   
      Cast_Result := Cast_Expr;


Inc_Ref (New_Struct);
New_Struct_1 := (Dest_Env => New_Struct, Key => Fld, Metadata => No_Metadata, Value => Cast_Result); 
--# expr-done 1412

         Property_Result := New_Struct_1;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_392;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_392;




            raise;
      end;



   return Property_Result;
end Env_Mappings_16;
--# end

   







--# property-start EnumClassDecl._env_mappings_17 nodes.lkt:2423
pragma Warnings (Off, "is not referenced");
 function Env_Mappings_17
  
  (Node : Bare_Enum_Class_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Internal_Env_Assoc_Array_Access
is
   Self : Bare_Enum_Class_Decl  := Bare_Enum_Class_Decl (Node);
     Ent : Internal_Entity_Enum_Class_Decl :=
       Internal_Entity_Enum_Class_Decl'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Internal_Env_Assoc_Array_Access;

      
            procedure Finalizer_Scope_393 with Inline_Always;
            procedure Finalizer_Scope_630 with Inline_Always;

      Fld : Internal_Entity_Enum_Class_Alt_Decl_Array_Access;
Fld_1 : Symbol_Type;
Fld_2 : Bare_Enum_Class_Alt_Decl;
Fld_3 : Bare_Decl_Block;
Fld_4 : Lexical_Env := Empty_Env;
New_Struct : Internal_Designated_Env := No_Designated_Env;
Cast_Result : Bare_Lkt_Node;
New_Struct_1 : Internal_Env_Assoc := No_Env_Assoc;
Map_Result : Internal_Env_Assoc_Array_Access;
Sym : Symbol_Type;
Array_Lit : Internal_Entity_Type_Decl_Array_Access;
Fld_5 : Internal_Entity_Named_Type_Decl;
Cast_Result_1 : Internal_Entity_Type_Decl;
Fld_6 : Internal_Entity_Function_Type;
Fld_7 : Bare_Function_Type;
Fld_8 : Bare_Decl_Block;
Fld_9 : Lexical_Env := Empty_Env;
New_Struct_2 : Internal_Designated_Env := No_Designated_Env;
Cast_Result_2 : Bare_Lkt_Node;
New_Struct_3 : Internal_Env_Assoc := No_Env_Assoc;
Array_Lit_1 : Internal_Env_Assoc_Array_Access;
Fld_10 : Internal_Entity_Full_Decl;
Sym_1 : Symbol_Type;
Fld_11 : Boolean;
If_Result : Internal_Env_Assoc_Array_Access;
Concat_Result : Internal_Env_Assoc_Array_Access;

            procedure Finalizer_Scope_393 is
            begin
                     Dec_Ref (Fld);
                     Dec_Ref (Map_Result);
                     Dec_Ref (Array_Lit);
                     Dec_Ref (Fld_9);
                     Dec_Ref (New_Struct_2);
                     Dec_Ref (New_Struct_3);
                     Dec_Ref (Array_Lit_1);
                     Dec_Ref (If_Result);
                     Dec_Ref (Concat_Result);
            end Finalizer_Scope_393;
            procedure Finalizer_Scope_630 is
            begin
                     Dec_Ref (Fld_4);
                     Dec_Ref (New_Struct);
                     Dec_Ref (New_Struct_1);
            end Finalizer_Scope_630;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 1420 '<Map at nodes.lkt:2423:13>' Map_Result nodes.lkt:2423








   

   --# expr-start 1413 '<FieldAccess for alts at nodes.lkt:2423:13>' Fld nodes.lkt:2423







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start EnumClassDecl.alts
Fld := Liblktlang.Implementation.Enum_Class_Decl_P_Alts (Node => Ent.Node, E_Info => Ent.Info);
--# end
--# expr-done 1413

   
      declare
         Map_Result_Vec : Internal_Env_Assoc_Vectors.Vector;
      begin
   

   

      

      declare
         
         Collection : constant Internal_Entity_Enum_Class_Alt_Decl_Array_Access := Fld;
      begin
         for Item_0 of
               Collection.Items
         loop

            
   --# scope-start


               --# bind alt Item_0

            
         
         
      --# expr-start 1419 '<New EnvAssoc at nodes.lkt:2425:17>' New_Struct_1 nodes.lkt:2425
--# expr-start 1416 '<New DesignatedEnv at nodes.lkt:2428:30>' New_Struct nodes.lkt:2428
--# expr-start 1415 '<FieldAccess for children_env at nodes.lkt:2431:36>' Fld_4 nodes.lkt:2431



--# expr-start 1414 '<FieldAccess for decls at nodes.lkt:2431:36>' Fld_3 nodes.lkt:2431







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_3 := Self.Enum_Class_Decl_F_Decls;
--# expr-done 1414



   if Fld_3 = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_4 := Liblktlang.Implementation.Children_Env (Node => Fld_3);
--# expr-done 1415


Inc_Ref (Fld_4);
New_Struct := (Direct_Env => Fld_4, Env_Name => No_Symbol, Kind => Direct_Env); 
--# expr-done 1416
--# expr-start 1417 '<FieldAccess for name at nodes.lkt:2426:25>' Fld_1 nodes.lkt:2426







   if Item_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]Decl.name'
Fld_1 := Liblktlang.Implementation.Dispatcher_Decl_P_Name (Node => Item_0.Node);
--# end
--# expr-done 1417






--# expr-start 1418 '<FieldAccess for node at nodes.lkt:2427:27>' Fld_2 nodes.lkt:2427









Fld_2 := Item_0.Node;
--# expr-done 1418



   
      Cast_Result := Fld_2;


Inc_Ref (New_Struct);
New_Struct_1 := (Dest_Env => New_Struct, Key => Fld_1, Metadata => No_Metadata, Value => Cast_Result); 
--# expr-done 1419
      

         declare
            Item_To_Append : constant Internal_Env_Assoc := New_Struct_1;
         begin
               Inc_Ref (Item_To_Append);
            Internal_Env_Assoc_Vectors.Append (Map_Result_Vec, Item_To_Append);
         end;
   
   
   

            
   --# end
      Finalizer_Scope_630;



         end loop;
      end;
   

   

         Map_Result := Create_Internal_Env_Assoc_Array
           (Items_Count => Natural (Internal_Env_Assoc_Vectors.Length (Map_Result_Vec)));
         for I in Map_Result.Items'Range loop
            Map_Result.Items (I) := Internal_Env_Assoc_Vectors.Get
              (Map_Result_Vec,
               I + Internal_Env_Assoc_Vectors.Index_Type'First - Map_Result.Items'First);
         end loop;
         Internal_Env_Assoc_Vectors.Destroy (Map_Result_Vec);

      end;
   



--# expr-done 1420
--# expr-start 1434 '<If at nodes.lkt:2437:17>' If_Result nodes.lkt:2437



--# expr-start 1423 '<FieldAccess for has_annotation at nodes.lkt:2437:20>' Fld_11 nodes.lkt:2437



--# expr-start 1421 '<FieldAccess for full_decl at nodes.lkt:2437:20>' Fld_10 nodes.lkt:2437







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start Decl.full_decl
Fld_10 := Liblktlang.Implementation.Decl_P_Full_Decl (Node => Ent.Node, E_Info => Ent.Info);
--# end
--# expr-done 1421



   if Fld_10.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# expr-start 1422 '<Symbol qualifier at nodes.lkt:2437:52>' Sym_1 nodes.lkt:2437
Sym_1 := Precomputed_Symbol (Precomputed_Symbol_Table (Self.Unit.Context.Symbols), Precomputed_Sym_Qualifier); 
--# expr-done 1422
--# property-call-start FullDecl.has_annotation
Fld_11 := Liblktlang.Implementation.Full_Decl_P_Has_Annotation (Node => Fld_10.Node, Name => Sym_1);
--# end
--# expr-done 1423
if Fld_11 then
   --# expr-start 1433 '<ArrayLiteral at nodes.lkt:2439:21>' Array_Lit_1 nodes.lkt:2439
--# expr-start 1432 '<New EnvAssoc at nodes.lkt:2440:25>' New_Struct_3 nodes.lkt:2440
--# expr-start 1426 '<New DesignatedEnv at nodes.lkt:2448:38>' New_Struct_2 nodes.lkt:2448
--# expr-start 1425 '<FieldAccess for children_env at nodes.lkt:2451:44>' Fld_9 nodes.lkt:2451



--# expr-start 1424 '<FieldAccess for decls at nodes.lkt:2451:44>' Fld_8 nodes.lkt:2451







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_8 := Self.Enum_Class_Decl_F_Decls;
--# expr-done 1424



   if Fld_8 = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_9 := Liblktlang.Implementation.Children_Env (Node => Fld_8);
--# expr-done 1425


Inc_Ref (Fld_9);
New_Struct_2 := (Direct_Env => Fld_9, Env_Name => No_Symbol, Kind => Direct_Env); 
--# expr-done 1426
--# expr-start 1427 '<Symbol as_bool at nodes.lkt:2441:33>' Sym nodes.lkt:2441
Sym := Precomputed_Symbol (Precomputed_Symbol_Table (Self.Unit.Context.Symbols), Precomputed_Sym_As_Bool); 
--# expr-done 1427






--# expr-start 1431 '<FieldAccess for node at nodes.lkt:2442:35>' Fld_7 nodes.lkt:2442



--# expr-start 1430 '<FieldAccess for function_type_helper at nodes.lkt:2442:35>' Fld_6 nodes.lkt:2442







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# expr-start 1428 '<ArrayLiteral at nodes.lkt:2443:33>' Array_Lit nodes.lkt:2443
Array_Lit := Create_Internal_Entity_Type_Decl_Array (Items_Count => 0); 
--# expr-done 1428





--# expr-start 1429 '<FieldAccess for bool_type at nodes.lkt:2444:33>' Fld_5 nodes.lkt:2444







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start LktNode.bool_type
Fld_5 := Liblktlang.Implementation.Lkt_Node_P_Bool_Type (Node => Self);
--# end
--# expr-done 1429



   
      Cast_Result_1 := Create_Internal_Entity_Type_Decl
        (Node => Fld_5.Node,
         Info => Fld_5.Info);



--# property-call-start LktNode.function_type_helper
Fld_6 := Liblktlang.Implementation.Lkt_Node_P_Function_Type_Helper (Node => Ent.Node, Args_Types => Array_Lit, Return_Type => Cast_Result_1, Origin => No_Entity_Decl, E_Info => Ent.Info);
--# end
--# expr-done 1430





Fld_7 := Fld_6.Node;
--# expr-done 1431



   
      Cast_Result_2 := Fld_7;


Inc_Ref (New_Struct_2);
New_Struct_3 := (Dest_Env => New_Struct_2, Key => Sym, Metadata => No_Metadata, Value => Cast_Result_2); 
--# expr-done 1432
Array_Lit_1 := Create_Internal_Env_Assoc_Array (Internal_Internal_Env_Assoc_Array'(1 => New_Struct_3)); 
--# expr-done 1433
   If_Result := Array_Lit_1;
else
   
   If_Result := No_Internal_Env_Assoc_Array_Type;
end if;

      Inc_Ref (If_Result);


--# expr-done 1434
Concat_Result := Concat (Map_Result, If_Result); 

         Property_Result := Concat_Result;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_393;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_393;
                     Finalizer_Scope_630;




            raise;
      end;



   return Property_Result;
end Env_Mappings_17;
--# end



   


      

   --
   --  Primitives for Bare_Enum_Type_Decl
   --

   



   

   

   

   

   

   

   


      procedure Enum_Type_Decl_Pre_Env_Actions
        (Self            : Bare_Enum_Type_Decl;
         State           : in out PLE_Node_State;
         Add_To_Env_Only : Boolean := False) is
      begin
            


   

      declare
         Resolver : constant Entity_Resolver :=
            null;

         

         Mapping : Internal_Env_Assoc :=
            Liblktlang.Implementation.Env_Mappings_18 (Node => 
Self);
      begin

         Add_To_Env
           (Self,
            State,
            Mapping.Key,
            Mapping.Value,
            Mapping.Metadata,
            Resolver,
            Mapping.Dest_Env,
            DSL_Location => "nodes.lkt:2479:9");
         Dec_Ref (Mapping.Dest_Env);

      end;
   
   
      end;

      procedure Enum_Type_Decl_Post_Env_Actions
        (Self : Bare_Enum_Type_Decl; State : in out PLE_Node_State) is
      begin
            


   

      declare
         Resolver : constant Entity_Resolver :=
            null;

         

         Mappings : Internal_Env_Assoc_Array_Access :=
            Liblktlang.Implementation.Env_Mappings_19 (Node => 
Self);
      begin
         for Mapping of Mappings.Items loop

         Add_To_Env
           (Self,
            State,
            Mapping.Key,
            Mapping.Value,
            Mapping.Metadata,
            Resolver,
            Mapping.Dest_Env,
            DSL_Location => "nodes.lkt:2482:9");

         end loop;
         Dec_Ref (Mappings);
      end;
   
   
            


   

      declare
         Resolver : constant Entity_Resolver :=
            null;

         

         Mappings : Internal_Env_Assoc_Array_Access :=
            Liblktlang.Implementation.Env_Mappings_20 (Node => 
Self);
      begin
         for Mapping of Mappings.Items loop

         Add_To_Env
           (Self,
            State,
            Mapping.Key,
            Mapping.Value,
            Mapping.Metadata,
            Resolver,
            Mapping.Dest_Env,
            DSL_Location => "nodes.lkt:2499:9");

         end loop;
         Dec_Ref (Mappings);
      end;
   
   
      end;


      
      procedure Initialize_Fields_For_Enum_Type_Decl
        (Self : Bare_Enum_Type_Decl
         ; Enum_Type_Decl_F_Syn_Name : Bare_Def_Id
         ; Enum_Type_Decl_F_Traits : Bare_Type_Ref_List
         ; Enum_Type_Decl_F_Literals : Bare_Enum_Lit_Decl_List
         ; Enum_Type_Decl_F_Decls : Bare_Decl_Block
        ) is
      begin

            Self.Enum_Type_Decl_F_Syn_Name := Enum_Type_Decl_F_Syn_Name;
            Self.Enum_Type_Decl_F_Traits := Enum_Type_Decl_F_Traits;
            Self.Enum_Type_Decl_F_Literals := Enum_Type_Decl_F_Literals;
            Self.Enum_Type_Decl_F_Decls := Enum_Type_Decl_F_Decls;
         

      end Initialize_Fields_For_Enum_Type_Decl;

      
   function Enum_Type_Decl_F_Literals
     (Node : Bare_Enum_Type_Decl) return Bare_Enum_Lit_Decl_List
   is
      

   begin
         
         return Node.Enum_Type_Decl_F_Literals;
      
   end;


   







--# property-start EnumTypeDecl.decl_type_name nodes.lkt:2476
pragma Warnings (Off, "is not referenced");
 function Enum_Type_Decl_P_Decl_Type_Name
  
  (Node : Bare_Enum_Type_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return String_Type
is
   Self : Bare_Enum_Type_Decl  := Bare_Enum_Type_Decl (Node);
      --# bind self Self

   


   Property_Result : String_Type;

      
            procedure Finalizer_Scope_219 with Inline_Always;

      Str : String_Type;

            procedure Finalizer_Scope_219 is
            begin
                     Dec_Ref (Str);
            end Finalizer_Scope_219;


begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         --# expr-start 1435 '<String at nodes.lkt:2476:36>' Str nodes.lkt:2476
Str := Create_String ("enum declaration"); 
--# expr-done 1435

         Property_Result := Str;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_219;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_219;




            raise;
      end;



   return Property_Result;
end Enum_Type_Decl_P_Decl_Type_Name;
--# end

   







--# property-start EnumTypeDecl._env_mappings_18 nodes.lkt:2479
pragma Warnings (Off, "is not referenced");
 function Env_Mappings_18
  
  (Node : Bare_Enum_Type_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Internal_Env_Assoc
is
   Self : Bare_Enum_Type_Decl  := Bare_Enum_Type_Decl (Node);
     Ent : Internal_Entity_Enum_Type_Decl :=
       Internal_Entity_Enum_Type_Decl'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Internal_Env_Assoc;

      
            procedure Finalizer_Scope_394 with Inline_Always;

      Fld : Symbol_Type;
New_Struct : Internal_Designated_Env := No_Designated_Env;
Cast_Expr : Bare_Enum_Type_Decl;
Cast_Result : Bare_Lkt_Node;
New_Struct_1 : Internal_Env_Assoc := No_Env_Assoc;

            procedure Finalizer_Scope_394 is
            begin
                     Dec_Ref (New_Struct);
                     Dec_Ref (New_Struct_1);
            end Finalizer_Scope_394;


begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         --# expr-start 1438 '<New EnvAssoc at ???>' New_Struct_1 None
--# expr-start 1436 '<New DesignatedEnv at ???>' New_Struct None



Inc_Ref (Empty_Env);
New_Struct := (Direct_Env => Empty_Env, Env_Name => No_Symbol, Kind => Current_Env); 
--# expr-done 1436
--# expr-start 1437 '<FieldAccess for name at nodes.lkt:2479:23>' Fld nodes.lkt:2479







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]Decl.name'
Fld := Liblktlang.Implementation.Dispatcher_Decl_P_Name (Node => Ent.Node);
--# end
--# expr-done 1437







Cast_Expr := Self; 



   
      Cast_Result := Cast_Expr;


Inc_Ref (New_Struct);
New_Struct_1 := (Dest_Env => New_Struct, Key => Fld, Metadata => No_Metadata, Value => Cast_Result); 
--# expr-done 1438

         Property_Result := New_Struct_1;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_394;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_394;




            raise;
      end;



   return Property_Result;
end Env_Mappings_18;
--# end

   







--# property-start EnumTypeDecl._env_mappings_19 nodes.lkt:2483
pragma Warnings (Off, "is not referenced");
 function Env_Mappings_19
  
  (Node : Bare_Enum_Type_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Internal_Env_Assoc_Array_Access
is
   Self : Bare_Enum_Type_Decl  := Bare_Enum_Type_Decl (Node);
     Ent : Internal_Entity_Enum_Type_Decl :=
       Internal_Entity_Enum_Type_Decl'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Internal_Env_Assoc_Array_Access;

      
            procedure Finalizer_Scope_395 with Inline_Always;
            procedure Finalizer_Scope_631 with Inline_Always;

      Fld : Internal_Entity_Enum_Lit_Decl_List;
Fld_1 : Bare_Enum_Lit_Decl_List;
Fld_2 : Internal_Entity_Info;
Item_0 : Internal_Entity_Enum_Lit_Decl;
Bare_Item_0 : Bare_Enum_Lit_Decl;
Fld_3 : Symbol_Type;
Fld_4 : Bare_Enum_Lit_Decl;
Fld_5 : Bare_Decl_Block;
Fld_6 : Lexical_Env := Empty_Env;
New_Struct : Internal_Designated_Env := No_Designated_Env;
Cast_Result : Bare_Lkt_Node;
New_Struct_1 : Internal_Env_Assoc := No_Env_Assoc;
As_Entity : Internal_Entity_Enum_Lit_Decl;
Is_Null : Boolean;
If_Result : Internal_Entity_Enum_Lit_Decl;
Map_Result : Internal_Env_Assoc_Array_Access;

            procedure Finalizer_Scope_395 is
            begin
                     Dec_Ref (Map_Result);
            end Finalizer_Scope_395;
            procedure Finalizer_Scope_631 is
            begin
                     Dec_Ref (Fld_6);
                     Dec_Ref (New_Struct);
                     Dec_Ref (New_Struct_1);
            end Finalizer_Scope_631;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 1446 '<Map at nodes.lkt:2483:13>' Map_Result nodes.lkt:2483








   

   --# expr-start 1439 '<FieldAccess for literals at nodes.lkt:2483:13>' Fld nodes.lkt:2483







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Create_Internal_Entity_Enum_Lit_Decl_List (Node => Ent.Node.Enum_Type_Decl_F_Literals, Info => Ent.Info);
--# expr-done 1439









Fld_1 := Fld.Node;

   
      declare
         Map_Result_Vec : Internal_Env_Assoc_Vectors.Vector;
      begin
   

   

      if Fld_1 = null then
         
      Map_Result := Create_Internal_Env_Assoc_Array (0);
   
      else
         

      declare
         
         Collection : constant Bare_Enum_Lit_Decl_List := Fld_1;
      begin
         for Untyped_Item_0 of
               Collection.Nodes (1 .. Children_Count (Collection))
         loop
                  
                  Bare_Item_0 := Untyped_Item_0; 
                  



Is_Null := Bare_Item_0 = null; 
if Is_Null then
   
   If_Result := No_Entity_Enum_Lit_Decl;
else
   








Fld_2 := Fld.Info;

As_Entity := (Info => Fld_2, Node => Bare_Item_0); 
   If_Result := As_Entity;
end if;



                  Item_0 := If_Result; 

            
   --# scope-start


               --# bind lit Item_0

            
         
         
      --# expr-start 1445 '<New EnvAssoc at nodes.lkt:2485:17>' New_Struct_1 nodes.lkt:2485
--# expr-start 1442 '<New DesignatedEnv at nodes.lkt:2488:30>' New_Struct nodes.lkt:2488
--# expr-start 1441 '<FieldAccess for children_env at nodes.lkt:2491:36>' Fld_6 nodes.lkt:2491



--# expr-start 1440 '<FieldAccess for decls at nodes.lkt:2491:36>' Fld_5 nodes.lkt:2491







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_5 := Self.Enum_Type_Decl_F_Decls;
--# expr-done 1440



   if Fld_5 = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_6 := Liblktlang.Implementation.Children_Env (Node => Fld_5);
--# expr-done 1441


Inc_Ref (Fld_6);
New_Struct := (Direct_Env => Fld_6, Env_Name => No_Symbol, Kind => Direct_Env); 
--# expr-done 1442
--# expr-start 1443 '<FieldAccess for name at nodes.lkt:2486:25>' Fld_3 nodes.lkt:2486







   if Item_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]Decl.name'
Fld_3 := Liblktlang.Implementation.Dispatcher_Decl_P_Name (Node => Item_0.Node);
--# end
--# expr-done 1443






--# expr-start 1444 '<FieldAccess for node at nodes.lkt:2487:27>' Fld_4 nodes.lkt:2487









Fld_4 := Item_0.Node;
--# expr-done 1444



   
      Cast_Result := Fld_4;


Inc_Ref (New_Struct);
New_Struct_1 := (Dest_Env => New_Struct, Key => Fld_3, Metadata => No_Metadata, Value => Cast_Result); 
--# expr-done 1445
      

         declare
            Item_To_Append : constant Internal_Env_Assoc := New_Struct_1;
         begin
               Inc_Ref (Item_To_Append);
            Internal_Env_Assoc_Vectors.Append (Map_Result_Vec, Item_To_Append);
         end;
   
   
   

            
   --# end
      Finalizer_Scope_631;



         end loop;
      end;
   
      end if;

   

         Map_Result := Create_Internal_Env_Assoc_Array
           (Items_Count => Natural (Internal_Env_Assoc_Vectors.Length (Map_Result_Vec)));
         for I in Map_Result.Items'Range loop
            Map_Result.Items (I) := Internal_Env_Assoc_Vectors.Get
              (Map_Result_Vec,
               I + Internal_Env_Assoc_Vectors.Index_Type'First - Map_Result.Items'First);
         end loop;
         Internal_Env_Assoc_Vectors.Destroy (Map_Result_Vec);

      end;
   



--# expr-done 1446

         Property_Result := Map_Result;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_395;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_395;
                     Finalizer_Scope_631;




            raise;
      end;



   return Property_Result;
end Env_Mappings_19;
--# end

   







--# property-start EnumTypeDecl._env_mappings_20 nodes.lkt:2500
pragma Warnings (Off, "is not referenced");
 function Env_Mappings_20
  
  (Node : Bare_Enum_Type_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Internal_Env_Assoc_Array_Access
is
   Self : Bare_Enum_Type_Decl  := Bare_Enum_Type_Decl (Node);
     Ent : Internal_Entity_Enum_Type_Decl :=
       Internal_Entity_Enum_Type_Decl'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Internal_Env_Assoc_Array_Access;

      
            procedure Finalizer_Scope_396 with Inline_Always;
            procedure Finalizer_Scope_632 with Inline_Always;

      Fld : Internal_Entity_Enum_Lit_Decl_List;
Fld_1 : Bare_Enum_Lit_Decl_List;
Fld_2 : Internal_Entity_Info;
Item_0 : Internal_Entity_Enum_Lit_Decl;
Bare_Item_0 : Bare_Enum_Lit_Decl;
Fld_3 : Symbol_Type;
Fld_4 : Bare_Enum_Lit_Decl;
Fld_5 : Lexical_Env := Empty_Env;
New_Struct : Internal_Designated_Env := No_Designated_Env;
Cast_Result : Bare_Lkt_Node;
New_Struct_1 : Internal_Env_Assoc := No_Env_Assoc;
As_Entity : Internal_Entity_Enum_Lit_Decl;
Is_Null : Boolean;
If_Result : Internal_Entity_Enum_Lit_Decl;
Map_Result : Internal_Env_Assoc_Array_Access;
Fld_6 : Internal_Entity_Full_Decl;
Sym : Symbol_Type;
Fld_7 : Boolean;
If_Result_1 : Internal_Env_Assoc_Array_Access;

            procedure Finalizer_Scope_396 is
            begin
                     Dec_Ref (Map_Result);
                     Dec_Ref (If_Result_1);
            end Finalizer_Scope_396;
            procedure Finalizer_Scope_632 is
            begin
                     Dec_Ref (Fld_5);
                     Dec_Ref (New_Struct);
                     Dec_Ref (New_Struct_1);
            end Finalizer_Scope_632;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 1457 '<If at nodes.lkt:2500:13>' If_Result_1 nodes.lkt:2500



--# expr-start 1449 '<FieldAccess for has_annotation at nodes.lkt:2500:16>' Fld_7 nodes.lkt:2500



--# expr-start 1447 '<FieldAccess for full_decl at nodes.lkt:2500:16>' Fld_6 nodes.lkt:2500







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start Decl.full_decl
Fld_6 := Liblktlang.Implementation.Decl_P_Full_Decl (Node => Ent.Node, E_Info => Ent.Info);
--# end
--# expr-done 1447



   if Fld_6.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# expr-start 1448 '<Symbol open at nodes.lkt:2500:48>' Sym nodes.lkt:2500
Sym := Precomputed_Symbol (Precomputed_Symbol_Table (Self.Unit.Context.Symbols), Precomputed_Sym_Open); 
--# expr-done 1448
--# property-call-start FullDecl.has_annotation
Fld_7 := Liblktlang.Implementation.Full_Decl_P_Has_Annotation (Node => Fld_6.Node, Name => Sym);
--# end
--# expr-done 1449
if Fld_7 then
   --# expr-start 1456 '<Map at nodes.lkt:2502:17>' Map_Result nodes.lkt:2502








   

   --# expr-start 1450 '<FieldAccess for literals at nodes.lkt:2502:17>' Fld nodes.lkt:2502







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Create_Internal_Entity_Enum_Lit_Decl_List (Node => Ent.Node.Enum_Type_Decl_F_Literals, Info => Ent.Info);
--# expr-done 1450









Fld_1 := Fld.Node;

   
      declare
         Map_Result_Vec : Internal_Env_Assoc_Vectors.Vector;
      begin
   

   

      if Fld_1 = null then
         
      Map_Result := Create_Internal_Env_Assoc_Array (0);
   
      else
         

      declare
         
         Collection : constant Bare_Enum_Lit_Decl_List := Fld_1;
      begin
         for Untyped_Item_0 of
               Collection.Nodes (1 .. Children_Count (Collection))
         loop
                  
                  Bare_Item_0 := Untyped_Item_0; 
                  



Is_Null := Bare_Item_0 = null; 
if Is_Null then
   
   If_Result := No_Entity_Enum_Lit_Decl;
else
   








Fld_2 := Fld.Info;

As_Entity := (Info => Fld_2, Node => Bare_Item_0); 
   If_Result := As_Entity;
end if;



                  Item_0 := If_Result; 

            
   --# scope-start


               --# bind lit Item_0

            
         
         
      --# expr-start 1455 '<New EnvAssoc at nodes.lkt:2504:21>' New_Struct_1 nodes.lkt:2504
--# expr-start 1452 '<New DesignatedEnv at nodes.lkt:2507:34>' New_Struct nodes.lkt:2507
--# expr-start 1451 '<FieldAccess for node_env at nodes.lkt:2510:40>' Fld_5 nodes.lkt:2510







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_5 := Liblktlang.Implementation.Node_Env (Node => Self);
--# expr-done 1451


Inc_Ref (Fld_5);
New_Struct := (Direct_Env => Fld_5, Env_Name => No_Symbol, Kind => Direct_Env); 
--# expr-done 1452
--# expr-start 1453 '<FieldAccess for name at nodes.lkt:2505:29>' Fld_3 nodes.lkt:2505







   if Item_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]Decl.name'
Fld_3 := Liblktlang.Implementation.Dispatcher_Decl_P_Name (Node => Item_0.Node);
--# end
--# expr-done 1453






--# expr-start 1454 '<FieldAccess for node at nodes.lkt:2506:31>' Fld_4 nodes.lkt:2506









Fld_4 := Item_0.Node;
--# expr-done 1454



   
      Cast_Result := Fld_4;


Inc_Ref (New_Struct);
New_Struct_1 := (Dest_Env => New_Struct, Key => Fld_3, Metadata => No_Metadata, Value => Cast_Result); 
--# expr-done 1455
      

         declare
            Item_To_Append : constant Internal_Env_Assoc := New_Struct_1;
         begin
               Inc_Ref (Item_To_Append);
            Internal_Env_Assoc_Vectors.Append (Map_Result_Vec, Item_To_Append);
         end;
   
   
   

            
   --# end
      Finalizer_Scope_632;



         end loop;
      end;
   
      end if;

   

         Map_Result := Create_Internal_Env_Assoc_Array
           (Items_Count => Natural (Internal_Env_Assoc_Vectors.Length (Map_Result_Vec)));
         for I in Map_Result.Items'Range loop
            Map_Result.Items (I) := Internal_Env_Assoc_Vectors.Get
              (Map_Result_Vec,
               I + Internal_Env_Assoc_Vectors.Index_Type'First - Map_Result.Items'First);
         end loop;
         Internal_Env_Assoc_Vectors.Destroy (Map_Result_Vec);

      end;
   



--# expr-done 1456
   If_Result_1 := Map_Result;
else
   
   If_Result_1 := No_Internal_Env_Assoc_Array_Type;
end if;

      Inc_Ref (If_Result_1);


--# expr-done 1457

         Property_Result := If_Result_1;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_396;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_396;
                     Finalizer_Scope_632;




            raise;
      end;



   return Property_Result;
end Env_Mappings_20;
--# end



   


      

   --
   --  Primitives for Bare_Struct_Decl
   --

   



      
      procedure Initialize_Fields_For_Struct_Decl
        (Self : Bare_Struct_Decl
         ; Struct_Decl_F_Syn_Name : Bare_Def_Id
         ; Struct_Decl_F_Traits : Bare_Type_Ref_List
         ; Struct_Decl_F_Decls : Bare_Decl_Block
        ) is
      begin

            Self.Struct_Decl_F_Syn_Name := Struct_Decl_F_Syn_Name;
            Self.Struct_Decl_F_Traits := Struct_Decl_F_Traits;
            Self.Struct_Decl_F_Decls := Struct_Decl_F_Decls;
         

      end Initialize_Fields_For_Struct_Decl;


   







--# property-start StructDecl.decl_type_name nodes.lkt:2532
pragma Warnings (Off, "is not referenced");
 function Struct_Decl_P_Decl_Type_Name
  
  (Node : Bare_Struct_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return String_Type
is
   Self : Bare_Struct_Decl  := Bare_Struct_Decl (Node);
      --# bind self Self

   


   Property_Result : String_Type;

      
            procedure Finalizer_Scope_220 with Inline_Always;

      Str : String_Type;

            procedure Finalizer_Scope_220 is
            begin
                     Dec_Ref (Str);
            end Finalizer_Scope_220;


begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         --# expr-start 1458 '<String at nodes.lkt:2532:36>' Str nodes.lkt:2532
Str := Create_String ("struct declaration"); 
--# expr-done 1458

         Property_Result := Str;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_220;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_220;




            raise;
      end;



   return Property_Result;
end Struct_Decl_P_Decl_Type_Name;
--# end

   







--# property-start StructDecl.function_type_aux nodes.lkt:2535
pragma Warnings (Off, "is not referenced");
 function Struct_Decl_P_Function_Type_Aux
  
  (Node : Bare_Struct_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Internal_Entity_Function_Type
is
   Self : Bare_Struct_Decl  := Bare_Struct_Decl (Node);
     Ent : Internal_Entity_Struct_Decl :=
       Internal_Entity_Struct_Decl'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Internal_Entity_Function_Type;

      
            procedure Finalizer_Scope_221 with Inline_Always;

      Fld : Internal_Entity_Decl_Block;
Fld_1 : Bare_Decl_Block;
Fld_2 : Internal_Entity_Info;
Item_0 : Internal_Entity_Full_Decl;
Bare_Item_0 : Bare_Full_Decl;
As_Entity : Internal_Entity_Full_Decl;
Is_Null : Boolean;
If_Result : Internal_Entity_Full_Decl;
Fld_3 : Internal_Entity_Decl;
Is_A : Boolean;
Map_Result : Internal_Entity_Full_Decl_Array_Access;
Fld_4 : Internal_Entity_Decl;
Cast_Result : Internal_Entity_Field_Decl;
Fld_5 : Internal_Entity_Type_Ref;
Fld_6 : Internal_Entity_Type_Decl;
Map_Result_1 : Internal_Entity_Type_Decl_Array_Access;
Cast_Expr : Internal_Entity_Struct_Decl;
Cast_Result_1 : Internal_Entity_Type_Decl;
Cast_Expr_1 : Internal_Entity_Struct_Decl;
Cast_Result_2 : Internal_Entity_Decl;
Fld_7 : Internal_Entity_Function_Type;

            procedure Finalizer_Scope_221 is
            begin
                     Dec_Ref (Map_Result);
                     Dec_Ref (Map_Result_1);
            end Finalizer_Scope_221;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 1468 '<FieldAccess for function_type_helper at nodes.lkt:2536:9>' Fld_7 nodes.lkt:2536







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# expr-start 1467 '<Map at nodes.lkt:2537:13>' Map_Result_1 nodes.lkt:2537








   

   --# expr-start 1462 '<Map at nodes.lkt:2537:13>' Map_Result nodes.lkt:2537








   

   --# expr-start 1459 '<FieldAccess for decls at nodes.lkt:2537:13>' Fld nodes.lkt:2537







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Create_Internal_Entity_Decl_Block (Node => Ent.Node.Struct_Decl_F_Decls, Info => Ent.Info);
--# expr-done 1459









Fld_1 := Fld.Node;

   
      declare
         Map_Result_Vec : Internal_Entity_Full_Decl_Vectors.Vector;
      begin
   

   

      if Fld_1 = null then
         
      Map_Result := Create_Internal_Entity_Full_Decl_Array (0);
   
      else
         

      declare
         
         Collection : constant Bare_Decl_Block := Fld_1;
      begin
         for Untyped_Item_0 of
               Collection.Nodes (1 .. Children_Count (Collection))
         loop
                  
                  Bare_Item_0 := Untyped_Item_0; 
                  



Is_Null := Bare_Item_0 = null; 
if Is_Null then
   
   If_Result := No_Entity_Full_Decl;
else
   








Fld_2 := Fld.Info;

As_Entity := (Info => Fld_2, Node => Bare_Item_0); 
   If_Result := As_Entity;
end if;



                  Item_0 := If_Result; 

            
   --# scope-start


               --# bind d Item_0

            
         --# expr-start 1461 '<IsA FieldDecl at nodes.lkt:2537:38>' Is_A nodes.lkt:2537
--# expr-start 1460 '<FieldAccess for decl at nodes.lkt:2537:38>' Fld_3 nodes.lkt:2537







   if Item_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_3 := Create_Internal_Entity_Decl (Node => Item_0.Node.Full_Decl_F_Decl, Info => Item_0.Info);
--# expr-done 1460
Is_A := Fld_3.Node /= null 
and then Fld_3.Node.Kind in Lkt_Field_Decl_Range; 
--# expr-done 1461
         if Is_A then
            
         
      
      

         declare
            Item_To_Append : constant Internal_Entity_Full_Decl := Item_0;
         begin
            Internal_Entity_Full_Decl_Vectors.Append (Map_Result_Vec, Item_To_Append);
         end;
   
   
         end if;
   

            
   --# end



         end loop;
      end;
   
      end if;

   

         Map_Result := Create_Internal_Entity_Full_Decl_Array
           (Items_Count => Natural (Internal_Entity_Full_Decl_Vectors.Length (Map_Result_Vec)));
         for I in Map_Result.Items'Range loop
            Map_Result.Items (I) := Internal_Entity_Full_Decl_Vectors.Get
              (Map_Result_Vec,
               I + Internal_Entity_Full_Decl_Vectors.Index_Type'First - Map_Result.Items'First);
         end loop;
         Internal_Entity_Full_Decl_Vectors.Destroy (Map_Result_Vec);

      end;
   



--# expr-done 1462

   
      declare
         Map_Result_1_Vec : Internal_Entity_Type_Decl_Vectors.Vector;
      begin
   

   

      

      declare
         
         Collection : constant Internal_Entity_Full_Decl_Array_Access := Map_Result;
      begin
         for Item_1 of
               Collection.Items
         loop

            
   --# scope-start


               --# bind a Item_1

            
         
         
      --# expr-start 1466 '<FieldAccess for referenced_decl at nodes.lkt:2538:24>' Fld_6 nodes.lkt:2538



--# expr-start 1465 '<FieldAccess for decl_type at nodes.lkt:2538:24>' Fld_5 nodes.lkt:2538



--# expr-start 1464 '<Cast to FieldDecl at nodes.lkt:2538:24>' Cast_Result nodes.lkt:2538





--# expr-start 1463 '<FieldAccess for decl at nodes.lkt:2538:24>' Fld_4 nodes.lkt:2538







   if Item_1.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_4 := Create_Internal_Entity_Decl (Node => Item_1.Node.Full_Decl_F_Decl, Info => Item_1.Info);
--# expr-done 1463



   if Fld_4.Node = null
      or else Fld_4.Node.Kind in Lkt_Field_Decl_Range
   then
      
      Cast_Result := Create_Internal_Entity_Field_Decl
        (Node => Fld_4.Node,
         Info => Fld_4.Info);

   else
         Cast_Result := No_Entity_Field_Decl;
   end if;


--# expr-done 1464



   if Cast_Result.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_5 := Create_Internal_Entity_Type_Ref (Node => Cast_Result.Node.Field_Decl_F_Decl_Type, Info => Cast_Result.Info);
--# expr-done 1465



   if Fld_5.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start TypeRef.referenced_decl
Fld_6 := Liblktlang.Implementation.Type_Ref_P_Referenced_Decl (Node => Fld_5.Node, E_Info => Fld_5.Info);
--# end
--# expr-done 1466
      

         declare
            Item_To_Append : constant Internal_Entity_Type_Decl := Fld_6;
         begin
            Internal_Entity_Type_Decl_Vectors.Append (Map_Result_1_Vec, Item_To_Append);
         end;
   
   
   

            
   --# end



         end loop;
      end;
   

   

         Map_Result_1 := Create_Internal_Entity_Type_Decl_Array
           (Items_Count => Natural (Internal_Entity_Type_Decl_Vectors.Length (Map_Result_1_Vec)));
         for I in Map_Result_1.Items'Range loop
            Map_Result_1.Items (I) := Internal_Entity_Type_Decl_Vectors.Get
              (Map_Result_1_Vec,
               I + Internal_Entity_Type_Decl_Vectors.Index_Type'First - Map_Result_1.Items'First);
         end loop;
         Internal_Entity_Type_Decl_Vectors.Destroy (Map_Result_1_Vec);

      end;
   



--# expr-done 1467






Cast_Expr := Ent; 



   
      Cast_Result_1 := Create_Internal_Entity_Type_Decl
        (Node => Cast_Expr.Node,
         Info => Cast_Expr.Info);








Cast_Expr_1 := Ent; 



   
      Cast_Result_2 := Create_Internal_Entity_Decl
        (Node => Cast_Expr_1.Node,
         Info => Cast_Expr_1.Info);


--# property-call-start LktNode.function_type_helper
Fld_7 := Liblktlang.Implementation.Lkt_Node_P_Function_Type_Helper (Node => Ent.Node, Args_Types => Map_Result_1, Return_Type => Cast_Result_1, Origin => Cast_Result_2, E_Info => Ent.Info);
--# end
--# expr-done 1468

         Property_Result := Fld_7;
         
   --# end
      Finalizer_Scope_221;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_221;




            raise;
      end;



   return Property_Result;
end Struct_Decl_P_Function_Type_Aux;
--# end

   







--# property-start StructDecl.entity_scope nodes.lkt:2546
pragma Warnings (Off, "is not referenced");
 function Struct_Decl_P_Entity_Scope
  
  (Node : Bare_Struct_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Lexical_Env
is
   Self : Bare_Struct_Decl  := Bare_Struct_Decl (Node);
     Ent : Internal_Entity_Struct_Decl :=
       Internal_Entity_Struct_Decl'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Lexical_Env;

      
            procedure Finalizer_Scope_222 with Inline_Always;
            procedure Finalizer_Scope_635 with Inline_Always;
            procedure Finalizer_Scope_636 with Inline_Always;

      Var_Expr_0 : Internal_Entity_Type_Decl;
Var_Expr_54 : Internal_Entity_Generic_Decl;
Fld : Internal_Entity;
Cast_Result : Internal_Entity_Generic_Decl;
Fld_1 : Lexical_Env := Empty_Env;
Fld_2 : Internal_Entity_Generic_Decl;
Fld_3 : Internal_Entity_Generic_Formal_Decl_List;
Fld_4 : Bare_Generic_Formal_Decl_List;
Fld_5 : Internal_Entity_Info;
Get_Result : Bare_Full_Decl;
As_Entity : Internal_Entity_Full_Decl;
Is_Null : Boolean;
If_Result : Internal_Entity_Full_Decl;
Fld_6 : Internal_Entity_Decl;
Fld_7 : Symbol_Type;
Env_Get_Result : Internal_Entity;
Scope_Result : Internal_Entity;
Result_Var : Internal_Entity;
Cast_Result_1 : Internal_Entity_Type_Decl;
Cast_Expr : Internal_Entity_Type_Decl;
Cast_Result_2 : Internal_Entity;
Bound_Origin : Internal_Entity;
Fld_8 : Lexical_Env := Empty_Env;
Dyn_Var_Bind_Result : Lexical_Env := Empty_Env;
Scope_Result_1 : Lexical_Env := Empty_Env;
Result_Var_1 : Lexical_Env := Empty_Env;
Fld_9 : Internal_Entity_Named_Type_Decl;
Fld_10 : Bare_Named_Type_Decl;
Cast_Expr_1 : Bare_Struct_Decl;
Cast_Result_3 : Bare_Named_Type_Decl;
Is_Equal : Boolean;
If_Result_1 : Lexical_Env := Empty_Env;

            procedure Finalizer_Scope_222 is
            begin
                     Dec_Ref (Scope_Result_1);
                     Dec_Ref (Result_Var_1);
                     Dec_Ref (If_Result_1);
            end Finalizer_Scope_222;
            procedure Finalizer_Scope_635 is
            begin
                     Dec_Ref (Fld_1);
            end Finalizer_Scope_635;
            procedure Finalizer_Scope_636 is
            begin
                     Dec_Ref (Fld_8);
                     Dec_Ref (Dyn_Var_Bind_Result);
            end Finalizer_Scope_636;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 1483 '<If at nodes.lkt:2547:9>' If_Result_1 nodes.lkt:2547



--# expr-start 1471 '<Eq at nodes.lkt:2547:12>' Is_Equal nodes.lkt:2547






Cast_Expr_1 := Self; 



   
      Cast_Result_3 := Cast_Expr_1;


--# expr-start 1470 '<FieldAccess for node at nodes.lkt:2547:20>' Fld_10 nodes.lkt:2547



--# expr-start 1469 '<FieldAccess for entity_type at nodes.lkt:2547:20>' Fld_9 nodes.lkt:2547







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start LktNode.entity_type
Fld_9 := Liblktlang.Implementation.Lkt_Node_P_Entity_Type (Node => Self);
--# end
--# expr-done 1469





Fld_10 := Fld_9.Node;
--# expr-done 1470
Is_Equal := Cast_Result_3 = Fld_10; 
--# expr-done 1471
if Is_Equal then
   


--# expr-start 1480 '<Cast to TypeDecl at nodes.lkt:2549:13>' Cast_Result_1 nodes.lkt:2549








--# expr-start 1473 '<Cast to GenericDecl at nodes.lkt:2549:13>' Cast_Result nodes.lkt:2549





--# expr-start 1472 '<parent at nodes.lkt:2549:13>' Fld nodes.lkt:2549







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Liblktlang.Implementation.Parent (Node => Ent.Node, E_Info => Ent.Info);
--# expr-done 1472



   if Fld.Node = null
      or else Fld.Node.Kind in Lkt_Generic_Decl_Range
   then
      
      Cast_Result := Create_Internal_Entity_Generic_Decl
        (Node => Fld.Node,
         Info => Fld.Info);

   else
         Cast_Result := No_Entity_Generic_Decl;
   end if;


--# expr-done 1473
Var_Expr_54 := Cast_Result;





if Var_Expr_54 /= No_Entity_Generic_Decl then
   



   --# scope-start


   

--# expr-start 1479 '<EnvGet at nodes.lkt:2549:13>' Env_Get_Result nodes.lkt:2549
--# expr-start 1474 '<FieldAccess for children_env at nodes.lkt:2549:13>' Fld_1 nodes.lkt:2549







   if Var_Expr_54.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_1 := Liblktlang.Implementation.Children_Env (Node => Var_Expr_54.Node, E_Info => Var_Expr_54.Info);
--# expr-done 1474
--# expr-start 1478 '<FieldAccess for name at nodes.lkt:2550:17>' Fld_7 nodes.lkt:2550



--# expr-start 1477 '<FieldAccess for decl at nodes.lkt:2550:17>' Fld_6 nodes.lkt:2550



--# expr-start 1476 '<FieldAccess for generic_formal_decls at nodes.lkt:2550:17>' Fld_3 nodes.lkt:2550



--# expr-start 1475 '<FieldAccess for entity_gen_type at nodes.lkt:2550:17>' Fld_2 nodes.lkt:2550







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start LktNode.entity_gen_type
Fld_2 := Liblktlang.Implementation.Lkt_Node_P_Entity_Gen_Type (Node => Ent.Node);
--# end
--# expr-done 1475



   if Fld_2.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_3 := Create_Internal_Entity_Generic_Formal_Decl_List (Node => Fld_2.Node.Generic_Decl_F_Generic_Formal_Decls, Info => Fld_2.Info);
--# expr-done 1476













Fld_4 := Fld_3.Node;


Get_Result := Get (Self, Fld_4, 0, True); 
Is_Null := Get_Result = null; 
if Is_Null then
   
   If_Result := No_Entity_Full_Decl;
else
   








Fld_5 := Fld_3.Info;

As_Entity := (Info => Fld_5, Node => Get_Result); 
   If_Result := As_Entity;
end if;






   if If_Result.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_6 := Create_Internal_Entity_Decl (Node => If_Result.Node.Full_Decl_F_Decl, Info => If_Result.Info);
--# expr-done 1477



   if Fld_6.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]Decl.name'
Fld_7 := Liblktlang.Implementation.Dispatcher_Decl_P_Name (Node => Fld_6.Node);
--# end
--# expr-done 1478


Env_Get_Result := AST_Envs.Get_First (Self => Fld_1, Key => Thin (Fld_7), Lookup_Kind => To_Lookup_Kind_Type (Recursive), Categories => (Nocat => True)); 
--# expr-done 1479
Scope_Result := Env_Get_Result;


   --# end
      Finalizer_Scope_635;


   Result_Var := Scope_Result;
else
   
   Result_Var := No_Entity;
end if;






   if Result_Var.Node = null
      or else Result_Var.Node.Kind in Lkt_Type_Decl
   then
      
      Cast_Result_1 := Create_Internal_Entity_Type_Decl
        (Node => Result_Var.Node,
         Info => Result_Var.Info);

   else
         Cast_Result_1 := No_Entity_Type_Decl;
   end if;


--# expr-done 1480
Var_Expr_0 := Cast_Result_1;





if Var_Expr_0 /= No_Entity_Type_Decl then
   



   --# scope-start


   --# bind t Var_Expr_0

--# expr-start 1482 '<bind at nodes.lkt:2555:21>' Dyn_Var_Bind_Result nodes.lkt:2555






Cast_Expr := No_Entity_Type_Decl; 



   
      Cast_Result_2 := Create_Internal_Entity
        (Node => Cast_Expr.Node,
         Info => Cast_Expr.Info);


Bound_Origin := Cast_Result_2; 
--# expr-start 1481 '<FieldAccess for defined_scope_as_entity at nodes.lkt:2557:21>' Fld_8 nodes.lkt:2557







   if Var_Expr_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]Decl.defined_scope_as_entity'
Fld_8 := Liblktlang.Implementation.Dispatcher_Decl_P_Defined_Scope_As_Entity (Node => Var_Expr_0.Node, Origin => Bound_Origin, E_Info => Var_Expr_0.Info);
--# end
--# expr-done 1481
Dyn_Var_Bind_Result := Fld_8; Inc_Ref (Dyn_Var_Bind_Result);
--# expr-done 1482
Scope_Result_1 := Dyn_Var_Bind_Result;
   Inc_Ref (Scope_Result_1);


   --# end
      Finalizer_Scope_636;


   Result_Var_1 := Scope_Result_1;
else
   
   Result_Var_1 := Empty_Env;
end if;

      Inc_Ref (Result_Var_1);


   If_Result_1 := Result_Var_1;
else
   
   If_Result_1 := Empty_Env;
end if;

      Inc_Ref (If_Result_1);


--# expr-done 1483

         Property_Result := If_Result_1;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_222;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_222;
                     Finalizer_Scope_635;
                     Finalizer_Scope_636;




            raise;
      end;



   return Property_Result;
end Struct_Decl_P_Entity_Scope;
--# end

   







--# property-start StructDecl.update_func_env nodes.lkt:2565
pragma Warnings (Off, "is not referenced");
 function Struct_Decl_P_Update_Func_Env
  
  (Node : Bare_Struct_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Lexical_Env
is
   Self : Bare_Struct_Decl  := Bare_Struct_Decl (Node);
     Ent : Internal_Entity_Struct_Decl :=
       Internal_Entity_Struct_Decl'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Lexical_Env;

      
            procedure Finalizer_Scope_223 with Inline_Always;
            procedure Finalizer_Scope_639 with Inline_Always;

      Var_Expr_2 : Bare_Dyn_Env_Wrapper;
Sym : Symbol_Type;
Array_Lit : Symbol_Type_Array_Access;
Fld : Internal_Entity_Decl_Block;
Fld_1 : Bare_Decl_Block;
Fld_2 : Internal_Entity_Info;
Item_0 : Internal_Entity_Full_Decl;
Bare_Item_0 : Bare_Full_Decl;
As_Entity : Internal_Entity_Full_Decl;
Is_Null : Boolean;
If_Result : Internal_Entity_Full_Decl;
Fld_3 : Internal_Entity_Decl;
Is_A : Boolean;
Map_Result : Internal_Entity_Full_Decl_Array_Access;
Fld_4 : Internal_Entity_Decl;
Fld_5 : Symbol_Type;
Fld_6 : Internal_Entity_Decl;
Cast_Result : Internal_Entity_Field_Decl;
Fld_7 : Internal_Entity_Type_Decl;
New_Node : Bare_Synth_Arg_Decl;
As_Entity_1 : Internal_Entity_Synth_Arg_Decl;
Is_Null_1 : Boolean;
If_Result_1 : Internal_Entity_Synth_Arg_Decl;
Cast_Result_1 : Internal_Entity_Decl;
New_Struct : Internal_Formal_Param;
Map_Result_1 : Internal_Formal_Param_Array_Access;
Cast_Expr : Internal_Entity_Struct_Decl;
Cast_Result_2 : Internal_Entity_Type_Decl;
New_Node_1 : Bare_Synth_Fun_Decl;
As_Entity_2 : Internal_Entity_Synth_Fun_Decl;
Is_Null_2 : Boolean;
If_Result_2 : Internal_Entity_Synth_Fun_Decl;
Fld_8 : Internal_Entity_Function_Type;
Cast_Result_3 : Internal_Entity_Type_Decl;
Array_Lit_1 : Internal_Entity_Type_Decl_Array_Access;
New_Node_2 : Bare_Dyn_Env_Wrapper;
Fld_9 : Lexical_Env := Empty_Env;
Scope_Result : Lexical_Env := Empty_Env;
Result_Var : Lexical_Env := Empty_Env;

            procedure Finalizer_Scope_223 is
            begin
                     Dec_Ref (Array_Lit);
                     Dec_Ref (Map_Result);
                     Dec_Ref (Map_Result_1);
                     Dec_Ref (Array_Lit_1);
                     Dec_Ref (Scope_Result);
                     Dec_Ref (Result_Var);
            end Finalizer_Scope_223;
            procedure Finalizer_Scope_639 is
            begin
                     Dec_Ref (Fld_9);
            end Finalizer_Scope_639;

      
      Mmz_Handle : Memoization_Handle;
      Mmz_Val    : Mmz_Value;

      Mmz_Stored : Boolean;
      --  Whether the memoization couple was actually stored. Used to determine
      --  whether to inc-ref the memoized value.

      function Create_Mmz_Key return Mmz_Key;
      --  Create a memoization key for this property call and return it

      --------------------
      -- Create_Mmz_Key --
      --------------------

      function Create_Mmz_Key return Mmz_Key is
      begin
         return Mmz_K : Mmz_Key :=
           (Property => Mmz_Bare_Struct_Decl_Struct_Decl_P_Update_Func_Env,
            Items    => new Mmz_Key_Array (1 ..  2))
         do
            Mmz_K.Items (1) := (Kind => Mmz_Bare_Struct_Decl,
                                As_Bare_Struct_Decl => Self);
               Mmz_K.Items (2) :=
                 (Kind => Mmz_Internal_Entity_Info,
                  As_Internal_Entity_Info => E_Info);
         end return;
      end Create_Mmz_Key;

begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;

      if Self /= null then

         if not Self.Unit.Context.In_Populate_Lexical_Env then

            if Find_Memoized_Value
              (Self.Unit, Mmz_Handle, Mmz_Val, Create_Mmz_Key'Access)
            then
               --# memoization-lookup

               if Mmz_Val.Kind = Mmz_Evaluating then
                  --# memoization-return
                  Raise_Property_Exception
                    (Self,
                     Property_Error'Identity,
                     "Infinite recursion detected");

               elsif Mmz_Val.Kind = Mmz_Error then
                  --# memoization-return
                  Reraise_Memoized_Error (Mmz_Val);

               else
                  Property_Result := Mmz_Val.As_Lexical_Env;
                     Inc_Ref (Property_Result);

                  --# memoization-return
                  return Property_Result;
               end if;
               --# end
            end if;

         end if;
      end if;

      begin
         
   --# scope-start

         


--# expr-start 1504 '<New DynEnvWrapper at nodes.lkt:2566:9>' New_Node_2 nodes.lkt:2566
--# expr-start 1485 '<ArrayLiteral at nodes.lkt:2567:19>' Array_Lit nodes.lkt:2567
--# expr-start 1484 '<Symbol update at nodes.lkt:2567:20>' Sym nodes.lkt:2567
Sym := Precomputed_Symbol (Precomputed_Symbol_Table (Self.Unit.Context.Symbols), Precomputed_Sym_Update); 
--# expr-done 1484
Array_Lit := Create_Symbol_Type_Array (Internal_Symbol_Type_Array'(1 => Sym)); 
--# expr-done 1485
--# expr-start 1503 '<ArrayLiteral at nodes.lkt:2568:19>' Array_Lit_1 nodes.lkt:2568
--# expr-start 1502 '<Cast to TypeDecl at nodes.lkt:2569:17>' Cast_Result_3 nodes.lkt:2569





--# expr-start 1501 '<FieldAccess for function_type_aux at nodes.lkt:2569:17>' Fld_8 nodes.lkt:2569



--# expr-start 1500 '<as_bare_entity at nodes.lkt:2569:17>' If_Result_2 nodes.lkt:2569



--# expr-start 1499 '<New SynthFunDecl at nodes.lkt:2569:17>' New_Node_1 nodes.lkt:2569
--# expr-start 1498 '<Map at nodes.lkt:2570:26>' Map_Result_1 nodes.lkt:2570








   

   --# expr-start 1489 '<Map at nodes.lkt:2570:26>' Map_Result nodes.lkt:2570








   

   --# expr-start 1486 '<FieldAccess for decls at nodes.lkt:2570:26>' Fld nodes.lkt:2570







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Create_Internal_Entity_Decl_Block (Node => Ent.Node.Struct_Decl_F_Decls, Info => Ent.Info);
--# expr-done 1486









Fld_1 := Fld.Node;

   
      declare
         Map_Result_Vec : Internal_Entity_Full_Decl_Vectors.Vector;
      begin
   

   

      if Fld_1 = null then
         
      Map_Result := Create_Internal_Entity_Full_Decl_Array (0);
   
      else
         

      declare
         
         Collection : constant Bare_Decl_Block := Fld_1;
      begin
         for Untyped_Item_0 of
               Collection.Nodes (1 .. Children_Count (Collection))
         loop
                  
                  Bare_Item_0 := Untyped_Item_0; 
                  



Is_Null := Bare_Item_0 = null; 
if Is_Null then
   
   If_Result := No_Entity_Full_Decl;
else
   








Fld_2 := Fld.Info;

As_Entity := (Info => Fld_2, Node => Bare_Item_0); 
   If_Result := As_Entity;
end if;



                  Item_0 := If_Result; 

            
   --# scope-start


               --# bind d Item_0

            
         --# expr-start 1488 '<IsA FieldDecl at nodes.lkt:2570:51>' Is_A nodes.lkt:2570
--# expr-start 1487 '<FieldAccess for decl at nodes.lkt:2570:51>' Fld_3 nodes.lkt:2570







   if Item_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_3 := Create_Internal_Entity_Decl (Node => Item_0.Node.Full_Decl_F_Decl, Info => Item_0.Info);
--# expr-done 1487
Is_A := Fld_3.Node /= null 
and then Fld_3.Node.Kind in Lkt_Field_Decl_Range; 
--# expr-done 1488
         if Is_A then
            
         
      
      

         declare
            Item_To_Append : constant Internal_Entity_Full_Decl := Item_0;
         begin
            Internal_Entity_Full_Decl_Vectors.Append (Map_Result_Vec, Item_To_Append);
         end;
   
   
         end if;
   

            
   --# end



         end loop;
      end;
   
      end if;

   

         Map_Result := Create_Internal_Entity_Full_Decl_Array
           (Items_Count => Natural (Internal_Entity_Full_Decl_Vectors.Length (Map_Result_Vec)));
         for I in Map_Result.Items'Range loop
            Map_Result.Items (I) := Internal_Entity_Full_Decl_Vectors.Get
              (Map_Result_Vec,
               I + Internal_Entity_Full_Decl_Vectors.Index_Type'First - Map_Result.Items'First);
         end loop;
         Internal_Entity_Full_Decl_Vectors.Destroy (Map_Result_Vec);

      end;
   



--# expr-done 1489

   
      declare
         Map_Result_1_Vec : Internal_Formal_Param_Vectors.Vector;
      begin
   

   

      

      declare
         
         Collection : constant Internal_Entity_Full_Decl_Array_Access := Map_Result;
      begin
         for Item_1 of
               Collection.Items
         loop

            
   --# scope-start


               --# bind a Item_1

            
         
         
      --# expr-start 1497 '<New FormalParam at nodes.lkt:2572:25>' New_Struct nodes.lkt:2572






--# expr-start 1491 '<as_entity at nodes.lkt:2576:34>' If_Result_1 nodes.lkt:2576



--# expr-start 1490 '<New SynthArgDecl at nodes.lkt:2576:34>' New_Node nodes.lkt:2576



if Is_Foreign_Strict (Self.Self_Env, Self) then
   Raise_Property_Exception
     (Self,
      Property_Error'Identity,
      "synthetic nodes cannot have foreign lexical envs");
end if;


New_Node := new Root_Node_Record
  (Lkt_Synth_Arg_Decl);
Initialize
  (Self => New_Node,
   Kind => Lkt_Synth_Arg_Decl,
   Unit => Self.Unit,

   Token_Start_Index => No_Token_Index,
   Token_End_Index   => No_Token_Index,

   Parent => Self,

   Self_Env => Self.Self_Env);
Register_Destroyable (Self.Unit, New_Node);



--# expr-done 1490
Is_Null_1 := New_Node = null; 
if Is_Null_1 then
   
   If_Result_1 := No_Entity_Synth_Arg_Decl;
else
   

As_Entity_1 := (Info => E_Info, Node => New_Node); 
   If_Result_1 := As_Entity_1;
end if;



--# expr-done 1491



   
      Cast_Result_1 := Create_Internal_Entity_Decl
        (Node => If_Result_1.Node,
         Info => If_Result_1.Info);


--# expr-start 1493 '<FieldAccess for name at nodes.lkt:2573:41>' Fld_5 nodes.lkt:2573



--# expr-start 1492 '<FieldAccess for decl at nodes.lkt:2573:41>' Fld_4 nodes.lkt:2573







   if Item_1.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_4 := Create_Internal_Entity_Decl (Node => Item_1.Node.Full_Decl_F_Decl, Info => Item_1.Info);
--# expr-done 1492



   if Fld_4.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]Decl.name'
Fld_5 := Liblktlang.Implementation.Dispatcher_Decl_P_Name (Node => Fld_4.Node);
--# end
--# expr-done 1493
--# expr-start 1496 '<FieldAccess for get_type at nodes.lkt:2574:41>' Fld_7 nodes.lkt:2574



--# expr-start 1495 '<Cast to FieldDecl at nodes.lkt:2574:41>' Cast_Result nodes.lkt:2574





--# expr-start 1494 '<FieldAccess for decl at nodes.lkt:2574:41>' Fld_6 nodes.lkt:2574







   if Item_1.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_6 := Create_Internal_Entity_Decl (Node => Item_1.Node.Full_Decl_F_Decl, Info => Item_1.Info);
--# expr-done 1494



   if Fld_6.Node = null
      or else Fld_6.Node.Kind in Lkt_Field_Decl_Range
   then
      
      Cast_Result := Create_Internal_Entity_Field_Decl
        (Node => Fld_6.Node,
         Info => Fld_6.Info);

   else
         Cast_Result := No_Entity_Field_Decl;
   end if;


--# expr-done 1495



   if Cast_Result.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start Decl.get_type
Fld_7 := Liblktlang.Implementation.Decl_P_Get_Type (Node => Cast_Result.Node, E_Info => Cast_Result.Info);
--# end
--# expr-done 1496

New_Struct := (Accept_Logical_Var => False, Decl => Cast_Result_1, Formal_Name => Fld_5, Formal_Type => Fld_7, Has_Default_Value => True); 
--# expr-done 1497
      

         declare
            Item_To_Append : constant Internal_Formal_Param := New_Struct;
         begin
            Internal_Formal_Param_Vectors.Append (Map_Result_1_Vec, Item_To_Append);
         end;
   
   
   

            
   --# end



         end loop;
      end;
   

   

         Map_Result_1 := Create_Internal_Formal_Param_Array
           (Items_Count => Natural (Internal_Formal_Param_Vectors.Length (Map_Result_1_Vec)));
         for I in Map_Result_1.Items'Range loop
            Map_Result_1.Items (I) := Internal_Formal_Param_Vectors.Get
              (Map_Result_1_Vec,
               I + Internal_Formal_Param_Vectors.Index_Type'First - Map_Result_1.Items'First);
         end loop;
         Internal_Formal_Param_Vectors.Destroy (Map_Result_1_Vec);

      end;
   



--# expr-done 1498






Cast_Expr := Ent; 



   
      Cast_Result_2 := Create_Internal_Entity_Type_Decl
        (Node => Cast_Expr.Node,
         Info => Cast_Expr.Info);


Inc_Ref (Map_Result_1);


if Is_Foreign_Strict (Self.Self_Env, Self) then
   Raise_Property_Exception
     (Self,
      Property_Error'Identity,
      "synthetic nodes cannot have foreign lexical envs");
end if;


New_Node_1 := new Root_Node_Record
  (Lkt_Synth_Fun_Decl);
Initialize
  (Self => New_Node_1,
   Kind => Lkt_Synth_Fun_Decl,
   Unit => Self.Unit,

   Token_Start_Index => No_Token_Index,
   Token_End_Index   => No_Token_Index,

   Parent => Self,

   Self_Env => Self.Self_Env);
Register_Destroyable (Self.Unit, New_Node_1);


      New_Node_1.Synth_Fun_Decl_Args :=
         Map_Result_1;
      New_Node_1.Synth_Fun_Decl_Return_Type :=
         Cast_Result_2;

--# expr-done 1499
Is_Null_2 := New_Node_1 = null; 
if Is_Null_2 then
   
   If_Result_2 := No_Entity_Synth_Fun_Decl;
else
   

As_Entity_2 := (Info => No_Entity_Info, Node => New_Node_1); 
   If_Result_2 := As_Entity_2;
end if;



--# expr-done 1500



   if If_Result_2.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start SynthFunDecl.function_type_aux
Fld_8 := Liblktlang.Implementation.Synth_Fun_Decl_P_Function_Type_Aux (Node => If_Result_2.Node, E_Info => If_Result_2.Info);
--# end
--# expr-done 1501



   
      Cast_Result_3 := Create_Internal_Entity_Type_Decl
        (Node => Fld_8.Node,
         Info => Fld_8.Info);


--# expr-done 1502
Array_Lit_1 := Create_Internal_Entity_Type_Decl_Array (Internal_Internal_Entity_Type_Decl_Array'(1 => Cast_Result_3)); 
--# expr-done 1503
Inc_Ref (Array_Lit);
Inc_Ref (Array_Lit_1);


if Is_Foreign_Strict (Self.Self_Env, Self) then
   Raise_Property_Exception
     (Self,
      Property_Error'Identity,
      "synthetic nodes cannot have foreign lexical envs");
end if;


New_Node_2 := new Root_Node_Record
  (Lkt_Dyn_Env_Wrapper);
Initialize
  (Self => New_Node_2,
   Kind => Lkt_Dyn_Env_Wrapper,
   Unit => Self.Unit,

   Token_Start_Index => No_Token_Index,
   Token_End_Index   => No_Token_Index,

   Parent => Self,

   Self_Env => Self.Self_Env);
Register_Destroyable (Self.Unit, New_Node_2);


      New_Node_2.Dyn_Env_Wrapper_Names :=
         Array_Lit;
      New_Node_2.Dyn_Env_Wrapper_Types :=
         Array_Lit_1;

--# expr-done 1504
Var_Expr_2 := New_Node_2;





if Var_Expr_2 /= No_Bare_Lkt_Node then
   



   --# scope-start


   --# bind dew Var_Expr_2

--# expr-start 1505 '<FieldAccess for dynenvwrapper_instantiation_env at nodes.lkt:2586:22>' Fld_9 nodes.lkt:2586







   if Var_Expr_2 = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start DynEnvWrapper.dynenvwrapper_instantiation_env
Fld_9 := Liblktlang.Implementation.Dyn_Env_Wrapper_F_Dynenvwrapper_Instantiation_Env (Node => Var_Expr_2);
--# end
--# expr-done 1505
Scope_Result := Fld_9;
   Inc_Ref (Scope_Result);


   --# end
      Finalizer_Scope_639;


   Result_Var := Scope_Result;
else
   
   Result_Var := Empty_Env;
end if;

      Inc_Ref (Result_Var);



         Property_Result := Result_Var;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_223;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_223;
                     Finalizer_Scope_639;


               if Self /= null then
                     if not Self.Unit.Context.In_Populate_Lexical_Env then
                        Add_Memoized_Error
                          (Self.Unit, Mmz_Handle, Exc, Mmz_Stored);
                     end if;
               end if;


            raise;
      end;

      if Self /= null then
         if not Self.Unit.Context.In_Populate_Lexical_Env then

            Mmz_Val := (Kind => Mmz_Lexical_Env,
                        As_Lexical_Env => Property_Result);
            Add_Memoized_Value (Self.Unit, Mmz_Handle, Mmz_Val, Mmz_Stored);
               if Mmz_Stored then
                  Inc_Ref (Property_Result);
               end if;

         end if;
      end if;



   return Property_Result;
end Struct_Decl_P_Update_Func_Env;
--# end

   







--# property-start StructDecl.defined_scope nodes.lkt:2589
pragma Warnings (Off, "is not referenced");
 function Struct_Decl_P_Defined_Scope
  
  (Node : Bare_Struct_Decl
      ; Origin : Internal_Entity
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Lexical_Env
is
   Self : Bare_Struct_Decl  := Bare_Struct_Decl (Node);
     Ent : Internal_Entity_Struct_Decl :=
       Internal_Entity_Struct_Decl'(Node => Self, Info => E_Info);
      --# bind entity Ent

   

   --# bind origin Origin

   Property_Result : Lexical_Env;

      
            procedure Finalizer_Scope_224 with Inline_Always;
            procedure Finalizer_Scope_640 with Inline_Always;
            procedure Finalizer_Scope_641 with Inline_Always;
            procedure Finalizer_Scope_642 with Inline_Always;

      Var_Expr_1 : Lexical_Env := Empty_Env;
Var_Expr_55 : Internal_Entity_Type_Decl;
Fld : Internal_Entity_Decl_Block;
Fld_1 : Lexical_Env := Empty_Env;
Array_Lit : Lexical_Env_Array_Access;
Fld_2 : Internal_Entity_Type_Ref_List;
Fld_3 : Bare_Type_Ref_List;
Fld_4 : Internal_Entity_Info;
Item_0 : Internal_Entity_Type_Ref;
Bare_Item_0 : Bare_Type_Ref;
Fld_5 : Internal_Entity_Type_Decl;
Fld_6 : Lexical_Env := Empty_Env;
Scope_Result : Lexical_Env := Empty_Env;
Result_Var : Lexical_Env := Empty_Env;
As_Entity : Internal_Entity_Type_Ref;
Is_Null : Boolean;
If_Result : Internal_Entity_Type_Ref;
Map_Result : Lexical_Env_Array_Access;
Concat_Result : Lexical_Env_Array_Access;
Fld_7 : Lexical_Env := Empty_Env;
Fld_8 : Lexical_Env := Empty_Env;
Array_Lit_1 : Lexical_Env_Array_Access;
Concat_Result_1 : Lexical_Env_Array_Access;
Group_Env : Lexical_Env := Empty_Env;
Fld_9 : Internal_Entity_Type_Decl;
Fld_10 : Lexical_Env := Empty_Env;
Array_Lit_2 : Lexical_Env_Array_Access;
Group_Env_1 : Lexical_Env := Empty_Env;
Cast_Expr : Internal_Entity_Struct_Decl;
Cast_Result : Internal_Entity;
Is_Equiv : Boolean;
If_Result_1 : Lexical_Env := Empty_Env;
Scope_Result_1 : Lexical_Env := Empty_Env;
Result_Var_1 : Lexical_Env := Empty_Env;

            procedure Finalizer_Scope_224 is
            begin
                     Dec_Ref (Fld_1);
                     Dec_Ref (Array_Lit);
                     Dec_Ref (Map_Result);
                     Dec_Ref (Concat_Result);
                     Dec_Ref (Fld_7);
                     Dec_Ref (Fld_8);
                     Dec_Ref (Array_Lit_1);
                     Dec_Ref (Concat_Result_1);
                     Dec_Ref (Group_Env);
                     Dec_Ref (Scope_Result_1);
                     Dec_Ref (Result_Var_1);
            end Finalizer_Scope_224;
            procedure Finalizer_Scope_640 is
            begin
                     Dec_Ref (Scope_Result);
                     Dec_Ref (Result_Var);
            end Finalizer_Scope_640;
            procedure Finalizer_Scope_641 is
            begin
                     Dec_Ref (Fld_6);
            end Finalizer_Scope_641;
            procedure Finalizer_Scope_642 is
            begin
                     Dec_Ref (Var_Expr_1);
                     Dec_Ref (Fld_10);
                     Dec_Ref (Array_Lit_2);
                     Dec_Ref (Group_Env_1);
                     Dec_Ref (If_Result_1);
            end Finalizer_Scope_642;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         


--# expr-start 1516 '<env_group at nodes.lkt:2590:9>' Group_Env nodes.lkt:2590
--# expr-start 1508 '<ArrayLiteral at nodes.lkt:2591:13>' Array_Lit nodes.lkt:2591
--# expr-start 1507 '<FieldAccess for children_env at nodes.lkt:2591:14>' Fld_1 nodes.lkt:2591



--# expr-start 1506 '<FieldAccess for decls at nodes.lkt:2591:14>' Fld nodes.lkt:2591







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Create_Internal_Entity_Decl_Block (Node => Ent.Node.Struct_Decl_F_Decls, Info => Ent.Info);
--# expr-done 1506



   if Fld.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_1 := Liblktlang.Implementation.Children_Env (Node => Fld.Node, E_Info => Fld.Info);
--# expr-done 1507
Array_Lit := Create_Lexical_Env_Array (Internal_Lexical_Env_Array'(1 => Fld_1)); 
--# expr-done 1508
--# expr-start 1512 '<Map at nodes.lkt:2592:15>' Map_Result nodes.lkt:2592








   

   --# expr-start 1509 '<FieldAccess for traits at nodes.lkt:2592:15>' Fld_2 nodes.lkt:2592







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_2 := Create_Internal_Entity_Type_Ref_List (Node => Ent.Node.Struct_Decl_F_Traits, Info => Ent.Info);
--# expr-done 1509









Fld_3 := Fld_2.Node;

   
      declare
         Map_Result_Vec : Lexical_Env_Vectors.Vector;
      begin
   

   

      if Fld_3 = null then
         
      Map_Result := Create_Lexical_Env_Array (0);
   
      else
         

      declare
         
         Collection : constant Bare_Type_Ref_List := Fld_3;
      begin
         for Untyped_Item_0 of
               Collection.Nodes (1 .. Children_Count (Collection))
         loop
                  
                  Bare_Item_0 := Untyped_Item_0; 
                  



Is_Null := Bare_Item_0 = null; 
if Is_Null then
   
   If_Result := No_Entity_Type_Ref;
else
   








Fld_4 := Fld_2.Info;

As_Entity := (Info => Fld_4, Node => Bare_Item_0); 
   If_Result := As_Entity;
end if;



                  Item_0 := If_Result; 

            
   --# scope-start


               --# bind t Item_0

            
         
         
      


--# expr-start 1510 '<FieldAccess for referenced_decl at nodes.lkt:2592:38>' Fld_5 nodes.lkt:2592







   if Item_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start TypeRef.referenced_decl
Fld_5 := Liblktlang.Implementation.Type_Ref_P_Referenced_Decl (Node => Item_0.Node, E_Info => Item_0.Info);
--# end
--# expr-done 1510
Var_Expr_55 := Fld_5;





if Var_Expr_55 /= No_Entity_Type_Decl then
   



   --# scope-start


   

--# expr-start 1511 '<FieldAccess for defined_scope at nodes.lkt:2592:38>' Fld_6 nodes.lkt:2592







   if Var_Expr_55.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]Decl.defined_scope'
Fld_6 := Liblktlang.Implementation.Dispatcher_Decl_P_Defined_Scope (Node => Var_Expr_55.Node, Origin => Origin, E_Info => Var_Expr_55.Info);
--# end
--# expr-done 1511
Scope_Result := Fld_6;
   Inc_Ref (Scope_Result);


   --# end
      Finalizer_Scope_641;


   Result_Var := Scope_Result;
else
   
   Result_Var := Empty_Env;
end if;

      Inc_Ref (Result_Var);


      

         declare
            Item_To_Append : constant Lexical_Env := Result_Var;
         begin
               Inc_Ref (Item_To_Append);
            Lexical_Env_Vectors.Append (Map_Result_Vec, Item_To_Append);
         end;
   
   
   

            
   --# end
      Finalizer_Scope_640;



         end loop;
      end;
   
      end if;

   

         Map_Result := Create_Lexical_Env_Array
           (Items_Count => Natural (Lexical_Env_Vectors.Length (Map_Result_Vec)));
         for I in Map_Result.Items'Range loop
            Map_Result.Items (I) := Lexical_Env_Vectors.Get
              (Map_Result_Vec,
               I + Lexical_Env_Vectors.Index_Type'First - Map_Result.Items'First);
         end loop;
         Lexical_Env_Vectors.Destroy (Map_Result_Vec);

      end;
   



--# expr-done 1512
Concat_Result := Concat (Array_Lit, Map_Result); 
--# expr-start 1515 '<ArrayLiteral at nodes.lkt:2593:15>' Array_Lit_1 nodes.lkt:2593
--# expr-start 1513 '<FieldAccess for entity_scope at nodes.lkt:2593:16>' Fld_7 nodes.lkt:2593







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start StructDecl.entity_scope
Fld_7 := Liblktlang.Implementation.Struct_Decl_P_Entity_Scope (Node => Ent.Node, E_Info => Ent.Info);
--# end
--# expr-done 1513
--# expr-start 1514 '<FieldAccess for update_func_env at nodes.lkt:2593:37>' Fld_8 nodes.lkt:2593







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start StructDecl.update_func_env
Fld_8 := Liblktlang.Implementation.Struct_Decl_P_Update_Func_Env (Node => Ent.Node, E_Info => Ent.Info);
--# end
--# expr-done 1514
Array_Lit_1 := Create_Lexical_Env_Array (Internal_Lexical_Env_Array'(1 => Fld_7, 2 => Fld_8)); 
--# expr-done 1515
Concat_Result_1 := Concat (Concat_Result, Array_Lit_1); 

Group_Env := Group (Concat_Result_1, No_Metadata); 
--# expr-done 1516
Var_Expr_1 := Group_Env;

      Inc_Ref (Var_Expr_1);




if Var_Expr_1 /= Empty_Env then
   



   --# scope-start


   --# bind le Var_Expr_1

--# expr-start 1522 '<If at nodes.lkt:2598:13>' If_Result_1 nodes.lkt:2598



--# expr-start 1517 '<Eq at nodes.lkt:2598:16>' Is_Equiv nodes.lkt:2598






Cast_Expr := Ent; 



   
      Cast_Result := Create_Internal_Entity
        (Node => Cast_Expr.Node,
         Info => Cast_Expr.Info);



Is_Equiv := Equivalent (Cast_Result, Origin); 
--# expr-done 1517
if Is_Equiv then
   --# expr-start 1521 '<env_group at nodes.lkt:2599:18>' Group_Env_1 nodes.lkt:2599
--# expr-start 1520 '<ArrayLiteral at nodes.lkt:2599:18>' Array_Lit_2 nodes.lkt:2599

--# expr-start 1519 '<FieldAccess for defined_scope at nodes.lkt:2599:23>' Fld_10 nodes.lkt:2599



--# expr-start 1518 '<FieldAccess for basic_trait_from_self at nodes.lkt:2599:23>' Fld_9 nodes.lkt:2599







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start TypeDecl.basic_trait_from_self
Fld_9 := Liblktlang.Implementation.Type_Decl_P_Basic_Trait_From_Self (Node => Ent.Node, E_Info => Ent.Info);
--# end
--# expr-done 1518



   if Fld_9.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]Decl.defined_scope'
Fld_10 := Liblktlang.Implementation.Dispatcher_Decl_P_Defined_Scope (Node => Fld_9.Node, Origin => Origin, E_Info => Fld_9.Info);
--# end
--# expr-done 1519
Array_Lit_2 := Create_Lexical_Env_Array (Internal_Lexical_Env_Array'(1 => Var_Expr_1, 2 => Fld_10)); 
--# expr-done 1520

Group_Env_1 := Group (Array_Lit_2, No_Metadata); 
--# expr-done 1521
   If_Result_1 := Group_Env_1;
else
   
   If_Result_1 := Var_Expr_1;
end if;

      Inc_Ref (If_Result_1);


--# expr-done 1522
Scope_Result_1 := If_Result_1;
   Inc_Ref (Scope_Result_1);


   --# end
      Finalizer_Scope_642;


   Result_Var_1 := Scope_Result_1;
else
   
   Result_Var_1 := Empty_Env;
end if;

      Inc_Ref (Result_Var_1);



         Property_Result := Result_Var_1;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_224;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_224;
                     Finalizer_Scope_640;
                     Finalizer_Scope_641;
                     Finalizer_Scope_642;




            raise;
      end;



   return Property_Result;
end Struct_Decl_P_Defined_Scope;
--# end



   


      

   --
   --  Primitives for Bare_Trait_Decl
   --

   



      
      procedure Initialize_Fields_For_Trait_Decl
        (Self : Bare_Trait_Decl
         ; Trait_Decl_F_Syn_Name : Bare_Def_Id
         ; Trait_Decl_F_Decls : Bare_Decl_Block
        ) is
      begin

            Self.Trait_Decl_F_Syn_Name := Trait_Decl_F_Syn_Name;
            Self.Trait_Decl_F_Decls := Trait_Decl_F_Decls;
         

      end Initialize_Fields_For_Trait_Decl;


   







--# property-start TraitDecl.decl_type_name nodes.lkt:2626
pragma Warnings (Off, "is not referenced");
 function Trait_Decl_P_Decl_Type_Name
  
  (Node : Bare_Trait_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return String_Type
is
   Self : Bare_Trait_Decl  := Bare_Trait_Decl (Node);
      --# bind self Self

   


   Property_Result : String_Type;

      
            procedure Finalizer_Scope_225 with Inline_Always;

      Str : String_Type;

            procedure Finalizer_Scope_225 is
            begin
                     Dec_Ref (Str);
            end Finalizer_Scope_225;


begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         --# expr-start 1523 '<String at nodes.lkt:2626:36>' Str nodes.lkt:2626
Str := Create_String ("trait declaration"); 
--# expr-done 1523

         Property_Result := Str;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_225;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_225;




            raise;
      end;



   return Property_Result;
end Trait_Decl_P_Decl_Type_Name;
--# end

   







--# property-start TraitDecl.defined_scope_as_entity nodes.lkt:2629
pragma Warnings (Off, "is not referenced");
 function Trait_Decl_P_Defined_Scope_As_Entity
  
  (Node : Bare_Trait_Decl
      ; Origin : Internal_Entity
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Lexical_Env
is
   Self : Bare_Trait_Decl  := Bare_Trait_Decl (Node);
     Ent : Internal_Entity_Trait_Decl :=
       Internal_Entity_Trait_Decl'(Node => Self, Info => E_Info);
      --# bind entity Ent

   

   --# bind origin Origin

   Property_Result : Lexical_Env;

      
            procedure Finalizer_Scope_226 with Inline_Always;

      Fld : Internal_Entity_Decl;
Fld_1 : Internal_Entity_Named_Type_Decl;
Fld_2 : Internal_Entity_Decl;
Fld_3 : Lexical_Env := Empty_Env;
Sym : Symbol_Type;
Env_Get_Result : Internal_Entity;
Cast_Result : Internal_Entity_Type_Decl;
Array_Lit : Internal_Entity_Type_Decl_Array_Access;
Fld_4 : Internal_Entity_Decl;
Cast_Result_1 : Internal_Entity_Type_Decl;
Array_Lit_1 : Internal_Entity_Type_Decl_Array_Access;
Fld_5 : Internal_Entity_Decl;
Fld_6 : Lexical_Env := Empty_Env;
Fld_7 : Lexical_Env := Empty_Env;
Fld_8 : Internal_Entity_Trait_Decl;
Fld_9 : Bare_Trait_Decl;
Cast_Expr : Bare_Trait_Decl;
Cast_Result_2 : Bare_Trait_Decl;
Is_Equal : Boolean;
If_Result : Lexical_Env := Empty_Env;

            procedure Finalizer_Scope_226 is
            begin
                     Dec_Ref (Fld_3);
                     Dec_Ref (Array_Lit);
                     Dec_Ref (Array_Lit_1);
                     Dec_Ref (Fld_6);
                     Dec_Ref (Fld_7);
                     Dec_Ref (If_Result);
            end Finalizer_Scope_226;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 1541 '<If at nodes.lkt:2630:9>' If_Result nodes.lkt:2630



--# expr-start 1526 '<Eq at nodes.lkt:2630:12>' Is_Equal nodes.lkt:2630






Cast_Expr := Self; 



   
      Cast_Result_2 := Cast_Expr;


--# expr-start 1525 '<FieldAccess for node at nodes.lkt:2630:20>' Fld_9 nodes.lkt:2630



--# expr-start 1524 '<FieldAccess for node_trait at nodes.lkt:2630:20>' Fld_8 nodes.lkt:2630







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start LktNode.node_trait
Fld_8 := Liblktlang.Implementation.Lkt_Node_P_Node_Trait (Node => Self);
--# end
--# expr-done 1524





Fld_9 := Fld_8.Node;
--# expr-done 1525
Is_Equal := Cast_Result_2 = Fld_9; 
--# expr-done 1526
if Is_Equal then
   --# expr-start 1539 '<FieldAccess for defined_scope at nodes.lkt:2632:13>' Fld_6 nodes.lkt:2632



--# expr-start 1538 '<FieldAccess for instantiate_generic_decl at nodes.lkt:2632:13>' Fld_5 nodes.lkt:2632



--# expr-start 1527 '<FieldAccess for as_bare_decl at nodes.lkt:2632:13>' Fld nodes.lkt:2632







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start Decl.as_bare_decl
Fld := Liblktlang.Implementation.Decl_P_As_Bare_Decl (Node => Ent.Node, E_Info => Ent.Info);
--# end
--# expr-done 1527



   if Fld.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# expr-start 1537 '<ArrayLiteral at nodes.lkt:2633:17>' Array_Lit_1 nodes.lkt:2633
--# expr-start 1536 '<Cast to TypeDecl at nodes.lkt:2634:21>' Cast_Result_1 nodes.lkt:2634





--# expr-start 1535 '<FieldAccess for instantiate_generic_decl at nodes.lkt:2634:21>' Fld_4 nodes.lkt:2634



--# expr-start 1529 '<FieldAccess for as_bare_decl at nodes.lkt:2634:21>' Fld_2 nodes.lkt:2634



--# expr-start 1528 '<FieldAccess for entity_type at nodes.lkt:2634:21>' Fld_1 nodes.lkt:2634







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start LktNode.entity_type
Fld_1 := Liblktlang.Implementation.Lkt_Node_P_Entity_Type (Node => Ent.Node);
--# end
--# expr-done 1528



   if Fld_1.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start Decl.as_bare_decl
Fld_2 := Liblktlang.Implementation.Decl_P_As_Bare_Decl (Node => Fld_1.Node, E_Info => Fld_1.Info);
--# end
--# expr-done 1529



   if Fld_2.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# expr-start 1534 '<ArrayLiteral at nodes.lkt:2635:25>' Array_Lit nodes.lkt:2635
--# expr-start 1533 '<Cast to TypeDecl at nodes.lkt:2635:26>' Cast_Result nodes.lkt:2635





--# expr-start 1532 '<EnvGet at nodes.lkt:2635:26>' Env_Get_Result nodes.lkt:2635
--# expr-start 1530 '<FieldAccess for node_env at nodes.lkt:2635:26>' Fld_3 nodes.lkt:2635







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_3 := Liblktlang.Implementation.Node_Env (Node => Ent.Node, E_Info => Ent.Info);
--# expr-done 1530
--# expr-start 1531 '<Symbol T at nodes.lkt:2635:50>' Sym nodes.lkt:2635
Sym := Precomputed_Symbol (Precomputed_Symbol_Table (Self.Unit.Context.Symbols), Precomputed_Sym_T); 
--# expr-done 1531


Env_Get_Result := AST_Envs.Get_First (Self => Fld_3, Key => Thin (Sym), Lookup_Kind => To_Lookup_Kind_Type (Recursive), Categories => (Nocat => True)); 
--# expr-done 1532



   if Env_Get_Result.Node = null
      or else Env_Get_Result.Node.Kind in Lkt_Type_Decl
   then
      
      Cast_Result := Create_Internal_Entity_Type_Decl
        (Node => Env_Get_Result.Node,
         Info => Env_Get_Result.Info);

   else
         Cast_Result := No_Entity_Type_Decl;
   end if;


--# expr-done 1533
Array_Lit := Create_Internal_Entity_Type_Decl_Array (Internal_Internal_Entity_Type_Decl_Array'(1 => Cast_Result)); 
--# expr-done 1534
--# property-call-start Decl.instantiate_generic_decl
Fld_4 := Liblktlang.Implementation.Decl_P_Instantiate_Generic_Decl (Node => Fld_2.Node, Type_Params => Array_Lit, E_Info => Fld_2.Info);
--# end
--# expr-done 1535



   if Fld_4.Node = null
      or else Fld_4.Node.Kind in Lkt_Type_Decl
   then
      
      Cast_Result_1 := Create_Internal_Entity_Type_Decl
        (Node => Fld_4.Node,
         Info => Fld_4.Info);

   else
         Cast_Result_1 := No_Entity_Type_Decl;
   end if;


--# expr-done 1536
Array_Lit_1 := Create_Internal_Entity_Type_Decl_Array (Internal_Internal_Entity_Type_Decl_Array'(1 => Cast_Result_1)); 
--# expr-done 1537
--# property-call-start Decl.instantiate_generic_decl
Fld_5 := Liblktlang.Implementation.Decl_P_Instantiate_Generic_Decl (Node => Fld.Node, Type_Params => Array_Lit_1, E_Info => Fld.Info);
--# end
--# expr-done 1538



   if Fld_5.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]Decl.defined_scope'
Fld_6 := Liblktlang.Implementation.Dispatcher_Decl_P_Defined_Scope (Node => Fld_5.Node, Origin => Origin, E_Info => Fld_5.Info);
--# end
--# expr-done 1539
   If_Result := Fld_6;
else
   --# expr-start 1540 '<Super at nodes.lkt:2641:14>' Fld_7 nodes.lkt:2641







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start Decl.defined_scope_as_entity
Fld_7 := Liblktlang.Implementation.Decl_P_Defined_Scope_As_Entity (Node => Ent.Node, Origin => Origin, E_Info => Ent.Info);
--# end
--# expr-done 1540
   If_Result := Fld_7;
end if;

      Inc_Ref (If_Result);


--# expr-done 1541

         Property_Result := If_Result;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_226;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_226;




            raise;
      end;



   return Property_Result;
end Trait_Decl_P_Defined_Scope_As_Entity;
--# end



   


      

   --
   --  Primitives for Bare_Decl_Annotation
   --

   



      
      procedure Initialize_Fields_For_Decl_Annotation
        (Self : Bare_Decl_Annotation
         ; Decl_Annotation_F_Name : Bare_Id
         ; Decl_Annotation_F_Params : Bare_Decl_Annotation_Params
        ) is
      begin

            Self.Decl_Annotation_F_Name := Decl_Annotation_F_Name;
            Self.Decl_Annotation_F_Params := Decl_Annotation_F_Params;
         

      end Initialize_Fields_For_Decl_Annotation;

      
   function Decl_Annotation_F_Name
     (Node : Bare_Decl_Annotation) return Bare_Id
   is
      

   begin
         
         return Node.Decl_Annotation_F_Name;
      
   end;

      
   function Decl_Annotation_F_Params
     (Node : Bare_Decl_Annotation) return Bare_Decl_Annotation_Params
   is
      

   begin
         
         return Node.Decl_Annotation_F_Params;
      
   end;


   







--# property-start DeclAnnotation.xref_entry_point nodes.lkt:2652
pragma Warnings (Off, "is not referenced");
 function Decl_Annotation_P_Xref_Entry_Point
  
  (Node : Bare_Decl_Annotation
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Boolean
is
   Self : Bare_Decl_Annotation  := Bare_Decl_Annotation (Node);
     Ent : Internal_Entity_Decl_Annotation :=
       Internal_Entity_Decl_Annotation'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Boolean;

      

      Var_Expr_0 : Internal_Entity_Decl_Annotation_Params;
Fld : Internal_Entity_Decl_Annotation_Params;
Fld_1 : Internal_Entity_Param_List;
Fld_2 : Bare_Param_List;
Len : Integer;
Is_Equal : Boolean;
Not_Val : Boolean;
Scope_Result : Boolean;
Result_Var : Boolean;



begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         


--# expr-start 1542 '<FieldAccess for params at nodes.lkt:2653:9>' Fld nodes.lkt:2653







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Create_Internal_Entity_Decl_Annotation_Params (Node => Ent.Node.Decl_Annotation_F_Params, Info => Ent.Info);
--# expr-done 1542
Var_Expr_0 := Fld;





if Var_Expr_0 /= No_Entity_Decl_Annotation_Params then
   



   --# scope-start


   --# bind p Var_Expr_0

--# expr-start 1546 '<Not at nodes.lkt:2653:31>' Not_Val nodes.lkt:2653
--# expr-start 1545 '<Eq at nodes.lkt:2653:31>' Is_Equal nodes.lkt:2653
--# expr-start 1544 '<length at nodes.lkt:2653:31>' Len nodes.lkt:2653



--# expr-start 1543 '<FieldAccess for params at nodes.lkt:2653:31>' Fld_1 nodes.lkt:2653







   if Var_Expr_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_1 := Create_Internal_Entity_Param_List (Node => Var_Expr_0.Node.Decl_Annotation_Params_F_Params, Info => Var_Expr_0.Info);
--# expr-done 1543





Fld_2 := Fld_1.Node; 
Len := Length (Fld_2); 
--# expr-done 1544

Is_Equal := Len = 0; 
--# expr-done 1545
Not_Val := not (Is_Equal); 
--# expr-done 1546
Scope_Result := Not_Val;


   --# end


   Result_Var := Scope_Result;
else
   
   Result_Var := False;
end if;




         Property_Result := Result_Var;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Decl_Annotation_P_Xref_Entry_Point;
--# end

   







--# property-start DeclAnnotation.with_dynvars_equation nodes.lkt:2657
pragma Warnings (Off, "is not referenced");
 function Decl_Annotation_P_With_Dynvars_Equation
  
  (Node : Bare_Decl_Annotation
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Logic_Equation
is
   Self : Bare_Decl_Annotation  := Bare_Decl_Annotation (Node);
     Ent : Internal_Entity_Decl_Annotation :=
       Internal_Entity_Decl_Annotation'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Logic_Equation;

      
            procedure Finalizer_Scope_228 with Inline_Always;
            procedure Finalizer_Scope_644 with Inline_Always;
            procedure Finalizer_Scope_645 with Inline_Always;

      Var_Expr_56 : Internal_Entity_Decl_Annotation_Params;
Fld : Internal_Entity_Decl_Annotation_Params;
Fld_1 : Internal_Entity_Param_List;
Fld_2 : Bare_Param_List;
Fld_3 : Internal_Entity_Info;
Item_0 : Internal_Entity_Param;
Bare_Item_0 : Bare_Param;
Fld_4 : Logic_Equation;
Fld_5 : Bare_Param;
Cast_Result : Bare_Lkt_Node;
Bound_Error_Location : Bare_Lkt_Node;
Fld_6 : Internal_Entity_Ref_Id;
Fld_7 : Logic_Var;
Pred : Logic_Equation;
Dyn_Var_Bind_Result : Logic_Equation;
Fld_8 : Bare_Param;
Cast_Result_1 : Bare_Lkt_Node;
Bound_Error_Location_1 : Bare_Lkt_Node;
Fld_9 : Internal_Entity_Expr;
Cast_Result_2 : Internal_Entity_Ref_Id;
Fld_10 : Logic_Var;
Pred_1 : Logic_Equation;
Dyn_Var_Bind_Result_1 : Logic_Equation;
True_Rel : Logic_Equation;
Fld_11 : Internal_Entity_Expr;
Is_A : Boolean;
If_Result : Logic_Equation;
Fld_12 : Internal_Entity_Ref_Id;
Is_Null : Boolean;
Not_Val : Boolean;
If_Result_1 : Logic_Equation;
And_Pred : Logic_Equation;
As_Entity : Internal_Entity_Param;
Is_Null_1 : Boolean;
If_Result_2 : Internal_Entity_Param;
Map_Result : Logic_Equation_Array_Access;
Scope_Result : Logic_Equation_Array_Access;
Result_Var : Logic_Equation_Array_Access;
Logic_Boolean_Op : Logic_Equation;

            procedure Finalizer_Scope_228 is
            begin
                     Dec_Ref (Scope_Result);
                     Dec_Ref (Result_Var);
                     Dec_Ref (Logic_Boolean_Op);
            end Finalizer_Scope_228;
            procedure Finalizer_Scope_644 is
            begin
                     Dec_Ref (Map_Result);
            end Finalizer_Scope_644;
            procedure Finalizer_Scope_645 is
            begin
                     Dec_Ref (Fld_4);
                     Dec_Ref (Pred);
                     Dec_Ref (Dyn_Var_Bind_Result);
                     Dec_Ref (Pred_1);
                     Dec_Ref (Dyn_Var_Bind_Result_1);
                     Dec_Ref (True_Rel);
                     Dec_Ref (If_Result);
                     Dec_Ref (If_Result_1);
                     Dec_Ref (And_Pred);
            end Finalizer_Scope_645;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 1570 '<LogicAll at nodes.lkt:2658:9>' Logic_Boolean_Op nodes.lkt:2658



--# expr-start 1547 '<FieldAccess for params at nodes.lkt:2658:9>' Fld nodes.lkt:2658







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Create_Internal_Entity_Decl_Annotation_Params (Node => Ent.Node.Decl_Annotation_F_Params, Info => Ent.Info);
--# expr-done 1547
Var_Expr_56 := Fld;





if Var_Expr_56 /= No_Entity_Decl_Annotation_Params then
   



   --# scope-start


   

--# expr-start 1569 '<Map at nodes.lkt:2658:9>' Map_Result nodes.lkt:2658








   

   --# expr-start 1548 '<FieldAccess for params at nodes.lkt:2658:9>' Fld_1 nodes.lkt:2658







   if Var_Expr_56.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_1 := Create_Internal_Entity_Param_List (Node => Var_Expr_56.Node.Decl_Annotation_Params_F_Params, Info => Var_Expr_56.Info);
--# expr-done 1548









Fld_2 := Fld_1.Node;

   
      declare
         Map_Result_Vec : Logic_Equation_Vectors.Vector;
      begin
   

   

      if Fld_2 = null then
         
      Map_Result := Create_Logic_Equation_Array (0);
   
      else
         

      declare
         
         Collection : constant Bare_Param_List := Fld_2;
      begin
         for Untyped_Item_0 of
               Collection.Nodes (1 .. Children_Count (Collection))
         loop
                  
                  Bare_Item_0 := Untyped_Item_0; 
                  



Is_Null_1 := Bare_Item_0 = null; 
if Is_Null_1 then
   
   If_Result_2 := No_Entity_Param;
else
   








Fld_3 := Fld_1.Info;

As_Entity := (Info => Fld_3, Node => Bare_Item_0); 
   If_Result_2 := As_Entity;
end if;



                  Item_0 := If_Result_2; 

            
   --# scope-start


               --# bind p Item_0

            
         
         
      --# expr-start 1568 '<LogicBinaryOp And at nodes.lkt:2660:13>' And_Pred nodes.lkt:2660
--# expr-start 1549 '<FieldAccess for xref_equation at nodes.lkt:2660:13>' Fld_4 nodes.lkt:2660







   if Item_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]LktNode.xref_equation'
Fld_4 := Liblktlang.Implementation.Dispatcher_Lkt_Node_P_Xref_Equation (Node => Item_0.Node, E_Info => Item_0.Info);
--# end
--# expr-done 1549
--# expr-start 1567 '<If at nodes.lkt:2662:17>' If_Result_1 nodes.lkt:2662



--# expr-start 1552 '<Not at nodes.lkt:2662:20>' Not_Val nodes.lkt:2662
--# expr-start 1551 '<IsNull at nodes.lkt:2662:24>' Is_Null nodes.lkt:2662
--# expr-start 1550 '<FieldAccess for name at nodes.lkt:2662:24>' Fld_12 nodes.lkt:2662







   if Item_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_12 := Create_Internal_Entity_Ref_Id (Node => Item_0.Node.Param_F_Name, Info => Item_0.Info);
--# expr-done 1550
Is_Null := Fld_12.Node = null; 
--# expr-done 1551
Not_Val := not (Is_Null); 
--# expr-done 1552
if Not_Val then
   --# expr-start 1557 '<bind at nodes.lkt:2664:21>' Dyn_Var_Bind_Result nodes.lkt:2664





--# expr-start 1553 '<FieldAccess for node at nodes.lkt:2664:43>' Fld_5 nodes.lkt:2664









Fld_5 := Item_0.Node;
--# expr-done 1553



   
      Cast_Result := Fld_5;


Bound_Error_Location := Cast_Result; 
--# expr-start 1556 '<Predicate on Decl.is_dynvar at nodes.lkt:2665:21>' Pred nodes.lkt:2665
--# expr-start 1555 '<FieldAccess for ref_var at nodes.lkt:2665:37>' Fld_7 nodes.lkt:2665



--# expr-start 1554 '<FieldAccess for name at nodes.lkt:2665:37>' Fld_6 nodes.lkt:2665







   if Item_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_6 := Create_Internal_Entity_Ref_Id (Node => Item_0.Node.Param_F_Name, Info => Item_0.Info);
--# expr-done 1554



   if Fld_6.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_7 := Fld_6.Node.Ref_Id_Ref_Var'Unrestricted_Access;
--# expr-done 1555
Fld_7.Value := No_Entity;
Entity_Vars.Reset (Fld_7);

Pred := Solver.Create_Predicate (Fld_7, Create_Decl_P_Is_Dynvar_0_Predicate (Bound_Error_Location)); 
--# expr-done 1556
Dyn_Var_Bind_Result := Pred; Inc_Ref (Dyn_Var_Bind_Result);
--# expr-done 1557
   If_Result_1 := Dyn_Var_Bind_Result;
else
   --# expr-start 1566 '<If at nodes.lkt:2662:17>' If_Result nodes.lkt:2662



--# expr-start 1559 '<IsA RefId at nodes.lkt:2667:22>' Is_A nodes.lkt:2667
--# expr-start 1558 '<FieldAccess for value at nodes.lkt:2667:22>' Fld_11 nodes.lkt:2667







   if Item_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_11 := Create_Internal_Entity_Expr (Node => Item_0.Node.Param_F_Value, Info => Item_0.Info);
--# expr-done 1558
Is_A := Fld_11.Node /= null 
and then Fld_11.Node.Kind in Lkt_Ref_Id_Range; 
--# expr-done 1559
if Is_A then
   --# expr-start 1565 '<bind at nodes.lkt:2669:21>' Dyn_Var_Bind_Result_1 nodes.lkt:2669





--# expr-start 1560 '<FieldAccess for node at nodes.lkt:2669:43>' Fld_8 nodes.lkt:2669









Fld_8 := Item_0.Node;
--# expr-done 1560



   
      Cast_Result_1 := Fld_8;


Bound_Error_Location_1 := Cast_Result_1; 
--# expr-start 1564 '<Predicate on Decl.is_dynvar at nodes.lkt:2670:21>' Pred_1 nodes.lkt:2670
--# expr-start 1563 '<FieldAccess for ref_var at nodes.lkt:2670:37>' Fld_10 nodes.lkt:2670



--# expr-start 1562 '<Cast to RefId at nodes.lkt:2670:37>' Cast_Result_2 nodes.lkt:2670





--# expr-start 1561 '<FieldAccess for value at nodes.lkt:2670:37>' Fld_9 nodes.lkt:2670







   if Item_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_9 := Create_Internal_Entity_Expr (Node => Item_0.Node.Param_F_Value, Info => Item_0.Info);
--# expr-done 1561



   if Fld_9.Node = null
      or else Fld_9.Node.Kind in Lkt_Ref_Id_Range
   then
      
      Cast_Result_2 := Create_Internal_Entity_Ref_Id
        (Node => Fld_9.Node,
         Info => Fld_9.Info);

   else
         Cast_Result_2 := No_Entity_Ref_Id;
   end if;


--# expr-done 1562



   if Cast_Result_2.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_10 := Cast_Result_2.Node.Ref_Id_Ref_Var'Unrestricted_Access;
--# expr-done 1563
Fld_10.Value := No_Entity;
Entity_Vars.Reset (Fld_10);

Pred_1 := Solver.Create_Predicate (Fld_10, Create_Decl_P_Is_Dynvar_0_Predicate (Bound_Error_Location_1)); 
--# expr-done 1564
Dyn_Var_Bind_Result_1 := Pred_1; Inc_Ref (Dyn_Var_Bind_Result_1);
--# expr-done 1565
   If_Result := Dyn_Var_Bind_Result_1;
else
   True_Rel := Solver.Create_True ((if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:2672:22") else null)); 
   If_Result := True_Rel;
end if;

      Inc_Ref (If_Result);


--# expr-done 1566
   If_Result_1 := If_Result;
end if;

      Inc_Ref (If_Result_1);


--# expr-done 1567
And_Pred := Create_And (Fld_4, If_Result_1, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:2660:13") else null)); 
--# expr-done 1568
      

         declare
            Item_To_Append : constant Logic_Equation := And_Pred;
         begin
               Inc_Ref (Item_To_Append);
            Logic_Equation_Vectors.Append (Map_Result_Vec, Item_To_Append);
         end;
   
   
   

            
   --# end
      Finalizer_Scope_645;



         end loop;
      end;
   
      end if;

   

         Map_Result := Create_Logic_Equation_Array
           (Items_Count => Natural (Logic_Equation_Vectors.Length (Map_Result_Vec)));
         for I in Map_Result.Items'Range loop
            Map_Result.Items (I) := Logic_Equation_Vectors.Get
              (Map_Result_Vec,
               I + Logic_Equation_Vectors.Index_Type'First - Map_Result.Items'First);
         end loop;
         Logic_Equation_Vectors.Destroy (Map_Result_Vec);

      end;
   



--# expr-done 1569
Scope_Result := Map_Result;
   Inc_Ref (Scope_Result);


   --# end
      Finalizer_Scope_644;


   Result_Var := Scope_Result;
else
   
   Result_Var := No_Logic_Equation_Array_Type;
end if;

      Inc_Ref (Result_Var);


Logic_Boolean_Op := Solver.Create_All (Relation_Array (Result_Var.Items), (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:2658:9") else null)); 
--# expr-done 1570

         Property_Result := Logic_Boolean_Op;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_228;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_228;
                     Finalizer_Scope_644;
                     Finalizer_Scope_645;




            raise;
      end;



   return Property_Result;
end Decl_Annotation_P_With_Dynvars_Equation;
--# end

   







--# property-start DeclAnnotation.xref_equation nodes.lkt:2678
pragma Warnings (Off, "is not referenced");
 function Decl_Annotation_P_Xref_Equation
  
  (Node : Bare_Decl_Annotation
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Logic_Equation
is
   Self : Bare_Decl_Annotation  := Bare_Decl_Annotation (Node);
     Ent : Internal_Entity_Decl_Annotation :=
       Internal_Entity_Decl_Annotation'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Logic_Equation;

      
            procedure Finalizer_Scope_229 with Inline_Always;

      Fld : Logic_Equation;
True_Rel : Logic_Equation;
Fld_1 : Internal_Entity_Id;
Fld_2 : Bare_Id;
Sym : Symbol_Type;
Sym_1 : Symbol_Type;
Is_Equal : Boolean;
If_Result : Logic_Equation;

            procedure Finalizer_Scope_229 is
            begin
                     Dec_Ref (Fld);
                     Dec_Ref (True_Rel);
                     Dec_Ref (If_Result);
            end Finalizer_Scope_229;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 1576 '<If at nodes.lkt:2679:9>' If_Result nodes.lkt:2679



--# expr-start 1574 '<Eq at nodes.lkt:2679:12>' Is_Equal nodes.lkt:2679
--# expr-start 1572 '<GetSymbol at nodes.lkt:2679:12>' Sym nodes.lkt:2679



--# expr-start 1571 '<FieldAccess for name at nodes.lkt:2679:12>' Fld_1 nodes.lkt:2679







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_1 := Create_Internal_Entity_Id (Node => Ent.Node.Decl_Annotation_F_Name, Info => Ent.Info);
--# expr-done 1571





Fld_2 := Fld_1.Node; 
Sym := Get_Symbol (Fld_2); 
--# expr-done 1572
--# expr-start 1573 '<Symbol with_dynvars at nodes.lkt:2679:32>' Sym_1 nodes.lkt:2679
Sym_1 := Precomputed_Symbol (Precomputed_Symbol_Table (Self.Unit.Context.Symbols), Precomputed_Sym_With_Dynvars); 
--# expr-done 1573
Is_Equal := Sym = Sym_1; 
--# expr-done 1574
if Is_Equal then
   --# expr-start 1575 '<FieldAccess for with_dynvars_equation at nodes.lkt:2680:14>' Fld nodes.lkt:2680







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start DeclAnnotation.with_dynvars_equation
Fld := Liblktlang.Implementation.Decl_Annotation_P_With_Dynvars_Equation (Node => Ent.Node, E_Info => Ent.Info);
--# end
--# expr-done 1575
   If_Result := Fld;
else
   True_Rel := Solver.Create_True ((if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:2681:14") else null)); 
   If_Result := True_Rel;
end if;

      Inc_Ref (If_Result);


--# expr-done 1576

         Property_Result := If_Result;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_229;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_229;




            raise;
      end;



   return Property_Result;
end Decl_Annotation_P_Xref_Equation;
--# end



   


      

   --
   --  Primitives for Bare_Decl_Annotation_Params
   --

   



      
      procedure Initialize_Fields_For_Decl_Annotation_Params
        (Self : Bare_Decl_Annotation_Params
         ; Decl_Annotation_Params_F_Params : Bare_Param_List
        ) is
      begin

            Self.Decl_Annotation_Params_F_Params := Decl_Annotation_Params_F_Params;
         

      end Initialize_Fields_For_Decl_Annotation_Params;

      
   function Decl_Annotation_Params_F_Params
     (Node : Bare_Decl_Annotation_Params) return Bare_Param_List
   is
      

   begin
         
         return Node.Decl_Annotation_Params_F_Params;
      
   end;




   


      

   --
   --  Primitives for Bare_Dyn_Env_Wrapper
   --

   



      
      procedure Initialize_Fields_For_Dyn_Env_Wrapper
        (Self : Bare_Dyn_Env_Wrapper
        ) is
      begin

         
      Self.Dyn_Env_Wrapper_Names := No_Symbol_Type_Array_Type;
      Self.Dyn_Env_Wrapper_Types := No_Internal_Entity_Type_Decl_Array_Type;
      Self.Bare_Dyn_Env_Wrapper_Lf_State_Dynenvwrapper_Instantiation_Env := Uninitialized;
      Self.Bare_Dyn_Env_Wrapper_Lf_Stg_Dynenvwrapper_Instantiation_Env := Empty_Env;

      end Initialize_Fields_For_Dyn_Env_Wrapper;


   







--# property-start DynEnvWrapper.dynenvwrapper_instantiation_env nodes.lkt:2701
pragma Warnings (Off, "is not referenced");
 function Dyn_Env_Wrapper_F_Dynenvwrapper_Instantiation_Env
  
  (Node : Bare_Dyn_Env_Wrapper
  )

   return Lexical_Env
is
   Self : Bare_Dyn_Env_Wrapper  := Bare_Dyn_Env_Wrapper (Node);
      --# bind self Self

   


   Property_Result : Lexical_Env;

      
            procedure Finalizer_Scope_230 with Inline_Always;

      Dyn_Env : Lexical_Env := Empty_Env;

            procedure Finalizer_Scope_230 is
            begin
                     Dec_Ref (Dyn_Env);
            end Finalizer_Scope_230;


begin
   --# property-body-start

   pragma Assert (Self = Node);

      case Self.Bare_Dyn_Env_Wrapper_Lf_State_Dynenvwrapper_Instantiation_Env is
         when Uninitialized =>
            null;

         when Initialized =>
            Property_Result := Self.Bare_Dyn_Env_Wrapper_Lf_Stg_Dynenvwrapper_Instantiation_Env;
               Inc_Ref (Property_Result);
            return Property_Result;

         when Error_Initialization_State =>
            Reraise_Initialization_Error
              (Self,
               Self.Bare_Dyn_Env_Wrapper_Lf_State_Dynenvwrapper_Instantiation_Env,
               "lazy field memoization");
      end case;


      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 1577 '<DynamicLexicalEnv at nodes.lkt:2702:9>' Dyn_Env nodes.lkt:2702


Dyn_Env := Create_Dynamic_Lexical_Env (Self, Dyn_Env_Wrapper_P_Instantiation_Bindings'Access, Lkt_Node_P_Shed_Rebindings'Access, False, Self.Unit.Context.Symbols); 
--# expr-done 1577

         Property_Result := Dyn_Env;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_230;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_230;

               Self.Bare_Dyn_Env_Wrapper_Lf_State_Dynenvwrapper_Instantiation_Env :=
                 Initialization_Error (Exc);



            raise;
      end;

      Self.Bare_Dyn_Env_Wrapper_Lf_State_Dynenvwrapper_Instantiation_Env := Initialized;
      Self.Bare_Dyn_Env_Wrapper_Lf_Stg_Dynenvwrapper_Instantiation_Env := Property_Result;
         Inc_Ref (Property_Result);


   return Property_Result;
end Dyn_Env_Wrapper_F_Dynenvwrapper_Instantiation_Env;
--# end

   







--# property-start DynEnvWrapper.instantiation_bindings nodes.lkt:2712
pragma Warnings (Off, "is not referenced");
 function Dyn_Env_Wrapper_P_Instantiation_Bindings
  
  (Node : Bare_Dyn_Env_Wrapper
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Internal_Inner_Env_Assoc_Array_Access
is
   Self : Bare_Dyn_Env_Wrapper  := Bare_Dyn_Env_Wrapper (Node);
     Ent : Internal_Entity_Dyn_Env_Wrapper :=
       Internal_Entity_Dyn_Env_Wrapper'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Internal_Inner_Env_Assoc_Array_Access;

      
            procedure Finalizer_Scope_231 with Inline_Always;
            procedure Finalizer_Scope_646 with Inline_Always;

      Fld : Symbol_Type_Array_Access;
Index_1 : Integer;
Fld_1 : Internal_Entity_Type_Decl_Array_Access;
Get_Result : Internal_Entity_Type_Decl;
Fld_2 : Bare_Type_Decl;
Fld_3 : Internal_Entity_Type_Decl_Array_Access;
Get_Result_1 : Internal_Entity_Type_Decl;
Fld_4 : Internal_Entity_Info;
Fld_5 : Env_Rebindings;
Cast_Result : Bare_Lkt_Node;
New_Struct : Internal_Inner_Env_Assoc;
Map_Result : Internal_Inner_Env_Assoc_Array_Access;

            procedure Finalizer_Scope_231 is
            begin
                     Dec_Ref (Fld);
                     Dec_Ref (Map_Result);
            end Finalizer_Scope_231;
            procedure Finalizer_Scope_646 is
            begin
                     Dec_Ref (Fld_1);
                     Dec_Ref (Fld_3);
            end Finalizer_Scope_646;


begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         --# expr-start 1587 '<Map at nodes.lkt:2713:9>' Map_Result nodes.lkt:2713








   

   --# expr-start 1578 '<FieldAccess for names at nodes.lkt:2713:9>' Fld nodes.lkt:2713







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Ent.Node.Dyn_Env_Wrapper_Names;
Inc_Ref (Fld);
--# expr-done 1578

   
      declare
         Map_Result_Vec : Internal_Inner_Env_Assoc_Vectors.Vector;
      begin
   

   

      
         Index_1 := 0;

      declare
         
         Collection : constant Symbol_Type_Array_Access := Fld;
      begin
         for Item_0 of
               Collection.Items
         loop

            
   --# scope-start


               --# bind name Item_0
               --# bind i Index_1

            
         
         
      --# expr-start 1586 '<New InnerEnvAssoc at nodes.lkt:2715:13>' New_Struct nodes.lkt:2715


--# expr-start 1582 '<FieldAccess for rebindings at nodes.lkt:2718:28>' Fld_5 nodes.lkt:2718



--# expr-start 1581 '<FieldAccess for info at nodes.lkt:2718:28>' Fld_4 nodes.lkt:2718



--# expr-start 1580 '<at at nodes.lkt:2718:28>' Get_Result_1 nodes.lkt:2718

--# expr-start 1579 '<FieldAccess for types at nodes.lkt:2718:28>' Fld_3 nodes.lkt:2718







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_3 := Ent.Node.Dyn_Env_Wrapper_Types;
Inc_Ref (Fld_3);
--# expr-done 1579


Get_Result_1 := Get (Self, Fld_3, Index_1, True); 
--# expr-done 1580





Fld_4 := Get_Result_1.Info;
--# expr-done 1581





Fld_5 := Fld_4.Rebindings;
--# expr-done 1582





--# expr-start 1585 '<FieldAccess for node at nodes.lkt:2717:23>' Fld_2 nodes.lkt:2717



--# expr-start 1584 '<at at nodes.lkt:2717:23>' Get_Result nodes.lkt:2717

--# expr-start 1583 '<FieldAccess for types at nodes.lkt:2717:23>' Fld_1 nodes.lkt:2717







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_1 := Ent.Node.Dyn_Env_Wrapper_Types;
Inc_Ref (Fld_1);
--# expr-done 1583


Get_Result := Get (Self, Fld_1, Index_1, True); 
--# expr-done 1584





Fld_2 := Get_Result.Node;
--# expr-done 1585



   
      Cast_Result := Fld_2;


New_Struct := (Key => Item_0, Metadata => No_Metadata, Rebindings => Fld_5, Value => Cast_Result); 
--# expr-done 1586
      

         declare
            Item_To_Append : constant Internal_Inner_Env_Assoc := New_Struct;
         begin
            Internal_Inner_Env_Assoc_Vectors.Append (Map_Result_Vec, Item_To_Append);
         end;
   
   
   

            
   --# end
      Finalizer_Scope_646;



               Index_1 := Index_1 + 1;
         end loop;
      end;
   

   

         Map_Result := Create_Internal_Inner_Env_Assoc_Array
           (Items_Count => Natural (Internal_Inner_Env_Assoc_Vectors.Length (Map_Result_Vec)));
         for I in Map_Result.Items'Range loop
            Map_Result.Items (I) := Internal_Inner_Env_Assoc_Vectors.Get
              (Map_Result_Vec,
               I + Internal_Inner_Env_Assoc_Vectors.Index_Type'First - Map_Result.Items'First);
         end loop;
         Internal_Inner_Env_Assoc_Vectors.Destroy (Map_Result_Vec);

      end;
   



--# expr-done 1587

         Property_Result := Map_Result;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_231;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_231;
                     Finalizer_Scope_646;




            raise;
      end;



   return Property_Result;
end Dyn_Env_Wrapper_P_Instantiation_Bindings;
--# end


   
function Dyn_Env_Wrapper_P_Instantiation_Bindings
  (E : Entity
  ) return Internal_Inner_Env_Assoc_Array_Access
is
   

      E_Info : Internal_Entity_Info :=
         Shed_Rebindings (E.Info, Children_Env (E.Node));
      
begin
   
      if E.Node /= null
         and then E.Node.Kind not in Lkt_Dyn_Env_Wrapper_Range
      then
         Raise_Property_Exception
           (E.Node,
            Property_Error'Identity,
            "mismatching node type");
      end if;

   declare
      Result : constant Internal_Inner_Env_Assoc_Array_Access :=
         Dyn_Env_Wrapper_P_Instantiation_Bindings (E.Node, E_Info);
   begin
         return Result;
   end;
end;


   


      

   --
   --  Primitives for Bare_Elsif_Branch
   --

   



      
      procedure Initialize_Fields_For_Elsif_Branch
        (Self : Bare_Elsif_Branch
         ; Elsif_Branch_F_Cond_Expr : Bare_Expr
         ; Elsif_Branch_F_Then_Expr : Bare_Expr
        ) is
      begin

            Self.Elsif_Branch_F_Cond_Expr := Elsif_Branch_F_Cond_Expr;
            Self.Elsif_Branch_F_Then_Expr := Elsif_Branch_F_Then_Expr;
         

      end Initialize_Fields_For_Elsif_Branch;

      
   function Elsif_Branch_F_Cond_Expr
     (Node : Bare_Elsif_Branch) return Bare_Expr
   is
      

   begin
         
         return Node.Elsif_Branch_F_Cond_Expr;
      
   end;

      
   function Elsif_Branch_F_Then_Expr
     (Node : Bare_Elsif_Branch) return Bare_Expr
   is
      

   begin
         
         return Node.Elsif_Branch_F_Then_Expr;
      
   end;




   


      

   --
   --  Primitives for Bare_Enum_Class_Case
   --

   



      
      procedure Initialize_Fields_For_Enum_Class_Case
        (Self : Bare_Enum_Class_Case
         ; Enum_Class_Case_F_Decls : Bare_Enum_Class_Alt_Decl_List
        ) is
      begin

            Self.Enum_Class_Case_F_Decls := Enum_Class_Case_F_Decls;
         

      end Initialize_Fields_For_Enum_Class_Case;

      
   function Enum_Class_Case_F_Decls
     (Node : Bare_Enum_Class_Case) return Bare_Enum_Class_Alt_Decl_List
   is
      

   begin
         
         return Node.Enum_Class_Case_F_Decls;
      
   end;




   


      

   --
   --  Primitives for Bare_Excludes_Null
   --

   





   







--# property-start '[dispatcher]ExcludesNull.as_bool' dispatcher
pragma Warnings (Off, "is not referenced");
 function Dispatcher_Excludes_Null_P_As_Bool
  
  (Node : Bare_Excludes_Null
  )

   return Boolean
is
   Self : Bare_Excludes_Null  := Bare_Excludes_Null (Node);
      --# bind self Self

   


   Property_Result : Boolean;



begin
   --# property-body-start

   pragma Assert (Self = Node);





      if Self = null then
         Raise_Property_Exception
           (Self, Property_Error'Identity, "dispatching on null node");
      end if;

      case Lkt_Excludes_Null (Self.Kind) is
               when Lkt_Excludes_Null_Absent =>
                  --# property-call-start ExcludesNull.Absent.as_bool
                  Property_Result := Excludes_Null_Absent_P_As_Bool
                    (Self
                    );
                  --# end
               when Lkt_Excludes_Null_Present =>
                  --# property-call-start ExcludesNull.Present.as_bool
                  Property_Result := Excludes_Null_Present_P_As_Bool
                    (Self
                    );
                  --# end
      end case;




   return Property_Result;
end Dispatcher_Excludes_Null_P_As_Bool;
--# end



   


      

   --
   --  Primitives for Bare_Excludes_Null_Absent
   --

   





   







--# property-start ExcludesNull.Absent.as_bool nodes.lkt:2741
pragma Warnings (Off, "is not referenced");
 function Excludes_Null_Absent_P_As_Bool
  
  (Node : Bare_Excludes_Null_Absent
  )

   return Boolean
is
   Self : Bare_Excludes_Null_Absent  := Bare_Excludes_Null_Absent (Node);
      --# bind self Self

   


   Property_Result : Boolean;

      

      



begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         

         Property_Result := False;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Excludes_Null_Absent_P_As_Bool;
--# end



   


      

   --
   --  Primitives for Bare_Excludes_Null_Present
   --

   





   







--# property-start ExcludesNull.Present.as_bool nodes.lkt:2741
pragma Warnings (Off, "is not referenced");
 function Excludes_Null_Present_P_As_Bool
  
  (Node : Bare_Excludes_Null_Present
  )

   return Boolean
is
   Self : Bare_Excludes_Null_Present  := Bare_Excludes_Null_Present (Node);
      --# bind self Self

   


   Property_Result : Boolean;

      

      



begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         

         Property_Result := True;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Excludes_Null_Present_P_As_Bool;
--# end



   


      

   --
   --  Primitives for Bare_Expr
   --

   



      
      procedure Initialize_Fields_For_Expr
        (Self : Bare_Expr
        ) is
      begin

         
      Self.Expr_Expected_Type_Var := Null_Var_Record;
      Self.Expr_Actual_Type_Var := Null_Var_Record;
      Self.Expr_Generic_Func_Type_Var := Null_Var_Record;

      end Initialize_Fields_For_Expr;


   







--# property-start Expr.xref_entry_point nodes.lkt:2752
pragma Warnings (Off, "is not referenced");
 function Expr_P_Xref_Entry_Point
  
  (Node : Bare_Expr
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Boolean
is
   Self : Bare_Expr  := Bare_Expr (Node);
     Ent : Internal_Entity_Expr :=
       Internal_Entity_Expr'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Boolean;

      

      Match_0 : Bare_Cast_Expr;
Match_1 : Bare_Isa;
Match_2 : Bare_Match_Expr;
Match_3 : Bare_Lambda_Expr;
Match_4 : Bare_Base_Dot_Expr;
Match_5 : Bare_Param;
Match_6 : Bare_Call_Expr;
Match_7 : Bare_Lkt_Node;
Fld : Bare_Lkt_Node;
Fld_1 : Boolean;
Fld_2 : Bare_Expr;
Cast_Result : Bare_Expr;
Is_Equal : Boolean;
Fld_3 : Bare_Expr;
Cast_Result_1 : Bare_Expr;
Is_Equal_1 : Boolean;
Fld_4 : Boolean;
If_Result : Boolean;
Fld_5 : Bare_Lkt_Node;
Fld_6 : Bare_Lkt_Node;
Fld_7 : Bare_Lkt_Node;
Is_A : Boolean;
Not_Val : Boolean;
If_Result_1 : Boolean;
Fld_8 : Bare_Expr;
Cast_Result_2 : Bare_Expr;
Is_Equal_2 : Boolean;
Fld_9 : Boolean;
If_Result_2 : Boolean;
Is_A_1 : Boolean;
Not_Val_1 : Boolean;
If_Result_3 : Boolean;
Match_Prefix : Bare_Lkt_Node;
Cast_Result_3 : Bare_Cast_Expr;
Let_Result : Boolean;
Scope_Result : Boolean;
Cast_Result_4 : Bare_Isa;
Let_Result_1 : Boolean;
Scope_Result_1 : Boolean;
Cast_Result_5 : Bare_Match_Expr;
Let_Result_2 : Boolean;
Scope_Result_2 : Boolean;
Cast_Result_6 : Bare_Lambda_Expr;
Let_Result_3 : Boolean;
Scope_Result_3 : Boolean;
Cast_Result_7 : Bare_Base_Dot_Expr;
Let_Result_4 : Boolean;
Scope_Result_4 : Boolean;
Cast_Result_8 : Bare_Param;
Let_Result_5 : Boolean;
Scope_Result_5 : Boolean;
Cast_Result_9 : Bare_Call_Expr;
Let_Result_6 : Boolean;
Scope_Result_6 : Boolean;
Cast_Result_10 : Bare_Lkt_Node;
Let_Result_7 : Boolean;
Scope_Result_7 : Boolean;
Match_Result : Boolean;



begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         --# expr-start 1609 '<Match at nodes.lkt:2752:36>' Match_Result nodes.lkt:2752






--# expr-start 1588 '<parent at nodes.lkt:2752:42>' Fld nodes.lkt:2752







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Self.Parent; 
--# expr-done 1588



   if Fld = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Match_Prefix := Fld; 

case Lkt_Lkt_Node (Match_Prefix.Kind) is
         when Lkt_Cast_Expr =>
            



   --# scope-start



--# scope-start









   
      Cast_Result_3 := Match_Prefix;


Match_0 := Cast_Result_3; 
--# bind _ Match_0

Let_Result := True; 
--# end
Scope_Result := Let_Result;


   --# end


            Match_Result := Scope_Result; 
         when Lkt_Isa =>
            



   --# scope-start



--# scope-start









   
      Cast_Result_4 := Match_Prefix;


Match_1 := Cast_Result_4; 
--# bind _ Match_1

Let_Result_1 := True; 
--# end
Scope_Result_1 := Let_Result_1;


   --# end


            Match_Result := Scope_Result_1; 
         when Lkt_Match_Expr =>
            



   --# scope-start



--# scope-start









   
      Cast_Result_5 := Match_Prefix;


Match_2 := Cast_Result_5; 
--# bind _ Match_2

Let_Result_2 := True; 
--# end
Scope_Result_2 := Let_Result_2;


   --# end


            Match_Result := Scope_Result_2; 
         when Lkt_Lambda_Expr =>
            



   --# scope-start



--# scope-start









   
      Cast_Result_6 := Match_Prefix;


Match_3 := Cast_Result_6; 
--# bind _ Match_3
--# expr-start 1589 '<FieldAccess for has_context_free_type at nodes.lkt:2756:31>' Fld_1 nodes.lkt:2756







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]Expr.has_context_free_type'
Fld_1 := Liblktlang.Implementation.Dispatcher_Expr_P_Has_Context_Free_Type (Node => Ent.Node, E_Info => Ent.Info);
--# end
--# expr-done 1589
Let_Result_3 := Fld_1; 
--# end
Scope_Result_3 := Let_Result_3;


   --# end


            Match_Result := Scope_Result_3; 
         when Lkt_Dot_Expr .. Lkt_Null_Cond_Dotted_Name =>
            



   --# scope-start



--# scope-start









   
      Cast_Result_7 := Match_Prefix;


Match_4 := Cast_Result_7; 
--# bind p Match_4
--# expr-start 1591 '<Eq at nodes.lkt:2757:32>' Is_Equal nodes.lkt:2757





--# expr-start 1590 '<FieldAccess for prefix at nodes.lkt:2757:32>' Fld_2 nodes.lkt:2757







   if Match_4 = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_2 := Match_4.Base_Dot_Expr_F_Prefix;
--# expr-done 1590



   
      Cast_Result := Fld_2;



Is_Equal := Cast_Result = Self; 
--# expr-done 1591
Let_Result_4 := Is_Equal; 
--# end
Scope_Result_4 := Let_Result_4;


   --# end


            Match_Result := Scope_Result_4; 
         when Lkt_Param =>
            



   --# scope-start



--# scope-start









   
      Cast_Result_8 := Match_Prefix;


Match_5 := Cast_Result_8; 
--# bind p Match_5
--# expr-start 1601 '<BooleanBinaryOp And at nodes.lkt:2759:13>' If_Result_1 nodes.lkt:2759



--# expr-start 1595 '<BooleanBinaryOp And at nodes.lkt:2759:14>' If_Result nodes.lkt:2759



--# expr-start 1593 '<Eq at nodes.lkt:2759:14>' Is_Equal_1 nodes.lkt:2759





--# expr-start 1592 '<FieldAccess for value at nodes.lkt:2759:14>' Fld_3 nodes.lkt:2759







   if Match_5 = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_3 := Match_5.Param_F_Value;
--# expr-done 1592



   
      Cast_Result_1 := Fld_3;



Is_Equal_1 := Cast_Result_1 = Self; 
--# expr-done 1593
if Is_Equal_1 then
   --# expr-start 1594 '<FieldAccess for has_context_free_type at nodes.lkt:2759:34>' Fld_4 nodes.lkt:2759







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]Expr.has_context_free_type'
Fld_4 := Liblktlang.Implementation.Dispatcher_Expr_P_Has_Context_Free_Type (Node => Ent.Node, E_Info => Ent.Info);
--# end
--# expr-done 1594
   If_Result := Fld_4;
else
   
   If_Result := False;
end if;



--# expr-done 1595
if If_Result then
   --# expr-start 1600 '<Not at nodes.lkt:2760:17>' Not_Val nodes.lkt:2760
--# expr-start 1599 '<IsA DeclAnnotation at nodes.lkt:2760:21>' Is_A nodes.lkt:2760
--# expr-start 1598 '<parent at nodes.lkt:2760:21>' Fld_7 nodes.lkt:2760



--# expr-start 1597 '<parent at nodes.lkt:2760:21>' Fld_6 nodes.lkt:2760



--# expr-start 1596 '<parent at nodes.lkt:2760:21>' Fld_5 nodes.lkt:2760







   if Match_5 = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_5 := Match_5.Parent; 
--# expr-done 1596



   if Fld_5 = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_6 := Fld_5.Parent; 
--# expr-done 1597



   if Fld_6 = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_7 := Fld_6.Parent; 
--# expr-done 1598
Is_A := Fld_7 /= null 
and then Fld_7.Kind in Lkt_Decl_Annotation_Range; 
--# expr-done 1599
Not_Val := not (Is_A); 
--# expr-done 1600
   If_Result_1 := Not_Val;
else
   
   If_Result_1 := False;
end if;



--# expr-done 1601
Let_Result_5 := If_Result_1; 
--# end
Scope_Result_5 := Let_Result_5;


   --# end


            Match_Result := Scope_Result_5; 
         when Lkt_Call_Expr =>
            



   --# scope-start



--# scope-start









   
      Cast_Result_9 := Match_Prefix;


Match_6 := Cast_Result_9; 
--# bind p Match_6
--# expr-start 1608 '<BooleanBinaryOp And at nodes.lkt:2762:13>' If_Result_3 nodes.lkt:2762



--# expr-start 1605 '<BooleanBinaryOp And at nodes.lkt:2762:14>' If_Result_2 nodes.lkt:2762



--# expr-start 1603 '<Eq at nodes.lkt:2762:14>' Is_Equal_2 nodes.lkt:2762





--# expr-start 1602 '<FieldAccess for name at nodes.lkt:2762:14>' Fld_8 nodes.lkt:2762







   if Match_6 = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_8 := Match_6.Base_Call_Expr_F_Name;
--# expr-done 1602



   
      Cast_Result_2 := Fld_8;



Is_Equal_2 := Cast_Result_2 = Self; 
--# expr-done 1603
if Is_Equal_2 then
   --# expr-start 1604 '<FieldAccess for has_context_free_type at nodes.lkt:2762:33>' Fld_9 nodes.lkt:2762







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]Expr.has_context_free_type'
Fld_9 := Liblktlang.Implementation.Dispatcher_Expr_P_Has_Context_Free_Type (Node => Ent.Node, E_Info => Ent.Info);
--# end
--# expr-done 1604
   If_Result_2 := Fld_9;
else
   
   If_Result_2 := False;
end if;



--# expr-done 1605
if If_Result_2 then
   --# expr-start 1607 '<Not at nodes.lkt:2763:17>' Not_Val_1 nodes.lkt:2763
--# expr-start 1606 '<IsA RefId, BaseDotExpr at nodes.lkt:2763:21>' Is_A_1 nodes.lkt:2763

Is_A_1 := Ent.Node /= null 
and then Ent.Node.Kind in Lkt_Ref_Id_Range | Lkt_Base_Dot_Expr; 
--# expr-done 1606
Not_Val_1 := not (Is_A_1); 
--# expr-done 1607
   If_Result_3 := Not_Val_1;
else
   
   If_Result_3 := False;
end if;



--# expr-done 1608
Let_Result_6 := If_Result_3; 
--# end
Scope_Result_6 := Let_Result_6;


   --# end


            Match_Result := Scope_Result_6; 
         when Lkt_Lexer_Case_Rule_Cond_Alt .. Lkt_Array_Literal | Lkt_Logic_Predicate .. Lkt_Logic_Propagate_Call | Lkt_Bin_Op .. Lkt_Block_Expr | Lkt_Error_On_Null .. Lkt_If_Expr | Lkt_Keep_Expr | Lkt_Big_Num_Lit .. Lkt_Logic_Unify | Lkt_Not_Expr .. Lkt_Op_Plus | Lkt_Default_List_Type_Ref .. Lkt_Var_Bind =>
            



   --# scope-start



--# scope-start









   
      Cast_Result_10 := Match_Prefix;


Match_7 := Cast_Result_10; 
--# bind _ Match_7

Let_Result_7 := False; 
--# end
Scope_Result_7 := Let_Result_7;


   --# end


            Match_Result := Scope_Result_7; 
end case;

--# expr-done 1609

         Property_Result := Match_Result;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Expr_P_Xref_Entry_Point;
--# end

   







--# property-start Expr.get_type nodes.lkt:2771
pragma Warnings (Off, "is not referenced");
 function Expr_P_Get_Type
  
  (Node : Bare_Expr
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Internal_Entity_Type_Decl
is
   Self : Bare_Expr  := Bare_Expr (Node);
     Ent : Internal_Entity_Expr :=
       Internal_Entity_Expr'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Internal_Entity_Type_Decl;

      
            procedure Finalizer_Scope_236 with Inline_Always;
            procedure Finalizer_Scope_655 with Inline_Always;

      Var_Expr_0 : Internal_Solver_Result := No_Solver_Result;
Fld : Internal_Solver_Result := No_Solver_Result;
Fld_1 : Logic_Var;
Is_Logic_Var_Defined : Boolean;
Eq_Solution : Internal_Entity;
If_Result : Internal_Entity;
Cast_Result : Internal_Entity_Type_Decl;
Scope_Result : Internal_Entity_Type_Decl;
Result_Var : Internal_Entity_Type_Decl;

            procedure Finalizer_Scope_236 is
            begin
                     Dec_Ref (Fld);
            end Finalizer_Scope_236;
            procedure Finalizer_Scope_655 is
            begin
                     Dec_Ref (Var_Expr_0);
            end Finalizer_Scope_655;

      
      Mmz_Handle : Memoization_Handle;
      Mmz_Val    : Mmz_Value;

      Mmz_Stored : Boolean;
      --  Whether the memoization couple was actually stored. Used to determine
      --  whether to inc-ref the memoized value.

      function Create_Mmz_Key return Mmz_Key;
      --  Create a memoization key for this property call and return it

      --------------------
      -- Create_Mmz_Key --
      --------------------

      function Create_Mmz_Key return Mmz_Key is
      begin
         return Mmz_K : Mmz_Key :=
           (Property => Mmz_Bare_Expr_Expr_P_Get_Type,
            Items    => new Mmz_Key_Array (1 ..  2))
         do
            Mmz_K.Items (1) := (Kind => Mmz_Bare_Expr,
                                As_Bare_Expr => Self);
               Mmz_K.Items (2) :=
                 (Kind => Mmz_Internal_Entity_Info,
                  As_Internal_Entity_Info => E_Info);
         end return;
      end Create_Mmz_Key;

begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

            Populate_Lexical_Env_For_Unit (Self);
      end if;

      if Self /= null then

         if not Self.Unit.Context.In_Populate_Lexical_Env then

            if Find_Memoized_Value
              (Self.Unit, Mmz_Handle, Mmz_Val, Create_Mmz_Key'Access)
            then
               --# memoization-lookup

               if Mmz_Val.Kind = Mmz_Evaluating then
                  --# memoization-return
                  Raise_Property_Exception
                    (Self,
                     Property_Error'Identity,
                     "Infinite recursion detected");

               elsif Mmz_Val.Kind = Mmz_Error then
                  --# memoization-return
                  Reraise_Memoized_Error (Mmz_Val);

               else
                  Property_Result := Mmz_Val.As_Internal_Entity_Type_Decl;

                  --# memoization-return
                  return Property_Result;
               end if;
               --# end
            end if;

         end if;
      end if;

      begin
         
   --# scope-start

         


--# expr-start 1610 '<FieldAccess for solve_enclosing_context at nodes.lkt:2772:9>' Fld nodes.lkt:2772







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start LktNode.solve_enclosing_context
Fld := Liblktlang.Implementation.Lkt_Node_P_Solve_Enclosing_Context (Node => Ent.Node, E_Info => Ent.Info);
--# end
--# expr-done 1610
Var_Expr_0 := Fld;

      Inc_Ref (Var_Expr_0);




if Var_Expr_0 /= No_Solver_Result then
   



   --# scope-start


   --# bind _ Var_Expr_0

--# expr-start 1613 '<Cast to TypeDecl at nodes.lkt:2773:20>' Cast_Result nodes.lkt:2773





--# expr-start 1612 '<get_value at nodes.lkt:2773:20>' If_Result nodes.lkt:2773



--# expr-start 1611 '<FieldAccess for actual_type_var at nodes.lkt:2773:20>' Fld_1 nodes.lkt:2773







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_1 := Ent.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 1611
Is_Logic_Var_Defined := Entity_Vars.Is_Defined (Fld_1); 
if Is_Logic_Var_Defined then
   
Eq_Solution := Entity_Vars.Get_Value (Fld_1); 
   If_Result := Eq_Solution;
else
   
   If_Result := No_Entity;
end if;



--# expr-done 1612



   if If_Result.Node = null
      or else If_Result.Node.Kind in Lkt_Type_Decl
   then
      
      Cast_Result := Create_Internal_Entity_Type_Decl
        (Node => If_Result.Node,
         Info => If_Result.Info);

   else
         Cast_Result := No_Entity_Type_Decl;
   end if;


--# expr-done 1613
Scope_Result := Cast_Result;


   --# end
      Finalizer_Scope_655;


   Result_Var := Scope_Result;
else
   
   Result_Var := No_Entity_Type_Decl;
end if;




         Property_Result := Result_Var;
         
   --# end
      Finalizer_Scope_236;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_236;
                     Finalizer_Scope_655;


               if Self /= null then
                     if not Self.Unit.Context.In_Populate_Lexical_Env then
                        Add_Memoized_Error
                          (Self.Unit, Mmz_Handle, Exc, Mmz_Stored);
                     end if;
               end if;


            raise;
      end;

      if Self /= null then
         if not Self.Unit.Context.In_Populate_Lexical_Env then

            Mmz_Val := (Kind => Mmz_Internal_Entity_Type_Decl,
                        As_Internal_Entity_Type_Decl => Property_Result);
            Add_Memoized_Value (Self.Unit, Mmz_Handle, Mmz_Val, Mmz_Stored);

         end if;
      end if;



   return Property_Result;
end Expr_P_Get_Type;
--# end

   







--# property-start Expr.get_generic_type nodes.lkt:2780
pragma Warnings (Off, "is not referenced");
 function Expr_P_Get_Generic_Type
  
  (Node : Bare_Expr
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Internal_Entity_Type_Decl
is
   Self : Bare_Expr  := Bare_Expr (Node);
     Ent : Internal_Entity_Expr :=
       Internal_Entity_Expr'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Internal_Entity_Type_Decl;

      
            procedure Finalizer_Scope_237 with Inline_Always;

      Var_Expr_57 : Internal_Entity;
Fld : Logic_Var;
Is_Logic_Var_Defined : Boolean;
Eq_Solution : Internal_Entity;
If_Result : Internal_Entity;
Cast_Result : Internal_Entity_Type_Decl;
Fld_1 : Internal_Entity_Array_Access;
Fld_2 : Boolean;
Find_Result : Internal_Entity;
Fld_3 : Boolean;
Scope_Result : Boolean;
Result_Var : Boolean;
If_Result_1 : Internal_Entity_Type_Decl;

            procedure Finalizer_Scope_237 is
            begin
                     Dec_Ref (Fld_1);
            end Finalizer_Scope_237;

      
      Mmz_Handle : Memoization_Handle;
      Mmz_Val    : Mmz_Value;

      Mmz_Stored : Boolean;
      --  Whether the memoization couple was actually stored. Used to determine
      --  whether to inc-ref the memoized value.

      function Create_Mmz_Key return Mmz_Key;
      --  Create a memoization key for this property call and return it

      --------------------
      -- Create_Mmz_Key --
      --------------------

      function Create_Mmz_Key return Mmz_Key is
      begin
         return Mmz_K : Mmz_Key :=
           (Property => Mmz_Bare_Expr_Expr_P_Get_Generic_Type,
            Items    => new Mmz_Key_Array (1 ..  2))
         do
            Mmz_K.Items (1) := (Kind => Mmz_Bare_Expr,
                                As_Bare_Expr => Self);
               Mmz_K.Items (2) :=
                 (Kind => Mmz_Internal_Entity_Info,
                  As_Internal_Entity_Info => E_Info);
         end return;
      end Create_Mmz_Key;

begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

            Populate_Lexical_Env_For_Unit (Self);
      end if;

      if Self /= null then

         if not Self.Unit.Context.In_Populate_Lexical_Env then

            if Find_Memoized_Value
              (Self.Unit, Mmz_Handle, Mmz_Val, Create_Mmz_Key'Access)
            then
               --# memoization-lookup

               if Mmz_Val.Kind = Mmz_Evaluating then
                  --# memoization-return
                  Raise_Property_Exception
                    (Self,
                     Property_Error'Identity,
                     "Infinite recursion detected");

               elsif Mmz_Val.Kind = Mmz_Error then
                  --# memoization-return
                  Reraise_Memoized_Error (Mmz_Val);

               else
                  Property_Result := Mmz_Val.As_Internal_Entity_Type_Decl;

                  --# memoization-return
                  return Property_Result;
               end if;
               --# end
            end if;

         end if;
      end if;

      begin
         
   --# scope-start

         --# expr-start 1621 '<If at nodes.lkt:2781:9>' If_Result_1 nodes.lkt:2781






--# expr-start 1616 '<Find at nodes.lkt:2782:13>' Find_Result nodes.lkt:2782








   

   --# expr-start 1614 '<FieldAccess for parents at nodes.lkt:2782:13>' Fld_1 nodes.lkt:2782







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;



Fld_1 := Liblktlang.Implementation.Parents (Node => Ent.Node, With_Self => True, E_Info => Ent.Info);
--# expr-done 1614

   
      Find_Result := No_Entity;
   

   

      

      declare
         
         Collection : constant Internal_Entity_Array_Access := Fld_1;
      begin
         for Item_0 of
               Collection.Items
         loop

            
   --# scope-start


               --# bind p Item_0

            
      --# expr-start 1615 '<FieldAccess for generic_type_entry_point at nodes.lkt:2782:40>' Fld_2 nodes.lkt:2782







   if Item_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start LktNode.generic_type_entry_point
Fld_2 := Liblktlang.Implementation.Lkt_Node_P_Generic_Type_Entry_Point (Node => Item_0.Node, E_Info => Item_0.Info);
--# end
--# expr-done 1615
      if Fld_2 then
         Find_Result := Item_0; 
      end if;
   

            
   --# end


               exit when Fld_2;

         end loop;
      end;
   

   
   



--# expr-done 1616
Var_Expr_57 := Find_Result;





if Var_Expr_57 /= No_Entity then
   



   --# scope-start


   

--# expr-start 1617 '<FieldAccess for solve_generic_types at nodes.lkt:2782:13>' Fld_3 nodes.lkt:2782







   if Var_Expr_57.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start LktNode.solve_generic_types
Fld_3 := Liblktlang.Implementation.Lkt_Node_P_Solve_Generic_Types (Node => Var_Expr_57.Node, E_Info => Var_Expr_57.Info);
--# end
--# expr-done 1617
Scope_Result := Fld_3;


   --# end


   Result_Var := Scope_Result;
else
   
   Result_Var := False;
end if;



if Result_Var then
   --# expr-start 1620 '<Cast to TypeDecl at nodes.lkt:2784:14>' Cast_Result nodes.lkt:2784





--# expr-start 1619 '<get_value at nodes.lkt:2784:14>' If_Result nodes.lkt:2784



--# expr-start 1618 '<FieldAccess for generic_func_type_var at nodes.lkt:2784:14>' Fld nodes.lkt:2784







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Ent.Node.Expr_Generic_Func_Type_Var'Unrestricted_Access;
--# expr-done 1618
Is_Logic_Var_Defined := Entity_Vars.Is_Defined (Fld); 
if Is_Logic_Var_Defined then
   
Eq_Solution := Entity_Vars.Get_Value (Fld); 
   If_Result := Eq_Solution;
else
   
   If_Result := No_Entity;
end if;



--# expr-done 1619



   if If_Result.Node = null
      or else If_Result.Node.Kind in Lkt_Type_Decl
   then
      
      Cast_Result := Create_Internal_Entity_Type_Decl
        (Node => If_Result.Node,
         Info => If_Result.Info);

   else
         Cast_Result := No_Entity_Type_Decl;
   end if;


--# expr-done 1620
   If_Result_1 := Cast_Result;
else
   
   If_Result_1 := No_Entity_Type_Decl;
end if;



--# expr-done 1621

         Property_Result := If_Result_1;
         
   --# end
      Finalizer_Scope_237;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_237;


               if Self /= null then
                     if not Self.Unit.Context.In_Populate_Lexical_Env then
                        Add_Memoized_Error
                          (Self.Unit, Mmz_Handle, Exc, Mmz_Stored);
                     end if;
               end if;


            raise;
      end;

      if Self /= null then
         if not Self.Unit.Context.In_Populate_Lexical_Env then

            Mmz_Val := (Kind => Mmz_Internal_Entity_Type_Decl,
                        As_Internal_Entity_Type_Decl => Property_Result);
            Add_Memoized_Value (Self.Unit, Mmz_Handle, Mmz_Val, Mmz_Stored);

         end if;
      end if;



   return Property_Result;
end Expr_P_Get_Generic_Type;
--# end

   







--# property-start Expr.get_expected_type nodes.lkt:2791
pragma Warnings (Off, "is not referenced");
 function Expr_P_Get_Expected_Type
  
  (Node : Bare_Expr
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Internal_Entity_Type_Decl
is
   Self : Bare_Expr  := Bare_Expr (Node);
     Ent : Internal_Entity_Expr :=
       Internal_Entity_Expr'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Internal_Entity_Type_Decl;

      
            procedure Finalizer_Scope_238 with Inline_Always;

      Var_Expr_58 : Internal_Entity;
Fld : Logic_Var;
Is_Logic_Var_Defined : Boolean;
Eq_Solution : Internal_Entity;
If_Result : Internal_Entity;
Cast_Result : Internal_Entity_Type_Decl;
Fld_1 : Internal_Entity_Array_Access;
Fld_2 : Boolean;
Find_Result : Internal_Entity;
Fld_3 : Boolean;
Scope_Result : Boolean;
Result_Var : Boolean;
If_Result_1 : Internal_Entity_Type_Decl;

            procedure Finalizer_Scope_238 is
            begin
                     Dec_Ref (Fld_1);
            end Finalizer_Scope_238;

      
      Mmz_Handle : Memoization_Handle;
      Mmz_Val    : Mmz_Value;

      Mmz_Stored : Boolean;
      --  Whether the memoization couple was actually stored. Used to determine
      --  whether to inc-ref the memoized value.

      function Create_Mmz_Key return Mmz_Key;
      --  Create a memoization key for this property call and return it

      --------------------
      -- Create_Mmz_Key --
      --------------------

      function Create_Mmz_Key return Mmz_Key is
      begin
         return Mmz_K : Mmz_Key :=
           (Property => Mmz_Bare_Expr_Expr_P_Get_Expected_Type,
            Items    => new Mmz_Key_Array (1 ..  2))
         do
            Mmz_K.Items (1) := (Kind => Mmz_Bare_Expr,
                                As_Bare_Expr => Self);
               Mmz_K.Items (2) :=
                 (Kind => Mmz_Internal_Entity_Info,
                  As_Internal_Entity_Info => E_Info);
         end return;
      end Create_Mmz_Key;

begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

            Populate_Lexical_Env_For_Unit (Self);
      end if;

      if Self /= null then

         if not Self.Unit.Context.In_Populate_Lexical_Env then

            if Find_Memoized_Value
              (Self.Unit, Mmz_Handle, Mmz_Val, Create_Mmz_Key'Access)
            then
               --# memoization-lookup

               if Mmz_Val.Kind = Mmz_Evaluating then
                  --# memoization-return
                  Raise_Property_Exception
                    (Self,
                     Property_Error'Identity,
                     "Infinite recursion detected");

               elsif Mmz_Val.Kind = Mmz_Error then
                  --# memoization-return
                  Reraise_Memoized_Error (Mmz_Val);

               else
                  Property_Result := Mmz_Val.As_Internal_Entity_Type_Decl;

                  --# memoization-return
                  return Property_Result;
               end if;
               --# end
            end if;

         end if;
      end if;

      begin
         
   --# scope-start

         --# expr-start 1629 '<If at nodes.lkt:2792:9>' If_Result_1 nodes.lkt:2792






--# expr-start 1624 '<Find at nodes.lkt:2793:13>' Find_Result nodes.lkt:2793








   

   --# expr-start 1622 '<FieldAccess for parents at nodes.lkt:2793:13>' Fld_1 nodes.lkt:2793







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;



Fld_1 := Liblktlang.Implementation.Parents (Node => Ent.Node, With_Self => False, E_Info => Ent.Info);
--# expr-done 1622

   
      Find_Result := No_Entity;
   

   

      

      declare
         
         Collection : constant Internal_Entity_Array_Access := Fld_1;
      begin
         for Item_0 of
               Collection.Items
         loop

            
   --# scope-start


               --# bind p Item_0

            
      --# expr-start 1623 '<FieldAccess for expected_type_entry_point at nodes.lkt:2794:24>' Fld_2 nodes.lkt:2794







   if Item_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start LktNode.expected_type_entry_point
Fld_2 := Liblktlang.Implementation.Lkt_Node_P_Expected_Type_Entry_Point (Node => Item_0.Node, E_Info => Item_0.Info);
--# end
--# expr-done 1623
      if Fld_2 then
         Find_Result := Item_0; 
      end if;
   

            
   --# end


               exit when Fld_2;

         end loop;
      end;
   

   
   



--# expr-done 1624
Var_Expr_58 := Find_Result;





if Var_Expr_58 /= No_Entity then
   



   --# scope-start


   

--# expr-start 1625 '<FieldAccess for solve_expected_types at nodes.lkt:2793:13>' Fld_3 nodes.lkt:2793







   if Var_Expr_58.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start LktNode.solve_expected_types
Fld_3 := Liblktlang.Implementation.Lkt_Node_P_Solve_Expected_Types (Node => Var_Expr_58.Node, E_Info => Var_Expr_58.Info);
--# end
--# expr-done 1625
Scope_Result := Fld_3;


   --# end


   Result_Var := Scope_Result;
else
   
   Result_Var := False;
end if;



if Result_Var then
   --# expr-start 1628 '<Cast to TypeDecl at nodes.lkt:2797:14>' Cast_Result nodes.lkt:2797





--# expr-start 1627 '<get_value at nodes.lkt:2797:14>' If_Result nodes.lkt:2797



--# expr-start 1626 '<FieldAccess for expected_type_var at nodes.lkt:2797:14>' Fld nodes.lkt:2797







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Ent.Node.Expr_Expected_Type_Var'Unrestricted_Access;
--# expr-done 1626
Is_Logic_Var_Defined := Entity_Vars.Is_Defined (Fld); 
if Is_Logic_Var_Defined then
   
Eq_Solution := Entity_Vars.Get_Value (Fld); 
   If_Result := Eq_Solution;
else
   
   If_Result := No_Entity;
end if;



--# expr-done 1627



   if If_Result.Node = null
      or else If_Result.Node.Kind in Lkt_Type_Decl
   then
      
      Cast_Result := Create_Internal_Entity_Type_Decl
        (Node => If_Result.Node,
         Info => If_Result.Info);

   else
         Cast_Result := No_Entity_Type_Decl;
   end if;


--# expr-done 1628
   If_Result_1 := Cast_Result;
else
   
   If_Result_1 := No_Entity_Type_Decl;
end if;



--# expr-done 1629

         Property_Result := If_Result_1;
         
   --# end
      Finalizer_Scope_238;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_238;


               if Self /= null then
                     if not Self.Unit.Context.In_Populate_Lexical_Env then
                        Add_Memoized_Error
                          (Self.Unit, Mmz_Handle, Exc, Mmz_Stored);
                     end if;
               end if;


            raise;
      end;

      if Self /= null then
         if not Self.Unit.Context.In_Populate_Lexical_Env then

            Mmz_Val := (Kind => Mmz_Internal_Entity_Type_Decl,
                        As_Internal_Entity_Type_Decl => Property_Result);
            Add_Memoized_Value (Self.Unit, Mmz_Handle, Mmz_Val, Mmz_Stored);

         end if;
      end if;



   return Property_Result;
end Expr_P_Get_Expected_Type;
--# end

   







--# property-start Expr.get_rightmost_refid nodes.lkt:2802
pragma Warnings (Off, "is not referenced");
 function Expr_P_Get_Rightmost_Refid
  
  (Node : Bare_Expr
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Internal_Entity_Ref_Id
is
   Self : Bare_Expr  := Bare_Expr (Node);
     Ent : Internal_Entity_Expr :=
       Internal_Entity_Expr'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Internal_Entity_Ref_Id;

      

      Match_0 : Internal_Entity_Ref_Id;
Match_1 : Internal_Entity_Base_Dot_Expr;
Match_2 : Internal_Entity_Expr;
Fld : Internal_Entity_Ref_Id;
Match_Prefix : Internal_Entity_Expr;
Cast_Result : Internal_Entity_Ref_Id;
Let_Result : Internal_Entity_Ref_Id;
Scope_Result : Internal_Entity_Ref_Id;
Cast_Result_1 : Internal_Entity_Base_Dot_Expr;
Let_Result_1 : Internal_Entity_Ref_Id;
Scope_Result_1 : Internal_Entity_Ref_Id;
Cast_Result_2 : Internal_Entity_Expr;
Let_Result_2 : Internal_Entity_Ref_Id;
Scope_Result_2 : Internal_Entity_Ref_Id;
Match_Result : Internal_Entity_Ref_Id;



begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         --# expr-start 1631 '<Match at nodes.lkt:2802:48>' Match_Result nodes.lkt:2802










   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Match_Prefix := Ent; 

case Lkt_Expr (Match_Prefix.Node.Kind) is
         when Lkt_Ref_Id =>
            



   --# scope-start



--# scope-start









   
      Cast_Result := Create_Internal_Entity_Ref_Id
        (Node => Match_Prefix.Node,
         Info => Match_Prefix.Info);


Match_0 := Cast_Result; 
--# bind ri Match_0

Let_Result := Match_0; 
--# end
Scope_Result := Let_Result;


   --# end


            Match_Result := Scope_Result; 
         when Lkt_Dot_Expr .. Lkt_Null_Cond_Dotted_Name =>
            



   --# scope-start



--# scope-start









   
      Cast_Result_1 := Create_Internal_Entity_Base_Dot_Expr
        (Node => Match_Prefix.Node,
         Info => Match_Prefix.Info);


Match_1 := Cast_Result_1; 
--# bind de Match_1
--# expr-start 1630 '<FieldAccess for suffix at nodes.lkt:2804:33>' Fld nodes.lkt:2804







   if Match_1.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Create_Internal_Entity_Ref_Id (Node => Match_1.Node.Base_Dot_Expr_F_Suffix, Info => Match_1.Info);
--# expr-done 1630
Let_Result_1 := Fld; 
--# end
Scope_Result_1 := Let_Result_1;


   --# end


            Match_Result := Scope_Result_1; 
         when Lkt_Any_Of .. Lkt_Logic_Propagate_Call | Lkt_Bin_Op .. Lkt_Module_Ref_Id | Lkt_If_Expr .. Lkt_Un_Op =>
            



   --# scope-start



--# scope-start









   
      Cast_Result_2 := Create_Internal_Entity_Expr
        (Node => Match_Prefix.Node,
         Info => Match_Prefix.Info);


Match_2 := Cast_Result_2; 
--# bind _ Match_2

Let_Result_2 := No_Entity_Ref_Id; 
--# end
Scope_Result_2 := Let_Result_2;


   --# end


            Match_Result := Scope_Result_2; 
end case;

--# expr-done 1631

         Property_Result := Match_Result;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Expr_P_Get_Rightmost_Refid;
--# end

   







--# property-start Expr.expected_type_equation nodes.lkt:2808
pragma Warnings (Off, "is not referenced");
 function Expr_P_Expected_Type_Equation
  
  (Node : Bare_Expr
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Logic_Equation
is
   Self : Bare_Expr  := Bare_Expr (Node);
      --# bind self Self

   


   Property_Result : Logic_Equation;

      

      



begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         

         Property_Result := raise Property_Error with "Property Expr.expected_type_equation not implemented";
            Inc_Ref (Property_Result);
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Expr_P_Expected_Type_Equation;
--# end

   







--# property-start Expr.call_generic_type_equation nodes.lkt:2816
pragma Warnings (Off, "is not referenced");
 function Expr_P_Call_Generic_Type_Equation
  
  (Node : Bare_Expr
      ; Name : Internal_Entity_Expr
      ; Args : Internal_Entity_Param_List
      ; In_Logic_Call : Boolean
         := False
  )

   return Logic_Equation
is
   Self : Bare_Expr  := Bare_Expr (Node);
      --# bind self Self

   

   --# bind name Name
   --# bind args Args
   --# bind in_logic_call In_Logic_Call

   Property_Result : Logic_Equation;

      
            procedure Finalizer_Scope_241 with Inline_Always;
            procedure Finalizer_Scope_663 with Inline_Always;

      Fld : Logic_Var;
Fld_1 : Internal_Entity_Type_Decl;
Cast_Result : Internal_Entity;
Bind_Result : Logic_Equation;
Fld_2 : Logic_Equation;
Fld_3 : Boolean;
If_Result : Logic_Equation;
Saved : Internal_Entity_Param_List;
Fld_4 : Bare_Param_List;
Fld_5 : Internal_Entity_Info;
Item_0 : Internal_Entity_Param;
Bare_Item_0 : Bare_Param;
Bound_Current_Name : Internal_Entity_Param;
Fld_6 : Internal_Entity_Expr;
Fld_7 : Logic_Var;
Fld_8 : Logic_Var;
Bind_Result_1 : Logic_Equation;
True_Rel : Logic_Equation;
Is_A : Boolean;
If_Result_1 : Logic_Equation;
Dyn_Var_Bind_Result : Logic_Equation;
As_Entity : Internal_Entity_Param;
Is_Null : Boolean;
If_Result_2 : Internal_Entity_Param;
Map_Result : Logic_Equation_Array_Access;
Logic_Boolean_Op : Logic_Equation;
And_Pred : Logic_Equation;

            procedure Finalizer_Scope_241 is
            begin
                     Dec_Ref (Bind_Result);
                     Dec_Ref (Fld_2);
                     Dec_Ref (If_Result);
                     Dec_Ref (Map_Result);
                     Dec_Ref (Logic_Boolean_Op);
                     Dec_Ref (And_Pred);
            end Finalizer_Scope_241;
            procedure Finalizer_Scope_663 is
            begin
                     Dec_Ref (Bind_Result_1);
                     Dec_Ref (True_Rel);
                     Dec_Ref (If_Result_1);
                     Dec_Ref (Dyn_Var_Bind_Result);
            end Finalizer_Scope_663;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 1647 '<LogicBinaryOp And at nodes.lkt:2820:9>' And_Pred nodes.lkt:2820
--# expr-start 1637 '<If at nodes.lkt:2821:13>' If_Result nodes.lkt:2821



--# expr-start 1632 '<FieldAccess for xref_entry_point at nodes.lkt:2821:16>' Fld_3 nodes.lkt:2821







   if Name.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]LktNode.xref_entry_point'
Fld_3 := Liblktlang.Implementation.Dispatcher_Lkt_Node_P_Xref_Entry_Point (Node => Name.Node, E_Info => Name.Info);
--# end
--# expr-done 1632
if Fld_3 then
   --# expr-start 1635 '<Bind at nodes.lkt:2822:18>' Bind_Result nodes.lkt:2822
--# expr-start 1633 '<FieldAccess for generic_func_type_var at nodes.lkt:2822:18>' Fld nodes.lkt:2822







   if Name.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Name.Node.Expr_Generic_Func_Type_Var'Unrestricted_Access;
--# expr-done 1633
Fld.Value := No_Entity;
Entity_Vars.Reset (Fld);





--# expr-start 1634 '<FieldAccess for get_type at nodes.lkt:2822:48>' Fld_1 nodes.lkt:2822







   if Name.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start Expr.get_type
Fld_1 := Liblktlang.Implementation.Expr_P_Get_Type (Node => Name.Node, E_Info => Name.Info);
--# end
--# expr-done 1634



   
      Cast_Result := Create_Internal_Entity
        (Node => Fld_1.Node,
         Info => Fld_1.Info);


Bind_Result := Solver.Create_Assign (Fld, Cast_Result, Solver_Ifc.No_Converter, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:2822:18") else null)); 
--# expr-done 1635
   If_Result := Bind_Result;
else
   --# expr-start 1636 '<FieldAccess for generic_type_equation at nodes.lkt:2823:18>' Fld_2 nodes.lkt:2823







   if Name.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]LktNode.generic_type_equation'
Fld_2 := Liblktlang.Implementation.Dispatcher_Lkt_Node_P_Generic_Type_Equation (Node => Name.Node, E_Info => Name.Info);
--# end
--# expr-done 1636
   If_Result := Fld_2;
end if;

      Inc_Ref (If_Result);


--# expr-done 1637
--# expr-start 1646 '<LogicAll at nodes.lkt:2825:14>' Logic_Boolean_Op nodes.lkt:2825
--# expr-start 1645 '<Map at nodes.lkt:2825:14>' Map_Result nodes.lkt:2825








   

   
Saved := Args; 









Fld_4 := Saved.Node;

   
      declare
         Map_Result_Vec : Logic_Equation_Vectors.Vector;
      begin
   

   

      if Fld_4 = null then
         
      Map_Result := Create_Logic_Equation_Array (0);
   
      else
         

      declare
         
         Collection : constant Bare_Param_List := Fld_4;
      begin
         for Untyped_Item_0 of
               Collection.Nodes (1 .. Children_Count (Collection))
         loop
                  
                  Bare_Item_0 := Untyped_Item_0; 
                  



Is_Null := Bare_Item_0 = null; 
if Is_Null then
   
   If_Result_2 := No_Entity_Param;
else
   








Fld_5 := Saved.Info;

As_Entity := (Info => Fld_5, Node => Bare_Item_0); 
   If_Result_2 := As_Entity;
end if;



                  Item_0 := If_Result_2; 

            
   --# scope-start


               --# bind actual Item_0

            
         
         
      --# expr-start 1644 '<bind at nodes.lkt:2827:17>' Dyn_Var_Bind_Result nodes.lkt:2827

Bound_Current_Name := Item_0; 
--# expr-start 1643 '<If at nodes.lkt:2832:17>' If_Result_1 nodes.lkt:2832



--# expr-start 1638 '<IsA BaseDotExpr, RefId at nodes.lkt:2832:20>' Is_A nodes.lkt:2832

Is_A := Name.Node /= null 
and then Name.Node.Kind in Lkt_Base_Dot_Expr | Lkt_Ref_Id_Range; 
--# expr-done 1638
if Is_A then
   --# expr-start 1642 '<NPropagate at nodes.lkt:2834:21>' Bind_Result_1 nodes.lkt:2834
--# expr-start 1639 '<FieldAccess for generic_func_type_var at nodes.lkt:2836:25>' Fld_8 nodes.lkt:2836







   if Name.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_8 := Name.Node.Expr_Generic_Func_Type_Var'Unrestricted_Access;
--# expr-done 1639
Fld_8.Value := No_Entity;
Entity_Vars.Reset (Fld_8);
--# expr-start 1641 '<FieldAccess for generic_func_type_var at nodes.lkt:2834:21>' Fld_7 nodes.lkt:2834



--# expr-start 1640 '<FieldAccess for value at nodes.lkt:2834:21>' Fld_6 nodes.lkt:2834







   if Item_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_6 := Create_Internal_Entity_Expr (Node => Item_0.Node.Param_F_Value, Info => Item_0.Info);
--# expr-done 1640



   if Fld_6.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_7 := Fld_6.Node.Expr_Generic_Func_Type_Var'Unrestricted_Access;
--# expr-done 1641
Fld_7.Value := No_Entity;
Entity_Vars.Reset (Fld_7);


Bind_Result_1 := Solver.Create_Propagate (Fld_8, Fld_7, Create_Type_Decl_P_Match_Param_Get_Type_0_Functor (Bound_Current_Name, In_Logic_Call), Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:2834:21") else null)); 
--# expr-done 1642
   If_Result_1 := Bind_Result_1;
else
   True_Rel := Solver.Create_True ((if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:2838:22") else null)); 
   If_Result_1 := True_Rel;
end if;

      Inc_Ref (If_Result_1);


--# expr-done 1643
Dyn_Var_Bind_Result := If_Result_1; Inc_Ref (Dyn_Var_Bind_Result);
--# expr-done 1644
      

         declare
            Item_To_Append : constant Logic_Equation := Dyn_Var_Bind_Result;
         begin
               Inc_Ref (Item_To_Append);
            Logic_Equation_Vectors.Append (Map_Result_Vec, Item_To_Append);
         end;
   
   
   

            
   --# end
      Finalizer_Scope_663;



         end loop;
      end;
   
      end if;

   

         Map_Result := Create_Logic_Equation_Array
           (Items_Count => Natural (Logic_Equation_Vectors.Length (Map_Result_Vec)));
         for I in Map_Result.Items'Range loop
            Map_Result.Items (I) := Logic_Equation_Vectors.Get
              (Map_Result_Vec,
               I + Logic_Equation_Vectors.Index_Type'First - Map_Result.Items'First);
         end loop;
         Logic_Equation_Vectors.Destroy (Map_Result_Vec);

      end;
   



--# expr-done 1645
Logic_Boolean_Op := Solver.Create_All (Relation_Array (Map_Result.Items), (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:2825:14") else null)); 
--# expr-done 1646
And_Pred := Create_And (If_Result, Logic_Boolean_Op, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:2820:9") else null)); 
--# expr-done 1647

         Property_Result := And_Pred;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_241;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_241;
                     Finalizer_Scope_663;




            raise;
      end;



   return Property_Result;
end Expr_P_Call_Generic_Type_Equation;
--# end

   







--# property-start Expr.call_expected_type_equation nodes.lkt:2843
pragma Warnings (Off, "is not referenced");
 function Expr_P_Call_Expected_Type_Equation
  
  (Node : Bare_Expr
      ; Name : Internal_Entity_Expr
      ; Args : Internal_Entity_Param_List
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Logic_Equation
is
   Self : Bare_Expr  := Bare_Expr (Node);
     Ent : Internal_Entity_Expr :=
       Internal_Entity_Expr'(Node => Self, Info => E_Info);
      --# bind entity Ent

   

   --# bind name Name
   --# bind args Args

   Property_Result : Logic_Equation;

      
            procedure Finalizer_Scope_242 with Inline_Always;
            procedure Finalizer_Scope_667 with Inline_Always;

      Fld : Logic_Var;
Fld_1 : Internal_Entity_Type_Decl;
Saved : Internal_Entity_Param_List;
Fld_2 : Bare_Param_List;
Fld_3 : Internal_Entity_Info;
Item_0 : Internal_Entity_Param;
Bare_Item_0 : Bare_Param;
Fld_4 : Internal_Entity_Expr;
Fld_5 : Internal_Entity_Type_Decl;
Fld_6 : Internal_Entity_Type_Decl;
Fld_7 : Internal_Entity_Expr;
Fld_8 : Boolean;
If_Result : Internal_Entity_Type_Decl;
As_Entity : Internal_Entity_Param;
Is_Null : Boolean;
If_Result_1 : Internal_Entity_Param;
Map_Result : Internal_Entity_Type_Decl_Array_Access;
Fld_9 : Internal_Entity_Type_Decl;
Cast_Result : Internal_Entity;
Bind_Result : Logic_Equation;
Saved_1 : Internal_Entity_Param_List;
Fld_10 : Bare_Param_List;
Fld_11 : Internal_Entity_Info;
Item_1 : Internal_Entity_Param;
Bare_Item_1 : Bare_Param;
As_Entity_1 : Internal_Entity_Param;
Is_Null_1 : Boolean;
If_Result_2 : Internal_Entity_Param;
Fld_12 : Internal_Entity_Expr;
Fld_13 : Boolean;
Map_Result_1 : Internal_Entity_Param_Array_Access;
Fld_14 : Internal_Entity_Expr;
Fld_15 : Logic_Var;
Cast_Expr : Internal_Entity_Type_Decl;
Cast_Result_1 : Internal_Entity;
Bind_Result_1 : Logic_Equation;
Map_Result_2 : Logic_Equation_Array_Access;
Logic_Boolean_Op : Logic_Equation;
And_Pred : Logic_Equation;

            procedure Finalizer_Scope_242 is
            begin
                     Dec_Ref (Map_Result);
                     Dec_Ref (Bind_Result);
                     Dec_Ref (Map_Result_1);
                     Dec_Ref (Map_Result_2);
                     Dec_Ref (Logic_Boolean_Op);
                     Dec_Ref (And_Pred);
            end Finalizer_Scope_242;
            procedure Finalizer_Scope_667 is
            begin
                     Dec_Ref (Bind_Result_1);
            end Finalizer_Scope_667;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 1667 '<LogicBinaryOp And at nodes.lkt:2847:9>' And_Pred nodes.lkt:2847
--# expr-start 1658 '<Bind at nodes.lkt:2853:13>' Bind_Result nodes.lkt:2853
--# expr-start 1648 '<FieldAccess for expected_type_var at nodes.lkt:2853:13>' Fld nodes.lkt:2853







   if Name.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Name.Node.Expr_Expected_Type_Var'Unrestricted_Access;
--# expr-done 1648
Fld.Value := No_Entity;
Entity_Vars.Reset (Fld);





--# expr-start 1657 '<FieldAccess for create_function_type at nodes.lkt:2854:16>' Fld_9 nodes.lkt:2854



--# expr-start 1649 '<FieldAccess for any_type at nodes.lkt:2854:16>' Fld_1 nodes.lkt:2854







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start LktNode.any_type
Fld_1 := Liblktlang.Implementation.Lkt_Node_P_Any_Type (Node => Ent.Node, E_Info => Ent.Info);
--# end
--# expr-done 1649



   if Fld_1.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# expr-start 1656 '<Map at nodes.lkt:2855:17>' Map_Result nodes.lkt:2855








   

   
Saved := Args; 









Fld_2 := Saved.Node;

   
      declare
         Map_Result_Vec : Internal_Entity_Type_Decl_Vectors.Vector;
      begin
   

   

      if Fld_2 = null then
         
      Map_Result := Create_Internal_Entity_Type_Decl_Array (0);
   
      else
         

      declare
         
         Collection : constant Bare_Param_List := Fld_2;
      begin
         for Untyped_Item_0 of
               Collection.Nodes (1 .. Children_Count (Collection))
         loop
                  
                  Bare_Item_0 := Untyped_Item_0; 
                  



Is_Null := Bare_Item_0 = null; 
if Is_Null then
   
   If_Result_1 := No_Entity_Param;
else
   








Fld_3 := Saved.Info;

As_Entity := (Info => Fld_3, Node => Bare_Item_0); 
   If_Result_1 := As_Entity;
end if;



                  Item_0 := If_Result_1; 

            
   --# scope-start


               --# bind a Item_0

            
         
         
      --# expr-start 1655 '<If at nodes.lkt:2857:21>' If_Result nodes.lkt:2857



--# expr-start 1651 '<FieldAccess for xref_entry_point at nodes.lkt:2857:24>' Fld_8 nodes.lkt:2857



--# expr-start 1650 '<FieldAccess for value at nodes.lkt:2857:24>' Fld_7 nodes.lkt:2857







   if Item_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_7 := Create_Internal_Entity_Expr (Node => Item_0.Node.Param_F_Value, Info => Item_0.Info);
--# expr-done 1650



   if Fld_7.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]LktNode.xref_entry_point'
Fld_8 := Liblktlang.Implementation.Dispatcher_Lkt_Node_P_Xref_Entry_Point (Node => Fld_7.Node, E_Info => Fld_7.Info);
--# end
--# expr-done 1651
if Fld_8 then
   --# expr-start 1653 '<FieldAccess for get_type at nodes.lkt:2857:56>' Fld_5 nodes.lkt:2857



--# expr-start 1652 '<FieldAccess for value at nodes.lkt:2857:56>' Fld_4 nodes.lkt:2857







   if Item_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_4 := Create_Internal_Entity_Expr (Node => Item_0.Node.Param_F_Value, Info => Item_0.Info);
--# expr-done 1652



   if Fld_4.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start Expr.get_type
Fld_5 := Liblktlang.Implementation.Expr_P_Get_Type (Node => Fld_4.Node, E_Info => Fld_4.Info);
--# end
--# expr-done 1653
   If_Result := Fld_5;
else
   --# expr-start 1654 '<FieldAccess for any_type at nodes.lkt:2858:26>' Fld_6 nodes.lkt:2858







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start LktNode.any_type
Fld_6 := Liblktlang.Implementation.Lkt_Node_P_Any_Type (Node => Ent.Node, E_Info => Ent.Info);
--# end
--# expr-done 1654
   If_Result := Fld_6;
end if;



--# expr-done 1655
      

         declare
            Item_To_Append : constant Internal_Entity_Type_Decl := If_Result;
         begin
            Internal_Entity_Type_Decl_Vectors.Append (Map_Result_Vec, Item_To_Append);
         end;
   
   
   

            
   --# end



         end loop;
      end;
   
      end if;

   

         Map_Result := Create_Internal_Entity_Type_Decl_Array
           (Items_Count => Natural (Internal_Entity_Type_Decl_Vectors.Length (Map_Result_Vec)));
         for I in Map_Result.Items'Range loop
            Map_Result.Items (I) := Internal_Entity_Type_Decl_Vectors.Get
              (Map_Result_Vec,
               I + Internal_Entity_Type_Decl_Vectors.Index_Type'First - Map_Result.Items'First);
         end loop;
         Internal_Entity_Type_Decl_Vectors.Destroy (Map_Result_Vec);

      end;
   



--# expr-done 1656
--# property-call-start TypeDecl.create_function_type
Fld_9 := Liblktlang.Implementation.Type_Decl_P_Create_Function_Type (Node => Fld_1.Node, Args => Map_Result, E_Info => Fld_1.Info);
--# end
--# expr-done 1657



   
      Cast_Result := Create_Internal_Entity
        (Node => Fld_9.Node,
         Info => Fld_9.Info);


Bind_Result := Solver.Create_Assign (Fld, Cast_Result, Solver_Ifc.No_Converter, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:2853:13") else null)); 
--# expr-done 1658
--# expr-start 1666 '<LogicAll at nodes.lkt:2862:14>' Logic_Boolean_Op nodes.lkt:2862
--# expr-start 1665 '<Map at nodes.lkt:2862:14>' Map_Result_2 nodes.lkt:2862








   

   --# expr-start 1661 '<Map at nodes.lkt:2862:14>' Map_Result_1 nodes.lkt:2862








   

   
Saved_1 := Args; 









Fld_10 := Saved_1.Node;

   
      declare
         Map_Result_1_Vec : Internal_Entity_Param_Vectors.Vector;
      begin
   

   

      if Fld_10 = null then
         
      Map_Result_1 := Create_Internal_Entity_Param_Array (0);
   
      else
         

      declare
         
         Collection : constant Bare_Param_List := Fld_10;
      begin
         for Untyped_Item_1 of
               Collection.Nodes (1 .. Children_Count (Collection))
         loop
                  
                  Bare_Item_1 := Untyped_Item_1; 
                  



Is_Null_1 := Bare_Item_1 = null; 
if Is_Null_1 then
   
   If_Result_2 := No_Entity_Param;
else
   








Fld_11 := Saved_1.Info;

As_Entity_1 := (Info => Fld_11, Node => Bare_Item_1); 
   If_Result_2 := As_Entity_1;
end if;



                  Item_1 := If_Result_2; 

            
   --# scope-start


               --# bind p Item_1

            
         --# expr-start 1660 '<FieldAccess for xref_entry_point at nodes.lkt:2862:33>' Fld_13 nodes.lkt:2862



--# expr-start 1659 '<FieldAccess for value at nodes.lkt:2862:33>' Fld_12 nodes.lkt:2862







   if Item_1.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_12 := Create_Internal_Entity_Expr (Node => Item_1.Node.Param_F_Value, Info => Item_1.Info);
--# expr-done 1659



   if Fld_12.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]LktNode.xref_entry_point'
Fld_13 := Liblktlang.Implementation.Dispatcher_Lkt_Node_P_Xref_Entry_Point (Node => Fld_12.Node, E_Info => Fld_12.Info);
--# end
--# expr-done 1660
         if Fld_13 then
            
         
      
      

         declare
            Item_To_Append : constant Internal_Entity_Param := Item_1;
         begin
            Internal_Entity_Param_Vectors.Append (Map_Result_1_Vec, Item_To_Append);
         end;
   
   
         end if;
   

            
   --# end



         end loop;
      end;
   
      end if;

   

         Map_Result_1 := Create_Internal_Entity_Param_Array
           (Items_Count => Natural (Internal_Entity_Param_Vectors.Length (Map_Result_1_Vec)));
         for I in Map_Result_1.Items'Range loop
            Map_Result_1.Items (I) := Internal_Entity_Param_Vectors.Get
              (Map_Result_1_Vec,
               I + Internal_Entity_Param_Vectors.Index_Type'First - Map_Result_1.Items'First);
         end loop;
         Internal_Entity_Param_Vectors.Destroy (Map_Result_1_Vec);

      end;
   



--# expr-done 1661

   
      declare
         Map_Result_2_Vec : Logic_Equation_Vectors.Vector;
      begin
   

   

      

      declare
         
         Collection : constant Internal_Entity_Param_Array_Access := Map_Result_1;
      begin
         for Item_2 of
               Collection.Items
         loop

            
   --# scope-start


               --# bind p Item_2

            
         
         
      --# expr-start 1664 '<Bind at nodes.lkt:2863:20>' Bind_Result_1 nodes.lkt:2863
--# expr-start 1663 '<FieldAccess for expected_type_var at nodes.lkt:2863:20>' Fld_15 nodes.lkt:2863



--# expr-start 1662 '<FieldAccess for value at nodes.lkt:2863:20>' Fld_14 nodes.lkt:2863







   if Item_2.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_14 := Create_Internal_Entity_Expr (Node => Item_2.Node.Param_F_Value, Info => Item_2.Info);
--# expr-done 1662



   if Fld_14.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_15 := Fld_14.Node.Expr_Expected_Type_Var'Unrestricted_Access;
--# expr-done 1663
Fld_15.Value := No_Entity;
Entity_Vars.Reset (Fld_15);






Cast_Expr := No_Entity_Type_Decl; 



   
      Cast_Result_1 := Create_Internal_Entity
        (Node => Cast_Expr.Node,
         Info => Cast_Expr.Info);


Bind_Result_1 := Solver.Create_Assign (Fld_15, Cast_Result_1, Solver_Ifc.No_Converter, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:2863:20") else null)); 
--# expr-done 1664
      

         declare
            Item_To_Append : constant Logic_Equation := Bind_Result_1;
         begin
               Inc_Ref (Item_To_Append);
            Logic_Equation_Vectors.Append (Map_Result_2_Vec, Item_To_Append);
         end;
   
   
   

            
   --# end
      Finalizer_Scope_667;



         end loop;
      end;
   

   

         Map_Result_2 := Create_Logic_Equation_Array
           (Items_Count => Natural (Logic_Equation_Vectors.Length (Map_Result_2_Vec)));
         for I in Map_Result_2.Items'Range loop
            Map_Result_2.Items (I) := Logic_Equation_Vectors.Get
              (Map_Result_2_Vec,
               I + Logic_Equation_Vectors.Index_Type'First - Map_Result_2.Items'First);
         end loop;
         Logic_Equation_Vectors.Destroy (Map_Result_2_Vec);

      end;
   



--# expr-done 1665
Logic_Boolean_Op := Solver.Create_All (Relation_Array (Map_Result_2.Items), (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:2862:14") else null)); 
--# expr-done 1666
And_Pred := Create_And (Bind_Result, Logic_Boolean_Op, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:2847:9") else null)); 
--# expr-done 1667

         Property_Result := And_Pred;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_242;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_242;
                     Finalizer_Scope_667;




            raise;
      end;



   return Property_Result;
end Expr_P_Call_Expected_Type_Equation;
--# end

   







--# property-start Expr.match_params nodes.lkt:2868
pragma Warnings (Off, "is not referenced");
 function Expr_P_Match_Params
  
  (Node : Bare_Expr
      ; Formals : Internal_Formal_Param_Array_Access
      ; Args : Internal_Entity_Param_List
  )

   return Internal_Param_Match_Array_Access
is
   Self : Bare_Expr  := Bare_Expr (Node);
      --# bind self Self

   

   --# bind formals Formals
   --# bind args Args

   Property_Result : Internal_Param_Match_Array_Access;

      
            procedure Finalizer_Scope_243 with Inline_Always;

      Var_Expr_3 : Internal_Entity_Param;
Left_Var : Internal_Param_Match;
Left_Var_1 : Internal_Param_Match;
Var_Expr_59 : Internal_Entity_Param;
Var_Expr_60 : Internal_Entity_Ref_Id;
Index_1 : Integer;
Saved : Internal_Entity_Param_List;
Fld : Bare_Param_List;
Fld_1 : Internal_Entity_Info;
Get_Result : Bare_Param;
As_Entity : Internal_Entity_Param;
Is_Null : Boolean;
If_Result : Internal_Entity_Param;
New_Struct : Internal_Param_Match;
Saved_1 : Internal_Entity_Param_List;
Fld_2 : Bare_Param_List;
Fld_3 : Internal_Entity_Info;
Get_Result_1 : Bare_Param;
As_Entity_1 : Internal_Entity_Param;
Is_Null_1 : Boolean;
If_Result_1 : Internal_Entity_Param;
Fld_4 : Internal_Entity_Ref_Id;
Is_Null_2 : Boolean;
Scope_Result : Boolean;
Result_Var : Boolean;
If_Result_2 : Internal_Param_Match;
Scope_Result_1 : Internal_Param_Match;
Saved_2 : Internal_Entity_Param_List;
Fld_5 : Bare_Param_List;
Fld_6 : Internal_Entity_Info;
Item_2 : Internal_Entity_Param;
Bare_Item_2 : Bare_Param;
Fld_7 : Internal_Entity_Ref_Id;
Fld_8 : Bare_Ref_Id;
Sym : Symbol_Type;
Scope_Result_2 : Symbol_Type;
Result_Var_1 : Symbol_Type;
Fld_9 : Symbol_Type;
Is_Equal : Boolean;
As_Entity_2 : Internal_Entity_Param;
Is_Null_3 : Boolean;
If_Result_3 : Internal_Entity_Param;
Find_Result : Internal_Entity_Param;
New_Struct_1 : Internal_Param_Match;
Scope_Result_3 : Internal_Param_Match;
Result_Var_2 : Internal_Param_Match;
Result_Var_3 : Internal_Param_Match;
Scope_Result_4 : Internal_Param_Match;
Fld_10 : Boolean;
Not_Val : Boolean;
New_Struct_2 : Internal_Param_Match;
Result_Var_4 : Internal_Param_Match;
Map_Result : Internal_Param_Match_Array_Access;

            procedure Finalizer_Scope_243 is
            begin
                     Dec_Ref (Map_Result);
            end Finalizer_Scope_243;

      
      Mmz_Handle : Memoization_Handle;
      Mmz_Val    : Mmz_Value;

      Mmz_Stored : Boolean;
      --  Whether the memoization couple was actually stored. Used to determine
      --  whether to inc-ref the memoized value.

      function Create_Mmz_Key return Mmz_Key;
      --  Create a memoization key for this property call and return it

      --------------------
      -- Create_Mmz_Key --
      --------------------

      function Create_Mmz_Key return Mmz_Key is
      begin
         return Mmz_K : Mmz_Key :=
           (Property => Mmz_Bare_Expr_Expr_P_Match_Params,
            Items    => new Mmz_Key_Array (1 ..  3))
         do
            Mmz_K.Items (1) := (Kind => Mmz_Bare_Expr,
                                As_Bare_Expr => Self);
               Mmz_K.Items (2) := (Kind => Mmz_Internal_Formal_Param_Array_Access,
                                      As_Internal_Formal_Param_Array_Access => Formals);
                  Inc_Ref (Mmz_K.Items (2).As_Internal_Formal_Param_Array_Access);
               Mmz_K.Items (3) := (Kind => Mmz_Internal_Entity_Param_List,
                                      As_Internal_Entity_Param_List => Args);
         end return;
      end Create_Mmz_Key;

begin
   --# property-body-start

   pragma Assert (Self = Node);




      if Self /= null then

         if not Self.Unit.Context.In_Populate_Lexical_Env then

            if Find_Memoized_Value
              (Self.Unit, Mmz_Handle, Mmz_Val, Create_Mmz_Key'Access)
            then
               --# memoization-lookup

               if Mmz_Val.Kind = Mmz_Evaluating then
                  --# memoization-return
                  Raise_Property_Exception
                    (Self,
                     Property_Error'Identity,
                     "Infinite recursion detected");

               elsif Mmz_Val.Kind = Mmz_Error then
                  --# memoization-return
                  Reraise_Memoized_Error (Mmz_Val);

               else
                  Property_Result := Mmz_Val.As_Internal_Param_Match_Array_Access;
                     Inc_Ref (Property_Result);

                  --# memoization-return
                  return Property_Result;
               end if;
               --# end
            end if;

         end if;
      end if;

      begin
         
   --# scope-start

         --# expr-start 1681 '<Map at nodes.lkt:2872:9>' Map_Result nodes.lkt:2872








   

   

   
      declare
         Map_Result_Vec : Internal_Param_Match_Vectors.Vector;
      begin
   

   

      
         Index_1 := 0;

      declare
         
         Collection : constant Internal_Formal_Param_Array_Access := Formals;
      begin
         for Item_0 of
               Collection.Items
         loop

            
   --# scope-start


               --# bind f Item_0
               --# bind i Index_1

            
         
         
      





--# expr-start 1671 '<If at nodes.lkt:2877:21>' If_Result_2 nodes.lkt:2877







Saved_1 := Args; 













Fld_2 := Saved_1.Node;


Get_Result_1 := Get (Self, Fld_2, Index_1, True); 
Is_Null_1 := Get_Result_1 = null; 
if Is_Null_1 then
   
   If_Result_1 := No_Entity_Param;
else
   








Fld_3 := Saved_1.Info;

As_Entity_1 := (Info => Fld_3, Node => Get_Result_1); 
   If_Result_1 := As_Entity_1;
end if;



Var_Expr_59 := If_Result_1;





if Var_Expr_59 /= No_Entity_Param then
   



   --# scope-start


   

--# expr-start 1669 '<IsNull at nodes.lkt:2877:24>' Is_Null_2 nodes.lkt:2877
--# expr-start 1668 '<FieldAccess for name at nodes.lkt:2877:24>' Fld_4 nodes.lkt:2877







   if Var_Expr_59.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_4 := Create_Internal_Entity_Ref_Id (Node => Var_Expr_59.Node.Param_F_Name, Info => Var_Expr_59.Info);
--# expr-done 1668
Is_Null_2 := Fld_4.Node = null; 
--# expr-done 1669
Scope_Result := Is_Null_2;


   --# end


   Result_Var := Scope_Result;
else
   
   Result_Var := False;
end if;



if Result_Var then
   --# expr-start 1670 '<New ParamMatch at nodes.lkt:2879:25>' New_Struct nodes.lkt:2879

Saved := Args; 













Fld := Saved.Node;


Get_Result := Get (Self, Fld, Index_1, True); 
Is_Null := Get_Result = null; 
if Is_Null then
   
   If_Result := No_Entity_Param;
else
   








Fld_1 := Saved.Info;

As_Entity := (Info => Fld_1, Node => Get_Result); 
   If_Result := As_Entity;
end if;





New_Struct := (Actual => If_Result, Formal => Item_0, Has_Matched => True); 
--# expr-done 1670
   If_Result_2 := New_Struct;
else
   
   If_Result_2 := No_Param_Match;
end if;



--# expr-done 1671
Left_Var := If_Result_2;





if Left_Var /= No_Param_Match then
   



   --# scope-start


   


Scope_Result_1 := Left_Var;


   --# end


   Result_Var_3 := Scope_Result_1;
else
   


--# expr-start 1676 '<Find at nodes.lkt:2883:21>' Find_Result nodes.lkt:2883








   

   
Saved_2 := Args; 









Fld_5 := Saved_2.Node;

   
      Find_Result := No_Entity_Param;
   

   

      if Fld_5 = null then
         
      Find_Result := No_Entity_Param;
   
      else
         

      declare
         
         Collection : constant Bare_Param_List := Fld_5;
      begin
         for Untyped_Item_2 of
               Collection.Nodes (1 .. Children_Count (Collection))
         loop
                  
                  Bare_Item_2 := Untyped_Item_2; 
                  



Is_Null_3 := Bare_Item_2 = null; 
if Is_Null_3 then
   
   If_Result_3 := No_Entity_Param;
else
   








Fld_6 := Saved_2.Info;

As_Entity_2 := (Info => Fld_6, Node => Bare_Item_2); 
   If_Result_3 := As_Entity_2;
end if;



                  Item_2 := If_Result_3; 

            
   --# scope-start


               --# bind p Item_2

            
      --# expr-start 1675 '<Eq at nodes.lkt:2883:38>' Is_Equal nodes.lkt:2883



--# expr-start 1672 '<FieldAccess for name at nodes.lkt:2883:38>' Fld_7 nodes.lkt:2883







   if Item_2.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_7 := Create_Internal_Entity_Ref_Id (Node => Item_2.Node.Param_F_Name, Info => Item_2.Info);
--# expr-done 1672
Var_Expr_60 := Fld_7;





if Var_Expr_60 /= No_Entity_Ref_Id then
   



   --# scope-start


   

--# expr-start 1673 '<GetSymbol at nodes.lkt:2883:38>' Sym nodes.lkt:2883









Fld_8 := Var_Expr_60.Node; 
Sym := Get_Symbol (Fld_8); 
--# expr-done 1673
Scope_Result_2 := Sym;


   --# end


   Result_Var_1 := Scope_Result_2;
else
   
   Result_Var_1 := No_Symbol;
end if;



--# expr-start 1674 '<FieldAccess for formal_name at nodes.lkt:2883:56>' Fld_9 nodes.lkt:2883









Fld_9 := Item_0.Formal_Name;
--# expr-done 1674
Is_Equal := Result_Var_1 = Fld_9; 
--# expr-done 1675
      if Is_Equal then
         Find_Result := Item_2; 
      end if;
   

            
   --# end


               exit when Is_Equal;

         end loop;
      end;
   
      end if;

   
   



--# expr-done 1676
Var_Expr_3 := Find_Result;





if Var_Expr_3 /= No_Entity_Param then
   



   --# scope-start


   --# bind arg Var_Expr_3

--# expr-start 1677 '<New ParamMatch at nodes.lkt:2884:30>' New_Struct_1 nodes.lkt:2884



New_Struct_1 := (Actual => Var_Expr_3, Formal => Item_0, Has_Matched => True); 
--# expr-done 1677
Scope_Result_3 := New_Struct_1;


   --# end


   Result_Var_2 := Scope_Result_3;
else
   
   Result_Var_2 := No_Param_Match;
end if;



   Result_Var_3 := Result_Var_2;
end if;



Left_Var_1 := Result_Var_3;





if Left_Var_1 /= No_Param_Match then
   



   --# scope-start


   


Scope_Result_4 := Left_Var_1;


   --# end


   Result_Var_4 := Scope_Result_4;
else
   --# expr-start 1680 '<New ParamMatch at nodes.lkt:2888:17>' New_Struct_2 nodes.lkt:2888


--# expr-start 1679 '<Not at nodes.lkt:2888:40>' Not_Val nodes.lkt:2888
--# expr-start 1678 '<FieldAccess for has_default_value at nodes.lkt:2888:44>' Fld_10 nodes.lkt:2888









Fld_10 := Item_0.Has_Default_Value;
--# expr-done 1678
Not_Val := not (Fld_10); 
--# expr-done 1679
New_Struct_2 := (Actual => No_Entity_Param, Formal => Item_0, Has_Matched => Not_Val); 
--# expr-done 1680
   Result_Var_4 := New_Struct_2;
end if;



      

         declare
            Item_To_Append : constant Internal_Param_Match := Result_Var_4;
         begin
            Internal_Param_Match_Vectors.Append (Map_Result_Vec, Item_To_Append);
         end;
   
   
   

            
   --# end



               Index_1 := Index_1 + 1;
         end loop;
      end;
   

   

         Map_Result := Create_Internal_Param_Match_Array
           (Items_Count => Natural (Internal_Param_Match_Vectors.Length (Map_Result_Vec)));
         for I in Map_Result.Items'Range loop
            Map_Result.Items (I) := Internal_Param_Match_Vectors.Get
              (Map_Result_Vec,
               I + Internal_Param_Match_Vectors.Index_Type'First - Map_Result.Items'First);
         end loop;
         Internal_Param_Match_Vectors.Destroy (Map_Result_Vec);

      end;
   



--# expr-done 1681

         Property_Result := Map_Result;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_243;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_243;


               if Self /= null then
                     if not Self.Unit.Context.In_Populate_Lexical_Env then
                        Add_Memoized_Error
                          (Self.Unit, Mmz_Handle, Exc, Mmz_Stored);
                     end if;
               end if;


            raise;
      end;

      if Self /= null then
         if not Self.Unit.Context.In_Populate_Lexical_Env then

            Mmz_Val := (Kind => Mmz_Internal_Param_Match_Array_Access,
                        As_Internal_Param_Match_Array_Access => Property_Result);
            Add_Memoized_Value (Self.Unit, Mmz_Handle, Mmz_Val, Mmz_Stored);
               if Mmz_Stored then
                  Inc_Ref (Property_Result);
               end if;

         end if;
      end if;



   return Property_Result;
end Expr_P_Match_Params;
--# end

   







--# property-start Expr.xref_call_args_equation nodes.lkt:2893
pragma Warnings (Off, "is not referenced");
 function Expr_P_Xref_Call_Args_Equation
  
  (Node : Bare_Expr
      ; Name : Internal_Entity_Expr
      ; Args : Internal_Entity_Param_List
      ; In_Logic_Call : Boolean
         := False
  )

   return Logic_Equation
is
   Self : Bare_Expr  := Bare_Expr (Node);
      --# bind self Self

   

   --# bind name Name
   --# bind args Args
   --# bind in_logic_call In_Logic_Call

   Property_Result : Logic_Equation;

      
            procedure Finalizer_Scope_244 with Inline_Always;
            procedure Finalizer_Scope_675 with Inline_Always;

      Saved : Internal_Entity_Param_List;
Fld : Bare_Param_List;
Fld_1 : Internal_Entity_Info;
Item_0 : Internal_Entity_Param;
Bare_Item_0 : Bare_Param;
Fld_2 : Internal_Entity_Expr;
Fld_3 : Logic_Equation;
Bound_Current_Name : Internal_Entity_Param;
Fld_4 : Internal_Entity_Expr;
Fld_5 : Logic_Var;
Fld_6 : Logic_Var;
Bind_Result : Logic_Equation;
Dyn_Var_Bind_Result : Logic_Equation;
And_Pred : Logic_Equation;
True_Rel : Logic_Equation;
Bound_Current_Name_1 : Internal_Entity_Param;
Fld_7 : Internal_Entity_Ref_Id;
Fld_8 : Logic_Var;
Fld_9 : Logic_Var;
Bind_Result_1 : Logic_Equation;
Dyn_Var_Bind_Result_1 : Logic_Equation;
Fld_10 : Internal_Entity_Ref_Id;
Fld_11 : Bare_Ref_Id;
Cast_Result : Bare_Lkt_Node;
Bound_Error_Location : Bare_Lkt_Node;
Fld_12 : Internal_Entity_Ref_Id;
Fld_13 : Logic_Var;
Fld_14 : Logic_Var;
Pred : Logic_Equation;
Dyn_Var_Bind_Result_2 : Logic_Equation;
And_Pred_1 : Logic_Equation;
Fld_15 : Internal_Entity_Ref_Id;
Is_Null : Boolean;
If_Result : Logic_Equation;
And_Pred_2 : Logic_Equation;
Fld_16 : Internal_Entity_Expr;
Fld_17 : Bare_Expr;
Cast_Result_1 : Bare_Lkt_Node;
Bound_Error_Location_1 : Bare_Lkt_Node;
Fld_18 : Internal_Entity_Expr;
Fld_19 : Logic_Var;
Fld_20 : Internal_Entity_Expr;
Fld_21 : Logic_Var;
Pred_1 : Logic_Equation;
Dyn_Var_Bind_Result_3 : Logic_Equation;
Fld_22 : Internal_Entity_Expr;
Fld_23 : Bare_Expr;
Cast_Result_2 : Bare_Lkt_Node;
Bound_Error_Location_2 : Bare_Lkt_Node;
Fld_24 : Internal_Entity_Expr;
Fld_25 : Logic_Var;
Fld_26 : Internal_Entity_Expr;
Fld_27 : Logic_Var;
Pred_2 : Logic_Equation;
Dyn_Var_Bind_Result_4 : Logic_Equation;
If_Result_1 : Logic_Equation;
And_Pred_3 : Logic_Equation;
As_Entity : Internal_Entity_Param;
Is_Null_1 : Boolean;
If_Result_2 : Internal_Entity_Param;
Map_Result : Logic_Equation_Array_Access;
Logic_Boolean_Op : Logic_Equation;

            procedure Finalizer_Scope_244 is
            begin
                     Dec_Ref (Map_Result);
                     Dec_Ref (Logic_Boolean_Op);
            end Finalizer_Scope_244;
            procedure Finalizer_Scope_675 is
            begin
                     Dec_Ref (Fld_3);
                     Dec_Ref (Bind_Result);
                     Dec_Ref (Dyn_Var_Bind_Result);
                     Dec_Ref (And_Pred);
                     Dec_Ref (True_Rel);
                     Dec_Ref (Bind_Result_1);
                     Dec_Ref (Dyn_Var_Bind_Result_1);
                     Dec_Ref (Pred);
                     Dec_Ref (Dyn_Var_Bind_Result_2);
                     Dec_Ref (And_Pred_1);
                     Dec_Ref (If_Result);
                     Dec_Ref (And_Pred_2);
                     Dec_Ref (Pred_1);
                     Dec_Ref (Dyn_Var_Bind_Result_3);
                     Dec_Ref (Pred_2);
                     Dec_Ref (Dyn_Var_Bind_Result_4);
                     Dec_Ref (If_Result_1);
                     Dec_Ref (And_Pred_3);
            end Finalizer_Scope_675;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 1726 '<LogicAll at nodes.lkt:2897:9>' Logic_Boolean_Op nodes.lkt:2897
--# expr-start 1725 '<Map at nodes.lkt:2897:9>' Map_Result nodes.lkt:2897








   

   
Saved := Args; 









Fld := Saved.Node;

   
      declare
         Map_Result_Vec : Logic_Equation_Vectors.Vector;
      begin
   

   

      if Fld = null then
         
      Map_Result := Create_Logic_Equation_Array (0);
   
      else
         

      declare
         
         Collection : constant Bare_Param_List := Fld;
      begin
         for Untyped_Item_0 of
               Collection.Nodes (1 .. Children_Count (Collection))
         loop
                  
                  Bare_Item_0 := Untyped_Item_0; 
                  



Is_Null_1 := Bare_Item_0 = null; 
if Is_Null_1 then
   
   If_Result_2 := No_Entity_Param;
else
   








Fld_1 := Saved.Info;

As_Entity := (Info => Fld_1, Node => Bare_Item_0); 
   If_Result_2 := As_Entity;
end if;



                  Item_0 := If_Result_2; 

            
   --# scope-start


               --# bind actual Item_0

            
         
         
      --# expr-start 1724 '<LogicBinaryOp And at nodes.lkt:2899:13>' And_Pred_3 nodes.lkt:2899
--# expr-start 1706 '<LogicBinaryOp And at nodes.lkt:2900:17>' And_Pred_2 nodes.lkt:2900
--# expr-start 1689 '<LogicBinaryOp And at nodes.lkt:2901:21>' And_Pred nodes.lkt:2901
--# expr-start 1683 '<FieldAccess for xref_equation at nodes.lkt:2901:21>' Fld_3 nodes.lkt:2901



--# expr-start 1682 '<FieldAccess for value at nodes.lkt:2901:21>' Fld_2 nodes.lkt:2901







   if Item_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_2 := Create_Internal_Entity_Expr (Node => Item_0.Node.Param_F_Value, Info => Item_0.Info);
--# expr-done 1682



   if Fld_2.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]LktNode.xref_equation'
Fld_3 := Liblktlang.Implementation.Dispatcher_Lkt_Node_P_Xref_Equation (Node => Fld_2.Node, E_Info => Fld_2.Info);
--# end
--# expr-done 1683
--# expr-start 1688 '<bind at nodes.lkt:2905:29>' Dyn_Var_Bind_Result nodes.lkt:2905

Bound_Current_Name := Item_0; 
--# expr-start 1687 '<NPropagate at nodes.lkt:2907:29>' Bind_Result nodes.lkt:2907
--# expr-start 1684 '<FieldAccess for actual_type_var at nodes.lkt:2909:33>' Fld_6 nodes.lkt:2909







   if Name.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_6 := Name.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 1684
Fld_6.Value := No_Entity;
Entity_Vars.Reset (Fld_6);
--# expr-start 1686 '<FieldAccess for expected_type_var at nodes.lkt:2907:29>' Fld_5 nodes.lkt:2907



--# expr-start 1685 '<FieldAccess for value at nodes.lkt:2907:29>' Fld_4 nodes.lkt:2907







   if Item_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_4 := Create_Internal_Entity_Expr (Node => Item_0.Node.Param_F_Value, Info => Item_0.Info);
--# expr-done 1685



   if Fld_4.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_5 := Fld_4.Node.Expr_Expected_Type_Var'Unrestricted_Access;
--# expr-done 1686
Fld_5.Value := No_Entity;
Entity_Vars.Reset (Fld_5);


Bind_Result := Solver.Create_Propagate (Fld_6, Fld_5, Create_Type_Decl_P_Match_Param_Get_Type_0_Functor (Bound_Current_Name, In_Logic_Call), Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:2907:29") else null)); 
--# expr-done 1687
Dyn_Var_Bind_Result := Bind_Result; Inc_Ref (Dyn_Var_Bind_Result);
--# expr-done 1688
And_Pred := Create_And (Fld_3, Dyn_Var_Bind_Result, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:2901:21") else null)); 
--# expr-done 1689
--# expr-start 1705 '<If at nodes.lkt:2916:21>' If_Result nodes.lkt:2916



--# expr-start 1691 '<IsNull at nodes.lkt:2916:24>' Is_Null nodes.lkt:2916
--# expr-start 1690 '<FieldAccess for name at nodes.lkt:2916:24>' Fld_15 nodes.lkt:2916







   if Item_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_15 := Create_Internal_Entity_Ref_Id (Node => Item_0.Node.Param_F_Name, Info => Item_0.Info);
--# expr-done 1690
Is_Null := Fld_15.Node = null; 
--# expr-done 1691
if Is_Null then
   True_Rel := Solver.Create_True ((if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:2916:49") else null)); 
   If_Result := True_Rel;
else
   --# expr-start 1704 '<LogicBinaryOp And at nodes.lkt:2918:25>' And_Pred_1 nodes.lkt:2918
--# expr-start 1696 '<bind at nodes.lkt:2919:29>' Dyn_Var_Bind_Result_1 nodes.lkt:2919

Bound_Current_Name_1 := Item_0; 
--# expr-start 1695 '<NPropagate at nodes.lkt:2921:29>' Bind_Result_1 nodes.lkt:2921
--# expr-start 1692 '<FieldAccess for actual_type_var at nodes.lkt:2923:33>' Fld_9 nodes.lkt:2923







   if Name.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_9 := Name.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 1692
Fld_9.Value := No_Entity;
Entity_Vars.Reset (Fld_9);
--# expr-start 1694 '<FieldAccess for ref_var at nodes.lkt:2921:29>' Fld_8 nodes.lkt:2921



--# expr-start 1693 '<FieldAccess for name at nodes.lkt:2921:29>' Fld_7 nodes.lkt:2921







   if Item_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_7 := Create_Internal_Entity_Ref_Id (Node => Item_0.Node.Param_F_Name, Info => Item_0.Info);
--# expr-done 1693



   if Fld_7.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_8 := Fld_7.Node.Ref_Id_Ref_Var'Unrestricted_Access;
--# expr-done 1694
Fld_8.Value := No_Entity;
Entity_Vars.Reset (Fld_8);


Bind_Result_1 := Solver.Create_Propagate (Fld_9, Fld_8, Create_Type_Decl_P_Match_Param_Get_Decl_0_Functor (Bound_Current_Name_1, In_Logic_Call), Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:2921:29") else null)); 
--# expr-done 1695
Dyn_Var_Bind_Result_1 := Bind_Result_1; Inc_Ref (Dyn_Var_Bind_Result_1);
--# expr-done 1696
--# expr-start 1703 '<bind at nodes.lkt:2927:29>' Dyn_Var_Bind_Result_2 nodes.lkt:2927





--# expr-start 1698 '<FieldAccess for node at nodes.lkt:2927:51>' Fld_11 nodes.lkt:2927



--# expr-start 1697 '<FieldAccess for name at nodes.lkt:2927:51>' Fld_10 nodes.lkt:2927







   if Item_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_10 := Create_Internal_Entity_Ref_Id (Node => Item_0.Node.Param_F_Name, Info => Item_0.Info);
--# expr-done 1697





Fld_11 := Fld_10.Node;
--# expr-done 1698



   
      Cast_Result := Fld_11;


Bound_Error_Location := Cast_Result; 
--# expr-start 1702 '<Predicate on LktNode.unmatched_argument at nodes.lkt:2928:29>' Pred nodes.lkt:2928
--# expr-start 1700 '<FieldAccess for ref_var at nodes.lkt:2929:33>' Fld_13 nodes.lkt:2929



--# expr-start 1699 '<FieldAccess for name at nodes.lkt:2929:33>' Fld_12 nodes.lkt:2929







   if Item_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_12 := Create_Internal_Entity_Ref_Id (Node => Item_0.Node.Param_F_Name, Info => Item_0.Info);
--# expr-done 1699



   if Fld_12.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_13 := Fld_12.Node.Ref_Id_Ref_Var'Unrestricted_Access;
--# expr-done 1700
Fld_13.Value := No_Entity;
Entity_Vars.Reset (Fld_13);
--# expr-start 1701 '<FieldAccess for actual_type_var at nodes.lkt:2930:33>' Fld_14 nodes.lkt:2930







   if Name.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_14 := Name.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 1701
Fld_14.Value := No_Entity;
Entity_Vars.Reset (Fld_14);


Pred := Solver.Create_N_Predicate ((Fld_13, Fld_14), Create_Lkt_Node_P_Unmatched_Argument_0_Predicate (2, Bound_Error_Location)); 
--# expr-done 1702
Dyn_Var_Bind_Result_2 := Pred; Inc_Ref (Dyn_Var_Bind_Result_2);
--# expr-done 1703
And_Pred_1 := Create_And (Dyn_Var_Bind_Result_1, Dyn_Var_Bind_Result_2, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:2918:25") else null)); 
--# expr-done 1704
   If_Result := And_Pred_1;
end if;

      Inc_Ref (If_Result);


--# expr-done 1705
And_Pred_2 := Create_And (And_Pred, If_Result, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:2900:17") else null)); 
--# expr-done 1706
--# expr-start 1723 '<If at nodes.lkt:2936:17>' If_Result_1 nodes.lkt:2936




if In_Logic_Call then
   --# expr-start 1714 '<bind at nodes.lkt:2938:21>' Dyn_Var_Bind_Result_3 nodes.lkt:2938





--# expr-start 1708 '<FieldAccess for node at nodes.lkt:2938:43>' Fld_17 nodes.lkt:2938



--# expr-start 1707 '<FieldAccess for value at nodes.lkt:2938:43>' Fld_16 nodes.lkt:2938







   if Item_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_16 := Create_Internal_Entity_Expr (Node => Item_0.Node.Param_F_Value, Info => Item_0.Info);
--# expr-done 1707





Fld_17 := Fld_16.Node;
--# expr-done 1708



   
      Cast_Result_1 := Fld_17;


Bound_Error_Location_1 := Cast_Result_1; 
--# expr-start 1713 '<Predicate on TypeDecl.matching_logic_type at nodes.lkt:2939:21>' Pred_1 nodes.lkt:2939
--# expr-start 1710 '<FieldAccess for expected_type_var at nodes.lkt:2940:25>' Fld_19 nodes.lkt:2940



--# expr-start 1709 '<FieldAccess for value at nodes.lkt:2940:25>' Fld_18 nodes.lkt:2940







   if Item_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_18 := Create_Internal_Entity_Expr (Node => Item_0.Node.Param_F_Value, Info => Item_0.Info);
--# expr-done 1709



   if Fld_18.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_19 := Fld_18.Node.Expr_Expected_Type_Var'Unrestricted_Access;
--# expr-done 1710
Fld_19.Value := No_Entity;
Entity_Vars.Reset (Fld_19);
--# expr-start 1712 '<FieldAccess for actual_type_var at nodes.lkt:2941:25>' Fld_21 nodes.lkt:2941



--# expr-start 1711 '<FieldAccess for value at nodes.lkt:2941:25>' Fld_20 nodes.lkt:2941







   if Item_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_20 := Create_Internal_Entity_Expr (Node => Item_0.Node.Param_F_Value, Info => Item_0.Info);
--# expr-done 1711



   if Fld_20.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_21 := Fld_20.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 1712
Fld_21.Value := No_Entity;
Entity_Vars.Reset (Fld_21);


Pred_1 := Solver.Create_N_Predicate ((Fld_19, Fld_21), Create_Type_Decl_P_Matching_Logic_Type_0_Predicate (2, Bound_Error_Location_1)); 
--# expr-done 1713
Dyn_Var_Bind_Result_3 := Pred_1; Inc_Ref (Dyn_Var_Bind_Result_3);
--# expr-done 1714
   If_Result_1 := Dyn_Var_Bind_Result_3;
else
   --# expr-start 1722 '<bind at nodes.lkt:2945:21>' Dyn_Var_Bind_Result_4 nodes.lkt:2945





--# expr-start 1716 '<FieldAccess for node at nodes.lkt:2945:43>' Fld_23 nodes.lkt:2945



--# expr-start 1715 '<FieldAccess for value at nodes.lkt:2945:43>' Fld_22 nodes.lkt:2945







   if Item_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_22 := Create_Internal_Entity_Expr (Node => Item_0.Node.Param_F_Value, Info => Item_0.Info);
--# expr-done 1715





Fld_23 := Fld_22.Node;
--# expr-done 1716



   
      Cast_Result_2 := Fld_23;


Bound_Error_Location_2 := Cast_Result_2; 
--# expr-start 1721 '<Predicate on TypeDecl.matching_type at nodes.lkt:2946:21>' Pred_2 nodes.lkt:2946
--# expr-start 1718 '<FieldAccess for expected_type_var at nodes.lkt:2947:25>' Fld_25 nodes.lkt:2947



--# expr-start 1717 '<FieldAccess for value at nodes.lkt:2947:25>' Fld_24 nodes.lkt:2947







   if Item_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_24 := Create_Internal_Entity_Expr (Node => Item_0.Node.Param_F_Value, Info => Item_0.Info);
--# expr-done 1717



   if Fld_24.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_25 := Fld_24.Node.Expr_Expected_Type_Var'Unrestricted_Access;
--# expr-done 1718
Fld_25.Value := No_Entity;
Entity_Vars.Reset (Fld_25);
--# expr-start 1720 '<FieldAccess for actual_type_var at nodes.lkt:2948:25>' Fld_27 nodes.lkt:2948



--# expr-start 1719 '<FieldAccess for value at nodes.lkt:2948:25>' Fld_26 nodes.lkt:2948







   if Item_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_26 := Create_Internal_Entity_Expr (Node => Item_0.Node.Param_F_Value, Info => Item_0.Info);
--# expr-done 1719



   if Fld_26.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_27 := Fld_26.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 1720
Fld_27.Value := No_Entity;
Entity_Vars.Reset (Fld_27);


Pred_2 := Solver.Create_N_Predicate ((Fld_25, Fld_27), Create_Type_Decl_P_Matching_Type_0_Predicate (2, Bound_Error_Location_2)); 
--# expr-done 1721
Dyn_Var_Bind_Result_4 := Pred_2; Inc_Ref (Dyn_Var_Bind_Result_4);
--# expr-done 1722
   If_Result_1 := Dyn_Var_Bind_Result_4;
end if;

      Inc_Ref (If_Result_1);


--# expr-done 1723
And_Pred_3 := Create_And (And_Pred_2, If_Result_1, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:2899:13") else null)); 
--# expr-done 1724
      

         declare
            Item_To_Append : constant Logic_Equation := And_Pred_3;
         begin
               Inc_Ref (Item_To_Append);
            Logic_Equation_Vectors.Append (Map_Result_Vec, Item_To_Append);
         end;
   
   
   

            
   --# end
      Finalizer_Scope_675;



         end loop;
      end;
   
      end if;

   

         Map_Result := Create_Logic_Equation_Array
           (Items_Count => Natural (Logic_Equation_Vectors.Length (Map_Result_Vec)));
         for I in Map_Result.Items'Range loop
            Map_Result.Items (I) := Logic_Equation_Vectors.Get
              (Map_Result_Vec,
               I + Logic_Equation_Vectors.Index_Type'First - Map_Result.Items'First);
         end loop;
         Logic_Equation_Vectors.Destroy (Map_Result_Vec);

      end;
   



--# expr-done 1725
Logic_Boolean_Op := Solver.Create_All (Relation_Array (Map_Result.Items), (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:2897:9") else null)); 
--# expr-done 1726

         Property_Result := Logic_Boolean_Op;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_244;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_244;
                     Finalizer_Scope_675;




            raise;
      end;



   return Property_Result;
end Expr_P_Xref_Call_Args_Equation;
--# end

   







--# property-start Expr.xref_call_equation nodes.lkt:2960
pragma Warnings (Off, "is not referenced");
 function Expr_P_Xref_Call_Equation
  
  (Node : Bare_Expr
      ; Name : Internal_Entity_Expr
      ; Args : Internal_Entity_Param_List
      ; In_Logic_Call : Boolean
         := False
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Logic_Equation
is
   Self : Bare_Expr  := Bare_Expr (Node);
     Ent : Internal_Entity_Expr :=
       Internal_Entity_Expr'(Node => Self, Info => E_Info);
      --# bind entity Ent

   

   --# bind name Name
   --# bind args Args
   --# bind in_logic_call In_Logic_Call

   Property_Result : Logic_Equation;

      
            procedure Finalizer_Scope_245 with Inline_Always;

      Match_0 : Internal_Entity_Call_Expr;
Match_1 : Internal_Entity_Logic_Propagate;
Match_2 : Internal_Entity_Logic_Predicate;
Match_3 : Internal_Entity_Expr;
Fld : Logic_Equation;
True_Rel : Logic_Equation;
Fld_1 : Logic_Var;
Fld_2 : Logic_Var;
Bind_Result : Logic_Equation;
Is_A : Boolean;
If_Result : Logic_Equation;
And_Pred : Logic_Equation;
Cast_Expr : Bare_Expr;
Cast_Result : Bare_Lkt_Node;
Bound_Error_Location : Bare_Lkt_Node;
Fld_3 : Logic_Var;
Fld_4 : Internal_Entity_Param_List;
Fld_5 : Internal_Entity_Logic_Propagate_Call;
Fld_6 : Internal_Entity_Param_List;
Fld_7 : Internal_Entity_Param_List;
Match_Prefix : Internal_Entity_Expr;
Cast_Result_1 : Internal_Entity_Call_Expr;
Let_Result : Internal_Entity_Param_List;
Scope_Result : Internal_Entity_Param_List;
Cast_Result_2 : Internal_Entity_Logic_Propagate;
Let_Result_1 : Internal_Entity_Param_List;
Scope_Result_1 : Internal_Entity_Param_List;
Cast_Result_3 : Internal_Entity_Logic_Predicate;
Let_Result_2 : Internal_Entity_Param_List;
Scope_Result_2 : Internal_Entity_Param_List;
Cast_Result_4 : Internal_Entity_Expr;
Let_Result_3 : Internal_Entity_Param_List;
Scope_Result_3 : Internal_Entity_Param_List;
Match_Result : Internal_Entity_Param_List;
Pred : Logic_Equation;
Dyn_Var_Bind_Result : Logic_Equation;
And_Pred_1 : Logic_Equation;
Fld_8 : Bare_Expr;
Cast_Result_5 : Bare_Lkt_Node;
Bound_Error_Location_1 : Bare_Lkt_Node;
Fld_9 : Logic_Var;
Pred_1 : Logic_Equation;
Dyn_Var_Bind_Result_1 : Logic_Equation;
And_Pred_2 : Logic_Equation;
Fld_10 : Bare_Expr;
Cast_Result_6 : Bare_Lkt_Node;
Bound_Error_Location_2 : Bare_Lkt_Node;
Fld_11 : Logic_Var;
Fld_12 : Internal_Entity_Type_Decl;
Cast_Result_7 : Internal_Entity_Function_Type;
Pred_2 : Logic_Equation;
Dyn_Var_Bind_Result_2 : Logic_Equation;
And_Pred_3 : Logic_Equation;

            procedure Finalizer_Scope_245 is
            begin
                     Dec_Ref (Fld);
                     Dec_Ref (True_Rel);
                     Dec_Ref (Bind_Result);
                     Dec_Ref (If_Result);
                     Dec_Ref (And_Pred);
                     Dec_Ref (Pred);
                     Dec_Ref (Dyn_Var_Bind_Result);
                     Dec_Ref (And_Pred_1);
                     Dec_Ref (Pred_1);
                     Dec_Ref (Dyn_Var_Bind_Result_1);
                     Dec_Ref (And_Pred_2);
                     Dec_Ref (Pred_2);
                     Dec_Ref (Dyn_Var_Bind_Result_2);
                     Dec_Ref (And_Pred_3);
            end Finalizer_Scope_245;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 1754 '<LogicBinaryOp And at nodes.lkt:2964:9>' And_Pred_3 nodes.lkt:2964
--# expr-start 1747 '<LogicBinaryOp And at nodes.lkt:2965:13>' And_Pred_2 nodes.lkt:2965
--# expr-start 1742 '<LogicBinaryOp And at nodes.lkt:2966:17>' And_Pred_1 nodes.lkt:2966
--# expr-start 1733 '<LogicBinaryOp And at nodes.lkt:2967:21>' And_Pred nodes.lkt:2967
--# expr-start 1727 '<FieldAccess for xref_call_args_equation at nodes.lkt:2967:21>' Fld nodes.lkt:2967







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;




--# property-call-start Expr.xref_call_args_equation
Fld := Liblktlang.Implementation.Expr_P_Xref_Call_Args_Equation (Node => Ent.Node, Name => Name, Args => Args, In_Logic_Call => In_Logic_Call);
--# end
--# expr-done 1727
--# expr-start 1732 '<If at nodes.lkt:2972:25>' If_Result nodes.lkt:2972



--# expr-start 1728 '<IsA BaseDotExpr, RefId at nodes.lkt:2972:28>' Is_A nodes.lkt:2972

Is_A := Name.Node /= null 
and then Name.Node.Kind in Lkt_Base_Dot_Expr | Lkt_Ref_Id_Range; 
--# expr-done 1728
if Is_A then
   True_Rel := Solver.Create_True ((if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:2972:61") else null)); 
   If_Result := True_Rel;
else
   --# expr-start 1731 '<Bind at nodes.lkt:2974:29>' Bind_Result nodes.lkt:2974
--# expr-start 1729 '<FieldAccess for generic_func_type_var at nodes.lkt:2974:29>' Fld_1 nodes.lkt:2974







   if Name.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_1 := Name.Node.Expr_Generic_Func_Type_Var'Unrestricted_Access;
--# expr-done 1729
Fld_1.Value := No_Entity;
Entity_Vars.Reset (Fld_1);
--# expr-start 1730 '<FieldAccess for actual_type_var at nodes.lkt:2974:60>' Fld_2 nodes.lkt:2974







   if Name.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_2 := Name.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 1730
Fld_2.Value := No_Entity;
Entity_Vars.Reset (Fld_2);
Bind_Result := Solver.Create_Unify (Fld_1, Fld_2, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:2974:29") else null)); 
--# expr-done 1731
   If_Result := Bind_Result;
end if;

      Inc_Ref (If_Result);


--# expr-done 1732
And_Pred := Create_And (Fld, If_Result, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:2967:21") else null)); 
--# expr-done 1733
--# expr-start 1741 '<bind at nodes.lkt:2978:21>' Dyn_Var_Bind_Result nodes.lkt:2978






Cast_Expr := Self; 



   
      Cast_Result := Cast_Expr;


Bound_Error_Location := Cast_Result; 
--# expr-start 1740 '<Predicate on TypeDecl.is_valid_call at nodes.lkt:2979:21>' Pred nodes.lkt:2979
--# expr-start 1734 '<FieldAccess for actual_type_var at nodes.lkt:2980:25>' Fld_3 nodes.lkt:2980







   if Name.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_3 := Name.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 1734
Fld_3.Value := No_Entity;
Entity_Vars.Reset (Fld_3);
--# expr-start 1739 '<Match at nodes.lkt:2981:25>' Match_Result nodes.lkt:2981










   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Match_Prefix := Ent; 

case Lkt_Expr (Match_Prefix.Node.Kind) is
         when Lkt_Call_Expr =>
            



   --# scope-start



--# scope-start









   
      Cast_Result_1 := Create_Internal_Entity_Call_Expr
        (Node => Match_Prefix.Node,
         Info => Match_Prefix.Info);


Match_0 := Cast_Result_1; 
--# bind c Match_0
--# expr-start 1735 '<FieldAccess for args at nodes.lkt:2982:49>' Fld_4 nodes.lkt:2982







   if Match_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_4 := Create_Internal_Entity_Param_List (Node => Match_0.Node.Base_Call_Expr_F_Args, Info => Match_0.Info);
--# expr-done 1735
Let_Result := Fld_4; 
--# end
Scope_Result := Let_Result;


   --# end


            Match_Result := Scope_Result; 
         when Lkt_Logic_Propagate =>
            



   --# scope-start



--# scope-start









   
      Cast_Result_2 := Create_Internal_Entity_Logic_Propagate
        (Node => Match_Prefix.Node,
         Info => Match_Prefix.Info);


Match_1 := Cast_Result_2; 
--# bind c Match_1
--# expr-start 1737 '<FieldAccess for args at nodes.lkt:2983:55>' Fld_6 nodes.lkt:2983



--# expr-start 1736 '<FieldAccess for call at nodes.lkt:2983:55>' Fld_5 nodes.lkt:2983







   if Match_1.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_5 := Create_Internal_Entity_Logic_Propagate_Call (Node => Match_1.Node.Logic_Propagate_F_Call, Info => Match_1.Info);
--# expr-done 1736



   if Fld_5.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_6 := Create_Internal_Entity_Param_List (Node => Fld_5.Node.Base_Call_Expr_F_Args, Info => Fld_5.Info);
--# expr-done 1737
Let_Result_1 := Fld_6; 
--# end
Scope_Result_1 := Let_Result_1;


   --# end


            Match_Result := Scope_Result_1; 
         when Lkt_Logic_Predicate =>
            



   --# scope-start



--# scope-start









   
      Cast_Result_3 := Create_Internal_Entity_Logic_Predicate
        (Node => Match_Prefix.Node,
         Info => Match_Prefix.Info);


Match_2 := Cast_Result_3; 
--# bind c Match_2
--# expr-start 1738 '<FieldAccess for args at nodes.lkt:2984:55>' Fld_7 nodes.lkt:2984







   if Match_2.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_7 := Create_Internal_Entity_Param_List (Node => Match_2.Node.Base_Call_Expr_F_Args, Info => Match_2.Info);
--# expr-done 1738
Let_Result_2 := Fld_7; 
--# end
Scope_Result_2 := Let_Result_2;


   --# end


            Match_Result := Scope_Result_2; 
         when Lkt_Any_Of .. Lkt_Array_Literal | Lkt_Logic_Propagate_Call .. Lkt_Logic_Expr | Lkt_Logic_Unify .. Lkt_Un_Op =>
            



   --# scope-start



--# scope-start









   
      Cast_Result_4 := Create_Internal_Entity_Expr
        (Node => Match_Prefix.Node,
         Info => Match_Prefix.Info);


Match_3 := Cast_Result_4; 
--# bind _ Match_3

Let_Result_3 := No_Entity_Param_List; 
--# end
Scope_Result_3 := Let_Result_3;


   --# end


            Match_Result := Scope_Result_3; 
end case;

--# expr-done 1739


Pred := Solver.Create_Predicate (Fld_3, Create_Type_Decl_P_Is_Valid_Call_0_Predicate (Match_Result, In_Logic_Call, Bound_Error_Location)); 
--# expr-done 1740
Dyn_Var_Bind_Result := Pred; Inc_Ref (Dyn_Var_Bind_Result);
--# expr-done 1741
And_Pred_1 := Create_And (And_Pred, Dyn_Var_Bind_Result, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:2966:17") else null)); 
--# expr-done 1742
--# expr-start 1746 '<bind at nodes.lkt:2993:21>' Dyn_Var_Bind_Result_1 nodes.lkt:2993





--# expr-start 1743 '<FieldAccess for node at nodes.lkt:2993:43>' Fld_8 nodes.lkt:2993









Fld_8 := Name.Node;
--# expr-done 1743



   
      Cast_Result_5 := Fld_8;


Bound_Error_Location_1 := Cast_Result_5; 
--# expr-start 1745 '<Predicate on TypeDecl.is_callable at nodes.lkt:2994:21>' Pred_1 nodes.lkt:2994
--# expr-start 1744 '<FieldAccess for actual_type_var at nodes.lkt:2994:43>' Fld_9 nodes.lkt:2994







   if Name.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_9 := Name.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 1744
Fld_9.Value := No_Entity;
Entity_Vars.Reset (Fld_9);

Pred_1 := Solver.Create_Predicate (Fld_9, Create_Type_Decl_P_Is_Callable_0_Predicate (Bound_Error_Location_1)); 
--# expr-done 1745
Dyn_Var_Bind_Result_1 := Pred_1; Inc_Ref (Dyn_Var_Bind_Result_1);
--# expr-done 1746
And_Pred_2 := Create_And (And_Pred_1, Dyn_Var_Bind_Result_1, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:2965:13") else null)); 
--# expr-done 1747
--# expr-start 1753 '<bind at nodes.lkt:2999:13>' Dyn_Var_Bind_Result_2 nodes.lkt:2999





--# expr-start 1748 '<FieldAccess for node at nodes.lkt:2999:35>' Fld_10 nodes.lkt:2999









Fld_10 := Name.Node;
--# expr-done 1748



   
      Cast_Result_6 := Fld_10;


Bound_Error_Location_2 := Cast_Result_6; 
--# expr-start 1752 '<Predicate on Decl.could_infer at nodes.lkt:3000:13>' Pred_2 nodes.lkt:3000
--# expr-start 1749 '<FieldAccess for actual_type_var at nodes.lkt:3001:17>' Fld_11 nodes.lkt:3001







   if Name.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_11 := Name.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 1749
Fld_11.Value := No_Entity;
Entity_Vars.Reset (Fld_11);
--# expr-start 1751 '<Cast to FunctionType at nodes.lkt:3002:17>' Cast_Result_7 nodes.lkt:3002





--# expr-start 1750 '<FieldAccess for get_generic_type at nodes.lkt:3002:17>' Fld_12 nodes.lkt:3002







   if Name.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start Expr.get_generic_type
Fld_12 := Liblktlang.Implementation.Expr_P_Get_Generic_Type (Node => Name.Node, E_Info => Name.Info);
--# end
--# expr-done 1750



   if Fld_12.Node = null
      or else Fld_12.Node.Kind in Lkt_Function_Type_Range
   then
      
      Cast_Result_7 := Create_Internal_Entity_Function_Type
        (Node => Fld_12.Node,
         Info => Fld_12.Info);

   else
         Cast_Result_7 := No_Entity_Function_Type;
   end if;


--# expr-done 1751

Pred_2 := Solver.Create_Predicate (Fld_11, Create_Decl_P_Could_Infer_0_Predicate (Cast_Result_7, Bound_Error_Location_2)); 
--# expr-done 1752
Dyn_Var_Bind_Result_2 := Pred_2; Inc_Ref (Dyn_Var_Bind_Result_2);
--# expr-done 1753
And_Pred_3 := Create_And (And_Pred_2, Dyn_Var_Bind_Result_2, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:2964:9") else null)); 
--# expr-done 1754

         Property_Result := And_Pred_3;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_245;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_245;




            raise;
      end;



   return Property_Result;
end Expr_P_Xref_Call_Equation;
--# end

   







--# property-start '[dispatcher]Expr.xlogic_equation' dispatcher
pragma Warnings (Off, "is not referenced");
 function Dispatcher_Expr_P_Xlogic_Equation
  
  (Node : Bare_Expr
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Logic_Equation
is
   Self : Bare_Expr  := Bare_Expr (Node);
      --# bind self Self

   


   Property_Result : Logic_Equation;



begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      if Self = null then
         Raise_Property_Exception
           (Self, Property_Error'Identity, "dispatching on null node");
      end if;

      case Lkt_Expr (Self.Kind) is
               when Lkt_Any_Of .. Lkt_Array_Literal | Lkt_Bin_Op .. Lkt_Module_Ref_Id | Lkt_If_Expr .. Lkt_Un_Op =>
                  --# property-call-start Expr.xlogic_equation
                  Property_Result := Expr_P_Xlogic_Equation
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Call_Expr .. Lkt_Logic_Propagate_Call =>
                  --# property-call-start BaseCallExpr.xlogic_equation
                  Property_Result := Base_Call_Expr_P_Xlogic_Equation
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Dot_Expr .. Lkt_Null_Cond_Dotted_Name =>
                  --# property-call-start BaseDotExpr.xlogic_equation
                  Property_Result := Base_Dot_Expr_P_Xlogic_Equation
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Ref_Id =>
                  --# property-call-start RefId.xlogic_equation
                  Property_Result := Ref_Id_P_Xlogic_Equation
                    (Self
                        , E_Info
                    );
                  --# end
      end case;




   return Property_Result;
end Dispatcher_Expr_P_Xlogic_Equation;
--# end

   







--# property-start '[dispatcher]Expr.xtype_equation' dispatcher
pragma Warnings (Off, "is not referenced");
 function Dispatcher_Expr_P_Xtype_Equation
  
  (Node : Bare_Expr
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Logic_Equation
is
   Self : Bare_Expr  := Bare_Expr (Node);
      --# bind self Self

   


   Property_Result : Logic_Equation;



begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      if Self = null then
         Raise_Property_Exception
           (Self, Property_Error'Identity, "dispatching on null node");
      end if;

      case Lkt_Expr (Self.Kind) is
               when Lkt_Any_Of .. Lkt_Logic_Propagate_Call | Lkt_Bin_Op .. Lkt_Module_Ref_Id | Lkt_If_Expr .. Lkt_Un_Op =>
                  --# property-call-start Expr.xtype_equation
                  Property_Result := Expr_P_Xtype_Equation
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Dot_Expr .. Lkt_Null_Cond_Dotted_Name =>
                  --# property-call-start BaseDotExpr.xtype_equation
                  Property_Result := Base_Dot_Expr_P_Xtype_Equation
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Ref_Id =>
                  --# property-call-start RefId.xtype_equation
                  Property_Result := Ref_Id_P_Xtype_Equation
                    (Self
                        , E_Info
                    );
                  --# end
      end case;




   return Property_Result;
end Dispatcher_Expr_P_Xtype_Equation;
--# end

   







--# property-start '[dispatcher]Expr.referenced_decl' dispatcher
pragma Warnings (Off, "is not referenced");
 function Dispatcher_Expr_P_Referenced_Decl
  
  (Node : Bare_Expr
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Internal_Entity_Decl
is
   Self : Bare_Expr  := Bare_Expr (Node);
      --# bind self Self

   


   Property_Result : Internal_Entity_Decl;



begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

            Populate_Lexical_Env_For_Unit (Self);
      end if;


      if Self = null then
         Raise_Property_Exception
           (Self, Property_Error'Identity, "dispatching on null node");
      end if;

      case Lkt_Expr (Self.Kind) is
               when Lkt_Any_Of .. Lkt_Logic_Propagate_Call | Lkt_Bin_Op .. Lkt_Module_Ref_Id | Lkt_If_Expr .. Lkt_Un_Op =>
                  --# property-call-start Expr.referenced_decl
                  Property_Result := Expr_P_Referenced_Decl
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Dot_Expr .. Lkt_Null_Cond_Dotted_Name =>
                  --# property-call-start BaseDotExpr.referenced_decl
                  Property_Result := Base_Dot_Expr_P_Referenced_Decl
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Ref_Id =>
                  --# property-call-start RefId.referenced_decl
                  Property_Result := Ref_Id_P_Referenced_Decl
                    (Self
                        , E_Info
                    );
                  --# end
      end case;




   return Property_Result;
end Dispatcher_Expr_P_Referenced_Decl;
--# end

   







--# property-start '[dispatcher]Expr.has_context_free_type' dispatcher
pragma Warnings (Off, "is not referenced");
 function Dispatcher_Expr_P_Has_Context_Free_Type
  
  (Node : Bare_Expr
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Boolean
is
   Self : Bare_Expr  := Bare_Expr (Node);
      --# bind self Self

   


   Property_Result : Boolean;



begin
   --# property-body-start

   pragma Assert (Self = Node);





      if Self = null then
         Raise_Property_Exception
           (Self, Property_Error'Identity, "dispatching on null node");
      end if;

      case Lkt_Expr (Self.Kind) is
               when Lkt_Call_Expr .. Lkt_Logic_Propagate_Call | Lkt_Cast_Expr | Lkt_Generic_Instantiation .. Lkt_Ref_Id | Lkt_Keep_Expr | Lkt_Big_Num_Lit .. Lkt_Char_Lit | Lkt_Num_Lit .. Lkt_Logic_Unify | Lkt_Not_Expr | Lkt_Un_Op =>
                  --# property-call-start Expr.has_context_free_type
                  Property_Result := Expr_P_Has_Context_Free_Type
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Any_Of =>
                  --# property-call-start AnyOf.has_context_free_type
                  Property_Result := Any_Of_P_Has_Context_Free_Type
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Array_Literal =>
                  --# property-call-start ArrayLiteral.has_context_free_type
                  Property_Result := Array_Literal_P_Has_Context_Free_Type
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Dot_Expr .. Lkt_Null_Cond_Dotted_Name =>
                  --# property-call-start BaseDotExpr.has_context_free_type
                  Property_Result := Base_Dot_Expr_P_Has_Context_Free_Type
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Bin_Op =>
                  --# property-call-start BinOp.has_context_free_type
                  Property_Result := Bin_Op_P_Has_Context_Free_Type
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Block_Expr =>
                  --# property-call-start BlockExpr.has_context_free_type
                  Property_Result := Block_Expr_P_Has_Context_Free_Type
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Error_On_Null =>
                  --# property-call-start ErrorOnNull.has_context_free_type
                  Property_Result := Error_On_Null_P_Has_Context_Free_Type
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_If_Expr =>
                  --# property-call-start IfExpr.has_context_free_type
                  Property_Result := If_Expr_P_Has_Context_Free_Type
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Isa =>
                  --# property-call-start Isa.has_context_free_type
                  Property_Result := Isa_P_Has_Context_Free_Type
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Lambda_Expr =>
                  --# property-call-start LambdaExpr.has_context_free_type
                  Property_Result := Lambda_Expr_P_Has_Context_Free_Type
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Null_Lit =>
                  --# property-call-start NullLit.has_context_free_type
                  Property_Result := Null_Lit_P_Has_Context_Free_Type
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Match_Expr =>
                  --# property-call-start MatchExpr.has_context_free_type
                  Property_Result := Match_Expr_P_Has_Context_Free_Type
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Paren_Expr =>
                  --# property-call-start ParenExpr.has_context_free_type
                  Property_Result := Paren_Expr_P_Has_Context_Free_Type
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Raise_Expr =>
                  --# property-call-start RaiseExpr.has_context_free_type
                  Property_Result := Raise_Expr_P_Has_Context_Free_Type
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Subscript_Expr .. Lkt_Null_Cond_Subscript_Expr =>
                  --# property-call-start SubscriptExpr.has_context_free_type
                  Property_Result := Subscript_Expr_P_Has_Context_Free_Type
                    (Self
                        , E_Info
                    );
                  --# end
               when Lkt_Try_Expr =>
                  --# property-call-start TryExpr.has_context_free_type
                  Property_Result := Try_Expr_P_Has_Context_Free_Type
                    (Self
                        , E_Info
                    );
                  --# end
      end case;




   return Property_Result;
end Dispatcher_Expr_P_Has_Context_Free_Type;
--# end

   







--# property-start Expr.xlogic_equation nodes.lkt:3008
pragma Warnings (Off, "is not referenced");
 function Expr_P_Xlogic_Equation
  
  (Node : Bare_Expr
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Logic_Equation
is
   Self : Bare_Expr  := Bare_Expr (Node);
      --# bind self Self

   


   Property_Result : Logic_Equation;

      

      



begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         

         Property_Result := raise Property_Error with "Property Expr.xlogic_equation not implemented";
            Inc_Ref (Property_Result);
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Expr_P_Xlogic_Equation;
--# end

   







--# property-start Expr.xtype_equation nodes.lkt:3015
pragma Warnings (Off, "is not referenced");
 function Expr_P_Xtype_Equation
  
  (Node : Bare_Expr
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Logic_Equation
is
   Self : Bare_Expr  := Bare_Expr (Node);
      --# bind self Self

   


   Property_Result : Logic_Equation;

      

      



begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         

         Property_Result := raise Property_Error with "Property Expr.xtype_equation not implemented";
            Inc_Ref (Property_Result);
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Expr_P_Xtype_Equation;
--# end

   







--# property-start Expr.referenced_decl nodes.lkt:3029
pragma Warnings (Off, "is not referenced");
 function Expr_P_Referenced_Decl
  
  (Node : Bare_Expr
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Internal_Entity_Decl
is
   Self : Bare_Expr  := Bare_Expr (Node);
      --# bind self Self

   


   Property_Result : Internal_Entity_Decl;

      

      


      
      Mmz_Handle : Memoization_Handle;
      Mmz_Val    : Mmz_Value;

      Mmz_Stored : Boolean;
      --  Whether the memoization couple was actually stored. Used to determine
      --  whether to inc-ref the memoized value.

      function Create_Mmz_Key return Mmz_Key;
      --  Create a memoization key for this property call and return it

      --------------------
      -- Create_Mmz_Key --
      --------------------

      function Create_Mmz_Key return Mmz_Key is
      begin
         return Mmz_K : Mmz_Key :=
           (Property => Mmz_Bare_Expr_Expr_P_Referenced_Decl,
            Items    => new Mmz_Key_Array (1 ..  2))
         do
            Mmz_K.Items (1) := (Kind => Mmz_Bare_Expr,
                                As_Bare_Expr => Self);
               Mmz_K.Items (2) :=
                 (Kind => Mmz_Internal_Entity_Info,
                  As_Internal_Entity_Info => E_Info);
         end return;
      end Create_Mmz_Key;

begin
   --# property-body-start

   pragma Assert (Self = Node);




      if Self /= null then

         if not Self.Unit.Context.In_Populate_Lexical_Env then

            if Find_Memoized_Value
              (Self.Unit, Mmz_Handle, Mmz_Val, Create_Mmz_Key'Access)
            then
               --# memoization-lookup

               if Mmz_Val.Kind = Mmz_Evaluating then
                  --# memoization-return
                  Raise_Property_Exception
                    (Self,
                     Property_Error'Identity,
                     "Infinite recursion detected");

               elsif Mmz_Val.Kind = Mmz_Error then
                  --# memoization-return
                  Reraise_Memoized_Error (Mmz_Val);

               else
                  Property_Result := Mmz_Val.As_Internal_Entity_Decl;

                  --# memoization-return
                  return Property_Result;
               end if;
               --# end
            end if;

         end if;
      end if;

      begin
         
   --# scope-start

         

         Property_Result := No_Entity_Decl;
         
   --# end


      exception
         when Exc : Property_Error =>


               if Self /= null then
                     if not Self.Unit.Context.In_Populate_Lexical_Env then
                        Add_Memoized_Error
                          (Self.Unit, Mmz_Handle, Exc, Mmz_Stored);
                     end if;
               end if;


            raise;
      end;

      if Self /= null then
         if not Self.Unit.Context.In_Populate_Lexical_Env then

            Mmz_Val := (Kind => Mmz_Internal_Entity_Decl,
                        As_Internal_Entity_Decl => Property_Result);
            Add_Memoized_Value (Self.Unit, Mmz_Handle, Mmz_Val, Mmz_Stored);

         end if;
      end if;



   return Property_Result;
end Expr_P_Referenced_Decl;
--# end

   







--# property-start Expr.has_context_free_type nodes.lkt:3033
pragma Warnings (Off, "is not referenced");
 function Expr_P_Has_Context_Free_Type
  
  (Node : Bare_Expr
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Boolean
is
   Self : Bare_Expr  := Bare_Expr (Node);
      --# bind self Self

   


   Property_Result : Boolean;

      

      



begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         

         Property_Result := True;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Expr_P_Has_Context_Free_Type;
--# end



   


      

   --
   --  Primitives for Bare_Any_Of
   --

   



      
      procedure Initialize_Fields_For_Any_Of
        (Self : Bare_Any_Of
         ; Any_Of_F_Expr : Bare_Expr
         ; Any_Of_F_Values : Bare_Any_Of_List
        ) is
      begin
            Initialize_Fields_For_Expr
              (Self);

            Self.Any_Of_F_Expr := Any_Of_F_Expr;
            Self.Any_Of_F_Values := Any_Of_F_Values;
         

      end Initialize_Fields_For_Any_Of;

      
   function Any_Of_F_Expr
     (Node : Bare_Any_Of) return Bare_Expr
   is
      

   begin
         
         return Node.Any_Of_F_Expr;
      
   end;

      
   function Any_Of_F_Values
     (Node : Bare_Any_Of) return Bare_Any_Of_List
   is
      

   begin
         
         return Node.Any_Of_F_Values;
      
   end;


   







--# property-start AnyOf.xref_equation nodes.lkt:3043
pragma Warnings (Off, "is not referenced");
 function Any_Of_P_Xref_Equation
  
  (Node : Bare_Any_Of
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Logic_Equation
is
   Self : Bare_Any_Of  := Bare_Any_Of (Node);
     Ent : Internal_Entity_Any_Of :=
       Internal_Entity_Any_Of'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Logic_Equation;

      
            procedure Finalizer_Scope_250 with Inline_Always;
            procedure Finalizer_Scope_682 with Inline_Always;

      Fld : Internal_Entity_Expr;
Fld_1 : Logic_Equation;
Fld_2 : Logic_Var;
Fld_3 : Internal_Entity_Named_Type_Decl;
Cast_Result : Internal_Entity;
Bind_Result : Logic_Equation;
And_Pred : Logic_Equation;
Fld_4 : Internal_Entity_Expr;
Fld_5 : Logic_Var;
Fld_6 : Internal_Entity_Expr;
Array_Lit : Internal_Entity_Expr_Array_Access;
Fld_7 : Internal_Entity_Any_Of_List;
Fld_8 : Bare_Any_Of_List;
Fld_9 : Internal_Entity_Info;
Item_4 : Internal_Entity_Expr;
Bare_Item_4 : Bare_Expr;
As_Entity : Internal_Entity_Expr;
Is_Null : Boolean;
If_Result : Internal_Entity_Expr;
Map_Result : Internal_Entity_Expr_Array_Access;
Concat_Result : Internal_Entity_Expr_Array_Access;
Fld_10 : Logic_Var;
Fld_11 : Boolean;
Map_Result_1 : Logic_Var_Array_Access;
Logic_Vars : Logic_Var_Array_Access;
Bind_Result_1 : Logic_Equation;
And_Pred_1 : Logic_Equation;
Fld_12 : Internal_Entity_Any_Of_List;
Fld_13 : Bare_Any_Of_List;
Fld_14 : Internal_Entity_Info;
Item_1 : Internal_Entity_Expr;
Bare_Item_1 : Bare_Expr;
Fld_15 : Logic_Equation;
Fld_16 : Logic_Var;
Fld_17 : Internal_Entity_Expr;
Fld_18 : Logic_Var;
Bind_Result_2 : Logic_Equation;
And_Pred_2 : Logic_Equation;
Fld_19 : Bare_Expr;
Cast_Result_1 : Bare_Lkt_Node;
Bound_Error_Location : Bare_Lkt_Node;
Fld_20 : Logic_Var;
Fld_21 : Logic_Var;
Pred : Logic_Equation;
Dyn_Var_Bind_Result : Logic_Equation;
And_Pred_3 : Logic_Equation;
As_Entity_1 : Internal_Entity_Expr;
Is_Null_1 : Boolean;
If_Result_1 : Internal_Entity_Expr;
Map_Result_2 : Logic_Equation_Array_Access;
Logic_Boolean_Op : Logic_Equation;
And_Pred_4 : Logic_Equation;

            procedure Finalizer_Scope_250 is
            begin
                     Dec_Ref (Fld_1);
                     Dec_Ref (Bind_Result);
                     Dec_Ref (And_Pred);
                     Dec_Ref (Array_Lit);
                     Dec_Ref (Map_Result);
                     Dec_Ref (Concat_Result);
                     Dec_Ref (Map_Result_1);
                     Dec_Ref (Logic_Vars);
                     Dec_Ref (Bind_Result_1);
                     Dec_Ref (And_Pred_1);
                     Dec_Ref (Map_Result_2);
                     Dec_Ref (Logic_Boolean_Op);
                     Dec_Ref (And_Pred_4);
            end Finalizer_Scope_250;
            procedure Finalizer_Scope_682 is
            begin
                     Dec_Ref (Fld_15);
                     Dec_Ref (Bind_Result_2);
                     Dec_Ref (And_Pred_2);
                     Dec_Ref (Pred);
                     Dec_Ref (Dyn_Var_Bind_Result);
                     Dec_Ref (And_Pred_3);
            end Finalizer_Scope_682;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 1787 '<LogicBinaryOp And at nodes.lkt:3044:9>' And_Pred_4 nodes.lkt:3044
--# expr-start 1771 '<LogicBinaryOp And at nodes.lkt:3045:13>' And_Pred_1 nodes.lkt:3045
--# expr-start 1760 '<LogicBinaryOp And at nodes.lkt:3046:17>' And_Pred nodes.lkt:3046
--# expr-start 1756 '<FieldAccess for xref_equation at nodes.lkt:3046:17>' Fld_1 nodes.lkt:3046



--# expr-start 1755 '<FieldAccess for expr at nodes.lkt:3046:17>' Fld nodes.lkt:3046







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Create_Internal_Entity_Expr (Node => Ent.Node.Any_Of_F_Expr, Info => Ent.Info);
--# expr-done 1755



   if Fld.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]LktNode.xref_equation'
Fld_1 := Liblktlang.Implementation.Dispatcher_Lkt_Node_P_Xref_Equation (Node => Fld.Node, E_Info => Fld.Info);
--# end
--# expr-done 1756
--# expr-start 1759 '<Bind at nodes.lkt:3047:22>' Bind_Result nodes.lkt:3047
--# expr-start 1757 '<FieldAccess for actual_type_var at nodes.lkt:3047:22>' Fld_2 nodes.lkt:3047







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_2 := Ent.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 1757
Fld_2.Value := No_Entity;
Entity_Vars.Reset (Fld_2);





--# expr-start 1758 '<FieldAccess for bool_type at nodes.lkt:3047:46>' Fld_3 nodes.lkt:3047







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start LktNode.bool_type
Fld_3 := Liblktlang.Implementation.Lkt_Node_P_Bool_Type (Node => Ent.Node);
--# end
--# expr-done 1758



   
      Cast_Result := Create_Internal_Entity
        (Node => Fld_3.Node,
         Info => Fld_3.Info);


Bind_Result := Solver.Create_Assign (Fld_2, Cast_Result, Solver_Ifc.No_Converter, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3047:22") else null)); 
--# expr-done 1759
And_Pred := Create_And (Fld_1, Bind_Result, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3046:17") else null)); 
--# expr-done 1760
--# expr-start 1767 '<Map at nodes.lkt:3051:17>' Map_Result_1 nodes.lkt:3051








   

   --# expr-start 1762 '<ArrayLiteral at nodes.lkt:3051:18>' Array_Lit nodes.lkt:3051
--# expr-start 1761 '<FieldAccess for expr at nodes.lkt:3051:19>' Fld_6 nodes.lkt:3051







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_6 := Create_Internal_Entity_Expr (Node => Ent.Node.Any_Of_F_Expr, Info => Ent.Info);
--# expr-done 1761
Array_Lit := Create_Internal_Entity_Expr_Array (Internal_Internal_Entity_Expr_Array'(1 => Fld_6)); 
--# expr-done 1762
--# expr-start 1764 '<TakeWhile at ???>' Map_Result None








   

   --# expr-start 1763 '<FieldAccess for values at nodes.lkt:3051:32>' Fld_7 nodes.lkt:3051







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_7 := Create_Internal_Entity_Any_Of_List (Node => Ent.Node.Any_Of_F_Values, Info => Ent.Info);
--# expr-done 1763









Fld_8 := Fld_7.Node;

   
      declare
         Map_Result_Vec : Internal_Entity_Expr_Vectors.Vector;
      begin
   

   

      if Fld_8 = null then
         
      Map_Result := Create_Internal_Entity_Expr_Array (0);
   
      else
         

      declare
         
         Collection : constant Bare_Any_Of_List := Fld_8;
      begin
         for Untyped_Item_4 of
               Collection.Nodes (1 .. Children_Count (Collection))
         loop
                  
                  Bare_Item_4 := Untyped_Item_4; 
                  



Is_Null := Bare_Item_4 = null; 
if Is_Null then
   
   If_Result := No_Entity_Expr;
else
   








Fld_9 := Fld_7.Info;

As_Entity := (Info => Fld_9, Node => Bare_Item_4); 
   If_Result := As_Entity;
end if;



                  Item_4 := If_Result; 

            
   --# scope-start



            
         
         
      
      

         declare
            Item_To_Append : constant Internal_Entity_Expr := Item_4;
         begin
            Internal_Entity_Expr_Vectors.Append (Map_Result_Vec, Item_To_Append);
         end;
   
   
   

            
   --# end



         end loop;
      end;
   
      end if;

   

         Map_Result := Create_Internal_Entity_Expr_Array
           (Items_Count => Natural (Internal_Entity_Expr_Vectors.Length (Map_Result_Vec)));
         for I in Map_Result.Items'Range loop
            Map_Result.Items (I) := Internal_Entity_Expr_Vectors.Get
              (Map_Result_Vec,
               I + Internal_Entity_Expr_Vectors.Index_Type'First - Map_Result.Items'First);
         end loop;
         Internal_Entity_Expr_Vectors.Destroy (Map_Result_Vec);

      end;
   



--# expr-done 1764
Concat_Result := Concat (Array_Lit, Map_Result); 

   
      declare
         Map_Result_1_Vec : Logic_Var_Vectors.Vector;
      begin
   

   

      

      declare
         
         Collection : constant Internal_Entity_Expr_Array_Access := Concat_Result;
      begin
         for Item_0 of
               Collection.Items
         loop

            
   --# scope-start


               --# bind e Item_0

            
         --# expr-start 1765 '<FieldAccess for has_context_free_type at nodes.lkt:3053:28>' Fld_11 nodes.lkt:3053







   if Item_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]Expr.has_context_free_type'
Fld_11 := Liblktlang.Implementation.Dispatcher_Expr_P_Has_Context_Free_Type (Node => Item_0.Node, E_Info => Item_0.Info);
--# end
--# expr-done 1765
         if Fld_11 then
            
         
      --# expr-start 1766 '<FieldAccess for actual_type_var at nodes.lkt:3052:28>' Fld_10 nodes.lkt:3052







   if Item_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_10 := Item_0.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 1766
      

         declare
            Item_To_Append : constant Logic_Var := Fld_10;
         begin
            Logic_Var_Vectors.Append (Map_Result_1_Vec, Item_To_Append);
         end;
   
   
         end if;
   

            
   --# end



         end loop;
      end;
   

   

         Map_Result_1 := Create_Logic_Var_Array
           (Items_Count => Natural (Logic_Var_Vectors.Length (Map_Result_1_Vec)));
         for I in Map_Result_1.Items'Range loop
            Map_Result_1.Items (I) := Logic_Var_Vectors.Get
              (Map_Result_1_Vec,
               I + Logic_Var_Vectors.Index_Type'First - Map_Result_1.Items'First);
         end loop;
         Logic_Var_Vectors.Destroy (Map_Result_1_Vec);

      end;
   



--# expr-done 1767
for Var of Map_Result_1.Items loop
   Var.Value := No_Entity;
   Entity_Vars.Reset (Var);
end loop;
Logic_Vars := Map_Result_1; Inc_Ref (Logic_Vars);
--# expr-start 1770 '<NPropagate at nodes.lkt:3049:18>' Bind_Result_1 nodes.lkt:3049
--# expr-start 1769 '<FieldAccess for expected_type_var at nodes.lkt:3049:18>' Fld_5 nodes.lkt:3049



--# expr-start 1768 '<FieldAccess for expr at nodes.lkt:3049:18>' Fld_4 nodes.lkt:3049







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_4 := Create_Internal_Entity_Expr (Node => Ent.Node.Any_Of_F_Expr, Info => Ent.Info);
--# expr-done 1768



   if Fld_4.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_5 := Fld_4.Node.Expr_Expected_Type_Var'Unrestricted_Access;
--# expr-done 1769
Fld_5.Value := No_Entity;
Entity_Vars.Reset (Fld_5);


Bind_Result_1 := Solver.Create_N_Propagate (Fld_5, Create_Type_Decl_P_Imprecise_Common_Ancestor_List_0_Functor (Logic_Vars.N), Entity_Vars.Logic_Var_Array (Logic_Vars.Items), Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3049:18") else null)); 
--# expr-done 1770
And_Pred_1 := Create_And (And_Pred, Bind_Result_1, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3045:13") else null)); 
--# expr-done 1771
--# expr-start 1786 '<LogicAll at nodes.lkt:3057:14>' Logic_Boolean_Op nodes.lkt:3057
--# expr-start 1785 '<Map at nodes.lkt:3057:14>' Map_Result_2 nodes.lkt:3057








   

   --# expr-start 1772 '<FieldAccess for values at nodes.lkt:3057:14>' Fld_12 nodes.lkt:3057







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_12 := Create_Internal_Entity_Any_Of_List (Node => Ent.Node.Any_Of_F_Values, Info => Ent.Info);
--# expr-done 1772









Fld_13 := Fld_12.Node;

   
      declare
         Map_Result_2_Vec : Logic_Equation_Vectors.Vector;
      begin
   

   

      if Fld_13 = null then
         
      Map_Result_2 := Create_Logic_Equation_Array (0);
   
      else
         

      declare
         
         Collection : constant Bare_Any_Of_List := Fld_13;
      begin
         for Untyped_Item_1 of
               Collection.Nodes (1 .. Children_Count (Collection))
         loop
                  
                  Bare_Item_1 := Untyped_Item_1; 
                  



Is_Null_1 := Bare_Item_1 = null; 
if Is_Null_1 then
   
   If_Result_1 := No_Entity_Expr;
else
   








Fld_14 := Fld_12.Info;

As_Entity_1 := (Info => Fld_14, Node => Bare_Item_1); 
   If_Result_1 := As_Entity_1;
end if;



                  Item_1 := If_Result_1; 

            
   --# scope-start


               --# bind v Item_1

            
         
         
      --# expr-start 1784 '<LogicBinaryOp And at nodes.lkt:3059:13>' And_Pred_3 nodes.lkt:3059
--# expr-start 1778 '<LogicBinaryOp And at nodes.lkt:3060:17>' And_Pred_2 nodes.lkt:3060
--# expr-start 1773 '<FieldAccess for xref_equation at nodes.lkt:3060:17>' Fld_15 nodes.lkt:3060







   if Item_1.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]LktNode.xref_equation'
Fld_15 := Liblktlang.Implementation.Dispatcher_Lkt_Node_P_Xref_Equation (Node => Item_1.Node, E_Info => Item_1.Info);
--# end
--# expr-done 1773
--# expr-start 1777 '<Bind at nodes.lkt:3061:22>' Bind_Result_2 nodes.lkt:3061
--# expr-start 1774 '<FieldAccess for expected_type_var at nodes.lkt:3061:22>' Fld_16 nodes.lkt:3061







   if Item_1.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_16 := Item_1.Node.Expr_Expected_Type_Var'Unrestricted_Access;
--# expr-done 1774
Fld_16.Value := No_Entity;
Entity_Vars.Reset (Fld_16);
--# expr-start 1776 '<FieldAccess for actual_type_var at nodes.lkt:3061:46>' Fld_18 nodes.lkt:3061



--# expr-start 1775 '<FieldAccess for expr at nodes.lkt:3061:46>' Fld_17 nodes.lkt:3061







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_17 := Create_Internal_Entity_Expr (Node => Ent.Node.Any_Of_F_Expr, Info => Ent.Info);
--# expr-done 1775



   if Fld_17.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_18 := Fld_17.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 1776
Fld_18.Value := No_Entity;
Entity_Vars.Reset (Fld_18);
Bind_Result_2 := Solver.Create_Unify (Fld_16, Fld_18, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3061:22") else null)); 
--# expr-done 1777
And_Pred_2 := Create_And (Fld_15, Bind_Result_2, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3060:17") else null)); 
--# expr-done 1778
--# expr-start 1783 '<bind at nodes.lkt:3064:17>' Dyn_Var_Bind_Result nodes.lkt:3064





--# expr-start 1779 '<FieldAccess for node at nodes.lkt:3064:39>' Fld_19 nodes.lkt:3064









Fld_19 := Item_1.Node;
--# expr-done 1779



   
      Cast_Result_1 := Fld_19;


Bound_Error_Location := Cast_Result_1; 
--# expr-start 1782 '<Predicate on TypeDecl.commutative_matching_type at nodes.lkt:3065:17>' Pred nodes.lkt:3065
--# expr-start 1780 '<FieldAccess for expected_type_var at nodes.lkt:3066:21>' Fld_20 nodes.lkt:3066







   if Item_1.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_20 := Item_1.Node.Expr_Expected_Type_Var'Unrestricted_Access;
--# expr-done 1780
Fld_20.Value := No_Entity;
Entity_Vars.Reset (Fld_20);
--# expr-start 1781 '<FieldAccess for actual_type_var at nodes.lkt:3067:21>' Fld_21 nodes.lkt:3067







   if Item_1.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_21 := Item_1.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 1781
Fld_21.Value := No_Entity;
Entity_Vars.Reset (Fld_21);


Pred := Solver.Create_N_Predicate ((Fld_20, Fld_21), Create_Type_Decl_P_Commutative_Matching_Type_0_Predicate (2, Bound_Error_Location)); 
--# expr-done 1782
Dyn_Var_Bind_Result := Pred; Inc_Ref (Dyn_Var_Bind_Result);
--# expr-done 1783
And_Pred_3 := Create_And (And_Pred_2, Dyn_Var_Bind_Result, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3059:13") else null)); 
--# expr-done 1784
      

         declare
            Item_To_Append : constant Logic_Equation := And_Pred_3;
         begin
               Inc_Ref (Item_To_Append);
            Logic_Equation_Vectors.Append (Map_Result_2_Vec, Item_To_Append);
         end;
   
   
   

            
   --# end
      Finalizer_Scope_682;



         end loop;
      end;
   
      end if;

   

         Map_Result_2 := Create_Logic_Equation_Array
           (Items_Count => Natural (Logic_Equation_Vectors.Length (Map_Result_2_Vec)));
         for I in Map_Result_2.Items'Range loop
            Map_Result_2.Items (I) := Logic_Equation_Vectors.Get
              (Map_Result_2_Vec,
               I + Logic_Equation_Vectors.Index_Type'First - Map_Result_2.Items'First);
         end loop;
         Logic_Equation_Vectors.Destroy (Map_Result_2_Vec);

      end;
   



--# expr-done 1785
Logic_Boolean_Op := Solver.Create_All (Relation_Array (Map_Result_2.Items), (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3057:14") else null)); 
--# expr-done 1786
And_Pred_4 := Create_And (And_Pred_1, Logic_Boolean_Op, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3044:9") else null)); 
--# expr-done 1787

         Property_Result := And_Pred_4;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_250;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_250;
                     Finalizer_Scope_682;




            raise;
      end;



   return Property_Result;
end Any_Of_P_Xref_Equation;
--# end

   







--# property-start AnyOf.has_context_free_type nodes.lkt:3072
pragma Warnings (Off, "is not referenced");
 function Any_Of_P_Has_Context_Free_Type
  
  (Node : Bare_Any_Of
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Boolean
is
   Self : Bare_Any_Of  := Bare_Any_Of (Node);
      --# bind self Self

   


   Property_Result : Boolean;

      

      



begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         

         Property_Result := True;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Any_Of_P_Has_Context_Free_Type;
--# end



   


      

   --
   --  Primitives for Bare_Array_Literal
   --

   



      
      procedure Initialize_Fields_For_Array_Literal
        (Self : Bare_Array_Literal
         ; Array_Literal_F_Exprs : Bare_Expr_List
         ; Array_Literal_F_Element_Type : Bare_Type_Ref
        ) is
      begin
            Initialize_Fields_For_Expr
              (Self);

            Self.Array_Literal_F_Exprs := Array_Literal_F_Exprs;
            Self.Array_Literal_F_Element_Type := Array_Literal_F_Element_Type;
         
      Self.Array_Literal_Expected_Exprs_Type_Var := Null_Var_Record;
      Self.Array_Literal_Actual_Element_Type := Null_Var_Record;

      end Initialize_Fields_For_Array_Literal;

      
   function Array_Literal_F_Exprs
     (Node : Bare_Array_Literal) return Bare_Expr_List
   is
      

   begin
         
         return Node.Array_Literal_F_Exprs;
      
   end;

      
   function Array_Literal_F_Element_Type
     (Node : Bare_Array_Literal) return Bare_Type_Ref
   is
      

   begin
         
         return Node.Array_Literal_F_Element_Type;
      
   end;


   







--# property-start ArrayLiteral.has_context_free_type nodes.lkt:3085
pragma Warnings (Off, "is not referenced");
 function Array_Literal_P_Has_Context_Free_Type
  
  (Node : Bare_Array_Literal
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Boolean
is
   Self : Bare_Array_Literal  := Bare_Array_Literal (Node);
     Ent : Internal_Entity_Array_Literal :=
       Internal_Entity_Array_Literal'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Boolean;

      

      Fld : Internal_Entity_Expr_List;
Fld_1 : Bare_Expr_List;
Fld_2 : Internal_Entity_Info;
Item_0 : Internal_Entity_Expr;
Bare_Item_0 : Bare_Expr;
Fld_3 : Boolean;
As_Entity : Internal_Entity_Expr;
Is_Null : Boolean;
If_Result : Internal_Entity_Expr;
Quantifier_Result : Boolean;



begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         --# expr-start 1790 '<AnyQuantifier at nodes.lkt:3086:9>' Quantifier_Result nodes.lkt:3086








   

   --# expr-start 1788 '<FieldAccess for exprs at nodes.lkt:3086:9>' Fld nodes.lkt:3086







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Create_Internal_Entity_Expr_List (Node => Ent.Node.Array_Literal_F_Exprs, Info => Ent.Info);
--# expr-done 1788









Fld_1 := Fld.Node;

   
      Quantifier_Result := False;
   

   

      if Fld_1 = null then
         
      null;
   
      else
         

      declare
         
         Collection : constant Bare_Expr_List := Fld_1;
      begin
         for Untyped_Item_0 of
               Collection.Nodes (1 .. Children_Count (Collection))
         loop
                  
                  Bare_Item_0 := Untyped_Item_0; 
                  



Is_Null := Bare_Item_0 = null; 
if Is_Null then
   
   If_Result := No_Entity_Expr;
else
   








Fld_2 := Fld.Info;

As_Entity := (Info => Fld_2, Node => Bare_Item_0); 
   If_Result := As_Entity;
end if;



                  Item_0 := If_Result; 

            
   --# scope-start


               --# bind e Item_0

            
      --# expr-start 1789 '<FieldAccess for has_context_free_type at nodes.lkt:3086:31>' Fld_3 nodes.lkt:3086







   if Item_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]Expr.has_context_free_type'
Fld_3 := Liblktlang.Implementation.Dispatcher_Expr_P_Has_Context_Free_Type (Node => Item_0.Node, E_Info => Item_0.Info);
--# end
--# expr-done 1789
      Quantifier_Result := Fld_3;
   

            
   --# end


               exit when Quantifier_Result;

         end loop;
      end;
   
      end if;

   
   



--# expr-done 1790

         Property_Result := Quantifier_Result;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Array_Literal_P_Has_Context_Free_Type;
--# end

   







--# property-start ArrayLiteral.expected_exprs_type_equation nodes.lkt:3088
pragma Warnings (Off, "is not referenced");
 function Array_Literal_P_Expected_Exprs_Type_Equation
  
  (Node : Bare_Array_Literal
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Logic_Equation
is
   Self : Bare_Array_Literal  := Bare_Array_Literal (Node);
     Ent : Internal_Entity_Array_Literal :=
       Internal_Entity_Array_Literal'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Logic_Equation;

      
            procedure Finalizer_Scope_253 with Inline_Always;

      Local_Logic_Vars : Logic_Var_Array_Access;
Fld : Internal_Entity_Expr_List;
Fld_1 : Bare_Expr_List;
Fld_2 : Internal_Entity_Info;
Item_0 : Internal_Entity_Expr;
Bare_Item_0 : Bare_Expr;
As_Entity : Internal_Entity_Expr;
Is_Null : Boolean;
If_Result : Internal_Entity_Expr;
Fld_3 : Boolean;
Map_Result : Internal_Entity_Expr_Array_Access;
Fld_4 : Logic_Var;
Map_Result_1 : Logic_Var_Array_Access;
Fld_5 : Logic_Var;
Logic_Vars : Logic_Var_Array_Access;
Bind_Result : Logic_Equation;
Fld_6 : Logic_Var;
Fld_7 : Internal_Entity_Type_Decl;
Fld_8 : Internal_Entity_Type_Decl;
Cast_Result : Internal_Entity;
Bind_Result_1 : Logic_Equation;
Fld_9 : Logic_Var;
Fld_10 : Logic_Var;
Bind_Result_2 : Logic_Equation;
Fld_11 : Boolean;
If_Result_1 : Logic_Equation;
Len : Integer;
Is_Equal : Boolean;
Not_Val : Boolean;
If_Result_2 : Logic_Equation;
Let_Result : Logic_Equation;

            procedure Finalizer_Scope_253 is
            begin
                     Dec_Ref (Map_Result);
                     Dec_Ref (Map_Result_1);
                     Dec_Ref (Local_Logic_Vars);
                     Dec_Ref (Logic_Vars);
                     Dec_Ref (Bind_Result);
                     Dec_Ref (Bind_Result_1);
                     Dec_Ref (Bind_Result_2);
                     Dec_Ref (If_Result_1);
                     Dec_Ref (If_Result_2);
                     Dec_Ref (Let_Result);
            end Finalizer_Scope_253;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 1811 '<Let at nodes.lkt:3089:9>' Let_Result nodes.lkt:3089
--# scope-start
--# expr-start 1795 '<Map at nodes.lkt:3090:13>' Map_Result_1 nodes.lkt:3090








   

   --# expr-start 1793 '<Map at nodes.lkt:3090:13>' Map_Result nodes.lkt:3090








   

   --# expr-start 1791 '<FieldAccess for exprs at nodes.lkt:3090:13>' Fld nodes.lkt:3090







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Create_Internal_Entity_Expr_List (Node => Ent.Node.Array_Literal_F_Exprs, Info => Ent.Info);
--# expr-done 1791









Fld_1 := Fld.Node;

   
      declare
         Map_Result_Vec : Internal_Entity_Expr_Vectors.Vector;
      begin
   

   

      if Fld_1 = null then
         
      Map_Result := Create_Internal_Entity_Expr_Array (0);
   
      else
         

      declare
         
         Collection : constant Bare_Expr_List := Fld_1;
      begin
         for Untyped_Item_0 of
               Collection.Nodes (1 .. Children_Count (Collection))
         loop
                  
                  Bare_Item_0 := Untyped_Item_0; 
                  



Is_Null := Bare_Item_0 = null; 
if Is_Null then
   
   If_Result := No_Entity_Expr;
else
   








Fld_2 := Fld.Info;

As_Entity := (Info => Fld_2, Node => Bare_Item_0); 
   If_Result := As_Entity;
end if;



                  Item_0 := If_Result; 

            
   --# scope-start


               --# bind expr Item_0

            
         --# expr-start 1792 '<FieldAccess for has_context_free_type at nodes.lkt:3090:41>' Fld_3 nodes.lkt:3090







   if Item_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]Expr.has_context_free_type'
Fld_3 := Liblktlang.Implementation.Dispatcher_Expr_P_Has_Context_Free_Type (Node => Item_0.Node, E_Info => Item_0.Info);
--# end
--# expr-done 1792
         if Fld_3 then
            
         
      
      

         declare
            Item_To_Append : constant Internal_Entity_Expr := Item_0;
         begin
            Internal_Entity_Expr_Vectors.Append (Map_Result_Vec, Item_To_Append);
         end;
   
   
         end if;
   

            
   --# end



         end loop;
      end;
   
      end if;

   

         Map_Result := Create_Internal_Entity_Expr_Array
           (Items_Count => Natural (Internal_Entity_Expr_Vectors.Length (Map_Result_Vec)));
         for I in Map_Result.Items'Range loop
            Map_Result.Items (I) := Internal_Entity_Expr_Vectors.Get
              (Map_Result_Vec,
               I + Internal_Entity_Expr_Vectors.Index_Type'First - Map_Result.Items'First);
         end loop;
         Internal_Entity_Expr_Vectors.Destroy (Map_Result_Vec);

      end;
   



--# expr-done 1793

   
      declare
         Map_Result_1_Vec : Logic_Var_Vectors.Vector;
      begin
   

   

      

      declare
         
         Collection : constant Internal_Entity_Expr_Array_Access := Map_Result;
      begin
         for Item_1 of
               Collection.Items
         loop

            
   --# scope-start


               --# bind expr Item_1

            
         
         
      --# expr-start 1794 '<FieldAccess for actual_type_var at nodes.lkt:3091:27>' Fld_4 nodes.lkt:3091







   if Item_1.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_4 := Item_1.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 1794
      

         declare
            Item_To_Append : constant Logic_Var := Fld_4;
         begin
            Logic_Var_Vectors.Append (Map_Result_1_Vec, Item_To_Append);
         end;
   
   
   

            
   --# end



         end loop;
      end;
   

   

         Map_Result_1 := Create_Logic_Var_Array
           (Items_Count => Natural (Logic_Var_Vectors.Length (Map_Result_1_Vec)));
         for I in Map_Result_1.Items'Range loop
            Map_Result_1.Items (I) := Logic_Var_Vectors.Get
              (Map_Result_1_Vec,
               I + Logic_Var_Vectors.Index_Type'First - Map_Result_1.Items'First);
         end loop;
         Logic_Var_Vectors.Destroy (Map_Result_1_Vec);

      end;
   



--# expr-done 1795
Local_Logic_Vars := Map_Result_1; Inc_Ref (Local_Logic_Vars);
--# bind logic_vars Local_Logic_Vars
--# expr-start 1810 '<If at nodes.lkt:3097:9>' If_Result_2 nodes.lkt:3097



--# expr-start 1798 '<Not at nodes.lkt:3097:12>' Not_Val nodes.lkt:3097
--# expr-start 1797 '<Eq at nodes.lkt:3097:12>' Is_Equal nodes.lkt:3097
--# expr-start 1796 '<length at nodes.lkt:3097:12>' Len nodes.lkt:3097

Len := Length (Local_Logic_Vars); 
--# expr-done 1796

Is_Equal := Len = 0; 
--# expr-done 1797
Not_Val := not (Is_Equal); 
--# expr-done 1798
if Not_Val then
   
for Var of Local_Logic_Vars.Items loop
   Var.Value := No_Entity;
   Entity_Vars.Reset (Var);
end loop;
Logic_Vars := Local_Logic_Vars; Inc_Ref (Logic_Vars);
--# expr-start 1800 '<NPropagate at nodes.lkt:3099:13>' Bind_Result nodes.lkt:3099
--# expr-start 1799 '<FieldAccess for expected_exprs_type_var at nodes.lkt:3099:13>' Fld_5 nodes.lkt:3099







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_5 := Ent.Node.Array_Literal_Expected_Exprs_Type_Var'Unrestricted_Access;
--# expr-done 1799
Fld_5.Value := No_Entity;
Entity_Vars.Reset (Fld_5);


Bind_Result := Solver.Create_N_Propagate (Fld_5, Create_Type_Decl_P_Imprecise_Common_Ancestor_List_0_Functor (Logic_Vars.N), Entity_Vars.Logic_Var_Array (Logic_Vars.Items), Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3099:13") else null)); 
--# expr-done 1800
   If_Result_2 := Bind_Result;
else
   --# expr-start 1809 '<If at nodes.lkt:3097:9>' If_Result_1 nodes.lkt:3097



--# expr-start 1801 '<FieldAccess for xref_entry_point at nodes.lkt:3101:14>' Fld_11 nodes.lkt:3101







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]LktNode.xref_entry_point'
Fld_11 := Liblktlang.Implementation.Dispatcher_Lkt_Node_P_Xref_Entry_Point (Node => Ent.Node, E_Info => Ent.Info);
--# end
--# expr-done 1801
if Fld_11 then
   --# expr-start 1805 '<Bind at nodes.lkt:3103:13>' Bind_Result_1 nodes.lkt:3103
--# expr-start 1802 '<FieldAccess for expected_exprs_type_var at nodes.lkt:3103:13>' Fld_6 nodes.lkt:3103







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_6 := Ent.Node.Array_Literal_Expected_Exprs_Type_Var'Unrestricted_Access;
--# expr-done 1802
Fld_6.Value := No_Entity;
Entity_Vars.Reset (Fld_6);





--# expr-start 1804 '<FieldAccess for get_array_content_type at nodes.lkt:3104:16>' Fld_8 nodes.lkt:3104



--# expr-start 1803 '<FieldAccess for get_expected_type at nodes.lkt:3104:16>' Fld_7 nodes.lkt:3104







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start Expr.get_expected_type
Fld_7 := Liblktlang.Implementation.Expr_P_Get_Expected_Type (Node => Ent.Node, E_Info => Ent.Info);
--# end
--# expr-done 1803



   if Fld_7.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start TypeDecl.get_array_content_type
Fld_8 := Liblktlang.Implementation.Type_Decl_P_Get_Array_Content_Type (Node => Fld_7.Node, E_Info => Fld_7.Info);
--# end
--# expr-done 1804



   
      Cast_Result := Create_Internal_Entity
        (Node => Fld_8.Node,
         Info => Fld_8.Info);


Bind_Result_1 := Solver.Create_Assign (Fld_6, Cast_Result, Solver_Ifc.No_Converter, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3103:13") else null)); 
--# expr-done 1805
   If_Result_1 := Bind_Result_1;
else
   --# expr-start 1808 '<NPropagate at nodes.lkt:3106:13>' Bind_Result_2 nodes.lkt:3106
--# expr-start 1806 '<FieldAccess for expected_type_var at nodes.lkt:3107:49>' Fld_10 nodes.lkt:3107







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_10 := Ent.Node.Expr_Expected_Type_Var'Unrestricted_Access;
--# expr-done 1806
Fld_10.Value := No_Entity;
Entity_Vars.Reset (Fld_10);
--# expr-start 1807 '<FieldAccess for expected_exprs_type_var at nodes.lkt:3106:13>' Fld_9 nodes.lkt:3106







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_9 := Ent.Node.Array_Literal_Expected_Exprs_Type_Var'Unrestricted_Access;
--# expr-done 1807
Fld_9.Value := No_Entity;
Entity_Vars.Reset (Fld_9);

Bind_Result_2 := Solver.Create_Propagate (Fld_10, Fld_9, Create_Type_Decl_P_Get_Array_Content_Type_0_Functor, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3106:13") else null)); 
--# expr-done 1808
   If_Result_1 := Bind_Result_2;
end if;

      Inc_Ref (If_Result_1);


--# expr-done 1809
   If_Result_2 := If_Result_1;
end if;

      Inc_Ref (If_Result_2);


--# expr-done 1810
Let_Result := If_Result_2; Inc_Ref (Let_Result);
--# end
--# expr-done 1811

         Property_Result := Let_Result;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_253;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_253;




            raise;
      end;



   return Property_Result;
end Array_Literal_P_Expected_Exprs_Type_Equation;
--# end

   







--# property-start ArrayLiteral.xref_equation nodes.lkt:3110
pragma Warnings (Off, "is not referenced");
 function Array_Literal_P_Xref_Equation
  
  (Node : Bare_Array_Literal
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Logic_Equation
is
   Self : Bare_Array_Literal  := Bare_Array_Literal (Node);
     Ent : Internal_Entity_Array_Literal :=
       Internal_Entity_Array_Literal'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Logic_Equation;

      
            procedure Finalizer_Scope_254 with Inline_Always;
            procedure Finalizer_Scope_687 with Inline_Always;

      Fld : Logic_Equation;
Fld_1 : Logic_Var;
Cast_Expr : Internal_Entity_Type_Decl;
Cast_Result : Internal_Entity;
Bind_Result : Logic_Equation;
Cast_Expr_1 : Bare_Array_Literal;
Cast_Result_1 : Bare_Lkt_Node;
Bound_Error_Location : Bare_Lkt_Node;
Fld_2 : Logic_Var;
Pred : Logic_Equation;
Dyn_Var_Bind_Result : Logic_Equation;
And_Pred : Logic_Equation;
Fld_3 : Logic_Var;
Fld_4 : Internal_Entity_Expr_List;
Fld_5 : Bare_Expr_List;
Fld_6 : Internal_Entity_Info;
Item_0 : Internal_Entity_Expr;
Bare_Item_0 : Bare_Expr;
Fld_7 : Logic_Var;
As_Entity : Internal_Entity_Expr;
Is_Null : Boolean;
If_Result : Internal_Entity_Expr;
Map_Result : Logic_Var_Array_Access;
Logic_Vars : Logic_Var_Array_Access;
Bind_Result_1 : Logic_Equation;
Fld_8 : Internal_Entity_Expr_List;
Fld_9 : Bare_Expr_List;
Len : Integer;
Is_Equal : Boolean;
If_Result_1 : Logic_Equation;
Fld_10 : Logic_Var;
Fld_11 : Internal_Entity_Type_Ref;
Fld_12 : Internal_Entity_Type_Decl;
Cast_Result_2 : Internal_Entity;
Bind_Result_2 : Logic_Equation;
Fld_13 : Internal_Entity_Type_Ref;
Is_Null_1 : Boolean;
If_Result_2 : Logic_Equation;
And_Pred_1 : Logic_Equation;
Fld_14 : Logic_Var;
Fld_15 : Logic_Var;
Bind_Result_3 : Logic_Equation;
And_Pred_2 : Logic_Equation;
Fld_16 : Internal_Entity_Expr_List;
Fld_17 : Bare_Expr_List;
Fld_18 : Internal_Entity_Info;
Item_1 : Internal_Entity_Expr;
Bare_Item_1 : Bare_Expr;
Fld_19 : Logic_Equation;
Fld_20 : Logic_Var;
Fld_21 : Logic_Var;
Bind_Result_4 : Logic_Equation;
And_Pred_3 : Logic_Equation;
Fld_22 : Bare_Expr;
Cast_Result_3 : Bare_Lkt_Node;
Bound_Error_Location_1 : Bare_Lkt_Node;
Fld_23 : Logic_Var;
Fld_24 : Logic_Var;
Pred_1 : Logic_Equation;
Dyn_Var_Bind_Result_1 : Logic_Equation;
And_Pred_4 : Logic_Equation;
As_Entity_1 : Internal_Entity_Expr;
Is_Null_2 : Boolean;
If_Result_3 : Internal_Entity_Expr;
Map_Result_1 : Logic_Equation_Array_Access;
Logic_Boolean_Op : Logic_Equation;
And_Pred_5 : Logic_Equation;

            procedure Finalizer_Scope_254 is
            begin
                     Dec_Ref (Fld);
                     Dec_Ref (Bind_Result);
                     Dec_Ref (Pred);
                     Dec_Ref (Dyn_Var_Bind_Result);
                     Dec_Ref (And_Pred);
                     Dec_Ref (Map_Result);
                     Dec_Ref (Logic_Vars);
                     Dec_Ref (Bind_Result_1);
                     Dec_Ref (If_Result_1);
                     Dec_Ref (Bind_Result_2);
                     Dec_Ref (If_Result_2);
                     Dec_Ref (And_Pred_1);
                     Dec_Ref (Bind_Result_3);
                     Dec_Ref (And_Pred_2);
                     Dec_Ref (Map_Result_1);
                     Dec_Ref (Logic_Boolean_Op);
                     Dec_Ref (And_Pred_5);
            end Finalizer_Scope_254;
            procedure Finalizer_Scope_687 is
            begin
                     Dec_Ref (Fld_19);
                     Dec_Ref (Bind_Result_4);
                     Dec_Ref (And_Pred_3);
                     Dec_Ref (Pred_1);
                     Dec_Ref (Dyn_Var_Bind_Result_1);
                     Dec_Ref (And_Pred_4);
            end Finalizer_Scope_687;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 1854 '<LogicBinaryOp And at nodes.lkt:3111:9>' And_Pred_5 nodes.lkt:3111
--# expr-start 1839 '<LogicBinaryOp And at nodes.lkt:3112:13>' And_Pred_2 nodes.lkt:3112
--# expr-start 1835 '<LogicBinaryOp And at nodes.lkt:3113:17>' And_Pred_1 nodes.lkt:3113
--# expr-start 1812 '<FieldAccess for expected_exprs_type_equation at nodes.lkt:3113:17>' Fld nodes.lkt:3113







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start ArrayLiteral.expected_exprs_type_equation
Fld := Liblktlang.Implementation.Array_Literal_P_Expected_Exprs_Type_Equation (Node => Ent.Node, E_Info => Ent.Info);
--# end
--# expr-done 1812
--# expr-start 1834 '<If at nodes.lkt:3115:21>' If_Result_2 nodes.lkt:3115



--# expr-start 1814 '<IsNull at nodes.lkt:3115:24>' Is_Null_1 nodes.lkt:3115
--# expr-start 1813 '<FieldAccess for element_type at nodes.lkt:3115:24>' Fld_13 nodes.lkt:3115







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_13 := Create_Internal_Entity_Type_Ref (Node => Ent.Node.Array_Literal_F_Element_Type, Info => Ent.Info);
--# expr-done 1813
Is_Null_1 := Fld_13.Node = null; 
--# expr-done 1814
if Is_Null_1 then
   --# expr-start 1829 '<If at nodes.lkt:3117:25>' If_Result_1 nodes.lkt:3117



--# expr-start 1817 '<Eq at nodes.lkt:3117:28>' Is_Equal nodes.lkt:3117
--# expr-start 1816 '<length at nodes.lkt:3117:28>' Len nodes.lkt:3117



--# expr-start 1815 '<FieldAccess for exprs at nodes.lkt:3117:28>' Fld_8 nodes.lkt:3117







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_8 := Create_Internal_Entity_Expr_List (Node => Ent.Node.Array_Literal_F_Exprs, Info => Ent.Info);
--# expr-done 1815





Fld_9 := Fld_8.Node; 
Len := Length (Fld_9); 
--# expr-done 1816

Is_Equal := Len = 0; 
--# expr-done 1817
if Is_Equal then
   --# expr-start 1823 '<LogicBinaryOp And at nodes.lkt:3119:29>' And_Pred nodes.lkt:3119
--# expr-start 1819 '<Bind at nodes.lkt:3119:29>' Bind_Result nodes.lkt:3119
--# expr-start 1818 '<FieldAccess for actual_element_type at nodes.lkt:3119:29>' Fld_1 nodes.lkt:3119







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_1 := Ent.Node.Array_Literal_Actual_Element_Type'Unrestricted_Access;
--# expr-done 1818
Fld_1.Value := No_Entity;
Entity_Vars.Reset (Fld_1);






Cast_Expr := No_Entity_Type_Decl; 



   
      Cast_Result := Create_Internal_Entity
        (Node => Cast_Expr.Node,
         Info => Cast_Expr.Info);


Bind_Result := Solver.Create_Assign (Fld_1, Cast_Result, Solver_Ifc.No_Converter, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3119:29") else null)); 
--# expr-done 1819
--# expr-start 1822 '<bind at nodes.lkt:3121:33>' Dyn_Var_Bind_Result nodes.lkt:3121






Cast_Expr_1 := Self; 



   
      Cast_Result_1 := Cast_Expr_1;


Bound_Error_Location := Cast_Result_1; 
--# expr-start 1821 '<Predicate on TypeDecl.could_determine_type at nodes.lkt:3122:33>' Pred nodes.lkt:3122
--# expr-start 1820 '<FieldAccess for actual_element_type at nodes.lkt:3123:37>' Fld_2 nodes.lkt:3123







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_2 := Ent.Node.Array_Literal_Actual_Element_Type'Unrestricted_Access;
--# expr-done 1820
Fld_2.Value := No_Entity;
Entity_Vars.Reset (Fld_2);

Pred := Solver.Create_Predicate (Fld_2, Create_Type_Decl_P_Could_Determine_Type_0_Predicate (Bound_Error_Location)); 
--# expr-done 1821
Dyn_Var_Bind_Result := Pred; Inc_Ref (Dyn_Var_Bind_Result);
--# expr-done 1822
And_Pred := Create_And (Bind_Result, Dyn_Var_Bind_Result, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3119:29") else null)); 
--# expr-done 1823
   If_Result_1 := And_Pred;
else
   --# expr-start 1826 '<Map at nodes.lkt:3129:33>' Map_Result nodes.lkt:3129








   

   --# expr-start 1824 '<FieldAccess for exprs at nodes.lkt:3129:33>' Fld_4 nodes.lkt:3129







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_4 := Create_Internal_Entity_Expr_List (Node => Ent.Node.Array_Literal_F_Exprs, Info => Ent.Info);
--# expr-done 1824









Fld_5 := Fld_4.Node;

   
      declare
         Map_Result_Vec : Logic_Var_Vectors.Vector;
      begin
   

   

      if Fld_5 = null then
         
      Map_Result := Create_Logic_Var_Array (0);
   
      else
         

      declare
         
         Collection : constant Bare_Expr_List := Fld_5;
      begin
         for Untyped_Item_0 of
               Collection.Nodes (1 .. Children_Count (Collection))
         loop
                  
                  Bare_Item_0 := Untyped_Item_0; 
                  



Is_Null := Bare_Item_0 = null; 
if Is_Null then
   
   If_Result := No_Entity_Expr;
else
   








Fld_6 := Fld_4.Info;

As_Entity := (Info => Fld_6, Node => Bare_Item_0); 
   If_Result := As_Entity;
end if;



                  Item_0 := If_Result; 

            
   --# scope-start


               --# bind expr Item_0

            
         
         
      --# expr-start 1825 '<FieldAccess for actual_type_var at nodes.lkt:3129:58>' Fld_7 nodes.lkt:3129







   if Item_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_7 := Item_0.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 1825
      

         declare
            Item_To_Append : constant Logic_Var := Fld_7;
         begin
            Logic_Var_Vectors.Append (Map_Result_Vec, Item_To_Append);
         end;
   
   
   

            
   --# end



         end loop;
      end;
   
      end if;

   

         Map_Result := Create_Logic_Var_Array
           (Items_Count => Natural (Logic_Var_Vectors.Length (Map_Result_Vec)));
         for I in Map_Result.Items'Range loop
            Map_Result.Items (I) := Logic_Var_Vectors.Get
              (Map_Result_Vec,
               I + Logic_Var_Vectors.Index_Type'First - Map_Result.Items'First);
         end loop;
         Logic_Var_Vectors.Destroy (Map_Result_Vec);

      end;
   



--# expr-done 1826
for Var of Map_Result.Items loop
   Var.Value := No_Entity;
   Entity_Vars.Reset (Var);
end loop;
Logic_Vars := Map_Result; Inc_Ref (Logic_Vars);
--# expr-start 1828 '<NPropagate at nodes.lkt:3127:29>' Bind_Result_1 nodes.lkt:3127
--# expr-start 1827 '<FieldAccess for actual_element_type at nodes.lkt:3127:29>' Fld_3 nodes.lkt:3127







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_3 := Ent.Node.Array_Literal_Actual_Element_Type'Unrestricted_Access;
--# expr-done 1827
Fld_3.Value := No_Entity;
Entity_Vars.Reset (Fld_3);


Bind_Result_1 := Solver.Create_N_Propagate (Fld_3, Create_Type_Decl_P_Imprecise_Common_Ancestor_List_0_Functor (Logic_Vars.N), Entity_Vars.Logic_Var_Array (Logic_Vars.Items), Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3127:29") else null)); 
--# expr-done 1828
   If_Result_1 := Bind_Result_1;
end if;

      Inc_Ref (If_Result_1);


--# expr-done 1829
   If_Result_2 := If_Result_1;
else
   --# expr-start 1833 '<Bind at nodes.lkt:3132:25>' Bind_Result_2 nodes.lkt:3132
--# expr-start 1830 '<FieldAccess for actual_element_type at nodes.lkt:3132:25>' Fld_10 nodes.lkt:3132







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_10 := Ent.Node.Array_Literal_Actual_Element_Type'Unrestricted_Access;
--# expr-done 1830
Fld_10.Value := No_Entity;
Entity_Vars.Reset (Fld_10);





--# expr-start 1832 '<FieldAccess for referenced_decl at nodes.lkt:3133:28>' Fld_12 nodes.lkt:3133



--# expr-start 1831 '<FieldAccess for element_type at nodes.lkt:3133:28>' Fld_11 nodes.lkt:3133







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_11 := Create_Internal_Entity_Type_Ref (Node => Ent.Node.Array_Literal_F_Element_Type, Info => Ent.Info);
--# expr-done 1831



   if Fld_11.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start TypeRef.referenced_decl
Fld_12 := Liblktlang.Implementation.Type_Ref_P_Referenced_Decl (Node => Fld_11.Node, E_Info => Fld_11.Info);
--# end
--# expr-done 1832



   
      Cast_Result_2 := Create_Internal_Entity
        (Node => Fld_12.Node,
         Info => Fld_12.Info);


Bind_Result_2 := Solver.Create_Assign (Fld_10, Cast_Result_2, Solver_Ifc.No_Converter, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3132:25") else null)); 
--# expr-done 1833
   If_Result_2 := Bind_Result_2;
end if;

      Inc_Ref (If_Result_2);


--# expr-done 1834
And_Pred_1 := Create_And (Fld, If_Result_2, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3113:17") else null)); 
--# expr-done 1835
--# expr-start 1838 '<NPropagate at nodes.lkt:3138:17>' Bind_Result_3 nodes.lkt:3138
--# expr-start 1836 '<FieldAccess for actual_element_type at nodes.lkt:3139:46>' Fld_15 nodes.lkt:3139







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_15 := Ent.Node.Array_Literal_Actual_Element_Type'Unrestricted_Access;
--# expr-done 1836
Fld_15.Value := No_Entity;
Entity_Vars.Reset (Fld_15);
--# expr-start 1837 '<FieldAccess for actual_type_var at nodes.lkt:3138:17>' Fld_14 nodes.lkt:3138







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_14 := Ent.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 1837
Fld_14.Value := No_Entity;
Entity_Vars.Reset (Fld_14);

Bind_Result_3 := Solver.Create_Propagate (Fld_15, Fld_14, Create_Type_Decl_P_Make_Array_Type_0_Functor, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3138:17") else null)); 
--# expr-done 1838
And_Pred_2 := Create_And (And_Pred_1, Bind_Result_3, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3112:13") else null)); 
--# expr-done 1839
--# expr-start 1853 '<LogicAll at nodes.lkt:3142:14>' Logic_Boolean_Op nodes.lkt:3142
--# expr-start 1852 '<Map at nodes.lkt:3142:14>' Map_Result_1 nodes.lkt:3142








   

   --# expr-start 1840 '<FieldAccess for exprs at nodes.lkt:3142:14>' Fld_16 nodes.lkt:3142







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_16 := Create_Internal_Entity_Expr_List (Node => Ent.Node.Array_Literal_F_Exprs, Info => Ent.Info);
--# expr-done 1840









Fld_17 := Fld_16.Node;

   
      declare
         Map_Result_1_Vec : Logic_Equation_Vectors.Vector;
      begin
   

   

      if Fld_17 = null then
         
      Map_Result_1 := Create_Logic_Equation_Array (0);
   
      else
         

      declare
         
         Collection : constant Bare_Expr_List := Fld_17;
      begin
         for Untyped_Item_1 of
               Collection.Nodes (1 .. Children_Count (Collection))
         loop
                  
                  Bare_Item_1 := Untyped_Item_1; 
                  



Is_Null_2 := Bare_Item_1 = null; 
if Is_Null_2 then
   
   If_Result_3 := No_Entity_Expr;
else
   








Fld_18 := Fld_16.Info;

As_Entity_1 := (Info => Fld_18, Node => Bare_Item_1); 
   If_Result_3 := As_Entity_1;
end if;



                  Item_1 := If_Result_3; 

            
   --# scope-start


               --# bind expr Item_1

            
         
         
      --# expr-start 1851 '<LogicBinaryOp And at nodes.lkt:3144:13>' And_Pred_4 nodes.lkt:3144
--# expr-start 1845 '<LogicBinaryOp And at nodes.lkt:3146:17>' And_Pred_3 nodes.lkt:3146
--# expr-start 1841 '<FieldAccess for xref_equation at nodes.lkt:3146:17>' Fld_19 nodes.lkt:3146







   if Item_1.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]LktNode.xref_equation'
Fld_19 := Liblktlang.Implementation.Dispatcher_Lkt_Node_P_Xref_Equation (Node => Item_1.Node, E_Info => Item_1.Info);
--# end
--# expr-done 1841
--# expr-start 1844 '<Bind at nodes.lkt:3149:21>' Bind_Result_4 nodes.lkt:3149
--# expr-start 1842 '<FieldAccess for expected_type_var at nodes.lkt:3149:21>' Fld_20 nodes.lkt:3149







   if Item_1.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_20 := Item_1.Node.Expr_Expected_Type_Var'Unrestricted_Access;
--# expr-done 1842
Fld_20.Value := No_Entity;
Entity_Vars.Reset (Fld_20);
--# expr-start 1843 '<FieldAccess for expected_exprs_type_var at nodes.lkt:3149:48>' Fld_21 nodes.lkt:3149







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_21 := Ent.Node.Array_Literal_Expected_Exprs_Type_Var'Unrestricted_Access;
--# expr-done 1843
Fld_21.Value := No_Entity;
Entity_Vars.Reset (Fld_21);
Bind_Result_4 := Solver.Create_Unify (Fld_20, Fld_21, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3149:21") else null)); 
--# expr-done 1844
And_Pred_3 := Create_And (Fld_19, Bind_Result_4, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3146:17") else null)); 
--# expr-done 1845
--# expr-start 1850 '<bind at nodes.lkt:3155:21>' Dyn_Var_Bind_Result_1 nodes.lkt:3155





--# expr-start 1846 '<FieldAccess for node at nodes.lkt:3155:43>' Fld_22 nodes.lkt:3155









Fld_22 := Item_1.Node;
--# expr-done 1846



   
      Cast_Result_3 := Fld_22;


Bound_Error_Location_1 := Cast_Result_3; 
--# expr-start 1849 '<Predicate on TypeDecl.matching_type at nodes.lkt:3156:21>' Pred_1 nodes.lkt:3156
--# expr-start 1847 '<FieldAccess for expected_type_var at nodes.lkt:3157:25>' Fld_23 nodes.lkt:3157







   if Item_1.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_23 := Item_1.Node.Expr_Expected_Type_Var'Unrestricted_Access;
--# expr-done 1847
Fld_23.Value := No_Entity;
Entity_Vars.Reset (Fld_23);
--# expr-start 1848 '<FieldAccess for actual_type_var at nodes.lkt:3158:25>' Fld_24 nodes.lkt:3158







   if Item_1.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_24 := Item_1.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 1848
Fld_24.Value := No_Entity;
Entity_Vars.Reset (Fld_24);


Pred_1 := Solver.Create_N_Predicate ((Fld_23, Fld_24), Create_Type_Decl_P_Matching_Type_0_Predicate (2, Bound_Error_Location_1)); 
--# expr-done 1849
Dyn_Var_Bind_Result_1 := Pred_1; Inc_Ref (Dyn_Var_Bind_Result_1);
--# expr-done 1850
And_Pred_4 := Create_And (And_Pred_3, Dyn_Var_Bind_Result_1, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3144:13") else null)); 
--# expr-done 1851
      

         declare
            Item_To_Append : constant Logic_Equation := And_Pred_4;
         begin
               Inc_Ref (Item_To_Append);
            Logic_Equation_Vectors.Append (Map_Result_1_Vec, Item_To_Append);
         end;
   
   
   

            
   --# end
      Finalizer_Scope_687;



         end loop;
      end;
   
      end if;

   

         Map_Result_1 := Create_Logic_Equation_Array
           (Items_Count => Natural (Logic_Equation_Vectors.Length (Map_Result_1_Vec)));
         for I in Map_Result_1.Items'Range loop
            Map_Result_1.Items (I) := Logic_Equation_Vectors.Get
              (Map_Result_1_Vec,
               I + Logic_Equation_Vectors.Index_Type'First - Map_Result_1.Items'First);
         end loop;
         Logic_Equation_Vectors.Destroy (Map_Result_1_Vec);

      end;
   



--# expr-done 1852
Logic_Boolean_Op := Solver.Create_All (Relation_Array (Map_Result_1.Items), (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3142:14") else null)); 
--# expr-done 1853
And_Pred_5 := Create_And (And_Pred_2, Logic_Boolean_Op, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3111:9") else null)); 
--# expr-done 1854

         Property_Result := And_Pred_5;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_254;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_254;
                     Finalizer_Scope_687;




            raise;
      end;



   return Property_Result;
end Array_Literal_P_Xref_Equation;
--# end



   


      

   --
   --  Primitives for Bare_Base_Call_Expr
   --

   



      
      procedure Initialize_Fields_For_Base_Call_Expr
        (Self : Bare_Base_Call_Expr
         ; Base_Call_Expr_F_Name : Bare_Expr
         ; Base_Call_Expr_F_Args : Bare_Param_List
        ) is
      begin
            Initialize_Fields_For_Expr
              (Self);

            Self.Base_Call_Expr_F_Name := Base_Call_Expr_F_Name;
            Self.Base_Call_Expr_F_Args := Base_Call_Expr_F_Args;
         

      end Initialize_Fields_For_Base_Call_Expr;

      
   function Base_Call_Expr_F_Name
     (Node : Bare_Base_Call_Expr) return Bare_Expr
   is
      

   begin
         
         return Node.Base_Call_Expr_F_Name;
      
   end;

      
   function Base_Call_Expr_F_Args
     (Node : Bare_Base_Call_Expr) return Bare_Param_List
   is
      

   begin
         
         return Node.Base_Call_Expr_F_Args;
      
   end;


   







--# property-start BaseCallExpr.generic_type_equation nodes.lkt:3173
pragma Warnings (Off, "is not referenced");
 function Base_Call_Expr_P_Generic_Type_Equation
  
  (Node : Bare_Base_Call_Expr
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Logic_Equation
is
   Self : Bare_Base_Call_Expr  := Bare_Base_Call_Expr (Node);
     Ent : Internal_Entity_Base_Call_Expr :=
       Internal_Entity_Base_Call_Expr'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Logic_Equation;

      
            procedure Finalizer_Scope_255 with Inline_Always;

      Fld : Internal_Entity_Expr;
Fld_1 : Internal_Entity_Param_List;
Fld_2 : Logic_Equation;

            procedure Finalizer_Scope_255 is
            begin
                     Dec_Ref (Fld_2);
            end Finalizer_Scope_255;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 1857 '<FieldAccess for call_generic_type_equation at nodes.lkt:3174:9>' Fld_2 nodes.lkt:3174







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# expr-start 1855 '<FieldAccess for name at nodes.lkt:3174:41>' Fld nodes.lkt:3174







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Create_Internal_Entity_Expr (Node => Ent.Node.Base_Call_Expr_F_Name, Info => Ent.Info);
--# expr-done 1855
--# expr-start 1856 '<FieldAccess for args at nodes.lkt:3174:52>' Fld_1 nodes.lkt:3174







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_1 := Create_Internal_Entity_Param_List (Node => Ent.Node.Base_Call_Expr_F_Args, Info => Ent.Info);
--# expr-done 1856
--# property-call-start Expr.call_generic_type_equation
Fld_2 := Liblktlang.Implementation.Expr_P_Call_Generic_Type_Equation (Node => Ent.Node, Name => Fld, Args => Fld_1, In_Logic_Call => False);
--# end
--# expr-done 1857

         Property_Result := Fld_2;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_255;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_255;




            raise;
      end;



   return Property_Result;
end Base_Call_Expr_P_Generic_Type_Equation;
--# end

   







--# property-start BaseCallExpr.expected_type_equation nodes.lkt:3176
pragma Warnings (Off, "is not referenced");
 function Base_Call_Expr_P_Expected_Type_Equation
  
  (Node : Bare_Base_Call_Expr
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Logic_Equation
is
   Self : Bare_Base_Call_Expr  := Bare_Base_Call_Expr (Node);
     Ent : Internal_Entity_Base_Call_Expr :=
       Internal_Entity_Base_Call_Expr'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Logic_Equation;

      
            procedure Finalizer_Scope_256 with Inline_Always;

      Fld : Internal_Entity_Expr;
Fld_1 : Internal_Entity_Param_List;
Fld_2 : Logic_Equation;

            procedure Finalizer_Scope_256 is
            begin
                     Dec_Ref (Fld_2);
            end Finalizer_Scope_256;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 1860 '<FieldAccess for call_expected_type_equation at nodes.lkt:3177:9>' Fld_2 nodes.lkt:3177







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# expr-start 1858 '<FieldAccess for name at nodes.lkt:3177:42>' Fld nodes.lkt:3177







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Create_Internal_Entity_Expr (Node => Ent.Node.Base_Call_Expr_F_Name, Info => Ent.Info);
--# expr-done 1858
--# expr-start 1859 '<FieldAccess for args at nodes.lkt:3177:53>' Fld_1 nodes.lkt:3177







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_1 := Create_Internal_Entity_Param_List (Node => Ent.Node.Base_Call_Expr_F_Args, Info => Ent.Info);
--# expr-done 1859
--# property-call-start Expr.call_expected_type_equation
Fld_2 := Liblktlang.Implementation.Expr_P_Call_Expected_Type_Equation (Node => Ent.Node, Name => Fld, Args => Fld_1, E_Info => Ent.Info);
--# end
--# expr-done 1860

         Property_Result := Fld_2;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_256;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_256;




            raise;
      end;



   return Property_Result;
end Base_Call_Expr_P_Expected_Type_Equation;
--# end

   







--# property-start BaseCallExpr.xref_equation nodes.lkt:3179
pragma Warnings (Off, "is not referenced");
 function Base_Call_Expr_P_Xref_Equation
  
  (Node : Bare_Base_Call_Expr
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Logic_Equation
is
   Self : Bare_Base_Call_Expr  := Bare_Base_Call_Expr (Node);
     Ent : Internal_Entity_Base_Call_Expr :=
       Internal_Entity_Base_Call_Expr'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Logic_Equation;

      
            procedure Finalizer_Scope_257 with Inline_Always;

      Fld : Internal_Entity_Expr;
Fld_1 : Logic_Equation;
Fld_2 : Internal_Entity_Expr;
Fld_3 : Internal_Entity_Param_List;
Fld_4 : Logic_Equation;
And_Pred : Logic_Equation;
Fld_5 : Logic_Var;
Fld_6 : Internal_Entity_Expr;
Fld_7 : Logic_Var;
Bind_Result : Logic_Equation;
And_Pred_1 : Logic_Equation;

            procedure Finalizer_Scope_257 is
            begin
                     Dec_Ref (Fld_1);
                     Dec_Ref (Fld_4);
                     Dec_Ref (And_Pred);
                     Dec_Ref (Bind_Result);
                     Dec_Ref (And_Pred_1);
            end Finalizer_Scope_257;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 1871 '<LogicBinaryOp And at nodes.lkt:3180:9>' And_Pred_1 nodes.lkt:3180
--# expr-start 1866 '<LogicBinaryOp And at nodes.lkt:3181:13>' And_Pred nodes.lkt:3181
--# expr-start 1862 '<FieldAccess for xref_equation at nodes.lkt:3181:13>' Fld_1 nodes.lkt:3181



--# expr-start 1861 '<FieldAccess for name at nodes.lkt:3181:13>' Fld nodes.lkt:3181







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Create_Internal_Entity_Expr (Node => Ent.Node.Base_Call_Expr_F_Name, Info => Ent.Info);
--# expr-done 1861



   if Fld.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]LktNode.xref_equation'
Fld_1 := Liblktlang.Implementation.Dispatcher_Lkt_Node_P_Xref_Equation (Node => Fld.Node, E_Info => Fld.Info);
--# end
--# expr-done 1862
--# expr-start 1865 '<FieldAccess for xref_call_equation at nodes.lkt:3184:17>' Fld_4 nodes.lkt:3184







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# expr-start 1863 '<FieldAccess for name at nodes.lkt:3184:41>' Fld_2 nodes.lkt:3184







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_2 := Create_Internal_Entity_Expr (Node => Ent.Node.Base_Call_Expr_F_Name, Info => Ent.Info);
--# expr-done 1863
--# expr-start 1864 '<FieldAccess for args at nodes.lkt:3184:52>' Fld_3 nodes.lkt:3184







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_3 := Create_Internal_Entity_Param_List (Node => Ent.Node.Base_Call_Expr_F_Args, Info => Ent.Info);
--# expr-done 1864
--# property-call-start Expr.xref_call_equation
Fld_4 := Liblktlang.Implementation.Expr_P_Xref_Call_Equation (Node => Ent.Node, Name => Fld_2, Args => Fld_3, In_Logic_Call => False, E_Info => Ent.Info);
--# end
--# expr-done 1865
And_Pred := Create_And (Fld_1, Fld_4, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3181:13") else null)); 
--# expr-done 1866
--# expr-start 1870 '<NPropagate at nodes.lkt:3187:14>' Bind_Result nodes.lkt:3187
--# expr-start 1868 '<FieldAccess for actual_type_var at nodes.lkt:3188:38>' Fld_7 nodes.lkt:3188



--# expr-start 1867 '<FieldAccess for name at nodes.lkt:3188:38>' Fld_6 nodes.lkt:3188







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_6 := Create_Internal_Entity_Expr (Node => Ent.Node.Base_Call_Expr_F_Name, Info => Ent.Info);
--# expr-done 1867



   if Fld_6.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_7 := Fld_6.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 1868
Fld_7.Value := No_Entity;
Entity_Vars.Reset (Fld_7);
--# expr-start 1869 '<FieldAccess for actual_type_var at nodes.lkt:3187:14>' Fld_5 nodes.lkt:3187







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_5 := Ent.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 1869
Fld_5.Value := No_Entity;
Entity_Vars.Reset (Fld_5);

Bind_Result := Solver.Create_Propagate (Fld_7, Fld_5, Create_Type_Decl_P_Get_Return_Type_0_Functor, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3187:14") else null)); 
--# expr-done 1870
And_Pred_1 := Create_And (And_Pred, Bind_Result, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3180:9") else null)); 
--# expr-done 1871

         Property_Result := And_Pred_1;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_257;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_257;




            raise;
      end;



   return Property_Result;
end Base_Call_Expr_P_Xref_Equation;
--# end

   







--# property-start BaseCallExpr.xlogic_unknown nodes.lkt:3192
pragma Warnings (Off, "is not referenced");
 function Base_Call_Expr_P_Xlogic_Unknown
  
  (Node : Bare_Base_Call_Expr
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Logic_Equation
is
   Self : Bare_Base_Call_Expr  := Bare_Base_Call_Expr (Node);
     Ent : Internal_Entity_Base_Call_Expr :=
       Internal_Entity_Base_Call_Expr'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Logic_Equation;

      
            procedure Finalizer_Scope_258 with Inline_Always;
            procedure Finalizer_Scope_688 with Inline_Always;

      Fld : Internal_Entity_Expr;
Fld_1 : Logic_Var;
Cast_Expr : Internal_Entity_Type_Decl;
Cast_Result : Internal_Entity;
Bind_Result : Logic_Equation;
Fld_2 : Bare_Expr;
Cast_Result_1 : Bare_Lkt_Node;
Bound_Error_Location : Bare_Lkt_Node;
Fld_3 : Internal_Entity_Expr;
Fld_4 : Logic_Var;
Pred : Logic_Equation;
Dyn_Var_Bind_Result : Logic_Equation;
And_Pred : Logic_Equation;
Fld_5 : Internal_Entity_Param_List;
Fld_6 : Bare_Param_List;
Fld_7 : Internal_Entity_Info;
Item_0 : Internal_Entity_Param;
Bare_Item_0 : Bare_Param;
Fld_8 : Logic_Equation;
Fld_9 : Internal_Entity_Expr;
Fld_10 : Logic_Var;
Cast_Expr_1 : Internal_Entity_Type_Decl;
Cast_Result_2 : Internal_Entity;
Bind_Result_1 : Logic_Equation;
And_Pred_1 : Logic_Equation;
As_Entity : Internal_Entity_Param;
Is_Null : Boolean;
If_Result : Internal_Entity_Param;
Map_Result : Logic_Equation_Array_Access;
Logic_Boolean_Op : Logic_Equation;
And_Pred_2 : Logic_Equation;
Fld_11 : Internal_Entity_Expr;
Fld_12 : Logic_Var;
Cast_Expr_2 : Internal_Entity_Type_Decl;
Cast_Result_3 : Internal_Entity;
Bind_Result_2 : Logic_Equation;
And_Pred_3 : Logic_Equation;

            procedure Finalizer_Scope_258 is
            begin
                     Dec_Ref (Bind_Result);
                     Dec_Ref (Pred);
                     Dec_Ref (Dyn_Var_Bind_Result);
                     Dec_Ref (And_Pred);
                     Dec_Ref (Map_Result);
                     Dec_Ref (Logic_Boolean_Op);
                     Dec_Ref (And_Pred_2);
                     Dec_Ref (Bind_Result_2);
                     Dec_Ref (And_Pred_3);
            end Finalizer_Scope_258;
            procedure Finalizer_Scope_688 is
            begin
                     Dec_Ref (Fld_8);
                     Dec_Ref (Bind_Result_1);
                     Dec_Ref (And_Pred_1);
            end Finalizer_Scope_688;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 1893 '<LogicBinaryOp And at nodes.lkt:3193:9>' And_Pred_3 nodes.lkt:3193
--# expr-start 1889 '<LogicBinaryOp And at nodes.lkt:3194:13>' And_Pred_2 nodes.lkt:3194
--# expr-start 1880 '<LogicBinaryOp And at nodes.lkt:3195:17>' And_Pred nodes.lkt:3195
--# expr-start 1874 '<Bind at nodes.lkt:3195:17>' Bind_Result nodes.lkt:3195
--# expr-start 1873 '<FieldAccess for actual_type_var at nodes.lkt:3195:17>' Fld_1 nodes.lkt:3195



--# expr-start 1872 '<FieldAccess for name at nodes.lkt:3195:17>' Fld nodes.lkt:3195







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Create_Internal_Entity_Expr (Node => Ent.Node.Base_Call_Expr_F_Name, Info => Ent.Info);
--# expr-done 1872



   if Fld.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_1 := Fld.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 1873
Fld_1.Value := No_Entity;
Entity_Vars.Reset (Fld_1);






Cast_Expr := No_Entity_Type_Decl; 



   
      Cast_Result := Create_Internal_Entity
        (Node => Cast_Expr.Node,
         Info => Cast_Expr.Info);


Bind_Result := Solver.Create_Assign (Fld_1, Cast_Result, Solver_Ifc.No_Converter, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3195:17") else null)); 
--# expr-done 1874
--# expr-start 1879 '<bind at nodes.lkt:3197:21>' Dyn_Var_Bind_Result nodes.lkt:3197





--# expr-start 1875 '<FieldAccess for name at nodes.lkt:3197:43>' Fld_2 nodes.lkt:3197







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_2 := Self.Base_Call_Expr_F_Name;
--# expr-done 1875



   
      Cast_Result_1 := Fld_2;


Bound_Error_Location := Cast_Result_1; 
--# expr-start 1878 '<Predicate on Decl.is_defined at nodes.lkt:3198:21>' Pred nodes.lkt:3198
--# expr-start 1877 '<FieldAccess for actual_type_var at nodes.lkt:3198:38>' Fld_4 nodes.lkt:3198



--# expr-start 1876 '<FieldAccess for name at nodes.lkt:3198:38>' Fld_3 nodes.lkt:3198







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_3 := Create_Internal_Entity_Expr (Node => Ent.Node.Base_Call_Expr_F_Name, Info => Ent.Info);
--# expr-done 1876



   if Fld_3.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_4 := Fld_3.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 1877
Fld_4.Value := No_Entity;
Entity_Vars.Reset (Fld_4);

Pred := Solver.Create_Predicate (Fld_4, Create_Decl_P_Is_Defined_0_Predicate (Bound_Error_Location)); 
--# expr-done 1878
Dyn_Var_Bind_Result := Pred; Inc_Ref (Dyn_Var_Bind_Result);
--# expr-done 1879
And_Pred := Create_And (Bind_Result, Dyn_Var_Bind_Result, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3195:17") else null)); 
--# expr-done 1880
--# expr-start 1888 '<LogicAll at nodes.lkt:3201:18>' Logic_Boolean_Op nodes.lkt:3201
--# expr-start 1887 '<Map at nodes.lkt:3201:18>' Map_Result nodes.lkt:3201








   

   --# expr-start 1881 '<FieldAccess for args at nodes.lkt:3201:18>' Fld_5 nodes.lkt:3201







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_5 := Create_Internal_Entity_Param_List (Node => Ent.Node.Base_Call_Expr_F_Args, Info => Ent.Info);
--# expr-done 1881









Fld_6 := Fld_5.Node;

   
      declare
         Map_Result_Vec : Logic_Equation_Vectors.Vector;
      begin
   

   

      if Fld_6 = null then
         
      Map_Result := Create_Logic_Equation_Array (0);
   
      else
         

      declare
         
         Collection : constant Bare_Param_List := Fld_6;
      begin
         for Untyped_Item_0 of
               Collection.Nodes (1 .. Children_Count (Collection))
         loop
                  
                  Bare_Item_0 := Untyped_Item_0; 
                  



Is_Null := Bare_Item_0 = null; 
if Is_Null then
   
   If_Result := No_Entity_Param;
else
   








Fld_7 := Fld_5.Info;

As_Entity := (Info => Fld_7, Node => Bare_Item_0); 
   If_Result := As_Entity;
end if;



                  Item_0 := If_Result; 

            
   --# scope-start


               --# bind a Item_0

            
         
         
      --# expr-start 1886 '<LogicBinaryOp And at nodes.lkt:3203:17>' And_Pred_1 nodes.lkt:3203
--# expr-start 1882 '<FieldAccess for xref_equation at nodes.lkt:3203:17>' Fld_8 nodes.lkt:3203







   if Item_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]LktNode.xref_equation'
Fld_8 := Liblktlang.Implementation.Dispatcher_Lkt_Node_P_Xref_Equation (Node => Item_0.Node, E_Info => Item_0.Info);
--# end
--# expr-done 1882
--# expr-start 1885 '<Bind at nodes.lkt:3204:22>' Bind_Result_1 nodes.lkt:3204
--# expr-start 1884 '<FieldAccess for expected_type_var at nodes.lkt:3204:22>' Fld_10 nodes.lkt:3204



--# expr-start 1883 '<FieldAccess for value at nodes.lkt:3204:22>' Fld_9 nodes.lkt:3204







   if Item_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_9 := Create_Internal_Entity_Expr (Node => Item_0.Node.Param_F_Value, Info => Item_0.Info);
--# expr-done 1883



   if Fld_9.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_10 := Fld_9.Node.Expr_Expected_Type_Var'Unrestricted_Access;
--# expr-done 1884
Fld_10.Value := No_Entity;
Entity_Vars.Reset (Fld_10);






Cast_Expr_1 := No_Entity_Type_Decl; 



   
      Cast_Result_2 := Create_Internal_Entity
        (Node => Cast_Expr_1.Node,
         Info => Cast_Expr_1.Info);


Bind_Result_1 := Solver.Create_Assign (Fld_10, Cast_Result_2, Solver_Ifc.No_Converter, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3204:22") else null)); 
--# expr-done 1885
And_Pred_1 := Create_And (Fld_8, Bind_Result_1, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3203:17") else null)); 
--# expr-done 1886
      

         declare
            Item_To_Append : constant Logic_Equation := And_Pred_1;
         begin
               Inc_Ref (Item_To_Append);
            Logic_Equation_Vectors.Append (Map_Result_Vec, Item_To_Append);
         end;
   
   
   

            
   --# end
      Finalizer_Scope_688;



         end loop;
      end;
   
      end if;

   

         Map_Result := Create_Logic_Equation_Array
           (Items_Count => Natural (Logic_Equation_Vectors.Length (Map_Result_Vec)));
         for I in Map_Result.Items'Range loop
            Map_Result.Items (I) := Logic_Equation_Vectors.Get
              (Map_Result_Vec,
               I + Logic_Equation_Vectors.Index_Type'First - Map_Result.Items'First);
         end loop;
         Logic_Equation_Vectors.Destroy (Map_Result_Vec);

      end;
   



--# expr-done 1887
Logic_Boolean_Op := Solver.Create_All (Relation_Array (Map_Result.Items), (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3201:18") else null)); 
--# expr-done 1888
And_Pred_2 := Create_And (And_Pred, Logic_Boolean_Op, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3194:13") else null)); 
--# expr-done 1889
--# expr-start 1892 '<Bind at nodes.lkt:3207:14>' Bind_Result_2 nodes.lkt:3207
--# expr-start 1891 '<FieldAccess for actual_type_var at nodes.lkt:3207:14>' Fld_12 nodes.lkt:3207



--# expr-start 1890 '<FieldAccess for name at nodes.lkt:3207:14>' Fld_11 nodes.lkt:3207







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_11 := Create_Internal_Entity_Expr (Node => Ent.Node.Base_Call_Expr_F_Name, Info => Ent.Info);
--# expr-done 1890



   if Fld_11.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_12 := Fld_11.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 1891
Fld_12.Value := No_Entity;
Entity_Vars.Reset (Fld_12);






Cast_Expr_2 := No_Entity_Type_Decl; 



   
      Cast_Result_3 := Create_Internal_Entity
        (Node => Cast_Expr_2.Node,
         Info => Cast_Expr_2.Info);


Bind_Result_2 := Solver.Create_Assign (Fld_12, Cast_Result_3, Solver_Ifc.No_Converter, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3207:14") else null)); 
--# expr-done 1892
And_Pred_3 := Create_And (And_Pred_2, Bind_Result_2, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3193:9") else null)); 
--# expr-done 1893

         Property_Result := And_Pred_3;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_258;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_258;
                     Finalizer_Scope_688;




            raise;
      end;



   return Property_Result;
end Base_Call_Expr_P_Xlogic_Unknown;
--# end

   







--# property-start BaseCallExpr.xlogic_any_all nodes.lkt:3209
pragma Warnings (Off, "is not referenced");
 function Base_Call_Expr_P_Xlogic_Any_All
  
  (Node : Bare_Base_Call_Expr
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Logic_Equation
is
   Self : Bare_Base_Call_Expr  := Bare_Base_Call_Expr (Node);
     Ent : Internal_Entity_Base_Call_Expr :=
       Internal_Entity_Base_Call_Expr'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Logic_Equation;

      
            procedure Finalizer_Scope_259 with Inline_Always;
            procedure Finalizer_Scope_689 with Inline_Always;

      Fld : Logic_Var;
Fld_1 : Internal_Entity_Named_Type_Decl;
Cast_Result : Internal_Entity;
Bind_Result : Logic_Equation;
Fld_2 : Internal_Entity_Expr;
Fld_3 : Logic_Var;
Cast_Expr : Internal_Entity_Type_Decl;
Cast_Result_1 : Internal_Entity;
Bind_Result_1 : Logic_Equation;
And_Pred : Logic_Equation;
Fld_4 : Internal_Entity_Param_List;
Fld_5 : Bare_Param_List;
Fld_6 : Internal_Entity_Info;
Item_0 : Internal_Entity_Param;
Bare_Item_0 : Bare_Param;
Fld_7 : Logic_Equation;
Fld_8 : Internal_Entity_Expr;
Fld_9 : Logic_Var;
Fld_10 : Internal_Entity_Named_Type_Decl;
Cast_Result_2 : Internal_Entity;
Bind_Result_2 : Logic_Equation;
And_Pred_1 : Logic_Equation;
Fld_11 : Bare_Param;
Cast_Result_3 : Bare_Lkt_Node;
Bound_Error_Location : Bare_Lkt_Node;
Fld_12 : Internal_Entity_Expr;
Fld_13 : Logic_Var;
Fld_14 : Internal_Entity_Expr;
Fld_15 : Logic_Var;
Pred : Logic_Equation;
Dyn_Var_Bind_Result : Logic_Equation;
And_Pred_2 : Logic_Equation;
As_Entity : Internal_Entity_Param;
Is_Null : Boolean;
If_Result : Internal_Entity_Param;
Map_Result : Logic_Equation_Array_Access;
Logic_Boolean_Op : Logic_Equation;
And_Pred_3 : Logic_Equation;

            procedure Finalizer_Scope_259 is
            begin
                     Dec_Ref (Bind_Result);
                     Dec_Ref (Bind_Result_1);
                     Dec_Ref (And_Pred);
                     Dec_Ref (Map_Result);
                     Dec_Ref (Logic_Boolean_Op);
                     Dec_Ref (And_Pred_3);
            end Finalizer_Scope_259;
            procedure Finalizer_Scope_689 is
            begin
                     Dec_Ref (Fld_7);
                     Dec_Ref (Bind_Result_2);
                     Dec_Ref (And_Pred_1);
                     Dec_Ref (Pred);
                     Dec_Ref (Dyn_Var_Bind_Result);
                     Dec_Ref (And_Pred_2);
            end Finalizer_Scope_689;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 1918 '<LogicBinaryOp And at nodes.lkt:3210:9>' And_Pred_3 nodes.lkt:3210
--# expr-start 1900 '<LogicBinaryOp And at nodes.lkt:3211:13>' And_Pred nodes.lkt:3211
--# expr-start 1896 '<Bind at nodes.lkt:3211:13>' Bind_Result nodes.lkt:3211
--# expr-start 1894 '<FieldAccess for actual_type_var at nodes.lkt:3211:13>' Fld nodes.lkt:3211







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Ent.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 1894
Fld.Value := No_Entity;
Entity_Vars.Reset (Fld);





--# expr-start 1895 '<FieldAccess for equation_type at nodes.lkt:3211:37>' Fld_1 nodes.lkt:3211







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start LktNode.equation_type
Fld_1 := Liblktlang.Implementation.Lkt_Node_P_Equation_Type (Node => Ent.Node);
--# end
--# expr-done 1895



   
      Cast_Result := Create_Internal_Entity
        (Node => Fld_1.Node,
         Info => Fld_1.Info);


Bind_Result := Solver.Create_Assign (Fld, Cast_Result, Solver_Ifc.No_Converter, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3211:13") else null)); 
--# expr-done 1896
--# expr-start 1899 '<Bind at nodes.lkt:3212:18>' Bind_Result_1 nodes.lkt:3212
--# expr-start 1898 '<FieldAccess for actual_type_var at nodes.lkt:3212:18>' Fld_3 nodes.lkt:3212



--# expr-start 1897 '<FieldAccess for name at nodes.lkt:3212:18>' Fld_2 nodes.lkt:3212







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_2 := Create_Internal_Entity_Expr (Node => Ent.Node.Base_Call_Expr_F_Name, Info => Ent.Info);
--# expr-done 1897



   if Fld_2.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_3 := Fld_2.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 1898
Fld_3.Value := No_Entity;
Entity_Vars.Reset (Fld_3);






Cast_Expr := No_Entity_Type_Decl; 



   
      Cast_Result_1 := Create_Internal_Entity
        (Node => Cast_Expr.Node,
         Info => Cast_Expr.Info);


Bind_Result_1 := Solver.Create_Assign (Fld_3, Cast_Result_1, Solver_Ifc.No_Converter, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3212:18") else null)); 
--# expr-done 1899
And_Pred := Create_And (Bind_Result, Bind_Result_1, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3211:13") else null)); 
--# expr-done 1900
--# expr-start 1917 '<LogicAll at nodes.lkt:3214:14>' Logic_Boolean_Op nodes.lkt:3214
--# expr-start 1916 '<Map at nodes.lkt:3214:14>' Map_Result nodes.lkt:3214








   

   --# expr-start 1901 '<FieldAccess for args at nodes.lkt:3214:14>' Fld_4 nodes.lkt:3214







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_4 := Create_Internal_Entity_Param_List (Node => Ent.Node.Base_Call_Expr_F_Args, Info => Ent.Info);
--# expr-done 1901









Fld_5 := Fld_4.Node;

   
      declare
         Map_Result_Vec : Logic_Equation_Vectors.Vector;
      begin
   

   

      if Fld_5 = null then
         
      Map_Result := Create_Logic_Equation_Array (0);
   
      else
         

      declare
         
         Collection : constant Bare_Param_List := Fld_5;
      begin
         for Untyped_Item_0 of
               Collection.Nodes (1 .. Children_Count (Collection))
         loop
                  
                  Bare_Item_0 := Untyped_Item_0; 
                  



Is_Null := Bare_Item_0 = null; 
if Is_Null then
   
   If_Result := No_Entity_Param;
else
   








Fld_6 := Fld_4.Info;

As_Entity := (Info => Fld_6, Node => Bare_Item_0); 
   If_Result := As_Entity;
end if;



                  Item_0 := If_Result; 

            
   --# scope-start


               --# bind a Item_0

            
         
         
      --# expr-start 1915 '<LogicBinaryOp And at nodes.lkt:3216:13>' And_Pred_2 nodes.lkt:3216
--# expr-start 1907 '<LogicBinaryOp And at nodes.lkt:3217:17>' And_Pred_1 nodes.lkt:3217
--# expr-start 1902 '<FieldAccess for xref_equation at nodes.lkt:3217:17>' Fld_7 nodes.lkt:3217







   if Item_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]LktNode.xref_equation'
Fld_7 := Liblktlang.Implementation.Dispatcher_Lkt_Node_P_Xref_Equation (Node => Item_0.Node, E_Info => Item_0.Info);
--# end
--# expr-done 1902
--# expr-start 1906 '<Bind at nodes.lkt:3218:22>' Bind_Result_2 nodes.lkt:3218
--# expr-start 1904 '<FieldAccess for expected_type_var at nodes.lkt:3218:22>' Fld_9 nodes.lkt:3218



--# expr-start 1903 '<FieldAccess for value at nodes.lkt:3218:22>' Fld_8 nodes.lkt:3218







   if Item_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_8 := Create_Internal_Entity_Expr (Node => Item_0.Node.Param_F_Value, Info => Item_0.Info);
--# expr-done 1903



   if Fld_8.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_9 := Fld_8.Node.Expr_Expected_Type_Var'Unrestricted_Access;
--# expr-done 1904
Fld_9.Value := No_Entity;
Entity_Vars.Reset (Fld_9);





--# expr-start 1905 '<FieldAccess for equation_type at nodes.lkt:3218:51>' Fld_10 nodes.lkt:3218







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start LktNode.equation_type
Fld_10 := Liblktlang.Implementation.Lkt_Node_P_Equation_Type (Node => Ent.Node);
--# end
--# expr-done 1905



   
      Cast_Result_2 := Create_Internal_Entity
        (Node => Fld_10.Node,
         Info => Fld_10.Info);


Bind_Result_2 := Solver.Create_Assign (Fld_9, Cast_Result_2, Solver_Ifc.No_Converter, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3218:22") else null)); 
--# expr-done 1906
And_Pred_1 := Create_And (Fld_7, Bind_Result_2, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3217:17") else null)); 
--# expr-done 1907
--# expr-start 1914 '<bind at nodes.lkt:3221:17>' Dyn_Var_Bind_Result nodes.lkt:3221





--# expr-start 1908 '<FieldAccess for node at nodes.lkt:3221:39>' Fld_11 nodes.lkt:3221









Fld_11 := Item_0.Node;
--# expr-done 1908



   
      Cast_Result_3 := Fld_11;


Bound_Error_Location := Cast_Result_3; 
--# expr-start 1913 '<Predicate on TypeDecl.matching_type at nodes.lkt:3222:17>' Pred nodes.lkt:3222
--# expr-start 1910 '<FieldAccess for expected_type_var at nodes.lkt:3223:21>' Fld_13 nodes.lkt:3223



--# expr-start 1909 '<FieldAccess for value at nodes.lkt:3223:21>' Fld_12 nodes.lkt:3223







   if Item_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_12 := Create_Internal_Entity_Expr (Node => Item_0.Node.Param_F_Value, Info => Item_0.Info);
--# expr-done 1909



   if Fld_12.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_13 := Fld_12.Node.Expr_Expected_Type_Var'Unrestricted_Access;
--# expr-done 1910
Fld_13.Value := No_Entity;
Entity_Vars.Reset (Fld_13);
--# expr-start 1912 '<FieldAccess for actual_type_var at nodes.lkt:3224:21>' Fld_15 nodes.lkt:3224



--# expr-start 1911 '<FieldAccess for value at nodes.lkt:3224:21>' Fld_14 nodes.lkt:3224







   if Item_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_14 := Create_Internal_Entity_Expr (Node => Item_0.Node.Param_F_Value, Info => Item_0.Info);
--# expr-done 1911



   if Fld_14.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_15 := Fld_14.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 1912
Fld_15.Value := No_Entity;
Entity_Vars.Reset (Fld_15);


Pred := Solver.Create_N_Predicate ((Fld_13, Fld_15), Create_Type_Decl_P_Matching_Type_0_Predicate (2, Bound_Error_Location)); 
--# expr-done 1913
Dyn_Var_Bind_Result := Pred; Inc_Ref (Dyn_Var_Bind_Result);
--# expr-done 1914
And_Pred_2 := Create_And (And_Pred_1, Dyn_Var_Bind_Result, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3216:13") else null)); 
--# expr-done 1915
      

         declare
            Item_To_Append : constant Logic_Equation := And_Pred_2;
         begin
               Inc_Ref (Item_To_Append);
            Logic_Equation_Vectors.Append (Map_Result_Vec, Item_To_Append);
         end;
   
   
   

            
   --# end
      Finalizer_Scope_689;



         end loop;
      end;
   
      end if;

   

         Map_Result := Create_Logic_Equation_Array
           (Items_Count => Natural (Logic_Equation_Vectors.Length (Map_Result_Vec)));
         for I in Map_Result.Items'Range loop
            Map_Result.Items (I) := Logic_Equation_Vectors.Get
              (Map_Result_Vec,
               I + Logic_Equation_Vectors.Index_Type'First - Map_Result.Items'First);
         end loop;
         Logic_Equation_Vectors.Destroy (Map_Result_Vec);

      end;
   



--# expr-done 1916
Logic_Boolean_Op := Solver.Create_All (Relation_Array (Map_Result.Items), (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3214:14") else null)); 
--# expr-done 1917
And_Pred_3 := Create_And (And_Pred, Logic_Boolean_Op, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3210:9") else null)); 
--# expr-done 1918

         Property_Result := And_Pred_3;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_259;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_259;
                     Finalizer_Scope_689;




            raise;
      end;



   return Property_Result;
end Base_Call_Expr_P_Xlogic_Any_All;
--# end

   







--# property-start BaseCallExpr.xlogic_equation nodes.lkt:3230
pragma Warnings (Off, "is not referenced");
 function Base_Call_Expr_P_Xlogic_Equation
  
  (Node : Bare_Base_Call_Expr
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Logic_Equation
is
   Self : Bare_Base_Call_Expr  := Bare_Base_Call_Expr (Node);
     Ent : Internal_Entity_Base_Call_Expr :=
       Internal_Entity_Base_Call_Expr'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Logic_Equation;

      
            procedure Finalizer_Scope_260 with Inline_Always;
            procedure Finalizer_Scope_690 with Inline_Always;

      Var_Expr_0 : Internal_Entity_Ref_Id;
Fld : Internal_Entity_Expr;
Cast_Result : Internal_Entity_Ref_Id;
Fld_1 : Logic_Equation;
Fld_2 : Logic_Equation;
Fld_3 : Logic_Equation;
Fld_4 : Bare_Ref_Id;
Sym : Symbol_Type;
Sym_1 : Symbol_Type;
Is_Equal : Boolean;
If_Result : Logic_Equation;
Fld_5 : Bare_Ref_Id;
Sym_2 : Symbol_Type;
Sym_3 : Symbol_Type;
Is_Equal_1 : Boolean;
Fld_6 : Bare_Ref_Id;
Sym_4 : Symbol_Type;
Sym_5 : Symbol_Type;
Is_Equal_2 : Boolean;
If_Result_1 : Boolean;
If_Result_2 : Logic_Equation;
Scope_Result : Logic_Equation;
Fld_7 : Logic_Equation;
Result_Var : Logic_Equation;

            procedure Finalizer_Scope_260 is
            begin
                     Dec_Ref (Scope_Result);
                     Dec_Ref (Fld_7);
                     Dec_Ref (Result_Var);
            end Finalizer_Scope_260;
            procedure Finalizer_Scope_690 is
            begin
                     Dec_Ref (Fld_1);
                     Dec_Ref (Fld_2);
                     Dec_Ref (Fld_3);
                     Dec_Ref (If_Result);
                     Dec_Ref (If_Result_2);
            end Finalizer_Scope_690;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         


--# expr-start 1920 '<Cast to RefId at nodes.lkt:3231:9>' Cast_Result nodes.lkt:3231





--# expr-start 1919 '<FieldAccess for name at nodes.lkt:3231:9>' Fld nodes.lkt:3231







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Create_Internal_Entity_Expr (Node => Ent.Node.Base_Call_Expr_F_Name, Info => Ent.Info);
--# expr-done 1919



   if Fld.Node = null
      or else Fld.Node.Kind in Lkt_Ref_Id_Range
   then
      
      Cast_Result := Create_Internal_Entity_Ref_Id
        (Node => Fld.Node,
         Info => Fld.Info);

   else
         Cast_Result := No_Entity_Ref_Id;
   end if;


--# expr-done 1920
Var_Expr_0 := Cast_Result;





if Var_Expr_0 /= No_Entity_Ref_Id then
   



   --# scope-start


   --# bind ri Var_Expr_0

--# expr-start 1935 '<If at nodes.lkt:3233:13>' If_Result_2 nodes.lkt:3233



--# expr-start 1927 '<BooleanBinaryOp Or at nodes.lkt:3233:16>' If_Result_1 nodes.lkt:3233



--# expr-start 1923 '<Eq at nodes.lkt:3233:16>' Is_Equal_1 nodes.lkt:3233
--# expr-start 1921 '<GetSymbol at nodes.lkt:3233:16>' Sym_2 nodes.lkt:3233









Fld_5 := Var_Expr_0.Node; 
Sym_2 := Get_Symbol (Fld_5); 
--# expr-done 1921
--# expr-start 1922 '<Symbol all at nodes.lkt:3233:29>' Sym_3 nodes.lkt:3233
Sym_3 := Precomputed_Symbol (Precomputed_Symbol_Table (Self.Unit.Context.Symbols), Precomputed_Sym_All); 
--# expr-done 1922
Is_Equal_1 := Sym_2 = Sym_3; 
--# expr-done 1923
if Is_Equal_1 then
   
   If_Result_1 := True;
else
   --# expr-start 1926 '<Eq at nodes.lkt:3233:39>' Is_Equal_2 nodes.lkt:3233
--# expr-start 1924 '<GetSymbol at nodes.lkt:3233:39>' Sym_4 nodes.lkt:3233









Fld_6 := Var_Expr_0.Node; 
Sym_4 := Get_Symbol (Fld_6); 
--# expr-done 1924
--# expr-start 1925 '<Symbol any at nodes.lkt:3233:52>' Sym_5 nodes.lkt:3233
Sym_5 := Precomputed_Symbol (Precomputed_Symbol_Table (Self.Unit.Context.Symbols), Precomputed_Sym_Any); 
--# expr-done 1925
Is_Equal_2 := Sym_4 = Sym_5; 
--# expr-done 1926
   If_Result_1 := Is_Equal_2;
end if;



--# expr-done 1927
if If_Result_1 then
   --# expr-start 1928 '<FieldAccess for xlogic_any_all at nodes.lkt:3234:18>' Fld_1 nodes.lkt:3234







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start BaseCallExpr.xlogic_any_all
Fld_1 := Liblktlang.Implementation.Base_Call_Expr_P_Xlogic_Any_All (Node => Ent.Node, E_Info => Ent.Info);
--# end
--# expr-done 1928
   If_Result_2 := Fld_1;
else
   --# expr-start 1934 '<If at nodes.lkt:3233:13>' If_Result nodes.lkt:3233



--# expr-start 1931 '<Eq at nodes.lkt:3235:18>' Is_Equal nodes.lkt:3235
--# expr-start 1929 '<GetSymbol at nodes.lkt:3235:18>' Sym nodes.lkt:3235









Fld_4 := Var_Expr_0.Node; 
Sym := Get_Symbol (Fld_4); 
--# expr-done 1929
--# expr-start 1930 '<Symbol domain at nodes.lkt:3235:31>' Sym_1 nodes.lkt:3235
Sym_1 := Precomputed_Symbol (Precomputed_Symbol_Table (Self.Unit.Context.Symbols), Precomputed_Sym_Domain); 
--# expr-done 1930
Is_Equal := Sym = Sym_1; 
--# expr-done 1931
if Is_Equal then
   --# expr-start 1932 '<FieldAccess for xref_equation at nodes.lkt:3235:46>' Fld_2 nodes.lkt:3235







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]LktNode.xref_equation'
Fld_2 := Liblktlang.Implementation.Dispatcher_Lkt_Node_P_Xref_Equation (Node => Ent.Node, E_Info => Ent.Info);
--# end
--# expr-done 1932
   If_Result := Fld_2;
else
   --# expr-start 1933 '<FieldAccess for xlogic_unknown at nodes.lkt:3236:18>' Fld_3 nodes.lkt:3236







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start BaseCallExpr.xlogic_unknown
Fld_3 := Liblktlang.Implementation.Base_Call_Expr_P_Xlogic_Unknown (Node => Ent.Node, E_Info => Ent.Info);
--# end
--# expr-done 1933
   If_Result := Fld_3;
end if;

      Inc_Ref (If_Result);


--# expr-done 1934
   If_Result_2 := If_Result;
end if;

      Inc_Ref (If_Result_2);


--# expr-done 1935
Scope_Result := If_Result_2;
   Inc_Ref (Scope_Result);


   --# end
      Finalizer_Scope_690;


   Result_Var := Scope_Result;
else
   --# expr-start 1936 '<FieldAccess for xlogic_unknown at nodes.lkt:3237:25>' Fld_7 nodes.lkt:3237







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start BaseCallExpr.xlogic_unknown
Fld_7 := Liblktlang.Implementation.Base_Call_Expr_P_Xlogic_Unknown (Node => Ent.Node, E_Info => Ent.Info);
--# end
--# expr-done 1936
   Result_Var := Fld_7;
end if;

      Inc_Ref (Result_Var);



         Property_Result := Result_Var;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_260;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_260;
                     Finalizer_Scope_690;




            raise;
      end;



   return Property_Result;
end Base_Call_Expr_P_Xlogic_Equation;
--# end



   


      

   --
   --  Primitives for Bare_Call_Expr
   --

   



      
      procedure Initialize_Fields_For_Call_Expr
        (Self : Bare_Call_Expr
         ; Base_Call_Expr_F_Name : Bare_Expr
         ; Base_Call_Expr_F_Args : Bare_Param_List
        ) is
      begin
            Initialize_Fields_For_Base_Call_Expr
              (Self, Base_Call_Expr_F_Name, Base_Call_Expr_F_Args);

         

      end Initialize_Fields_For_Call_Expr;




   


      

   --
   --  Primitives for Bare_Logic_Call_Expr
   --

   



      
      procedure Initialize_Fields_For_Logic_Call_Expr
        (Self : Bare_Logic_Call_Expr
         ; Base_Call_Expr_F_Name : Bare_Expr
         ; Base_Call_Expr_F_Args : Bare_Param_List
        ) is
      begin
            Initialize_Fields_For_Base_Call_Expr
              (Self, Base_Call_Expr_F_Name, Base_Call_Expr_F_Args);

         

      end Initialize_Fields_For_Logic_Call_Expr;




   


      

   --
   --  Primitives for Bare_Logic_Predicate
   --

   



      
      procedure Initialize_Fields_For_Logic_Predicate
        (Self : Bare_Logic_Predicate
         ; Base_Call_Expr_F_Name : Bare_Expr
         ; Base_Call_Expr_F_Args : Bare_Param_List
        ) is
      begin
            Initialize_Fields_For_Logic_Call_Expr
              (Self, Base_Call_Expr_F_Name, Base_Call_Expr_F_Args);

         

      end Initialize_Fields_For_Logic_Predicate;


   







--# property-start LogicPredicate.generic_type_equation nodes.lkt:3254
pragma Warnings (Off, "is not referenced");
 function Logic_Predicate_P_Generic_Type_Equation
  
  (Node : Bare_Logic_Predicate
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Logic_Equation
is
   Self : Bare_Logic_Predicate  := Bare_Logic_Predicate (Node);
     Ent : Internal_Entity_Logic_Predicate :=
       Internal_Entity_Logic_Predicate'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Logic_Equation;

      
            procedure Finalizer_Scope_261 with Inline_Always;

      Bound_In_Logic_Call : Boolean;
Fld : Internal_Entity_Expr;
Fld_1 : Internal_Entity_Param_List;
Fld_2 : Logic_Equation;
Dyn_Var_Bind_Result : Logic_Equation;

            procedure Finalizer_Scope_261 is
            begin
                     Dec_Ref (Fld_2);
                     Dec_Ref (Dyn_Var_Bind_Result);
            end Finalizer_Scope_261;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 1940 '<bind at nodes.lkt:3255:9>' Dyn_Var_Bind_Result nodes.lkt:3255

Bound_In_Logic_Call := True; 
--# expr-start 1939 '<FieldAccess for call_generic_type_equation at nodes.lkt:3257:9>' Fld_2 nodes.lkt:3257







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# expr-start 1937 '<FieldAccess for name at nodes.lkt:3257:41>' Fld nodes.lkt:3257







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Create_Internal_Entity_Expr (Node => Ent.Node.Base_Call_Expr_F_Name, Info => Ent.Info);
--# expr-done 1937
--# expr-start 1938 '<FieldAccess for args at nodes.lkt:3257:52>' Fld_1 nodes.lkt:3257







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_1 := Create_Internal_Entity_Param_List (Node => Ent.Node.Base_Call_Expr_F_Args, Info => Ent.Info);
--# expr-done 1938
--# property-call-start Expr.call_generic_type_equation
Fld_2 := Liblktlang.Implementation.Expr_P_Call_Generic_Type_Equation (Node => Ent.Node, Name => Fld, Args => Fld_1, In_Logic_Call => Bound_In_Logic_Call);
--# end
--# expr-done 1939
Dyn_Var_Bind_Result := Fld_2; Inc_Ref (Dyn_Var_Bind_Result);
--# expr-done 1940

         Property_Result := Dyn_Var_Bind_Result;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_261;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_261;




            raise;
      end;



   return Property_Result;
end Logic_Predicate_P_Generic_Type_Equation;
--# end

   







--# property-start LogicPredicate.expected_type_equation nodes.lkt:3260
pragma Warnings (Off, "is not referenced");
 function Logic_Predicate_P_Expected_Type_Equation
  
  (Node : Bare_Logic_Predicate
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Logic_Equation
is
   Self : Bare_Logic_Predicate  := Bare_Logic_Predicate (Node);
     Ent : Internal_Entity_Logic_Predicate :=
       Internal_Entity_Logic_Predicate'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Logic_Equation;

      
            procedure Finalizer_Scope_262 with Inline_Always;

      Fld : Internal_Entity_Expr;
Fld_1 : Internal_Entity_Param_List;
Fld_2 : Logic_Equation;

            procedure Finalizer_Scope_262 is
            begin
                     Dec_Ref (Fld_2);
            end Finalizer_Scope_262;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 1943 '<FieldAccess for call_expected_type_equation at nodes.lkt:3261:9>' Fld_2 nodes.lkt:3261







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# expr-start 1941 '<FieldAccess for name at nodes.lkt:3261:42>' Fld nodes.lkt:3261







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Create_Internal_Entity_Expr (Node => Ent.Node.Base_Call_Expr_F_Name, Info => Ent.Info);
--# expr-done 1941
--# expr-start 1942 '<FieldAccess for args at nodes.lkt:3261:53>' Fld_1 nodes.lkt:3261







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_1 := Create_Internal_Entity_Param_List (Node => Ent.Node.Base_Call_Expr_F_Args, Info => Ent.Info);
--# expr-done 1942
--# property-call-start Expr.call_expected_type_equation
Fld_2 := Liblktlang.Implementation.Expr_P_Call_Expected_Type_Equation (Node => Ent.Node, Name => Fld, Args => Fld_1, E_Info => Ent.Info);
--# end
--# expr-done 1943

         Property_Result := Fld_2;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_262;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_262;




            raise;
      end;



   return Property_Result;
end Logic_Predicate_P_Expected_Type_Equation;
--# end

   







--# property-start LogicPredicate.xref_equation nodes.lkt:3263
pragma Warnings (Off, "is not referenced");
 function Logic_Predicate_P_Xref_Equation
  
  (Node : Bare_Logic_Predicate
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Logic_Equation
is
   Self : Bare_Logic_Predicate  := Bare_Logic_Predicate (Node);
     Ent : Internal_Entity_Logic_Predicate :=
       Internal_Entity_Logic_Predicate'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Logic_Equation;

      
            procedure Finalizer_Scope_263 with Inline_Always;

      Fld : Internal_Entity_Expr;
Fld_1 : Logic_Equation;
Bound_In_Logic_Call : Boolean;
Fld_2 : Internal_Entity_Expr;
Fld_3 : Internal_Entity_Param_List;
Fld_4 : Logic_Equation;
Dyn_Var_Bind_Result : Logic_Equation;
And_Pred : Logic_Equation;
Fld_5 : Bare_Expr;
Cast_Result : Bare_Lkt_Node;
Bound_Error_Location : Bare_Lkt_Node;
Fld_6 : Internal_Entity_Expr;
Fld_7 : Logic_Var;
Pred : Logic_Equation;
Dyn_Var_Bind_Result_1 : Logic_Equation;
And_Pred_1 : Logic_Equation;
Fld_8 : Logic_Var;
Fld_9 : Internal_Entity_Named_Type_Decl;
Cast_Result_1 : Internal_Entity;
Bind_Result : Logic_Equation;
And_Pred_2 : Logic_Equation;

            procedure Finalizer_Scope_263 is
            begin
                     Dec_Ref (Fld_1);
                     Dec_Ref (Fld_4);
                     Dec_Ref (Dyn_Var_Bind_Result);
                     Dec_Ref (And_Pred);
                     Dec_Ref (Pred);
                     Dec_Ref (Dyn_Var_Bind_Result_1);
                     Dec_Ref (And_Pred_1);
                     Dec_Ref (Bind_Result);
                     Dec_Ref (And_Pred_2);
            end Finalizer_Scope_263;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 1960 '<LogicBinaryOp And at nodes.lkt:3264:9>' And_Pred_2 nodes.lkt:3264
--# expr-start 1956 '<LogicBinaryOp And at nodes.lkt:3265:13>' And_Pred_1 nodes.lkt:3265
--# expr-start 1950 '<LogicBinaryOp And at nodes.lkt:3266:17>' And_Pred nodes.lkt:3266
--# expr-start 1945 '<FieldAccess for xlogic_equation at nodes.lkt:3266:17>' Fld_1 nodes.lkt:3266



--# expr-start 1944 '<FieldAccess for name at nodes.lkt:3266:17>' Fld nodes.lkt:3266







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Create_Internal_Entity_Expr (Node => Ent.Node.Base_Call_Expr_F_Name, Info => Ent.Info);
--# expr-done 1944



   if Fld.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]Expr.xlogic_equation'
Fld_1 := Liblktlang.Implementation.Dispatcher_Expr_P_Xlogic_Equation (Node => Fld.Node, E_Info => Fld.Info);
--# end
--# expr-done 1945
--# expr-start 1949 '<bind at nodes.lkt:3268:21>' Dyn_Var_Bind_Result nodes.lkt:3268

Bound_In_Logic_Call := True; 
--# expr-start 1948 '<FieldAccess for xref_call_equation at nodes.lkt:3270:21>' Fld_4 nodes.lkt:3270







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# expr-start 1946 '<FieldAccess for name at nodes.lkt:3270:45>' Fld_2 nodes.lkt:3270







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_2 := Create_Internal_Entity_Expr (Node => Ent.Node.Base_Call_Expr_F_Name, Info => Ent.Info);
--# expr-done 1946
--# expr-start 1947 '<FieldAccess for args at nodes.lkt:3270:56>' Fld_3 nodes.lkt:3270







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_3 := Create_Internal_Entity_Param_List (Node => Ent.Node.Base_Call_Expr_F_Args, Info => Ent.Info);
--# expr-done 1947
--# property-call-start Expr.xref_call_equation
Fld_4 := Liblktlang.Implementation.Expr_P_Xref_Call_Equation (Node => Ent.Node, Name => Fld_2, Args => Fld_3, In_Logic_Call => Bound_In_Logic_Call, E_Info => Ent.Info);
--# end
--# expr-done 1948
Dyn_Var_Bind_Result := Fld_4; Inc_Ref (Dyn_Var_Bind_Result);
--# expr-done 1949
And_Pred := Create_And (Fld_1, Dyn_Var_Bind_Result, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3266:17") else null)); 
--# expr-done 1950
--# expr-start 1955 '<bind at nodes.lkt:3274:17>' Dyn_Var_Bind_Result_1 nodes.lkt:3274





--# expr-start 1951 '<FieldAccess for name at nodes.lkt:3274:39>' Fld_5 nodes.lkt:3274







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_5 := Self.Base_Call_Expr_F_Name;
--# expr-done 1951



   
      Cast_Result := Fld_5;


Bound_Error_Location := Cast_Result; 
--# expr-start 1954 '<Predicate on FunctionType.returns_bool at nodes.lkt:3275:17>' Pred nodes.lkt:3275
--# expr-start 1953 '<FieldAccess for actual_type_var at nodes.lkt:3275:44>' Fld_7 nodes.lkt:3275



--# expr-start 1952 '<FieldAccess for name at nodes.lkt:3275:44>' Fld_6 nodes.lkt:3275







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_6 := Create_Internal_Entity_Expr (Node => Ent.Node.Base_Call_Expr_F_Name, Info => Ent.Info);
--# expr-done 1952



   if Fld_6.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_7 := Fld_6.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 1953
Fld_7.Value := No_Entity;
Entity_Vars.Reset (Fld_7);

Pred := Solver.Create_Predicate (Fld_7, Create_Function_Type_P_Returns_Bool_0_Predicate (Bound_Error_Location)); 
--# expr-done 1954
Dyn_Var_Bind_Result_1 := Pred; Inc_Ref (Dyn_Var_Bind_Result_1);
--# expr-done 1955
And_Pred_1 := Create_And (And_Pred, Dyn_Var_Bind_Result_1, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3265:13") else null)); 
--# expr-done 1956
--# expr-start 1959 '<Bind at nodes.lkt:3278:14>' Bind_Result nodes.lkt:3278
--# expr-start 1957 '<FieldAccess for actual_type_var at nodes.lkt:3278:14>' Fld_8 nodes.lkt:3278







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_8 := Ent.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 1957
Fld_8.Value := No_Entity;
Entity_Vars.Reset (Fld_8);





--# expr-start 1958 '<FieldAccess for equation_type at nodes.lkt:3278:38>' Fld_9 nodes.lkt:3278







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start LktNode.equation_type
Fld_9 := Liblktlang.Implementation.Lkt_Node_P_Equation_Type (Node => Ent.Node);
--# end
--# expr-done 1958



   
      Cast_Result_1 := Create_Internal_Entity
        (Node => Fld_9.Node,
         Info => Fld_9.Info);


Bind_Result := Solver.Create_Assign (Fld_8, Cast_Result_1, Solver_Ifc.No_Converter, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3278:14") else null)); 
--# expr-done 1959
And_Pred_2 := Create_And (And_Pred_1, Bind_Result, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3264:9") else null)); 
--# expr-done 1960

         Property_Result := And_Pred_2;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_263;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_263;




            raise;
      end;



   return Property_Result;
end Logic_Predicate_P_Xref_Equation;
--# end



   


      

   --
   --  Primitives for Bare_Logic_Propagate_Call
   --

   



      
      procedure Initialize_Fields_For_Logic_Propagate_Call
        (Self : Bare_Logic_Propagate_Call
         ; Base_Call_Expr_F_Name : Bare_Expr
         ; Base_Call_Expr_F_Args : Bare_Param_List
        ) is
      begin
            Initialize_Fields_For_Logic_Call_Expr
              (Self, Base_Call_Expr_F_Name, Base_Call_Expr_F_Args);

         

      end Initialize_Fields_For_Logic_Propagate_Call;




   


      

   --
   --  Primitives for Bare_Base_Dot_Expr
   --

   



      
      procedure Initialize_Fields_For_Base_Dot_Expr
        (Self : Bare_Base_Dot_Expr
         ; Base_Dot_Expr_F_Prefix : Bare_Expr
         ; Base_Dot_Expr_F_Suffix : Bare_Ref_Id
        ) is
      begin
            Initialize_Fields_For_Expr
              (Self);

            Self.Base_Dot_Expr_F_Prefix := Base_Dot_Expr_F_Prefix;
            Self.Base_Dot_Expr_F_Suffix := Base_Dot_Expr_F_Suffix;
         

      end Initialize_Fields_For_Base_Dot_Expr;

      
   function Base_Dot_Expr_F_Prefix
     (Node : Bare_Base_Dot_Expr) return Bare_Expr
   is
      

   begin
         
         return Node.Base_Dot_Expr_F_Prefix;
      
   end;

      
   function Base_Dot_Expr_F_Suffix
     (Node : Bare_Base_Dot_Expr) return Bare_Ref_Id
   is
      

   begin
         
         return Node.Base_Dot_Expr_F_Suffix;
      
   end;


   







--# property-start BaseDotExpr.referenced_decl nodes.lkt:3293
pragma Warnings (Off, "is not referenced");
 function Base_Dot_Expr_P_Referenced_Decl
  
  (Node : Bare_Base_Dot_Expr
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Internal_Entity_Decl
is
   Self : Bare_Base_Dot_Expr  := Bare_Base_Dot_Expr (Node);
     Ent : Internal_Entity_Base_Dot_Expr :=
       Internal_Entity_Base_Dot_Expr'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Internal_Entity_Decl;

      

      Fld : Internal_Entity_Ref_Id;
Fld_1 : Internal_Entity_Decl;



begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 1962 '<FieldAccess for referenced_decl at nodes.lkt:3293:43>' Fld_1 nodes.lkt:3293



--# expr-start 1961 '<FieldAccess for suffix at nodes.lkt:3293:43>' Fld nodes.lkt:3293







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Create_Internal_Entity_Ref_Id (Node => Ent.Node.Base_Dot_Expr_F_Suffix, Info => Ent.Info);
--# expr-done 1961



   if Fld.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]Expr.referenced_decl'
Fld_1 := Liblktlang.Implementation.Dispatcher_Expr_P_Referenced_Decl (Node => Fld.Node, E_Info => Fld.Info);
--# end
--# expr-done 1962

         Property_Result := Fld_1;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Base_Dot_Expr_P_Referenced_Decl;
--# end

   







--# property-start BaseDotExpr.has_context_free_type nodes.lkt:3295
pragma Warnings (Off, "is not referenced");
 function Base_Dot_Expr_P_Has_Context_Free_Type
  
  (Node : Bare_Base_Dot_Expr
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Boolean
is
   Self : Bare_Base_Dot_Expr  := Bare_Base_Dot_Expr (Node);
     Ent : Internal_Entity_Base_Dot_Expr :=
       Internal_Entity_Base_Dot_Expr'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Boolean;

      

      Fld : Internal_Entity_Expr;
Fld_1 : Boolean;
Fld_2 : Internal_Entity_Ref_Id;
Fld_3 : Boolean;
Not_Val : Boolean;
If_Result : Boolean;



begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         --# expr-start 1968 '<BooleanBinaryOp And at nodes.lkt:3296:9>' If_Result nodes.lkt:3296



--# expr-start 1964 '<FieldAccess for has_context_free_type at nodes.lkt:3296:9>' Fld_1 nodes.lkt:3296



--# expr-start 1963 '<FieldAccess for prefix at nodes.lkt:3296:9>' Fld nodes.lkt:3296







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Create_Internal_Entity_Expr (Node => Ent.Node.Base_Dot_Expr_F_Prefix, Info => Ent.Info);
--# expr-done 1963



   if Fld.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]Expr.has_context_free_type'
Fld_1 := Liblktlang.Implementation.Dispatcher_Expr_P_Has_Context_Free_Type (Node => Fld.Node, E_Info => Fld.Info);
--# end
--# expr-done 1964
if Fld_1 then
   --# expr-start 1967 '<Not at nodes.lkt:3297:13>' Not_Val nodes.lkt:3297
--# expr-start 1966 '<FieldAccess for is_being_called at nodes.lkt:3297:17>' Fld_3 nodes.lkt:3297



--# expr-start 1965 '<FieldAccess for suffix at nodes.lkt:3297:17>' Fld_2 nodes.lkt:3297







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_2 := Create_Internal_Entity_Ref_Id (Node => Ent.Node.Base_Dot_Expr_F_Suffix, Info => Ent.Info);
--# expr-done 1965



   if Fld_2.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start RefId.is_being_called
Fld_3 := Liblktlang.Implementation.Ref_Id_P_Is_Being_Called (Node => Fld_2.Node, E_Info => Fld_2.Info);
--# end
--# expr-done 1966
Not_Val := not (Fld_3); 
--# expr-done 1967
   If_Result := Not_Val;
else
   
   If_Result := False;
end if;



--# expr-done 1968

         Property_Result := If_Result;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Base_Dot_Expr_P_Has_Context_Free_Type;
--# end

   







--# property-start BaseDotExpr.first_var_in_prefix_env nodes.lkt:3302
pragma Warnings (Off, "is not referenced");
 function Base_Dot_Expr_P_First_Var_In_Prefix_Env
  
  (Node : Bare_Base_Dot_Expr
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Internal_Entity_Decl
is
   Self : Bare_Base_Dot_Expr  := Bare_Base_Dot_Expr (Node);
     Ent : Internal_Entity_Base_Dot_Expr :=
       Internal_Entity_Base_Dot_Expr'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Internal_Entity_Decl;

      
            procedure Finalizer_Scope_691 with Inline_Always;

      Match_0 : Internal_Entity_Ref_Id;
Match_1 : Internal_Entity_Base_Dot_Expr;
Match_2 : Internal_Entity_Expr;
Var_Expr_61 : Internal_Entity_Decl;
Var_Expr_62 : Internal_Entity_Decl;
Var_Expr_63 : Internal_Entity_Type_Decl;
Fld : Internal_Entity_Expr;
Fld_1 : Internal_Entity_Array_Access;
Is_A : Boolean;
Find_Result : Internal_Entity;
Bound_Origin : Internal_Entity;
Fld_2 : Internal_Entity_Expr;
Fld_3 : Internal_Entity_Type_Decl;
Fld_4 : Internal_Entity_Decl;
Dyn_Var_Bind_Result : Internal_Entity_Decl;
Fld_5 : Internal_Entity_Decl;
Fld_6 : Internal_Entity_Type_Decl;
Fld_7 : Internal_Entity_Ref_Id;
Fld_8 : Internal_Entity_Decl;
Scope_Result : Internal_Entity_Decl;
Result_Var : Internal_Entity_Decl;
Fld_9 : Boolean;
If_Result : Internal_Entity_Decl;
Fld_10 : Internal_Entity_Decl;
Fld_11 : Internal_Entity_Type_Decl;
Fld_12 : Internal_Entity_Ref_Id;
Fld_13 : Internal_Entity_Decl;
Scope_Result_1 : Internal_Entity_Decl;
Result_Var_1 : Internal_Entity_Decl;
Fld_14 : Internal_Entity_Type_Decl;
Fld_15 : Internal_Entity_Ref_Id;
Fld_16 : Internal_Entity_Decl;
Scope_Result_2 : Internal_Entity_Decl;
Result_Var_2 : Internal_Entity_Decl;
Match_Prefix : Internal_Entity_Expr;
Cast_Result : Internal_Entity_Ref_Id;
Let_Result : Internal_Entity_Decl;
Scope_Result_3 : Internal_Entity_Decl;
Cast_Result_1 : Internal_Entity_Base_Dot_Expr;
Let_Result_1 : Internal_Entity_Decl;
Scope_Result_4 : Internal_Entity_Decl;
Cast_Result_2 : Internal_Entity_Expr;
Let_Result_2 : Internal_Entity_Decl;
Scope_Result_5 : Internal_Entity_Decl;
Match_Result : Internal_Entity_Decl;

            procedure Finalizer_Scope_691 is
            begin
                     Dec_Ref (Fld_1);
            end Finalizer_Scope_691;

      
      Mmz_Handle : Memoization_Handle;
      Mmz_Val    : Mmz_Value;

      Mmz_Stored : Boolean;
      --  Whether the memoization couple was actually stored. Used to determine
      --  whether to inc-ref the memoized value.

      function Create_Mmz_Key return Mmz_Key;
      --  Create a memoization key for this property call and return it

      --------------------
      -- Create_Mmz_Key --
      --------------------

      function Create_Mmz_Key return Mmz_Key is
      begin
         return Mmz_K : Mmz_Key :=
           (Property => Mmz_Bare_Base_Dot_Expr_Base_Dot_Expr_P_First_Var_In_Prefix_Env,
            Items    => new Mmz_Key_Array (1 ..  2))
         do
            Mmz_K.Items (1) := (Kind => Mmz_Bare_Base_Dot_Expr,
                                As_Bare_Base_Dot_Expr => Self);
               Mmz_K.Items (2) :=
                 (Kind => Mmz_Internal_Entity_Info,
                  As_Internal_Entity_Info => E_Info);
         end return;
      end Create_Mmz_Key;

begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;

      if Self /= null then

         if not Self.Unit.Context.In_Populate_Lexical_Env then

            if Find_Memoized_Value
              (Self.Unit, Mmz_Handle, Mmz_Val, Create_Mmz_Key'Access)
            then
               --# memoization-lookup

               if Mmz_Val.Kind = Mmz_Evaluating then
                  --# memoization-return
                  Raise_Property_Exception
                    (Self,
                     Property_Error'Identity,
                     "Infinite recursion detected");

               elsif Mmz_Val.Kind = Mmz_Error then
                  --# memoization-return
                  Reraise_Memoized_Error (Mmz_Val);

               else
                  Property_Result := Mmz_Val.As_Internal_Entity_Decl;

                  --# memoization-return
                  return Property_Result;
               end if;
               --# end
            end if;

         end if;
      end if;

      begin
         
   --# scope-start

         --# expr-start 1990 '<Match at nodes.lkt:3302:51>' Match_Result nodes.lkt:3302






--# expr-start 1969 '<FieldAccess for prefix at nodes.lkt:3302:57>' Fld nodes.lkt:3302







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Create_Internal_Entity_Expr (Node => Ent.Node.Base_Dot_Expr_F_Prefix, Info => Ent.Info);
--# expr-done 1969



   if Fld.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Match_Prefix := Fld; 

case Lkt_Expr (Match_Prefix.Node.Kind) is
         when Lkt_Ref_Id =>
            



   --# scope-start



--# scope-start









   
      Cast_Result := Create_Internal_Entity_Ref_Id
        (Node => Match_Prefix.Node,
         Info => Match_Prefix.Info);


Match_0 := Cast_Result; 
--# bind rid Match_0
--# expr-start 1982 '<If at nodes.lkt:3304:13>' If_Result nodes.lkt:3304



--# expr-start 1970 '<FieldAccess for is_call_to_super at nodes.lkt:3304:16>' Fld_9 nodes.lkt:3304







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start BaseDotExpr.is_call_to_super
Fld_9 := Liblktlang.Implementation.Base_Dot_Expr_P_Is_Call_To_Super (Node => Ent.Node, E_Info => Ent.Info);
--# end
--# expr-done 1970
if Fld_9 then
   --# expr-start 1977 '<bind at nodes.lkt:3310:21>' Dyn_Var_Bind_Result nodes.lkt:3310
--# expr-start 1973 '<Find at nodes.lkt:3310:35>' Find_Result nodes.lkt:3310








   

   --# expr-start 1971 '<FieldAccess for parents at nodes.lkt:3310:35>' Fld_1 nodes.lkt:3310







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;



Fld_1 := Liblktlang.Implementation.Parents (Node => Ent.Node, With_Self => True, E_Info => Ent.Info);
--# expr-done 1971

   
      Find_Result := No_Entity;
   

   

      

      declare
         
         Collection : constant Internal_Entity_Array_Access := Fld_1;
      begin
         for Item_0 of
               Collection.Items
         loop

            
   --# scope-start


               --# bind p Item_0

            
      --# expr-start 1972 '<IsA FunDecl at nodes.lkt:3310:62>' Is_A nodes.lkt:3310

Is_A := Item_0.Node /= null 
and then Item_0.Node.Kind in Lkt_Fun_Decl_Range; 
--# expr-done 1972
      if Is_A then
         Find_Result := Item_0; 
      end if;
   

            
   --# end


               exit when Is_A;

         end loop;
      end;
   

   
   



--# expr-done 1973
Bound_Origin := Find_Result; 
--# expr-start 1976 '<FieldAccess for get_super_of_parent at nodes.lkt:3312:21>' Fld_4 nodes.lkt:3312



--# expr-start 1975 '<FieldAccess for get_type at nodes.lkt:3312:21>' Fld_3 nodes.lkt:3312



--# expr-start 1974 '<FieldAccess for prefix at nodes.lkt:3312:21>' Fld_2 nodes.lkt:3312







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_2 := Create_Internal_Entity_Expr (Node => Ent.Node.Base_Dot_Expr_F_Prefix, Info => Ent.Info);
--# expr-done 1974



   if Fld_2.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start Expr.get_type
Fld_3 := Liblktlang.Implementation.Expr_P_Get_Type (Node => Fld_2.Node, E_Info => Fld_2.Info);
--# end
--# expr-done 1975



   if Fld_3.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start TypeDecl.get_super_of_parent
Fld_4 := Liblktlang.Implementation.Type_Decl_P_Get_Super_Of_Parent (Node => Fld_3.Node, Origin => Bound_Origin, E_Info => Fld_3.Info);
--# end
--# expr-done 1976
Dyn_Var_Bind_Result := Fld_4; 
--# expr-done 1977
   If_Result := Dyn_Var_Bind_Result;
else
   


--# expr-start 1978 '<FieldAccess for referenced_decl at nodes.lkt:3316:17>' Fld_5 nodes.lkt:3316







   if Match_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]Expr.referenced_decl'
Fld_5 := Liblktlang.Implementation.Dispatcher_Expr_P_Referenced_Decl (Node => Match_0.Node, E_Info => Match_0.Info);
--# end
--# expr-done 1978
Var_Expr_61 := Fld_5;





if Var_Expr_61 /= No_Entity_Decl then
   



   --# scope-start


   

--# expr-start 1981 '<FieldAccess for ref_var_suffix_ref at nodes.lkt:3316:17>' Fld_8 nodes.lkt:3316







   if Var_Expr_61.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# expr-start 1979 '<FieldAccess for get_type at nodes.lkt:3317:21>' Fld_6 nodes.lkt:3317







   if Match_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start Expr.get_type
Fld_6 := Liblktlang.Implementation.Expr_P_Get_Type (Node => Match_0.Node, E_Info => Match_0.Info);
--# end
--# expr-done 1979
--# expr-start 1980 '<FieldAccess for suffix at nodes.lkt:3318:21>' Fld_7 nodes.lkt:3318







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_7 := Create_Internal_Entity_Ref_Id (Node => Ent.Node.Base_Dot_Expr_F_Suffix, Info => Ent.Info);
--# expr-done 1980
--# property-call-start Decl.ref_var_suffix_ref
Fld_8 := Liblktlang.Implementation.Decl_P_Ref_Var_Suffix_Ref (Node => Var_Expr_61.Node, Type_Var => Fld_6, Current_Name => Fld_7, E_Info => Var_Expr_61.Info);
--# end
--# expr-done 1981
Scope_Result := Fld_8;


   --# end


   Result_Var := Scope_Result;
else
   
   Result_Var := No_Entity_Decl;
end if;



   If_Result := Result_Var;
end if;



--# expr-done 1982
Let_Result := If_Result; 
--# end
Scope_Result_3 := Let_Result;


   --# end
      Finalizer_Scope_691;


            Match_Result := Scope_Result_3; 
         when Lkt_Dot_Expr .. Lkt_Null_Cond_Dotted_Name =>
            



   --# scope-start



--# scope-start









   
      Cast_Result_1 := Create_Internal_Entity_Base_Dot_Expr
        (Node => Match_Prefix.Node,
         Info => Match_Prefix.Info);


Match_1 := Cast_Result_1; 
--# bind de Match_1



--# expr-start 1983 '<FieldAccess for referenced_decl at nodes.lkt:3321:13>' Fld_10 nodes.lkt:3321







   if Match_1.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]Expr.referenced_decl'
Fld_10 := Liblktlang.Implementation.Dispatcher_Expr_P_Referenced_Decl (Node => Match_1.Node, E_Info => Match_1.Info);
--# end
--# expr-done 1983
Var_Expr_62 := Fld_10;





if Var_Expr_62 /= No_Entity_Decl then
   



   --# scope-start


   

--# expr-start 1986 '<FieldAccess for ref_var_suffix_ref at nodes.lkt:3321:13>' Fld_13 nodes.lkt:3321







   if Var_Expr_62.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# expr-start 1984 '<FieldAccess for get_type at nodes.lkt:3322:17>' Fld_11 nodes.lkt:3322







   if Match_1.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start Expr.get_type
Fld_11 := Liblktlang.Implementation.Expr_P_Get_Type (Node => Match_1.Node, E_Info => Match_1.Info);
--# end
--# expr-done 1984
--# expr-start 1985 '<FieldAccess for suffix at nodes.lkt:3323:17>' Fld_12 nodes.lkt:3323







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_12 := Create_Internal_Entity_Ref_Id (Node => Ent.Node.Base_Dot_Expr_F_Suffix, Info => Ent.Info);
--# expr-done 1985
--# property-call-start Decl.ref_var_suffix_ref
Fld_13 := Liblktlang.Implementation.Decl_P_Ref_Var_Suffix_Ref (Node => Var_Expr_62.Node, Type_Var => Fld_11, Current_Name => Fld_12, E_Info => Var_Expr_62.Info);
--# end
--# expr-done 1986
Scope_Result_1 := Fld_13;


   --# end


   Result_Var_1 := Scope_Result_1;
else
   
   Result_Var_1 := No_Entity_Decl;
end if;



Let_Result_1 := Result_Var_1; 
--# end
Scope_Result_4 := Let_Result_1;


   --# end


            Match_Result := Scope_Result_4; 
         when Lkt_Any_Of .. Lkt_Logic_Propagate_Call | Lkt_Bin_Op .. Lkt_Module_Ref_Id | Lkt_If_Expr .. Lkt_Un_Op =>
            



   --# scope-start



--# scope-start









   
      Cast_Result_2 := Create_Internal_Entity_Expr
        (Node => Match_Prefix.Node,
         Info => Match_Prefix.Info);


Match_2 := Cast_Result_2; 
--# bind expr Match_2



--# expr-start 1987 '<FieldAccess for get_type at nodes.lkt:3325:22>' Fld_14 nodes.lkt:3325







   if Match_2.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start Expr.get_type
Fld_14 := Liblktlang.Implementation.Expr_P_Get_Type (Node => Match_2.Node, E_Info => Match_2.Info);
--# end
--# expr-done 1987
Var_Expr_63 := Fld_14;





if Var_Expr_63 /= No_Entity_Type_Decl then
   



   --# scope-start


   

--# expr-start 1989 '<FieldAccess for type_var_suffix_ref at nodes.lkt:3325:22>' Fld_16 nodes.lkt:3325







   if Var_Expr_63.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# expr-start 1988 '<FieldAccess for suffix at nodes.lkt:3325:59>' Fld_15 nodes.lkt:3325







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_15 := Create_Internal_Entity_Ref_Id (Node => Ent.Node.Base_Dot_Expr_F_Suffix, Info => Ent.Info);
--# expr-done 1988
--# property-call-start Decl.type_var_suffix_ref
Fld_16 := Liblktlang.Implementation.Decl_P_Type_Var_Suffix_Ref (Node => Var_Expr_63.Node, Current_Name => Fld_15, E_Info => Var_Expr_63.Info);
--# end
--# expr-done 1989
Scope_Result_2 := Fld_16;


   --# end


   Result_Var_2 := Scope_Result_2;
else
   
   Result_Var_2 := No_Entity_Decl;
end if;



Let_Result_2 := Result_Var_2; 
--# end
Scope_Result_5 := Let_Result_2;


   --# end


            Match_Result := Scope_Result_5; 
end case;

--# expr-done 1990

         Property_Result := Match_Result;
         
   --# end


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_691;


               if Self /= null then
                     if not Self.Unit.Context.In_Populate_Lexical_Env then
                        Add_Memoized_Error
                          (Self.Unit, Mmz_Handle, Exc, Mmz_Stored);
                     end if;
               end if;


            raise;
      end;

      if Self /= null then
         if not Self.Unit.Context.In_Populate_Lexical_Env then

            Mmz_Val := (Kind => Mmz_Internal_Entity_Decl,
                        As_Internal_Entity_Decl => Property_Result);
            Add_Memoized_Value (Self.Unit, Mmz_Handle, Mmz_Val, Mmz_Stored);

         end if;
      end if;



   return Property_Result;
end Base_Dot_Expr_P_First_Var_In_Prefix_Env;
--# end

   







--# property-start BaseDotExpr.xtype_equation nodes.lkt:3328
pragma Warnings (Off, "is not referenced");
 function Base_Dot_Expr_P_Xtype_Equation
  
  (Node : Bare_Base_Dot_Expr
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Logic_Equation
is
   Self : Bare_Base_Dot_Expr  := Bare_Base_Dot_Expr (Node);
     Ent : Internal_Entity_Base_Dot_Expr :=
       Internal_Entity_Base_Dot_Expr'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Logic_Equation;

      
            procedure Finalizer_Scope_267 with Inline_Always;

      Fld : Internal_Entity_Ref_Id;
Fld_1 : Logic_Var;
Fld_2 : Internal_Entity_Decl;
Cast_Result : Internal_Entity;
Bind_Result : Logic_Equation;
Fld_3 : Bare_Ref_Id;
Cast_Result_1 : Bare_Lkt_Node;
Bound_Error_Location : Bare_Lkt_Node;
Fld_4 : Internal_Entity_Ref_Id;
Fld_5 : Logic_Var;
Pred : Logic_Equation;
Dyn_Var_Bind_Result : Logic_Equation;
And_Pred : Logic_Equation;

            procedure Finalizer_Scope_267 is
            begin
                     Dec_Ref (Bind_Result);
                     Dec_Ref (Pred);
                     Dec_Ref (Dyn_Var_Bind_Result);
                     Dec_Ref (And_Pred);
            end Finalizer_Scope_267;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 2000 '<LogicBinaryOp And at nodes.lkt:3329:9>' And_Pred nodes.lkt:3329
--# expr-start 1994 '<Bind at nodes.lkt:3329:9>' Bind_Result nodes.lkt:3329
--# expr-start 1992 '<FieldAccess for ref_var at nodes.lkt:3329:9>' Fld_1 nodes.lkt:3329



--# expr-start 1991 '<FieldAccess for suffix at nodes.lkt:3329:9>' Fld nodes.lkt:3329







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Create_Internal_Entity_Ref_Id (Node => Ent.Node.Base_Dot_Expr_F_Suffix, Info => Ent.Info);
--# expr-done 1991



   if Fld.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_1 := Fld.Node.Ref_Id_Ref_Var'Unrestricted_Access;
--# expr-done 1992
Fld_1.Value := No_Entity;
Entity_Vars.Reset (Fld_1);





--# expr-start 1993 '<FieldAccess for first_var_in_prefix_env at nodes.lkt:3329:32>' Fld_2 nodes.lkt:3329







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start BaseDotExpr.first_var_in_prefix_env
Fld_2 := Liblktlang.Implementation.Base_Dot_Expr_P_First_Var_In_Prefix_Env (Node => Ent.Node, E_Info => Ent.Info);
--# end
--# expr-done 1993



   
      Cast_Result := Create_Internal_Entity
        (Node => Fld_2.Node,
         Info => Fld_2.Info);


Bind_Result := Solver.Create_Assign (Fld_1, Cast_Result, Solver_Ifc.No_Converter, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3329:9") else null)); 
--# expr-done 1994
--# expr-start 1999 '<bind at nodes.lkt:3331:13>' Dyn_Var_Bind_Result nodes.lkt:3331





--# expr-start 1995 '<FieldAccess for suffix at nodes.lkt:3331:35>' Fld_3 nodes.lkt:3331







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_3 := Self.Base_Dot_Expr_F_Suffix;
--# expr-done 1995



   
      Cast_Result_1 := Fld_3;


Bound_Error_Location := Cast_Result_1; 
--# expr-start 1998 '<Predicate on Decl.is_defined at nodes.lkt:3332:13>' Pred nodes.lkt:3332
--# expr-start 1997 '<FieldAccess for ref_var at nodes.lkt:3332:30>' Fld_5 nodes.lkt:3332



--# expr-start 1996 '<FieldAccess for suffix at nodes.lkt:3332:30>' Fld_4 nodes.lkt:3332







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_4 := Create_Internal_Entity_Ref_Id (Node => Ent.Node.Base_Dot_Expr_F_Suffix, Info => Ent.Info);
--# expr-done 1996



   if Fld_4.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_5 := Fld_4.Node.Ref_Id_Ref_Var'Unrestricted_Access;
--# expr-done 1997
Fld_5.Value := No_Entity;
Entity_Vars.Reset (Fld_5);

Pred := Solver.Create_Predicate (Fld_5, Create_Decl_P_Is_Defined_0_Predicate (Bound_Error_Location)); 
--# expr-done 1998
Dyn_Var_Bind_Result := Pred; Inc_Ref (Dyn_Var_Bind_Result);
--# expr-done 1999
And_Pred := Create_And (Bind_Result, Dyn_Var_Bind_Result, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3329:9") else null)); 
--# expr-done 2000

         Property_Result := And_Pred;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_267;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_267;




            raise;
      end;



   return Property_Result;
end Base_Dot_Expr_P_Xtype_Equation;
--# end

   







--# property-start BaseDotExpr.is_call_to_super nodes.lkt:3337
pragma Warnings (Off, "is not referenced");
 function Base_Dot_Expr_P_Is_Call_To_Super
  
  (Node : Bare_Base_Dot_Expr
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Boolean
is
   Self : Bare_Base_Dot_Expr  := Bare_Base_Dot_Expr (Node);
     Ent : Internal_Entity_Base_Dot_Expr :=
       Internal_Entity_Base_Dot_Expr'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Boolean;

      
            procedure Finalizer_Scope_268 with Inline_Always;

      Local_Self_Decl : Internal_Entity_Self_Decl;
Local_Node_Decl : Internal_Entity_Node_Decl;
Var_Expr_0 : Internal_Entity_Decl;
Var_Expr_64 : Bare_Ref_Id;
Fld : Lexical_Env := Empty_Env;
Sym : Symbol_Type;
Env_Get_Result : Internal_Entity;
Cast_Result : Internal_Entity_Self_Decl;
Fld_1 : Lexical_Env := Empty_Env;
Sym_1 : Symbol_Type;
Env_Get_Result_1 : Internal_Entity;
Cast_Result_1 : Internal_Entity_Node_Decl;
Is_Null : Boolean;
Is_Null_1 : Boolean;
If_Result : Boolean;
Not_Val : Boolean;
Fld_2 : Bare_Ref_Id;
Sym_2 : Symbol_Type;
Scope_Result : Symbol_Type;
Result_Var : Symbol_Type;
Sym_3 : Symbol_Type;
Is_Equal : Boolean;
Fld_3 : Internal_Entity_Expr;
Cast_Result_2 : Internal_Entity_Ref_Id;
Fld_4 : Internal_Entity_Decl;
Cast_Expr : Internal_Entity_Self_Decl;
Cast_Result_3 : Internal_Entity;
Cast_Expr_1 : Internal_Entity_Decl;
Cast_Result_4 : Internal_Entity;
Is_Equiv : Boolean;
Cast_Expr_2 : Internal_Entity_Node_Decl;
Cast_Result_5 : Internal_Entity;
Cast_Expr_3 : Internal_Entity_Decl;
Cast_Result_6 : Internal_Entity;
Is_Equiv_1 : Boolean;
If_Result_1 : Boolean;
Scope_Result_1 : Boolean;
Result_Var_1 : Boolean;
If_Result_2 : Boolean;
If_Result_3 : Boolean;
Let_Result : Boolean;
Let_Result_1 : Boolean;

            procedure Finalizer_Scope_268 is
            begin
                     Dec_Ref (Fld);
                     Dec_Ref (Fld_1);
            end Finalizer_Scope_268;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 2026 '<Let at nodes.lkt:3338:9>' Let_Result_1 nodes.lkt:3338
--# scope-start
--# expr-start 2004 '<Cast to SelfDecl at nodes.lkt:3338:25>' Cast_Result nodes.lkt:3338





--# expr-start 2003 '<EnvGet at nodes.lkt:3338:25>' Env_Get_Result nodes.lkt:3338
--# expr-start 2001 '<FieldAccess for node_env at nodes.lkt:3338:25>' Fld nodes.lkt:3338







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Liblktlang.Implementation.Node_Env (Node => Self);
--# expr-done 2001
--# expr-start 2002 '<Symbol self at nodes.lkt:3338:49>' Sym nodes.lkt:3338
Sym := Precomputed_Symbol (Precomputed_Symbol_Table (Self.Unit.Context.Symbols), Precomputed_Sym_Self); 
--# expr-done 2002


Env_Get_Result := AST_Envs.Get_First (Self => Fld, Key => Thin (Sym), Lookup_Kind => To_Lookup_Kind_Type (Recursive), Categories => (Nocat => True)); 
--# expr-done 2003



   if Env_Get_Result.Node = null
      or else Env_Get_Result.Node.Kind in Lkt_Self_Decl_Range
   then
      
      Cast_Result := Create_Internal_Entity_Self_Decl
        (Node => Env_Get_Result.Node,
         Info => Env_Get_Result.Info);

   else
         Cast_Result := No_Entity_Self_Decl;
   end if;


--# expr-done 2004
Local_Self_Decl := Cast_Result; 
--# bind self_decl Local_Self_Decl
--# expr-start 2025 '<Let at nodes.lkt:3339:9>' Let_Result nodes.lkt:3339
--# scope-start
--# expr-start 2008 '<Cast to NodeDecl at nodes.lkt:3339:25>' Cast_Result_1 nodes.lkt:3339





--# expr-start 2007 '<EnvGet at nodes.lkt:3339:25>' Env_Get_Result_1 nodes.lkt:3339
--# expr-start 2005 '<FieldAccess for node_env at nodes.lkt:3339:25>' Fld_1 nodes.lkt:3339







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_1 := Liblktlang.Implementation.Node_Env (Node => Self);
--# expr-done 2005
--# expr-start 2006 '<Symbol node at nodes.lkt:3339:49>' Sym_1 nodes.lkt:3339
Sym_1 := Precomputed_Symbol (Precomputed_Symbol_Table (Self.Unit.Context.Symbols), Precomputed_Sym_Node_47); 
--# expr-done 2006


Env_Get_Result_1 := AST_Envs.Get_First (Self => Fld_1, Key => Thin (Sym_1), Lookup_Kind => To_Lookup_Kind_Type (Recursive), Categories => (Nocat => True)); 
--# expr-done 2007



   if Env_Get_Result_1.Node = null
      or else Env_Get_Result_1.Node.Kind in Lkt_Node_Decl_Range
   then
      
      Cast_Result_1 := Create_Internal_Entity_Node_Decl
        (Node => Env_Get_Result_1.Node,
         Info => Env_Get_Result_1.Info);

   else
         Cast_Result_1 := No_Entity_Node_Decl;
   end if;


--# expr-done 2008
Local_Node_Decl := Cast_Result_1; 
--# bind node_decl Local_Node_Decl
--# expr-start 2024 '<BooleanBinaryOp And at nodes.lkt:3341:9>' If_Result_3 nodes.lkt:3341



--# expr-start 2012 '<Not at nodes.lkt:3341:9>' Not_Val nodes.lkt:3341
--# expr-start 2011 '<BooleanBinaryOp Or at nodes.lkt:3341:14>' If_Result nodes.lkt:3341



--# expr-start 2009 '<IsNull at nodes.lkt:3341:14>' Is_Null nodes.lkt:3341

Is_Null := Local_Self_Decl.Node = null; 
--# expr-done 2009
if Is_Null then
   
   If_Result := True;
else
   --# expr-start 2010 '<IsNull at nodes.lkt:3341:35>' Is_Null_1 nodes.lkt:3341

Is_Null_1 := Local_Node_Decl.Node = null; 
--# expr-done 2010
   If_Result := Is_Null_1;
end if;



--# expr-done 2011
Not_Val := not (If_Result); 
--# expr-done 2012
if Not_Val then
   --# expr-start 2023 '<BooleanBinaryOp And at nodes.lkt:3343:13>' If_Result_2 nodes.lkt:3343



--# expr-start 2016 '<Eq at nodes.lkt:3343:13>' Is_Equal nodes.lkt:3343



--# expr-start 2013 '<FieldAccess for suffix at nodes.lkt:3343:13>' Fld_2 nodes.lkt:3343







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_2 := Self.Base_Dot_Expr_F_Suffix;
--# expr-done 2013
Var_Expr_64 := Fld_2;





if Var_Expr_64 /= No_Bare_Lkt_Node then
   



   --# scope-start


   

--# expr-start 2014 '<GetSymbol at nodes.lkt:3343:13>' Sym_2 nodes.lkt:3343

Sym_2 := Get_Symbol (Var_Expr_64); 
--# expr-done 2014
Scope_Result := Sym_2;


   --# end


   Result_Var := Scope_Result;
else
   
   Result_Var := No_Symbol;
end if;



--# expr-start 2015 '<Symbol super at nodes.lkt:3343:36>' Sym_3 nodes.lkt:3343
Sym_3 := Precomputed_Symbol (Precomputed_Symbol_Table (Self.Unit.Context.Symbols), Precomputed_Sym_Super); 
--# expr-done 2015
Is_Equal := Result_Var = Sym_3; 
--# expr-done 2016
if Is_Equal then
   


--# expr-start 2019 '<FieldAccess for first_var_in_env at nodes.lkt:3344:17>' Fld_4 nodes.lkt:3344



--# expr-start 2018 '<Cast to RefId at nodes.lkt:3344:17>' Cast_Result_2 nodes.lkt:3344





--# expr-start 2017 '<FieldAccess for prefix at nodes.lkt:3344:17>' Fld_3 nodes.lkt:3344







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_3 := Create_Internal_Entity_Expr (Node => Ent.Node.Base_Dot_Expr_F_Prefix, Info => Ent.Info);
--# expr-done 2017



   if Fld_3.Node = null
      or else Fld_3.Node.Kind in Lkt_Ref_Id_Range
   then
      
      Cast_Result_2 := Create_Internal_Entity_Ref_Id
        (Node => Fld_3.Node,
         Info => Fld_3.Info);

   else
         Cast_Result_2 := No_Entity_Ref_Id;
   end if;


--# expr-done 2018



   if Cast_Result_2.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start RefId.first_var_in_env
Fld_4 := Liblktlang.Implementation.Ref_Id_P_First_Var_In_Env (Node => Cast_Result_2.Node, E_Info => Cast_Result_2.Info);
--# end
--# expr-done 2019
Var_Expr_0 := Fld_4;





if Var_Expr_0 /= No_Entity_Decl then
   



   --# scope-start


   --# bind first_var Var_Expr_0

--# expr-start 2022 '<BooleanBinaryOp Or at nodes.lkt:3345:32>' If_Result_1 nodes.lkt:3345



--# expr-start 2020 '<Eq at nodes.lkt:3345:32>' Is_Equiv nodes.lkt:3345






Cast_Expr := Local_Self_Decl; 



   
      Cast_Result_3 := Create_Internal_Entity
        (Node => Cast_Expr.Node,
         Info => Cast_Expr.Info);








Cast_Expr_1 := Var_Expr_0; 



   
      Cast_Result_4 := Create_Internal_Entity
        (Node => Cast_Expr_1.Node,
         Info => Cast_Expr_1.Info);


Is_Equiv := Equivalent (Cast_Result_3, Cast_Result_4); 
--# expr-done 2020
if Is_Equiv then
   
   If_Result_1 := True;
else
   --# expr-start 2021 '<Eq at nodes.lkt:3345:58>' Is_Equiv_1 nodes.lkt:3345






Cast_Expr_2 := Local_Node_Decl; 



   
      Cast_Result_5 := Create_Internal_Entity
        (Node => Cast_Expr_2.Node,
         Info => Cast_Expr_2.Info);








Cast_Expr_3 := Var_Expr_0; 



   
      Cast_Result_6 := Create_Internal_Entity
        (Node => Cast_Expr_3.Node,
         Info => Cast_Expr_3.Info);


Is_Equiv_1 := Equivalent (Cast_Result_5, Cast_Result_6); 
--# expr-done 2021
   If_Result_1 := Is_Equiv_1;
end if;



--# expr-done 2022
Scope_Result_1 := If_Result_1;


   --# end


   Result_Var_1 := Scope_Result_1;
else
   
   Result_Var_1 := False;
end if;



   If_Result_2 := Result_Var_1;
else
   
   If_Result_2 := False;
end if;



--# expr-done 2023
   If_Result_3 := If_Result_2;
else
   
   If_Result_3 := False;
end if;



--# expr-done 2024
Let_Result := If_Result_3; 
--# end
--# expr-done 2025
Let_Result_1 := Let_Result; 
--# end
--# expr-done 2026

         Property_Result := Let_Result_1;
         
   --# end
      Finalizer_Scope_268;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_268;




            raise;
      end;



   return Property_Result;
end Base_Dot_Expr_P_Is_Call_To_Super;
--# end

   







--# property-start BaseDotExpr.generic_type_equation nodes.lkt:3350
pragma Warnings (Off, "is not referenced");
 function Base_Dot_Expr_P_Generic_Type_Equation
  
  (Node : Bare_Base_Dot_Expr
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Logic_Equation
is
   Self : Bare_Base_Dot_Expr  := Bare_Base_Dot_Expr (Node);
     Ent : Internal_Entity_Base_Dot_Expr :=
       Internal_Entity_Base_Dot_Expr'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Logic_Equation;

      
            procedure Finalizer_Scope_269 with Inline_Always;

      Var_Expr_65 : Internal_Entity_Decl;
Fld : Internal_Entity_Ref_Id;
Fld_1 : Logic_Var;
Fld_2 : Internal_Entity_Decl;
Fld_3 : Internal_Entity_Function_Type;
Scope_Result : Internal_Entity_Function_Type;
Result_Var : Internal_Entity_Function_Type;
Cast_Result : Internal_Entity;
Bind_Result : Logic_Equation;
Fld_4 : Logic_Var;
Fld_5 : Internal_Entity_Ref_Id;
Fld_6 : Logic_Var;
Bind_Result_1 : Logic_Equation;
And_Pred : Logic_Equation;

            procedure Finalizer_Scope_269 is
            begin
                     Dec_Ref (Bind_Result);
                     Dec_Ref (Bind_Result_1);
                     Dec_Ref (And_Pred);
            end Finalizer_Scope_269;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 2036 '<LogicBinaryOp And at nodes.lkt:3351:9>' And_Pred nodes.lkt:3351
--# expr-start 2031 '<Bind at nodes.lkt:3353:13>' Bind_Result nodes.lkt:3353
--# expr-start 2028 '<FieldAccess for generic_func_type_var at nodes.lkt:3353:13>' Fld_1 nodes.lkt:3353



--# expr-start 2027 '<FieldAccess for suffix at nodes.lkt:3353:13>' Fld nodes.lkt:3353







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Create_Internal_Entity_Ref_Id (Node => Ent.Node.Base_Dot_Expr_F_Suffix, Info => Ent.Info);
--# expr-done 2027



   if Fld.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_1 := Fld.Node.Expr_Generic_Func_Type_Var'Unrestricted_Access;
--# expr-done 2028
Fld_1.Value := No_Entity;
Entity_Vars.Reset (Fld_1);








--# expr-start 2029 '<FieldAccess for first_var_in_prefix_env at nodes.lkt:3354:16>' Fld_2 nodes.lkt:3354







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start BaseDotExpr.first_var_in_prefix_env
Fld_2 := Liblktlang.Implementation.Base_Dot_Expr_P_First_Var_In_Prefix_Env (Node => Ent.Node, E_Info => Ent.Info);
--# end
--# expr-done 2029
Var_Expr_65 := Fld_2;





if Var_Expr_65 /= No_Entity_Decl then
   



   --# scope-start


   

--# expr-start 2030 '<FieldAccess for function_type at nodes.lkt:3354:16>' Fld_3 nodes.lkt:3354







   if Var_Expr_65.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start Decl.function_type
Fld_3 := Liblktlang.Implementation.Decl_P_Function_Type (Node => Var_Expr_65.Node, E_Info => Var_Expr_65.Info);
--# end
--# expr-done 2030
Scope_Result := Fld_3;


   --# end


   Result_Var := Scope_Result;
else
   
   Result_Var := No_Entity_Function_Type;
end if;






   
      Cast_Result := Create_Internal_Entity
        (Node => Result_Var.Node,
         Info => Result_Var.Info);


Bind_Result := Solver.Create_Assign (Fld_1, Cast_Result, Solver_Ifc.No_Converter, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3353:13") else null)); 
--# expr-done 2031
--# expr-start 2035 '<Bind at nodes.lkt:3356:14>' Bind_Result_1 nodes.lkt:3356
--# expr-start 2032 '<FieldAccess for generic_func_type_var at nodes.lkt:3356:14>' Fld_4 nodes.lkt:3356







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_4 := Ent.Node.Expr_Generic_Func_Type_Var'Unrestricted_Access;
--# expr-done 2032
Fld_4.Value := No_Entity;
Entity_Vars.Reset (Fld_4);
--# expr-start 2034 '<FieldAccess for generic_func_type_var at nodes.lkt:3356:45>' Fld_6 nodes.lkt:3356



--# expr-start 2033 '<FieldAccess for suffix at nodes.lkt:3356:45>' Fld_5 nodes.lkt:3356







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_5 := Create_Internal_Entity_Ref_Id (Node => Ent.Node.Base_Dot_Expr_F_Suffix, Info => Ent.Info);
--# expr-done 2033



   if Fld_5.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_6 := Fld_5.Node.Expr_Generic_Func_Type_Var'Unrestricted_Access;
--# expr-done 2034
Fld_6.Value := No_Entity;
Entity_Vars.Reset (Fld_6);
Bind_Result_1 := Solver.Create_Unify (Fld_4, Fld_6, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3356:14") else null)); 
--# expr-done 2035
And_Pred := Create_And (Bind_Result, Bind_Result_1, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3351:9") else null)); 
--# expr-done 2036

         Property_Result := And_Pred;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_269;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_269;




            raise;
      end;



   return Property_Result;
end Base_Dot_Expr_P_Generic_Type_Equation;
--# end

   







--# property-start BaseDotExpr.expected_type_equation nodes.lkt:3358
pragma Warnings (Off, "is not referenced");
 function Base_Dot_Expr_P_Expected_Type_Equation
  
  (Node : Bare_Base_Dot_Expr
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Logic_Equation
is
   Self : Bare_Base_Dot_Expr  := Bare_Base_Dot_Expr (Node);
     Ent : Internal_Entity_Base_Dot_Expr :=
       Internal_Entity_Base_Dot_Expr'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Logic_Equation;

      
            procedure Finalizer_Scope_270 with Inline_Always;

      Fld : Internal_Entity_Expr;
Fld_1 : Logic_Var;
Cast_Expr : Internal_Entity_Type_Decl;
Cast_Result : Internal_Entity;
Bind_Result : Logic_Equation;

            procedure Finalizer_Scope_270 is
            begin
                     Dec_Ref (Bind_Result);
            end Finalizer_Scope_270;


begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         --# expr-start 2039 '<Bind at nodes.lkt:3359:9>' Bind_Result nodes.lkt:3359
--# expr-start 2038 '<FieldAccess for expected_type_var at nodes.lkt:3359:9>' Fld_1 nodes.lkt:3359



--# expr-start 2037 '<FieldAccess for prefix at nodes.lkt:3359:9>' Fld nodes.lkt:3359







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Create_Internal_Entity_Expr (Node => Ent.Node.Base_Dot_Expr_F_Prefix, Info => Ent.Info);
--# expr-done 2037



   if Fld.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_1 := Fld.Node.Expr_Expected_Type_Var'Unrestricted_Access;
--# expr-done 2038
Fld_1.Value := No_Entity;
Entity_Vars.Reset (Fld_1);






Cast_Expr := No_Entity_Type_Decl; 



   
      Cast_Result := Create_Internal_Entity
        (Node => Cast_Expr.Node,
         Info => Cast_Expr.Info);


Bind_Result := Solver.Create_Assign (Fld_1, Cast_Result, Solver_Ifc.No_Converter, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3359:9") else null)); 
--# expr-done 2039

         Property_Result := Bind_Result;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_270;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_270;




            raise;
      end;



   return Property_Result;
end Base_Dot_Expr_P_Expected_Type_Equation;
--# end

   







--# property-start BaseDotExpr.xref_typing_equation nodes.lkt:3362
pragma Warnings (Off, "is not referenced");
 function Base_Dot_Expr_P_Xref_Typing_Equation
  
  (Node : Bare_Base_Dot_Expr
      ; In_Logic_Call : Boolean
         := False
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Logic_Equation
is
   Self : Bare_Base_Dot_Expr  := Bare_Base_Dot_Expr (Node);
     Ent : Internal_Entity_Base_Dot_Expr :=
       Internal_Entity_Base_Dot_Expr'(Node => Self, Info => E_Info);
      --# bind entity Ent

   

   --# bind in_logic_call In_Logic_Call

   Property_Result : Logic_Equation;

      
            procedure Finalizer_Scope_271 with Inline_Always;

      Var_Expr_66 : Internal_Entity_Type_Decl;
Var_Expr_67 : Internal_Entity_Decl;
Fld : Logic_Var;
Cast_Expr : Internal_Entity_Type_Decl;
Cast_Result : Internal_Entity;
Bind_Result : Logic_Equation;
Fld_1 : Internal_Entity_Ref_Id;
Fld_2 : Logic_Var;
Fld_3 : Internal_Entity_Decl;
Cast_Result_1 : Internal_Entity;
Bind_Result_1 : Logic_Equation;
Fld_4 : Bare_Ref_Id;
Cast_Result_2 : Bare_Lkt_Node;
Bound_Error_Location : Bare_Lkt_Node;
Fld_5 : Internal_Entity_Ref_Id;
Fld_6 : Logic_Var;
Pred : Logic_Equation;
Dyn_Var_Bind_Result : Logic_Equation;
And_Pred : Logic_Equation;
Fld_7 : Logic_Var;
Fld_8 : Internal_Entity_Ref_Id;
Fld_9 : Internal_Entity_Type_Decl;
Fld_10 : Internal_Entity_Type_Decl;
Cast_Result_3 : Internal_Entity_Function_Type;
Fld_11 : Internal_Entity_Function_Type;
Scope_Result : Internal_Entity_Function_Type;
Result_Var : Internal_Entity_Function_Type;
Cast_Result_4 : Internal_Entity;
Bind_Result_2 : Logic_Equation;
Fld_12 : Internal_Entity_Ref_Id;
Fld_13 : Logic_Var;
Fld_14 : Internal_Entity_Decl;
Fld_15 : Internal_Entity_Expr;
Fld_16 : Internal_Entity_Type_Decl;
Fld_17 : Internal_Entity_Type_Decl;
Scope_Result_1 : Internal_Entity_Type_Decl;
Result_Var_1 : Internal_Entity_Type_Decl;
Cast_Result_5 : Internal_Entity;
Bind_Result_3 : Logic_Equation;
Fld_18 : Internal_Entity_Ref_Id;
Fld_19 : Boolean;
If_Result : Logic_Equation;
And_Pred_1 : Logic_Equation;
Fld_20 : Logic_Var;
Fld_21 : Internal_Entity_Ref_Id;
Fld_22 : Logic_Var;
Bind_Result_4 : Logic_Equation;
And_Pred_2 : Logic_Equation;
Fld_23 : Internal_Entity_Ref_Id;
Is_Null : Boolean;
If_Result_1 : Logic_Equation;

            procedure Finalizer_Scope_271 is
            begin
                     Dec_Ref (Bind_Result);
                     Dec_Ref (Bind_Result_1);
                     Dec_Ref (Pred);
                     Dec_Ref (Dyn_Var_Bind_Result);
                     Dec_Ref (And_Pred);
                     Dec_Ref (Bind_Result_2);
                     Dec_Ref (Bind_Result_3);
                     Dec_Ref (If_Result);
                     Dec_Ref (And_Pred_1);
                     Dec_Ref (Bind_Result_4);
                     Dec_Ref (And_Pred_2);
                     Dec_Ref (If_Result_1);
            end Finalizer_Scope_271;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 2077 '<If at nodes.lkt:3363:9>' If_Result_1 nodes.lkt:3363



--# expr-start 2041 '<IsNull at nodes.lkt:3363:12>' Is_Null nodes.lkt:3363
--# expr-start 2040 '<FieldAccess for suffix at nodes.lkt:3363:12>' Fld_23 nodes.lkt:3363







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_23 := Create_Internal_Entity_Ref_Id (Node => Ent.Node.Base_Dot_Expr_F_Suffix, Info => Ent.Info);
--# expr-done 2040
Is_Null := Fld_23.Node = null; 
--# expr-done 2041
if Is_Null then
   --# expr-start 2043 '<Bind at nodes.lkt:3367:13>' Bind_Result nodes.lkt:3367
--# expr-start 2042 '<FieldAccess for actual_type_var at nodes.lkt:3367:13>' Fld nodes.lkt:3367







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Ent.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 2042
Fld.Value := No_Entity;
Entity_Vars.Reset (Fld);






Cast_Expr := No_Entity_Type_Decl; 



   
      Cast_Result := Create_Internal_Entity
        (Node => Cast_Expr.Node,
         Info => Cast_Expr.Info);


Bind_Result := Solver.Create_Assign (Fld, Cast_Result, Solver_Ifc.No_Converter, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3367:13") else null)); 
--# expr-done 2043
   If_Result_1 := Bind_Result;
else
   --# expr-start 2076 '<LogicBinaryOp And at nodes.lkt:3371:13>' And_Pred_2 nodes.lkt:3371
--# expr-start 2071 '<LogicBinaryOp And at nodes.lkt:3372:17>' And_Pred_1 nodes.lkt:3372
--# expr-start 2053 '<LogicBinaryOp And at nodes.lkt:3373:21>' And_Pred nodes.lkt:3373
--# expr-start 2047 '<Bind at nodes.lkt:3373:21>' Bind_Result_1 nodes.lkt:3373
--# expr-start 2045 '<FieldAccess for ref_var at nodes.lkt:3373:21>' Fld_2 nodes.lkt:3373



--# expr-start 2044 '<FieldAccess for suffix at nodes.lkt:3373:21>' Fld_1 nodes.lkt:3373







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_1 := Create_Internal_Entity_Ref_Id (Node => Ent.Node.Base_Dot_Expr_F_Suffix, Info => Ent.Info);
--# expr-done 2044



   if Fld_1.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_2 := Fld_1.Node.Ref_Id_Ref_Var'Unrestricted_Access;
--# expr-done 2045
Fld_2.Value := No_Entity;
Entity_Vars.Reset (Fld_2);





--# expr-start 2046 '<FieldAccess for first_var_in_prefix_env at nodes.lkt:3373:44>' Fld_3 nodes.lkt:3373







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start BaseDotExpr.first_var_in_prefix_env
Fld_3 := Liblktlang.Implementation.Base_Dot_Expr_P_First_Var_In_Prefix_Env (Node => Ent.Node, E_Info => Ent.Info);
--# end
--# expr-done 2046



   
      Cast_Result_1 := Create_Internal_Entity
        (Node => Fld_3.Node,
         Info => Fld_3.Info);


Bind_Result_1 := Solver.Create_Assign (Fld_2, Cast_Result_1, Solver_Ifc.No_Converter, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3373:21") else null)); 
--# expr-done 2047
--# expr-start 2052 '<bind at nodes.lkt:3375:25>' Dyn_Var_Bind_Result nodes.lkt:3375





--# expr-start 2048 '<FieldAccess for suffix at nodes.lkt:3375:47>' Fld_4 nodes.lkt:3375







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_4 := Self.Base_Dot_Expr_F_Suffix;
--# expr-done 2048



   
      Cast_Result_2 := Fld_4;


Bound_Error_Location := Cast_Result_2; 
--# expr-start 2051 '<Predicate on Decl.is_defined at nodes.lkt:3376:25>' Pred nodes.lkt:3376
--# expr-start 2050 '<FieldAccess for ref_var at nodes.lkt:3376:42>' Fld_6 nodes.lkt:3376



--# expr-start 2049 '<FieldAccess for suffix at nodes.lkt:3376:42>' Fld_5 nodes.lkt:3376







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_5 := Create_Internal_Entity_Ref_Id (Node => Ent.Node.Base_Dot_Expr_F_Suffix, Info => Ent.Info);
--# expr-done 2049



   if Fld_5.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_6 := Fld_5.Node.Ref_Id_Ref_Var'Unrestricted_Access;
--# expr-done 2050
Fld_6.Value := No_Entity;
Entity_Vars.Reset (Fld_6);

Pred := Solver.Create_Predicate (Fld_6, Create_Decl_P_Is_Defined_0_Predicate (Bound_Error_Location)); 
--# expr-done 2051
Dyn_Var_Bind_Result := Pred; Inc_Ref (Dyn_Var_Bind_Result);
--# expr-done 2052
And_Pred := Create_And (Bind_Result_1, Dyn_Var_Bind_Result, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3373:21") else null)); 
--# expr-done 2053
--# expr-start 2070 '<If at nodes.lkt:3380:21>' If_Result nodes.lkt:3380



--# expr-start 2055 '<FieldAccess for is_being_called at nodes.lkt:3380:24>' Fld_19 nodes.lkt:3380



--# expr-start 2054 '<FieldAccess for suffix at nodes.lkt:3380:24>' Fld_18 nodes.lkt:3380







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_18 := Create_Internal_Entity_Ref_Id (Node => Ent.Node.Base_Dot_Expr_F_Suffix, Info => Ent.Info);
--# expr-done 2054



   if Fld_18.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start RefId.is_being_called
Fld_19 := Liblktlang.Implementation.Ref_Id_P_Is_Being_Called (Node => Fld_18.Node, E_Info => Fld_18.Info);
--# end
--# expr-done 2055
if Fld_19 then
   --# expr-start 2062 '<Bind at nodes.lkt:3382:25>' Bind_Result_2 nodes.lkt:3382
--# expr-start 2056 '<FieldAccess for actual_type_var at nodes.lkt:3382:25>' Fld_7 nodes.lkt:3382







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_7 := Ent.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 2056
Fld_7.Value := No_Entity;
Entity_Vars.Reset (Fld_7);








--# expr-start 2058 '<FieldAccess for get_generic_type at nodes.lkt:3383:28>' Fld_9 nodes.lkt:3383



--# expr-start 2057 '<FieldAccess for suffix at nodes.lkt:3383:28>' Fld_8 nodes.lkt:3383







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_8 := Create_Internal_Entity_Ref_Id (Node => Ent.Node.Base_Dot_Expr_F_Suffix, Info => Ent.Info);
--# expr-done 2057



   if Fld_8.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start Expr.get_generic_type
Fld_9 := Liblktlang.Implementation.Expr_P_Get_Generic_Type (Node => Fld_8.Node, E_Info => Fld_8.Info);
--# end
--# expr-done 2058
Var_Expr_66 := Fld_9;





if Var_Expr_66 /= No_Entity_Type_Decl then
   



   --# scope-start


   

--# expr-start 2061 '<FieldAccess for infer_function_type at nodes.lkt:3383:28>' Fld_11 nodes.lkt:3383







   if Var_Expr_66.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# expr-start 2060 '<Cast to FunctionType at nodes.lkt:3384:29>' Cast_Result_3 nodes.lkt:3384





--# expr-start 2059 '<FieldAccess for get_expected_type at nodes.lkt:3384:29>' Fld_10 nodes.lkt:3384







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start Expr.get_expected_type
Fld_10 := Liblktlang.Implementation.Expr_P_Get_Expected_Type (Node => Ent.Node, E_Info => Ent.Info);
--# end
--# expr-done 2059



   if Fld_10.Node = null
      or else Fld_10.Node.Kind in Lkt_Function_Type_Range
   then
      
      Cast_Result_3 := Create_Internal_Entity_Function_Type
        (Node => Fld_10.Node,
         Info => Fld_10.Info);

   else
         Cast_Result_3 := No_Entity_Function_Type;
   end if;


--# expr-done 2060
--# property-call-start Decl.infer_function_type
Fld_11 := Liblktlang.Implementation.Decl_P_Infer_Function_Type (Node => Var_Expr_66.Node, Expected_Call => Cast_Result_3, In_Logic_Call => In_Logic_Call, E_Info => Var_Expr_66.Info);
--# end
--# expr-done 2061
Scope_Result := Fld_11;


   --# end


   Result_Var := Scope_Result;
else
   
   Result_Var := No_Entity_Function_Type;
end if;






   
      Cast_Result_4 := Create_Internal_Entity
        (Node => Result_Var.Node,
         Info => Result_Var.Info);


Bind_Result_2 := Solver.Create_Assign (Fld_7, Cast_Result_4, Solver_Ifc.No_Converter, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3382:25") else null)); 
--# expr-done 2062
   If_Result := Bind_Result_2;
else
   --# expr-start 2069 '<Bind at nodes.lkt:3390:25>' Bind_Result_3 nodes.lkt:3390
--# expr-start 2064 '<FieldAccess for actual_type_var at nodes.lkt:3390:25>' Fld_13 nodes.lkt:3390



--# expr-start 2063 '<FieldAccess for suffix at nodes.lkt:3390:25>' Fld_12 nodes.lkt:3390







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_12 := Create_Internal_Entity_Ref_Id (Node => Ent.Node.Base_Dot_Expr_F_Suffix, Info => Ent.Info);
--# expr-done 2063



   if Fld_12.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_13 := Fld_12.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 2064
Fld_13.Value := No_Entity;
Entity_Vars.Reset (Fld_13);








--# expr-start 2065 '<FieldAccess for first_var_in_prefix_env at nodes.lkt:3391:28>' Fld_14 nodes.lkt:3391







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start BaseDotExpr.first_var_in_prefix_env
Fld_14 := Liblktlang.Implementation.Base_Dot_Expr_P_First_Var_In_Prefix_Env (Node => Ent.Node, E_Info => Ent.Info);
--# end
--# expr-done 2065
Var_Expr_67 := Fld_14;





if Var_Expr_67 /= No_Entity_Decl then
   



   --# scope-start


   

--# expr-start 2068 '<FieldAccess for get_suffix_type at nodes.lkt:3391:28>' Fld_17 nodes.lkt:3391







   if Var_Expr_67.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# expr-start 2067 '<FieldAccess for get_type at nodes.lkt:3392:29>' Fld_16 nodes.lkt:3392



--# expr-start 2066 '<FieldAccess for prefix at nodes.lkt:3392:29>' Fld_15 nodes.lkt:3392







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_15 := Create_Internal_Entity_Expr (Node => Ent.Node.Base_Dot_Expr_F_Prefix, Info => Ent.Info);
--# expr-done 2066



   if Fld_15.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start Expr.get_type
Fld_16 := Liblktlang.Implementation.Expr_P_Get_Type (Node => Fld_15.Node, E_Info => Fld_15.Info);
--# end
--# expr-done 2067
--# property-call-start Decl.get_suffix_type
Fld_17 := Liblktlang.Implementation.Decl_P_Get_Suffix_Type (Node => Var_Expr_67.Node, Prefix_Type => Fld_16, E_Info => Var_Expr_67.Info);
--# end
--# expr-done 2068
Scope_Result_1 := Fld_17;


   --# end


   Result_Var_1 := Scope_Result_1;
else
   
   Result_Var_1 := No_Entity_Type_Decl;
end if;






   
      Cast_Result_5 := Create_Internal_Entity
        (Node => Result_Var_1.Node,
         Info => Result_Var_1.Info);


Bind_Result_3 := Solver.Create_Assign (Fld_13, Cast_Result_5, Solver_Ifc.No_Converter, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3390:25") else null)); 
--# expr-done 2069
   If_Result := Bind_Result_3;
end if;

      Inc_Ref (If_Result);


--# expr-done 2070
And_Pred_1 := Create_And (And_Pred, If_Result, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3372:17") else null)); 
--# expr-done 2071
--# expr-start 2075 '<Bind at nodes.lkt:3399:17>' Bind_Result_4 nodes.lkt:3399
--# expr-start 2072 '<FieldAccess for actual_type_var at nodes.lkt:3399:17>' Fld_20 nodes.lkt:3399







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_20 := Ent.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 2072
Fld_20.Value := No_Entity;
Entity_Vars.Reset (Fld_20);
--# expr-start 2074 '<FieldAccess for actual_type_var at nodes.lkt:3399:42>' Fld_22 nodes.lkt:3399



--# expr-start 2073 '<FieldAccess for suffix at nodes.lkt:3399:42>' Fld_21 nodes.lkt:3399







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_21 := Create_Internal_Entity_Ref_Id (Node => Ent.Node.Base_Dot_Expr_F_Suffix, Info => Ent.Info);
--# expr-done 2073



   if Fld_21.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_22 := Fld_21.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 2074
Fld_22.Value := No_Entity;
Entity_Vars.Reset (Fld_22);
Bind_Result_4 := Solver.Create_Unify (Fld_20, Fld_22, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3399:17") else null)); 
--# expr-done 2075
And_Pred_2 := Create_And (And_Pred_1, Bind_Result_4, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3371:13") else null)); 
--# expr-done 2076
   If_Result_1 := And_Pred_2;
end if;

      Inc_Ref (If_Result_1);


--# expr-done 2077

         Property_Result := If_Result_1;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_271;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_271;




            raise;
      end;



   return Property_Result;
end Base_Dot_Expr_P_Xref_Typing_Equation;
--# end

   







--# property-start BaseDotExpr.xref_equation nodes.lkt:3403
pragma Warnings (Off, "is not referenced");
 function Base_Dot_Expr_P_Xref_Equation
  
  (Node : Bare_Base_Dot_Expr
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Logic_Equation
is
   Self : Bare_Base_Dot_Expr  := Bare_Base_Dot_Expr (Node);
     Ent : Internal_Entity_Base_Dot_Expr :=
       Internal_Entity_Base_Dot_Expr'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Logic_Equation;

      
            procedure Finalizer_Scope_272 with Inline_Always;

      Fld : Logic_Equation;

            procedure Finalizer_Scope_272 is
            begin
                     Dec_Ref (Fld);
            end Finalizer_Scope_272;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 2078 '<FieldAccess for xref_typing_equation at nodes.lkt:3408:9>' Fld nodes.lkt:3408







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start BaseDotExpr.xref_typing_equation
Fld := Liblktlang.Implementation.Base_Dot_Expr_P_Xref_Typing_Equation (Node => Ent.Node, In_Logic_Call => False, E_Info => Ent.Info);
--# end
--# expr-done 2078

         Property_Result := Fld;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_272;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_272;




            raise;
      end;



   return Property_Result;
end Base_Dot_Expr_P_Xref_Equation;
--# end

   







--# property-start BaseDotExpr.xlogic_equation nodes.lkt:3410
pragma Warnings (Off, "is not referenced");
 function Base_Dot_Expr_P_Xlogic_Equation
  
  (Node : Bare_Base_Dot_Expr
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Logic_Equation
is
   Self : Bare_Base_Dot_Expr  := Bare_Base_Dot_Expr (Node);
     Ent : Internal_Entity_Base_Dot_Expr :=
       Internal_Entity_Base_Dot_Expr'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Logic_Equation;

      
            procedure Finalizer_Scope_273 with Inline_Always;

      Bound_In_Logic_Call : Boolean;
Fld : Logic_Equation;
Dyn_Var_Bind_Result : Logic_Equation;

            procedure Finalizer_Scope_273 is
            begin
                     Dec_Ref (Fld);
                     Dec_Ref (Dyn_Var_Bind_Result);
            end Finalizer_Scope_273;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 2080 '<bind at nodes.lkt:3411:9>' Dyn_Var_Bind_Result nodes.lkt:3411

Bound_In_Logic_Call := True; 
--# expr-start 2079 '<FieldAccess for xref_typing_equation at nodes.lkt:3413:9>' Fld nodes.lkt:3413







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start BaseDotExpr.xref_typing_equation
Fld := Liblktlang.Implementation.Base_Dot_Expr_P_Xref_Typing_Equation (Node => Ent.Node, In_Logic_Call => Bound_In_Logic_Call, E_Info => Ent.Info);
--# end
--# expr-done 2079
Dyn_Var_Bind_Result := Fld; Inc_Ref (Dyn_Var_Bind_Result);
--# expr-done 2080

         Property_Result := Dyn_Var_Bind_Result;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_273;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_273;




            raise;
      end;



   return Property_Result;
end Base_Dot_Expr_P_Xlogic_Equation;
--# end



   


      

   --
   --  Primitives for Bare_Dot_Expr
   --

   



      
      procedure Initialize_Fields_For_Dot_Expr
        (Self : Bare_Dot_Expr
         ; Base_Dot_Expr_F_Prefix : Bare_Expr
         ; Base_Dot_Expr_F_Suffix : Bare_Ref_Id
        ) is
      begin
            Initialize_Fields_For_Base_Dot_Expr
              (Self, Base_Dot_Expr_F_Prefix, Base_Dot_Expr_F_Suffix);

         

      end Initialize_Fields_For_Dot_Expr;




   


      

   --
   --  Primitives for Bare_Null_Cond_Dotted_Name
   --

   



      
      procedure Initialize_Fields_For_Null_Cond_Dotted_Name
        (Self : Bare_Null_Cond_Dotted_Name
         ; Base_Dot_Expr_F_Prefix : Bare_Expr
         ; Base_Dot_Expr_F_Suffix : Bare_Ref_Id
        ) is
      begin
            Initialize_Fields_For_Base_Dot_Expr
              (Self, Base_Dot_Expr_F_Prefix, Base_Dot_Expr_F_Suffix);

         

      end Initialize_Fields_For_Null_Cond_Dotted_Name;




   


      

   --
   --  Primitives for Bare_Bin_Op
   --

   



      
      procedure Initialize_Fields_For_Bin_Op
        (Self : Bare_Bin_Op
         ; Bin_Op_F_Left : Bare_Expr
         ; Bin_Op_F_Op : Bare_Op
         ; Bin_Op_F_Right : Bare_Expr
        ) is
      begin
            Initialize_Fields_For_Expr
              (Self);

            Self.Bin_Op_F_Left := Bin_Op_F_Left;
            Self.Bin_Op_F_Op := Bin_Op_F_Op;
            Self.Bin_Op_F_Right := Bin_Op_F_Right;
         

      end Initialize_Fields_For_Bin_Op;

      
   function Bin_Op_F_Left
     (Node : Bare_Bin_Op) return Bare_Expr
   is
      

   begin
         
         return Node.Bin_Op_F_Left;
      
   end;

      
   function Bin_Op_F_Op
     (Node : Bare_Bin_Op) return Bare_Op
   is
      

   begin
         
         return Node.Bin_Op_F_Op;
      
   end;

      
   function Bin_Op_F_Right
     (Node : Bare_Bin_Op) return Bare_Expr
   is
      

   begin
         
         return Node.Bin_Op_F_Right;
      
   end;


   







--# property-start BinOp.xref_equation nodes.lkt:3434
pragma Warnings (Off, "is not referenced");
 function Bin_Op_P_Xref_Equation
  
  (Node : Bare_Bin_Op
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Logic_Equation
is
   Self : Bare_Bin_Op  := Bare_Bin_Op (Node);
     Ent : Internal_Entity_Bin_Op :=
       Internal_Entity_Bin_Op'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Logic_Equation;

      
            procedure Finalizer_Scope_274 with Inline_Always;

      Fld : Internal_Entity_Expr;
Fld_1 : Logic_Equation;
Fld_2 : Internal_Entity_Expr;
Fld_3 : Logic_Equation;
And_Pred : Logic_Equation;
Fld_4 : Internal_Entity_Expr;
Fld_5 : Logic_Var;
Fld_6 : Internal_Entity_Expr;
Fld_7 : Logic_Var;
Bind_Result : Logic_Equation;
And_Pred_1 : Logic_Equation;
Fld_8 : Internal_Entity_Expr;
Fld_9 : Logic_Var;
Fld_10 : Internal_Entity_Expr;
Fld_11 : Logic_Var;
Bind_Result_1 : Logic_Equation;
And_Pred_2 : Logic_Equation;
Fld_12 : Bare_Expr;
Cast_Result : Bare_Lkt_Node;
Bound_Error_Location : Bare_Lkt_Node;
Fld_13 : Internal_Entity_Expr;
Fld_14 : Logic_Var;
Fld_15 : Internal_Entity_Expr;
Fld_16 : Logic_Var;
Fld_17 : Internal_Entity_Op;
Fld_18 : Boolean;
Fld_19 : Internal_Entity_Op;
Is_A : Boolean;
If_Result : Boolean;
Pred : Logic_Equation;
Dyn_Var_Bind_Result : Logic_Equation;
And_Pred_3 : Logic_Equation;
Fld_20 : Logic_Var;
Fld_21 : Internal_Entity_Named_Type_Decl;
Cast_Result_1 : Internal_Entity;
Bind_Result_2 : Logic_Equation;
Fld_22 : Bare_Expr;
Cast_Result_2 : Bare_Lkt_Node;
Bound_Error_Location_1 : Bare_Lkt_Node;
Fld_23 : Internal_Entity_Expr;
Fld_24 : Logic_Var;
Pred_1 : Logic_Equation;
Dyn_Var_Bind_Result_1 : Logic_Equation;
And_Pred_4 : Logic_Equation;
Fld_25 : Logic_Var;
Fld_26 : Internal_Entity_Named_Type_Decl;
Cast_Result_3 : Internal_Entity;
Bind_Result_3 : Logic_Equation;
Fld_27 : Bare_Expr;
Cast_Result_4 : Bare_Lkt_Node;
Bound_Error_Location_2 : Bare_Lkt_Node;
Fld_28 : Internal_Entity_Expr;
Fld_29 : Logic_Var;
Pred_2 : Logic_Equation;
Dyn_Var_Bind_Result_2 : Logic_Equation;
And_Pred_5 : Logic_Equation;
Fld_30 : Logic_Var;
Fld_31 : Internal_Entity_Named_Type_Decl;
Cast_Result_5 : Internal_Entity;
Bind_Result_4 : Logic_Equation;
Fld_32 : Bare_Expr;
Cast_Result_6 : Bare_Lkt_Node;
Bound_Error_Location_3 : Bare_Lkt_Node;
Fld_33 : Internal_Entity_Expr;
Fld_34 : Logic_Var;
Pred_3 : Logic_Equation;
Dyn_Var_Bind_Result_3 : Logic_Equation;
And_Pred_6 : Logic_Equation;
Fld_35 : Bare_Expr;
Cast_Result_7 : Bare_Lkt_Node;
Bound_Error_Location_4 : Bare_Lkt_Node;
Fld_36 : Internal_Entity_Expr;
Fld_37 : Logic_Var;
Pred_4 : Logic_Equation;
Dyn_Var_Bind_Result_4 : Logic_Equation;
And_Pred_7 : Logic_Equation;
Fld_38 : Logic_Var;
Fld_39 : Internal_Entity_Expr;
Fld_40 : Logic_Var;
Bind_Result_5 : Logic_Equation;
Fld_41 : Bare_Expr;
Cast_Result_8 : Bare_Lkt_Node;
Bound_Error_Location_5 : Bare_Lkt_Node;
Fld_42 : Internal_Entity_Expr;
Fld_43 : Logic_Var;
Pred_5 : Logic_Equation;
Dyn_Var_Bind_Result_5 : Logic_Equation;
And_Pred_8 : Logic_Equation;
Fld_44 : Bare_Expr;
Cast_Result_9 : Bare_Lkt_Node;
Bound_Error_Location_6 : Bare_Lkt_Node;
Fld_45 : Internal_Entity_Expr;
Fld_46 : Logic_Var;
Pred_6 : Logic_Equation;
Dyn_Var_Bind_Result_6 : Logic_Equation;
And_Pred_9 : Logic_Equation;
Fld_47 : Logic_Var;
Fld_48 : Internal_Entity_Expr;
Fld_49 : Logic_Var;
Bind_Result_6 : Logic_Equation;
Fld_50 : Bare_Expr;
Cast_Result_10 : Bare_Lkt_Node;
Bound_Error_Location_7 : Bare_Lkt_Node;
Fld_51 : Internal_Entity_Expr;
Fld_52 : Logic_Var;
Pred_7 : Logic_Equation;
Dyn_Var_Bind_Result_7 : Logic_Equation;
And_Pred_10 : Logic_Equation;
Fld_53 : Bare_Expr;
Cast_Result_11 : Bare_Lkt_Node;
Bound_Error_Location_8 : Bare_Lkt_Node;
Fld_54 : Internal_Entity_Expr;
Fld_55 : Logic_Var;
Pred_8 : Logic_Equation;
Dyn_Var_Bind_Result_8 : Logic_Equation;
And_Pred_11 : Logic_Equation;
Fld_56 : Logic_Var;
Fld_57 : Internal_Entity_Expr;
Fld_58 : Logic_Var;
Fld_59 : Internal_Entity_Expr;
Fld_60 : Logic_Var;
Array_Lit : Logic_Var_Array_Access;
Logic_Vars : Logic_Var_Array_Access;
Bind_Result_7 : Logic_Equation;
Fld_61 : Logic_Var;
Fld_62 : Internal_Entity_Named_Type_Decl;
Cast_Result_12 : Internal_Entity;
Bind_Result_8 : Logic_Equation;
Fld_63 : Internal_Entity_Op;
Is_A_1 : Boolean;
If_Result_1 : Logic_Equation;
Fld_64 : Internal_Entity_Op;
Is_A_2 : Boolean;
If_Result_2 : Logic_Equation;
Fld_65 : Internal_Entity_Op;
Fld_66 : Boolean;
If_Result_3 : Logic_Equation;
Fld_67 : Internal_Entity_Op;
Fld_68 : Boolean;
If_Result_4 : Logic_Equation;
Fld_69 : Internal_Entity_Op;
Fld_70 : Boolean;
If_Result_5 : Logic_Equation;
Fld_71 : Internal_Entity_Op;
Fld_72 : Boolean;
If_Result_6 : Logic_Equation;
And_Pred_12 : Logic_Equation;

            procedure Finalizer_Scope_274 is
            begin
                     Dec_Ref (Fld_1);
                     Dec_Ref (Fld_3);
                     Dec_Ref (And_Pred);
                     Dec_Ref (Bind_Result);
                     Dec_Ref (And_Pred_1);
                     Dec_Ref (Bind_Result_1);
                     Dec_Ref (And_Pred_2);
                     Dec_Ref (Pred);
                     Dec_Ref (Dyn_Var_Bind_Result);
                     Dec_Ref (And_Pred_3);
                     Dec_Ref (Bind_Result_2);
                     Dec_Ref (Pred_1);
                     Dec_Ref (Dyn_Var_Bind_Result_1);
                     Dec_Ref (And_Pred_4);
                     Dec_Ref (Bind_Result_3);
                     Dec_Ref (Pred_2);
                     Dec_Ref (Dyn_Var_Bind_Result_2);
                     Dec_Ref (And_Pred_5);
                     Dec_Ref (Bind_Result_4);
                     Dec_Ref (Pred_3);
                     Dec_Ref (Dyn_Var_Bind_Result_3);
                     Dec_Ref (And_Pred_6);
                     Dec_Ref (Pred_4);
                     Dec_Ref (Dyn_Var_Bind_Result_4);
                     Dec_Ref (And_Pred_7);
                     Dec_Ref (Bind_Result_5);
                     Dec_Ref (Pred_5);
                     Dec_Ref (Dyn_Var_Bind_Result_5);
                     Dec_Ref (And_Pred_8);
                     Dec_Ref (Pred_6);
                     Dec_Ref (Dyn_Var_Bind_Result_6);
                     Dec_Ref (And_Pred_9);
                     Dec_Ref (Bind_Result_6);
                     Dec_Ref (Pred_7);
                     Dec_Ref (Dyn_Var_Bind_Result_7);
                     Dec_Ref (And_Pred_10);
                     Dec_Ref (Pred_8);
                     Dec_Ref (Dyn_Var_Bind_Result_8);
                     Dec_Ref (And_Pred_11);
                     Dec_Ref (Array_Lit);
                     Dec_Ref (Logic_Vars);
                     Dec_Ref (Bind_Result_7);
                     Dec_Ref (Bind_Result_8);
                     Dec_Ref (If_Result_1);
                     Dec_Ref (If_Result_2);
                     Dec_Ref (If_Result_3);
                     Dec_Ref (If_Result_4);
                     Dec_Ref (If_Result_5);
                     Dec_Ref (If_Result_6);
                     Dec_Ref (And_Pred_12);
            end Finalizer_Scope_274;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 2204 '<LogicBinaryOp And at nodes.lkt:3435:9>' And_Pred_12 nodes.lkt:3435
--# expr-start 2110 '<LogicBinaryOp And at nodes.lkt:3436:13>' And_Pred_3 nodes.lkt:3436
--# expr-start 2097 '<LogicBinaryOp And at nodes.lkt:3437:17>' And_Pred_2 nodes.lkt:3437
--# expr-start 2091 '<LogicBinaryOp And at nodes.lkt:3438:21>' And_Pred_1 nodes.lkt:3438
--# expr-start 2085 '<LogicBinaryOp And at nodes.lkt:3438:22>' And_Pred nodes.lkt:3438
--# expr-start 2082 '<FieldAccess for xref_equation at nodes.lkt:3438:22>' Fld_1 nodes.lkt:3438



--# expr-start 2081 '<FieldAccess for left at nodes.lkt:3438:22>' Fld nodes.lkt:3438







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Create_Internal_Entity_Expr (Node => Ent.Node.Bin_Op_F_Left, Info => Ent.Info);
--# expr-done 2081



   if Fld.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]LktNode.xref_equation'
Fld_1 := Liblktlang.Implementation.Dispatcher_Lkt_Node_P_Xref_Equation (Node => Fld.Node, E_Info => Fld.Info);
--# end
--# expr-done 2082
--# expr-start 2084 '<FieldAccess for xref_equation at nodes.lkt:3438:53>' Fld_3 nodes.lkt:3438



--# expr-start 2083 '<FieldAccess for right at nodes.lkt:3438:53>' Fld_2 nodes.lkt:3438







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_2 := Create_Internal_Entity_Expr (Node => Ent.Node.Bin_Op_F_Right, Info => Ent.Info);
--# expr-done 2083



   if Fld_2.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]LktNode.xref_equation'
Fld_3 := Liblktlang.Implementation.Dispatcher_Lkt_Node_P_Xref_Equation (Node => Fld_2.Node, E_Info => Fld_2.Info);
--# end
--# expr-done 2084
And_Pred := Create_And (Fld_1, Fld_3, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3438:22") else null)); 
--# expr-done 2085
--# expr-start 2090 '<Bind at nodes.lkt:3439:26>' Bind_Result nodes.lkt:3439
--# expr-start 2087 '<FieldAccess for expected_type_var at nodes.lkt:3439:26>' Fld_5 nodes.lkt:3439



--# expr-start 2086 '<FieldAccess for left at nodes.lkt:3439:26>' Fld_4 nodes.lkt:3439







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_4 := Create_Internal_Entity_Expr (Node => Ent.Node.Bin_Op_F_Left, Info => Ent.Info);
--# expr-done 2086



   if Fld_4.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_5 := Fld_4.Node.Expr_Expected_Type_Var'Unrestricted_Access;
--# expr-done 2087
Fld_5.Value := No_Entity;
Entity_Vars.Reset (Fld_5);
--# expr-start 2089 '<FieldAccess for actual_type_var at nodes.lkt:3440:25>' Fld_7 nodes.lkt:3440



--# expr-start 2088 '<FieldAccess for right at nodes.lkt:3440:25>' Fld_6 nodes.lkt:3440







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_6 := Create_Internal_Entity_Expr (Node => Ent.Node.Bin_Op_F_Right, Info => Ent.Info);
--# expr-done 2088



   if Fld_6.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_7 := Fld_6.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 2089
Fld_7.Value := No_Entity;
Entity_Vars.Reset (Fld_7);
Bind_Result := Solver.Create_Unify (Fld_5, Fld_7, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3439:26") else null)); 
--# expr-done 2090
And_Pred_1 := Create_And (And_Pred, Bind_Result, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3438:21") else null)); 
--# expr-done 2091
--# expr-start 2096 '<Bind at nodes.lkt:3442:22>' Bind_Result_1 nodes.lkt:3442
--# expr-start 2093 '<FieldAccess for expected_type_var at nodes.lkt:3442:22>' Fld_9 nodes.lkt:3442



--# expr-start 2092 '<FieldAccess for right at nodes.lkt:3442:22>' Fld_8 nodes.lkt:3442







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_8 := Create_Internal_Entity_Expr (Node => Ent.Node.Bin_Op_F_Right, Info => Ent.Info);
--# expr-done 2092



   if Fld_8.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_9 := Fld_8.Node.Expr_Expected_Type_Var'Unrestricted_Access;
--# expr-done 2093
Fld_9.Value := No_Entity;
Entity_Vars.Reset (Fld_9);
--# expr-start 2095 '<FieldAccess for actual_type_var at nodes.lkt:3442:55>' Fld_11 nodes.lkt:3442



--# expr-start 2094 '<FieldAccess for left at nodes.lkt:3442:55>' Fld_10 nodes.lkt:3442







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_10 := Create_Internal_Entity_Expr (Node => Ent.Node.Bin_Op_F_Left, Info => Ent.Info);
--# expr-done 2094



   if Fld_10.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_11 := Fld_10.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 2095
Fld_11.Value := No_Entity;
Entity_Vars.Reset (Fld_11);
Bind_Result_1 := Solver.Create_Unify (Fld_9, Fld_11, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3442:22") else null)); 
--# expr-done 2096
And_Pred_2 := Create_And (And_Pred_1, Bind_Result_1, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3437:17") else null)); 
--# expr-done 2097
--# expr-start 2109 '<bind at nodes.lkt:3445:17>' Dyn_Var_Bind_Result nodes.lkt:3445





--# expr-start 2098 '<FieldAccess for right at nodes.lkt:3445:39>' Fld_12 nodes.lkt:3445







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_12 := Self.Bin_Op_F_Right;
--# expr-done 2098



   
      Cast_Result := Fld_12;


Bound_Error_Location := Cast_Result; 
--# expr-start 2108 '<Predicate on TypeDecl.commutative_matching_type at nodes.lkt:3446:17>' Pred nodes.lkt:3446
--# expr-start 2100 '<FieldAccess for expected_type_var at nodes.lkt:3447:21>' Fld_14 nodes.lkt:3447



--# expr-start 2099 '<FieldAccess for right at nodes.lkt:3447:21>' Fld_13 nodes.lkt:3447







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_13 := Create_Internal_Entity_Expr (Node => Ent.Node.Bin_Op_F_Right, Info => Ent.Info);
--# expr-done 2099



   if Fld_13.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_14 := Fld_13.Node.Expr_Expected_Type_Var'Unrestricted_Access;
--# expr-done 2100
Fld_14.Value := No_Entity;
Entity_Vars.Reset (Fld_14);
--# expr-start 2102 '<FieldAccess for actual_type_var at nodes.lkt:3448:21>' Fld_16 nodes.lkt:3448



--# expr-start 2101 '<FieldAccess for right at nodes.lkt:3448:21>' Fld_15 nodes.lkt:3448







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_15 := Create_Internal_Entity_Expr (Node => Ent.Node.Bin_Op_F_Right, Info => Ent.Info);
--# expr-done 2101



   if Fld_15.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_16 := Fld_15.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 2102
Fld_16.Value := No_Entity;
Entity_Vars.Reset (Fld_16);

--# expr-start 2107 '<BooleanBinaryOp Or at nodes.lkt:3449:21>' If_Result nodes.lkt:3449



--# expr-start 2104 '<FieldAccess for is_order_op at nodes.lkt:3455:25>' Fld_18 nodes.lkt:3455



--# expr-start 2103 '<FieldAccess for op at nodes.lkt:3455:25>' Fld_17 nodes.lkt:3455







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_17 := Create_Internal_Entity_Op (Node => Ent.Node.Bin_Op_F_Op, Info => Ent.Info);
--# expr-done 2103



   if Fld_17.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start Op.is_order_op
Fld_18 := Liblktlang.Implementation.Op_P_Is_Order_Op (Node => Fld_17.Node);
--# end
--# expr-done 2104
if Fld_18 then
   
   If_Result := True;
else
   --# expr-start 2106 '<IsA Op.OrInt at nodes.lkt:3457:24>' Is_A nodes.lkt:3457
--# expr-start 2105 '<FieldAccess for op at nodes.lkt:3457:24>' Fld_19 nodes.lkt:3457







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_19 := Create_Internal_Entity_Op (Node => Ent.Node.Bin_Op_F_Op, Info => Ent.Info);
--# expr-done 2105
Is_A := Fld_19.Node /= null 
and then Fld_19.Node.Kind in Lkt_Op_Or_Int_Range; 
--# expr-done 2106
   If_Result := Is_A;
end if;



--# expr-done 2107

Pred := Solver.Create_N_Predicate ((Fld_14, Fld_16), Create_Type_Decl_P_Commutative_Matching_Type_1_Predicate (2, If_Result, Bound_Error_Location)); 
--# expr-done 2108
Dyn_Var_Bind_Result := Pred; Inc_Ref (Dyn_Var_Bind_Result);
--# expr-done 2109
And_Pred_3 := Create_And (And_Pred_2, Dyn_Var_Bind_Result, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3436:13") else null)); 
--# expr-done 2110
--# expr-start 2203 '<If at nodes.lkt:3463:13>' If_Result_6 nodes.lkt:3463



--# expr-start 2112 '<FieldAccess for is_bool_op at nodes.lkt:3463:16>' Fld_72 nodes.lkt:3463



--# expr-start 2111 '<FieldAccess for op at nodes.lkt:3463:16>' Fld_71 nodes.lkt:3463







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_71 := Create_Internal_Entity_Op (Node => Ent.Node.Bin_Op_F_Op, Info => Ent.Info);
--# expr-done 2111



   if Fld_71.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start Op.is_bool_op
Fld_72 := Liblktlang.Implementation.Op_P_Is_Bool_Op (Node => Fld_71.Node);
--# end
--# expr-done 2112
if Fld_72 then
   --# expr-start 2121 '<LogicBinaryOp And at nodes.lkt:3465:17>' And_Pred_4 nodes.lkt:3465
--# expr-start 2115 '<Bind at nodes.lkt:3465:17>' Bind_Result_2 nodes.lkt:3465
--# expr-start 2113 '<FieldAccess for actual_type_var at nodes.lkt:3465:17>' Fld_20 nodes.lkt:3465







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_20 := Ent.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 2113
Fld_20.Value := No_Entity;
Entity_Vars.Reset (Fld_20);





--# expr-start 2114 '<FieldAccess for bool_type at nodes.lkt:3465:41>' Fld_21 nodes.lkt:3465







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start LktNode.bool_type
Fld_21 := Liblktlang.Implementation.Lkt_Node_P_Bool_Type (Node => Ent.Node);
--# end
--# expr-done 2114



   
      Cast_Result_1 := Create_Internal_Entity
        (Node => Fld_21.Node,
         Info => Fld_21.Info);


Bind_Result_2 := Solver.Create_Assign (Fld_20, Cast_Result_1, Solver_Ifc.No_Converter, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3465:17") else null)); 
--# expr-done 2115
--# expr-start 2120 '<bind at nodes.lkt:3467:21>' Dyn_Var_Bind_Result_1 nodes.lkt:3467





--# expr-start 2116 '<FieldAccess for left at nodes.lkt:3467:43>' Fld_22 nodes.lkt:3467







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_22 := Self.Bin_Op_F_Left;
--# expr-done 2116



   
      Cast_Result_2 := Fld_22;


Bound_Error_Location_1 := Cast_Result_2; 
--# expr-start 2119 '<Predicate on TypeDecl.is_bool at nodes.lkt:3468:21>' Pred_1 nodes.lkt:3468
--# expr-start 2118 '<FieldAccess for actual_type_var at nodes.lkt:3468:39>' Fld_24 nodes.lkt:3468



--# expr-start 2117 '<FieldAccess for left at nodes.lkt:3468:39>' Fld_23 nodes.lkt:3468







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_23 := Create_Internal_Entity_Expr (Node => Ent.Node.Bin_Op_F_Left, Info => Ent.Info);
--# expr-done 2117



   if Fld_23.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_24 := Fld_23.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 2118
Fld_24.Value := No_Entity;
Entity_Vars.Reset (Fld_24);

Pred_1 := Solver.Create_Predicate (Fld_24, Create_Type_Decl_P_Is_Bool_0_Predicate (Bound_Error_Location_1)); 
--# expr-done 2119
Dyn_Var_Bind_Result_1 := Pred_1; Inc_Ref (Dyn_Var_Bind_Result_1);
--# expr-done 2120
And_Pred_4 := Create_And (Bind_Result_2, Dyn_Var_Bind_Result_1, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3465:17") else null)); 
--# expr-done 2121
   If_Result_6 := And_Pred_4;
else
   --# expr-start 2202 '<If at nodes.lkt:3463:13>' If_Result_5 nodes.lkt:3463



--# expr-start 2123 '<FieldAccess for is_equation_op at nodes.lkt:3471:18>' Fld_70 nodes.lkt:3471



--# expr-start 2122 '<FieldAccess for op at nodes.lkt:3471:18>' Fld_69 nodes.lkt:3471







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_69 := Create_Internal_Entity_Op (Node => Ent.Node.Bin_Op_F_Op, Info => Ent.Info);
--# expr-done 2122



   if Fld_69.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start Op.is_equation_op
Fld_70 := Liblktlang.Implementation.Op_P_Is_Equation_Op (Node => Fld_69.Node);
--# end
--# expr-done 2123
if Fld_70 then
   --# expr-start 2132 '<LogicBinaryOp And at nodes.lkt:3473:17>' And_Pred_5 nodes.lkt:3473
--# expr-start 2126 '<Bind at nodes.lkt:3473:17>' Bind_Result_3 nodes.lkt:3473
--# expr-start 2124 '<FieldAccess for actual_type_var at nodes.lkt:3473:17>' Fld_25 nodes.lkt:3473







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_25 := Ent.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 2124
Fld_25.Value := No_Entity;
Entity_Vars.Reset (Fld_25);





--# expr-start 2125 '<FieldAccess for equation_type at nodes.lkt:3473:41>' Fld_26 nodes.lkt:3473







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start LktNode.equation_type
Fld_26 := Liblktlang.Implementation.Lkt_Node_P_Equation_Type (Node => Ent.Node);
--# end
--# expr-done 2125



   
      Cast_Result_3 := Create_Internal_Entity
        (Node => Fld_26.Node,
         Info => Fld_26.Info);


Bind_Result_3 := Solver.Create_Assign (Fld_25, Cast_Result_3, Solver_Ifc.No_Converter, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3473:17") else null)); 
--# expr-done 2126
--# expr-start 2131 '<bind at nodes.lkt:3475:21>' Dyn_Var_Bind_Result_2 nodes.lkt:3475





--# expr-start 2127 '<FieldAccess for left at nodes.lkt:3475:43>' Fld_27 nodes.lkt:3475







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_27 := Self.Bin_Op_F_Left;
--# expr-done 2127



   
      Cast_Result_4 := Fld_27;


Bound_Error_Location_2 := Cast_Result_4; 
--# expr-start 2130 '<Predicate on TypeDecl.is_equation at nodes.lkt:3476:21>' Pred_2 nodes.lkt:3476
--# expr-start 2129 '<FieldAccess for actual_type_var at nodes.lkt:3476:43>' Fld_29 nodes.lkt:3476



--# expr-start 2128 '<FieldAccess for left at nodes.lkt:3476:43>' Fld_28 nodes.lkt:3476







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_28 := Create_Internal_Entity_Expr (Node => Ent.Node.Bin_Op_F_Left, Info => Ent.Info);
--# expr-done 2128



   if Fld_28.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_29 := Fld_28.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 2129
Fld_29.Value := No_Entity;
Entity_Vars.Reset (Fld_29);

Pred_2 := Solver.Create_Predicate (Fld_29, Create_Type_Decl_P_Is_Equation_0_Predicate (Bound_Error_Location_2)); 
--# expr-done 2130
Dyn_Var_Bind_Result_2 := Pred_2; Inc_Ref (Dyn_Var_Bind_Result_2);
--# expr-done 2131
And_Pred_5 := Create_And (Bind_Result_3, Dyn_Var_Bind_Result_2, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3473:17") else null)); 
--# expr-done 2132
   If_Result_5 := And_Pred_5;
else
   --# expr-start 2201 '<If at nodes.lkt:3463:13>' If_Result_4 nodes.lkt:3463



--# expr-start 2134 '<FieldAccess for is_order_op at nodes.lkt:3479:18>' Fld_68 nodes.lkt:3479



--# expr-start 2133 '<FieldAccess for op at nodes.lkt:3479:18>' Fld_67 nodes.lkt:3479







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_67 := Create_Internal_Entity_Op (Node => Ent.Node.Bin_Op_F_Op, Info => Ent.Info);
--# expr-done 2133



   if Fld_67.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start Op.is_order_op
Fld_68 := Liblktlang.Implementation.Op_P_Is_Order_Op (Node => Fld_67.Node);
--# end
--# expr-done 2134
if Fld_68 then
   --# expr-start 2149 '<LogicBinaryOp And at nodes.lkt:3481:17>' And_Pred_7 nodes.lkt:3481
--# expr-start 2143 '<LogicBinaryOp And at nodes.lkt:3482:21>' And_Pred_6 nodes.lkt:3482
--# expr-start 2137 '<Bind at nodes.lkt:3482:21>' Bind_Result_4 nodes.lkt:3482
--# expr-start 2135 '<FieldAccess for actual_type_var at nodes.lkt:3482:21>' Fld_30 nodes.lkt:3482







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_30 := Ent.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 2135
Fld_30.Value := No_Entity;
Entity_Vars.Reset (Fld_30);





--# expr-start 2136 '<FieldAccess for bool_type at nodes.lkt:3482:45>' Fld_31 nodes.lkt:3482







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start LktNode.bool_type
Fld_31 := Liblktlang.Implementation.Lkt_Node_P_Bool_Type (Node => Ent.Node);
--# end
--# expr-done 2136



   
      Cast_Result_5 := Create_Internal_Entity
        (Node => Fld_31.Node,
         Info => Fld_31.Info);


Bind_Result_4 := Solver.Create_Assign (Fld_30, Cast_Result_5, Solver_Ifc.No_Converter, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3482:21") else null)); 
--# expr-done 2137
--# expr-start 2142 '<bind at nodes.lkt:3484:25>' Dyn_Var_Bind_Result_3 nodes.lkt:3484





--# expr-start 2138 '<FieldAccess for left at nodes.lkt:3484:47>' Fld_32 nodes.lkt:3484







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_32 := Self.Bin_Op_F_Left;
--# expr-done 2138



   
      Cast_Result_6 := Fld_32;


Bound_Error_Location_3 := Cast_Result_6; 
--# expr-start 2141 '<Predicate on TypeDecl.is_int_or_node at nodes.lkt:3485:25>' Pred_3 nodes.lkt:3485
--# expr-start 2140 '<FieldAccess for actual_type_var at nodes.lkt:3485:50>' Fld_34 nodes.lkt:3485



--# expr-start 2139 '<FieldAccess for left at nodes.lkt:3485:50>' Fld_33 nodes.lkt:3485







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_33 := Create_Internal_Entity_Expr (Node => Ent.Node.Bin_Op_F_Left, Info => Ent.Info);
--# expr-done 2139



   if Fld_33.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_34 := Fld_33.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 2140
Fld_34.Value := No_Entity;
Entity_Vars.Reset (Fld_34);

Pred_3 := Solver.Create_Predicate (Fld_34, Create_Type_Decl_P_Is_Int_Or_Node_0_Predicate (Bound_Error_Location_3)); 
--# expr-done 2141
Dyn_Var_Bind_Result_3 := Pred_3; Inc_Ref (Dyn_Var_Bind_Result_3);
--# expr-done 2142
And_Pred_6 := Create_And (Bind_Result_4, Dyn_Var_Bind_Result_3, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3482:21") else null)); 
--# expr-done 2143
--# expr-start 2148 '<bind at nodes.lkt:3489:21>' Dyn_Var_Bind_Result_4 nodes.lkt:3489





--# expr-start 2144 '<FieldAccess for right at nodes.lkt:3489:43>' Fld_35 nodes.lkt:3489







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_35 := Self.Bin_Op_F_Right;
--# expr-done 2144



   
      Cast_Result_7 := Fld_35;


Bound_Error_Location_4 := Cast_Result_7; 
--# expr-start 2147 '<Predicate on TypeDecl.is_int_or_node at nodes.lkt:3490:21>' Pred_4 nodes.lkt:3490
--# expr-start 2146 '<FieldAccess for actual_type_var at nodes.lkt:3490:46>' Fld_37 nodes.lkt:3490



--# expr-start 2145 '<FieldAccess for right at nodes.lkt:3490:46>' Fld_36 nodes.lkt:3490







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_36 := Create_Internal_Entity_Expr (Node => Ent.Node.Bin_Op_F_Right, Info => Ent.Info);
--# expr-done 2145



   if Fld_36.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_37 := Fld_36.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 2146
Fld_37.Value := No_Entity;
Entity_Vars.Reset (Fld_37);

Pred_4 := Solver.Create_Predicate (Fld_37, Create_Type_Decl_P_Is_Int_Or_Node_0_Predicate (Bound_Error_Location_4)); 
--# expr-done 2147
Dyn_Var_Bind_Result_4 := Pred_4; Inc_Ref (Dyn_Var_Bind_Result_4);
--# expr-done 2148
And_Pred_7 := Create_And (And_Pred_6, Dyn_Var_Bind_Result_4, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3481:17") else null)); 
--# expr-done 2149
   If_Result_4 := And_Pred_7;
else
   --# expr-start 2200 '<If at nodes.lkt:3463:13>' If_Result_3 nodes.lkt:3463



--# expr-start 2151 '<FieldAccess for is_arith_op at nodes.lkt:3493:18>' Fld_66 nodes.lkt:3493



--# expr-start 2150 '<FieldAccess for op at nodes.lkt:3493:18>' Fld_65 nodes.lkt:3493







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_65 := Create_Internal_Entity_Op (Node => Ent.Node.Bin_Op_F_Op, Info => Ent.Info);
--# expr-done 2150



   if Fld_65.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start Op.is_arith_op
Fld_66 := Liblktlang.Implementation.Op_P_Is_Arith_Op (Node => Fld_65.Node);
--# end
--# expr-done 2151
if Fld_66 then
   --# expr-start 2167 '<LogicBinaryOp And at nodes.lkt:3495:17>' And_Pred_9 nodes.lkt:3495
--# expr-start 2161 '<LogicBinaryOp And at nodes.lkt:3496:21>' And_Pred_8 nodes.lkt:3496
--# expr-start 2155 '<Bind at nodes.lkt:3496:21>' Bind_Result_5 nodes.lkt:3496
--# expr-start 2152 '<FieldAccess for actual_type_var at nodes.lkt:3496:21>' Fld_38 nodes.lkt:3496







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_38 := Ent.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 2152
Fld_38.Value := No_Entity;
Entity_Vars.Reset (Fld_38);
--# expr-start 2154 '<FieldAccess for actual_type_var at nodes.lkt:3496:46>' Fld_40 nodes.lkt:3496



--# expr-start 2153 '<FieldAccess for left at nodes.lkt:3496:46>' Fld_39 nodes.lkt:3496







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_39 := Create_Internal_Entity_Expr (Node => Ent.Node.Bin_Op_F_Left, Info => Ent.Info);
--# expr-done 2153



   if Fld_39.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_40 := Fld_39.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 2154
Fld_40.Value := No_Entity;
Entity_Vars.Reset (Fld_40);
Bind_Result_5 := Solver.Create_Unify (Fld_38, Fld_40, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3496:21") else null)); 
--# expr-done 2155
--# expr-start 2160 '<bind at nodes.lkt:3498:25>' Dyn_Var_Bind_Result_5 nodes.lkt:3498





--# expr-start 2156 '<FieldAccess for left at nodes.lkt:3498:47>' Fld_41 nodes.lkt:3498







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_41 := Self.Bin_Op_F_Left;
--# expr-done 2156



   
      Cast_Result_8 := Fld_41;


Bound_Error_Location_5 := Cast_Result_8; 
--# expr-start 2159 '<Predicate on TypeDecl.is_int_type at nodes.lkt:3499:25>' Pred_5 nodes.lkt:3499
--# expr-start 2158 '<FieldAccess for actual_type_var at nodes.lkt:3499:47>' Fld_43 nodes.lkt:3499



--# expr-start 2157 '<FieldAccess for left at nodes.lkt:3499:47>' Fld_42 nodes.lkt:3499







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_42 := Create_Internal_Entity_Expr (Node => Ent.Node.Bin_Op_F_Left, Info => Ent.Info);
--# expr-done 2157



   if Fld_42.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_43 := Fld_42.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 2158
Fld_43.Value := No_Entity;
Entity_Vars.Reset (Fld_43);

Pred_5 := Solver.Create_Predicate (Fld_43, Create_Type_Decl_P_Is_Int_Type_0_Predicate (Bound_Error_Location_5)); 
--# expr-done 2159
Dyn_Var_Bind_Result_5 := Pred_5; Inc_Ref (Dyn_Var_Bind_Result_5);
--# expr-done 2160
And_Pred_8 := Create_And (Bind_Result_5, Dyn_Var_Bind_Result_5, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3496:21") else null)); 
--# expr-done 2161
--# expr-start 2166 '<bind at nodes.lkt:3503:21>' Dyn_Var_Bind_Result_6 nodes.lkt:3503





--# expr-start 2162 '<FieldAccess for right at nodes.lkt:3503:43>' Fld_44 nodes.lkt:3503







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_44 := Self.Bin_Op_F_Right;
--# expr-done 2162



   
      Cast_Result_9 := Fld_44;


Bound_Error_Location_6 := Cast_Result_9; 
--# expr-start 2165 '<Predicate on TypeDecl.is_int_type at nodes.lkt:3504:21>' Pred_6 nodes.lkt:3504
--# expr-start 2164 '<FieldAccess for actual_type_var at nodes.lkt:3504:43>' Fld_46 nodes.lkt:3504



--# expr-start 2163 '<FieldAccess for right at nodes.lkt:3504:43>' Fld_45 nodes.lkt:3504







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_45 := Create_Internal_Entity_Expr (Node => Ent.Node.Bin_Op_F_Right, Info => Ent.Info);
--# expr-done 2163



   if Fld_45.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_46 := Fld_45.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 2164
Fld_46.Value := No_Entity;
Entity_Vars.Reset (Fld_46);

Pred_6 := Solver.Create_Predicate (Fld_46, Create_Type_Decl_P_Is_Int_Type_0_Predicate (Bound_Error_Location_6)); 
--# expr-done 2165
Dyn_Var_Bind_Result_6 := Pred_6; Inc_Ref (Dyn_Var_Bind_Result_6);
--# expr-done 2166
And_Pred_9 := Create_And (And_Pred_8, Dyn_Var_Bind_Result_6, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3495:17") else null)); 
--# expr-done 2167
   If_Result_3 := And_Pred_9;
else
   --# expr-start 2199 '<If at nodes.lkt:3463:13>' If_Result_2 nodes.lkt:3463



--# expr-start 2169 '<IsA Op.Amp at nodes.lkt:3507:18>' Is_A_2 nodes.lkt:3507
--# expr-start 2168 '<FieldAccess for op at nodes.lkt:3507:18>' Fld_64 nodes.lkt:3507







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_64 := Create_Internal_Entity_Op (Node => Ent.Node.Bin_Op_F_Op, Info => Ent.Info);
--# expr-done 2168
Is_A_2 := Fld_64.Node /= null 
and then Fld_64.Node.Kind in Lkt_Op_Amp_Range; 
--# expr-done 2169
if Is_A_2 then
   --# expr-start 2185 '<LogicBinaryOp And at nodes.lkt:3509:17>' And_Pred_11 nodes.lkt:3509
--# expr-start 2179 '<LogicBinaryOp And at nodes.lkt:3510:21>' And_Pred_10 nodes.lkt:3510
--# expr-start 2173 '<Bind at nodes.lkt:3510:21>' Bind_Result_6 nodes.lkt:3510
--# expr-start 2170 '<FieldAccess for actual_type_var at nodes.lkt:3510:21>' Fld_47 nodes.lkt:3510







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_47 := Ent.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 2170
Fld_47.Value := No_Entity;
Entity_Vars.Reset (Fld_47);
--# expr-start 2172 '<FieldAccess for actual_type_var at nodes.lkt:3510:46>' Fld_49 nodes.lkt:3510



--# expr-start 2171 '<FieldAccess for left at nodes.lkt:3510:46>' Fld_48 nodes.lkt:3510







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_48 := Create_Internal_Entity_Expr (Node => Ent.Node.Bin_Op_F_Left, Info => Ent.Info);
--# expr-done 2171



   if Fld_48.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_49 := Fld_48.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 2172
Fld_49.Value := No_Entity;
Entity_Vars.Reset (Fld_49);
Bind_Result_6 := Solver.Create_Unify (Fld_47, Fld_49, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3510:21") else null)); 
--# expr-done 2173
--# expr-start 2178 '<bind at nodes.lkt:3512:25>' Dyn_Var_Bind_Result_7 nodes.lkt:3512





--# expr-start 2174 '<FieldAccess for left at nodes.lkt:3512:47>' Fld_50 nodes.lkt:3512







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_50 := Self.Bin_Op_F_Left;
--# expr-done 2174



   
      Cast_Result_10 := Fld_50;


Bound_Error_Location_7 := Cast_Result_10; 
--# expr-start 2177 '<Predicate on TypeDecl.is_string_or_array_type at nodes.lkt:3513:25>' Pred_7 nodes.lkt:3513
--# expr-start 2176 '<FieldAccess for actual_type_var at nodes.lkt:3514:29>' Fld_52 nodes.lkt:3514



--# expr-start 2175 '<FieldAccess for left at nodes.lkt:3514:29>' Fld_51 nodes.lkt:3514







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_51 := Create_Internal_Entity_Expr (Node => Ent.Node.Bin_Op_F_Left, Info => Ent.Info);
--# expr-done 2175



   if Fld_51.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_52 := Fld_51.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 2176
Fld_52.Value := No_Entity;
Entity_Vars.Reset (Fld_52);

Pred_7 := Solver.Create_Predicate (Fld_52, Create_Type_Decl_P_Is_String_Or_Array_Type_0_Predicate (Bound_Error_Location_7)); 
--# expr-done 2177
Dyn_Var_Bind_Result_7 := Pred_7; Inc_Ref (Dyn_Var_Bind_Result_7);
--# expr-done 2178
And_Pred_10 := Create_And (Bind_Result_6, Dyn_Var_Bind_Result_7, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3510:21") else null)); 
--# expr-done 2179
--# expr-start 2184 '<bind at nodes.lkt:3519:21>' Dyn_Var_Bind_Result_8 nodes.lkt:3519





--# expr-start 2180 '<FieldAccess for right at nodes.lkt:3519:43>' Fld_53 nodes.lkt:3519







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_53 := Self.Bin_Op_F_Right;
--# expr-done 2180



   
      Cast_Result_11 := Fld_53;


Bound_Error_Location_8 := Cast_Result_11; 
--# expr-start 2183 '<Predicate on TypeDecl.is_string_or_array_type at nodes.lkt:3520:21>' Pred_8 nodes.lkt:3520
--# expr-start 2182 '<FieldAccess for actual_type_var at nodes.lkt:3521:25>' Fld_55 nodes.lkt:3521



--# expr-start 2181 '<FieldAccess for right at nodes.lkt:3521:25>' Fld_54 nodes.lkt:3521







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_54 := Create_Internal_Entity_Expr (Node => Ent.Node.Bin_Op_F_Right, Info => Ent.Info);
--# expr-done 2181



   if Fld_54.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_55 := Fld_54.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 2182
Fld_55.Value := No_Entity;
Entity_Vars.Reset (Fld_55);

Pred_8 := Solver.Create_Predicate (Fld_55, Create_Type_Decl_P_Is_String_Or_Array_Type_0_Predicate (Bound_Error_Location_8)); 
--# expr-done 2183
Dyn_Var_Bind_Result_8 := Pred_8; Inc_Ref (Dyn_Var_Bind_Result_8);
--# expr-done 2184
And_Pred_11 := Create_And (And_Pred_10, Dyn_Var_Bind_Result_8, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3509:17") else null)); 
--# expr-done 2185
   If_Result_2 := And_Pred_11;
else
   --# expr-start 2198 '<If at nodes.lkt:3463:13>' If_Result_1 nodes.lkt:3463



--# expr-start 2187 '<IsA Op.OrInt at nodes.lkt:3525:18>' Is_A_1 nodes.lkt:3525
--# expr-start 2186 '<FieldAccess for op at nodes.lkt:3525:18>' Fld_63 nodes.lkt:3525







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_63 := Create_Internal_Entity_Op (Node => Ent.Node.Bin_Op_F_Op, Info => Ent.Info);
--# expr-done 2186
Is_A_1 := Fld_63.Node /= null 
and then Fld_63.Node.Kind in Lkt_Op_Or_Int_Range; 
--# expr-done 2187
if Is_A_1 then
   --# expr-start 2192 '<ArrayLiteral at nodes.lkt:3529:21>' Array_Lit nodes.lkt:3529
--# expr-start 2189 '<FieldAccess for actual_type_var at nodes.lkt:3529:22>' Fld_58 nodes.lkt:3529



--# expr-start 2188 '<FieldAccess for left at nodes.lkt:3529:22>' Fld_57 nodes.lkt:3529







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_57 := Create_Internal_Entity_Expr (Node => Ent.Node.Bin_Op_F_Left, Info => Ent.Info);
--# expr-done 2188



   if Fld_57.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_58 := Fld_57.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 2189
--# expr-start 2191 '<FieldAccess for actual_type_var at nodes.lkt:3529:49>' Fld_60 nodes.lkt:3529



--# expr-start 2190 '<FieldAccess for right at nodes.lkt:3529:49>' Fld_59 nodes.lkt:3529







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_59 := Create_Internal_Entity_Expr (Node => Ent.Node.Bin_Op_F_Right, Info => Ent.Info);
--# expr-done 2190



   if Fld_59.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_60 := Fld_59.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 2191
Array_Lit := Create_Logic_Var_Array (Internal_Logic_Var_Array'(1 => Fld_58, 2 => Fld_60)); 
--# expr-done 2192
for Var of Array_Lit.Items loop
   Var.Value := No_Entity;
   Entity_Vars.Reset (Var);
end loop;
Logic_Vars := Array_Lit; Inc_Ref (Logic_Vars);
--# expr-start 2194 '<NPropagate at nodes.lkt:3527:17>' Bind_Result_7 nodes.lkt:3527
--# expr-start 2193 '<FieldAccess for actual_type_var at nodes.lkt:3527:17>' Fld_56 nodes.lkt:3527







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_56 := Ent.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 2193
Fld_56.Value := No_Entity;
Entity_Vars.Reset (Fld_56);


Bind_Result_7 := Solver.Create_N_Propagate (Fld_56, Create_Type_Decl_P_Imprecise_Common_Ancestor_List_0_Functor (Logic_Vars.N), Entity_Vars.Logic_Var_Array (Logic_Vars.Items), Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3527:17") else null)); 
--# expr-done 2194
   If_Result_1 := Bind_Result_7;
else
   --# expr-start 2197 '<Bind at nodes.lkt:3532:18>' Bind_Result_8 nodes.lkt:3532
--# expr-start 2195 '<FieldAccess for actual_type_var at nodes.lkt:3532:18>' Fld_61 nodes.lkt:3532







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_61 := Ent.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 2195
Fld_61.Value := No_Entity;
Entity_Vars.Reset (Fld_61);





--# expr-start 2196 '<FieldAccess for bool_type at nodes.lkt:3532:42>' Fld_62 nodes.lkt:3532







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start LktNode.bool_type
Fld_62 := Liblktlang.Implementation.Lkt_Node_P_Bool_Type (Node => Ent.Node);
--# end
--# expr-done 2196



   
      Cast_Result_12 := Create_Internal_Entity
        (Node => Fld_62.Node,
         Info => Fld_62.Info);


Bind_Result_8 := Solver.Create_Assign (Fld_61, Cast_Result_12, Solver_Ifc.No_Converter, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3532:18") else null)); 
--# expr-done 2197
   If_Result_1 := Bind_Result_8;
end if;

      Inc_Ref (If_Result_1);


--# expr-done 2198
   If_Result_2 := If_Result_1;
end if;

      Inc_Ref (If_Result_2);


--# expr-done 2199
   If_Result_3 := If_Result_2;
end if;

      Inc_Ref (If_Result_3);


--# expr-done 2200
   If_Result_4 := If_Result_3;
end if;

      Inc_Ref (If_Result_4);


--# expr-done 2201
   If_Result_5 := If_Result_4;
end if;

      Inc_Ref (If_Result_5);


--# expr-done 2202
   If_Result_6 := If_Result_5;
end if;

      Inc_Ref (If_Result_6);


--# expr-done 2203
And_Pred_12 := Create_And (And_Pred_3, If_Result_6, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3435:9") else null)); 
--# expr-done 2204

         Property_Result := And_Pred_12;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_274;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_274;




            raise;
      end;



   return Property_Result;
end Bin_Op_P_Xref_Equation;
--# end

   







--# property-start BinOp.has_context_free_type nodes.lkt:3535
pragma Warnings (Off, "is not referenced");
 function Bin_Op_P_Has_Context_Free_Type
  
  (Node : Bare_Bin_Op
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Boolean
is
   Self : Bare_Bin_Op  := Bare_Bin_Op (Node);
     Ent : Internal_Entity_Bin_Op :=
       Internal_Entity_Bin_Op'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Boolean;

      

      Fld : Internal_Entity_Expr;
Fld_1 : Boolean;
Fld_2 : Internal_Entity_Expr;
Fld_3 : Boolean;
If_Result : Boolean;



begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         --# expr-start 2209 '<BooleanBinaryOp Or at nodes.lkt:3536:9>' If_Result nodes.lkt:3536



--# expr-start 2206 '<FieldAccess for has_context_free_type at nodes.lkt:3536:9>' Fld_1 nodes.lkt:3536



--# expr-start 2205 '<FieldAccess for left at nodes.lkt:3536:9>' Fld nodes.lkt:3536







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Create_Internal_Entity_Expr (Node => Ent.Node.Bin_Op_F_Left, Info => Ent.Info);
--# expr-done 2205



   if Fld.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]Expr.has_context_free_type'
Fld_1 := Liblktlang.Implementation.Dispatcher_Expr_P_Has_Context_Free_Type (Node => Fld.Node, E_Info => Fld.Info);
--# end
--# expr-done 2206
if Fld_1 then
   
   If_Result := True;
else
   --# expr-start 2208 '<FieldAccess for has_context_free_type at nodes.lkt:3536:46>' Fld_3 nodes.lkt:3536



--# expr-start 2207 '<FieldAccess for right at nodes.lkt:3536:46>' Fld_2 nodes.lkt:3536







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_2 := Create_Internal_Entity_Expr (Node => Ent.Node.Bin_Op_F_Right, Info => Ent.Info);
--# expr-done 2207



   if Fld_2.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]Expr.has_context_free_type'
Fld_3 := Liblktlang.Implementation.Dispatcher_Expr_P_Has_Context_Free_Type (Node => Fld_2.Node, E_Info => Fld_2.Info);
--# end
--# expr-done 2208
   If_Result := Fld_3;
end if;



--# expr-done 2209

         Property_Result := If_Result;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Bin_Op_P_Has_Context_Free_Type;
--# end



   


      

   --
   --  Primitives for Bare_Block_Expr
   --

   



   

   

   

   

   

   

   


      procedure Block_Expr_Pre_Env_Actions
        (Self            : Bare_Block_Expr;
         State           : in out PLE_Node_State;
         Add_To_Env_Only : Boolean := False) is
      begin
            


   
      if Add_To_Env_Only then
         return;
      end if;

      declare
         No_Parent         : constant Boolean :=
            False;
         Transitive_Parent : constant Boolean :=
            Liblktlang.Implementation.Env_Trans_Parent_21 (Node => 
Self);
         Names             : Symbol_Type_Array_Access :=
            null;
      begin
         Add_Env (Self, State, No_Parent, Transitive_Parent, Names);
      end;
   
   
      end;



      
      procedure Initialize_Fields_For_Block_Expr
        (Self : Bare_Block_Expr
         ; Block_Expr_F_Val_Defs : Bare_Block_Decl_List
         ; Block_Expr_F_Expr : Bare_Expr
        ) is
      begin
            Initialize_Fields_For_Expr
              (Self);

            Self.Block_Expr_F_Val_Defs := Block_Expr_F_Val_Defs;
            Self.Block_Expr_F_Expr := Block_Expr_F_Expr;
         

      end Initialize_Fields_For_Block_Expr;

      
   function Block_Expr_F_Val_Defs
     (Node : Bare_Block_Expr) return Bare_Block_Decl_List
   is
      

   begin
         
         return Node.Block_Expr_F_Val_Defs;
      
   end;

      
   function Block_Expr_F_Expr
     (Node : Bare_Block_Expr) return Bare_Expr
   is
      

   begin
         
         return Node.Block_Expr_F_Expr;
      
   end;


   







--# property-start BlockExpr.xref_equation nodes.lkt:3546
pragma Warnings (Off, "is not referenced");
 function Block_Expr_P_Xref_Equation
  
  (Node : Bare_Block_Expr
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Logic_Equation
is
   Self : Bare_Block_Expr  := Bare_Block_Expr (Node);
     Ent : Internal_Entity_Block_Expr :=
       Internal_Entity_Block_Expr'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Logic_Equation;

      
            procedure Finalizer_Scope_276 with Inline_Always;

      Fld : Internal_Entity_Expr;
Fld_1 : Logic_Equation;
Fld_2 : Logic_Var;
Fld_3 : Internal_Entity_Expr;
Fld_4 : Logic_Var;
Bind_Result : Logic_Equation;
And_Pred : Logic_Equation;
Fld_5 : Logic_Var;
Fld_6 : Internal_Entity_Expr;
Fld_7 : Logic_Var;
Bind_Result_1 : Logic_Equation;
And_Pred_1 : Logic_Equation;

            procedure Finalizer_Scope_276 is
            begin
                     Dec_Ref (Fld_1);
                     Dec_Ref (Bind_Result);
                     Dec_Ref (And_Pred);
                     Dec_Ref (Bind_Result_1);
                     Dec_Ref (And_Pred_1);
            end Finalizer_Scope_276;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 2221 '<LogicBinaryOp And at nodes.lkt:3547:9>' And_Pred_1 nodes.lkt:3547
--# expr-start 2216 '<LogicBinaryOp And at nodes.lkt:3548:13>' And_Pred nodes.lkt:3548
--# expr-start 2211 '<FieldAccess for xref_equation at nodes.lkt:3548:13>' Fld_1 nodes.lkt:3548



--# expr-start 2210 '<FieldAccess for expr at nodes.lkt:3548:13>' Fld nodes.lkt:3548







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Create_Internal_Entity_Expr (Node => Ent.Node.Block_Expr_F_Expr, Info => Ent.Info);
--# expr-done 2210



   if Fld.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]LktNode.xref_equation'
Fld_1 := Liblktlang.Implementation.Dispatcher_Lkt_Node_P_Xref_Equation (Node => Fld.Node, E_Info => Fld.Info);
--# end
--# expr-done 2211
--# expr-start 2215 '<Bind at nodes.lkt:3549:18>' Bind_Result nodes.lkt:3549
--# expr-start 2212 '<FieldAccess for actual_type_var at nodes.lkt:3549:18>' Fld_2 nodes.lkt:3549







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_2 := Ent.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 2212
Fld_2.Value := No_Entity;
Entity_Vars.Reset (Fld_2);
--# expr-start 2214 '<FieldAccess for actual_type_var at nodes.lkt:3549:43>' Fld_4 nodes.lkt:3549



--# expr-start 2213 '<FieldAccess for expr at nodes.lkt:3549:43>' Fld_3 nodes.lkt:3549







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_3 := Create_Internal_Entity_Expr (Node => Ent.Node.Block_Expr_F_Expr, Info => Ent.Info);
--# expr-done 2213



   if Fld_3.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_4 := Fld_3.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 2214
Fld_4.Value := No_Entity;
Entity_Vars.Reset (Fld_4);
Bind_Result := Solver.Create_Unify (Fld_2, Fld_4, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3549:18") else null)); 
--# expr-done 2215
And_Pred := Create_And (Fld_1, Bind_Result, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3548:13") else null)); 
--# expr-done 2216
--# expr-start 2220 '<Bind at nodes.lkt:3551:14>' Bind_Result_1 nodes.lkt:3551
--# expr-start 2217 '<FieldAccess for expected_type_var at nodes.lkt:3551:14>' Fld_5 nodes.lkt:3551







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_5 := Ent.Node.Expr_Expected_Type_Var'Unrestricted_Access;
--# expr-done 2217
Fld_5.Value := No_Entity;
Entity_Vars.Reset (Fld_5);
--# expr-start 2219 '<FieldAccess for expected_type_var at nodes.lkt:3551:41>' Fld_7 nodes.lkt:3551



--# expr-start 2218 '<FieldAccess for expr at nodes.lkt:3551:41>' Fld_6 nodes.lkt:3551







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_6 := Create_Internal_Entity_Expr (Node => Ent.Node.Block_Expr_F_Expr, Info => Ent.Info);
--# expr-done 2218



   if Fld_6.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_7 := Fld_6.Node.Expr_Expected_Type_Var'Unrestricted_Access;
--# expr-done 2219
Fld_7.Value := No_Entity;
Entity_Vars.Reset (Fld_7);
Bind_Result_1 := Solver.Create_Unify (Fld_5, Fld_7, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3551:14") else null)); 
--# expr-done 2220
And_Pred_1 := Create_And (And_Pred, Bind_Result_1, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3547:9") else null)); 
--# expr-done 2221

         Property_Result := And_Pred_1;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_276;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_276;




            raise;
      end;



   return Property_Result;
end Block_Expr_P_Xref_Equation;
--# end

   







--# property-start BlockExpr.has_context_free_type nodes.lkt:3553
pragma Warnings (Off, "is not referenced");
 function Block_Expr_P_Has_Context_Free_Type
  
  (Node : Bare_Block_Expr
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Boolean
is
   Self : Bare_Block_Expr  := Bare_Block_Expr (Node);
     Ent : Internal_Entity_Block_Expr :=
       Internal_Entity_Block_Expr'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Boolean;

      

      Fld : Internal_Entity_Expr;
Fld_1 : Boolean;



begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         --# expr-start 2223 '<FieldAccess for has_context_free_type at nodes.lkt:3553:41>' Fld_1 nodes.lkt:3553



--# expr-start 2222 '<FieldAccess for expr at nodes.lkt:3553:41>' Fld nodes.lkt:3553







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Create_Internal_Entity_Expr (Node => Ent.Node.Block_Expr_F_Expr, Info => Ent.Info);
--# expr-done 2222



   if Fld.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]Expr.has_context_free_type'
Fld_1 := Liblktlang.Implementation.Dispatcher_Expr_P_Has_Context_Free_Type (Node => Fld.Node, E_Info => Fld.Info);
--# end
--# expr-done 2223

         Property_Result := Fld_1;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Block_Expr_P_Has_Context_Free_Type;
--# end

   







--# property-start BlockExpr._env_trans_parent_21 '<builtin>:0'
pragma Warnings (Off, "is not referenced");
 function Env_Trans_Parent_21
  
  (Node : Bare_Block_Expr
  )

   return Boolean
is
   Self : Bare_Block_Expr  := Bare_Block_Expr (Node);
      --# bind self Self

   


   Property_Result : Boolean;

      

      



begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         

         Property_Result := False;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Env_Trans_Parent_21;
--# end



   


      

   --
   --  Primitives for Bare_Cast_Expr
   --

   



      
      procedure Initialize_Fields_For_Cast_Expr
        (Self : Bare_Cast_Expr
         ; Cast_Expr_F_Expr : Bare_Expr
         ; Cast_Expr_F_Excludes_Null : Bare_Excludes_Null
         ; Cast_Expr_F_Dest_Type : Bare_Type_Ref
        ) is
      begin
            Initialize_Fields_For_Expr
              (Self);

            Self.Cast_Expr_F_Expr := Cast_Expr_F_Expr;
            Self.Cast_Expr_F_Excludes_Null := Cast_Expr_F_Excludes_Null;
            Self.Cast_Expr_F_Dest_Type := Cast_Expr_F_Dest_Type;
         

      end Initialize_Fields_For_Cast_Expr;

      
   function Cast_Expr_F_Expr
     (Node : Bare_Cast_Expr) return Bare_Expr
   is
      

   begin
         
         return Node.Cast_Expr_F_Expr;
      
   end;

      
   function Cast_Expr_F_Excludes_Null
     (Node : Bare_Cast_Expr) return Bare_Excludes_Null
   is
      

   begin
         
         return Node.Cast_Expr_F_Excludes_Null;
      
   end;

      
   function Cast_Expr_F_Dest_Type
     (Node : Bare_Cast_Expr) return Bare_Type_Ref
   is
      

   begin
         
         return Node.Cast_Expr_F_Dest_Type;
      
   end;


   







--# property-start CastExpr.expected_type_equation nodes.lkt:3569
pragma Warnings (Off, "is not referenced");
 function Cast_Expr_P_Expected_Type_Equation
  
  (Node : Bare_Cast_Expr
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Logic_Equation
is
   Self : Bare_Cast_Expr  := Bare_Cast_Expr (Node);
     Ent : Internal_Entity_Cast_Expr :=
       Internal_Entity_Cast_Expr'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Logic_Equation;

      
            procedure Finalizer_Scope_278 with Inline_Always;

      Fld : Internal_Entity_Expr;
Fld_1 : Logic_Var;
Cast_Expr : Internal_Entity_Type_Decl;
Cast_Result : Internal_Entity;
Bind_Result : Logic_Equation;

            procedure Finalizer_Scope_278 is
            begin
                     Dec_Ref (Bind_Result);
            end Finalizer_Scope_278;


begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         --# expr-start 2226 '<Bind at nodes.lkt:3570:9>' Bind_Result nodes.lkt:3570
--# expr-start 2225 '<FieldAccess for expected_type_var at nodes.lkt:3570:9>' Fld_1 nodes.lkt:3570



--# expr-start 2224 '<FieldAccess for expr at nodes.lkt:3570:9>' Fld nodes.lkt:3570







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Create_Internal_Entity_Expr (Node => Ent.Node.Cast_Expr_F_Expr, Info => Ent.Info);
--# expr-done 2224



   if Fld.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_1 := Fld.Node.Expr_Expected_Type_Var'Unrestricted_Access;
--# expr-done 2225
Fld_1.Value := No_Entity;
Entity_Vars.Reset (Fld_1);






Cast_Expr := No_Entity_Type_Decl; 



   
      Cast_Result := Create_Internal_Entity
        (Node => Cast_Expr.Node,
         Info => Cast_Expr.Info);


Bind_Result := Solver.Create_Assign (Fld_1, Cast_Result, Solver_Ifc.No_Converter, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3570:9") else null)); 
--# expr-done 2226

         Property_Result := Bind_Result;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_278;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_278;




            raise;
      end;



   return Property_Result;
end Cast_Expr_P_Expected_Type_Equation;
--# end

   







--# property-start CastExpr.xref_equation nodes.lkt:3572
pragma Warnings (Off, "is not referenced");
 function Cast_Expr_P_Xref_Equation
  
  (Node : Bare_Cast_Expr
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Logic_Equation
is
   Self : Bare_Cast_Expr  := Bare_Cast_Expr (Node);
     Ent : Internal_Entity_Cast_Expr :=
       Internal_Entity_Cast_Expr'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Logic_Equation;

      
            procedure Finalizer_Scope_279 with Inline_Always;

      Fld : Internal_Entity_Type_Ref;
Fld_1 : Logic_Equation;
Fld_2 : Logic_Var;
Fld_3 : Internal_Entity_Expr;
Fld_4 : Internal_Entity_Type_Decl;
Fld_5 : Internal_Entity_Type_Ref;
Fld_6 : Internal_Entity_Type_Decl;
Fld_7 : Internal_Entity_Type_Decl;
Cast_Result : Internal_Entity;
Bind_Result : Logic_Equation;
And_Pred : Logic_Equation;

            procedure Finalizer_Scope_279 is
            begin
                     Dec_Ref (Fld_1);
                     Dec_Ref (Bind_Result);
                     Dec_Ref (And_Pred);
            end Finalizer_Scope_279;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 2236 '<LogicBinaryOp And at nodes.lkt:3573:9>' And_Pred nodes.lkt:3573
--# expr-start 2228 '<FieldAccess for xref_equation at nodes.lkt:3573:9>' Fld_1 nodes.lkt:3573



--# expr-start 2227 '<FieldAccess for dest_type at nodes.lkt:3573:9>' Fld nodes.lkt:3573







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Create_Internal_Entity_Type_Ref (Node => Ent.Node.Cast_Expr_F_Dest_Type, Info => Ent.Info);
--# expr-done 2227



   if Fld.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]LktNode.xref_equation'
Fld_1 := Liblktlang.Implementation.Dispatcher_Lkt_Node_P_Xref_Equation (Node => Fld.Node, E_Info => Fld.Info);
--# end
--# expr-done 2228
--# expr-start 2235 '<Bind at nodes.lkt:3574:14>' Bind_Result nodes.lkt:3574
--# expr-start 2229 '<FieldAccess for actual_type_var at nodes.lkt:3574:14>' Fld_2 nodes.lkt:3574







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_2 := Ent.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 2229
Fld_2.Value := No_Entity;
Entity_Vars.Reset (Fld_2);





--# expr-start 2234 '<FieldAccess for get_cast_type at nodes.lkt:3575:12>' Fld_7 nodes.lkt:3575



--# expr-start 2231 '<FieldAccess for get_type at nodes.lkt:3575:12>' Fld_4 nodes.lkt:3575



--# expr-start 2230 '<FieldAccess for expr at nodes.lkt:3575:12>' Fld_3 nodes.lkt:3575







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_3 := Create_Internal_Entity_Expr (Node => Ent.Node.Cast_Expr_F_Expr, Info => Ent.Info);
--# expr-done 2230



   if Fld_3.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start Expr.get_type
Fld_4 := Liblktlang.Implementation.Expr_P_Get_Type (Node => Fld_3.Node, E_Info => Fld_3.Info);
--# end
--# expr-done 2231



   if Fld_4.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# expr-start 2233 '<FieldAccess for referenced_decl at nodes.lkt:3575:47>' Fld_6 nodes.lkt:3575



--# expr-start 2232 '<FieldAccess for dest_type at nodes.lkt:3575:47>' Fld_5 nodes.lkt:3575







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_5 := Create_Internal_Entity_Type_Ref (Node => Ent.Node.Cast_Expr_F_Dest_Type, Info => Ent.Info);
--# expr-done 2232



   if Fld_5.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start TypeRef.referenced_decl
Fld_6 := Liblktlang.Implementation.Type_Ref_P_Referenced_Decl (Node => Fld_5.Node, E_Info => Fld_5.Info);
--# end
--# expr-done 2233
--# property-call-start Decl.get_cast_type
Fld_7 := Liblktlang.Implementation.Decl_P_Get_Cast_Type (Node => Fld_4.Node, Cast_To => Fld_6, E_Info => Fld_4.Info);
--# end
--# expr-done 2234



   
      Cast_Result := Create_Internal_Entity
        (Node => Fld_7.Node,
         Info => Fld_7.Info);


Bind_Result := Solver.Create_Assign (Fld_2, Cast_Result, Solver_Ifc.No_Converter, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3574:14") else null)); 
--# expr-done 2235
And_Pred := Create_And (Fld_1, Bind_Result, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3573:9") else null)); 
--# expr-done 2236

         Property_Result := And_Pred;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_279;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_279;




            raise;
      end;



   return Property_Result;
end Cast_Expr_P_Xref_Equation;
--# end



   


      

   --
   --  Primitives for Bare_Error_On_Null
   --

   



      
      procedure Initialize_Fields_For_Error_On_Null
        (Self : Bare_Error_On_Null
         ; Error_On_Null_F_Expr : Bare_Expr
        ) is
      begin
            Initialize_Fields_For_Expr
              (Self);

            Self.Error_On_Null_F_Expr := Error_On_Null_F_Expr;
         

      end Initialize_Fields_For_Error_On_Null;

      
   function Error_On_Null_F_Expr
     (Node : Bare_Error_On_Null) return Bare_Expr
   is
      

   begin
         
         return Node.Error_On_Null_F_Expr;
      
   end;


   







--# property-start ErrorOnNull.xref_equation nodes.lkt:3583
pragma Warnings (Off, "is not referenced");
 function Error_On_Null_P_Xref_Equation
  
  (Node : Bare_Error_On_Null
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Logic_Equation
is
   Self : Bare_Error_On_Null  := Bare_Error_On_Null (Node);
     Ent : Internal_Entity_Error_On_Null :=
       Internal_Entity_Error_On_Null'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Logic_Equation;

      
            procedure Finalizer_Scope_280 with Inline_Always;

      Fld : Internal_Entity_Expr;
Fld_1 : Logic_Equation;
Fld_2 : Logic_Var;
Fld_3 : Internal_Entity_Expr;
Fld_4 : Logic_Var;
Bind_Result : Logic_Equation;
And_Pred : Logic_Equation;
Fld_5 : Internal_Entity_Expr;
Fld_6 : Logic_Var;
Fld_7 : Internal_Entity_Type_Decl;
Cast_Result : Internal_Entity;
Bind_Result_1 : Logic_Equation;
Fld_8 : Internal_Entity_Expr;
Fld_9 : Logic_Var;
Fld_10 : Logic_Var;
Bind_Result_2 : Logic_Equation;
Fld_11 : Boolean;
If_Result : Logic_Equation;
And_Pred_1 : Logic_Equation;

            procedure Finalizer_Scope_280 is
            begin
                     Dec_Ref (Fld_1);
                     Dec_Ref (Bind_Result);
                     Dec_Ref (And_Pred);
                     Dec_Ref (Bind_Result_1);
                     Dec_Ref (Bind_Result_2);
                     Dec_Ref (If_Result);
                     Dec_Ref (And_Pred_1);
            end Finalizer_Scope_280;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 2254 '<LogicBinaryOp And at nodes.lkt:3584:9>' And_Pred_1 nodes.lkt:3584
--# expr-start 2243 '<LogicBinaryOp And at nodes.lkt:3585:13>' And_Pred nodes.lkt:3585
--# expr-start 2238 '<FieldAccess for xref_equation at nodes.lkt:3585:13>' Fld_1 nodes.lkt:3585



--# expr-start 2237 '<FieldAccess for expr at nodes.lkt:3585:13>' Fld nodes.lkt:3585







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Create_Internal_Entity_Expr (Node => Ent.Node.Error_On_Null_F_Expr, Info => Ent.Info);
--# expr-done 2237



   if Fld.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]LktNode.xref_equation'
Fld_1 := Liblktlang.Implementation.Dispatcher_Lkt_Node_P_Xref_Equation (Node => Fld.Node, E_Info => Fld.Info);
--# end
--# expr-done 2238
--# expr-start 2242 '<Bind at nodes.lkt:3586:18>' Bind_Result nodes.lkt:3586
--# expr-start 2239 '<FieldAccess for actual_type_var at nodes.lkt:3586:18>' Fld_2 nodes.lkt:3586







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_2 := Ent.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 2239
Fld_2.Value := No_Entity;
Entity_Vars.Reset (Fld_2);
--# expr-start 2241 '<FieldAccess for actual_type_var at nodes.lkt:3586:43>' Fld_4 nodes.lkt:3586



--# expr-start 2240 '<FieldAccess for expr at nodes.lkt:3586:43>' Fld_3 nodes.lkt:3586







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_3 := Create_Internal_Entity_Expr (Node => Ent.Node.Error_On_Null_F_Expr, Info => Ent.Info);
--# expr-done 2240



   if Fld_3.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_4 := Fld_3.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 2241
Fld_4.Value := No_Entity;
Entity_Vars.Reset (Fld_4);
Bind_Result := Solver.Create_Unify (Fld_2, Fld_4, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3586:18") else null)); 
--# expr-done 2242
And_Pred := Create_And (Fld_1, Bind_Result, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3585:13") else null)); 
--# expr-done 2243
--# expr-start 2253 '<If at nodes.lkt:3589:13>' If_Result nodes.lkt:3589



--# expr-start 2244 '<FieldAccess for xref_entry_point at nodes.lkt:3589:16>' Fld_11 nodes.lkt:3589







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]LktNode.xref_entry_point'
Fld_11 := Liblktlang.Implementation.Dispatcher_Lkt_Node_P_Xref_Entry_Point (Node => Ent.Node, E_Info => Ent.Info);
--# end
--# expr-done 2244
if Fld_11 then
   --# expr-start 2248 '<Bind at nodes.lkt:3590:18>' Bind_Result_1 nodes.lkt:3590
--# expr-start 2246 '<FieldAccess for expected_type_var at nodes.lkt:3590:18>' Fld_6 nodes.lkt:3590



--# expr-start 2245 '<FieldAccess for expr at nodes.lkt:3590:18>' Fld_5 nodes.lkt:3590







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_5 := Create_Internal_Entity_Expr (Node => Ent.Node.Error_On_Null_F_Expr, Info => Ent.Info);
--# expr-done 2245



   if Fld_5.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_6 := Fld_5.Node.Expr_Expected_Type_Var'Unrestricted_Access;
--# expr-done 2246
Fld_6.Value := No_Entity;
Entity_Vars.Reset (Fld_6);





--# expr-start 2247 '<FieldAccess for get_expected_type at nodes.lkt:3590:49>' Fld_7 nodes.lkt:3590







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start Expr.get_expected_type
Fld_7 := Liblktlang.Implementation.Expr_P_Get_Expected_Type (Node => Ent.Node, E_Info => Ent.Info);
--# end
--# expr-done 2247



   
      Cast_Result := Create_Internal_Entity
        (Node => Fld_7.Node,
         Info => Fld_7.Info);


Bind_Result_1 := Solver.Create_Assign (Fld_6, Cast_Result, Solver_Ifc.No_Converter, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3590:18") else null)); 
--# expr-done 2248
   If_Result := Bind_Result_1;
else
   --# expr-start 2252 '<Bind at nodes.lkt:3591:18>' Bind_Result_2 nodes.lkt:3591
--# expr-start 2250 '<FieldAccess for expected_type_var at nodes.lkt:3591:18>' Fld_9 nodes.lkt:3591



--# expr-start 2249 '<FieldAccess for expr at nodes.lkt:3591:18>' Fld_8 nodes.lkt:3591







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_8 := Create_Internal_Entity_Expr (Node => Ent.Node.Error_On_Null_F_Expr, Info => Ent.Info);
--# expr-done 2249



   if Fld_8.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_9 := Fld_8.Node.Expr_Expected_Type_Var'Unrestricted_Access;
--# expr-done 2250
Fld_9.Value := No_Entity;
Entity_Vars.Reset (Fld_9);
--# expr-start 2251 '<FieldAccess for expected_type_var at nodes.lkt:3591:50>' Fld_10 nodes.lkt:3591







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_10 := Ent.Node.Expr_Expected_Type_Var'Unrestricted_Access;
--# expr-done 2251
Fld_10.Value := No_Entity;
Entity_Vars.Reset (Fld_10);
Bind_Result_2 := Solver.Create_Unify (Fld_9, Fld_10, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3591:18") else null)); 
--# expr-done 2252
   If_Result := Bind_Result_2;
end if;

      Inc_Ref (If_Result);


--# expr-done 2253
And_Pred_1 := Create_And (And_Pred, If_Result, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3584:9") else null)); 
--# expr-done 2254

         Property_Result := And_Pred_1;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_280;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_280;




            raise;
      end;



   return Property_Result;
end Error_On_Null_P_Xref_Equation;
--# end

   







--# property-start ErrorOnNull.has_context_free_type nodes.lkt:3594
pragma Warnings (Off, "is not referenced");
 function Error_On_Null_P_Has_Context_Free_Type
  
  (Node : Bare_Error_On_Null
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Boolean
is
   Self : Bare_Error_On_Null  := Bare_Error_On_Null (Node);
     Ent : Internal_Entity_Error_On_Null :=
       Internal_Entity_Error_On_Null'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Boolean;

      

      Fld : Internal_Entity_Expr;
Fld_1 : Boolean;



begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         --# expr-start 2256 '<FieldAccess for has_context_free_type at nodes.lkt:3594:41>' Fld_1 nodes.lkt:3594



--# expr-start 2255 '<FieldAccess for expr at nodes.lkt:3594:41>' Fld nodes.lkt:3594







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Create_Internal_Entity_Expr (Node => Ent.Node.Error_On_Null_F_Expr, Info => Ent.Info);
--# expr-done 2255



   if Fld.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]Expr.has_context_free_type'
Fld_1 := Liblktlang.Implementation.Dispatcher_Expr_P_Has_Context_Free_Type (Node => Fld.Node, E_Info => Fld.Info);
--# end
--# expr-done 2256

         Property_Result := Fld_1;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Error_On_Null_P_Has_Context_Free_Type;
--# end



   


      

   --
   --  Primitives for Bare_Generic_Instantiation
   --

   



      
      procedure Initialize_Fields_For_Generic_Instantiation
        (Self : Bare_Generic_Instantiation
         ; Generic_Instantiation_F_Name : Bare_Expr
         ; Generic_Instantiation_F_Args : Bare_Type_Ref_List
        ) is
      begin
            Initialize_Fields_For_Expr
              (Self);

            Self.Generic_Instantiation_F_Name := Generic_Instantiation_F_Name;
            Self.Generic_Instantiation_F_Args := Generic_Instantiation_F_Args;
         
      Self.Generic_Instantiation_Rebinded_Var := Null_Var_Record;

      end Initialize_Fields_For_Generic_Instantiation;

      
   function Generic_Instantiation_F_Name
     (Node : Bare_Generic_Instantiation) return Bare_Expr
   is
      

   begin
         
         return Node.Generic_Instantiation_F_Name;
      
   end;

      
   function Generic_Instantiation_F_Args
     (Node : Bare_Generic_Instantiation) return Bare_Type_Ref_List
   is
      

   begin
         
         return Node.Generic_Instantiation_F_Args;
      
   end;


   







--# property-start GenericInstantiation.xref_equation nodes.lkt:3605
pragma Warnings (Off, "is not referenced");
 function Generic_Instantiation_P_Xref_Equation
  
  (Node : Bare_Generic_Instantiation
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Logic_Equation
is
   Self : Bare_Generic_Instantiation  := Bare_Generic_Instantiation (Node);
     Ent : Internal_Entity_Generic_Instantiation :=
       Internal_Entity_Generic_Instantiation'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Logic_Equation;

      
            procedure Finalizer_Scope_282 with Inline_Always;
            procedure Finalizer_Scope_703 with Inline_Always;
            procedure Finalizer_Scope_704 with Inline_Always;

      Var_Expr_1 : Internal_Entity_Ref_Id;
Fld : Internal_Entity_Expr;
Fld_1 : Logic_Equation;
Fld_2 : Internal_Entity_Type_Ref_List;
Fld_3 : Bare_Type_Ref_List;
Fld_4 : Internal_Entity_Info;
Item_0 : Internal_Entity_Type_Ref;
Bare_Item_0 : Bare_Type_Ref;
Fld_5 : Logic_Equation;
As_Entity : Internal_Entity_Type_Ref;
Is_Null : Boolean;
If_Result : Internal_Entity_Type_Ref;
Map_Result : Logic_Equation_Array_Access;
Logic_Boolean_Op : Logic_Equation;
And_Pred : Logic_Equation;
Fld_6 : Internal_Entity_Expr;
Fld_7 : Internal_Entity_Ref_Id;
Fld_8 : Logic_Var;
Fld_9 : Logic_Var;
Array_Lit : Logic_Var_Array_Access;
Fld_10 : Internal_Entity_Type_Ref_List;
Fld_11 : Bare_Type_Ref_List;
Fld_12 : Internal_Entity_Info;
Item_2 : Internal_Entity_Type_Ref;
Bare_Item_2 : Bare_Type_Ref;
Fld_13 : Logic_Var;
As_Entity_1 : Internal_Entity_Type_Ref;
Is_Null_1 : Boolean;
If_Result_1 : Internal_Entity_Type_Ref;
Map_Result_1 : Logic_Var_Array_Access;
Concat_Result : Logic_Var_Array_Access;
Logic_Vars : Logic_Var_Array_Access;
Bind_Result : Logic_Equation;
Fld_14 : Bare_Ref_Id;
Cast_Result : Bare_Lkt_Node;
Bound_Error_Location : Bare_Lkt_Node;
Fld_15 : Logic_Var;
Pred : Logic_Equation;
Dyn_Var_Bind_Result : Logic_Equation;
And_Pred_1 : Logic_Equation;
Fld_16 : Bare_Type_Ref_List;
Cast_Result_1 : Bare_Lkt_Node;
Bound_Error_Location_1 : Bare_Lkt_Node;
Fld_17 : Logic_Var;
Fld_18 : Internal_Entity_Type_Ref_List;
Fld_19 : Bare_Type_Ref_List;
Len : Integer;
Pred_1 : Logic_Equation;
Dyn_Var_Bind_Result_1 : Logic_Equation;
And_Pred_2 : Logic_Equation;
Scope_Result : Logic_Equation;
Fld_20 : Logic_Var;
Cast_Expr : Internal_Entity_Type_Decl;
Cast_Result_2 : Internal_Entity;
Bind_Result_1 : Logic_Equation;
Result_Var : Logic_Equation;
And_Pred_3 : Logic_Equation;
Fld_21 : Logic_Var;
Fld_22 : Logic_Var;
Bind_Result_2 : Logic_Equation;
And_Pred_4 : Logic_Equation;

            procedure Finalizer_Scope_282 is
            begin
                     Dec_Ref (Fld_1);
                     Dec_Ref (Map_Result);
                     Dec_Ref (Logic_Boolean_Op);
                     Dec_Ref (And_Pred);
                     Dec_Ref (Scope_Result);
                     Dec_Ref (Bind_Result_1);
                     Dec_Ref (Result_Var);
                     Dec_Ref (And_Pred_3);
                     Dec_Ref (Bind_Result_2);
                     Dec_Ref (And_Pred_4);
            end Finalizer_Scope_282;
            procedure Finalizer_Scope_703 is
            begin
                     Dec_Ref (Fld_5);
            end Finalizer_Scope_703;
            procedure Finalizer_Scope_704 is
            begin
                     Dec_Ref (Array_Lit);
                     Dec_Ref (Map_Result_1);
                     Dec_Ref (Concat_Result);
                     Dec_Ref (Logic_Vars);
                     Dec_Ref (Bind_Result);
                     Dec_Ref (Pred);
                     Dec_Ref (Dyn_Var_Bind_Result);
                     Dec_Ref (And_Pred_1);
                     Dec_Ref (Pred_1);
                     Dec_Ref (Dyn_Var_Bind_Result_1);
                     Dec_Ref (And_Pred_2);
            end Finalizer_Scope_704;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 2291 '<LogicBinaryOp And at nodes.lkt:3606:9>' And_Pred_4 nodes.lkt:3606
--# expr-start 2287 '<LogicBinaryOp And at nodes.lkt:3609:13>' And_Pred_3 nodes.lkt:3609
--# expr-start 2263 '<LogicBinaryOp And at nodes.lkt:3610:17>' And_Pred nodes.lkt:3610
--# expr-start 2258 '<FieldAccess for xref_equation at nodes.lkt:3610:17>' Fld_1 nodes.lkt:3610



--# expr-start 2257 '<FieldAccess for name at nodes.lkt:3610:17>' Fld nodes.lkt:3610







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Create_Internal_Entity_Expr (Node => Ent.Node.Generic_Instantiation_F_Name, Info => Ent.Info);
--# expr-done 2257



   if Fld.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]LktNode.xref_equation'
Fld_1 := Liblktlang.Implementation.Dispatcher_Lkt_Node_P_Xref_Equation (Node => Fld.Node, E_Info => Fld.Info);
--# end
--# expr-done 2258
--# expr-start 2262 '<LogicAll at nodes.lkt:3616:21>' Logic_Boolean_Op nodes.lkt:3616
--# expr-start 2261 '<Map at nodes.lkt:3616:21>' Map_Result nodes.lkt:3616








   

   --# expr-start 2259 '<FieldAccess for args at nodes.lkt:3616:21>' Fld_2 nodes.lkt:3616







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_2 := Create_Internal_Entity_Type_Ref_List (Node => Ent.Node.Generic_Instantiation_F_Args, Info => Ent.Info);
--# expr-done 2259









Fld_3 := Fld_2.Node;

   
      declare
         Map_Result_Vec : Logic_Equation_Vectors.Vector;
      begin
   

   

      if Fld_3 = null then
         
      Map_Result := Create_Logic_Equation_Array (0);
   
      else
         

      declare
         
         Collection : constant Bare_Type_Ref_List := Fld_3;
      begin
         for Untyped_Item_0 of
               Collection.Nodes (1 .. Children_Count (Collection))
         loop
                  
                  Bare_Item_0 := Untyped_Item_0; 
                  



Is_Null := Bare_Item_0 = null; 
if Is_Null then
   
   If_Result := No_Entity_Type_Ref;
else
   








Fld_4 := Fld_2.Info;

As_Entity := (Info => Fld_4, Node => Bare_Item_0); 
   If_Result := As_Entity;
end if;



                  Item_0 := If_Result; 

            
   --# scope-start


               --# bind a Item_0

            
         
         
      --# expr-start 2260 '<FieldAccess for xref_equation at nodes.lkt:3616:48>' Fld_5 nodes.lkt:3616







   if Item_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]LktNode.xref_equation'
Fld_5 := Liblktlang.Implementation.Dispatcher_Lkt_Node_P_Xref_Equation (Node => Item_0.Node, E_Info => Item_0.Info);
--# end
--# expr-done 2260
      

         declare
            Item_To_Append : constant Logic_Equation := Fld_5;
         begin
               Inc_Ref (Item_To_Append);
            Logic_Equation_Vectors.Append (Map_Result_Vec, Item_To_Append);
         end;
   
   
   

            
   --# end
      Finalizer_Scope_703;



         end loop;
      end;
   
      end if;

   

         Map_Result := Create_Logic_Equation_Array
           (Items_Count => Natural (Logic_Equation_Vectors.Length (Map_Result_Vec)));
         for I in Map_Result.Items'Range loop
            Map_Result.Items (I) := Logic_Equation_Vectors.Get
              (Map_Result_Vec,
               I + Logic_Equation_Vectors.Index_Type'First - Map_Result.Items'First);
         end loop;
         Logic_Equation_Vectors.Destroy (Map_Result_Vec);

      end;
   



--# expr-done 2261
Logic_Boolean_Op := Solver.Create_All (Relation_Array (Map_Result.Items), (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3616:21") else null)); 
--# expr-done 2262
And_Pred := Create_And (Fld_1, Logic_Boolean_Op, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3610:17") else null)); 
--# expr-done 2263



--# expr-start 2265 '<FieldAccess for get_rightmost_refid at nodes.lkt:3619:18>' Fld_7 nodes.lkt:3619



--# expr-start 2264 '<FieldAccess for name at nodes.lkt:3619:18>' Fld_6 nodes.lkt:3619







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_6 := Create_Internal_Entity_Expr (Node => Ent.Node.Generic_Instantiation_F_Name, Info => Ent.Info);
--# expr-done 2264



   if Fld_6.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start Expr.get_rightmost_refid
Fld_7 := Liblktlang.Implementation.Expr_P_Get_Rightmost_Refid (Node => Fld_6.Node, E_Info => Fld_6.Info);
--# end
--# expr-done 2265
Var_Expr_1 := Fld_7;





if Var_Expr_1 /= No_Entity_Ref_Id then
   



   --# scope-start


   --# bind ri Var_Expr_1

--# expr-start 2284 '<LogicBinaryOp And at nodes.lkt:3621:17>' And_Pred_2 nodes.lkt:3621
--# expr-start 2277 '<LogicBinaryOp And at nodes.lkt:3622:21>' And_Pred_1 nodes.lkt:3622
--# expr-start 2267 '<ArrayLiteral at nodes.lkt:3624:25>' Array_Lit nodes.lkt:3624
--# expr-start 2266 '<FieldAccess for ref_var at nodes.lkt:3624:26>' Fld_9 nodes.lkt:3624







   if Var_Expr_1.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_9 := Var_Expr_1.Node.Ref_Id_Ref_Var'Unrestricted_Access;
--# expr-done 2266
Array_Lit := Create_Logic_Var_Array (Internal_Logic_Var_Array'(1 => Fld_9)); 
--# expr-done 2267
--# expr-start 2270 '<Map at nodes.lkt:3624:40>' Map_Result_1 nodes.lkt:3624








   

   --# expr-start 2268 '<FieldAccess for args at nodes.lkt:3624:40>' Fld_10 nodes.lkt:3624







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_10 := Create_Internal_Entity_Type_Ref_List (Node => Ent.Node.Generic_Instantiation_F_Args, Info => Ent.Info);
--# expr-done 2268









Fld_11 := Fld_10.Node;

   
      declare
         Map_Result_1_Vec : Logic_Var_Vectors.Vector;
      begin
   

   

      if Fld_11 = null then
         
      Map_Result_1 := Create_Logic_Var_Array (0);
   
      else
         

      declare
         
         Collection : constant Bare_Type_Ref_List := Fld_11;
      begin
         for Untyped_Item_2 of
               Collection.Nodes (1 .. Children_Count (Collection))
         loop
                  
                  Bare_Item_2 := Untyped_Item_2; 
                  



Is_Null_1 := Bare_Item_2 = null; 
if Is_Null_1 then
   
   If_Result_1 := No_Entity_Type_Ref;
else
   








Fld_12 := Fld_10.Info;

As_Entity_1 := (Info => Fld_12, Node => Bare_Item_2); 
   If_Result_1 := As_Entity_1;
end if;



                  Item_2 := If_Result_1; 

            
   --# scope-start


               --# bind a Item_2

            
         
         
      --# expr-start 2269 '<FieldAccess for type_var at nodes.lkt:3624:61>' Fld_13 nodes.lkt:3624







   if Item_2.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_13 := Item_2.Node.Type_Ref_Type_Var'Unrestricted_Access;
--# expr-done 2269
      

         declare
            Item_To_Append : constant Logic_Var := Fld_13;
         begin
            Logic_Var_Vectors.Append (Map_Result_1_Vec, Item_To_Append);
         end;
   
   
   

            
   --# end



         end loop;
      end;
   
      end if;

   

         Map_Result_1 := Create_Logic_Var_Array
           (Items_Count => Natural (Logic_Var_Vectors.Length (Map_Result_1_Vec)));
         for I in Map_Result_1.Items'Range loop
            Map_Result_1.Items (I) := Logic_Var_Vectors.Get
              (Map_Result_1_Vec,
               I + Logic_Var_Vectors.Index_Type'First - Map_Result_1.Items'First);
         end loop;
         Logic_Var_Vectors.Destroy (Map_Result_1_Vec);

      end;
   



--# expr-done 2270
Concat_Result := Concat (Array_Lit, Map_Result_1); 
for Var of Concat_Result.Items loop
   Var.Value := No_Entity;
   Entity_Vars.Reset (Var);
end loop;
Logic_Vars := Concat_Result; Inc_Ref (Logic_Vars);
--# expr-start 2272 '<NPropagate at nodes.lkt:3622:21>' Bind_Result nodes.lkt:3622
--# expr-start 2271 '<FieldAccess for rebinded_var at nodes.lkt:3622:21>' Fld_8 nodes.lkt:3622







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_8 := Ent.Node.Generic_Instantiation_Rebinded_Var'Unrestricted_Access;
--# expr-done 2271
Fld_8.Value := No_Entity;
Entity_Vars.Reset (Fld_8);


Bind_Result := Solver.Create_N_Propagate (Fld_8, Create_Decl_P_Instantiate_Generic_Decl_0_Functor (Logic_Vars.N), Entity_Vars.Logic_Var_Array (Logic_Vars.Items), Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3622:21") else null)); 
--# expr-done 2272
--# expr-start 2276 '<bind at nodes.lkt:3627:25>' Dyn_Var_Bind_Result nodes.lkt:3627





--# expr-start 2273 '<FieldAccess for node at nodes.lkt:3627:47>' Fld_14 nodes.lkt:3627









Fld_14 := Var_Expr_1.Node;
--# expr-done 2273



   
      Cast_Result := Fld_14;


Bound_Error_Location := Cast_Result; 
--# expr-start 2275 '<Predicate on Decl.is_generic at nodes.lkt:3628:25>' Pred nodes.lkt:3628
--# expr-start 2274 '<FieldAccess for ref_var at nodes.lkt:3628:42>' Fld_15 nodes.lkt:3628







   if Var_Expr_1.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_15 := Var_Expr_1.Node.Ref_Id_Ref_Var'Unrestricted_Access;
--# expr-done 2274
Fld_15.Value := No_Entity;
Entity_Vars.Reset (Fld_15);

Pred := Solver.Create_Predicate (Fld_15, Create_Decl_P_Is_Generic_0_Predicate (Bound_Error_Location)); 
--# expr-done 2275
Dyn_Var_Bind_Result := Pred; Inc_Ref (Dyn_Var_Bind_Result);
--# expr-done 2276
And_Pred_1 := Create_And (Bind_Result, Dyn_Var_Bind_Result, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3622:21") else null)); 
--# expr-done 2277
--# expr-start 2283 '<bind at nodes.lkt:3632:21>' Dyn_Var_Bind_Result_1 nodes.lkt:3632





--# expr-start 2278 '<FieldAccess for args at nodes.lkt:3632:43>' Fld_16 nodes.lkt:3632







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_16 := Self.Generic_Instantiation_F_Args;
--# expr-done 2278



   
      Cast_Result_1 := Fld_16;


Bound_Error_Location_1 := Cast_Result_1; 
--# expr-start 2282 '<Predicate on Decl.has_correct_type_param_number at nodes.lkt:3633:21>' Pred_1 nodes.lkt:3633
--# expr-start 2279 '<FieldAccess for ref_var at nodes.lkt:3634:25>' Fld_17 nodes.lkt:3634







   if Var_Expr_1.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_17 := Var_Expr_1.Node.Ref_Id_Ref_Var'Unrestricted_Access;
--# expr-done 2279
Fld_17.Value := No_Entity;
Entity_Vars.Reset (Fld_17);
--# expr-start 2281 '<length at nodes.lkt:3635:25>' Len nodes.lkt:3635



--# expr-start 2280 '<FieldAccess for args at nodes.lkt:3635:25>' Fld_18 nodes.lkt:3635







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_18 := Create_Internal_Entity_Type_Ref_List (Node => Ent.Node.Generic_Instantiation_F_Args, Info => Ent.Info);
--# expr-done 2280





Fld_19 := Fld_18.Node; 
Len := Length (Fld_19); 
--# expr-done 2281

Pred_1 := Solver.Create_Predicate (Fld_17, Create_Decl_P_Has_Correct_Type_Param_Number_0_Predicate (Len, Bound_Error_Location_1)); 
--# expr-done 2282
Dyn_Var_Bind_Result_1 := Pred_1; Inc_Ref (Dyn_Var_Bind_Result_1);
--# expr-done 2283
And_Pred_2 := Create_And (And_Pred_1, Dyn_Var_Bind_Result_1, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3621:17") else null)); 
--# expr-done 2284
Scope_Result := And_Pred_2;
   Inc_Ref (Scope_Result);


   --# end
      Finalizer_Scope_704;


   Result_Var := Scope_Result;
else
   --# expr-start 2286 '<Bind at nodes.lkt:3638:29>' Bind_Result_1 nodes.lkt:3638
--# expr-start 2285 '<FieldAccess for rebinded_var at nodes.lkt:3638:29>' Fld_20 nodes.lkt:3638







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_20 := Ent.Node.Generic_Instantiation_Rebinded_Var'Unrestricted_Access;
--# expr-done 2285
Fld_20.Value := No_Entity;
Entity_Vars.Reset (Fld_20);






Cast_Expr := No_Entity_Type_Decl; 



   
      Cast_Result_2 := Create_Internal_Entity
        (Node => Cast_Expr.Node,
         Info => Cast_Expr.Info);


Bind_Result_1 := Solver.Create_Assign (Fld_20, Cast_Result_2, Solver_Ifc.No_Converter, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3638:29") else null)); 
--# expr-done 2286
   Result_Var := Bind_Result_1;
end if;

      Inc_Ref (Result_Var);


And_Pred_3 := Create_And (And_Pred, Result_Var, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3609:13") else null)); 
--# expr-done 2287
--# expr-start 2290 '<NPropagate at nodes.lkt:3641:14>' Bind_Result_2 nodes.lkt:3641
--# expr-start 2288 '<FieldAccess for rebinded_var at nodes.lkt:3641:58>' Fld_22 nodes.lkt:3641







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_22 := Ent.Node.Generic_Instantiation_Rebinded_Var'Unrestricted_Access;
--# expr-done 2288
Fld_22.Value := No_Entity;
Entity_Vars.Reset (Fld_22);
--# expr-start 2289 '<FieldAccess for actual_type_var at nodes.lkt:3641:14>' Fld_21 nodes.lkt:3641







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_21 := Ent.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 2289
Fld_21.Value := No_Entity;
Entity_Vars.Reset (Fld_21);

Bind_Result_2 := Solver.Create_Propagate (Fld_22, Fld_21, Create_Decl_P_Function_Type_0_Functor, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3641:14") else null)); 
--# expr-done 2290
And_Pred_4 := Create_And (And_Pred_3, Bind_Result_2, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3606:9") else null)); 
--# expr-done 2291

         Property_Result := And_Pred_4;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_282;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_282;
                     Finalizer_Scope_703;
                     Finalizer_Scope_704;




            raise;
      end;



   return Property_Result;
end Generic_Instantiation_P_Xref_Equation;
--# end



   


      

   --
   --  Primitives for Bare_Grammar_Expr
   --

   



      
      procedure Initialize_Fields_For_Grammar_Expr
        (Self : Bare_Grammar_Expr
        ) is
      begin
            Initialize_Fields_For_Expr
              (Self);

         

      end Initialize_Fields_For_Grammar_Expr;




   


      

   --
   --  Primitives for Bare_Grammar_Cut
   --

   



      
      procedure Initialize_Fields_For_Grammar_Cut
        (Self : Bare_Grammar_Cut
        ) is
      begin
            Initialize_Fields_For_Grammar_Expr
              (Self);

         

      end Initialize_Fields_For_Grammar_Cut;




   


      

   --
   --  Primitives for Bare_Grammar_Discard
   --

   



      
      procedure Initialize_Fields_For_Grammar_Discard
        (Self : Bare_Grammar_Discard
         ; Grammar_Discard_F_Expr : Bare_Grammar_Expr
        ) is
      begin
            Initialize_Fields_For_Grammar_Expr
              (Self);

            Self.Grammar_Discard_F_Expr := Grammar_Discard_F_Expr;
         

      end Initialize_Fields_For_Grammar_Discard;

      
   function Grammar_Discard_F_Expr
     (Node : Bare_Grammar_Discard) return Bare_Grammar_Expr
   is
      

   begin
         
         return Node.Grammar_Discard_F_Expr;
      
   end;




   


      

   --
   --  Primitives for Bare_Grammar_Dont_Skip
   --

   



      
      procedure Initialize_Fields_For_Grammar_Dont_Skip
        (Self : Bare_Grammar_Dont_Skip
         ; Grammar_Dont_Skip_F_Expr : Bare_Grammar_Expr
         ; Grammar_Dont_Skip_F_Dont_Skip : Bare_Grammar_Expr
        ) is
      begin
            Initialize_Fields_For_Grammar_Expr
              (Self);

            Self.Grammar_Dont_Skip_F_Expr := Grammar_Dont_Skip_F_Expr;
            Self.Grammar_Dont_Skip_F_Dont_Skip := Grammar_Dont_Skip_F_Dont_Skip;
         

      end Initialize_Fields_For_Grammar_Dont_Skip;

      
   function Grammar_Dont_Skip_F_Expr
     (Node : Bare_Grammar_Dont_Skip) return Bare_Grammar_Expr
   is
      

   begin
         
         return Node.Grammar_Dont_Skip_F_Expr;
      
   end;

      
   function Grammar_Dont_Skip_F_Dont_Skip
     (Node : Bare_Grammar_Dont_Skip) return Bare_Grammar_Expr
   is
      

   begin
         
         return Node.Grammar_Dont_Skip_F_Dont_Skip;
      
   end;




   


      

   --
   --  Primitives for Bare_Grammar_List
   --

   



      
      procedure Initialize_Fields_For_Grammar_List
        (Self : Bare_Grammar_List
         ; Grammar_List_F_List_Type : Bare_Type_Ref
         ; Grammar_List_F_Kind : Bare_List_Kind
         ; Grammar_List_F_Expr : Bare_Grammar_Expr
         ; Grammar_List_F_Sep : Bare_Grammar_List_Sep
        ) is
      begin
            Initialize_Fields_For_Grammar_Expr
              (Self);

            Self.Grammar_List_F_List_Type := Grammar_List_F_List_Type;
            Self.Grammar_List_F_Kind := Grammar_List_F_Kind;
            Self.Grammar_List_F_Expr := Grammar_List_F_Expr;
            Self.Grammar_List_F_Sep := Grammar_List_F_Sep;
         

      end Initialize_Fields_For_Grammar_List;

      
   function Grammar_List_F_List_Type
     (Node : Bare_Grammar_List) return Bare_Type_Ref
   is
      

   begin
         
         return Node.Grammar_List_F_List_Type;
      
   end;

      
   function Grammar_List_F_Kind
     (Node : Bare_Grammar_List) return Bare_List_Kind
   is
      

   begin
         
         return Node.Grammar_List_F_Kind;
      
   end;

      
   function Grammar_List_F_Expr
     (Node : Bare_Grammar_List) return Bare_Grammar_Expr
   is
      

   begin
         
         return Node.Grammar_List_F_Expr;
      
   end;

      
   function Grammar_List_F_Sep
     (Node : Bare_Grammar_List) return Bare_Grammar_List_Sep
   is
      

   begin
         
         return Node.Grammar_List_F_Sep;
      
   end;




   


      

   --
   --  Primitives for Bare_Grammar_Null
   --

   



      
      procedure Initialize_Fields_For_Grammar_Null
        (Self : Bare_Grammar_Null
         ; Grammar_Null_F_Name : Bare_Type_Ref
        ) is
      begin
            Initialize_Fields_For_Grammar_Expr
              (Self);

            Self.Grammar_Null_F_Name := Grammar_Null_F_Name;
         

      end Initialize_Fields_For_Grammar_Null;

      
   function Grammar_Null_F_Name
     (Node : Bare_Grammar_Null) return Bare_Type_Ref
   is
      

   begin
         
         return Node.Grammar_Null_F_Name;
      
   end;




   


      

   --
   --  Primitives for Bare_Grammar_Opt
   --

   



      
      procedure Initialize_Fields_For_Grammar_Opt
        (Self : Bare_Grammar_Opt
         ; Grammar_Opt_F_Expr : Bare_Grammar_Expr
        ) is
      begin
            Initialize_Fields_For_Grammar_Expr
              (Self);

            Self.Grammar_Opt_F_Expr := Grammar_Opt_F_Expr;
         

      end Initialize_Fields_For_Grammar_Opt;

      
   function Grammar_Opt_F_Expr
     (Node : Bare_Grammar_Opt) return Bare_Grammar_Expr
   is
      

   begin
         
         return Node.Grammar_Opt_F_Expr;
      
   end;




   


      

   --
   --  Primitives for Bare_Grammar_Opt_Error
   --

   



      
      procedure Initialize_Fields_For_Grammar_Opt_Error
        (Self : Bare_Grammar_Opt_Error
         ; Grammar_Opt_Error_F_Expr : Bare_Grammar_Expr
        ) is
      begin
            Initialize_Fields_For_Grammar_Expr
              (Self);

            Self.Grammar_Opt_Error_F_Expr := Grammar_Opt_Error_F_Expr;
         

      end Initialize_Fields_For_Grammar_Opt_Error;

      
   function Grammar_Opt_Error_F_Expr
     (Node : Bare_Grammar_Opt_Error) return Bare_Grammar_Expr
   is
      

   begin
         
         return Node.Grammar_Opt_Error_F_Expr;
      
   end;




   


      

   --
   --  Primitives for Bare_Grammar_Opt_Error_Group
   --

   



      
      procedure Initialize_Fields_For_Grammar_Opt_Error_Group
        (Self : Bare_Grammar_Opt_Error_Group
         ; Grammar_Opt_Error_Group_F_Expr : Bare_Grammar_Expr_List
        ) is
      begin
            Initialize_Fields_For_Grammar_Expr
              (Self);

            Self.Grammar_Opt_Error_Group_F_Expr := Grammar_Opt_Error_Group_F_Expr;
         

      end Initialize_Fields_For_Grammar_Opt_Error_Group;

      
   function Grammar_Opt_Error_Group_F_Expr
     (Node : Bare_Grammar_Opt_Error_Group) return Bare_Grammar_Expr_List
   is
      

   begin
         
         return Node.Grammar_Opt_Error_Group_F_Expr;
      
   end;




   


      

   --
   --  Primitives for Bare_Grammar_Opt_Group
   --

   



      
      procedure Initialize_Fields_For_Grammar_Opt_Group
        (Self : Bare_Grammar_Opt_Group
         ; Grammar_Opt_Group_F_Expr : Bare_Grammar_Expr_List
        ) is
      begin
            Initialize_Fields_For_Grammar_Expr
              (Self);

            Self.Grammar_Opt_Group_F_Expr := Grammar_Opt_Group_F_Expr;
         

      end Initialize_Fields_For_Grammar_Opt_Group;

      
   function Grammar_Opt_Group_F_Expr
     (Node : Bare_Grammar_Opt_Group) return Bare_Grammar_Expr_List
   is
      

   begin
         
         return Node.Grammar_Opt_Group_F_Expr;
      
   end;




   


      

   --
   --  Primitives for Bare_Grammar_Or_Expr
   --

   



      
      procedure Initialize_Fields_For_Grammar_Or_Expr
        (Self : Bare_Grammar_Or_Expr
         ; Grammar_Or_Expr_F_Sub_Exprs : Bare_Grammar_Expr_List_List
        ) is
      begin
            Initialize_Fields_For_Grammar_Expr
              (Self);

            Self.Grammar_Or_Expr_F_Sub_Exprs := Grammar_Or_Expr_F_Sub_Exprs;
         

      end Initialize_Fields_For_Grammar_Or_Expr;

      
   function Grammar_Or_Expr_F_Sub_Exprs
     (Node : Bare_Grammar_Or_Expr) return Bare_Grammar_Expr_List_List
   is
      

   begin
         
         return Node.Grammar_Or_Expr_F_Sub_Exprs;
      
   end;




   


      

   --
   --  Primitives for Bare_Grammar_Pick
   --

   



      
      procedure Initialize_Fields_For_Grammar_Pick
        (Self : Bare_Grammar_Pick
         ; Grammar_Pick_F_Exprs : Bare_Grammar_Expr_List
        ) is
      begin
            Initialize_Fields_For_Grammar_Expr
              (Self);

            Self.Grammar_Pick_F_Exprs := Grammar_Pick_F_Exprs;
         

      end Initialize_Fields_For_Grammar_Pick;

      
   function Grammar_Pick_F_Exprs
     (Node : Bare_Grammar_Pick) return Bare_Grammar_Expr_List
   is
      

   begin
         
         return Node.Grammar_Pick_F_Exprs;
      
   end;




   


      

   --
   --  Primitives for Bare_Grammar_Implicit_Pick
   --

   



      
      procedure Initialize_Fields_For_Grammar_Implicit_Pick
        (Self : Bare_Grammar_Implicit_Pick
         ; Grammar_Pick_F_Exprs : Bare_Grammar_Expr_List
        ) is
      begin
            Initialize_Fields_For_Grammar_Pick
              (Self, Grammar_Pick_F_Exprs);

         

      end Initialize_Fields_For_Grammar_Implicit_Pick;




   


      

   --
   --  Primitives for Bare_Grammar_Predicate
   --

   



      
      procedure Initialize_Fields_For_Grammar_Predicate
        (Self : Bare_Grammar_Predicate
         ; Grammar_Predicate_F_Expr : Bare_Grammar_Expr
         ; Grammar_Predicate_F_Prop_Ref : Bare_Expr
        ) is
      begin
            Initialize_Fields_For_Grammar_Expr
              (Self);

            Self.Grammar_Predicate_F_Expr := Grammar_Predicate_F_Expr;
            Self.Grammar_Predicate_F_Prop_Ref := Grammar_Predicate_F_Prop_Ref;
         

      end Initialize_Fields_For_Grammar_Predicate;

      
   function Grammar_Predicate_F_Expr
     (Node : Bare_Grammar_Predicate) return Bare_Grammar_Expr
   is
      

   begin
         
         return Node.Grammar_Predicate_F_Expr;
      
   end;

      
   function Grammar_Predicate_F_Prop_Ref
     (Node : Bare_Grammar_Predicate) return Bare_Expr
   is
      

   begin
         
         return Node.Grammar_Predicate_F_Prop_Ref;
      
   end;




   


      

   --
   --  Primitives for Bare_Grammar_Rule_Ref
   --

   



      
      procedure Initialize_Fields_For_Grammar_Rule_Ref
        (Self : Bare_Grammar_Rule_Ref
         ; Grammar_Rule_Ref_F_Node_Name : Bare_Ref_Id
        ) is
      begin
            Initialize_Fields_For_Grammar_Expr
              (Self);

            Self.Grammar_Rule_Ref_F_Node_Name := Grammar_Rule_Ref_F_Node_Name;
         

      end Initialize_Fields_For_Grammar_Rule_Ref;

      
   function Grammar_Rule_Ref_F_Node_Name
     (Node : Bare_Grammar_Rule_Ref) return Bare_Ref_Id
   is
      

   begin
         
         return Node.Grammar_Rule_Ref_F_Node_Name;
      
   end;




   


      

   --
   --  Primitives for Bare_Grammar_Skip
   --

   



      
      procedure Initialize_Fields_For_Grammar_Skip
        (Self : Bare_Grammar_Skip
         ; Grammar_Skip_F_Name : Bare_Type_Ref
        ) is
      begin
            Initialize_Fields_For_Grammar_Expr
              (Self);

            Self.Grammar_Skip_F_Name := Grammar_Skip_F_Name;
         

      end Initialize_Fields_For_Grammar_Skip;

      
   function Grammar_Skip_F_Name
     (Node : Bare_Grammar_Skip) return Bare_Type_Ref
   is
      

   begin
         
         return Node.Grammar_Skip_F_Name;
      
   end;




   


      

   --
   --  Primitives for Bare_Grammar_Stop_Cut
   --

   



      
      procedure Initialize_Fields_For_Grammar_Stop_Cut
        (Self : Bare_Grammar_Stop_Cut
         ; Grammar_Stop_Cut_F_Expr : Bare_Grammar_Expr
        ) is
      begin
            Initialize_Fields_For_Grammar_Expr
              (Self);

            Self.Grammar_Stop_Cut_F_Expr := Grammar_Stop_Cut_F_Expr;
         

      end Initialize_Fields_For_Grammar_Stop_Cut;

      
   function Grammar_Stop_Cut_F_Expr
     (Node : Bare_Grammar_Stop_Cut) return Bare_Grammar_Expr
   is
      

   begin
         
         return Node.Grammar_Stop_Cut_F_Expr;
      
   end;




   


      

   --
   --  Primitives for Bare_Parse_Node_Expr
   --

   



      
      procedure Initialize_Fields_For_Parse_Node_Expr
        (Self : Bare_Parse_Node_Expr
         ; Parse_Node_Expr_F_Node_Name : Bare_Type_Ref
         ; Parse_Node_Expr_F_Sub_Exprs : Bare_Grammar_Expr_List
        ) is
      begin
            Initialize_Fields_For_Grammar_Expr
              (Self);

            Self.Parse_Node_Expr_F_Node_Name := Parse_Node_Expr_F_Node_Name;
            Self.Parse_Node_Expr_F_Sub_Exprs := Parse_Node_Expr_F_Sub_Exprs;
         

      end Initialize_Fields_For_Parse_Node_Expr;

      
   function Parse_Node_Expr_F_Node_Name
     (Node : Bare_Parse_Node_Expr) return Bare_Type_Ref
   is
      

   begin
         
         return Node.Parse_Node_Expr_F_Node_Name;
      
   end;

      
   function Parse_Node_Expr_F_Sub_Exprs
     (Node : Bare_Parse_Node_Expr) return Bare_Grammar_Expr_List
   is
      

   begin
         
         return Node.Parse_Node_Expr_F_Sub_Exprs;
      
   end;




   


      

   --
   --  Primitives for Bare_Token_Lit
   --

   



      
      procedure Initialize_Fields_For_Token_Lit
        (Self : Bare_Token_Lit
        ) is
      begin
            Initialize_Fields_For_Grammar_Expr
              (Self);

         

      end Initialize_Fields_For_Token_Lit;




   


      

   --
   --  Primitives for Bare_Token_No_Case_Lit
   --

   



      
      procedure Initialize_Fields_For_Token_No_Case_Lit
        (Self : Bare_Token_No_Case_Lit
         ; Token_No_Case_Lit_F_Lit : Bare_Token_Lit
        ) is
      begin
            Initialize_Fields_For_Grammar_Expr
              (Self);

            Self.Token_No_Case_Lit_F_Lit := Token_No_Case_Lit_F_Lit;
         

      end Initialize_Fields_For_Token_No_Case_Lit;

      
   function Token_No_Case_Lit_F_Lit
     (Node : Bare_Token_No_Case_Lit) return Bare_Token_Lit
   is
      

   begin
         
         return Node.Token_No_Case_Lit_F_Lit;
      
   end;




   


      

   --
   --  Primitives for Bare_Token_Pattern_Concat
   --

   



      
      procedure Initialize_Fields_For_Token_Pattern_Concat
        (Self : Bare_Token_Pattern_Concat
         ; Token_Pattern_Concat_F_Left : Bare_Grammar_Expr
         ; Token_Pattern_Concat_F_Right : Bare_Token_Pattern_Lit
        ) is
      begin
            Initialize_Fields_For_Grammar_Expr
              (Self);

            Self.Token_Pattern_Concat_F_Left := Token_Pattern_Concat_F_Left;
            Self.Token_Pattern_Concat_F_Right := Token_Pattern_Concat_F_Right;
         

      end Initialize_Fields_For_Token_Pattern_Concat;

      
   function Token_Pattern_Concat_F_Left
     (Node : Bare_Token_Pattern_Concat) return Bare_Grammar_Expr
   is
      

   begin
         
         return Node.Token_Pattern_Concat_F_Left;
      
   end;

      
   function Token_Pattern_Concat_F_Right
     (Node : Bare_Token_Pattern_Concat) return Bare_Token_Pattern_Lit
   is
      

   begin
         
         return Node.Token_Pattern_Concat_F_Right;
      
   end;




   


      

   --
   --  Primitives for Bare_Token_Pattern_Lit
   --

   



      
      procedure Initialize_Fields_For_Token_Pattern_Lit
        (Self : Bare_Token_Pattern_Lit
        ) is
      begin
            Initialize_Fields_For_Grammar_Expr
              (Self);

         

      end Initialize_Fields_For_Token_Pattern_Lit;




   


      

   --
   --  Primitives for Bare_Token_Ref
   --

   



      
      procedure Initialize_Fields_For_Token_Ref
        (Self : Bare_Token_Ref
         ; Token_Ref_F_Token_Name : Bare_Ref_Id
         ; Token_Ref_F_Expr : Bare_Token_Lit
        ) is
      begin
            Initialize_Fields_For_Grammar_Expr
              (Self);

            Self.Token_Ref_F_Token_Name := Token_Ref_F_Token_Name;
            Self.Token_Ref_F_Expr := Token_Ref_F_Expr;
         

      end Initialize_Fields_For_Token_Ref;

      
   function Token_Ref_F_Token_Name
     (Node : Bare_Token_Ref) return Bare_Ref_Id
   is
      

   begin
         
         return Node.Token_Ref_F_Token_Name;
      
   end;

      
   function Token_Ref_F_Expr
     (Node : Bare_Token_Ref) return Bare_Token_Lit
   is
      

   begin
         
         return Node.Token_Ref_F_Expr;
      
   end;




   


      

   --
   --  Primitives for Bare_Id
   --

   



      
      procedure Initialize_Fields_For_Id
        (Self : Bare_Id
        ) is
      begin
            Initialize_Fields_For_Expr
              (Self);

         

      end Initialize_Fields_For_Id;




   


      

   --
   --  Primitives for Bare_Def_Id
   --

   



      
      procedure Initialize_Fields_For_Def_Id
        (Self : Bare_Def_Id
        ) is
      begin
            Initialize_Fields_For_Id
              (Self);

         

      end Initialize_Fields_For_Def_Id;




   


      

   --
   --  Primitives for Bare_Module_Ref_Id
   --

   



      
      procedure Initialize_Fields_For_Module_Ref_Id
        (Self : Bare_Module_Ref_Id
        ) is
      begin
            Initialize_Fields_For_Id
              (Self);

         

      end Initialize_Fields_For_Module_Ref_Id;




   


      

   --
   --  Primitives for Bare_Ref_Id
   --

   



      
      procedure Initialize_Fields_For_Ref_Id
        (Self : Bare_Ref_Id
        ) is
      begin
            Initialize_Fields_For_Id
              (Self);

         
      Self.Ref_Id_Ref_Var := Null_Var_Record;

      end Initialize_Fields_For_Ref_Id;


   







--# property-start RefId.from_node nodes.lkt:3836
pragma Warnings (Off, "is not referenced");
 function Ref_Id_P_From_Node
  
  (Node : Bare_Ref_Id
  )

   return Bare_Lkt_Node
is
   Self : Bare_Ref_Id  := Bare_Ref_Id (Node);
      --# bind self Self

   


   Property_Result : Bare_Lkt_Node;

      
            procedure Finalizer_Scope_287 with Inline_Always;

      Var_Expr_1 : Bare_Lkt_Node;
Node_Parents : Bare_Lkt_Node_Array_Access;
Fld : Bare_Lkt_Node;
Is_A : Boolean;
Fld_1 : Bare_Lkt_Node;
Fld_2 : Bare_Lkt_Node;
Is_A_1 : Boolean;
Scope_Result : Boolean;
Result_Var : Boolean;
If_Result : Boolean;
Find_Result : Bare_Lkt_Node;

            procedure Finalizer_Scope_287 is
            begin
                     Dec_Ref (Node_Parents);
            end Finalizer_Scope_287;


begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         --# expr-start 2299 '<Find at nodes.lkt:3837:9>' Find_Result nodes.lkt:3837








   

   --# expr-start 2292 '<FieldAccess for parents at nodes.lkt:3837:9>' Node_Parents nodes.lkt:3837







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;



Node_Parents := Parents (Self, True); 
--# expr-done 2292

   
      Find_Result := No_Bare_Lkt_Node;
   

   

      

      declare
         
         Collection : constant Bare_Lkt_Node_Array_Access := Node_Parents;
      begin
         for Item_0 of
               Collection.Items
         loop

            
   --# scope-start


               --# bind p Item_0

            
      --# expr-start 2298 '<BooleanBinaryOp Or at nodes.lkt:3839:13>' If_Result nodes.lkt:3839



--# expr-start 2294 '<IsA BlockExpr, MatchBranch, LambdaExpr, FunDecl at nodes.lkt:3839:13>' Is_A nodes.lkt:3839
--# expr-start 2293 '<parent at nodes.lkt:3839:13>' Fld nodes.lkt:3839







   if Item_0 = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Item_0.Parent; 
--# expr-done 2293
Is_A := Fld /= null 
and then Fld.Kind in Lkt_Block_Expr_Range | Lkt_Match_Branch_Range | Lkt_Lambda_Expr_Range | Lkt_Fun_Decl_Range; 
--# expr-done 2294
if Is_A then
   
   If_Result := True;
else
   


--# expr-start 2295 '<parent at nodes.lkt:3840:16>' Fld_1 nodes.lkt:3840







   if Item_0 = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_1 := Item_0.Parent; 
--# expr-done 2295
Var_Expr_1 := Fld_1;





if Var_Expr_1 /= No_Bare_Lkt_Node then
   



   --# scope-start


   --# bind v1 Var_Expr_1

--# expr-start 2297 '<IsA BlockExpr at nodes.lkt:3840:36>' Is_A_1 nodes.lkt:3840
--# expr-start 2296 '<parent at nodes.lkt:3840:36>' Fld_2 nodes.lkt:3840







   if Var_Expr_1 = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_2 := Var_Expr_1.Parent; 
--# expr-done 2296
Is_A_1 := Fld_2 /= null 
and then Fld_2.Kind in Lkt_Block_Expr_Range; 
--# expr-done 2297
Scope_Result := Is_A_1;


   --# end


   Result_Var := Scope_Result;
else
   
   Result_Var := False;
end if;



   If_Result := Result_Var;
end if;



--# expr-done 2298
      if If_Result then
         Find_Result := Item_0; 
      end if;
   

            
   --# end


               exit when If_Result;

         end loop;
      end;
   

   
   



--# expr-done 2299

         Property_Result := Find_Result;
         
   --# end
      Finalizer_Scope_287;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_287;




            raise;
      end;



   return Property_Result;
end Ref_Id_P_From_Node;
--# end

   







--# property-start RefId.first_var_in_env nodes.lkt:3847
pragma Warnings (Off, "is not referenced");
 function Ref_Id_P_First_Var_In_Env
  
  (Node : Bare_Ref_Id
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Internal_Entity_Decl
is
   Self : Bare_Ref_Id  := Bare_Ref_Id (Node);
     Ent : Internal_Entity_Ref_Id :=
       Internal_Entity_Ref_Id'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Internal_Entity_Decl;

      
            procedure Finalizer_Scope_288 with Inline_Always;
            procedure Finalizer_Scope_708 with Inline_Always;

      Var_Expr_1 : Internal_Entity_Decl;
Left_Var : Internal_Entity_Base_Val_Decl;
Var_Expr_68 : Internal_Entity_Decl;
Fld : Lexical_Env := Empty_Env;
Fld_1 : Bare_Ref_Id;
Sym : Symbol_Type;
Fld_2 : Bare_Lkt_Node;
Env_Get_Result : Internal_Entity_Array_Access;
Fld_3 : Internal_Entity_Array_Access;
Is_Equiv : Boolean;
Quantifier_Result : Boolean;
Not_Val : Boolean;
Find_Result : Internal_Entity;
Cast_Result : Internal_Entity_Base_Val_Decl;
Scope_Result : Internal_Entity_Base_Val_Decl;
Fld_4 : Lexical_Env := Empty_Env;
Fld_5 : Bare_Ref_Id;
Sym_1 : Symbol_Type;
Env_Get_Result_1 : Internal_Entity;
Cast_Result_1 : Internal_Entity_Decl;
Fld_6 : Internal_Entity_Decl;
Is_A : Boolean;
If_Result : Internal_Entity_Decl;
Scope_Result_1 : Internal_Entity_Decl;
Result_Var : Internal_Entity_Decl;
Scope_Result_2 : Internal_Entity_Decl;
Result_Var_1 : Internal_Entity_Decl;
Cast_Result_2 : Internal_Entity_Decl;
Result_Var_2 : Internal_Entity_Decl;

            procedure Finalizer_Scope_288 is
            begin
                     Dec_Ref (Fld);
                     Dec_Ref (Env_Get_Result);
                     Dec_Ref (Fld_4);
            end Finalizer_Scope_288;
            procedure Finalizer_Scope_708 is
            begin
                     Dec_Ref (Fld_3);
            end Finalizer_Scope_708;

      
      Mmz_Handle : Memoization_Handle;
      Mmz_Val    : Mmz_Value;

      Mmz_Stored : Boolean;
      --  Whether the memoization couple was actually stored. Used to determine
      --  whether to inc-ref the memoized value.

      function Create_Mmz_Key return Mmz_Key;
      --  Create a memoization key for this property call and return it

      --------------------
      -- Create_Mmz_Key --
      --------------------

      function Create_Mmz_Key return Mmz_Key is
      begin
         return Mmz_K : Mmz_Key :=
           (Property => Mmz_Bare_Ref_Id_Ref_Id_P_First_Var_In_Env,
            Items    => new Mmz_Key_Array (1 ..  2))
         do
            Mmz_K.Items (1) := (Kind => Mmz_Bare_Ref_Id,
                                As_Bare_Ref_Id => Self);
               Mmz_K.Items (2) :=
                 (Kind => Mmz_Internal_Entity_Info,
                  As_Internal_Entity_Info => E_Info);
         end return;
      end Create_Mmz_Key;

begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;

      if Self /= null then

         if not Self.Unit.Context.In_Populate_Lexical_Env then

            if Find_Memoized_Value
              (Self.Unit, Mmz_Handle, Mmz_Val, Create_Mmz_Key'Access)
            then
               --# memoization-lookup

               if Mmz_Val.Kind = Mmz_Evaluating then
                  --# memoization-return
                  Raise_Property_Exception
                    (Self,
                     Property_Error'Identity,
                     "Infinite recursion detected");

               elsif Mmz_Val.Kind = Mmz_Error then
                  --# memoization-return
                  Reraise_Memoized_Error (Mmz_Val);

               else
                  Property_Result := Mmz_Val.As_Internal_Entity_Decl;

                  --# memoization-return
                  return Property_Result;
               end if;
               --# end
            end if;

         end if;
      end if;

      begin
         
   --# scope-start

         


--# expr-start 2309 '<Cast to BaseValDecl at nodes.lkt:3848:9>' Cast_Result nodes.lkt:3848





--# expr-start 2308 '<Find at nodes.lkt:3848:9>' Find_Result nodes.lkt:3848








   

   --# expr-start 2303 '<EnvGet at nodes.lkt:3848:9>' Env_Get_Result nodes.lkt:3848
--# expr-start 2300 '<FieldAccess for node_env at nodes.lkt:3848:9>' Fld nodes.lkt:3848







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Liblktlang.Implementation.Node_Env (Node => Ent.Node, E_Info => Ent.Info);
--# expr-done 2300
--# expr-start 2301 '<GetSymbol at nodes.lkt:3848:27>' Sym nodes.lkt:3848









Fld_1 := Ent.Node; 
Sym := Get_Symbol (Fld_1); 
--# expr-done 2301


--# expr-start 2302 '<FieldAccess for from_node at nodes.lkt:3848:45>' Fld_2 nodes.lkt:3848







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start RefId.from_node
Fld_2 := Liblktlang.Implementation.Ref_Id_P_From_Node (Node => Self);
--# end
--# expr-done 2302
Env_Get_Result := Construct_Entity_Array (AST_Envs.Get (Self => Fld, Key => Thin (Sym), Lookup_Kind => To_Lookup_Kind_Type (Recursive), Categories => (Nocat => True), From => Fld_2)); 
--# expr-done 2303

   
      Find_Result := No_Entity;
   

   

      

      declare
         
         Collection : constant Internal_Entity_Array_Access := Env_Get_Result;
      begin
         for Item_0 of
               Collection.Items
         loop

            
   --# scope-start


               --# bind d Item_0

            
      --# expr-start 2307 '<Not at nodes.lkt:3849:20>' Not_Val nodes.lkt:3849
--# expr-start 2306 '<Contains at nodes.lkt:3849:24>' Quantifier_Result nodes.lkt:3849








   

   --# expr-start 2304 '<FieldAccess for parents at nodes.lkt:3849:24>' Fld_3 nodes.lkt:3849







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;



Fld_3 := Liblktlang.Implementation.Parents (Node => Ent.Node, With_Self => True, E_Info => Ent.Info);
--# expr-done 2304

   
      Quantifier_Result := False;
   

   

      

      declare
         
         Collection : constant Internal_Entity_Array_Access := Fld_3;
      begin
         for Item_3 of
               Collection.Items
         loop

            
   --# scope-start


               --# bind item Item_3

            
      --# expr-start 2305 '<Eq at ???>' Is_Equiv None


Is_Equiv := Equivalent (Item_3, Item_0); 
--# expr-done 2305
      Quantifier_Result := Is_Equiv;
   

            
   --# end


               exit when Quantifier_Result;

         end loop;
      end;
   

   
   



--# expr-done 2306
Not_Val := not (Quantifier_Result); 
--# expr-done 2307
      if Not_Val then
         Find_Result := Item_0; 
      end if;
   

            
   --# end
      Finalizer_Scope_708;


               exit when Not_Val;

         end loop;
      end;
   

   
   



--# expr-done 2308



   if Find_Result.Node = null
      or else Find_Result.Node.Kind in Lkt_Base_Val_Decl
   then
      
      Cast_Result := Create_Internal_Entity_Base_Val_Decl
        (Node => Find_Result.Node,
         Info => Find_Result.Info);

   else
         Cast_Result := No_Entity_Base_Val_Decl;
   end if;


--# expr-done 2309
Left_Var := Cast_Result;





if Left_Var /= No_Entity_Base_Val_Decl then
   








   --# scope-start


   


Scope_Result := Left_Var;


   --# end





   
      Cast_Result_2 := Create_Internal_Entity_Decl
        (Node => Scope_Result.Node,
         Info => Scope_Result.Info);


   Result_Var_2 := Cast_Result_2;
else
   


--# expr-start 2313 '<Cast to Decl at nodes.lkt:3852:13>' Cast_Result_1 nodes.lkt:3852





--# expr-start 2312 '<EnvGet at nodes.lkt:3852:13>' Env_Get_Result_1 nodes.lkt:3852
--# expr-start 2310 '<FieldAccess for node_env at nodes.lkt:3852:13>' Fld_4 nodes.lkt:3852







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_4 := Liblktlang.Implementation.Node_Env (Node => Ent.Node, E_Info => Ent.Info);
--# expr-done 2310
--# expr-start 2311 '<GetSymbol at nodes.lkt:3852:37>' Sym_1 nodes.lkt:3852









Fld_5 := Ent.Node; 
Sym_1 := Get_Symbol (Fld_5); 
--# expr-done 2311


Env_Get_Result_1 := AST_Envs.Get_First (Self => Fld_4, Key => Thin (Sym_1), Lookup_Kind => To_Lookup_Kind_Type (Recursive), Categories => (Nocat => True)); 
--# expr-done 2312



   if Env_Get_Result_1.Node = null
      or else Env_Get_Result_1.Node.Kind in Lkt_Decl
   then
      
      Cast_Result_1 := Create_Internal_Entity_Decl
        (Node => Env_Get_Result_1.Node,
         Info => Env_Get_Result_1.Info);

   else
         Cast_Result_1 := No_Entity_Decl;
   end if;


--# expr-done 2313
Var_Expr_68 := Cast_Result_1;





if Var_Expr_68 /= No_Entity_Decl then
   



   --# scope-start


   




--# expr-start 2314 '<FieldAccess for subdecl_if_generic at nodes.lkt:3852:13>' Fld_6 nodes.lkt:3852







   if Var_Expr_68.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start Decl.subdecl_if_generic
Fld_6 := Liblktlang.Implementation.Decl_P_Subdecl_If_Generic (Node => Var_Expr_68.Node, E_Info => Var_Expr_68.Info);
--# end
--# expr-done 2314
Var_Expr_1 := Fld_6;





if Var_Expr_1 /= No_Entity_Decl then
   



   --# scope-start


   --# bind d Var_Expr_1

--# expr-start 2316 '<If at nodes.lkt:3853:20>' If_Result nodes.lkt:3853



--# expr-start 2315 '<IsA TypeDecl, FunDecl at nodes.lkt:3853:23>' Is_A nodes.lkt:3853

Is_A := Var_Expr_1.Node /= null 
and then Var_Expr_1.Node.Kind in Lkt_Type_Decl | Lkt_Fun_Decl_Range; 
--# expr-done 2315
if Is_A then
   
   If_Result := Var_Expr_1;
else
   
   If_Result := No_Entity_Decl;
end if;



--# expr-done 2316
Scope_Result_1 := If_Result;


   --# end


   Result_Var := Scope_Result_1;
else
   
   Result_Var := No_Entity_Decl;
end if;



Scope_Result_2 := Result_Var;


   --# end


   Result_Var_1 := Scope_Result_2;
else
   
   Result_Var_1 := No_Entity_Decl;
end if;



   Result_Var_2 := Result_Var_1;
end if;




         Property_Result := Result_Var_2;
         
   --# end
      Finalizer_Scope_288;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_288;
                     Finalizer_Scope_708;


               if Self /= null then
                     if not Self.Unit.Context.In_Populate_Lexical_Env then
                        Add_Memoized_Error
                          (Self.Unit, Mmz_Handle, Exc, Mmz_Stored);
                     end if;
               end if;


            raise;
      end;

      if Self /= null then
         if not Self.Unit.Context.In_Populate_Lexical_Env then

            Mmz_Val := (Kind => Mmz_Internal_Entity_Decl,
                        As_Internal_Entity_Decl => Property_Result);
            Add_Memoized_Value (Self.Unit, Mmz_Handle, Mmz_Val, Mmz_Stored);

         end if;
      end if;



   return Property_Result;
end Ref_Id_P_First_Var_In_Env;
--# end

   







--# property-start RefId.is_being_called nodes.lkt:3856
pragma Warnings (Off, "is not referenced");
 function Ref_Id_P_Is_Being_Called
  
  (Node : Bare_Ref_Id
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Boolean
is
   Self : Bare_Ref_Id  := Bare_Ref_Id (Node);
     Ent : Internal_Entity_Ref_Id :=
       Internal_Entity_Ref_Id'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Boolean;

      

      Var_Expr_0 : Internal_Entity_Base_Dot_Expr;
Fld : Internal_Entity;
Is_A : Boolean;
Fld_1 : Internal_Entity;
Cast_Result : Internal_Entity_Base_Dot_Expr;
Fld_2 : Internal_Entity_Ref_Id;
Cast_Result_1 : Internal_Entity;
Cast_Expr : Internal_Entity_Ref_Id;
Cast_Result_2 : Internal_Entity;
Is_Equiv : Boolean;
Fld_3 : Internal_Entity;
Is_A_1 : Boolean;
If_Result : Boolean;
Scope_Result : Boolean;
Result_Var : Boolean;
If_Result_1 : Boolean;



begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         --# expr-start 2326 '<BooleanBinaryOp Or at nodes.lkt:3857:9>' If_Result_1 nodes.lkt:3857



--# expr-start 2318 '<IsA CallExpr, LogicPropagate, LogicPredicate at nodes.lkt:3857:9>' Is_A nodes.lkt:3857
--# expr-start 2317 '<parent at nodes.lkt:3857:9>' Fld nodes.lkt:3857







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Liblktlang.Implementation.Parent (Node => Ent.Node, E_Info => Ent.Info);
--# expr-done 2317
Is_A := Fld.Node /= null 
and then Fld.Node.Kind in Lkt_Call_Expr_Range | Lkt_Logic_Propagate_Range | Lkt_Logic_Predicate_Range; 
--# expr-done 2318
if Is_A then
   
   If_Result_1 := True;
else
   


--# expr-start 2320 '<Cast to BaseDotExpr at nodes.lkt:3858:12>' Cast_Result nodes.lkt:3858





--# expr-start 2319 '<parent at nodes.lkt:3858:12>' Fld_1 nodes.lkt:3858







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_1 := Liblktlang.Implementation.Parent (Node => Ent.Node, E_Info => Ent.Info);
--# expr-done 2319



   if Fld_1.Node = null
      or else Fld_1.Node.Kind in Lkt_Base_Dot_Expr
   then
      
      Cast_Result := Create_Internal_Entity_Base_Dot_Expr
        (Node => Fld_1.Node,
         Info => Fld_1.Info);

   else
         Cast_Result := No_Entity_Base_Dot_Expr;
   end if;


--# expr-done 2320
Var_Expr_0 := Cast_Result;





if Var_Expr_0 /= No_Entity_Base_Dot_Expr then
   



   --# scope-start


   --# bind de Var_Expr_0

--# expr-start 2325 '<BooleanBinaryOp And at nodes.lkt:3860:13>' If_Result nodes.lkt:3860



--# expr-start 2322 '<Eq at nodes.lkt:3860:13>' Is_Equiv nodes.lkt:3860





--# expr-start 2321 '<FieldAccess for suffix at nodes.lkt:3860:13>' Fld_2 nodes.lkt:3860







   if Var_Expr_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_2 := Create_Internal_Entity_Ref_Id (Node => Var_Expr_0.Node.Base_Dot_Expr_F_Suffix, Info => Var_Expr_0.Info);
--# expr-done 2321



   
      Cast_Result_1 := Create_Internal_Entity
        (Node => Fld_2.Node,
         Info => Fld_2.Info);








Cast_Expr := Ent; 



   
      Cast_Result_2 := Create_Internal_Entity
        (Node => Cast_Expr.Node,
         Info => Cast_Expr.Info);


Is_Equiv := Equivalent (Cast_Result_1, Cast_Result_2); 
--# expr-done 2322
if Is_Equiv then
   --# expr-start 2324 '<IsA CallExpr, LogicPropagate, LogicPredicate at nodes.lkt:3861:17>' Is_A_1 nodes.lkt:3861
--# expr-start 2323 '<parent at nodes.lkt:3861:17>' Fld_3 nodes.lkt:3861







   if Var_Expr_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_3 := Liblktlang.Implementation.Parent (Node => Var_Expr_0.Node, E_Info => Var_Expr_0.Info);
--# expr-done 2323
Is_A_1 := Fld_3.Node /= null 
and then Fld_3.Node.Kind in Lkt_Call_Expr_Range | Lkt_Logic_Propagate_Range | Lkt_Logic_Predicate_Range; 
--# expr-done 2324
   If_Result := Is_A_1;
else
   
   If_Result := False;
end if;



--# expr-done 2325
Scope_Result := If_Result;


   --# end


   Result_Var := Scope_Result;
else
   
   Result_Var := False;
end if;



   If_Result_1 := Result_Var;
end if;



--# expr-done 2326

         Property_Result := If_Result_1;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Ref_Id_P_Is_Being_Called;
--# end

   







--# property-start RefId.referenced_decl nodes.lkt:3867
pragma Warnings (Off, "is not referenced");
 function Ref_Id_P_Referenced_Decl
  
  (Node : Bare_Ref_Id
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Internal_Entity_Decl
is
   Self : Bare_Ref_Id  := Bare_Ref_Id (Node);
     Ent : Internal_Entity_Ref_Id :=
       Internal_Entity_Ref_Id'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Internal_Entity_Decl;

      
            procedure Finalizer_Scope_290 with Inline_Always;

      Fld : Logic_Var;
Is_Logic_Var_Defined : Boolean;
Eq_Solution : Internal_Entity;
If_Result : Internal_Entity;
Cast_Result : Internal_Entity_Decl;
Fld_1 : Internal_Solver_Result := No_Solver_Result;
Fld_2 : Boolean;
If_Result_1 : Internal_Entity_Decl;

            procedure Finalizer_Scope_290 is
            begin
                     Dec_Ref (Fld_1);
            end Finalizer_Scope_290;

      
      Mmz_Handle : Memoization_Handle;
      Mmz_Val    : Mmz_Value;

      Mmz_Stored : Boolean;
      --  Whether the memoization couple was actually stored. Used to determine
      --  whether to inc-ref the memoized value.

      function Create_Mmz_Key return Mmz_Key;
      --  Create a memoization key for this property call and return it

      --------------------
      -- Create_Mmz_Key --
      --------------------

      function Create_Mmz_Key return Mmz_Key is
      begin
         return Mmz_K : Mmz_Key :=
           (Property => Mmz_Bare_Ref_Id_Ref_Id_P_Referenced_Decl,
            Items    => new Mmz_Key_Array (1 ..  2))
         do
            Mmz_K.Items (1) := (Kind => Mmz_Bare_Ref_Id,
                                As_Bare_Ref_Id => Self);
               Mmz_K.Items (2) :=
                 (Kind => Mmz_Internal_Entity_Info,
                  As_Internal_Entity_Info => E_Info);
         end return;
      end Create_Mmz_Key;

begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;

      if Self /= null then

         if not Self.Unit.Context.In_Populate_Lexical_Env then

            if Find_Memoized_Value
              (Self.Unit, Mmz_Handle, Mmz_Val, Create_Mmz_Key'Access)
            then
               --# memoization-lookup

               if Mmz_Val.Kind = Mmz_Evaluating then
                  --# memoization-return
                  Raise_Property_Exception
                    (Self,
                     Property_Error'Identity,
                     "Infinite recursion detected");

               elsif Mmz_Val.Kind = Mmz_Error then
                  --# memoization-return
                  Reraise_Memoized_Error (Mmz_Val);

               else
                  Property_Result := Mmz_Val.As_Internal_Entity_Decl;

                  --# memoization-return
                  return Property_Result;
               end if;
               --# end
            end if;

         end if;
      end if;

      begin
         
   --# scope-start

         --# expr-start 2332 '<If at nodes.lkt:3868:9>' If_Result_1 nodes.lkt:3868



--# expr-start 2328 '<FieldAccess for success at nodes.lkt:3868:12>' Fld_2 nodes.lkt:3868



--# expr-start 2327 '<FieldAccess for solve_enclosing_context at nodes.lkt:3868:12>' Fld_1 nodes.lkt:3868







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start LktNode.solve_enclosing_context
Fld_1 := Liblktlang.Implementation.Lkt_Node_P_Solve_Enclosing_Context (Node => Ent.Node, E_Info => Ent.Info);
--# end
--# expr-done 2327





Fld_2 := Fld_1.Success;
--# expr-done 2328
if Fld_2 then
   --# expr-start 2331 '<Cast to Decl at nodes.lkt:3869:14>' Cast_Result nodes.lkt:3869





--# expr-start 2330 '<get_value at nodes.lkt:3869:14>' If_Result nodes.lkt:3869



--# expr-start 2329 '<FieldAccess for ref_var at nodes.lkt:3869:14>' Fld nodes.lkt:3869







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Self.Ref_Id_Ref_Var'Unrestricted_Access;
--# expr-done 2329
Is_Logic_Var_Defined := Entity_Vars.Is_Defined (Fld); 
if Is_Logic_Var_Defined then
   
Eq_Solution := Entity_Vars.Get_Value (Fld); 
   If_Result := Eq_Solution;
else
   
   If_Result := No_Entity;
end if;



--# expr-done 2330



   if If_Result.Node = null
      or else If_Result.Node.Kind in Lkt_Decl
   then
      
      Cast_Result := Create_Internal_Entity_Decl
        (Node => If_Result.Node,
         Info => If_Result.Info);

   else
         Raise_Property_Exception
           (Self, Property_Error'Identity, "invalid object cast");
   end if;


--# expr-done 2331
   If_Result_1 := Cast_Result;
else
   
   If_Result_1 := No_Entity_Decl;
end if;



--# expr-done 2332

         Property_Result := If_Result_1;
         
   --# end
      Finalizer_Scope_290;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_290;


               if Self /= null then
                     if not Self.Unit.Context.In_Populate_Lexical_Env then
                        Add_Memoized_Error
                          (Self.Unit, Mmz_Handle, Exc, Mmz_Stored);
                     end if;
               end if;


            raise;
      end;

      if Self /= null then
         if not Self.Unit.Context.In_Populate_Lexical_Env then

            Mmz_Val := (Kind => Mmz_Internal_Entity_Decl,
                        As_Internal_Entity_Decl => Property_Result);
            Add_Memoized_Value (Self.Unit, Mmz_Handle, Mmz_Val, Mmz_Stored);

         end if;
      end if;



   return Property_Result;
end Ref_Id_P_Referenced_Decl;
--# end

   







--# property-start RefId.xtype_equation nodes.lkt:3872
pragma Warnings (Off, "is not referenced");
 function Ref_Id_P_Xtype_Equation
  
  (Node : Bare_Ref_Id
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Logic_Equation
is
   Self : Bare_Ref_Id  := Bare_Ref_Id (Node);
     Ent : Internal_Entity_Ref_Id :=
       Internal_Entity_Ref_Id'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Logic_Equation;

      
            procedure Finalizer_Scope_291 with Inline_Always;

      Local_First_Var : Internal_Entity_Decl;
Var_Expr_69 : Internal_Entity_Decl;
Fld : Lexical_Env := Empty_Env;
Fld_1 : Bare_Ref_Id;
Sym : Symbol_Type;
Env_Get_Result : Internal_Entity;
Cast_Result : Internal_Entity_Decl;
Fld_2 : Internal_Entity_Decl;
Scope_Result : Internal_Entity_Decl;
Result_Var : Internal_Entity_Decl;
Fld_3 : Logic_Var;
Cast_Expr : Internal_Entity_Decl;
Cast_Result_1 : Internal_Entity;
Bind_Result : Logic_Equation;
Cast_Expr_1 : Bare_Ref_Id;
Cast_Result_2 : Bare_Lkt_Node;
Bound_Error_Location : Bare_Lkt_Node;
Fld_4 : Logic_Var;
Pred : Logic_Equation;
Dyn_Var_Bind_Result : Logic_Equation;
Cast_Expr_2 : Bare_Ref_Id;
Cast_Result_3 : Bare_Lkt_Node;
Bound_Error_Location_1 : Bare_Lkt_Node;
Fld_5 : Logic_Var;
Pred_1 : Logic_Equation;
Dyn_Var_Bind_Result_1 : Logic_Equation;
Fld_6 : Logic_Var;
Cast_Expr_3 : Internal_Entity_Type_Decl;
Cast_Result_4 : Internal_Entity;
Bind_Result_1 : Logic_Equation;
And_Pred : Logic_Equation;
Is_Null : Boolean;
If_Result : Logic_Equation;
And_Pred_1 : Logic_Equation;
Let_Result : Logic_Equation;

            procedure Finalizer_Scope_291 is
            begin
                     Dec_Ref (Fld);
                     Dec_Ref (Bind_Result);
                     Dec_Ref (Pred);
                     Dec_Ref (Dyn_Var_Bind_Result);
                     Dec_Ref (Pred_1);
                     Dec_Ref (Dyn_Var_Bind_Result_1);
                     Dec_Ref (Bind_Result_1);
                     Dec_Ref (And_Pred);
                     Dec_Ref (If_Result);
                     Dec_Ref (And_Pred_1);
                     Dec_Ref (Let_Result);
            end Finalizer_Scope_291;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 2352 '<Let at nodes.lkt:3873:9>' Let_Result nodes.lkt:3873
--# scope-start



--# expr-start 2336 '<Cast to Decl at nodes.lkt:3874:13>' Cast_Result nodes.lkt:3874





--# expr-start 2335 '<EnvGet at nodes.lkt:3874:13>' Env_Get_Result nodes.lkt:3874
--# expr-start 2333 '<FieldAccess for node_env at nodes.lkt:3874:13>' Fld nodes.lkt:3874







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Liblktlang.Implementation.Node_Env (Node => Ent.Node, E_Info => Ent.Info);
--# expr-done 2333
--# expr-start 2334 '<GetSymbol at nodes.lkt:3874:37>' Sym nodes.lkt:3874









Fld_1 := Ent.Node; 
Sym := Get_Symbol (Fld_1); 
--# expr-done 2334


Env_Get_Result := AST_Envs.Get_First (Self => Fld, Key => Thin (Sym), Lookup_Kind => To_Lookup_Kind_Type (Recursive), Categories => (Nocat => True)); 
--# expr-done 2335



   if Env_Get_Result.Node = null
      or else Env_Get_Result.Node.Kind in Lkt_Decl
   then
      
      Cast_Result := Create_Internal_Entity_Decl
        (Node => Env_Get_Result.Node,
         Info => Env_Get_Result.Info);

   else
         Raise_Property_Exception
           (Self, Property_Error'Identity, "invalid object cast");
   end if;


--# expr-done 2336
Var_Expr_69 := Cast_Result;





if Var_Expr_69 /= No_Entity_Decl then
   



   --# scope-start


   

--# expr-start 2337 '<FieldAccess for subdecl_if_generic at nodes.lkt:3874:13>' Fld_2 nodes.lkt:3874







   if Var_Expr_69.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start Decl.subdecl_if_generic
Fld_2 := Liblktlang.Implementation.Decl_P_Subdecl_If_Generic (Node => Var_Expr_69.Node, E_Info => Var_Expr_69.Info);
--# end
--# expr-done 2337
Scope_Result := Fld_2;


   --# end


   Result_Var := Scope_Result;
else
   
   Result_Var := No_Entity_Decl;
end if;



Local_First_Var := Result_Var; 
--# bind first_var Local_First_Var
--# expr-start 2351 '<LogicBinaryOp And at nodes.lkt:3878:9>' And_Pred_1 nodes.lkt:3878
--# expr-start 2339 '<Bind at nodes.lkt:3878:9>' Bind_Result nodes.lkt:3878
--# expr-start 2338 '<FieldAccess for ref_var at nodes.lkt:3878:9>' Fld_3 nodes.lkt:3878







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_3 := Ent.Node.Ref_Id_Ref_Var'Unrestricted_Access;
--# expr-done 2338
Fld_3.Value := No_Entity;
Entity_Vars.Reset (Fld_3);






Cast_Expr := Local_First_Var; 



   
      Cast_Result_1 := Create_Internal_Entity
        (Node => Cast_Expr.Node,
         Info => Cast_Expr.Info);


Bind_Result := Solver.Create_Assign (Fld_3, Cast_Result_1, Solver_Ifc.No_Converter, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3878:9") else null)); 
--# expr-done 2339
--# expr-start 2350 '<If at nodes.lkt:3880:13>' If_Result nodes.lkt:3880



--# expr-start 2340 '<IsNull at nodes.lkt:3880:16>' Is_Null nodes.lkt:3880

Is_Null := Local_First_Var.Node = null; 
--# expr-done 2340
if Is_Null then
   --# expr-start 2343 '<bind at nodes.lkt:3882:17>' Dyn_Var_Bind_Result nodes.lkt:3882






Cast_Expr_1 := Self; 



   
      Cast_Result_2 := Cast_Expr_1;


Bound_Error_Location := Cast_Result_2; 
--# expr-start 2342 '<Predicate on Decl.is_defined at nodes.lkt:3883:17>' Pred nodes.lkt:3883
--# expr-start 2341 '<FieldAccess for ref_var at nodes.lkt:3883:34>' Fld_4 nodes.lkt:3883







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_4 := Ent.Node.Ref_Id_Ref_Var'Unrestricted_Access;
--# expr-done 2341
Fld_4.Value := No_Entity;
Entity_Vars.Reset (Fld_4);

Pred := Solver.Create_Predicate (Fld_4, Create_Decl_P_Is_Defined_0_Predicate (Bound_Error_Location)); 
--# expr-done 2342
Dyn_Var_Bind_Result := Pred; Inc_Ref (Dyn_Var_Bind_Result);
--# expr-done 2343
   If_Result := Dyn_Var_Bind_Result;
else
   --# expr-start 2349 '<LogicBinaryOp And at nodes.lkt:3886:17>' And_Pred nodes.lkt:3886
--# expr-start 2346 '<bind at nodes.lkt:3887:21>' Dyn_Var_Bind_Result_1 nodes.lkt:3887






Cast_Expr_2 := Self; 



   
      Cast_Result_3 := Cast_Expr_2;


Bound_Error_Location_1 := Cast_Result_3; 
--# expr-start 2345 '<Predicate on Decl.is_type_decl at nodes.lkt:3888:21>' Pred_1 nodes.lkt:3888
--# expr-start 2344 '<FieldAccess for ref_var at nodes.lkt:3888:40>' Fld_5 nodes.lkt:3888







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_5 := Ent.Node.Ref_Id_Ref_Var'Unrestricted_Access;
--# expr-done 2344
Fld_5.Value := No_Entity;
Entity_Vars.Reset (Fld_5);

Pred_1 := Solver.Create_Predicate (Fld_5, Create_Decl_P_Is_Type_Decl_0_Predicate (Bound_Error_Location_1)); 
--# expr-done 2345
Dyn_Var_Bind_Result_1 := Pred_1; Inc_Ref (Dyn_Var_Bind_Result_1);
--# expr-done 2346
--# expr-start 2348 '<Bind at nodes.lkt:3890:22>' Bind_Result_1 nodes.lkt:3890
--# expr-start 2347 '<FieldAccess for actual_type_var at nodes.lkt:3890:22>' Fld_6 nodes.lkt:3890







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_6 := Ent.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 2347
Fld_6.Value := No_Entity;
Entity_Vars.Reset (Fld_6);






Cast_Expr_3 := No_Entity_Type_Decl; 



   
      Cast_Result_4 := Create_Internal_Entity
        (Node => Cast_Expr_3.Node,
         Info => Cast_Expr_3.Info);


Bind_Result_1 := Solver.Create_Assign (Fld_6, Cast_Result_4, Solver_Ifc.No_Converter, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3890:22") else null)); 
--# expr-done 2348
And_Pred := Create_And (Dyn_Var_Bind_Result_1, Bind_Result_1, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3886:17") else null)); 
--# expr-done 2349
   If_Result := And_Pred;
end if;

      Inc_Ref (If_Result);


--# expr-done 2350
And_Pred_1 := Create_And (Bind_Result, If_Result, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3878:9") else null)); 
--# expr-done 2351
Let_Result := And_Pred_1; Inc_Ref (Let_Result);
--# end
--# expr-done 2352

         Property_Result := Let_Result;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_291;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_291;




            raise;
      end;



   return Property_Result;
end Ref_Id_P_Xtype_Equation;
--# end

   







--# property-start RefId.generic_type_equation nodes.lkt:3894
pragma Warnings (Off, "is not referenced");
 function Ref_Id_P_Generic_Type_Equation
  
  (Node : Bare_Ref_Id
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Logic_Equation
is
   Self : Bare_Ref_Id  := Bare_Ref_Id (Node);
     Ent : Internal_Entity_Ref_Id :=
       Internal_Entity_Ref_Id'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Logic_Equation;

      
            procedure Finalizer_Scope_292 with Inline_Always;

      Var_Expr_70 : Internal_Entity_Decl;
Fld : Logic_Var;
Fld_1 : Internal_Entity_Decl;
Fld_2 : Internal_Entity_Function_Type;
Scope_Result : Internal_Entity_Function_Type;
Result_Var : Internal_Entity_Function_Type;
Cast_Result : Internal_Entity;
Bind_Result : Logic_Equation;

            procedure Finalizer_Scope_292 is
            begin
                     Dec_Ref (Bind_Result);
            end Finalizer_Scope_292;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 2356 '<Bind at nodes.lkt:3896:9>' Bind_Result nodes.lkt:3896
--# expr-start 2353 '<FieldAccess for generic_func_type_var at nodes.lkt:3896:9>' Fld nodes.lkt:3896







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Ent.Node.Expr_Generic_Func_Type_Var'Unrestricted_Access;
--# expr-done 2353
Fld.Value := No_Entity;
Entity_Vars.Reset (Fld);








--# expr-start 2354 '<FieldAccess for first_var_in_env at nodes.lkt:3896:39>' Fld_1 nodes.lkt:3896







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start RefId.first_var_in_env
Fld_1 := Liblktlang.Implementation.Ref_Id_P_First_Var_In_Env (Node => Ent.Node, E_Info => Ent.Info);
--# end
--# expr-done 2354
Var_Expr_70 := Fld_1;





if Var_Expr_70 /= No_Entity_Decl then
   



   --# scope-start


   

--# expr-start 2355 '<FieldAccess for function_type at nodes.lkt:3896:39>' Fld_2 nodes.lkt:3896







   if Var_Expr_70.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start Decl.function_type
Fld_2 := Liblktlang.Implementation.Decl_P_Function_Type (Node => Var_Expr_70.Node, E_Info => Var_Expr_70.Info);
--# end
--# expr-done 2355
Scope_Result := Fld_2;


   --# end


   Result_Var := Scope_Result;
else
   
   Result_Var := No_Entity_Function_Type;
end if;






   
      Cast_Result := Create_Internal_Entity
        (Node => Result_Var.Node,
         Info => Result_Var.Info);


Bind_Result := Solver.Create_Assign (Fld, Cast_Result, Solver_Ifc.No_Converter, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3896:9") else null)); 
--# expr-done 2356

         Property_Result := Bind_Result;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_292;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_292;




            raise;
      end;



   return Property_Result;
end Ref_Id_P_Generic_Type_Equation;
--# end

   







--# property-start RefId.bind_actual_type_equation nodes.lkt:3899
pragma Warnings (Off, "is not referenced");
 function Ref_Id_P_Bind_Actual_Type_Equation
  
  (Node : Bare_Ref_Id
      ; First_Var : Internal_Entity_Decl
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Logic_Equation
is
   Self : Bare_Ref_Id  := Bare_Ref_Id (Node);
     Ent : Internal_Entity_Ref_Id :=
       Internal_Entity_Ref_Id'(Node => Self, Info => E_Info);
      --# bind entity Ent

   

   --# bind first_var First_Var

   Property_Result : Logic_Equation;

      
            procedure Finalizer_Scope_293 with Inline_Always;
            procedure Finalizer_Scope_716 with Inline_Always;
            procedure Finalizer_Scope_717 with Inline_Always;

      Match_0 : Internal_Entity_Decl;
Match_0_1 : Internal_Entity_Type_Decl;
Match_1 : Internal_Entity_Base_Val_Decl;
Match_2 : Internal_Entity_Generic_Decl;
Match_3 : Internal_Entity_Decl;
Var_Expr_0 : Internal_Entity_Decl;
Bound_In_Logic_Call : Boolean;
Fld : Logic_Var;
Fld_1 : Internal_Entity_Type_Decl;
Fld_2 : Internal_Entity_Type_Decl;
Cast_Result : Internal_Entity_Function_Type;
Fld_3 : Internal_Entity_Function_Type;
Cast_Result_1 : Internal_Entity;
Bind_Result : Logic_Equation;
Dyn_Var_Bind_Result : Logic_Equation;
Fld_4 : Logic_Var;
Fld_5 : Logic_Var;
Bind_Result_1 : Logic_Equation;
And_Pred : Logic_Equation;
Fld_6 : Logic_Var;
Fld_7 : Internal_Entity_Function_Type;
Cast_Result_2 : Internal_Entity;
Bind_Result_2 : Logic_Equation;
Fld_8 : Logic_Var;
Fld_9 : Logic_Var;
Bind_Result_3 : Logic_Equation;
And_Pred_1 : Logic_Equation;
Fld_10 : Boolean;
If_Result : Logic_Equation;
Scope_Result : Logic_Equation;
False_Rel : Logic_Equation;
Result_Var : Logic_Equation;
Fld_11 : Logic_Var;
Fld_12 : Internal_Entity_Type_Decl;
Fld_13 : Internal_Entity_Decl;
Match_Prefix : Internal_Entity_Decl;
Cast_Result_3 : Internal_Entity_Type_Decl;
Cast_Expr : Internal_Entity_Type_Decl;
Cast_Result_4 : Internal_Entity_Decl;
Let_Result : Internal_Entity_Decl;
Scope_Result_1 : Internal_Entity_Decl;
Cast_Result_5 : Internal_Entity_Base_Val_Decl;
Cast_Result_6 : Internal_Entity_Decl;
Let_Result_1 : Internal_Entity_Decl;
Scope_Result_2 : Internal_Entity_Decl;
Cast_Result_7 : Internal_Entity_Generic_Decl;
Let_Result_2 : Internal_Entity_Decl;
Scope_Result_3 : Internal_Entity_Decl;
Cast_Result_8 : Internal_Entity_Decl;
Cast_Expr_1 : Internal_Entity_Type_Decl;
Cast_Result_9 : Internal_Entity_Decl;
Let_Result_3 : Internal_Entity_Decl;
Scope_Result_4 : Internal_Entity_Decl;
Match_Result : Internal_Entity_Decl;
Cast_Result_10 : Internal_Entity;
Bind_Result_4 : Logic_Equation;
Match_Prefix_1 : Internal_Entity_Decl;
Cast_Result_11 : Internal_Entity_Decl;
Let_Result_4 : Logic_Equation;
Scope_Result_5 : Logic_Equation;
Match_Result_1 : Logic_Equation;
Fld_14 : Boolean;
Fld_15 : Internal_Entity_Function_Type;
Is_Null : Boolean;
Not_Val : Boolean;
If_Result_1 : Boolean;
If_Result_2 : Logic_Equation;

            procedure Finalizer_Scope_293 is
            begin
                     Dec_Ref (Scope_Result);
                     Dec_Ref (False_Rel);
                     Dec_Ref (Result_Var);
                     Dec_Ref (Let_Result_4);
                     Dec_Ref (Scope_Result_5);
                     Dec_Ref (Match_Result_1);
                     Dec_Ref (If_Result_2);
            end Finalizer_Scope_293;
            procedure Finalizer_Scope_716 is
            begin
                     Dec_Ref (Bind_Result);
                     Dec_Ref (Dyn_Var_Bind_Result);
                     Dec_Ref (Bind_Result_1);
                     Dec_Ref (And_Pred);
                     Dec_Ref (Bind_Result_2);
                     Dec_Ref (Bind_Result_3);
                     Dec_Ref (And_Pred_1);
                     Dec_Ref (If_Result);
            end Finalizer_Scope_716;
            procedure Finalizer_Scope_717 is
            begin
                     Dec_Ref (Bind_Result_4);
            end Finalizer_Scope_717;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 2388 '<If at nodes.lkt:3900:9>' If_Result_2 nodes.lkt:3900



--# expr-start 2361 '<BooleanBinaryOp And at nodes.lkt:3900:12>' If_Result_1 nodes.lkt:3900



--# expr-start 2357 '<FieldAccess for is_being_called at nodes.lkt:3900:12>' Fld_14 nodes.lkt:3900







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start RefId.is_being_called
Fld_14 := Liblktlang.Implementation.Ref_Id_P_Is_Being_Called (Node => Ent.Node, E_Info => Ent.Info);
--# end
--# expr-done 2357
if Fld_14 then
   --# expr-start 2360 '<Not at nodes.lkt:3900:39>' Not_Val nodes.lkt:3900
--# expr-start 2359 '<IsNull at nodes.lkt:3900:43>' Is_Null nodes.lkt:3900
--# expr-start 2358 '<FieldAccess for function_type at nodes.lkt:3900:43>' Fld_15 nodes.lkt:3900







   if First_Var.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start Decl.function_type
Fld_15 := Liblktlang.Implementation.Decl_P_Function_Type (Node => First_Var.Node, E_Info => First_Var.Info);
--# end
--# expr-done 2358
Is_Null := Fld_15.Node = null; 
--# expr-done 2359
Not_Val := not (Is_Null); 
--# expr-done 2360
   If_Result_1 := Not_Val;
else
   
   If_Result_1 := False;
end if;



--# expr-done 2361
if If_Result_1 then
   



Var_Expr_0 := First_Var;





if Var_Expr_0 /= No_Entity_Decl then
   



   --# scope-start


   --# bind td Var_Expr_0

--# expr-start 2381 '<If at nodes.lkt:3905:17>' If_Result nodes.lkt:3905



--# expr-start 2362 '<FieldAccess for is_generic at nodes.lkt:3905:20>' Fld_10 nodes.lkt:3905







   if First_Var.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start Decl.is_generic
Fld_10 := Liblktlang.Implementation.Decl_P_Is_Generic (Node => First_Var.Node, E_Info => First_Var.Info);
--# end
--# expr-done 2362
if Fld_10 then
   --# expr-start 2373 '<LogicBinaryOp And at nodes.lkt:3907:21>' And_Pred nodes.lkt:3907
--# expr-start 2369 '<bind at nodes.lkt:3908:25>' Dyn_Var_Bind_Result nodes.lkt:3908

Bound_In_Logic_Call := False; 
--# expr-start 2368 '<Bind at nodes.lkt:3910:25>' Bind_Result nodes.lkt:3910
--# expr-start 2363 '<FieldAccess for actual_type_var at nodes.lkt:3910:25>' Fld nodes.lkt:3910







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Ent.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 2363
Fld.Value := No_Entity;
Entity_Vars.Reset (Fld);





--# expr-start 2367 '<FieldAccess for infer_function_type at nodes.lkt:3911:28>' Fld_3 nodes.lkt:3911



--# expr-start 2364 '<FieldAccess for get_generic_type at nodes.lkt:3911:28>' Fld_1 nodes.lkt:3911







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start Expr.get_generic_type
Fld_1 := Liblktlang.Implementation.Expr_P_Get_Generic_Type (Node => Ent.Node, E_Info => Ent.Info);
--# end
--# expr-done 2364



   if Fld_1.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# expr-start 2366 '<Cast to FunctionType at nodes.lkt:3912:29>' Cast_Result nodes.lkt:3912





--# expr-start 2365 '<FieldAccess for get_expected_type at nodes.lkt:3912:29>' Fld_2 nodes.lkt:3912







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start Expr.get_expected_type
Fld_2 := Liblktlang.Implementation.Expr_P_Get_Expected_Type (Node => Ent.Node, E_Info => Ent.Info);
--# end
--# expr-done 2365



   if Fld_2.Node = null
      or else Fld_2.Node.Kind in Lkt_Function_Type_Range
   then
      
      Cast_Result := Create_Internal_Entity_Function_Type
        (Node => Fld_2.Node,
         Info => Fld_2.Info);

   else
         Cast_Result := No_Entity_Function_Type;
   end if;


--# expr-done 2366
--# property-call-start Decl.infer_function_type
Fld_3 := Liblktlang.Implementation.Decl_P_Infer_Function_Type (Node => Fld_1.Node, Expected_Call => Cast_Result, In_Logic_Call => Bound_In_Logic_Call, E_Info => Fld_1.Info);
--# end
--# expr-done 2367



   
      Cast_Result_1 := Create_Internal_Entity
        (Node => Fld_3.Node,
         Info => Fld_3.Info);


Bind_Result := Solver.Create_Assign (Fld, Cast_Result_1, Solver_Ifc.No_Converter, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3910:25") else null)); 
--# expr-done 2368
Dyn_Var_Bind_Result := Bind_Result; Inc_Ref (Dyn_Var_Bind_Result);
--# expr-done 2369
--# expr-start 2372 '<NPropagate at nodes.lkt:3915:26>' Bind_Result_1 nodes.lkt:3915
--# expr-start 2370 '<FieldAccess for ref_var at nodes.lkt:3916:44>' Fld_5 nodes.lkt:3916







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_5 := Ent.Node.Ref_Id_Ref_Var'Unrestricted_Access;
--# expr-done 2370
Fld_5.Value := No_Entity;
Entity_Vars.Reset (Fld_5);
--# expr-start 2371 '<FieldAccess for generic_func_type_var at nodes.lkt:3915:26>' Fld_4 nodes.lkt:3915







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_4 := Ent.Node.Expr_Generic_Func_Type_Var'Unrestricted_Access;
--# expr-done 2371
Fld_4.Value := No_Entity;
Entity_Vars.Reset (Fld_4);

Bind_Result_1 := Solver.Create_Propagate (Fld_5, Fld_4, Create_Decl_P_Function_Type_0_Functor, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3915:26") else null)); 
--# expr-done 2372
And_Pred := Create_And (Dyn_Var_Bind_Result, Bind_Result_1, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3907:21") else null)); 
--# expr-done 2373
   If_Result := And_Pred;
else
   --# expr-start 2380 '<LogicBinaryOp And at nodes.lkt:3918:21>' And_Pred_1 nodes.lkt:3918
--# expr-start 2376 '<Bind at nodes.lkt:3918:21>' Bind_Result_2 nodes.lkt:3918
--# expr-start 2374 '<FieldAccess for actual_type_var at nodes.lkt:3918:21>' Fld_6 nodes.lkt:3918







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_6 := Ent.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 2374
Fld_6.Value := No_Entity;
Entity_Vars.Reset (Fld_6);





--# expr-start 2375 '<FieldAccess for function_type at nodes.lkt:3918:45>' Fld_7 nodes.lkt:3918







   if Var_Expr_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start Decl.function_type
Fld_7 := Liblktlang.Implementation.Decl_P_Function_Type (Node => Var_Expr_0.Node, E_Info => Var_Expr_0.Info);
--# end
--# expr-done 2375



   
      Cast_Result_2 := Create_Internal_Entity
        (Node => Fld_7.Node,
         Info => Fld_7.Info);


Bind_Result_2 := Solver.Create_Assign (Fld_6, Cast_Result_2, Solver_Ifc.No_Converter, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3918:21") else null)); 
--# expr-done 2376
--# expr-start 2379 '<Bind at nodes.lkt:3919:26>' Bind_Result_3 nodes.lkt:3919
--# expr-start 2377 '<FieldAccess for generic_func_type_var at nodes.lkt:3919:26>' Fld_8 nodes.lkt:3919







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_8 := Ent.Node.Expr_Generic_Func_Type_Var'Unrestricted_Access;
--# expr-done 2377
Fld_8.Value := No_Entity;
Entity_Vars.Reset (Fld_8);
--# expr-start 2378 '<FieldAccess for actual_type_var at nodes.lkt:3919:57>' Fld_9 nodes.lkt:3919







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_9 := Ent.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 2378
Fld_9.Value := No_Entity;
Entity_Vars.Reset (Fld_9);
Bind_Result_3 := Solver.Create_Unify (Fld_8, Fld_9, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3919:26") else null)); 
--# expr-done 2379
And_Pred_1 := Create_And (Bind_Result_2, Bind_Result_3, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3918:21") else null)); 
--# expr-done 2380
   If_Result := And_Pred_1;
end if;

      Inc_Ref (If_Result);


--# expr-done 2381
Scope_Result := If_Result;
   Inc_Ref (Scope_Result);


   --# end
      Finalizer_Scope_716;


   Result_Var := Scope_Result;
else
   False_Rel := Solver.Create_False ((if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3920:29") else null)); 
   Result_Var := False_Rel;
end if;

      Inc_Ref (Result_Var);


   If_Result_2 := Result_Var;
else
   --# expr-start 2387 '<Match at nodes.lkt:3924:13>' Match_Result_1 nodes.lkt:3924










   if First_Var.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Match_Prefix_1 := First_Var; 

case Lkt_Decl (Match_Prefix_1.Node.Kind) is
         when Lkt_Grammar_Rule_Decl .. Lkt_Trait_Decl =>
            



   --# scope-start



--# scope-start









   
      Cast_Result_11 := Create_Internal_Entity_Decl
        (Node => Match_Prefix_1.Node,
         Info => Match_Prefix_1.Info);


Match_0 := Cast_Result_11; 
--# bind _ Match_0
--# expr-start 2386 '<Bind at nodes.lkt:3926:21>' Bind_Result_4 nodes.lkt:3926
--# expr-start 2382 '<FieldAccess for actual_type_var at nodes.lkt:3926:21>' Fld_11 nodes.lkt:3926







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_11 := Ent.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 2382
Fld_11.Value := No_Entity;
Entity_Vars.Reset (Fld_11);





--# expr-start 2385 '<Match at nodes.lkt:3927:24>' Match_Result nodes.lkt:3927










   if First_Var.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Match_Prefix := First_Var; 

case Lkt_Decl (Match_Prefix.Node.Kind) is
         when Lkt_Any_Type_Decl .. Lkt_Trait_Decl =>
            



   --# scope-start



--# scope-start









   
      Cast_Result_3 := Create_Internal_Entity_Type_Decl
        (Node => Match_Prefix.Node,
         Info => Match_Prefix.Info);


Match_0_1 := Cast_Result_3; 
--# bind _ Match_0_1






Cast_Expr := No_Entity_Type_Decl; 



   
      Cast_Result_4 := Create_Internal_Entity_Decl
        (Node => Cast_Expr.Node,
         Info => Cast_Expr.Info);


Let_Result := Cast_Result_4; 
--# end
Scope_Result_1 := Let_Result;


   --# end


            Match_Result := Scope_Result_1; 
         when Lkt_Node_Decl .. Lkt_Fun_Decl =>
            



   --# scope-start



--# scope-start









   
      Cast_Result_5 := Create_Internal_Entity_Base_Val_Decl
        (Node => Match_Prefix.Node,
         Info => Match_Prefix.Info);


Match_1 := Cast_Result_5; 
--# bind etd Match_1





--# expr-start 2383 '<FieldAccess for get_type at nodes.lkt:3929:50>' Fld_12 nodes.lkt:3929







   if Match_1.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start Decl.get_type
Fld_12 := Liblktlang.Implementation.Decl_P_Get_Type (Node => Match_1.Node, E_Info => Match_1.Info);
--# end
--# expr-done 2383



   
      Cast_Result_6 := Create_Internal_Entity_Decl
        (Node => Fld_12.Node,
         Info => Fld_12.Info);


Let_Result_1 := Cast_Result_6; 
--# end
Scope_Result_2 := Let_Result_1;


   --# end


            Match_Result := Scope_Result_2; 
         when Lkt_Generic_Decl =>
            



   --# scope-start



--# scope-start









   
      Cast_Result_7 := Create_Internal_Entity_Generic_Decl
        (Node => Match_Prefix.Node,
         Info => Match_Prefix.Info);


Match_2 := Cast_Result_7; 
--# bind gd Match_2
--# expr-start 2384 '<FieldAccess for decl at nodes.lkt:3930:49>' Fld_13 nodes.lkt:3930







   if Match_2.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_13 := Create_Internal_Entity_Decl (Node => Match_2.Node.Generic_Decl_F_Decl, Info => Match_2.Info);
--# expr-done 2384
Let_Result_2 := Fld_13; 
--# end
Scope_Result_3 := Let_Result_2;


   --# end


            Match_Result := Scope_Result_3; 
         when Lkt_Grammar_Rule_Decl .. Lkt_Synthetic_Lexer_Decl | Lkt_Env_Spec_Decl | Lkt_Grammar_Decl .. Lkt_Synth_Fun_Decl =>
            



   --# scope-start



--# scope-start









   
      Cast_Result_8 := Create_Internal_Entity_Decl
        (Node => Match_Prefix.Node,
         Info => Match_Prefix.Info);


Match_3 := Cast_Result_8; 
--# bind _ Match_3






Cast_Expr_1 := raise Property_Error with "Unreachable"; 



   
      Cast_Result_9 := Create_Internal_Entity_Decl
        (Node => Cast_Expr_1.Node,
         Info => Cast_Expr_1.Info);


Let_Result_3 := Cast_Result_9; 
--# end
Scope_Result_4 := Let_Result_3;


   --# end


            Match_Result := Scope_Result_4; 
end case;

--# expr-done 2385



   
      Cast_Result_10 := Create_Internal_Entity
        (Node => Match_Result.Node,
         Info => Match_Result.Info);


Bind_Result_4 := Solver.Create_Assign (Fld_11, Cast_Result_10, Solver_Ifc.No_Converter, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3926:21") else null)); 
--# expr-done 2386
Let_Result_4 := Bind_Result_4; Inc_Ref (Let_Result_4);
--# end
Scope_Result_5 := Let_Result_4;
   Inc_Ref (Scope_Result_5);


   --# end
      Finalizer_Scope_717;


            Match_Result_1 := Scope_Result_5; Inc_Ref (Match_Result_1);
end case;

--# expr-done 2387
   If_Result_2 := Match_Result_1;
end if;

      Inc_Ref (If_Result_2);


--# expr-done 2388

         Property_Result := If_Result_2;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_293;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_293;
                     Finalizer_Scope_716;
                     Finalizer_Scope_717;




            raise;
      end;



   return Property_Result;
end Ref_Id_P_Bind_Actual_Type_Equation;
--# end

   







--# property-start RefId.xref_equation nodes.lkt:3938
pragma Warnings (Off, "is not referenced");
 function Ref_Id_P_Xref_Equation
  
  (Node : Bare_Ref_Id
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Logic_Equation
is
   Self : Bare_Ref_Id  := Bare_Ref_Id (Node);
     Ent : Internal_Entity_Ref_Id :=
       Internal_Entity_Ref_Id'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Logic_Equation;

      
            procedure Finalizer_Scope_294 with Inline_Always;

      Local_First_Var : Internal_Entity_Decl;
Fld : Internal_Entity_Decl;
Fld_1 : Logic_Var;
Cast_Expr : Internal_Entity_Decl;
Cast_Result : Internal_Entity;
Bind_Result : Logic_Equation;
Fld_2 : Logic_Var;
Cast_Expr_1 : Internal_Entity_Type_Decl;
Cast_Result_1 : Internal_Entity;
Bind_Result_1 : Logic_Equation;
Cast_Expr_2 : Bare_Ref_Id;
Cast_Result_2 : Bare_Lkt_Node;
Bound_Error_Location : Bare_Lkt_Node;
Fld_3 : Logic_Var;
Pred : Logic_Equation;
Dyn_Var_Bind_Result : Logic_Equation;
And_Pred : Logic_Equation;
Fld_4 : Logic_Equation;
Is_Null : Boolean;
If_Result : Logic_Equation;
And_Pred_1 : Logic_Equation;
Let_Result : Logic_Equation;

            procedure Finalizer_Scope_294 is
            begin
                     Dec_Ref (Bind_Result);
                     Dec_Ref (Bind_Result_1);
                     Dec_Ref (Pred);
                     Dec_Ref (Dyn_Var_Bind_Result);
                     Dec_Ref (And_Pred);
                     Dec_Ref (Fld_4);
                     Dec_Ref (If_Result);
                     Dec_Ref (And_Pred_1);
                     Dec_Ref (Let_Result);
            end Finalizer_Scope_294;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 2402 '<Let at nodes.lkt:3939:9>' Let_Result nodes.lkt:3939
--# scope-start
--# expr-start 2389 '<FieldAccess for first_var_in_env at nodes.lkt:3939:25>' Fld nodes.lkt:3939







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start RefId.first_var_in_env
Fld := Liblktlang.Implementation.Ref_Id_P_First_Var_In_Env (Node => Ent.Node, E_Info => Ent.Info);
--# end
--# expr-done 2389
Local_First_Var := Fld; 
--# bind first_var Local_First_Var
--# expr-start 2401 '<LogicBinaryOp And at nodes.lkt:3941:9>' And_Pred_1 nodes.lkt:3941
--# expr-start 2391 '<Bind at nodes.lkt:3941:9>' Bind_Result nodes.lkt:3941
--# expr-start 2390 '<FieldAccess for ref_var at nodes.lkt:3941:9>' Fld_1 nodes.lkt:3941







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_1 := Ent.Node.Ref_Id_Ref_Var'Unrestricted_Access;
--# expr-done 2390
Fld_1.Value := No_Entity;
Entity_Vars.Reset (Fld_1);






Cast_Expr := Local_First_Var; 



   
      Cast_Result := Create_Internal_Entity
        (Node => Cast_Expr.Node,
         Info => Cast_Expr.Info);


Bind_Result := Solver.Create_Assign (Fld_1, Cast_Result, Solver_Ifc.No_Converter, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3941:9") else null)); 
--# expr-done 2391
--# expr-start 2400 '<If at nodes.lkt:3943:13>' If_Result nodes.lkt:3943



--# expr-start 2392 '<IsNull at nodes.lkt:3943:16>' Is_Null nodes.lkt:3943

Is_Null := Local_First_Var.Node = null; 
--# expr-done 2392
if Is_Null then
   --# expr-start 2398 '<LogicBinaryOp And at nodes.lkt:3945:17>' And_Pred nodes.lkt:3945
--# expr-start 2394 '<Bind at nodes.lkt:3945:17>' Bind_Result_1 nodes.lkt:3945
--# expr-start 2393 '<FieldAccess for actual_type_var at nodes.lkt:3945:17>' Fld_2 nodes.lkt:3945







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_2 := Ent.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 2393
Fld_2.Value := No_Entity;
Entity_Vars.Reset (Fld_2);






Cast_Expr_1 := No_Entity_Type_Decl; 



   
      Cast_Result_1 := Create_Internal_Entity
        (Node => Cast_Expr_1.Node,
         Info => Cast_Expr_1.Info);


Bind_Result_1 := Solver.Create_Assign (Fld_2, Cast_Result_1, Solver_Ifc.No_Converter, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3945:17") else null)); 
--# expr-done 2394
--# expr-start 2397 '<bind at nodes.lkt:3947:21>' Dyn_Var_Bind_Result nodes.lkt:3947






Cast_Expr_2 := Self; 



   
      Cast_Result_2 := Cast_Expr_2;


Bound_Error_Location := Cast_Result_2; 
--# expr-start 2396 '<Predicate on Decl.is_defined at nodes.lkt:3948:21>' Pred nodes.lkt:3948
--# expr-start 2395 '<FieldAccess for ref_var at nodes.lkt:3948:38>' Fld_3 nodes.lkt:3948







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_3 := Ent.Node.Ref_Id_Ref_Var'Unrestricted_Access;
--# expr-done 2395
Fld_3.Value := No_Entity;
Entity_Vars.Reset (Fld_3);

Pred := Solver.Create_Predicate (Fld_3, Create_Decl_P_Is_Defined_0_Predicate (Bound_Error_Location)); 
--# expr-done 2396
Dyn_Var_Bind_Result := Pred; Inc_Ref (Dyn_Var_Bind_Result);
--# expr-done 2397
And_Pred := Create_And (Bind_Result_1, Dyn_Var_Bind_Result, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3945:17") else null)); 
--# expr-done 2398
   If_Result := And_Pred;
else
   --# expr-start 2399 '<FieldAccess for bind_actual_type_equation at nodes.lkt:3950:18>' Fld_4 nodes.lkt:3950







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;



--# property-call-start RefId.bind_actual_type_equation
Fld_4 := Liblktlang.Implementation.Ref_Id_P_Bind_Actual_Type_Equation (Node => Ent.Node, First_Var => Local_First_Var, E_Info => Ent.Info);
--# end
--# expr-done 2399
   If_Result := Fld_4;
end if;

      Inc_Ref (If_Result);


--# expr-done 2400
And_Pred_1 := Create_And (Bind_Result, If_Result, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3941:9") else null)); 
--# expr-done 2401
Let_Result := And_Pred_1; Inc_Ref (Let_Result);
--# end
--# expr-done 2402

         Property_Result := Let_Result;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_294;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_294;




            raise;
      end;



   return Property_Result;
end Ref_Id_P_Xref_Equation;
--# end

   







--# property-start RefId.xlogic_equation nodes.lkt:3956
pragma Warnings (Off, "is not referenced");
 function Ref_Id_P_Xlogic_Equation
  
  (Node : Bare_Ref_Id
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Logic_Equation
is
   Self : Bare_Ref_Id  := Bare_Ref_Id (Node);
     Ent : Internal_Entity_Ref_Id :=
       Internal_Entity_Ref_Id'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Logic_Equation;

      
            procedure Finalizer_Scope_295 with Inline_Always;

      Fld : Logic_Var;
Fld_1 : Internal_Entity_Named_Type_Decl;
Fld_2 : Lexical_Env := Empty_Env;
Fld_3 : Bare_Ref_Id;
Sym : Symbol_Type;
Env_Get_Result : Internal_Entity;
Bind_Result : Logic_Equation;
Fld_4 : Logic_Var;
Fld_5 : Internal_Entity_Named_Type_Decl;
Cast_Result : Internal_Entity;
Bind_Result_1 : Logic_Equation;
And_Pred : Logic_Equation;
Cast_Expr : Bare_Ref_Id;
Cast_Result_1 : Bare_Lkt_Node;
Bound_Error_Location : Bare_Lkt_Node;
Fld_6 : Logic_Var;
Pred : Logic_Equation;
Dyn_Var_Bind_Result : Logic_Equation;
And_Pred_1 : Logic_Equation;

            procedure Finalizer_Scope_295 is
            begin
                     Dec_Ref (Fld_2);
                     Dec_Ref (Bind_Result);
                     Dec_Ref (Bind_Result_1);
                     Dec_Ref (And_Pred);
                     Dec_Ref (Pred);
                     Dec_Ref (Dyn_Var_Bind_Result);
                     Dec_Ref (And_Pred_1);
            end Finalizer_Scope_295;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 2416 '<LogicBinaryOp And at nodes.lkt:3957:9>' And_Pred_1 nodes.lkt:3957
--# expr-start 2412 '<LogicBinaryOp And at nodes.lkt:3961:13>' And_Pred nodes.lkt:3961
--# expr-start 2408 '<Bind at nodes.lkt:3961:13>' Bind_Result nodes.lkt:3961
--# expr-start 2403 '<FieldAccess for ref_var at nodes.lkt:3961:13>' Fld nodes.lkt:3961







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Ent.Node.Ref_Id_Ref_Var'Unrestricted_Access;
--# expr-done 2403
Fld.Value := No_Entity;
Entity_Vars.Reset (Fld);
--# expr-start 2407 '<EnvGet at nodes.lkt:3962:16>' Env_Get_Result nodes.lkt:3962
--# expr-start 2405 '<FieldAccess for children_env at nodes.lkt:3962:16>' Fld_2 nodes.lkt:3962



--# expr-start 2404 '<FieldAccess for bool_type at nodes.lkt:3962:16>' Fld_1 nodes.lkt:3962







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start LktNode.bool_type
Fld_1 := Liblktlang.Implementation.Lkt_Node_P_Bool_Type (Node => Ent.Node);
--# end
--# expr-done 2404



   if Fld_1.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_2 := Liblktlang.Implementation.Children_Env (Node => Fld_1.Node, E_Info => Fld_1.Info);
--# expr-done 2405
--# expr-start 2406 '<GetSymbol at nodes.lkt:3962:56>' Sym nodes.lkt:3962









Fld_3 := Ent.Node; 
Sym := Get_Symbol (Fld_3); 
--# expr-done 2406


Env_Get_Result := AST_Envs.Get_First (Self => Fld_2, Key => Thin (Sym), Lookup_Kind => To_Lookup_Kind_Type (Recursive), Categories => (Nocat => True)); 
--# expr-done 2407
Bind_Result := Solver.Create_Assign (Fld, Env_Get_Result, Solver_Ifc.No_Converter, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3961:13") else null)); 
--# expr-done 2408
--# expr-start 2411 '<Bind at nodes.lkt:3963:18>' Bind_Result_1 nodes.lkt:3963
--# expr-start 2409 '<FieldAccess for actual_type_var at nodes.lkt:3963:18>' Fld_4 nodes.lkt:3963







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_4 := Ent.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 2409
Fld_4.Value := No_Entity;
Entity_Vars.Reset (Fld_4);





--# expr-start 2410 '<FieldAccess for bool_type at nodes.lkt:3963:42>' Fld_5 nodes.lkt:3963







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start LktNode.bool_type
Fld_5 := Liblktlang.Implementation.Lkt_Node_P_Bool_Type (Node => Ent.Node);
--# end
--# expr-done 2410



   
      Cast_Result := Create_Internal_Entity
        (Node => Fld_5.Node,
         Info => Fld_5.Info);


Bind_Result_1 := Solver.Create_Assign (Fld_4, Cast_Result, Solver_Ifc.No_Converter, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3963:18") else null)); 
--# expr-done 2411
And_Pred := Create_And (Bind_Result, Bind_Result_1, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3961:13") else null)); 
--# expr-done 2412
--# expr-start 2415 '<bind at nodes.lkt:3966:13>' Dyn_Var_Bind_Result nodes.lkt:3966






Cast_Expr := Self; 



   
      Cast_Result_1 := Cast_Expr;


Bound_Error_Location := Cast_Result_1; 
--# expr-start 2414 '<Predicate on Decl.is_defined at nodes.lkt:3967:13>' Pred nodes.lkt:3967
--# expr-start 2413 '<FieldAccess for ref_var at nodes.lkt:3967:30>' Fld_6 nodes.lkt:3967







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_6 := Ent.Node.Ref_Id_Ref_Var'Unrestricted_Access;
--# expr-done 2413
Fld_6.Value := No_Entity;
Entity_Vars.Reset (Fld_6);

Pred := Solver.Create_Predicate (Fld_6, Create_Decl_P_Is_Defined_0_Predicate (Bound_Error_Location)); 
--# expr-done 2414
Dyn_Var_Bind_Result := Pred; Inc_Ref (Dyn_Var_Bind_Result);
--# expr-done 2415
And_Pred_1 := Create_And (And_Pred, Dyn_Var_Bind_Result, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:3957:9") else null)); 
--# expr-done 2416

         Property_Result := And_Pred_1;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_295;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_295;




            raise;
      end;



   return Property_Result;
end Ref_Id_P_Xlogic_Equation;
--# end



   


      

   --
   --  Primitives for Bare_If_Expr
   --

   



      
      procedure Initialize_Fields_For_If_Expr
        (Self : Bare_If_Expr
         ; If_Expr_F_Cond_Expr : Bare_Expr
         ; If_Expr_F_Then_Expr : Bare_Expr
         ; If_Expr_F_Alternatives : Bare_Elsif_Branch_List
         ; If_Expr_F_Else_Expr : Bare_Expr
        ) is
      begin
            Initialize_Fields_For_Expr
              (Self);

            Self.If_Expr_F_Cond_Expr := If_Expr_F_Cond_Expr;
            Self.If_Expr_F_Then_Expr := If_Expr_F_Then_Expr;
            Self.If_Expr_F_Alternatives := If_Expr_F_Alternatives;
            Self.If_Expr_F_Else_Expr := If_Expr_F_Else_Expr;
         
      Self.If_Expr_Expected_Branch_Type_Var := Null_Var_Record;

      end Initialize_Fields_For_If_Expr;

      
   function If_Expr_F_Cond_Expr
     (Node : Bare_If_Expr) return Bare_Expr
   is
      

   begin
         
         return Node.If_Expr_F_Cond_Expr;
      
   end;

      
   function If_Expr_F_Then_Expr
     (Node : Bare_If_Expr) return Bare_Expr
   is
      

   begin
         
         return Node.If_Expr_F_Then_Expr;
      
   end;

      
   function If_Expr_F_Alternatives
     (Node : Bare_If_Expr) return Bare_Elsif_Branch_List
   is
      

   begin
         
         return Node.If_Expr_F_Alternatives;
      
   end;

      
   function If_Expr_F_Else_Expr
     (Node : Bare_If_Expr) return Bare_Expr
   is
      

   begin
         
         return Node.If_Expr_F_Else_Expr;
      
   end;


   







--# property-start IfExpr.has_context_free_type nodes.lkt:3983
pragma Warnings (Off, "is not referenced");
 function If_Expr_P_Has_Context_Free_Type
  
  (Node : Bare_If_Expr
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Boolean
is
   Self : Bare_If_Expr  := Bare_If_Expr (Node);
     Ent : Internal_Entity_If_Expr :=
       Internal_Entity_If_Expr'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Boolean;

      
            procedure Finalizer_Scope_296 with Inline_Always;

      Fld : Internal_Entity_Expr_Array_Access;
Fld_1 : Boolean;
Quantifier_Result : Boolean;

            procedure Finalizer_Scope_296 is
            begin
                     Dec_Ref (Fld);
            end Finalizer_Scope_296;


begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         --# expr-start 2419 '<AnyQuantifier at nodes.lkt:3984:9>' Quantifier_Result nodes.lkt:3984








   

   --# expr-start 2417 '<FieldAccess for branch_exprs at nodes.lkt:3984:9>' Fld nodes.lkt:3984







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start IfExpr.branch_exprs
Fld := Liblktlang.Implementation.If_Expr_P_Branch_Exprs (Node => Ent.Node, E_Info => Ent.Info);
--# end
--# expr-done 2417

   
      Quantifier_Result := False;
   

   

      

      declare
         
         Collection : constant Internal_Entity_Expr_Array_Access := Fld;
      begin
         for Item_0 of
               Collection.Items
         loop

            
   --# scope-start


               --# bind e Item_0

            
      --# expr-start 2418 '<FieldAccess for has_context_free_type at nodes.lkt:3984:40>' Fld_1 nodes.lkt:3984







   if Item_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]Expr.has_context_free_type'
Fld_1 := Liblktlang.Implementation.Dispatcher_Expr_P_Has_Context_Free_Type (Node => Item_0.Node, E_Info => Item_0.Info);
--# end
--# expr-done 2418
      Quantifier_Result := Fld_1;
   

            
   --# end


               exit when Quantifier_Result;

         end loop;
      end;
   

   
   



--# expr-done 2419

         Property_Result := Quantifier_Result;
         
   --# end
      Finalizer_Scope_296;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_296;




            raise;
      end;



   return Property_Result;
end If_Expr_P_Has_Context_Free_Type;
--# end

   







--# property-start IfExpr.branch_exprs nodes.lkt:3987
pragma Warnings (Off, "is not referenced");
 function If_Expr_P_Branch_Exprs
  
  (Node : Bare_If_Expr
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Internal_Entity_Expr_Array_Access
is
   Self : Bare_If_Expr  := Bare_If_Expr (Node);
     Ent : Internal_Entity_If_Expr :=
       Internal_Entity_If_Expr'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Internal_Entity_Expr_Array_Access;

      
            procedure Finalizer_Scope_297 with Inline_Always;

      Fld : Internal_Entity_Expr;
Fld_1 : Internal_Entity_Expr;
Array_Lit : Internal_Entity_Expr_Array_Access;
Fld_2 : Internal_Entity_Elsif_Branch_List;
Fld_3 : Bare_Elsif_Branch_List;
Fld_4 : Internal_Entity_Info;
Item_0 : Internal_Entity_Elsif_Branch;
Bare_Item_0 : Bare_Elsif_Branch;
Fld_5 : Internal_Entity_Expr;
As_Entity : Internal_Entity_Elsif_Branch;
Is_Null : Boolean;
If_Result : Internal_Entity_Elsif_Branch;
Map_Result : Internal_Entity_Expr_Array_Access;
Concat_Result : Internal_Entity_Expr_Array_Access;

            procedure Finalizer_Scope_297 is
            begin
                     Dec_Ref (Array_Lit);
                     Dec_Ref (Map_Result);
                     Dec_Ref (Concat_Result);
            end Finalizer_Scope_297;


begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         --# expr-start 2422 '<ArrayLiteral at nodes.lkt:3988:9>' Array_Lit nodes.lkt:3988
--# expr-start 2420 '<FieldAccess for then_expr at nodes.lkt:3988:10>' Fld nodes.lkt:3988







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Create_Internal_Entity_Expr (Node => Ent.Node.If_Expr_F_Then_Expr, Info => Ent.Info);
--# expr-done 2420
--# expr-start 2421 '<FieldAccess for else_expr at nodes.lkt:3988:26>' Fld_1 nodes.lkt:3988







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_1 := Create_Internal_Entity_Expr (Node => Ent.Node.If_Expr_F_Else_Expr, Info => Ent.Info);
--# expr-done 2421
Array_Lit := Create_Internal_Entity_Expr_Array (Internal_Internal_Entity_Expr_Array'(1 => Fld, 2 => Fld_1)); 
--# expr-done 2422
--# expr-start 2425 '<Map at nodes.lkt:3989:11>' Map_Result nodes.lkt:3989








   

   --# expr-start 2423 '<FieldAccess for alternatives at nodes.lkt:3989:11>' Fld_2 nodes.lkt:3989







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_2 := Create_Internal_Entity_Elsif_Branch_List (Node => Ent.Node.If_Expr_F_Alternatives, Info => Ent.Info);
--# expr-done 2423









Fld_3 := Fld_2.Node;

   
      declare
         Map_Result_Vec : Internal_Entity_Expr_Vectors.Vector;
      begin
   

   

      if Fld_3 = null then
         
      Map_Result := Create_Internal_Entity_Expr_Array (0);
   
      else
         

      declare
         
         Collection : constant Bare_Elsif_Branch_List := Fld_3;
      begin
         for Untyped_Item_0 of
               Collection.Nodes (1 .. Children_Count (Collection))
         loop
                  
                  Bare_Item_0 := Untyped_Item_0; 
                  



Is_Null := Bare_Item_0 = null; 
if Is_Null then
   
   If_Result := No_Entity_Elsif_Branch;
else
   








Fld_4 := Fld_2.Info;

As_Entity := (Info => Fld_4, Node => Bare_Item_0); 
   If_Result := As_Entity;
end if;



                  Item_0 := If_Result; 

            
   --# scope-start


               --# bind alt Item_0

            
         
         
      --# expr-start 2424 '<FieldAccess for then_expr at nodes.lkt:3989:42>' Fld_5 nodes.lkt:3989







   if Item_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_5 := Create_Internal_Entity_Expr (Node => Item_0.Node.Elsif_Branch_F_Then_Expr, Info => Item_0.Info);
--# expr-done 2424
      

         declare
            Item_To_Append : constant Internal_Entity_Expr := Fld_5;
         begin
            Internal_Entity_Expr_Vectors.Append (Map_Result_Vec, Item_To_Append);
         end;
   
   
   

            
   --# end



         end loop;
      end;
   
      end if;

   

         Map_Result := Create_Internal_Entity_Expr_Array
           (Items_Count => Natural (Internal_Entity_Expr_Vectors.Length (Map_Result_Vec)));
         for I in Map_Result.Items'Range loop
            Map_Result.Items (I) := Internal_Entity_Expr_Vectors.Get
              (Map_Result_Vec,
               I + Internal_Entity_Expr_Vectors.Index_Type'First - Map_Result.Items'First);
         end loop;
         Internal_Entity_Expr_Vectors.Destroy (Map_Result_Vec);

      end;
   



--# expr-done 2425
Concat_Result := Concat (Array_Lit, Map_Result); 

         Property_Result := Concat_Result;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_297;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_297;




            raise;
      end;



   return Property_Result;
end If_Expr_P_Branch_Exprs;
--# end

   







--# property-start IfExpr.expected_branch_type_equation nodes.lkt:3994
pragma Warnings (Off, "is not referenced");
 function If_Expr_P_Expected_Branch_Type_Equation
  
  (Node : Bare_If_Expr
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Logic_Equation
is
   Self : Bare_If_Expr  := Bare_If_Expr (Node);
     Ent : Internal_Entity_If_Expr :=
       Internal_Entity_If_Expr'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Logic_Equation;

      
            procedure Finalizer_Scope_298 with Inline_Always;
            procedure Finalizer_Scope_726 with Inline_Always;
            procedure Finalizer_Scope_727 with Inline_Always;

      Local_Logic_Vars : Logic_Var_Array_Access;
Left_Var : Logic_Var_Array_Access;
Fld : Internal_Entity_Expr_Array_Access;
Fld_1 : Boolean;
Map_Result : Internal_Entity_Expr_Array_Access;
Fld_2 : Logic_Var;
Map_Result_1 : Logic_Var_Array_Access;
Scope_Result : Logic_Var_Array_Access;
Fld_3 : Logic_Var;
Array_Lit : Logic_Var_Array_Access;
Result_Var : Logic_Var_Array_Access;
Fld_4 : Logic_Var;
Logic_Vars : Logic_Var_Array_Access;
Bind_Result : Logic_Equation;
Fld_5 : Internal_Entity_Expr_Array_Access;
Fld_6 : Logic_Var;
Fld_7 : Logic_Var;
Bind_Result_1 : Logic_Equation;
Map_Result_2 : Logic_Equation_Array_Access;
Logic_Boolean_Op : Logic_Equation;
And_Pred : Logic_Equation;
Let_Result : Logic_Equation;

            procedure Finalizer_Scope_298 is
            begin
                     Dec_Ref (Fld);
                     Dec_Ref (Map_Result);
                     Dec_Ref (Map_Result_1);
                     Dec_Ref (Scope_Result);
                     Dec_Ref (Array_Lit);
                     Dec_Ref (Result_Var);
                     Dec_Ref (Local_Logic_Vars);
                     Dec_Ref (Logic_Vars);
                     Dec_Ref (Bind_Result);
                     Dec_Ref (Fld_5);
                     Dec_Ref (Map_Result_2);
                     Dec_Ref (Logic_Boolean_Op);
                     Dec_Ref (And_Pred);
                     Dec_Ref (Let_Result);
            end Finalizer_Scope_298;
            procedure Finalizer_Scope_726 is
            begin
                     Dec_Ref (Left_Var);
            end Finalizer_Scope_726;
            procedure Finalizer_Scope_727 is
            begin
                     Dec_Ref (Bind_Result_1);
            end Finalizer_Scope_727;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 2442 '<Let at nodes.lkt:3995:9>' Let_Result nodes.lkt:3995
--# scope-start



--# expr-start 2430 '<Map at nodes.lkt:3996:13>' Map_Result_1 nodes.lkt:3996








   

   --# expr-start 2428 '<Map at nodes.lkt:3996:13>' Map_Result nodes.lkt:3996








   

   --# expr-start 2426 '<FieldAccess for branch_exprs at nodes.lkt:3996:13>' Fld nodes.lkt:3996







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start IfExpr.branch_exprs
Fld := Liblktlang.Implementation.If_Expr_P_Branch_Exprs (Node => Ent.Node, E_Info => Ent.Info);
--# end
--# expr-done 2426

   
      declare
         Map_Result_Vec : Internal_Entity_Expr_Vectors.Vector;
      begin
   

   

      

      declare
         
         Collection : constant Internal_Entity_Expr_Array_Access := Fld;
      begin
         for Item_0 of
               Collection.Items
         loop

            
   --# scope-start


               --# bind expr Item_0

            
         --# expr-start 2427 '<FieldAccess for has_context_free_type at nodes.lkt:3996:50>' Fld_1 nodes.lkt:3996







   if Item_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]Expr.has_context_free_type'
Fld_1 := Liblktlang.Implementation.Dispatcher_Expr_P_Has_Context_Free_Type (Node => Item_0.Node, E_Info => Item_0.Info);
--# end
--# expr-done 2427
         if Fld_1 then
            
         
      
      

         declare
            Item_To_Append : constant Internal_Entity_Expr := Item_0;
         begin
            Internal_Entity_Expr_Vectors.Append (Map_Result_Vec, Item_To_Append);
         end;
   
   
         end if;
   

            
   --# end



         end loop;
      end;
   

   

         Map_Result := Create_Internal_Entity_Expr_Array
           (Items_Count => Natural (Internal_Entity_Expr_Vectors.Length (Map_Result_Vec)));
         for I in Map_Result.Items'Range loop
            Map_Result.Items (I) := Internal_Entity_Expr_Vectors.Get
              (Map_Result_Vec,
               I + Internal_Entity_Expr_Vectors.Index_Type'First - Map_Result.Items'First);
         end loop;
         Internal_Entity_Expr_Vectors.Destroy (Map_Result_Vec);

      end;
   



--# expr-done 2428

   
      declare
         Map_Result_1_Vec : Logic_Var_Vectors.Vector;
      begin
   

   

      

      declare
         
         Collection : constant Internal_Entity_Expr_Array_Access := Map_Result;
      begin
         for Item_1 of
               Collection.Items
         loop

            
   --# scope-start


               --# bind expr Item_1

            
         
         
      --# expr-start 2429 '<FieldAccess for actual_type_var at nodes.lkt:3997:28>' Fld_2 nodes.lkt:3997







   if Item_1.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_2 := Item_1.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 2429
      

         declare
            Item_To_Append : constant Logic_Var := Fld_2;
         begin
            Logic_Var_Vectors.Append (Map_Result_1_Vec, Item_To_Append);
         end;
   
   
   

            
   --# end



         end loop;
      end;
   

   

         Map_Result_1 := Create_Logic_Var_Array
           (Items_Count => Natural (Logic_Var_Vectors.Length (Map_Result_1_Vec)));
         for I in Map_Result_1.Items'Range loop
            Map_Result_1.Items (I) := Logic_Var_Vectors.Get
              (Map_Result_1_Vec,
               I + Logic_Var_Vectors.Index_Type'First - Map_Result_1.Items'First);
         end loop;
         Logic_Var_Vectors.Destroy (Map_Result_1_Vec);

      end;
   



--# expr-done 2430
Left_Var := Map_Result_1;

      Inc_Ref (Left_Var);




if Left_Var /= No_Logic_Var_Array_Type then
   



   --# scope-start


   


Scope_Result := Left_Var;
   Inc_Ref (Scope_Result);


   --# end
      Finalizer_Scope_726;


   Result_Var := Scope_Result;
else
   --# expr-start 2432 '<ArrayLiteral at nodes.lkt:3998:17>' Array_Lit nodes.lkt:3998
--# expr-start 2431 '<FieldAccess for expected_type_var at nodes.lkt:3998:18>' Fld_3 nodes.lkt:3998







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_3 := Ent.Node.Expr_Expected_Type_Var'Unrestricted_Access;
--# expr-done 2431
Array_Lit := Create_Logic_Var_Array (Internal_Logic_Var_Array'(1 => Fld_3)); 
--# expr-done 2432
   Result_Var := Array_Lit;
end if;

      Inc_Ref (Result_Var);


Local_Logic_Vars := Result_Var; Inc_Ref (Local_Logic_Vars);
--# bind logic_vars Local_Logic_Vars
--# expr-start 2441 '<LogicBinaryOp And at nodes.lkt:4000:9>' And_Pred nodes.lkt:4000

for Var of Local_Logic_Vars.Items loop
   Var.Value := No_Entity;
   Entity_Vars.Reset (Var);
end loop;
Logic_Vars := Local_Logic_Vars; Inc_Ref (Logic_Vars);
--# expr-start 2434 '<NPropagate at nodes.lkt:4000:9>' Bind_Result nodes.lkt:4000
--# expr-start 2433 '<FieldAccess for expected_branch_type_var at nodes.lkt:4000:9>' Fld_4 nodes.lkt:4000







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_4 := Ent.Node.If_Expr_Expected_Branch_Type_Var'Unrestricted_Access;
--# expr-done 2433
Fld_4.Value := No_Entity;
Entity_Vars.Reset (Fld_4);


Bind_Result := Solver.Create_N_Propagate (Fld_4, Create_Type_Decl_P_Imprecise_Common_Ancestor_List_0_Functor (Logic_Vars.N), Entity_Vars.Logic_Var_Array (Logic_Vars.Items), Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4000:9") else null)); 
--# expr-done 2434
--# expr-start 2440 '<LogicAll at nodes.lkt:4002:14>' Logic_Boolean_Op nodes.lkt:4002
--# expr-start 2439 '<Map at nodes.lkt:4002:14>' Map_Result_2 nodes.lkt:4002








   

   --# expr-start 2435 '<FieldAccess for branch_exprs at nodes.lkt:4002:14>' Fld_5 nodes.lkt:4002







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start IfExpr.branch_exprs
Fld_5 := Liblktlang.Implementation.If_Expr_P_Branch_Exprs (Node => Ent.Node, E_Info => Ent.Info);
--# end
--# expr-done 2435

   
      declare
         Map_Result_2_Vec : Logic_Equation_Vectors.Vector;
      begin
   

   

      

      declare
         
         Collection : constant Internal_Entity_Expr_Array_Access := Fld_5;
      begin
         for Item_2 of
               Collection.Items
         loop

            
   --# scope-start


               --# bind e Item_2

            
         
         
      --# expr-start 2438 '<Bind at nodes.lkt:4003:20>' Bind_Result_1 nodes.lkt:4003
--# expr-start 2436 '<FieldAccess for expected_type_var at nodes.lkt:4003:20>' Fld_6 nodes.lkt:4003







   if Item_2.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_6 := Item_2.Node.Expr_Expected_Type_Var'Unrestricted_Access;
--# expr-done 2436
Fld_6.Value := No_Entity;
Entity_Vars.Reset (Fld_6);
--# expr-start 2437 '<FieldAccess for expected_branch_type_var at nodes.lkt:4003:44>' Fld_7 nodes.lkt:4003







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_7 := Ent.Node.If_Expr_Expected_Branch_Type_Var'Unrestricted_Access;
--# expr-done 2437
Fld_7.Value := No_Entity;
Entity_Vars.Reset (Fld_7);
Bind_Result_1 := Solver.Create_Unify (Fld_6, Fld_7, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4003:20") else null)); 
--# expr-done 2438
      

         declare
            Item_To_Append : constant Logic_Equation := Bind_Result_1;
         begin
               Inc_Ref (Item_To_Append);
            Logic_Equation_Vectors.Append (Map_Result_2_Vec, Item_To_Append);
         end;
   
   
   

            
   --# end
      Finalizer_Scope_727;



         end loop;
      end;
   

   

         Map_Result_2 := Create_Logic_Equation_Array
           (Items_Count => Natural (Logic_Equation_Vectors.Length (Map_Result_2_Vec)));
         for I in Map_Result_2.Items'Range loop
            Map_Result_2.Items (I) := Logic_Equation_Vectors.Get
              (Map_Result_2_Vec,
               I + Logic_Equation_Vectors.Index_Type'First - Map_Result_2.Items'First);
         end loop;
         Logic_Equation_Vectors.Destroy (Map_Result_2_Vec);

      end;
   



--# expr-done 2439
Logic_Boolean_Op := Solver.Create_All (Relation_Array (Map_Result_2.Items), (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4002:14") else null)); 
--# expr-done 2440
And_Pred := Create_And (Bind_Result, Logic_Boolean_Op, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4000:9") else null)); 
--# expr-done 2441
Let_Result := And_Pred; Inc_Ref (Let_Result);
--# end
--# expr-done 2442

         Property_Result := Let_Result;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_298;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_298;
                     Finalizer_Scope_726;
                     Finalizer_Scope_727;




            raise;
      end;



   return Property_Result;
end If_Expr_P_Expected_Branch_Type_Equation;
--# end

   







--# property-start IfExpr.xref_equation nodes.lkt:4007
pragma Warnings (Off, "is not referenced");
 function If_Expr_P_Xref_Equation
  
  (Node : Bare_If_Expr
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Logic_Equation
is
   Self : Bare_If_Expr  := Bare_If_Expr (Node);
     Ent : Internal_Entity_If_Expr :=
       Internal_Entity_If_Expr'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Logic_Equation;

      
            procedure Finalizer_Scope_299 with Inline_Always;
            procedure Finalizer_Scope_728 with Inline_Always;

      Fld : Logic_Equation;
Fld_1 : Logic_Equation;
And_Pred : Logic_Equation;
Fld_2 : Internal_Entity_Expr_Array_Access;
Fld_3 : Logic_Equation;
Fld_4 : Bare_Expr;
Cast_Result : Bare_Lkt_Node;
Bound_Error_Location : Bare_Lkt_Node;
Fld_5 : Logic_Var;
Fld_6 : Logic_Var;
Pred : Logic_Equation;
Dyn_Var_Bind_Result : Logic_Equation;
And_Pred_1 : Logic_Equation;
Map_Result : Logic_Equation_Array_Access;
Logic_Boolean_Op : Logic_Equation;
And_Pred_2 : Logic_Equation;
Fld_7 : Logic_Var;
Fld_8 : Internal_Entity_Expr_Array_Access;
Fld_9 : Logic_Var;
Map_Result_1 : Logic_Var_Array_Access;
Logic_Vars : Logic_Var_Array_Access;
Bind_Result : Logic_Equation;
And_Pred_3 : Logic_Equation;

            procedure Finalizer_Scope_299 is
            begin
                     Dec_Ref (Fld);
                     Dec_Ref (Fld_1);
                     Dec_Ref (And_Pred);
                     Dec_Ref (Fld_2);
                     Dec_Ref (Map_Result);
                     Dec_Ref (Logic_Boolean_Op);
                     Dec_Ref (And_Pred_2);
                     Dec_Ref (Fld_8);
                     Dec_Ref (Map_Result_1);
                     Dec_Ref (Logic_Vars);
                     Dec_Ref (Bind_Result);
                     Dec_Ref (And_Pred_3);
            end Finalizer_Scope_299;
            procedure Finalizer_Scope_728 is
            begin
                     Dec_Ref (Fld_3);
                     Dec_Ref (Pred);
                     Dec_Ref (Dyn_Var_Bind_Result);
                     Dec_Ref (And_Pred_1);
            end Finalizer_Scope_728;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 2462 '<LogicBinaryOp And at nodes.lkt:4008:9>' And_Pred_3 nodes.lkt:4008
--# expr-start 2456 '<LogicBinaryOp And at nodes.lkt:4009:13>' And_Pred_2 nodes.lkt:4009
--# expr-start 2445 '<LogicBinaryOp And at nodes.lkt:4010:17>' And_Pred nodes.lkt:4010
--# expr-start 2443 '<FieldAccess for cond_branches_equation at nodes.lkt:4010:17>' Fld nodes.lkt:4010







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start IfExpr.cond_branches_equation
Fld := Liblktlang.Implementation.If_Expr_P_Cond_Branches_Equation (Node => Ent.Node, E_Info => Ent.Info);
--# end
--# expr-done 2443
--# expr-start 2444 '<FieldAccess for expected_branch_type_equation at nodes.lkt:4011:22>' Fld_1 nodes.lkt:4011







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start IfExpr.expected_branch_type_equation
Fld_1 := Liblktlang.Implementation.If_Expr_P_Expected_Branch_Type_Equation (Node => Ent.Node, E_Info => Ent.Info);
--# end
--# expr-done 2444
And_Pred := Create_And (Fld, Fld_1, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4010:17") else null)); 
--# expr-done 2445
--# expr-start 2455 '<LogicAll at nodes.lkt:4015:17>' Logic_Boolean_Op nodes.lkt:4015
--# expr-start 2454 '<Map at nodes.lkt:4015:17>' Map_Result nodes.lkt:4015








   

   --# expr-start 2446 '<FieldAccess for branch_exprs at nodes.lkt:4015:17>' Fld_2 nodes.lkt:4015







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start IfExpr.branch_exprs
Fld_2 := Liblktlang.Implementation.If_Expr_P_Branch_Exprs (Node => Ent.Node, E_Info => Ent.Info);
--# end
--# expr-done 2446

   
      declare
         Map_Result_Vec : Logic_Equation_Vectors.Vector;
      begin
   

   

      

      declare
         
         Collection : constant Internal_Entity_Expr_Array_Access := Fld_2;
      begin
         for Item_0 of
               Collection.Items
         loop

            
   --# scope-start


               --# bind e Item_0

            
         
         
      --# expr-start 2453 '<LogicBinaryOp And at nodes.lkt:4017:21>' And_Pred_1 nodes.lkt:4017
--# expr-start 2447 '<FieldAccess for xref_equation at nodes.lkt:4017:21>' Fld_3 nodes.lkt:4017







   if Item_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]LktNode.xref_equation'
Fld_3 := Liblktlang.Implementation.Dispatcher_Lkt_Node_P_Xref_Equation (Node => Item_0.Node, E_Info => Item_0.Info);
--# end
--# expr-done 2447
--# expr-start 2452 '<bind at nodes.lkt:4019:25>' Dyn_Var_Bind_Result nodes.lkt:4019





--# expr-start 2448 '<FieldAccess for node at nodes.lkt:4019:47>' Fld_4 nodes.lkt:4019









Fld_4 := Item_0.Node;
--# expr-done 2448



   
      Cast_Result := Fld_4;


Bound_Error_Location := Cast_Result; 
--# expr-start 2451 '<Predicate on TypeDecl.matching_type at nodes.lkt:4020:25>' Pred nodes.lkt:4020
--# expr-start 2449 '<FieldAccess for expected_type_var at nodes.lkt:4021:29>' Fld_5 nodes.lkt:4021







   if Item_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_5 := Item_0.Node.Expr_Expected_Type_Var'Unrestricted_Access;
--# expr-done 2449
Fld_5.Value := No_Entity;
Entity_Vars.Reset (Fld_5);
--# expr-start 2450 '<FieldAccess for actual_type_var at nodes.lkt:4022:29>' Fld_6 nodes.lkt:4022







   if Item_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_6 := Item_0.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 2450
Fld_6.Value := No_Entity;
Entity_Vars.Reset (Fld_6);


Pred := Solver.Create_N_Predicate ((Fld_5, Fld_6), Create_Type_Decl_P_Matching_Type_0_Predicate (2, Bound_Error_Location)); 
--# expr-done 2451
Dyn_Var_Bind_Result := Pred; Inc_Ref (Dyn_Var_Bind_Result);
--# expr-done 2452
And_Pred_1 := Create_And (Fld_3, Dyn_Var_Bind_Result, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4017:21") else null)); 
--# expr-done 2453
      

         declare
            Item_To_Append : constant Logic_Equation := And_Pred_1;
         begin
               Inc_Ref (Item_To_Append);
            Logic_Equation_Vectors.Append (Map_Result_Vec, Item_To_Append);
         end;
   
   
   

            
   --# end
      Finalizer_Scope_728;



         end loop;
      end;
   

   

         Map_Result := Create_Logic_Equation_Array
           (Items_Count => Natural (Logic_Equation_Vectors.Length (Map_Result_Vec)));
         for I in Map_Result.Items'Range loop
            Map_Result.Items (I) := Logic_Equation_Vectors.Get
              (Map_Result_Vec,
               I + Logic_Equation_Vectors.Index_Type'First - Map_Result.Items'First);
         end loop;
         Logic_Equation_Vectors.Destroy (Map_Result_Vec);

      end;
   



--# expr-done 2454
Logic_Boolean_Op := Solver.Create_All (Relation_Array (Map_Result.Items), (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4015:17") else null)); 
--# expr-done 2455
And_Pred_2 := Create_And (And_Pred, Logic_Boolean_Op, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4009:13") else null)); 
--# expr-done 2456
--# expr-start 2459 '<Map at nodes.lkt:4032:17>' Map_Result_1 nodes.lkt:4032








   

   --# expr-start 2457 '<FieldAccess for branch_exprs at nodes.lkt:4032:17>' Fld_8 nodes.lkt:4032







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start IfExpr.branch_exprs
Fld_8 := Liblktlang.Implementation.If_Expr_P_Branch_Exprs (Node => Ent.Node, E_Info => Ent.Info);
--# end
--# expr-done 2457

   
      declare
         Map_Result_1_Vec : Logic_Var_Vectors.Vector;
      begin
   

   

      

      declare
         
         Collection : constant Internal_Entity_Expr_Array_Access := Fld_8;
      begin
         for Item_1 of
               Collection.Items
         loop

            
   --# scope-start


               --# bind e Item_1

            
         
         
      --# expr-start 2458 '<FieldAccess for actual_type_var at nodes.lkt:4032:48>' Fld_9 nodes.lkt:4032







   if Item_1.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_9 := Item_1.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 2458
      

         declare
            Item_To_Append : constant Logic_Var := Fld_9;
         begin
            Logic_Var_Vectors.Append (Map_Result_1_Vec, Item_To_Append);
         end;
   
   
   

            
   --# end



         end loop;
      end;
   

   

         Map_Result_1 := Create_Logic_Var_Array
           (Items_Count => Natural (Logic_Var_Vectors.Length (Map_Result_1_Vec)));
         for I in Map_Result_1.Items'Range loop
            Map_Result_1.Items (I) := Logic_Var_Vectors.Get
              (Map_Result_1_Vec,
               I + Logic_Var_Vectors.Index_Type'First - Map_Result_1.Items'First);
         end loop;
         Logic_Var_Vectors.Destroy (Map_Result_1_Vec);

      end;
   



--# expr-done 2459
for Var of Map_Result_1.Items loop
   Var.Value := No_Entity;
   Entity_Vars.Reset (Var);
end loop;
Logic_Vars := Map_Result_1; Inc_Ref (Logic_Vars);
--# expr-start 2461 '<NPropagate at nodes.lkt:4030:13>' Bind_Result nodes.lkt:4030
--# expr-start 2460 '<FieldAccess for actual_type_var at nodes.lkt:4030:13>' Fld_7 nodes.lkt:4030







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_7 := Ent.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 2460
Fld_7.Value := No_Entity;
Entity_Vars.Reset (Fld_7);


Bind_Result := Solver.Create_N_Propagate (Fld_7, Create_Type_Decl_P_Imprecise_Common_Ancestor_List_0_Functor (Logic_Vars.N), Entity_Vars.Logic_Var_Array (Logic_Vars.Items), Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4030:13") else null)); 
--# expr-done 2461
And_Pred_3 := Create_And (And_Pred_2, Bind_Result, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4008:9") else null)); 
--# expr-done 2462

         Property_Result := And_Pred_3;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_299;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_299;
                     Finalizer_Scope_728;




            raise;
      end;



   return Property_Result;
end If_Expr_P_Xref_Equation;
--# end

   







--# property-start IfExpr.cond_branches_equation nodes.lkt:4037
pragma Warnings (Off, "is not referenced");
 function If_Expr_P_Cond_Branches_Equation
  
  (Node : Bare_If_Expr
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Logic_Equation
is
   Self : Bare_If_Expr  := Bare_If_Expr (Node);
     Ent : Internal_Entity_If_Expr :=
       Internal_Entity_If_Expr'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Logic_Equation;

      
            procedure Finalizer_Scope_300 with Inline_Always;
            procedure Finalizer_Scope_730 with Inline_Always;

      Fld : Internal_Entity_Expr;
Fld_1 : Logic_Equation;
Fld_2 : Internal_Entity_Expr;
Fld_3 : Logic_Var;
Fld_4 : Internal_Entity_Named_Type_Decl;
Cast_Result : Internal_Entity;
Bind_Result : Logic_Equation;
And_Pred : Logic_Equation;
Fld_5 : Bare_Expr;
Cast_Result_1 : Bare_Lkt_Node;
Bound_Error_Location : Bare_Lkt_Node;
Fld_6 : Internal_Entity_Expr;
Fld_7 : Logic_Var;
Fld_8 : Internal_Entity_Expr;
Fld_9 : Logic_Var;
Pred : Logic_Equation;
Dyn_Var_Bind_Result : Logic_Equation;
And_Pred_1 : Logic_Equation;
Fld_10 : Internal_Entity_Elsif_Branch_List;
Fld_11 : Bare_Elsif_Branch_List;
Fld_12 : Internal_Entity_Info;
Item_0 : Internal_Entity_Elsif_Branch;
Bare_Item_0 : Bare_Elsif_Branch;
Fld_13 : Internal_Entity_Expr;
Fld_14 : Logic_Equation;
Fld_15 : Internal_Entity_Expr;
Fld_16 : Logic_Var;
Fld_17 : Internal_Entity_Named_Type_Decl;
Cast_Result_2 : Internal_Entity;
Bind_Result_1 : Logic_Equation;
And_Pred_2 : Logic_Equation;
Fld_18 : Internal_Entity_Expr;
Fld_19 : Bare_Expr;
Cast_Result_3 : Bare_Lkt_Node;
Bound_Error_Location_1 : Bare_Lkt_Node;
Fld_20 : Internal_Entity_Expr;
Fld_21 : Logic_Var;
Fld_22 : Internal_Entity_Expr;
Fld_23 : Logic_Var;
Pred_1 : Logic_Equation;
Dyn_Var_Bind_Result_1 : Logic_Equation;
And_Pred_3 : Logic_Equation;
As_Entity : Internal_Entity_Elsif_Branch;
Is_Null : Boolean;
If_Result : Internal_Entity_Elsif_Branch;
Map_Result : Logic_Equation_Array_Access;
Logic_Boolean_Op : Logic_Equation;
And_Pred_4 : Logic_Equation;

            procedure Finalizer_Scope_300 is
            begin
                     Dec_Ref (Fld_1);
                     Dec_Ref (Bind_Result);
                     Dec_Ref (And_Pred);
                     Dec_Ref (Pred);
                     Dec_Ref (Dyn_Var_Bind_Result);
                     Dec_Ref (And_Pred_1);
                     Dec_Ref (Map_Result);
                     Dec_Ref (Logic_Boolean_Op);
                     Dec_Ref (And_Pred_4);
            end Finalizer_Scope_300;
            procedure Finalizer_Scope_730 is
            begin
                     Dec_Ref (Fld_14);
                     Dec_Ref (Bind_Result_1);
                     Dec_Ref (And_Pred_2);
                     Dec_Ref (Pred_1);
                     Dec_Ref (Dyn_Var_Bind_Result_1);
                     Dec_Ref (And_Pred_3);
            end Finalizer_Scope_730;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 2497 '<LogicBinaryOp And at nodes.lkt:4038:9>' And_Pred_4 nodes.lkt:4038
--# expr-start 2477 '<LogicBinaryOp And at nodes.lkt:4039:13>' And_Pred_1 nodes.lkt:4039
--# expr-start 2469 '<LogicBinaryOp And at nodes.lkt:4040:17>' And_Pred nodes.lkt:4040
--# expr-start 2464 '<FieldAccess for xref_equation at nodes.lkt:4040:17>' Fld_1 nodes.lkt:4040



--# expr-start 2463 '<FieldAccess for cond_expr at nodes.lkt:4040:17>' Fld nodes.lkt:4040







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Create_Internal_Entity_Expr (Node => Ent.Node.If_Expr_F_Cond_Expr, Info => Ent.Info);
--# expr-done 2463



   if Fld.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]LktNode.xref_equation'
Fld_1 := Liblktlang.Implementation.Dispatcher_Lkt_Node_P_Xref_Equation (Node => Fld.Node, E_Info => Fld.Info);
--# end
--# expr-done 2464
--# expr-start 2468 '<Bind at nodes.lkt:4041:22>' Bind_Result nodes.lkt:4041
--# expr-start 2466 '<FieldAccess for expected_type_var at nodes.lkt:4041:22>' Fld_3 nodes.lkt:4041



--# expr-start 2465 '<FieldAccess for cond_expr at nodes.lkt:4041:22>' Fld_2 nodes.lkt:4041







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_2 := Create_Internal_Entity_Expr (Node => Ent.Node.If_Expr_F_Cond_Expr, Info => Ent.Info);
--# expr-done 2465



   if Fld_2.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_3 := Fld_2.Node.Expr_Expected_Type_Var'Unrestricted_Access;
--# expr-done 2466
Fld_3.Value := No_Entity;
Entity_Vars.Reset (Fld_3);





--# expr-start 2467 '<FieldAccess for bool_type at nodes.lkt:4041:58>' Fld_4 nodes.lkt:4041







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start LktNode.bool_type
Fld_4 := Liblktlang.Implementation.Lkt_Node_P_Bool_Type (Node => Ent.Node);
--# end
--# expr-done 2467



   
      Cast_Result := Create_Internal_Entity
        (Node => Fld_4.Node,
         Info => Fld_4.Info);


Bind_Result := Solver.Create_Assign (Fld_3, Cast_Result, Solver_Ifc.No_Converter, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4041:22") else null)); 
--# expr-done 2468
And_Pred := Create_And (Fld_1, Bind_Result, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4040:17") else null)); 
--# expr-done 2469
--# expr-start 2476 '<bind at nodes.lkt:4044:17>' Dyn_Var_Bind_Result nodes.lkt:4044





--# expr-start 2470 '<FieldAccess for cond_expr at nodes.lkt:4044:39>' Fld_5 nodes.lkt:4044







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_5 := Self.If_Expr_F_Cond_Expr;
--# expr-done 2470



   
      Cast_Result_1 := Fld_5;


Bound_Error_Location := Cast_Result_1; 
--# expr-start 2475 '<Predicate on TypeDecl.matching_type at nodes.lkt:4045:17>' Pred nodes.lkt:4045
--# expr-start 2472 '<FieldAccess for expected_type_var at nodes.lkt:4046:21>' Fld_7 nodes.lkt:4046



--# expr-start 2471 '<FieldAccess for cond_expr at nodes.lkt:4046:21>' Fld_6 nodes.lkt:4046







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_6 := Create_Internal_Entity_Expr (Node => Ent.Node.If_Expr_F_Cond_Expr, Info => Ent.Info);
--# expr-done 2471



   if Fld_6.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_7 := Fld_6.Node.Expr_Expected_Type_Var'Unrestricted_Access;
--# expr-done 2472
Fld_7.Value := No_Entity;
Entity_Vars.Reset (Fld_7);
--# expr-start 2474 '<FieldAccess for actual_type_var at nodes.lkt:4047:21>' Fld_9 nodes.lkt:4047



--# expr-start 2473 '<FieldAccess for cond_expr at nodes.lkt:4047:21>' Fld_8 nodes.lkt:4047







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_8 := Create_Internal_Entity_Expr (Node => Ent.Node.If_Expr_F_Cond_Expr, Info => Ent.Info);
--# expr-done 2473



   if Fld_8.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_9 := Fld_8.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 2474
Fld_9.Value := No_Entity;
Entity_Vars.Reset (Fld_9);


Pred := Solver.Create_N_Predicate ((Fld_7, Fld_9), Create_Type_Decl_P_Matching_Type_0_Predicate (2, Bound_Error_Location)); 
--# expr-done 2475
Dyn_Var_Bind_Result := Pred; Inc_Ref (Dyn_Var_Bind_Result);
--# expr-done 2476
And_Pred_1 := Create_And (And_Pred, Dyn_Var_Bind_Result, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4039:13") else null)); 
--# expr-done 2477
--# expr-start 2496 '<LogicAll at nodes.lkt:4051:14>' Logic_Boolean_Op nodes.lkt:4051
--# expr-start 2495 '<Map at nodes.lkt:4051:14>' Map_Result nodes.lkt:4051








   

   --# expr-start 2478 '<FieldAccess for alternatives at nodes.lkt:4051:14>' Fld_10 nodes.lkt:4051







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_10 := Create_Internal_Entity_Elsif_Branch_List (Node => Ent.Node.If_Expr_F_Alternatives, Info => Ent.Info);
--# expr-done 2478









Fld_11 := Fld_10.Node;

   
      declare
         Map_Result_Vec : Logic_Equation_Vectors.Vector;
      begin
   

   

      if Fld_11 = null then
         
      Map_Result := Create_Logic_Equation_Array (0);
   
      else
         

      declare
         
         Collection : constant Bare_Elsif_Branch_List := Fld_11;
      begin
         for Untyped_Item_0 of
               Collection.Nodes (1 .. Children_Count (Collection))
         loop
                  
                  Bare_Item_0 := Untyped_Item_0; 
                  



Is_Null := Bare_Item_0 = null; 
if Is_Null then
   
   If_Result := No_Entity_Elsif_Branch;
else
   








Fld_12 := Fld_10.Info;

As_Entity := (Info => Fld_12, Node => Bare_Item_0); 
   If_Result := As_Entity;
end if;



                  Item_0 := If_Result; 

            
   --# scope-start


               --# bind alt Item_0

            
         
         
      --# expr-start 2494 '<LogicBinaryOp And at nodes.lkt:4053:13>' And_Pred_3 nodes.lkt:4053
--# expr-start 2485 '<LogicBinaryOp And at nodes.lkt:4054:17>' And_Pred_2 nodes.lkt:4054
--# expr-start 2480 '<FieldAccess for xref_equation at nodes.lkt:4054:17>' Fld_14 nodes.lkt:4054



--# expr-start 2479 '<FieldAccess for cond_expr at nodes.lkt:4054:17>' Fld_13 nodes.lkt:4054







   if Item_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_13 := Create_Internal_Entity_Expr (Node => Item_0.Node.Elsif_Branch_F_Cond_Expr, Info => Item_0.Info);
--# expr-done 2479



   if Fld_13.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]LktNode.xref_equation'
Fld_14 := Liblktlang.Implementation.Dispatcher_Lkt_Node_P_Xref_Equation (Node => Fld_13.Node, E_Info => Fld_13.Info);
--# end
--# expr-done 2480
--# expr-start 2484 '<Bind at nodes.lkt:4055:22>' Bind_Result_1 nodes.lkt:4055
--# expr-start 2482 '<FieldAccess for expected_type_var at nodes.lkt:4055:22>' Fld_16 nodes.lkt:4055



--# expr-start 2481 '<FieldAccess for cond_expr at nodes.lkt:4055:22>' Fld_15 nodes.lkt:4055







   if Item_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_15 := Create_Internal_Entity_Expr (Node => Item_0.Node.Elsif_Branch_F_Cond_Expr, Info => Item_0.Info);
--# expr-done 2481



   if Fld_15.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_16 := Fld_15.Node.Expr_Expected_Type_Var'Unrestricted_Access;
--# expr-done 2482
Fld_16.Value := No_Entity;
Entity_Vars.Reset (Fld_16);





--# expr-start 2483 '<FieldAccess for bool_type at nodes.lkt:4055:57>' Fld_17 nodes.lkt:4055







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start LktNode.bool_type
Fld_17 := Liblktlang.Implementation.Lkt_Node_P_Bool_Type (Node => Ent.Node);
--# end
--# expr-done 2483



   
      Cast_Result_2 := Create_Internal_Entity
        (Node => Fld_17.Node,
         Info => Fld_17.Info);


Bind_Result_1 := Solver.Create_Assign (Fld_16, Cast_Result_2, Solver_Ifc.No_Converter, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4055:22") else null)); 
--# expr-done 2484
And_Pred_2 := Create_And (Fld_14, Bind_Result_1, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4054:17") else null)); 
--# expr-done 2485
--# expr-start 2493 '<bind at nodes.lkt:4058:17>' Dyn_Var_Bind_Result_1 nodes.lkt:4058





--# expr-start 2487 '<FieldAccess for node at nodes.lkt:4058:39>' Fld_19 nodes.lkt:4058



--# expr-start 2486 '<FieldAccess for cond_expr at nodes.lkt:4058:39>' Fld_18 nodes.lkt:4058







   if Item_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_18 := Create_Internal_Entity_Expr (Node => Item_0.Node.Elsif_Branch_F_Cond_Expr, Info => Item_0.Info);
--# expr-done 2486





Fld_19 := Fld_18.Node;
--# expr-done 2487



   
      Cast_Result_3 := Fld_19;


Bound_Error_Location_1 := Cast_Result_3; 
--# expr-start 2492 '<Predicate on TypeDecl.commutative_matching_type at nodes.lkt:4059:17>' Pred_1 nodes.lkt:4059
--# expr-start 2489 '<FieldAccess for expected_type_var at nodes.lkt:4060:21>' Fld_21 nodes.lkt:4060



--# expr-start 2488 '<FieldAccess for cond_expr at nodes.lkt:4060:21>' Fld_20 nodes.lkt:4060







   if Item_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_20 := Create_Internal_Entity_Expr (Node => Item_0.Node.Elsif_Branch_F_Cond_Expr, Info => Item_0.Info);
--# expr-done 2488



   if Fld_20.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_21 := Fld_20.Node.Expr_Expected_Type_Var'Unrestricted_Access;
--# expr-done 2489
Fld_21.Value := No_Entity;
Entity_Vars.Reset (Fld_21);
--# expr-start 2491 '<FieldAccess for actual_type_var at nodes.lkt:4061:21>' Fld_23 nodes.lkt:4061



--# expr-start 2490 '<FieldAccess for cond_expr at nodes.lkt:4061:21>' Fld_22 nodes.lkt:4061







   if Item_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_22 := Create_Internal_Entity_Expr (Node => Item_0.Node.Elsif_Branch_F_Cond_Expr, Info => Item_0.Info);
--# expr-done 2490



   if Fld_22.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_23 := Fld_22.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 2491
Fld_23.Value := No_Entity;
Entity_Vars.Reset (Fld_23);


Pred_1 := Solver.Create_N_Predicate ((Fld_21, Fld_23), Create_Type_Decl_P_Commutative_Matching_Type_0_Predicate (2, Bound_Error_Location_1)); 
--# expr-done 2492
Dyn_Var_Bind_Result_1 := Pred_1; Inc_Ref (Dyn_Var_Bind_Result_1);
--# expr-done 2493
And_Pred_3 := Create_And (And_Pred_2, Dyn_Var_Bind_Result_1, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4053:13") else null)); 
--# expr-done 2494
      

         declare
            Item_To_Append : constant Logic_Equation := And_Pred_3;
         begin
               Inc_Ref (Item_To_Append);
            Logic_Equation_Vectors.Append (Map_Result_Vec, Item_To_Append);
         end;
   
   
   

            
   --# end
      Finalizer_Scope_730;



         end loop;
      end;
   
      end if;

   

         Map_Result := Create_Logic_Equation_Array
           (Items_Count => Natural (Logic_Equation_Vectors.Length (Map_Result_Vec)));
         for I in Map_Result.Items'Range loop
            Map_Result.Items (I) := Logic_Equation_Vectors.Get
              (Map_Result_Vec,
               I + Logic_Equation_Vectors.Index_Type'First - Map_Result.Items'First);
         end loop;
         Logic_Equation_Vectors.Destroy (Map_Result_Vec);

      end;
   



--# expr-done 2495
Logic_Boolean_Op := Solver.Create_All (Relation_Array (Map_Result.Items), (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4051:14") else null)); 
--# expr-done 2496
And_Pred_4 := Create_And (And_Pred_1, Logic_Boolean_Op, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4038:9") else null)); 
--# expr-done 2497

         Property_Result := And_Pred_4;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_300;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_300;
                     Finalizer_Scope_730;




            raise;
      end;



   return Property_Result;
end If_Expr_P_Cond_Branches_Equation;
--# end



   


      

   --
   --  Primitives for Bare_Isa
   --

   



      
      procedure Initialize_Fields_For_Isa
        (Self : Bare_Isa
         ; Isa_F_Expr : Bare_Expr
         ; Isa_F_Dest_Type : Bare_Isa_List
        ) is
      begin
            Initialize_Fields_For_Expr
              (Self);

            Self.Isa_F_Expr := Isa_F_Expr;
            Self.Isa_F_Dest_Type := Isa_F_Dest_Type;
         

      end Initialize_Fields_For_Isa;

      
   function Isa_F_Expr
     (Node : Bare_Isa) return Bare_Expr
   is
      

   begin
         
         return Node.Isa_F_Expr;
      
   end;

      
   function Isa_F_Dest_Type
     (Node : Bare_Isa) return Bare_Isa_List
   is
      

   begin
         
         return Node.Isa_F_Dest_Type;
      
   end;


   







--# property-start Isa.expected_type_equation nodes.lkt:4074
pragma Warnings (Off, "is not referenced");
 function Isa_P_Expected_Type_Equation
  
  (Node : Bare_Isa
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Logic_Equation
is
   Self : Bare_Isa  := Bare_Isa (Node);
     Ent : Internal_Entity_Isa :=
       Internal_Entity_Isa'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Logic_Equation;

      
            procedure Finalizer_Scope_301 with Inline_Always;

      Fld : Internal_Entity_Expr;
Fld_1 : Logic_Var;
Cast_Expr : Internal_Entity_Type_Decl;
Cast_Result : Internal_Entity;
Bind_Result : Logic_Equation;

            procedure Finalizer_Scope_301 is
            begin
                     Dec_Ref (Bind_Result);
            end Finalizer_Scope_301;


begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         --# expr-start 2500 '<Bind at nodes.lkt:4075:9>' Bind_Result nodes.lkt:4075
--# expr-start 2499 '<FieldAccess for expected_type_var at nodes.lkt:4075:9>' Fld_1 nodes.lkt:4075



--# expr-start 2498 '<FieldAccess for expr at nodes.lkt:4075:9>' Fld nodes.lkt:4075







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Create_Internal_Entity_Expr (Node => Ent.Node.Isa_F_Expr, Info => Ent.Info);
--# expr-done 2498



   if Fld.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_1 := Fld.Node.Expr_Expected_Type_Var'Unrestricted_Access;
--# expr-done 2499
Fld_1.Value := No_Entity;
Entity_Vars.Reset (Fld_1);






Cast_Expr := No_Entity_Type_Decl; 



   
      Cast_Result := Create_Internal_Entity
        (Node => Cast_Expr.Node,
         Info => Cast_Expr.Info);


Bind_Result := Solver.Create_Assign (Fld_1, Cast_Result, Solver_Ifc.No_Converter, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4075:9") else null)); 
--# expr-done 2500

         Property_Result := Bind_Result;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_301;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_301;




            raise;
      end;



   return Property_Result;
end Isa_P_Expected_Type_Equation;
--# end

   







--# property-start Isa.xref_equation nodes.lkt:4077
pragma Warnings (Off, "is not referenced");
 function Isa_P_Xref_Equation
  
  (Node : Bare_Isa
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Logic_Equation
is
   Self : Bare_Isa  := Bare_Isa (Node);
     Ent : Internal_Entity_Isa :=
       Internal_Entity_Isa'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Logic_Equation;

      
            procedure Finalizer_Scope_302 with Inline_Always;

      Fld : Logic_Var;
Fld_1 : Internal_Entity_Named_Type_Decl;
Cast_Result : Internal_Entity;
Bind_Result : Logic_Equation;

            procedure Finalizer_Scope_302 is
            begin
                     Dec_Ref (Bind_Result);
            end Finalizer_Scope_302;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 2503 '<Bind at nodes.lkt:4077:37>' Bind_Result nodes.lkt:4077
--# expr-start 2501 '<FieldAccess for actual_type_var at nodes.lkt:4077:37>' Fld nodes.lkt:4077







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Ent.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 2501
Fld.Value := No_Entity;
Entity_Vars.Reset (Fld);





--# expr-start 2502 '<FieldAccess for bool_type at nodes.lkt:4077:61>' Fld_1 nodes.lkt:4077







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start LktNode.bool_type
Fld_1 := Liblktlang.Implementation.Lkt_Node_P_Bool_Type (Node => Ent.Node);
--# end
--# expr-done 2502



   
      Cast_Result := Create_Internal_Entity
        (Node => Fld_1.Node,
         Info => Fld_1.Info);


Bind_Result := Solver.Create_Assign (Fld, Cast_Result, Solver_Ifc.No_Converter, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4077:37") else null)); 
--# expr-done 2503

         Property_Result := Bind_Result;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_302;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_302;




            raise;
      end;



   return Property_Result;
end Isa_P_Xref_Equation;
--# end

   







--# property-start Isa.has_context_free_type nodes.lkt:4079
pragma Warnings (Off, "is not referenced");
 function Isa_P_Has_Context_Free_Type
  
  (Node : Bare_Isa
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Boolean
is
   Self : Bare_Isa  := Bare_Isa (Node);
      --# bind self Self

   


   Property_Result : Boolean;

      

      



begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         

         Property_Result := True;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Isa_P_Has_Context_Free_Type;
--# end



   


      

   --
   --  Primitives for Bare_Keep_Expr
   --

   



      
      procedure Initialize_Fields_For_Keep_Expr
        (Self : Bare_Keep_Expr
         ; Keep_Expr_F_Expr : Bare_Expr
         ; Keep_Expr_F_Keep_Type : Bare_Type_Ref
        ) is
      begin
            Initialize_Fields_For_Expr
              (Self);

            Self.Keep_Expr_F_Expr := Keep_Expr_F_Expr;
            Self.Keep_Expr_F_Keep_Type := Keep_Expr_F_Keep_Type;
         
      Self.Keep_Expr_Array_Element_Type := Null_Var_Record;

      end Initialize_Fields_For_Keep_Expr;

      
   function Keep_Expr_F_Expr
     (Node : Bare_Keep_Expr) return Bare_Expr
   is
      

   begin
         
         return Node.Keep_Expr_F_Expr;
      
   end;

      
   function Keep_Expr_F_Keep_Type
     (Node : Bare_Keep_Expr) return Bare_Type_Ref
   is
      

   begin
         
         return Node.Keep_Expr_F_Keep_Type;
      
   end;


   







--# property-start KeepExpr.xref_equation nodes.lkt:4090
pragma Warnings (Off, "is not referenced");
 function Keep_Expr_P_Xref_Equation
  
  (Node : Bare_Keep_Expr
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Logic_Equation
is
   Self : Bare_Keep_Expr  := Bare_Keep_Expr (Node);
     Ent : Internal_Entity_Keep_Expr :=
       Internal_Entity_Keep_Expr'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Logic_Equation;

      
            procedure Finalizer_Scope_304 with Inline_Always;

      Fld : Internal_Entity_Expr;
Fld_1 : Logic_Equation;
Fld_2 : Internal_Entity_Type_Ref;
Fld_3 : Logic_Equation;
And_Pred : Logic_Equation;
Fld_4 : Logic_Var;
Fld_5 : Internal_Entity_Expr;
Fld_6 : Logic_Var;
Fld_7 : Internal_Entity_Type_Ref;
Fld_8 : Logic_Var;
Bind_Result : Logic_Equation;
And_Pred_1 : Logic_Equation;
Fld_9 : Internal_Entity_Expr;
Fld_10 : Logic_Var;
Cast_Expr : Internal_Entity_Type_Decl;
Cast_Result : Internal_Entity;
Bind_Result_1 : Logic_Equation;
And_Pred_2 : Logic_Equation;
Fld_11 : Bare_Expr;
Cast_Result_1 : Bare_Lkt_Node;
Bound_Error_Location : Bare_Lkt_Node;
Fld_12 : Internal_Entity_Expr;
Fld_13 : Logic_Var;
Pred : Logic_Equation;
Dyn_Var_Bind_Result : Logic_Equation;
And_Pred_3 : Logic_Equation;
Fld_14 : Logic_Var;
Fld_15 : Internal_Entity_Expr;
Fld_16 : Logic_Var;
Bind_Result_2 : Logic_Equation;
And_Pred_4 : Logic_Equation;
Fld_17 : Bare_Type_Ref;
Cast_Result_2 : Bare_Lkt_Node;
Bound_Error_Location_1 : Bare_Lkt_Node;
Fld_18 : Logic_Var;
Fld_19 : Internal_Entity_Type_Ref;
Fld_20 : Logic_Var;
Pred_1 : Logic_Equation;
Dyn_Var_Bind_Result_1 : Logic_Equation;
And_Pred_5 : Logic_Equation;

            procedure Finalizer_Scope_304 is
            begin
                     Dec_Ref (Fld_1);
                     Dec_Ref (Fld_3);
                     Dec_Ref (And_Pred);
                     Dec_Ref (Bind_Result);
                     Dec_Ref (And_Pred_1);
                     Dec_Ref (Bind_Result_1);
                     Dec_Ref (And_Pred_2);
                     Dec_Ref (Pred);
                     Dec_Ref (Dyn_Var_Bind_Result);
                     Dec_Ref (And_Pred_3);
                     Dec_Ref (Bind_Result_2);
                     Dec_Ref (And_Pred_4);
                     Dec_Ref (Pred_1);
                     Dec_Ref (Dyn_Var_Bind_Result_1);
                     Dec_Ref (And_Pred_5);
            end Finalizer_Scope_304;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 2537 '<LogicBinaryOp And at nodes.lkt:4091:9>' And_Pred_5 nodes.lkt:4091
--# expr-start 2530 '<LogicBinaryOp And at nodes.lkt:4092:13>' And_Pred_4 nodes.lkt:4092
--# expr-start 2525 '<LogicBinaryOp And at nodes.lkt:4093:17>' And_Pred_3 nodes.lkt:4093
--# expr-start 2519 '<LogicBinaryOp And at nodes.lkt:4094:21>' And_Pred_2 nodes.lkt:4094
--# expr-start 2515 '<LogicBinaryOp And at nodes.lkt:4095:25>' And_Pred_1 nodes.lkt:4095
--# expr-start 2508 '<LogicBinaryOp And at nodes.lkt:4096:29>' And_Pred nodes.lkt:4096
--# expr-start 2505 '<FieldAccess for xref_equation at nodes.lkt:4096:29>' Fld_1 nodes.lkt:4096



--# expr-start 2504 '<FieldAccess for expr at nodes.lkt:4096:29>' Fld nodes.lkt:4096







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Create_Internal_Entity_Expr (Node => Ent.Node.Keep_Expr_F_Expr, Info => Ent.Info);
--# expr-done 2504



   if Fld.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]LktNode.xref_equation'
Fld_1 := Liblktlang.Implementation.Dispatcher_Lkt_Node_P_Xref_Equation (Node => Fld.Node, E_Info => Fld.Info);
--# end
--# expr-done 2505
--# expr-start 2507 '<FieldAccess for xref_equation at nodes.lkt:4097:34>' Fld_3 nodes.lkt:4097



--# expr-start 2506 '<FieldAccess for keep_type at nodes.lkt:4097:34>' Fld_2 nodes.lkt:4097







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_2 := Create_Internal_Entity_Type_Ref (Node => Ent.Node.Keep_Expr_F_Keep_Type, Info => Ent.Info);
--# expr-done 2506



   if Fld_2.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]LktNode.xref_equation'
Fld_3 := Liblktlang.Implementation.Dispatcher_Lkt_Node_P_Xref_Equation (Node => Fld_2.Node, E_Info => Fld_2.Info);
--# end
--# expr-done 2507
And_Pred := Create_And (Fld_1, Fld_3, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4096:29") else null)); 
--# expr-done 2508
--# expr-start 2514 '<NPropagate at nodes.lkt:4099:30>' Bind_Result nodes.lkt:4099
--# expr-start 2509 '<FieldAccess for actual_type_var at nodes.lkt:4099:30>' Fld_4 nodes.lkt:4099







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_4 := Ent.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 2509
Fld_4.Value := No_Entity;
Entity_Vars.Reset (Fld_4);

--# expr-start 2511 '<FieldAccess for actual_type_var at nodes.lkt:4101:29>' Fld_6 nodes.lkt:4101



--# expr-start 2510 '<FieldAccess for expr at nodes.lkt:4101:29>' Fld_5 nodes.lkt:4101







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_5 := Create_Internal_Entity_Expr (Node => Ent.Node.Keep_Expr_F_Expr, Info => Ent.Info);
--# expr-done 2510



   if Fld_5.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_6 := Fld_5.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 2511
Fld_6.Value := No_Entity;
Entity_Vars.Reset (Fld_6);
--# expr-start 2513 '<FieldAccess for type_var at nodes.lkt:4102:29>' Fld_8 nodes.lkt:4102



--# expr-start 2512 '<FieldAccess for keep_type at nodes.lkt:4102:29>' Fld_7 nodes.lkt:4102







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_7 := Create_Internal_Entity_Type_Ref (Node => Ent.Node.Keep_Expr_F_Keep_Type, Info => Ent.Info);
--# expr-done 2512



   if Fld_7.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_8 := Fld_7.Node.Type_Ref_Type_Var'Unrestricted_Access;
--# expr-done 2513
Fld_8.Value := No_Entity;
Entity_Vars.Reset (Fld_8);
Bind_Result := Solver.Create_N_Propagate (Fld_4, Create_Decl_P_Get_Keep_Type_0_Functor (2), (1 => Fld_6, 2 => Fld_8), Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4099:30") else null)); 
--# expr-done 2514
And_Pred_1 := Create_And (And_Pred, Bind_Result, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4095:25") else null)); 
--# expr-done 2515
--# expr-start 2518 '<Bind at nodes.lkt:4105:26>' Bind_Result_1 nodes.lkt:4105
--# expr-start 2517 '<FieldAccess for expected_type_var at nodes.lkt:4105:26>' Fld_10 nodes.lkt:4105



--# expr-start 2516 '<FieldAccess for expr at nodes.lkt:4105:26>' Fld_9 nodes.lkt:4105







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_9 := Create_Internal_Entity_Expr (Node => Ent.Node.Keep_Expr_F_Expr, Info => Ent.Info);
--# expr-done 2516



   if Fld_9.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_10 := Fld_9.Node.Expr_Expected_Type_Var'Unrestricted_Access;
--# expr-done 2517
Fld_10.Value := No_Entity;
Entity_Vars.Reset (Fld_10);






Cast_Expr := No_Entity_Type_Decl; 



   
      Cast_Result := Create_Internal_Entity
        (Node => Cast_Expr.Node,
         Info => Cast_Expr.Info);


Bind_Result_1 := Solver.Create_Assign (Fld_10, Cast_Result, Solver_Ifc.No_Converter, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4105:26") else null)); 
--# expr-done 2518
And_Pred_2 := Create_And (And_Pred_1, Bind_Result_1, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4094:21") else null)); 
--# expr-done 2519
--# expr-start 2524 '<bind at nodes.lkt:4108:21>' Dyn_Var_Bind_Result nodes.lkt:4108





--# expr-start 2520 '<FieldAccess for expr at nodes.lkt:4108:43>' Fld_11 nodes.lkt:4108







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_11 := Self.Keep_Expr_F_Expr;
--# expr-done 2520



   
      Cast_Result_1 := Fld_11;


Bound_Error_Location := Cast_Result_1; 
--# expr-start 2523 '<Predicate on TypeDecl.is_of_array_type at nodes.lkt:4109:21>' Pred nodes.lkt:4109
--# expr-start 2522 '<FieldAccess for actual_type_var at nodes.lkt:4109:48>' Fld_13 nodes.lkt:4109



--# expr-start 2521 '<FieldAccess for expr at nodes.lkt:4109:48>' Fld_12 nodes.lkt:4109







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_12 := Create_Internal_Entity_Expr (Node => Ent.Node.Keep_Expr_F_Expr, Info => Ent.Info);
--# expr-done 2521



   if Fld_12.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_13 := Fld_12.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 2522
Fld_13.Value := No_Entity;
Entity_Vars.Reset (Fld_13);

Pred := Solver.Create_Predicate (Fld_13, Create_Type_Decl_P_Is_Of_Array_Type_0_Predicate (Bound_Error_Location)); 
--# expr-done 2523
Dyn_Var_Bind_Result := Pred; Inc_Ref (Dyn_Var_Bind_Result);
--# expr-done 2524
And_Pred_3 := Create_And (And_Pred_2, Dyn_Var_Bind_Result, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4093:17") else null)); 
--# expr-done 2525
--# expr-start 2529 '<NPropagate at nodes.lkt:4112:18>' Bind_Result_2 nodes.lkt:4112
--# expr-start 2527 '<FieldAccess for actual_type_var at nodes.lkt:4113:49>' Fld_16 nodes.lkt:4113



--# expr-start 2526 '<FieldAccess for expr at nodes.lkt:4113:49>' Fld_15 nodes.lkt:4113







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_15 := Create_Internal_Entity_Expr (Node => Ent.Node.Keep_Expr_F_Expr, Info => Ent.Info);
--# expr-done 2526



   if Fld_15.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_16 := Fld_15.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 2527
Fld_16.Value := No_Entity;
Entity_Vars.Reset (Fld_16);
--# expr-start 2528 '<FieldAccess for array_element_type at nodes.lkt:4112:18>' Fld_14 nodes.lkt:4112







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_14 := Ent.Node.Keep_Expr_Array_Element_Type'Unrestricted_Access;
--# expr-done 2528
Fld_14.Value := No_Entity;
Entity_Vars.Reset (Fld_14);

Bind_Result_2 := Solver.Create_Propagate (Fld_16, Fld_14, Create_Type_Decl_P_Get_Array_Content_Type_0_Functor, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4112:18") else null)); 
--# expr-done 2529
And_Pred_4 := Create_And (And_Pred_3, Bind_Result_2, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4092:13") else null)); 
--# expr-done 2530
--# expr-start 2536 '<bind at nodes.lkt:4116:13>' Dyn_Var_Bind_Result_1 nodes.lkt:4116





--# expr-start 2531 '<FieldAccess for keep_type at nodes.lkt:4116:35>' Fld_17 nodes.lkt:4116







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_17 := Self.Keep_Expr_F_Keep_Type;
--# expr-done 2531



   
      Cast_Result_2 := Fld_17;


Bound_Error_Location_1 := Cast_Result_2; 
--# expr-start 2535 '<Predicate on TypeDecl.is_subtype_or_eq at nodes.lkt:4117:13>' Pred_1 nodes.lkt:4117
--# expr-start 2532 '<FieldAccess for array_element_type at nodes.lkt:4118:17>' Fld_18 nodes.lkt:4118







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_18 := Ent.Node.Keep_Expr_Array_Element_Type'Unrestricted_Access;
--# expr-done 2532
Fld_18.Value := No_Entity;
Entity_Vars.Reset (Fld_18);
--# expr-start 2534 '<FieldAccess for type_var at nodes.lkt:4119:17>' Fld_20 nodes.lkt:4119



--# expr-start 2533 '<FieldAccess for keep_type at nodes.lkt:4119:17>' Fld_19 nodes.lkt:4119







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_19 := Create_Internal_Entity_Type_Ref (Node => Ent.Node.Keep_Expr_F_Keep_Type, Info => Ent.Info);
--# expr-done 2533



   if Fld_19.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_20 := Fld_19.Node.Type_Ref_Type_Var'Unrestricted_Access;
--# expr-done 2534
Fld_20.Value := No_Entity;
Entity_Vars.Reset (Fld_20);



Pred_1 := Solver.Create_N_Predicate ((Fld_18, Fld_20), Create_Type_Decl_P_Is_Subtype_Or_Eq_0_Predicate (2, True, Bound_Error_Location_1)); 
--# expr-done 2535
Dyn_Var_Bind_Result_1 := Pred_1; Inc_Ref (Dyn_Var_Bind_Result_1);
--# expr-done 2536
And_Pred_5 := Create_And (And_Pred_4, Dyn_Var_Bind_Result_1, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4091:9") else null)); 
--# expr-done 2537

         Property_Result := And_Pred_5;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_304;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_304;




            raise;
      end;



   return Property_Result;
end Keep_Expr_P_Xref_Equation;
--# end



   


      

   --
   --  Primitives for Bare_Lambda_Expr
   --

   



   

   

   

   

   

   

   


      procedure Lambda_Expr_Pre_Env_Actions
        (Self            : Bare_Lambda_Expr;
         State           : in out PLE_Node_State;
         Add_To_Env_Only : Boolean := False) is
      begin
            


   
      if Add_To_Env_Only then
         return;
      end if;

      declare
         No_Parent         : constant Boolean :=
            False;
         Transitive_Parent : constant Boolean :=
            Liblktlang.Implementation.Env_Trans_Parent_22 (Node => 
Self);
         Names             : Symbol_Type_Array_Access :=
            null;
      begin
         Add_Env (Self, State, No_Parent, Transitive_Parent, Names);
      end;
   
   
      end;



      
      procedure Initialize_Fields_For_Lambda_Expr
        (Self : Bare_Lambda_Expr
         ; Lambda_Expr_F_Params : Bare_Lambda_Arg_Decl_List
         ; Lambda_Expr_F_Return_Type : Bare_Type_Ref
         ; Lambda_Expr_F_Body : Bare_Expr
        ) is
      begin
            Initialize_Fields_For_Expr
              (Self);

            Self.Lambda_Expr_F_Params := Lambda_Expr_F_Params;
            Self.Lambda_Expr_F_Return_Type := Lambda_Expr_F_Return_Type;
            Self.Lambda_Expr_F_Body := Lambda_Expr_F_Body;
         

      end Initialize_Fields_For_Lambda_Expr;

      
   function Lambda_Expr_F_Params
     (Node : Bare_Lambda_Expr) return Bare_Lambda_Arg_Decl_List
   is
      

   begin
         
         return Node.Lambda_Expr_F_Params;
      
   end;

      
   function Lambda_Expr_F_Return_Type
     (Node : Bare_Lambda_Expr) return Bare_Type_Ref
   is
      

   begin
         
         return Node.Lambda_Expr_F_Return_Type;
      
   end;

      
   function Lambda_Expr_F_Body
     (Node : Bare_Lambda_Expr) return Bare_Expr
   is
      

   begin
         
         return Node.Lambda_Expr_F_Body;
      
   end;


   







--# property-start LambdaExpr.has_context_free_type nodes.lkt:4135
pragma Warnings (Off, "is not referenced");
 function Lambda_Expr_P_Has_Context_Free_Type
  
  (Node : Bare_Lambda_Expr
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Boolean
is
   Self : Bare_Lambda_Expr  := Bare_Lambda_Expr (Node);
     Ent : Internal_Entity_Lambda_Expr :=
       Internal_Entity_Lambda_Expr'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Boolean;

      

      Fld : Internal_Entity_Expr;
Fld_1 : Boolean;



begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         --# expr-start 2539 '<FieldAccess for has_context_free_type at nodes.lkt:4135:41>' Fld_1 nodes.lkt:4135



--# expr-start 2538 '<FieldAccess for body at nodes.lkt:4135:41>' Fld nodes.lkt:4135







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Create_Internal_Entity_Expr (Node => Ent.Node.Lambda_Expr_F_Body, Info => Ent.Info);
--# expr-done 2538



   if Fld.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]Expr.has_context_free_type'
Fld_1 := Liblktlang.Implementation.Dispatcher_Expr_P_Has_Context_Free_Type (Node => Fld.Node, E_Info => Fld.Info);
--# end
--# expr-done 2539

         Property_Result := Fld_1;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Lambda_Expr_P_Has_Context_Free_Type;
--# end

   







--# property-start LambdaExpr.expected_type_equation nodes.lkt:4137
pragma Warnings (Off, "is not referenced");
 function Lambda_Expr_P_Expected_Type_Equation
  
  (Node : Bare_Lambda_Expr
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Logic_Equation
is
   Self : Bare_Lambda_Expr  := Bare_Lambda_Expr (Node);
     Ent : Internal_Entity_Lambda_Expr :=
       Internal_Entity_Lambda_Expr'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Logic_Equation;

      
            procedure Finalizer_Scope_306 with Inline_Always;

      Fld : Internal_Entity_Expr;
Fld_1 : Logic_Var;
Cast_Expr : Internal_Entity_Type_Decl;
Cast_Result : Internal_Entity;
Bind_Result : Logic_Equation;
False_Rel : Logic_Equation;
Fld_2 : Internal_Entity_Expr;
Fld_3 : Boolean;
If_Result : Logic_Equation;

            procedure Finalizer_Scope_306 is
            begin
                     Dec_Ref (Bind_Result);
                     Dec_Ref (False_Rel);
                     Dec_Ref (If_Result);
            end Finalizer_Scope_306;


begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         --# expr-start 2545 '<If at nodes.lkt:4138:9>' If_Result nodes.lkt:4138



--# expr-start 2541 '<FieldAccess for xref_entry_point at nodes.lkt:4138:12>' Fld_3 nodes.lkt:4138



--# expr-start 2540 '<FieldAccess for body at nodes.lkt:4138:12>' Fld_2 nodes.lkt:4138







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_2 := Create_Internal_Entity_Expr (Node => Ent.Node.Lambda_Expr_F_Body, Info => Ent.Info);
--# expr-done 2540



   if Fld_2.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]LktNode.xref_entry_point'
Fld_3 := Liblktlang.Implementation.Dispatcher_Lkt_Node_P_Xref_Entry_Point (Node => Fld_2.Node, E_Info => Fld_2.Info);
--# end
--# expr-done 2541
if Fld_3 then
   --# expr-start 2544 '<Bind at nodes.lkt:4139:14>' Bind_Result nodes.lkt:4139
--# expr-start 2543 '<FieldAccess for expected_type_var at nodes.lkt:4139:14>' Fld_1 nodes.lkt:4139



--# expr-start 2542 '<FieldAccess for body at nodes.lkt:4139:14>' Fld nodes.lkt:4139







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Create_Internal_Entity_Expr (Node => Ent.Node.Lambda_Expr_F_Body, Info => Ent.Info);
--# expr-done 2542



   if Fld.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_1 := Fld.Node.Expr_Expected_Type_Var'Unrestricted_Access;
--# expr-done 2543
Fld_1.Value := No_Entity;
Entity_Vars.Reset (Fld_1);






Cast_Expr := No_Entity_Type_Decl; 



   
      Cast_Result := Create_Internal_Entity
        (Node => Cast_Expr.Node,
         Info => Cast_Expr.Info);


Bind_Result := Solver.Create_Assign (Fld_1, Cast_Result, Solver_Ifc.No_Converter, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4139:14") else null)); 
--# expr-done 2544
   If_Result := Bind_Result;
else
   False_Rel := Solver.Create_False ((if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4140:14") else null)); 
   If_Result := False_Rel;
end if;

      Inc_Ref (If_Result);


--# expr-done 2545

         Property_Result := If_Result;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_306;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_306;




            raise;
      end;



   return Property_Result;
end Lambda_Expr_P_Expected_Type_Equation;
--# end

   







--# property-start LambdaExpr.generic_type_equation nodes.lkt:4142
pragma Warnings (Off, "is not referenced");
 function Lambda_Expr_P_Generic_Type_Equation
  
  (Node : Bare_Lambda_Expr
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Logic_Equation
is
   Self : Bare_Lambda_Expr  := Bare_Lambda_Expr (Node);
     Ent : Internal_Entity_Lambda_Expr :=
       Internal_Entity_Lambda_Expr'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Logic_Equation;

      
            procedure Finalizer_Scope_307 with Inline_Always;
            procedure Finalizer_Scope_734 with Inline_Always;

      Local_Lambda_Type : Internal_Entity_Type_Decl;
Var_Expr_1 : Bare_Lkt_Node;
Var_Expr_2 : Bare_Param;
Node_Parents : Bare_Lkt_Node_Array_Access;
Is_A : Boolean;
Find_Result : Bare_Lkt_Node;
Fld : Internal_Entity_Type_Decl;
Fld_1 : Internal_Entity_Type_Decl;
Cast_Expr : Bare_Lkt_Node;
Cast_Result : Bare_Call_Expr;
Fld_2 : Bare_Param_List;
Get_Result : Bare_Param;
Node_Comp : Boolean;
Scope_Result : Boolean;
Result_Var : Boolean;
If_Result : Internal_Entity_Type_Decl;
Scope_Result_1 : Internal_Entity_Type_Decl;
Fld_3 : Internal_Entity_Type_Decl;
Result_Var_1 : Internal_Entity_Type_Decl;
Fld_4 : Internal_Entity_Lambda_Arg_Decl_List;
Fld_5 : Bare_Lambda_Arg_Decl_List;
Fld_6 : Internal_Entity_Info;
Item_3 : Internal_Entity_Lambda_Arg_Decl;
Bare_Item_3 : Bare_Lambda_Arg_Decl;
Fld_7 : Logic_Var;
Fld_8 : Internal_Entity_Type_Decl;
Cast_Result_1 : Internal_Entity;
Bind_Result : Logic_Equation;
True_Rel : Logic_Equation;
Fld_9 : Internal_Entity_Type_Ref;
Is_Null : Boolean;
Is_Null_1 : Boolean;
Not_Val : Boolean;
If_Result_1 : Boolean;
If_Result_2 : Logic_Equation;
As_Entity : Internal_Entity_Lambda_Arg_Decl;
Is_Null_2 : Boolean;
If_Result_3 : Internal_Entity_Lambda_Arg_Decl;
Map_Result : Logic_Equation_Array_Access;
Logic_Boolean_Op : Logic_Equation;
Let_Result : Logic_Equation;

            procedure Finalizer_Scope_307 is
            begin
                     Dec_Ref (Node_Parents);
                     Dec_Ref (Map_Result);
                     Dec_Ref (Logic_Boolean_Op);
                     Dec_Ref (Let_Result);
            end Finalizer_Scope_307;
            procedure Finalizer_Scope_734 is
            begin
                     Dec_Ref (Bind_Result);
                     Dec_Ref (True_Rel);
                     Dec_Ref (If_Result_2);
            end Finalizer_Scope_734;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 2569 '<Let at nodes.lkt:4143:9>' Let_Result nodes.lkt:4143
--# scope-start



--# expr-start 2548 '<Find at nodes.lkt:4144:13>' Find_Result nodes.lkt:4144








   

   --# expr-start 2546 '<FieldAccess for parents at nodes.lkt:4144:13>' Node_Parents nodes.lkt:4144







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;



Node_Parents := Parents (Self, True); 
--# expr-done 2546

   
      Find_Result := No_Bare_Lkt_Node;
   

   

      

      declare
         
         Collection : constant Bare_Lkt_Node_Array_Access := Node_Parents;
      begin
         for Item_0 of
               Collection.Items
         loop

            
   --# scope-start


               --# bind p Item_0

            
      --# expr-start 2547 '<IsA CallExpr at nodes.lkt:4144:40>' Is_A nodes.lkt:4144

Is_A := Item_0 /= null 
and then Item_0.Kind in Lkt_Call_Expr_Range; 
--# expr-done 2547
      if Is_A then
         Find_Result := Item_0; 
      end if;
   

            
   --# end


               exit when Is_A;

         end loop;
      end;
   

   
   



--# expr-done 2548
Var_Expr_1 := Find_Result;





if Var_Expr_1 /= No_Bare_Lkt_Node then
   



   --# scope-start


   --# bind ce Var_Expr_1

--# expr-start 2555 '<If at nodes.lkt:4146:17>' If_Result nodes.lkt:4146






--# expr-start 2551 '<at at nodes.lkt:4146:20>' Get_Result nodes.lkt:4146

--# expr-start 2550 '<FieldAccess for args at nodes.lkt:4146:20>' Fld_2 nodes.lkt:4146



--# expr-start 2549 '<Cast to CallExpr at nodes.lkt:4146:20>' Cast_Result nodes.lkt:4146






Cast_Expr := Var_Expr_1; 



   if Cast_Expr = null
      or else Cast_Expr.Kind in Lkt_Call_Expr_Range
   then
      
      Cast_Result := Cast_Expr;

   else
         Cast_Result := No_Bare_Lkt_Node;
   end if;


--# expr-done 2549



   if Cast_Result = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_2 := Cast_Result.Base_Call_Expr_F_Args;
--# expr-done 2550


Get_Result := Get (Self, Fld_2, 0, True); 
--# expr-done 2551
Var_Expr_2 := Get_Result;





if Var_Expr_2 /= No_Bare_Lkt_Node then
   



   --# scope-start


   --# bind a Var_Expr_2

--# expr-start 2552 '<OrderingTest '"'"'ge'"'"' at nodes.lkt:4146:55>' Node_Comp nodes.lkt:4146



Node_Comp := Compare (Self, Self, Var_Expr_2, Greater_Or_Equal); 
--# expr-done 2552
Scope_Result := Node_Comp;


   --# end


   Result_Var := Scope_Result;
else
   
   Result_Var := False;
end if;



if Result_Var then
   --# expr-start 2553 '<FieldAccess for get_generic_type at nodes.lkt:4149:21>' Fld nodes.lkt:4149







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start Expr.get_generic_type
Fld := Liblktlang.Implementation.Expr_P_Get_Generic_Type (Node => Ent.Node, E_Info => Ent.Info);
--# end
--# expr-done 2553
   If_Result := Fld;
else
   --# expr-start 2554 '<FieldAccess for get_expected_type at nodes.lkt:4153:21>' Fld_1 nodes.lkt:4153







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start Expr.get_expected_type
Fld_1 := Liblktlang.Implementation.Expr_P_Get_Expected_Type (Node => Ent.Node, E_Info => Ent.Info);
--# end
--# expr-done 2554
   If_Result := Fld_1;
end if;



--# expr-done 2555
Scope_Result_1 := If_Result;


   --# end


   Result_Var_1 := Scope_Result_1;
else
   --# expr-start 2556 '<FieldAccess for get_generic_type at nodes.lkt:4155:29>' Fld_3 nodes.lkt:4155







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start Expr.get_generic_type
Fld_3 := Liblktlang.Implementation.Expr_P_Get_Generic_Type (Node => Ent.Node, E_Info => Ent.Info);
--# end
--# expr-done 2556
   Result_Var_1 := Fld_3;
end if;



Local_Lambda_Type := Result_Var_1; 
--# bind lambda_type Local_Lambda_Type
--# expr-start 2568 '<LogicAll at nodes.lkt:4160:9>' Logic_Boolean_Op nodes.lkt:4160
--# expr-start 2567 '<Map at nodes.lkt:4160:9>' Map_Result nodes.lkt:4160








   

   --# expr-start 2557 '<FieldAccess for params at nodes.lkt:4160:9>' Fld_4 nodes.lkt:4160







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_4 := Create_Internal_Entity_Lambda_Arg_Decl_List (Node => Ent.Node.Lambda_Expr_F_Params, Info => Ent.Info);
--# expr-done 2557









Fld_5 := Fld_4.Node;

   
      declare
         Map_Result_Vec : Logic_Equation_Vectors.Vector;
      begin
   

   

      if Fld_5 = null then
         
      Map_Result := Create_Logic_Equation_Array (0);
   
      else
         

      declare
         
         Collection : constant Bare_Lambda_Arg_Decl_List := Fld_5;
      begin
         for Untyped_Item_3 of
               Collection.Nodes (1 .. Children_Count (Collection))
         loop
                  
                  Bare_Item_3 := Untyped_Item_3; 
                  



Is_Null_2 := Bare_Item_3 = null; 
if Is_Null_2 then
   
   If_Result_3 := No_Entity_Lambda_Arg_Decl;
else
   








Fld_6 := Fld_4.Info;

As_Entity := (Info => Fld_6, Node => Bare_Item_3); 
   If_Result_3 := As_Entity;
end if;



                  Item_3 := If_Result_3; 

            
   --# scope-start


               --# bind p Item_3

            
         
         
      --# expr-start 2566 '<If at nodes.lkt:4162:13>' If_Result_2 nodes.lkt:4162



--# expr-start 2562 '<BooleanBinaryOp And at nodes.lkt:4162:16>' If_Result_1 nodes.lkt:4162



--# expr-start 2559 '<IsNull at nodes.lkt:4162:16>' Is_Null nodes.lkt:4162
--# expr-start 2558 '<FieldAccess for decl_type at nodes.lkt:4162:16>' Fld_9 nodes.lkt:4162







   if Item_3.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_9 := Create_Internal_Entity_Type_Ref (Node => Item_3.Node.Lambda_Arg_Decl_F_Decl_Type, Info => Item_3.Info);
--# expr-done 2558
Is_Null := Fld_9.Node = null; 
--# expr-done 2559
if Is_Null then
   --# expr-start 2561 '<Not at nodes.lkt:4162:40>' Not_Val nodes.lkt:4162
--# expr-start 2560 '<IsNull at nodes.lkt:4162:44>' Is_Null_1 nodes.lkt:4162

Is_Null_1 := Local_Lambda_Type.Node = null; 
--# expr-done 2560
Not_Val := not (Is_Null_1); 
--# expr-done 2561
   If_Result_1 := Not_Val;
else
   
   If_Result_1 := False;
end if;



--# expr-done 2562
if If_Result_1 then
   --# expr-start 2565 '<Bind at nodes.lkt:4163:18>' Bind_Result nodes.lkt:4163
--# expr-start 2563 '<FieldAccess for type_var at nodes.lkt:4163:18>' Fld_7 nodes.lkt:4163







   if Item_3.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_7 := Item_3.Node.Lambda_Arg_Decl_Type_Var'Unrestricted_Access;
--# expr-done 2563
Fld_7.Value := No_Entity;
Entity_Vars.Reset (Fld_7);





--# expr-start 2564 '<FieldAccess for lambda_param_get_type at nodes.lkt:4163:32>' Fld_8 nodes.lkt:4163







   if Local_Lambda_Type.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;



--# property-call-start TypeDecl.lambda_param_get_type
Fld_8 := Liblktlang.Implementation.Type_Decl_P_Lambda_Param_Get_Type (Node => Local_Lambda_Type.Node, Current_Largdecl => Item_3, E_Info => Local_Lambda_Type.Info);
--# end
--# expr-done 2564



   
      Cast_Result_1 := Create_Internal_Entity
        (Node => Fld_8.Node,
         Info => Fld_8.Info);


Bind_Result := Solver.Create_Assign (Fld_7, Cast_Result_1, Solver_Ifc.No_Converter, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4163:18") else null)); 
--# expr-done 2565
   If_Result_2 := Bind_Result;
else
   True_Rel := Solver.Create_True ((if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4164:18") else null)); 
   If_Result_2 := True_Rel;
end if;

      Inc_Ref (If_Result_2);


--# expr-done 2566
      

         declare
            Item_To_Append : constant Logic_Equation := If_Result_2;
         begin
               Inc_Ref (Item_To_Append);
            Logic_Equation_Vectors.Append (Map_Result_Vec, Item_To_Append);
         end;
   
   
   

            
   --# end
      Finalizer_Scope_734;



         end loop;
      end;
   
      end if;

   

         Map_Result := Create_Logic_Equation_Array
           (Items_Count => Natural (Logic_Equation_Vectors.Length (Map_Result_Vec)));
         for I in Map_Result.Items'Range loop
            Map_Result.Items (I) := Logic_Equation_Vectors.Get
              (Map_Result_Vec,
               I + Logic_Equation_Vectors.Index_Type'First - Map_Result.Items'First);
         end loop;
         Logic_Equation_Vectors.Destroy (Map_Result_Vec);

      end;
   



--# expr-done 2567
Logic_Boolean_Op := Solver.Create_All (Relation_Array (Map_Result.Items), (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4160:9") else null)); 
--# expr-done 2568
Let_Result := Logic_Boolean_Op; Inc_Ref (Let_Result);
--# end
--# expr-done 2569

         Property_Result := Let_Result;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_307;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_307;
                     Finalizer_Scope_734;




            raise;
      end;



   return Property_Result;
end Lambda_Expr_P_Generic_Type_Equation;
--# end

   







--# property-start LambdaExpr.xref_equation nodes.lkt:4168
pragma Warnings (Off, "is not referenced");
 function Lambda_Expr_P_Xref_Equation
  
  (Node : Bare_Lambda_Expr
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Logic_Equation
is
   Self : Bare_Lambda_Expr  := Bare_Lambda_Expr (Node);
     Ent : Internal_Entity_Lambda_Expr :=
       Internal_Entity_Lambda_Expr'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Logic_Equation;

      
            procedure Finalizer_Scope_308 with Inline_Always;
            procedure Finalizer_Scope_736 with Inline_Always;

      Local_Arg_Type_Vars : Logic_Var_Array_Access;
Var_Expr_71 : Internal_Entity_Type_Decl;
Var_Expr_72 : Internal_Entity_Type_Decl;
Fld : Internal_Entity_Lambda_Arg_Decl_List;
Fld_1 : Bare_Lambda_Arg_Decl_List;
Fld_2 : Internal_Entity_Info;
Item_0 : Internal_Entity_Lambda_Arg_Decl;
Bare_Item_0 : Bare_Lambda_Arg_Decl;
Fld_3 : Logic_Var;
As_Entity : Internal_Entity_Lambda_Arg_Decl;
Is_Null : Boolean;
If_Result : Internal_Entity_Lambda_Arg_Decl;
Map_Result : Logic_Var_Array_Access;
True_Rel : Logic_Equation;
Fld_4 : Logic_Var;
Fld_5 : Internal_Entity_Expr;
Fld_6 : Internal_Entity_Type_Decl;
Fld_7 : Internal_Entity_Lambda_Arg_Decl_List;
Fld_8 : Bare_Lambda_Arg_Decl_List;
Fld_9 : Internal_Entity_Info;
Item_1 : Internal_Entity_Lambda_Arg_Decl;
Bare_Item_1 : Bare_Lambda_Arg_Decl;
Fld_10 : Internal_Entity_Type_Decl;
As_Entity_1 : Internal_Entity_Lambda_Arg_Decl;
Is_Null_1 : Boolean;
If_Result_1 : Internal_Entity_Lambda_Arg_Decl;
Map_Result_1 : Internal_Entity_Type_Decl_Array_Access;
Fld_11 : Internal_Entity_Type_Decl;
Scope_Result : Internal_Entity_Type_Decl;
Result_Var : Internal_Entity_Type_Decl;
Cast_Result : Internal_Entity;
Bind_Result : Logic_Equation;
Fld_12 : Internal_Entity_Expr;
Fld_13 : Logic_Equation;
Fld_14 : Logic_Var;
Fld_15 : Internal_Entity_Expr;
Fld_16 : Logic_Var;
Array_Lit : Logic_Var_Array_Access;
Concat_Result : Logic_Var_Array_Access;
Logic_Vars : Logic_Var_Array_Access;
Bind_Result_1 : Logic_Equation;
And_Pred : Logic_Equation;
Fld_17 : Boolean;
If_Result_2 : Logic_Equation;
Fld_18 : Internal_Entity_Type_Ref;
Is_Null_2 : Boolean;
Not_Val : Boolean;
If_Result_3 : Logic_Equation;
True_Rel_1 : Logic_Equation;
Fld_19 : Internal_Entity_Expr;
Fld_20 : Logic_Var;
Cast_Expr : Internal_Entity_Type_Decl;
Cast_Result_1 : Internal_Entity;
Bind_Result_2 : Logic_Equation;
Fld_21 : Internal_Entity_Expr;
Fld_22 : Logic_Var;
Fld_23 : Internal_Entity_Type_Decl;
Fld_24 : Internal_Entity_Type_Decl;
Scope_Result_1 : Internal_Entity_Type_Decl;
Result_Var_1 : Internal_Entity_Type_Decl;
Cast_Result_2 : Internal_Entity;
Bind_Result_3 : Logic_Equation;
Fld_25 : Logic_Var;
Pred : Logic_Equation;
And_Pred_1 : Logic_Equation;
Or_Pred : Logic_Equation;
Fld_26 : Boolean;
If_Result_4 : Logic_Equation;
And_Pred_2 : Logic_Equation;
Let_Result : Logic_Equation;

            procedure Finalizer_Scope_308 is
            begin
                     Dec_Ref (Map_Result);
                     Dec_Ref (Local_Arg_Type_Vars);
                     Dec_Ref (True_Rel);
                     Dec_Ref (Bind_Result);
                     Dec_Ref (Fld_13);
                     Dec_Ref (Array_Lit);
                     Dec_Ref (Concat_Result);
                     Dec_Ref (Logic_Vars);
                     Dec_Ref (Bind_Result_1);
                     Dec_Ref (And_Pred);
                     Dec_Ref (If_Result_2);
                     Dec_Ref (If_Result_3);
                     Dec_Ref (True_Rel_1);
                     Dec_Ref (Bind_Result_2);
                     Dec_Ref (Bind_Result_3);
                     Dec_Ref (Pred);
                     Dec_Ref (And_Pred_1);
                     Dec_Ref (Or_Pred);
                     Dec_Ref (If_Result_4);
                     Dec_Ref (And_Pred_2);
                     Dec_Ref (Let_Result);
            end Finalizer_Scope_308;
            procedure Finalizer_Scope_736 is
            begin
                     Dec_Ref (Map_Result_1);
            end Finalizer_Scope_736;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 2610 '<Let at nodes.lkt:4169:9>' Let_Result nodes.lkt:4169
--# scope-start
--# expr-start 2572 '<Map at nodes.lkt:4169:29>' Map_Result nodes.lkt:4169








   

   --# expr-start 2570 '<FieldAccess for params at nodes.lkt:4169:29>' Fld nodes.lkt:4169







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Create_Internal_Entity_Lambda_Arg_Decl_List (Node => Ent.Node.Lambda_Expr_F_Params, Info => Ent.Info);
--# expr-done 2570









Fld_1 := Fld.Node;

   
      declare
         Map_Result_Vec : Logic_Var_Vectors.Vector;
      begin
   

   

      if Fld_1 = null then
         
      Map_Result := Create_Logic_Var_Array (0);
   
      else
         

      declare
         
         Collection : constant Bare_Lambda_Arg_Decl_List := Fld_1;
      begin
         for Untyped_Item_0 of
               Collection.Nodes (1 .. Children_Count (Collection))
         loop
                  
                  Bare_Item_0 := Untyped_Item_0; 
                  



Is_Null := Bare_Item_0 = null; 
if Is_Null then
   
   If_Result := No_Entity_Lambda_Arg_Decl;
else
   








Fld_2 := Fld.Info;

As_Entity := (Info => Fld_2, Node => Bare_Item_0); 
   If_Result := As_Entity;
end if;



                  Item_0 := If_Result; 

            
   --# scope-start


               --# bind p Item_0

            
         
         
      --# expr-start 2571 '<FieldAccess for type_var at nodes.lkt:4169:52>' Fld_3 nodes.lkt:4169







   if Item_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_3 := Item_0.Node.Lambda_Arg_Decl_Type_Var'Unrestricted_Access;
--# expr-done 2571
      

         declare
            Item_To_Append : constant Logic_Var := Fld_3;
         begin
            Logic_Var_Vectors.Append (Map_Result_Vec, Item_To_Append);
         end;
   
   
   

            
   --# end



         end loop;
      end;
   
      end if;

   

         Map_Result := Create_Logic_Var_Array
           (Items_Count => Natural (Logic_Var_Vectors.Length (Map_Result_Vec)));
         for I in Map_Result.Items'Range loop
            Map_Result.Items (I) := Logic_Var_Vectors.Get
              (Map_Result_Vec,
               I + Logic_Var_Vectors.Index_Type'First - Map_Result.Items'First);
         end loop;
         Logic_Var_Vectors.Destroy (Map_Result_Vec);

      end;
   



--# expr-done 2572
Local_Arg_Type_Vars := Map_Result; Inc_Ref (Local_Arg_Type_Vars);
--# bind arg_type_vars Local_Arg_Type_Vars
--# expr-start 2609 '<LogicBinaryOp And at nodes.lkt:4171:9>' And_Pred_2 nodes.lkt:4171
--# expr-start 2594 '<If at nodes.lkt:4172:13>' If_Result_3 nodes.lkt:4172



--# expr-start 2575 '<Not at nodes.lkt:4172:16>' Not_Val nodes.lkt:4172
--# expr-start 2574 '<IsNull at nodes.lkt:4172:20>' Is_Null_2 nodes.lkt:4172
--# expr-start 2573 '<FieldAccess for return_type at nodes.lkt:4172:20>' Fld_18 nodes.lkt:4172







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_18 := Create_Internal_Entity_Type_Ref (Node => Ent.Node.Lambda_Expr_F_Return_Type, Info => Ent.Info);
--# expr-done 2573
Is_Null_2 := Fld_18.Node = null; 
--# expr-done 2574
Not_Val := not (Is_Null_2); 
--# expr-done 2575
if Not_Val then
   True_Rel := Solver.Create_True ((if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4176:17") else null)); 
   If_Result_3 := True_Rel;
else
   --# expr-start 2593 '<If at nodes.lkt:4172:13>' If_Result_2 nodes.lkt:4172



--# expr-start 2576 '<FieldAccess for has_context_free_type at nodes.lkt:4180:18>' Fld_17 nodes.lkt:4180







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]Expr.has_context_free_type'
Fld_17 := Liblktlang.Implementation.Dispatcher_Expr_P_Has_Context_Free_Type (Node => Ent.Node, E_Info => Ent.Info);
--# end
--# expr-done 2576
if Fld_17 then
   --# expr-start 2584 '<Bind at nodes.lkt:4182:17>' Bind_Result nodes.lkt:4182
--# expr-start 2577 '<FieldAccess for actual_type_var at nodes.lkt:4182:17>' Fld_4 nodes.lkt:4182







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_4 := Ent.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 2577
Fld_4.Value := No_Entity;
Entity_Vars.Reset (Fld_4);








--# expr-start 2579 '<FieldAccess for get_type at nodes.lkt:4183:20>' Fld_6 nodes.lkt:4183



--# expr-start 2578 '<FieldAccess for body at nodes.lkt:4183:20>' Fld_5 nodes.lkt:4183







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_5 := Create_Internal_Entity_Expr (Node => Ent.Node.Lambda_Expr_F_Body, Info => Ent.Info);
--# expr-done 2578



   if Fld_5.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start Expr.get_type
Fld_6 := Liblktlang.Implementation.Expr_P_Get_Type (Node => Fld_5.Node, E_Info => Fld_5.Info);
--# end
--# expr-done 2579
Var_Expr_71 := Fld_6;





if Var_Expr_71 /= No_Entity_Type_Decl then
   



   --# scope-start


   

--# expr-start 2583 '<FieldAccess for create_function_type at nodes.lkt:4183:20>' Fld_11 nodes.lkt:4183







   if Var_Expr_71.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# expr-start 2582 '<Map at nodes.lkt:4184:21>' Map_Result_1 nodes.lkt:4184








   

   --# expr-start 2580 '<FieldAccess for params at nodes.lkt:4184:21>' Fld_7 nodes.lkt:4184







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_7 := Create_Internal_Entity_Lambda_Arg_Decl_List (Node => Ent.Node.Lambda_Expr_F_Params, Info => Ent.Info);
--# expr-done 2580









Fld_8 := Fld_7.Node;

   
      declare
         Map_Result_1_Vec : Internal_Entity_Type_Decl_Vectors.Vector;
      begin
   

   

      if Fld_8 = null then
         
      Map_Result_1 := Create_Internal_Entity_Type_Decl_Array (0);
   
      else
         

      declare
         
         Collection : constant Bare_Lambda_Arg_Decl_List := Fld_8;
      begin
         for Untyped_Item_1 of
               Collection.Nodes (1 .. Children_Count (Collection))
         loop
                  
                  Bare_Item_1 := Untyped_Item_1; 
                  



Is_Null_1 := Bare_Item_1 = null; 
if Is_Null_1 then
   
   If_Result_1 := No_Entity_Lambda_Arg_Decl;
else
   








Fld_9 := Fld_7.Info;

As_Entity_1 := (Info => Fld_9, Node => Bare_Item_1); 
   If_Result_1 := As_Entity_1;
end if;



                  Item_1 := If_Result_1; 

            
   --# scope-start


               --# bind a Item_1

            
         
         
      --# expr-start 2581 '<FieldAccess for get_type at nodes.lkt:4184:44>' Fld_10 nodes.lkt:4184







   if Item_1.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start Decl.get_type
Fld_10 := Liblktlang.Implementation.Decl_P_Get_Type (Node => Item_1.Node, E_Info => Item_1.Info);
--# end
--# expr-done 2581
      

         declare
            Item_To_Append : constant Internal_Entity_Type_Decl := Fld_10;
         begin
            Internal_Entity_Type_Decl_Vectors.Append (Map_Result_1_Vec, Item_To_Append);
         end;
   
   
   

            
   --# end



         end loop;
      end;
   
      end if;

   

         Map_Result_1 := Create_Internal_Entity_Type_Decl_Array
           (Items_Count => Natural (Internal_Entity_Type_Decl_Vectors.Length (Map_Result_1_Vec)));
         for I in Map_Result_1.Items'Range loop
            Map_Result_1.Items (I) := Internal_Entity_Type_Decl_Vectors.Get
              (Map_Result_1_Vec,
               I + Internal_Entity_Type_Decl_Vectors.Index_Type'First - Map_Result_1.Items'First);
         end loop;
         Internal_Entity_Type_Decl_Vectors.Destroy (Map_Result_1_Vec);

      end;
   



--# expr-done 2582
--# property-call-start TypeDecl.create_function_type
Fld_11 := Liblktlang.Implementation.Type_Decl_P_Create_Function_Type (Node => Var_Expr_71.Node, Args => Map_Result_1, E_Info => Var_Expr_71.Info);
--# end
--# expr-done 2583
Scope_Result := Fld_11;


   --# end
      Finalizer_Scope_736;


   Result_Var := Scope_Result;
else
   
   Result_Var := No_Entity_Type_Decl;
end if;






   
      Cast_Result := Create_Internal_Entity
        (Node => Result_Var.Node,
         Info => Result_Var.Info);


Bind_Result := Solver.Create_Assign (Fld_4, Cast_Result, Solver_Ifc.No_Converter, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4182:17") else null)); 
--# expr-done 2584
   If_Result_2 := Bind_Result;
else
   --# expr-start 2592 '<LogicBinaryOp And at nodes.lkt:4187:17>' And_Pred nodes.lkt:4187
--# expr-start 2586 '<FieldAccess for xref_equation at nodes.lkt:4187:17>' Fld_13 nodes.lkt:4187



--# expr-start 2585 '<FieldAccess for body at nodes.lkt:4187:17>' Fld_12 nodes.lkt:4187







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_12 := Create_Internal_Entity_Expr (Node => Ent.Node.Lambda_Expr_F_Body, Info => Ent.Info);
--# expr-done 2585



   if Fld_12.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]LktNode.xref_equation'
Fld_13 := Liblktlang.Implementation.Dispatcher_Lkt_Node_P_Xref_Equation (Node => Fld_12.Node, E_Info => Fld_12.Info);
--# end
--# expr-done 2586
--# expr-start 2589 '<ArrayLiteral at nodes.lkt:4190:21>' Array_Lit nodes.lkt:4190
--# expr-start 2588 '<FieldAccess for actual_type_var at nodes.lkt:4190:22>' Fld_16 nodes.lkt:4190



--# expr-start 2587 '<FieldAccess for body at nodes.lkt:4190:22>' Fld_15 nodes.lkt:4190







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_15 := Create_Internal_Entity_Expr (Node => Ent.Node.Lambda_Expr_F_Body, Info => Ent.Info);
--# expr-done 2587



   if Fld_15.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_16 := Fld_15.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 2588
Array_Lit := Create_Logic_Var_Array (Internal_Logic_Var_Array'(1 => Fld_16)); 
--# expr-done 2589

Concat_Result := Concat (Array_Lit, Local_Arg_Type_Vars); 
for Var of Concat_Result.Items loop
   Var.Value := No_Entity;
   Entity_Vars.Reset (Var);
end loop;
Logic_Vars := Concat_Result; Inc_Ref (Logic_Vars);
--# expr-start 2591 '<NPropagate at nodes.lkt:4188:22>' Bind_Result_1 nodes.lkt:4188
--# expr-start 2590 '<FieldAccess for actual_type_var at nodes.lkt:4188:22>' Fld_14 nodes.lkt:4188







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_14 := Ent.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 2590
Fld_14.Value := No_Entity;
Entity_Vars.Reset (Fld_14);


Bind_Result_1 := Solver.Create_N_Propagate (Fld_14, Create_Type_Decl_P_Create_Function_Type_0_Functor (Logic_Vars.N), Entity_Vars.Logic_Var_Array (Logic_Vars.Items), Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4188:22") else null)); 
--# expr-done 2591
And_Pred := Create_And (Fld_13, Bind_Result_1, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4187:17") else null)); 
--# expr-done 2592
   If_Result_2 := And_Pred;
end if;

      Inc_Ref (If_Result_2);


--# expr-done 2593
   If_Result_3 := If_Result_2;
end if;

      Inc_Ref (If_Result_3);


--# expr-done 2594
--# expr-start 2608 '<If at nodes.lkt:4194:13>' If_Result_4 nodes.lkt:4194



--# expr-start 2595 '<FieldAccess for has_context_free_type at nodes.lkt:4194:16>' Fld_26 nodes.lkt:4194







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]Expr.has_context_free_type'
Fld_26 := Liblktlang.Implementation.Dispatcher_Expr_P_Has_Context_Free_Type (Node => Ent.Node, E_Info => Ent.Info);
--# end
--# expr-done 2595
if Fld_26 then
   True_Rel_1 := Solver.Create_True ((if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4194:50") else null)); 
   If_Result_4 := True_Rel_1;
else
   --# expr-start 2607 '<LogicBinaryOp Or at nodes.lkt:4203:17>' Or_Pred nodes.lkt:4203
--# expr-start 2598 '<Bind at nodes.lkt:4203:17>' Bind_Result_2 nodes.lkt:4203
--# expr-start 2597 '<FieldAccess for expected_type_var at nodes.lkt:4203:17>' Fld_20 nodes.lkt:4203



--# expr-start 2596 '<FieldAccess for body at nodes.lkt:4203:17>' Fld_19 nodes.lkt:4203







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_19 := Create_Internal_Entity_Expr (Node => Ent.Node.Lambda_Expr_F_Body, Info => Ent.Info);
--# expr-done 2596



   if Fld_19.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_20 := Fld_19.Node.Expr_Expected_Type_Var'Unrestricted_Access;
--# expr-done 2597
Fld_20.Value := No_Entity;
Entity_Vars.Reset (Fld_20);






Cast_Expr := No_Entity_Type_Decl; 



   
      Cast_Result_1 := Create_Internal_Entity
        (Node => Cast_Expr.Node,
         Info => Cast_Expr.Info);


Bind_Result_2 := Solver.Create_Assign (Fld_20, Cast_Result_1, Solver_Ifc.No_Converter, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4203:17") else null)); 
--# expr-done 2598
--# expr-start 2606 '<LogicBinaryOp And at nodes.lkt:4205:21>' And_Pred_1 nodes.lkt:4205
--# expr-start 2603 '<Bind at nodes.lkt:4205:21>' Bind_Result_3 nodes.lkt:4205
--# expr-start 2600 '<FieldAccess for expected_type_var at nodes.lkt:4205:21>' Fld_22 nodes.lkt:4205



--# expr-start 2599 '<FieldAccess for body at nodes.lkt:4205:21>' Fld_21 nodes.lkt:4205







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_21 := Create_Internal_Entity_Expr (Node => Ent.Node.Lambda_Expr_F_Body, Info => Ent.Info);
--# expr-done 2599



   if Fld_21.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_22 := Fld_21.Node.Expr_Expected_Type_Var'Unrestricted_Access;
--# expr-done 2600
Fld_22.Value := No_Entity;
Entity_Vars.Reset (Fld_22);








--# expr-start 2601 '<FieldAccess for get_expected_type at nodes.lkt:4206:24>' Fld_23 nodes.lkt:4206







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start Expr.get_expected_type
Fld_23 := Liblktlang.Implementation.Expr_P_Get_Expected_Type (Node => Ent.Node, E_Info => Ent.Info);
--# end
--# expr-done 2601
Var_Expr_72 := Fld_23;





if Var_Expr_72 /= No_Entity_Type_Decl then
   



   --# scope-start


   

--# expr-start 2602 '<FieldAccess for get_return_type at nodes.lkt:4206:24>' Fld_24 nodes.lkt:4206







   if Var_Expr_72.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start TypeDecl.get_return_type
Fld_24 := Liblktlang.Implementation.Type_Decl_P_Get_Return_Type (Node => Var_Expr_72.Node, E_Info => Var_Expr_72.Info);
--# end
--# expr-done 2602
Scope_Result_1 := Fld_24;


   --# end


   Result_Var_1 := Scope_Result_1;
else
   
   Result_Var_1 := No_Entity_Type_Decl;
end if;






   
      Cast_Result_2 := Create_Internal_Entity
        (Node => Result_Var_1.Node,
         Info => Result_Var_1.Info);


Bind_Result_3 := Solver.Create_Assign (Fld_22, Cast_Result_2, Solver_Ifc.No_Converter, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4205:21") else null)); 
--# expr-done 2603
--# expr-start 2605 '<Predicate on Decl.return_type_is_instantiated at nodes.lkt:4207:26>' Pred nodes.lkt:4207
--# expr-start 2604 '<FieldAccess for generic_func_type_var at nodes.lkt:4208:25>' Fld_25 nodes.lkt:4208







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_25 := Ent.Node.Expr_Generic_Func_Type_Var'Unrestricted_Access;
--# expr-done 2604
Fld_25.Value := No_Entity;
Entity_Vars.Reset (Fld_25);

Pred := Solver.Create_Predicate (Fld_25, Create_Decl_P_Return_Type_Is_Instantiated_0_Predicate); 
--# expr-done 2605
And_Pred_1 := Create_And (Bind_Result_3, Pred, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4205:21") else null)); 
--# expr-done 2606
Or_Pred := Create_Or (Bind_Result_2, And_Pred_1, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4203:17") else null)); 
--# expr-done 2607
   If_Result_4 := Or_Pred;
end if;

      Inc_Ref (If_Result_4);


--# expr-done 2608
And_Pred_2 := Create_And (If_Result_3, If_Result_4, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4171:9") else null)); 
--# expr-done 2609
Let_Result := And_Pred_2; Inc_Ref (Let_Result);
--# end
--# expr-done 2610

         Property_Result := Let_Result;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_308;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_308;
                     Finalizer_Scope_736;




            raise;
      end;



   return Property_Result;
end Lambda_Expr_P_Xref_Equation;
--# end

   







--# property-start LambdaExpr._env_trans_parent_22 '<builtin>:0'
pragma Warnings (Off, "is not referenced");
 function Env_Trans_Parent_22
  
  (Node : Bare_Lambda_Expr
  )

   return Boolean
is
   Self : Bare_Lambda_Expr  := Bare_Lambda_Expr (Node);
      --# bind self Self

   


   Property_Result : Boolean;

      

      



begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         

         Property_Result := False;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Env_Trans_Parent_22;
--# end



   


      

   --
   --  Primitives for Bare_Lit
   --

   



      
      procedure Initialize_Fields_For_Lit
        (Self : Bare_Lit
        ) is
      begin
            Initialize_Fields_For_Expr
              (Self);

         

      end Initialize_Fields_For_Lit;




   


      

   --
   --  Primitives for Bare_Big_Num_Lit
   --

   



      
      procedure Initialize_Fields_For_Big_Num_Lit
        (Self : Bare_Big_Num_Lit
        ) is
      begin
            Initialize_Fields_For_Lit
              (Self);

         

      end Initialize_Fields_For_Big_Num_Lit;


   







--# property-start BigNumLit.xref_equation nodes.lkt:4227
pragma Warnings (Off, "is not referenced");
 function Big_Num_Lit_P_Xref_Equation
  
  (Node : Bare_Big_Num_Lit
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Logic_Equation
is
   Self : Bare_Big_Num_Lit  := Bare_Big_Num_Lit (Node);
     Ent : Internal_Entity_Big_Num_Lit :=
       Internal_Entity_Big_Num_Lit'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Logic_Equation;

      
            procedure Finalizer_Scope_309 with Inline_Always;

      Fld : Logic_Var;
Fld_1 : Internal_Entity_Named_Type_Decl;
Cast_Result : Internal_Entity;
Bind_Result : Logic_Equation;

            procedure Finalizer_Scope_309 is
            begin
                     Dec_Ref (Bind_Result);
            end Finalizer_Scope_309;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 2613 '<Bind at nodes.lkt:4227:37>' Bind_Result nodes.lkt:4227
--# expr-start 2611 '<FieldAccess for actual_type_var at nodes.lkt:4227:37>' Fld nodes.lkt:4227







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Ent.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 2611
Fld.Value := No_Entity;
Entity_Vars.Reset (Fld);





--# expr-start 2612 '<FieldAccess for bigint_type at nodes.lkt:4227:61>' Fld_1 nodes.lkt:4227







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start LktNode.bigint_type
Fld_1 := Liblktlang.Implementation.Lkt_Node_P_Bigint_Type (Node => Self);
--# end
--# expr-done 2612



   
      Cast_Result := Create_Internal_Entity
        (Node => Fld_1.Node,
         Info => Fld_1.Info);


Bind_Result := Solver.Create_Assign (Fld, Cast_Result, Solver_Ifc.No_Converter, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4227:37") else null)); 
--# expr-done 2613

         Property_Result := Bind_Result;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_309;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_309;




            raise;
      end;



   return Property_Result;
end Big_Num_Lit_P_Xref_Equation;
--# end



   


      

   --
   --  Primitives for Bare_Char_Lit
   --

   



      
      procedure Initialize_Fields_For_Char_Lit
        (Self : Bare_Char_Lit
        ) is
      begin
            Initialize_Fields_For_Lit
              (Self);

         

      end Initialize_Fields_For_Char_Lit;


   







--# property-start CharLit.xref_equation nodes.lkt:4237
pragma Warnings (Off, "is not referenced");
 function Char_Lit_P_Xref_Equation
  
  (Node : Bare_Char_Lit
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Logic_Equation
is
   Self : Bare_Char_Lit  := Bare_Char_Lit (Node);
     Ent : Internal_Entity_Char_Lit :=
       Internal_Entity_Char_Lit'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Logic_Equation;

      
            procedure Finalizer_Scope_311 with Inline_Always;

      Fld : Logic_Var;
Fld_1 : Internal_Entity_Named_Type_Decl;
Cast_Result : Internal_Entity;
Bind_Result : Logic_Equation;

            procedure Finalizer_Scope_311 is
            begin
                     Dec_Ref (Bind_Result);
            end Finalizer_Scope_311;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 2616 '<Bind at nodes.lkt:4237:37>' Bind_Result nodes.lkt:4237
--# expr-start 2614 '<FieldAccess for actual_type_var at nodes.lkt:4237:37>' Fld nodes.lkt:4237







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Ent.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 2614
Fld.Value := No_Entity;
Entity_Vars.Reset (Fld);





--# expr-start 2615 '<FieldAccess for char_type at nodes.lkt:4237:61>' Fld_1 nodes.lkt:4237







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start LktNode.char_type
Fld_1 := Liblktlang.Implementation.Lkt_Node_P_Char_Type (Node => Self);
--# end
--# expr-done 2615



   
      Cast_Result := Create_Internal_Entity
        (Node => Fld_1.Node,
         Info => Fld_1.Info);


Bind_Result := Solver.Create_Assign (Fld, Cast_Result, Solver_Ifc.No_Converter, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4237:37") else null)); 
--# expr-done 2616

         Property_Result := Bind_Result;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_311;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_311;




            raise;
      end;



   return Property_Result;
end Char_Lit_P_Xref_Equation;
--# end



   


      

   --
   --  Primitives for Bare_Null_Lit
   --

   



      
      procedure Initialize_Fields_For_Null_Lit
        (Self : Bare_Null_Lit
         ; Null_Lit_F_Dest_Type : Bare_Type_Ref
        ) is
      begin
            Initialize_Fields_For_Lit
              (Self);

            Self.Null_Lit_F_Dest_Type := Null_Lit_F_Dest_Type;
         

      end Initialize_Fields_For_Null_Lit;

      
   function Null_Lit_F_Dest_Type
     (Node : Bare_Null_Lit) return Bare_Type_Ref
   is
      

   begin
         
         return Node.Null_Lit_F_Dest_Type;
      
   end;


   







--# property-start NullLit.xref_equation nodes.lkt:4246
pragma Warnings (Off, "is not referenced");
 function Null_Lit_P_Xref_Equation
  
  (Node : Bare_Null_Lit
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Logic_Equation
is
   Self : Bare_Null_Lit  := Bare_Null_Lit (Node);
     Ent : Internal_Entity_Null_Lit :=
       Internal_Entity_Null_Lit'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Logic_Equation;

      
            procedure Finalizer_Scope_312 with Inline_Always;

      Fld : Logic_Var;
Fld_1 : Internal_Entity_Type_Decl;
Cast_Result : Internal_Entity;
Bind_Result : Logic_Equation;
Fld_2 : Logic_Var;
Fld_3 : Logic_Var;
Bind_Result_1 : Logic_Equation;
Fld_4 : Boolean;
If_Result : Logic_Equation;
Fld_5 : Logic_Var;
Cast_Expr : Internal_Entity_Type_Decl;
Cast_Result_1 : Internal_Entity;
Bind_Result_2 : Logic_Equation;
Or_Pred : Logic_Equation;
Cast_Expr_1 : Bare_Null_Lit;
Cast_Result_2 : Bare_Lkt_Node;
Bound_Error_Location : Bare_Lkt_Node;
Fld_6 : Logic_Var;
Pred : Logic_Equation;
Dyn_Var_Bind_Result : Logic_Equation;
And_Pred : Logic_Equation;
Fld_7 : Logic_Var;
Fld_8 : Internal_Entity_Type_Ref;
Fld_9 : Internal_Entity_Type_Decl;
Cast_Result_3 : Internal_Entity;
Bind_Result_3 : Logic_Equation;
Fld_10 : Internal_Entity_Type_Ref;
Is_Null : Boolean;
If_Result_1 : Logic_Equation;

            procedure Finalizer_Scope_312 is
            begin
                     Dec_Ref (Bind_Result);
                     Dec_Ref (Bind_Result_1);
                     Dec_Ref (If_Result);
                     Dec_Ref (Bind_Result_2);
                     Dec_Ref (Or_Pred);
                     Dec_Ref (Pred);
                     Dec_Ref (Dyn_Var_Bind_Result);
                     Dec_Ref (And_Pred);
                     Dec_Ref (Bind_Result_3);
                     Dec_Ref (If_Result_1);
            end Finalizer_Scope_312;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 2638 '<If at nodes.lkt:4247:9>' If_Result_1 nodes.lkt:4247



--# expr-start 2618 '<IsNull at nodes.lkt:4247:12>' Is_Null nodes.lkt:4247
--# expr-start 2617 '<FieldAccess for dest_type at nodes.lkt:4247:12>' Fld_10 nodes.lkt:4247







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_10 := Create_Internal_Entity_Type_Ref (Node => Ent.Node.Null_Lit_F_Dest_Type, Info => Ent.Info);
--# expr-done 2617
Is_Null := Fld_10.Node = null; 
--# expr-done 2618
if Is_Null then
   --# expr-start 2633 '<LogicBinaryOp And at nodes.lkt:4249:13>' And_Pred nodes.lkt:4249
--# expr-start 2629 '<LogicBinaryOp Or at nodes.lkt:4250:17>' Or_Pred nodes.lkt:4250
--# expr-start 2626 '<If at nodes.lkt:4251:21>' If_Result nodes.lkt:4251



--# expr-start 2619 '<FieldAccess for xref_entry_point at nodes.lkt:4251:24>' Fld_4 nodes.lkt:4251







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]LktNode.xref_entry_point'
Fld_4 := Liblktlang.Implementation.Dispatcher_Lkt_Node_P_Xref_Entry_Point (Node => Ent.Node, E_Info => Ent.Info);
--# end
--# expr-done 2619
if Fld_4 then
   --# expr-start 2622 '<Bind at nodes.lkt:4252:26>' Bind_Result nodes.lkt:4252
--# expr-start 2620 '<FieldAccess for actual_type_var at nodes.lkt:4252:26>' Fld nodes.lkt:4252







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Ent.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 2620
Fld.Value := No_Entity;
Entity_Vars.Reset (Fld);





--# expr-start 2621 '<FieldAccess for get_expected_type at nodes.lkt:4252:50>' Fld_1 nodes.lkt:4252







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start Expr.get_expected_type
Fld_1 := Liblktlang.Implementation.Expr_P_Get_Expected_Type (Node => Ent.Node, E_Info => Ent.Info);
--# end
--# expr-done 2621



   
      Cast_Result := Create_Internal_Entity
        (Node => Fld_1.Node,
         Info => Fld_1.Info);


Bind_Result := Solver.Create_Assign (Fld, Cast_Result, Solver_Ifc.No_Converter, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4252:26") else null)); 
--# expr-done 2622
   If_Result := Bind_Result;
else
   --# expr-start 2625 '<Bind at nodes.lkt:4253:26>' Bind_Result_1 nodes.lkt:4253
--# expr-start 2623 '<FieldAccess for actual_type_var at nodes.lkt:4253:26>' Fld_2 nodes.lkt:4253







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_2 := Ent.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 2623
Fld_2.Value := No_Entity;
Entity_Vars.Reset (Fld_2);
--# expr-start 2624 '<FieldAccess for expected_type_var at nodes.lkt:4253:51>' Fld_3 nodes.lkt:4253







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_3 := Ent.Node.Expr_Expected_Type_Var'Unrestricted_Access;
--# expr-done 2624
Fld_3.Value := No_Entity;
Entity_Vars.Reset (Fld_3);
Bind_Result_1 := Solver.Create_Unify (Fld_2, Fld_3, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4253:26") else null)); 
--# expr-done 2625
   If_Result := Bind_Result_1;
end if;

      Inc_Ref (If_Result);


--# expr-done 2626
--# expr-start 2628 '<Bind at nodes.lkt:4262:21>' Bind_Result_2 nodes.lkt:4262
--# expr-start 2627 '<FieldAccess for actual_type_var at nodes.lkt:4262:21>' Fld_5 nodes.lkt:4262







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_5 := Ent.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 2627
Fld_5.Value := No_Entity;
Entity_Vars.Reset (Fld_5);






Cast_Expr := No_Entity_Type_Decl; 



   
      Cast_Result_1 := Create_Internal_Entity
        (Node => Cast_Expr.Node,
         Info => Cast_Expr.Info);


Bind_Result_2 := Solver.Create_Assign (Fld_5, Cast_Result_1, Solver_Ifc.No_Converter, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4262:21") else null)); 
--# expr-done 2628
Or_Pred := Create_Or (If_Result, Bind_Result_2, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4250:17") else null)); 
--# expr-done 2629
--# expr-start 2632 '<bind at nodes.lkt:4266:17>' Dyn_Var_Bind_Result nodes.lkt:4266






Cast_Expr_1 := Self; 



   
      Cast_Result_2 := Cast_Expr_1;


Bound_Error_Location := Cast_Result_2; 
--# expr-start 2631 '<Predicate on TypeDecl.could_determine_type at nodes.lkt:4267:17>' Pred nodes.lkt:4267
--# expr-start 2630 '<FieldAccess for actual_type_var at nodes.lkt:4267:48>' Fld_6 nodes.lkt:4267







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_6 := Ent.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 2630
Fld_6.Value := No_Entity;
Entity_Vars.Reset (Fld_6);

Pred := Solver.Create_Predicate (Fld_6, Create_Type_Decl_P_Could_Determine_Type_0_Predicate (Bound_Error_Location)); 
--# expr-done 2631
Dyn_Var_Bind_Result := Pred; Inc_Ref (Dyn_Var_Bind_Result);
--# expr-done 2632
And_Pred := Create_And (Or_Pred, Dyn_Var_Bind_Result, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4249:13") else null)); 
--# expr-done 2633
   If_Result_1 := And_Pred;
else
   --# expr-start 2637 '<Bind at nodes.lkt:4269:14>' Bind_Result_3 nodes.lkt:4269
--# expr-start 2634 '<FieldAccess for actual_type_var at nodes.lkt:4269:14>' Fld_7 nodes.lkt:4269







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_7 := Ent.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 2634
Fld_7.Value := No_Entity;
Entity_Vars.Reset (Fld_7);





--# expr-start 2636 '<FieldAccess for referenced_decl at nodes.lkt:4269:38>' Fld_9 nodes.lkt:4269



--# expr-start 2635 '<FieldAccess for dest_type at nodes.lkt:4269:38>' Fld_8 nodes.lkt:4269







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_8 := Create_Internal_Entity_Type_Ref (Node => Ent.Node.Null_Lit_F_Dest_Type, Info => Ent.Info);
--# expr-done 2635



   if Fld_8.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start TypeRef.referenced_decl
Fld_9 := Liblktlang.Implementation.Type_Ref_P_Referenced_Decl (Node => Fld_8.Node, E_Info => Fld_8.Info);
--# end
--# expr-done 2636



   
      Cast_Result_3 := Create_Internal_Entity
        (Node => Fld_9.Node,
         Info => Fld_9.Info);


Bind_Result_3 := Solver.Create_Assign (Fld_7, Cast_Result_3, Solver_Ifc.No_Converter, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4269:14") else null)); 
--# expr-done 2637
   If_Result_1 := Bind_Result_3;
end if;

      Inc_Ref (If_Result_1);


--# expr-done 2638

         Property_Result := If_Result_1;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_312;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_312;




            raise;
      end;



   return Property_Result;
end Null_Lit_P_Xref_Equation;
--# end

   







--# property-start NullLit.has_context_free_type nodes.lkt:4271
pragma Warnings (Off, "is not referenced");
 function Null_Lit_P_Has_Context_Free_Type
  
  (Node : Bare_Null_Lit
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Boolean
is
   Self : Bare_Null_Lit  := Bare_Null_Lit (Node);
     Ent : Internal_Entity_Null_Lit :=
       Internal_Entity_Null_Lit'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Boolean;

      

      Fld : Internal_Entity_Type_Ref;
Is_Null : Boolean;
Not_Val : Boolean;



begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         --# expr-start 2641 '<Not at nodes.lkt:4271:41>' Not_Val nodes.lkt:4271
--# expr-start 2640 '<IsNull at nodes.lkt:4271:45>' Is_Null nodes.lkt:4271
--# expr-start 2639 '<FieldAccess for dest_type at nodes.lkt:4271:45>' Fld nodes.lkt:4271







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Create_Internal_Entity_Type_Ref (Node => Ent.Node.Null_Lit_F_Dest_Type, Info => Ent.Info);
--# expr-done 2639
Is_Null := Fld.Node = null; 
--# expr-done 2640
Not_Val := not (Is_Null); 
--# expr-done 2641

         Property_Result := Not_Val;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Null_Lit_P_Has_Context_Free_Type;
--# end



   


      

   --
   --  Primitives for Bare_Num_Lit
   --

   



      
      procedure Initialize_Fields_For_Num_Lit
        (Self : Bare_Num_Lit
        ) is
      begin
            Initialize_Fields_For_Lit
              (Self);

         

      end Initialize_Fields_For_Num_Lit;


   







--# property-start NumLit.xref_equation nodes.lkt:4276
pragma Warnings (Off, "is not referenced");
 function Num_Lit_P_Xref_Equation
  
  (Node : Bare_Num_Lit
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Logic_Equation
is
   Self : Bare_Num_Lit  := Bare_Num_Lit (Node);
     Ent : Internal_Entity_Num_Lit :=
       Internal_Entity_Num_Lit'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Logic_Equation;

      
            procedure Finalizer_Scope_314 with Inline_Always;

      Fld : Logic_Var;
Fld_1 : Internal_Entity_Named_Type_Decl;
Cast_Result : Internal_Entity;
Bind_Result : Logic_Equation;

            procedure Finalizer_Scope_314 is
            begin
                     Dec_Ref (Bind_Result);
            end Finalizer_Scope_314;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 2644 '<Bind at nodes.lkt:4276:37>' Bind_Result nodes.lkt:4276
--# expr-start 2642 '<FieldAccess for actual_type_var at nodes.lkt:4276:37>' Fld nodes.lkt:4276







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Ent.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 2642
Fld.Value := No_Entity;
Entity_Vars.Reset (Fld);





--# expr-start 2643 '<FieldAccess for int_type at nodes.lkt:4276:61>' Fld_1 nodes.lkt:4276







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start LktNode.int_type
Fld_1 := Liblktlang.Implementation.Lkt_Node_P_Int_Type (Node => Self);
--# end
--# expr-done 2643



   
      Cast_Result := Create_Internal_Entity
        (Node => Fld_1.Node,
         Info => Fld_1.Info);


Bind_Result := Solver.Create_Assign (Fld, Cast_Result, Solver_Ifc.No_Converter, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4276:37") else null)); 
--# expr-done 2644

         Property_Result := Bind_Result;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_314;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_314;




            raise;
      end;



   return Property_Result;
end Num_Lit_P_Xref_Equation;
--# end



   


      

   --
   --  Primitives for Bare_String_Lit
   --

   



      
      procedure Initialize_Fields_For_String_Lit
        (Self : Bare_String_Lit
        ) is
      begin
            Initialize_Fields_For_Lit
              (Self);

         

      end Initialize_Fields_For_String_Lit;


   







--# property-start '[dispatcher]StringLit.denoted_value' dispatcher
pragma Warnings (Off, "is not referenced");
 function Dispatcher_String_Lit_P_Denoted_Value
  
  (Node : Bare_String_Lit
  )

   return Internal_Decoded_String_Value
is
   Self : Bare_String_Lit  := Bare_String_Lit (Node);
      --# bind self Self

   


   Property_Result : Internal_Decoded_String_Value;



begin
   --# property-body-start

   pragma Assert (Self = Node);





      if Self = null then
         Raise_Property_Exception
           (Self, Property_Error'Identity, "dispatching on null node");
      end if;

      case Lkt_String_Lit (Self.Kind) is
               when Lkt_Block_String_Lit =>
                  --# property-call-start BlockStringLit.denoted_value
                  Property_Result := Block_String_Lit_P_Denoted_Value
                    (Self
                    );
                  --# end
               when Lkt_Single_Line_String_Lit .. Lkt_Pattern_Single_Line_String_Lit =>
                  --# property-call-start SingleLineStringLit.denoted_value
                  Property_Result := Single_Line_String_Lit_P_Denoted_Value
                    (Self
                    );
                  --# end
      end case;




   return Property_Result;
end Dispatcher_String_Lit_P_Denoted_Value;
--# end

   







--# property-start '[dispatcher]StringLit.is_prefixed_string' dispatcher
pragma Warnings (Off, "is not referenced");
 function Dispatcher_String_Lit_P_Is_Prefixed_String
  
  (Node : Bare_String_Lit
  )

   return Boolean
is
   Self : Bare_String_Lit  := Bare_String_Lit (Node);
      --# bind self Self

   


   Property_Result : Boolean;



begin
   --# property-body-start

   pragma Assert (Self = Node);





      if Self = null then
         Raise_Property_Exception
           (Self, Property_Error'Identity, "dispatching on null node");
      end if;

      case Lkt_String_Lit (Self.Kind) is
               when Lkt_Block_String_Lit =>
                  --# property-call-start BlockStringLit.is_prefixed_string
                  Property_Result := Block_String_Lit_P_Is_Prefixed_String
                    (Self
                    );
                  --# end
               when Lkt_Single_Line_String_Lit .. Lkt_Pattern_Single_Line_String_Lit =>
                  --# property-call-start SingleLineStringLit.is_prefixed_string
                  Property_Result := Single_Line_String_Lit_P_Is_Prefixed_String
                    (Self
                    );
                  --# end
      end case;




   return Property_Result;
end Dispatcher_String_Lit_P_Is_Prefixed_String;
--# end

   







--# property-start '[dispatcher]StringLit.prefix' dispatcher
pragma Warnings (Off, "is not referenced");
 function Dispatcher_String_Lit_P_Prefix
  
  (Node : Bare_String_Lit
  )

   return Character_Type
is
   Self : Bare_String_Lit  := Bare_String_Lit (Node);
      --# bind self Self

   


   Property_Result : Character_Type;



begin
   --# property-body-start

   pragma Assert (Self = Node);





      if Self = null then
         Raise_Property_Exception
           (Self, Property_Error'Identity, "dispatching on null node");
      end if;

      case Lkt_String_Lit (Self.Kind) is
               when Lkt_Block_String_Lit =>
                  --# property-call-start BlockStringLit.prefix
                  Property_Result := Block_String_Lit_P_Prefix
                    (Self
                    );
                  --# end
               when Lkt_Single_Line_String_Lit .. Lkt_Pattern_Single_Line_String_Lit =>
                  --# property-call-start SingleLineStringLit.prefix
                  Property_Result := Single_Line_String_Lit_P_Prefix
                    (Self
                    );
                  --# end
      end case;




   return Property_Result;
end Dispatcher_String_Lit_P_Prefix;
--# end

   







--# property-start StringLit.is_regexp_literal nodes.lkt:4301
pragma Warnings (Off, "is not referenced");
 function String_Lit_P_Is_Regexp_Literal
  
  (Node : Bare_String_Lit
  )

   return Boolean
is
   Self : Bare_String_Lit  := Bare_String_Lit (Node);
      --# bind self Self

   


   Property_Result : Boolean;

      

      Fld : Character_Type;
Is_Equal : Boolean;



begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         --# expr-start 2646 '<Eq at nodes.lkt:4301:37>' Is_Equal nodes.lkt:4301
--# expr-start 2645 '<FieldAccess for prefix at nodes.lkt:4301:37>' Fld nodes.lkt:4301







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]StringLit.prefix'
Fld := Liblktlang.Implementation.Dispatcher_String_Lit_P_Prefix (Node => Self);
--# end
--# expr-done 2645

Is_Equal := Fld = Character_Type'Val (112); 
--# expr-done 2646

         Property_Result := Is_Equal;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end String_Lit_P_Is_Regexp_Literal;
--# end

   







--# property-start StringLit.xref_equation nodes.lkt:4303
pragma Warnings (Off, "is not referenced");
 function String_Lit_P_Xref_Equation
  
  (Node : Bare_String_Lit
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Logic_Equation
is
   Self : Bare_String_Lit  := Bare_String_Lit (Node);
     Ent : Internal_Entity_String_Lit :=
       Internal_Entity_String_Lit'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Logic_Equation;

      
            procedure Finalizer_Scope_319 with Inline_Always;

      Fld : Logic_Var;
Fld_1 : Internal_Entity_Named_Type_Decl;
Cast_Result : Internal_Entity;
Bind_Result : Logic_Equation;
Fld_2 : Logic_Var;
Fld_3 : Internal_Entity_Named_Type_Decl;
Cast_Result_1 : Internal_Entity;
Bind_Result_1 : Logic_Equation;
Fld_4 : Boolean;
Fld_5 : Character_Type;
Is_Equal : Boolean;
If_Result : Boolean;
If_Result_1 : Logic_Equation;

            procedure Finalizer_Scope_319 is
            begin
                     Dec_Ref (Bind_Result);
                     Dec_Ref (Bind_Result_1);
                     Dec_Ref (If_Result_1);
            end Finalizer_Scope_319;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 2657 '<If at nodes.lkt:4304:9>' If_Result_1 nodes.lkt:4304



--# expr-start 2650 '<BooleanBinaryOp And at nodes.lkt:4304:12>' If_Result nodes.lkt:4304



--# expr-start 2647 '<FieldAccess for is_prefixed_string at nodes.lkt:4304:12>' Fld_4 nodes.lkt:4304







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]StringLit.is_prefixed_string'
Fld_4 := Liblktlang.Implementation.Dispatcher_String_Lit_P_Is_Prefixed_String (Node => Ent.Node);
--# end
--# expr-done 2647
if Fld_4 then
   --# expr-start 2649 '<Eq at nodes.lkt:4304:42>' Is_Equal nodes.lkt:4304
--# expr-start 2648 '<FieldAccess for prefix at nodes.lkt:4304:42>' Fld_5 nodes.lkt:4304







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]StringLit.prefix'
Fld_5 := Liblktlang.Implementation.Dispatcher_String_Lit_P_Prefix (Node => Ent.Node);
--# end
--# expr-done 2648

Is_Equal := Fld_5 = Character_Type'Val (115); 
--# expr-done 2649
   If_Result := Is_Equal;
else
   
   If_Result := False;
end if;



--# expr-done 2650
if If_Result then
   --# expr-start 2653 '<Bind at nodes.lkt:4305:14>' Bind_Result nodes.lkt:4305
--# expr-start 2651 '<FieldAccess for actual_type_var at nodes.lkt:4305:14>' Fld nodes.lkt:4305







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Ent.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 2651
Fld.Value := No_Entity;
Entity_Vars.Reset (Fld);





--# expr-start 2652 '<FieldAccess for symbol_type at nodes.lkt:4305:38>' Fld_1 nodes.lkt:4305







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start LktNode.symbol_type
Fld_1 := Liblktlang.Implementation.Lkt_Node_P_Symbol_Type (Node => Self);
--# end
--# expr-done 2652



   
      Cast_Result := Create_Internal_Entity
        (Node => Fld_1.Node,
         Info => Fld_1.Info);


Bind_Result := Solver.Create_Assign (Fld, Cast_Result, Solver_Ifc.No_Converter, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4305:14") else null)); 
--# expr-done 2653
   If_Result_1 := Bind_Result;
else
   --# expr-start 2656 '<Bind at nodes.lkt:4306:14>' Bind_Result_1 nodes.lkt:4306
--# expr-start 2654 '<FieldAccess for actual_type_var at nodes.lkt:4306:14>' Fld_2 nodes.lkt:4306







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_2 := Ent.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 2654
Fld_2.Value := No_Entity;
Entity_Vars.Reset (Fld_2);





--# expr-start 2655 '<FieldAccess for string_type at nodes.lkt:4306:38>' Fld_3 nodes.lkt:4306







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start LktNode.string_type
Fld_3 := Liblktlang.Implementation.Lkt_Node_P_String_Type (Node => Self);
--# end
--# expr-done 2655



   
      Cast_Result_1 := Create_Internal_Entity
        (Node => Fld_3.Node,
         Info => Fld_3.Info);


Bind_Result_1 := Solver.Create_Assign (Fld_2, Cast_Result_1, Solver_Ifc.No_Converter, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4306:14") else null)); 
--# expr-done 2656
   If_Result_1 := Bind_Result_1;
end if;

      Inc_Ref (If_Result_1);


--# expr-done 2657

         Property_Result := If_Result_1;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_319;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_319;




            raise;
      end;



   return Property_Result;
end String_Lit_P_Xref_Equation;
--# end



   


      

   --
   --  Primitives for Bare_Block_String_Lit
   --

   



      
      procedure Initialize_Fields_For_Block_String_Lit
        (Self : Bare_Block_String_Lit
         ; Block_String_Lit_F_Lines : Bare_Block_String_Line_List
        ) is
      begin
            Initialize_Fields_For_String_Lit
              (Self);

            Self.Block_String_Lit_F_Lines := Block_String_Lit_F_Lines;
         

      end Initialize_Fields_For_Block_String_Lit;

      
   function Block_String_Lit_F_Lines
     (Node : Bare_Block_String_Lit) return Bare_Block_String_Line_List
   is
      

   begin
         
         return Node.Block_String_Lit_F_Lines;
      
   end;


   







--# property-start BlockStringLit.is_prefixed_string nodes.lkt:4327
pragma Warnings (Off, "is not referenced");
 function Block_String_Lit_P_Is_Prefixed_String
  
  (Node : Bare_Block_String_Lit
  )

   return Boolean
is
   Self : Bare_Block_String_Lit  := Bare_Block_String_Lit (Node);
      --# bind self Self

   


   Property_Result : Boolean;

      

      



begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         

         Property_Result := False;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Block_String_Lit_P_Is_Prefixed_String;
--# end

   







--# property-start BlockStringLit.prefix nodes.lkt:4329
pragma Warnings (Off, "is not referenced");
 function Block_String_Lit_P_Prefix
  
  (Node : Bare_Block_String_Lit
  )

   return Character_Type
is
   Self : Bare_Block_String_Lit  := Bare_Block_String_Lit (Node);
      --# bind self Self

   


   Property_Result : Character_Type;

      

      



begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         

         Property_Result := Character_Type'Val (0);
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Block_String_Lit_P_Prefix;
--# end



   


      

   --
   --  Primitives for Bare_Single_Line_String_Lit
   --

   



      
      procedure Initialize_Fields_For_Single_Line_String_Lit
        (Self : Bare_Single_Line_String_Lit
        ) is
      begin
            Initialize_Fields_For_String_Lit
              (Self);

         

      end Initialize_Fields_For_Single_Line_String_Lit;




   


      

   --
   --  Primitives for Bare_Pattern_Single_Line_String_Lit
   --

   



      
      procedure Initialize_Fields_For_Pattern_Single_Line_String_Lit
        (Self : Bare_Pattern_Single_Line_String_Lit
        ) is
      begin
            Initialize_Fields_For_Single_Line_String_Lit
              (Self);

         

      end Initialize_Fields_For_Pattern_Single_Line_String_Lit;




   


      

   --
   --  Primitives for Bare_Logic_Assign
   --

   



      
      procedure Initialize_Fields_For_Logic_Assign
        (Self : Bare_Logic_Assign
         ; Logic_Assign_F_Dest_Var : Bare_Expr
         ; Logic_Assign_F_Value : Bare_Expr
        ) is
      begin
            Initialize_Fields_For_Expr
              (Self);

            Self.Logic_Assign_F_Dest_Var := Logic_Assign_F_Dest_Var;
            Self.Logic_Assign_F_Value := Logic_Assign_F_Value;
         

      end Initialize_Fields_For_Logic_Assign;

      
   function Logic_Assign_F_Dest_Var
     (Node : Bare_Logic_Assign) return Bare_Expr
   is
      

   begin
         
         return Node.Logic_Assign_F_Dest_Var;
      
   end;

      
   function Logic_Assign_F_Value
     (Node : Bare_Logic_Assign) return Bare_Expr
   is
      

   begin
         
         return Node.Logic_Assign_F_Value;
      
   end;


   







--# property-start LogicAssign.xref_equation nodes.lkt:4360
pragma Warnings (Off, "is not referenced");
 function Logic_Assign_P_Xref_Equation
  
  (Node : Bare_Logic_Assign
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Logic_Equation
is
   Self : Bare_Logic_Assign  := Bare_Logic_Assign (Node);
     Ent : Internal_Entity_Logic_Assign :=
       Internal_Entity_Logic_Assign'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Logic_Equation;

      
            procedure Finalizer_Scope_326 with Inline_Always;

      Fld : Internal_Entity_Expr;
Fld_1 : Logic_Equation;
Fld_2 : Internal_Entity_Expr;
Fld_3 : Logic_Var;
Fld_4 : Internal_Entity_Named_Type_Decl;
Cast_Result : Internal_Entity;
Bind_Result : Logic_Equation;
And_Pred : Logic_Equation;
Fld_5 : Bare_Expr;
Cast_Result_1 : Bare_Lkt_Node;
Bound_Error_Location : Bare_Lkt_Node;
Fld_6 : Internal_Entity_Expr;
Fld_7 : Logic_Var;
Fld_8 : Internal_Entity_Expr;
Fld_9 : Logic_Var;
Pred : Logic_Equation;
Dyn_Var_Bind_Result : Logic_Equation;
And_Pred_1 : Logic_Equation;
Fld_10 : Internal_Entity_Expr;
Fld_11 : Logic_Equation;
And_Pred_2 : Logic_Equation;
Fld_12 : Internal_Entity_Expr;
Fld_13 : Logic_Var;
Fld_14 : Internal_Entity_Named_Type_Decl;
Fld_15 : Lexical_Env := Empty_Env;
Sym : Symbol_Type;
Env_Get_Result : Internal_Entity;
Cast_Result_2 : Internal_Entity_Type_Decl;
Array_Lit : Internal_Entity_Type_Decl_Array_Access;
Fld_16 : Internal_Entity_Decl;
Cast_Result_3 : Internal_Entity;
Bind_Result_1 : Logic_Equation;
And_Pred_3 : Logic_Equation;
Fld_17 : Bare_Expr;
Cast_Result_4 : Bare_Lkt_Node;
Bound_Error_Location_1 : Bare_Lkt_Node;
Fld_18 : Internal_Entity_Expr;
Fld_19 : Logic_Var;
Fld_20 : Internal_Entity_Expr;
Fld_21 : Logic_Var;
Pred_1 : Logic_Equation;
Dyn_Var_Bind_Result_1 : Logic_Equation;
And_Pred_4 : Logic_Equation;
Fld_22 : Logic_Var;
Fld_23 : Internal_Entity_Named_Type_Decl;
Cast_Result_5 : Internal_Entity;
Bind_Result_2 : Logic_Equation;
And_Pred_5 : Logic_Equation;

            procedure Finalizer_Scope_326 is
            begin
                     Dec_Ref (Fld_1);
                     Dec_Ref (Bind_Result);
                     Dec_Ref (And_Pred);
                     Dec_Ref (Pred);
                     Dec_Ref (Dyn_Var_Bind_Result);
                     Dec_Ref (And_Pred_1);
                     Dec_Ref (Fld_11);
                     Dec_Ref (And_Pred_2);
                     Dec_Ref (Fld_15);
                     Dec_Ref (Array_Lit);
                     Dec_Ref (Bind_Result_1);
                     Dec_Ref (And_Pred_3);
                     Dec_Ref (Pred_1);
                     Dec_Ref (Dyn_Var_Bind_Result_1);
                     Dec_Ref (And_Pred_4);
                     Dec_Ref (Bind_Result_2);
                     Dec_Ref (And_Pred_5);
            end Finalizer_Scope_326;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 2698 '<LogicBinaryOp And at nodes.lkt:4361:9>' And_Pred_5 nodes.lkt:4361
--# expr-start 2694 '<LogicBinaryOp And at nodes.lkt:4362:13>' And_Pred_4 nodes.lkt:4362
--# expr-start 2686 '<LogicBinaryOp And at nodes.lkt:4363:17>' And_Pred_3 nodes.lkt:4363
--# expr-start 2675 '<LogicBinaryOp And at nodes.lkt:4364:21>' And_Pred_2 nodes.lkt:4364
--# expr-start 2672 '<LogicBinaryOp And at nodes.lkt:4365:25>' And_Pred_1 nodes.lkt:4365
--# expr-start 2664 '<LogicBinaryOp And at nodes.lkt:4366:29>' And_Pred nodes.lkt:4366
--# expr-start 2659 '<FieldAccess for xref_equation at nodes.lkt:4366:29>' Fld_1 nodes.lkt:4366



--# expr-start 2658 '<FieldAccess for dest_var at nodes.lkt:4366:29>' Fld nodes.lkt:4366







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Create_Internal_Entity_Expr (Node => Ent.Node.Logic_Assign_F_Dest_Var, Info => Ent.Info);
--# expr-done 2658



   if Fld.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]LktNode.xref_equation'
Fld_1 := Liblktlang.Implementation.Dispatcher_Lkt_Node_P_Xref_Equation (Node => Fld.Node, E_Info => Fld.Info);
--# end
--# expr-done 2659
--# expr-start 2663 '<Bind at nodes.lkt:4367:34>' Bind_Result nodes.lkt:4367
--# expr-start 2661 '<FieldAccess for expected_type_var at nodes.lkt:4367:34>' Fld_3 nodes.lkt:4367



--# expr-start 2660 '<FieldAccess for dest_var at nodes.lkt:4367:34>' Fld_2 nodes.lkt:4367







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_2 := Create_Internal_Entity_Expr (Node => Ent.Node.Logic_Assign_F_Dest_Var, Info => Ent.Info);
--# expr-done 2660



   if Fld_2.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_3 := Fld_2.Node.Expr_Expected_Type_Var'Unrestricted_Access;
--# expr-done 2661
Fld_3.Value := No_Entity;
Entity_Vars.Reset (Fld_3);





--# expr-start 2662 '<FieldAccess for logicvar_type at nodes.lkt:4368:32>' Fld_4 nodes.lkt:4368







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start LktNode.logicvar_type
Fld_4 := Liblktlang.Implementation.Lkt_Node_P_Logicvar_Type (Node => Ent.Node);
--# end
--# expr-done 2662



   
      Cast_Result := Create_Internal_Entity
        (Node => Fld_4.Node,
         Info => Fld_4.Info);


Bind_Result := Solver.Create_Assign (Fld_3, Cast_Result, Solver_Ifc.No_Converter, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4367:34") else null)); 
--# expr-done 2663
And_Pred := Create_And (Fld_1, Bind_Result, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4366:29") else null)); 
--# expr-done 2664
--# expr-start 2671 '<bind at nodes.lkt:4371:29>' Dyn_Var_Bind_Result nodes.lkt:4371





--# expr-start 2665 '<FieldAccess for dest_var at nodes.lkt:4371:51>' Fld_5 nodes.lkt:4371







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_5 := Self.Logic_Assign_F_Dest_Var;
--# expr-done 2665



   
      Cast_Result_1 := Fld_5;


Bound_Error_Location := Cast_Result_1; 
--# expr-start 2670 '<Predicate on TypeDecl.matching_type at nodes.lkt:4372:29>' Pred nodes.lkt:4372
--# expr-start 2667 '<FieldAccess for expected_type_var at nodes.lkt:4373:33>' Fld_7 nodes.lkt:4373



--# expr-start 2666 '<FieldAccess for dest_var at nodes.lkt:4373:33>' Fld_6 nodes.lkt:4373







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_6 := Create_Internal_Entity_Expr (Node => Ent.Node.Logic_Assign_F_Dest_Var, Info => Ent.Info);
--# expr-done 2666



   if Fld_6.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_7 := Fld_6.Node.Expr_Expected_Type_Var'Unrestricted_Access;
--# expr-done 2667
Fld_7.Value := No_Entity;
Entity_Vars.Reset (Fld_7);
--# expr-start 2669 '<FieldAccess for actual_type_var at nodes.lkt:4374:33>' Fld_9 nodes.lkt:4374



--# expr-start 2668 '<FieldAccess for dest_var at nodes.lkt:4374:33>' Fld_8 nodes.lkt:4374







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_8 := Create_Internal_Entity_Expr (Node => Ent.Node.Logic_Assign_F_Dest_Var, Info => Ent.Info);
--# expr-done 2668



   if Fld_8.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_9 := Fld_8.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 2669
Fld_9.Value := No_Entity;
Entity_Vars.Reset (Fld_9);


Pred := Solver.Create_N_Predicate ((Fld_7, Fld_9), Create_Type_Decl_P_Matching_Type_0_Predicate (2, Bound_Error_Location)); 
--# expr-done 2670
Dyn_Var_Bind_Result := Pred; Inc_Ref (Dyn_Var_Bind_Result);
--# expr-done 2671
And_Pred_1 := Create_And (And_Pred, Dyn_Var_Bind_Result, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4365:25") else null)); 
--# expr-done 2672
--# expr-start 2674 '<FieldAccess for xref_equation at nodes.lkt:4378:26>' Fld_11 nodes.lkt:4378



--# expr-start 2673 '<FieldAccess for value at nodes.lkt:4378:26>' Fld_10 nodes.lkt:4378







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_10 := Create_Internal_Entity_Expr (Node => Ent.Node.Logic_Assign_F_Value, Info => Ent.Info);
--# expr-done 2673



   if Fld_10.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]LktNode.xref_equation'
Fld_11 := Liblktlang.Implementation.Dispatcher_Lkt_Node_P_Xref_Equation (Node => Fld_10.Node, E_Info => Fld_10.Info);
--# end
--# expr-done 2674
And_Pred_2 := Create_And (And_Pred_1, Fld_11, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4364:21") else null)); 
--# expr-done 2675
--# expr-start 2685 '<Bind at nodes.lkt:4380:22>' Bind_Result_1 nodes.lkt:4380
--# expr-start 2677 '<FieldAccess for expected_type_var at nodes.lkt:4380:22>' Fld_13 nodes.lkt:4380



--# expr-start 2676 '<FieldAccess for value at nodes.lkt:4380:22>' Fld_12 nodes.lkt:4380







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_12 := Create_Internal_Entity_Expr (Node => Ent.Node.Logic_Assign_F_Value, Info => Ent.Info);
--# expr-done 2676



   if Fld_12.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_13 := Fld_12.Node.Expr_Expected_Type_Var'Unrestricted_Access;
--# expr-done 2677
Fld_13.Value := No_Entity;
Entity_Vars.Reset (Fld_13);





--# expr-start 2684 '<FieldAccess for instantiate_generic_decl at nodes.lkt:4381:20>' Fld_16 nodes.lkt:4381



--# expr-start 2678 '<FieldAccess for entity_type at nodes.lkt:4381:20>' Fld_14 nodes.lkt:4381







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start LktNode.entity_type
Fld_14 := Liblktlang.Implementation.Lkt_Node_P_Entity_Type (Node => Ent.Node);
--# end
--# expr-done 2678



   if Fld_14.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# expr-start 2683 '<ArrayLiteral at nodes.lkt:4382:21>' Array_Lit nodes.lkt:4382
--# expr-start 2682 '<Cast to TypeDecl at nodes.lkt:4382:22>' Cast_Result_2 nodes.lkt:4382





--# expr-start 2681 '<EnvGet at nodes.lkt:4382:22>' Env_Get_Result nodes.lkt:4382
--# expr-start 2679 '<FieldAccess for node_env at nodes.lkt:4382:22>' Fld_15 nodes.lkt:4382







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_15 := Liblktlang.Implementation.Node_Env (Node => Ent.Node, E_Info => Ent.Info);
--# expr-done 2679
--# expr-start 2680 '<Symbol RootNode__ at nodes.lkt:4382:46>' Sym nodes.lkt:4382
Sym := Precomputed_Symbol (Precomputed_Symbol_Table (Self.Unit.Context.Symbols), Precomputed_Sym_Rootnode); 
--# expr-done 2680


Env_Get_Result := AST_Envs.Get_First (Self => Fld_15, Key => Thin (Sym), Lookup_Kind => To_Lookup_Kind_Type (Recursive), Categories => (Nocat => True)); 
--# expr-done 2681



   if Env_Get_Result.Node = null
      or else Env_Get_Result.Node.Kind in Lkt_Type_Decl
   then
      
      Cast_Result_2 := Create_Internal_Entity_Type_Decl
        (Node => Env_Get_Result.Node,
         Info => Env_Get_Result.Info);

   else
         Cast_Result_2 := No_Entity_Type_Decl;
   end if;


--# expr-done 2682
Array_Lit := Create_Internal_Entity_Type_Decl_Array (Internal_Internal_Entity_Type_Decl_Array'(1 => Cast_Result_2)); 
--# expr-done 2683
--# property-call-start Decl.instantiate_generic_decl
Fld_16 := Liblktlang.Implementation.Decl_P_Instantiate_Generic_Decl (Node => Fld_14.Node, Type_Params => Array_Lit, E_Info => Fld_14.Info);
--# end
--# expr-done 2684



   
      Cast_Result_3 := Create_Internal_Entity
        (Node => Fld_16.Node,
         Info => Fld_16.Info);


Bind_Result_1 := Solver.Create_Assign (Fld_13, Cast_Result_3, Solver_Ifc.No_Converter, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4380:22") else null)); 
--# expr-done 2685
And_Pred_3 := Create_And (And_Pred_2, Bind_Result_1, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4363:17") else null)); 
--# expr-done 2686
--# expr-start 2693 '<bind at nodes.lkt:4386:17>' Dyn_Var_Bind_Result_1 nodes.lkt:4386





--# expr-start 2687 '<FieldAccess for value at nodes.lkt:4386:39>' Fld_17 nodes.lkt:4386







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_17 := Self.Logic_Assign_F_Value;
--# expr-done 2687



   
      Cast_Result_4 := Fld_17;


Bound_Error_Location_1 := Cast_Result_4; 
--# expr-start 2692 '<Predicate on TypeDecl.matching_type at nodes.lkt:4387:17>' Pred_1 nodes.lkt:4387
--# expr-start 2689 '<FieldAccess for expected_type_var at nodes.lkt:4388:21>' Fld_19 nodes.lkt:4388



--# expr-start 2688 '<FieldAccess for value at nodes.lkt:4388:21>' Fld_18 nodes.lkt:4388







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_18 := Create_Internal_Entity_Expr (Node => Ent.Node.Logic_Assign_F_Value, Info => Ent.Info);
--# expr-done 2688



   if Fld_18.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_19 := Fld_18.Node.Expr_Expected_Type_Var'Unrestricted_Access;
--# expr-done 2689
Fld_19.Value := No_Entity;
Entity_Vars.Reset (Fld_19);
--# expr-start 2691 '<FieldAccess for actual_type_var at nodes.lkt:4389:21>' Fld_21 nodes.lkt:4389



--# expr-start 2690 '<FieldAccess for value at nodes.lkt:4389:21>' Fld_20 nodes.lkt:4389







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_20 := Create_Internal_Entity_Expr (Node => Ent.Node.Logic_Assign_F_Value, Info => Ent.Info);
--# expr-done 2690



   if Fld_20.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_21 := Fld_20.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 2691
Fld_21.Value := No_Entity;
Entity_Vars.Reset (Fld_21);


Pred_1 := Solver.Create_N_Predicate ((Fld_19, Fld_21), Create_Type_Decl_P_Matching_Type_0_Predicate (2, Bound_Error_Location_1)); 
--# expr-done 2692
Dyn_Var_Bind_Result_1 := Pred_1; Inc_Ref (Dyn_Var_Bind_Result_1);
--# expr-done 2693
And_Pred_4 := Create_And (And_Pred_3, Dyn_Var_Bind_Result_1, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4362:13") else null)); 
--# expr-done 2694
--# expr-start 2697 '<Bind at nodes.lkt:4393:14>' Bind_Result_2 nodes.lkt:4393
--# expr-start 2695 '<FieldAccess for actual_type_var at nodes.lkt:4393:14>' Fld_22 nodes.lkt:4393







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_22 := Ent.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 2695
Fld_22.Value := No_Entity;
Entity_Vars.Reset (Fld_22);





--# expr-start 2696 '<FieldAccess for equation_type at nodes.lkt:4393:38>' Fld_23 nodes.lkt:4393







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start LktNode.equation_type
Fld_23 := Liblktlang.Implementation.Lkt_Node_P_Equation_Type (Node => Ent.Node);
--# end
--# expr-done 2696



   
      Cast_Result_5 := Create_Internal_Entity
        (Node => Fld_23.Node,
         Info => Fld_23.Info);


Bind_Result_2 := Solver.Create_Assign (Fld_22, Cast_Result_5, Solver_Ifc.No_Converter, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4393:14") else null)); 
--# expr-done 2697
And_Pred_5 := Create_And (And_Pred_4, Bind_Result_2, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4361:9") else null)); 
--# expr-done 2698

         Property_Result := And_Pred_5;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_326;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_326;




            raise;
      end;



   return Property_Result;
end Logic_Assign_P_Xref_Equation;
--# end



   


      

   --
   --  Primitives for Bare_Logic_Expr
   --

   



      
      procedure Initialize_Fields_For_Logic_Expr
        (Self : Bare_Logic_Expr
         ; Logic_Expr_F_Expr : Bare_Expr
        ) is
      begin
            Initialize_Fields_For_Expr
              (Self);

            Self.Logic_Expr_F_Expr := Logic_Expr_F_Expr;
         

      end Initialize_Fields_For_Logic_Expr;

      
   function Logic_Expr_F_Expr
     (Node : Bare_Logic_Expr) return Bare_Expr
   is
      

   begin
         
         return Node.Logic_Expr_F_Expr;
      
   end;


   







--# property-start LogicExpr.xref_equation nodes.lkt:4401
pragma Warnings (Off, "is not referenced");
 function Logic_Expr_P_Xref_Equation
  
  (Node : Bare_Logic_Expr
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Logic_Equation
is
   Self : Bare_Logic_Expr  := Bare_Logic_Expr (Node);
     Ent : Internal_Entity_Logic_Expr :=
       Internal_Entity_Logic_Expr'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Logic_Equation;

      
            procedure Finalizer_Scope_327 with Inline_Always;

      Fld : Internal_Entity_Expr;
Fld_1 : Logic_Equation;
Fld_2 : Internal_Entity_Expr;
Fld_3 : Logic_Var;
Fld_4 : Internal_Entity_Named_Type_Decl;
Cast_Result : Internal_Entity;
Bind_Result : Logic_Equation;
And_Pred : Logic_Equation;
Fld_5 : Logic_Var;
Fld_6 : Internal_Entity_Named_Type_Decl;
Cast_Result_1 : Internal_Entity;
Bind_Result_1 : Logic_Equation;
And_Pred_1 : Logic_Equation;

            procedure Finalizer_Scope_327 is
            begin
                     Dec_Ref (Fld_1);
                     Dec_Ref (Bind_Result);
                     Dec_Ref (And_Pred);
                     Dec_Ref (Bind_Result_1);
                     Dec_Ref (And_Pred_1);
            end Finalizer_Scope_327;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 2709 '<LogicBinaryOp And at nodes.lkt:4402:9>' And_Pred_1 nodes.lkt:4402
--# expr-start 2705 '<LogicBinaryOp And at nodes.lkt:4403:13>' And_Pred nodes.lkt:4403
--# expr-start 2700 '<FieldAccess for xlogic_equation at nodes.lkt:4403:13>' Fld_1 nodes.lkt:4403



--# expr-start 2699 '<FieldAccess for expr at nodes.lkt:4403:13>' Fld nodes.lkt:4403







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Create_Internal_Entity_Expr (Node => Ent.Node.Logic_Expr_F_Expr, Info => Ent.Info);
--# expr-done 2699



   if Fld.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]Expr.xlogic_equation'
Fld_1 := Liblktlang.Implementation.Dispatcher_Expr_P_Xlogic_Equation (Node => Fld.Node, E_Info => Fld.Info);
--# end
--# expr-done 2700
--# expr-start 2704 '<Bind at nodes.lkt:4404:18>' Bind_Result nodes.lkt:4404
--# expr-start 2702 '<FieldAccess for expected_type_var at nodes.lkt:4404:18>' Fld_3 nodes.lkt:4404



--# expr-start 2701 '<FieldAccess for expr at nodes.lkt:4404:18>' Fld_2 nodes.lkt:4404







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_2 := Create_Internal_Entity_Expr (Node => Ent.Node.Logic_Expr_F_Expr, Info => Ent.Info);
--# expr-done 2701



   if Fld_2.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_3 := Fld_2.Node.Expr_Expected_Type_Var'Unrestricted_Access;
--# expr-done 2702
Fld_3.Value := No_Entity;
Entity_Vars.Reset (Fld_3);





--# expr-start 2703 '<FieldAccess for bool_type at nodes.lkt:4404:49>' Fld_4 nodes.lkt:4404







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start LktNode.bool_type
Fld_4 := Liblktlang.Implementation.Lkt_Node_P_Bool_Type (Node => Ent.Node);
--# end
--# expr-done 2703



   
      Cast_Result := Create_Internal_Entity
        (Node => Fld_4.Node,
         Info => Fld_4.Info);


Bind_Result := Solver.Create_Assign (Fld_3, Cast_Result, Solver_Ifc.No_Converter, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4404:18") else null)); 
--# expr-done 2704
And_Pred := Create_And (Fld_1, Bind_Result, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4403:13") else null)); 
--# expr-done 2705
--# expr-start 2708 '<Bind at nodes.lkt:4406:14>' Bind_Result_1 nodes.lkt:4406
--# expr-start 2706 '<FieldAccess for actual_type_var at nodes.lkt:4406:14>' Fld_5 nodes.lkt:4406







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_5 := Ent.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 2706
Fld_5.Value := No_Entity;
Entity_Vars.Reset (Fld_5);





--# expr-start 2707 '<FieldAccess for equation_type at nodes.lkt:4406:38>' Fld_6 nodes.lkt:4406







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start LktNode.equation_type
Fld_6 := Liblktlang.Implementation.Lkt_Node_P_Equation_Type (Node => Ent.Node);
--# end
--# expr-done 2707



   
      Cast_Result_1 := Create_Internal_Entity
        (Node => Fld_6.Node,
         Info => Fld_6.Info);


Bind_Result_1 := Solver.Create_Assign (Fld_5, Cast_Result_1, Solver_Ifc.No_Converter, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4406:14") else null)); 
--# expr-done 2708
And_Pred_1 := Create_And (And_Pred, Bind_Result_1, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4402:9") else null)); 
--# expr-done 2709

         Property_Result := And_Pred_1;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_327;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_327;




            raise;
      end;



   return Property_Result;
end Logic_Expr_P_Xref_Equation;
--# end



   


      

   --
   --  Primitives for Bare_Logic_Propagate
   --

   



      
      procedure Initialize_Fields_For_Logic_Propagate
        (Self : Bare_Logic_Propagate
         ; Logic_Propagate_F_Dest_Var : Bare_Expr
         ; Logic_Propagate_F_Call : Bare_Logic_Propagate_Call
        ) is
      begin
            Initialize_Fields_For_Expr
              (Self);

            Self.Logic_Propagate_F_Dest_Var := Logic_Propagate_F_Dest_Var;
            Self.Logic_Propagate_F_Call := Logic_Propagate_F_Call;
         

      end Initialize_Fields_For_Logic_Propagate;

      
   function Logic_Propagate_F_Dest_Var
     (Node : Bare_Logic_Propagate) return Bare_Expr
   is
      

   begin
         
         return Node.Logic_Propagate_F_Dest_Var;
      
   end;

      
   function Logic_Propagate_F_Call
     (Node : Bare_Logic_Propagate) return Bare_Logic_Propagate_Call
   is
      

   begin
         
         return Node.Logic_Propagate_F_Call;
      
   end;


   







--# property-start LogicPropagate.generic_type_equation nodes.lkt:4416
pragma Warnings (Off, "is not referenced");
 function Logic_Propagate_P_Generic_Type_Equation
  
  (Node : Bare_Logic_Propagate
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Logic_Equation
is
   Self : Bare_Logic_Propagate  := Bare_Logic_Propagate (Node);
     Ent : Internal_Entity_Logic_Propagate :=
       Internal_Entity_Logic_Propagate'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Logic_Equation;

      
            procedure Finalizer_Scope_328 with Inline_Always;

      Bound_In_Logic_Call : Boolean;
Fld : Internal_Entity_Logic_Propagate_Call;
Fld_1 : Internal_Entity_Expr;
Fld_2 : Internal_Entity_Logic_Propagate_Call;
Fld_3 : Internal_Entity_Param_List;
Fld_4 : Logic_Equation;
Dyn_Var_Bind_Result : Logic_Equation;

            procedure Finalizer_Scope_328 is
            begin
                     Dec_Ref (Fld_4);
                     Dec_Ref (Dyn_Var_Bind_Result);
            end Finalizer_Scope_328;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 2715 '<bind at nodes.lkt:4417:9>' Dyn_Var_Bind_Result nodes.lkt:4417

Bound_In_Logic_Call := True; 
--# expr-start 2714 '<FieldAccess for call_generic_type_equation at nodes.lkt:4419:9>' Fld_4 nodes.lkt:4419







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# expr-start 2711 '<FieldAccess for name at nodes.lkt:4419:41>' Fld_1 nodes.lkt:4419



--# expr-start 2710 '<FieldAccess for call at nodes.lkt:4419:41>' Fld nodes.lkt:4419







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Create_Internal_Entity_Logic_Propagate_Call (Node => Ent.Node.Logic_Propagate_F_Call, Info => Ent.Info);
--# expr-done 2710



   if Fld.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_1 := Create_Internal_Entity_Expr (Node => Fld.Node.Base_Call_Expr_F_Name, Info => Fld.Info);
--# expr-done 2711
--# expr-start 2713 '<FieldAccess for args at nodes.lkt:4419:57>' Fld_3 nodes.lkt:4419



--# expr-start 2712 '<FieldAccess for call at nodes.lkt:4419:57>' Fld_2 nodes.lkt:4419







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_2 := Create_Internal_Entity_Logic_Propagate_Call (Node => Ent.Node.Logic_Propagate_F_Call, Info => Ent.Info);
--# expr-done 2712



   if Fld_2.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_3 := Create_Internal_Entity_Param_List (Node => Fld_2.Node.Base_Call_Expr_F_Args, Info => Fld_2.Info);
--# expr-done 2713
--# property-call-start Expr.call_generic_type_equation
Fld_4 := Liblktlang.Implementation.Expr_P_Call_Generic_Type_Equation (Node => Ent.Node, Name => Fld_1, Args => Fld_3, In_Logic_Call => Bound_In_Logic_Call);
--# end
--# expr-done 2714
Dyn_Var_Bind_Result := Fld_4; Inc_Ref (Dyn_Var_Bind_Result);
--# expr-done 2715

         Property_Result := Dyn_Var_Bind_Result;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_328;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_328;




            raise;
      end;



   return Property_Result;
end Logic_Propagate_P_Generic_Type_Equation;
--# end

   







--# property-start LogicPropagate.expected_type_equation nodes.lkt:4422
pragma Warnings (Off, "is not referenced");
 function Logic_Propagate_P_Expected_Type_Equation
  
  (Node : Bare_Logic_Propagate
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Logic_Equation
is
   Self : Bare_Logic_Propagate  := Bare_Logic_Propagate (Node);
     Ent : Internal_Entity_Logic_Propagate :=
       Internal_Entity_Logic_Propagate'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Logic_Equation;

      
            procedure Finalizer_Scope_329 with Inline_Always;

      Fld : Internal_Entity_Logic_Propagate_Call;
Fld_1 : Internal_Entity_Expr;
Fld_2 : Internal_Entity_Logic_Propagate_Call;
Fld_3 : Internal_Entity_Param_List;
Fld_4 : Logic_Equation;

            procedure Finalizer_Scope_329 is
            begin
                     Dec_Ref (Fld_4);
            end Finalizer_Scope_329;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 2720 '<FieldAccess for call_expected_type_equation at nodes.lkt:4423:9>' Fld_4 nodes.lkt:4423







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# expr-start 2717 '<FieldAccess for name at nodes.lkt:4423:42>' Fld_1 nodes.lkt:4423



--# expr-start 2716 '<FieldAccess for call at nodes.lkt:4423:42>' Fld nodes.lkt:4423







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Create_Internal_Entity_Logic_Propagate_Call (Node => Ent.Node.Logic_Propagate_F_Call, Info => Ent.Info);
--# expr-done 2716



   if Fld.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_1 := Create_Internal_Entity_Expr (Node => Fld.Node.Base_Call_Expr_F_Name, Info => Fld.Info);
--# expr-done 2717
--# expr-start 2719 '<FieldAccess for args at nodes.lkt:4423:58>' Fld_3 nodes.lkt:4423



--# expr-start 2718 '<FieldAccess for call at nodes.lkt:4423:58>' Fld_2 nodes.lkt:4423







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_2 := Create_Internal_Entity_Logic_Propagate_Call (Node => Ent.Node.Logic_Propagate_F_Call, Info => Ent.Info);
--# expr-done 2718



   if Fld_2.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_3 := Create_Internal_Entity_Param_List (Node => Fld_2.Node.Base_Call_Expr_F_Args, Info => Fld_2.Info);
--# expr-done 2719
--# property-call-start Expr.call_expected_type_equation
Fld_4 := Liblktlang.Implementation.Expr_P_Call_Expected_Type_Equation (Node => Ent.Node, Name => Fld_1, Args => Fld_3, E_Info => Ent.Info);
--# end
--# expr-done 2720

         Property_Result := Fld_4;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_329;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_329;




            raise;
      end;



   return Property_Result;
end Logic_Propagate_P_Expected_Type_Equation;
--# end

   







--# property-start LogicPropagate.xref_equation nodes.lkt:4425
pragma Warnings (Off, "is not referenced");
 function Logic_Propagate_P_Xref_Equation
  
  (Node : Bare_Logic_Propagate
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Logic_Equation
is
   Self : Bare_Logic_Propagate  := Bare_Logic_Propagate (Node);
     Ent : Internal_Entity_Logic_Propagate :=
       Internal_Entity_Logic_Propagate'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Logic_Equation;

      
            procedure Finalizer_Scope_330 with Inline_Always;

      Fld : Internal_Entity_Expr;
Fld_1 : Logic_Equation;
Fld_2 : Internal_Entity_Expr;
Fld_3 : Logic_Var;
Fld_4 : Internal_Entity_Named_Type_Decl;
Cast_Result : Internal_Entity;
Bind_Result : Logic_Equation;
And_Pred : Logic_Equation;
Fld_5 : Bare_Expr;
Cast_Result_1 : Bare_Lkt_Node;
Bound_Error_Location : Bare_Lkt_Node;
Fld_6 : Internal_Entity_Expr;
Fld_7 : Logic_Var;
Fld_8 : Internal_Entity_Expr;
Fld_9 : Logic_Var;
Pred : Logic_Equation;
Dyn_Var_Bind_Result : Logic_Equation;
And_Pred_1 : Logic_Equation;
Fld_10 : Internal_Entity_Logic_Propagate_Call;
Fld_11 : Internal_Entity_Expr;
Fld_12 : Logic_Equation;
And_Pred_2 : Logic_Equation;
Bound_In_Logic_Call : Boolean;
Fld_13 : Internal_Entity_Logic_Propagate_Call;
Fld_14 : Internal_Entity_Expr;
Fld_15 : Internal_Entity_Logic_Propagate_Call;
Fld_16 : Internal_Entity_Param_List;
Fld_17 : Logic_Equation;
Dyn_Var_Bind_Result_1 : Logic_Equation;
And_Pred_3 : Logic_Equation;
Fld_18 : Bare_Logic_Propagate_Call;
Fld_19 : Bare_Expr;
Cast_Result_2 : Bare_Lkt_Node;
Bound_Error_Location_1 : Bare_Lkt_Node;
Fld_20 : Internal_Entity_Logic_Propagate_Call;
Fld_21 : Internal_Entity_Expr;
Fld_22 : Logic_Var;
Pred_1 : Logic_Equation;
Dyn_Var_Bind_Result_2 : Logic_Equation;
And_Pred_4 : Logic_Equation;
Fld_23 : Logic_Var;
Fld_24 : Internal_Entity_Named_Type_Decl;
Cast_Result_3 : Internal_Entity;
Bind_Result_1 : Logic_Equation;
And_Pred_5 : Logic_Equation;

            procedure Finalizer_Scope_330 is
            begin
                     Dec_Ref (Fld_1);
                     Dec_Ref (Bind_Result);
                     Dec_Ref (And_Pred);
                     Dec_Ref (Pred);
                     Dec_Ref (Dyn_Var_Bind_Result);
                     Dec_Ref (And_Pred_1);
                     Dec_Ref (Fld_12);
                     Dec_Ref (And_Pred_2);
                     Dec_Ref (Fld_17);
                     Dec_Ref (Dyn_Var_Bind_Result_1);
                     Dec_Ref (And_Pred_3);
                     Dec_Ref (Pred_1);
                     Dec_Ref (Dyn_Var_Bind_Result_2);
                     Dec_Ref (And_Pred_4);
                     Dec_Ref (Bind_Result_1);
                     Dec_Ref (And_Pred_5);
            end Finalizer_Scope_330;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 2758 '<LogicBinaryOp And at nodes.lkt:4426:9>' And_Pred_5 nodes.lkt:4426
--# expr-start 2754 '<LogicBinaryOp And at nodes.lkt:4427:13>' And_Pred_4 nodes.lkt:4427
--# expr-start 2746 '<LogicBinaryOp And at nodes.lkt:4428:17>' And_Pred_3 nodes.lkt:4428
--# expr-start 2739 '<LogicBinaryOp And at nodes.lkt:4429:21>' And_Pred_2 nodes.lkt:4429
--# expr-start 2735 '<LogicBinaryOp And at nodes.lkt:4430:25>' And_Pred_1 nodes.lkt:4430
--# expr-start 2727 '<LogicBinaryOp And at nodes.lkt:4431:29>' And_Pred nodes.lkt:4431
--# expr-start 2722 '<FieldAccess for xref_equation at nodes.lkt:4431:29>' Fld_1 nodes.lkt:4431



--# expr-start 2721 '<FieldAccess for dest_var at nodes.lkt:4431:29>' Fld nodes.lkt:4431







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Create_Internal_Entity_Expr (Node => Ent.Node.Logic_Propagate_F_Dest_Var, Info => Ent.Info);
--# expr-done 2721



   if Fld.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]LktNode.xref_equation'
Fld_1 := Liblktlang.Implementation.Dispatcher_Lkt_Node_P_Xref_Equation (Node => Fld.Node, E_Info => Fld.Info);
--# end
--# expr-done 2722
--# expr-start 2726 '<Bind at nodes.lkt:4432:34>' Bind_Result nodes.lkt:4432
--# expr-start 2724 '<FieldAccess for expected_type_var at nodes.lkt:4432:34>' Fld_3 nodes.lkt:4432



--# expr-start 2723 '<FieldAccess for dest_var at nodes.lkt:4432:34>' Fld_2 nodes.lkt:4432







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_2 := Create_Internal_Entity_Expr (Node => Ent.Node.Logic_Propagate_F_Dest_Var, Info => Ent.Info);
--# expr-done 2723



   if Fld_2.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_3 := Fld_2.Node.Expr_Expected_Type_Var'Unrestricted_Access;
--# expr-done 2724
Fld_3.Value := No_Entity;
Entity_Vars.Reset (Fld_3);





--# expr-start 2725 '<FieldAccess for logicvar_type at nodes.lkt:4433:32>' Fld_4 nodes.lkt:4433







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start LktNode.logicvar_type
Fld_4 := Liblktlang.Implementation.Lkt_Node_P_Logicvar_Type (Node => Ent.Node);
--# end
--# expr-done 2725



   
      Cast_Result := Create_Internal_Entity
        (Node => Fld_4.Node,
         Info => Fld_4.Info);


Bind_Result := Solver.Create_Assign (Fld_3, Cast_Result, Solver_Ifc.No_Converter, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4432:34") else null)); 
--# expr-done 2726
And_Pred := Create_And (Fld_1, Bind_Result, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4431:29") else null)); 
--# expr-done 2727
--# expr-start 2734 '<bind at nodes.lkt:4436:29>' Dyn_Var_Bind_Result nodes.lkt:4436





--# expr-start 2728 '<FieldAccess for dest_var at nodes.lkt:4436:51>' Fld_5 nodes.lkt:4436







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_5 := Self.Logic_Propagate_F_Dest_Var;
--# expr-done 2728



   
      Cast_Result_1 := Fld_5;


Bound_Error_Location := Cast_Result_1; 
--# expr-start 2733 '<Predicate on TypeDecl.matching_type at nodes.lkt:4437:29>' Pred nodes.lkt:4437
--# expr-start 2730 '<FieldAccess for expected_type_var at nodes.lkt:4438:33>' Fld_7 nodes.lkt:4438



--# expr-start 2729 '<FieldAccess for dest_var at nodes.lkt:4438:33>' Fld_6 nodes.lkt:4438







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_6 := Create_Internal_Entity_Expr (Node => Ent.Node.Logic_Propagate_F_Dest_Var, Info => Ent.Info);
--# expr-done 2729



   if Fld_6.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_7 := Fld_6.Node.Expr_Expected_Type_Var'Unrestricted_Access;
--# expr-done 2730
Fld_7.Value := No_Entity;
Entity_Vars.Reset (Fld_7);
--# expr-start 2732 '<FieldAccess for actual_type_var at nodes.lkt:4439:33>' Fld_9 nodes.lkt:4439



--# expr-start 2731 '<FieldAccess for dest_var at nodes.lkt:4439:33>' Fld_8 nodes.lkt:4439







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_8 := Create_Internal_Entity_Expr (Node => Ent.Node.Logic_Propagate_F_Dest_Var, Info => Ent.Info);
--# expr-done 2731



   if Fld_8.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_9 := Fld_8.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 2732
Fld_9.Value := No_Entity;
Entity_Vars.Reset (Fld_9);


Pred := Solver.Create_N_Predicate ((Fld_7, Fld_9), Create_Type_Decl_P_Matching_Type_0_Predicate (2, Bound_Error_Location)); 
--# expr-done 2733
Dyn_Var_Bind_Result := Pred; Inc_Ref (Dyn_Var_Bind_Result);
--# expr-done 2734
And_Pred_1 := Create_And (And_Pred, Dyn_Var_Bind_Result, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4430:25") else null)); 
--# expr-done 2735
--# expr-start 2738 '<FieldAccess for xlogic_equation at nodes.lkt:4443:26>' Fld_12 nodes.lkt:4443



--# expr-start 2737 '<FieldAccess for name at nodes.lkt:4443:26>' Fld_11 nodes.lkt:4443



--# expr-start 2736 '<FieldAccess for call at nodes.lkt:4443:26>' Fld_10 nodes.lkt:4443







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_10 := Create_Internal_Entity_Logic_Propagate_Call (Node => Ent.Node.Logic_Propagate_F_Call, Info => Ent.Info);
--# expr-done 2736



   if Fld_10.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_11 := Create_Internal_Entity_Expr (Node => Fld_10.Node.Base_Call_Expr_F_Name, Info => Fld_10.Info);
--# expr-done 2737



   if Fld_11.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]Expr.xlogic_equation'
Fld_12 := Liblktlang.Implementation.Dispatcher_Expr_P_Xlogic_Equation (Node => Fld_11.Node, E_Info => Fld_11.Info);
--# end
--# expr-done 2738
And_Pred_2 := Create_And (And_Pred_1, Fld_12, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4429:21") else null)); 
--# expr-done 2739
--# expr-start 2745 '<bind at nodes.lkt:4446:21>' Dyn_Var_Bind_Result_1 nodes.lkt:4446

Bound_In_Logic_Call := True; 
--# expr-start 2744 '<FieldAccess for xref_call_equation at nodes.lkt:4448:21>' Fld_17 nodes.lkt:4448







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# expr-start 2741 '<FieldAccess for name at nodes.lkt:4448:45>' Fld_14 nodes.lkt:4448



--# expr-start 2740 '<FieldAccess for call at nodes.lkt:4448:45>' Fld_13 nodes.lkt:4448







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_13 := Create_Internal_Entity_Logic_Propagate_Call (Node => Ent.Node.Logic_Propagate_F_Call, Info => Ent.Info);
--# expr-done 2740



   if Fld_13.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_14 := Create_Internal_Entity_Expr (Node => Fld_13.Node.Base_Call_Expr_F_Name, Info => Fld_13.Info);
--# expr-done 2741
--# expr-start 2743 '<FieldAccess for args at nodes.lkt:4448:61>' Fld_16 nodes.lkt:4448



--# expr-start 2742 '<FieldAccess for call at nodes.lkt:4448:61>' Fld_15 nodes.lkt:4448







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_15 := Create_Internal_Entity_Logic_Propagate_Call (Node => Ent.Node.Logic_Propagate_F_Call, Info => Ent.Info);
--# expr-done 2742



   if Fld_15.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_16 := Create_Internal_Entity_Param_List (Node => Fld_15.Node.Base_Call_Expr_F_Args, Info => Fld_15.Info);
--# expr-done 2743
--# property-call-start Expr.xref_call_equation
Fld_17 := Liblktlang.Implementation.Expr_P_Xref_Call_Equation (Node => Ent.Node, Name => Fld_14, Args => Fld_16, In_Logic_Call => Bound_In_Logic_Call, E_Info => Ent.Info);
--# end
--# expr-done 2744
Dyn_Var_Bind_Result_1 := Fld_17; Inc_Ref (Dyn_Var_Bind_Result_1);
--# expr-done 2745
And_Pred_3 := Create_And (And_Pred_2, Dyn_Var_Bind_Result_1, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4428:17") else null)); 
--# expr-done 2746
--# expr-start 2753 '<bind at nodes.lkt:4452:17>' Dyn_Var_Bind_Result_2 nodes.lkt:4452





--# expr-start 2748 '<FieldAccess for name at nodes.lkt:4452:39>' Fld_19 nodes.lkt:4452



--# expr-start 2747 '<FieldAccess for call at nodes.lkt:4452:39>' Fld_18 nodes.lkt:4452







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_18 := Self.Logic_Propagate_F_Call;
--# expr-done 2747



   if Fld_18 = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_19 := Fld_18.Base_Call_Expr_F_Name;
--# expr-done 2748



   
      Cast_Result_2 := Fld_19;


Bound_Error_Location_1 := Cast_Result_2; 
--# expr-start 2752 '<Predicate on FunctionType.returns_entity at nodes.lkt:4453:17>' Pred_1 nodes.lkt:4453
--# expr-start 2751 '<FieldAccess for actual_type_var at nodes.lkt:4453:46>' Fld_22 nodes.lkt:4453



--# expr-start 2750 '<FieldAccess for name at nodes.lkt:4453:46>' Fld_21 nodes.lkt:4453



--# expr-start 2749 '<FieldAccess for call at nodes.lkt:4453:46>' Fld_20 nodes.lkt:4453







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_20 := Create_Internal_Entity_Logic_Propagate_Call (Node => Ent.Node.Logic_Propagate_F_Call, Info => Ent.Info);
--# expr-done 2749



   if Fld_20.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_21 := Create_Internal_Entity_Expr (Node => Fld_20.Node.Base_Call_Expr_F_Name, Info => Fld_20.Info);
--# expr-done 2750



   if Fld_21.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_22 := Fld_21.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 2751
Fld_22.Value := No_Entity;
Entity_Vars.Reset (Fld_22);

Pred_1 := Solver.Create_Predicate (Fld_22, Create_Function_Type_P_Returns_Entity_0_Predicate (Bound_Error_Location_1)); 
--# expr-done 2752
Dyn_Var_Bind_Result_2 := Pred_1; Inc_Ref (Dyn_Var_Bind_Result_2);
--# expr-done 2753
And_Pred_4 := Create_And (And_Pred_3, Dyn_Var_Bind_Result_2, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4427:13") else null)); 
--# expr-done 2754
--# expr-start 2757 '<Bind at nodes.lkt:4456:14>' Bind_Result_1 nodes.lkt:4456
--# expr-start 2755 '<FieldAccess for actual_type_var at nodes.lkt:4456:14>' Fld_23 nodes.lkt:4456







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_23 := Ent.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 2755
Fld_23.Value := No_Entity;
Entity_Vars.Reset (Fld_23);





--# expr-start 2756 '<FieldAccess for equation_type at nodes.lkt:4456:38>' Fld_24 nodes.lkt:4456







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start LktNode.equation_type
Fld_24 := Liblktlang.Implementation.Lkt_Node_P_Equation_Type (Node => Ent.Node);
--# end
--# expr-done 2756



   
      Cast_Result_3 := Create_Internal_Entity
        (Node => Fld_24.Node,
         Info => Fld_24.Info);


Bind_Result_1 := Solver.Create_Assign (Fld_23, Cast_Result_3, Solver_Ifc.No_Converter, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4456:14") else null)); 
--# expr-done 2757
And_Pred_5 := Create_And (And_Pred_4, Bind_Result_1, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4426:9") else null)); 
--# expr-done 2758

         Property_Result := And_Pred_5;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_330;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_330;




            raise;
      end;



   return Property_Result;
end Logic_Propagate_P_Xref_Equation;
--# end



   


      

   --
   --  Primitives for Bare_Logic_Unify
   --

   



      
      procedure Initialize_Fields_For_Logic_Unify
        (Self : Bare_Logic_Unify
         ; Logic_Unify_F_Lhs : Bare_Expr
         ; Logic_Unify_F_Rhs : Bare_Expr
        ) is
      begin
            Initialize_Fields_For_Expr
              (Self);

            Self.Logic_Unify_F_Lhs := Logic_Unify_F_Lhs;
            Self.Logic_Unify_F_Rhs := Logic_Unify_F_Rhs;
         

      end Initialize_Fields_For_Logic_Unify;

      
   function Logic_Unify_F_Lhs
     (Node : Bare_Logic_Unify) return Bare_Expr
   is
      

   begin
         
         return Node.Logic_Unify_F_Lhs;
      
   end;

      
   function Logic_Unify_F_Rhs
     (Node : Bare_Logic_Unify) return Bare_Expr
   is
      

   begin
         
         return Node.Logic_Unify_F_Rhs;
      
   end;


   







--# property-start LogicUnify.xref_equation nodes.lkt:4466
pragma Warnings (Off, "is not referenced");
 function Logic_Unify_P_Xref_Equation
  
  (Node : Bare_Logic_Unify
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Logic_Equation
is
   Self : Bare_Logic_Unify  := Bare_Logic_Unify (Node);
     Ent : Internal_Entity_Logic_Unify :=
       Internal_Entity_Logic_Unify'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Logic_Equation;

      
            procedure Finalizer_Scope_331 with Inline_Always;

      Fld : Internal_Entity_Expr;
Fld_1 : Logic_Equation;
Fld_2 : Internal_Entity_Expr;
Fld_3 : Logic_Var;
Fld_4 : Internal_Entity_Named_Type_Decl;
Cast_Result : Internal_Entity;
Bind_Result : Logic_Equation;
And_Pred : Logic_Equation;
Fld_5 : Bare_Expr;
Cast_Result_1 : Bare_Lkt_Node;
Bound_Error_Location : Bare_Lkt_Node;
Fld_6 : Internal_Entity_Expr;
Fld_7 : Logic_Var;
Fld_8 : Internal_Entity_Expr;
Fld_9 : Logic_Var;
Pred : Logic_Equation;
Dyn_Var_Bind_Result : Logic_Equation;
And_Pred_1 : Logic_Equation;
Fld_10 : Internal_Entity_Expr;
Fld_11 : Logic_Equation;
And_Pred_2 : Logic_Equation;
Fld_12 : Internal_Entity_Expr;
Fld_13 : Logic_Var;
Fld_14 : Internal_Entity_Named_Type_Decl;
Cast_Result_2 : Internal_Entity;
Bind_Result_1 : Logic_Equation;
And_Pred_3 : Logic_Equation;
Fld_15 : Bare_Expr;
Cast_Result_3 : Bare_Lkt_Node;
Bound_Error_Location_1 : Bare_Lkt_Node;
Fld_16 : Internal_Entity_Expr;
Fld_17 : Logic_Var;
Fld_18 : Internal_Entity_Expr;
Fld_19 : Logic_Var;
Pred_1 : Logic_Equation;
Dyn_Var_Bind_Result_1 : Logic_Equation;
And_Pred_4 : Logic_Equation;
Fld_20 : Logic_Var;
Fld_21 : Internal_Entity_Named_Type_Decl;
Cast_Result_4 : Internal_Entity;
Bind_Result_2 : Logic_Equation;
And_Pred_5 : Logic_Equation;

            procedure Finalizer_Scope_331 is
            begin
                     Dec_Ref (Fld_1);
                     Dec_Ref (Bind_Result);
                     Dec_Ref (And_Pred);
                     Dec_Ref (Pred);
                     Dec_Ref (Dyn_Var_Bind_Result);
                     Dec_Ref (And_Pred_1);
                     Dec_Ref (Fld_11);
                     Dec_Ref (And_Pred_2);
                     Dec_Ref (Bind_Result_1);
                     Dec_Ref (And_Pred_3);
                     Dec_Ref (Pred_1);
                     Dec_Ref (Dyn_Var_Bind_Result_1);
                     Dec_Ref (And_Pred_4);
                     Dec_Ref (Bind_Result_2);
                     Dec_Ref (And_Pred_5);
            end Finalizer_Scope_331;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 2793 '<LogicBinaryOp And at nodes.lkt:4467:9>' And_Pred_5 nodes.lkt:4467
--# expr-start 2789 '<LogicBinaryOp And at nodes.lkt:4468:13>' And_Pred_4 nodes.lkt:4468
--# expr-start 2781 '<LogicBinaryOp And at nodes.lkt:4469:17>' And_Pred_3 nodes.lkt:4469
--# expr-start 2776 '<LogicBinaryOp And at nodes.lkt:4470:21>' And_Pred_2 nodes.lkt:4470
--# expr-start 2773 '<LogicBinaryOp And at nodes.lkt:4471:25>' And_Pred_1 nodes.lkt:4471
--# expr-start 2765 '<LogicBinaryOp And at nodes.lkt:4472:29>' And_Pred nodes.lkt:4472
--# expr-start 2760 '<FieldAccess for xref_equation at nodes.lkt:4472:29>' Fld_1 nodes.lkt:4472



--# expr-start 2759 '<FieldAccess for lhs at nodes.lkt:4472:29>' Fld nodes.lkt:4472







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Create_Internal_Entity_Expr (Node => Ent.Node.Logic_Unify_F_Lhs, Info => Ent.Info);
--# expr-done 2759



   if Fld.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]LktNode.xref_equation'
Fld_1 := Liblktlang.Implementation.Dispatcher_Lkt_Node_P_Xref_Equation (Node => Fld.Node, E_Info => Fld.Info);
--# end
--# expr-done 2760
--# expr-start 2764 '<Bind at nodes.lkt:4473:34>' Bind_Result nodes.lkt:4473
--# expr-start 2762 '<FieldAccess for expected_type_var at nodes.lkt:4473:34>' Fld_3 nodes.lkt:4473



--# expr-start 2761 '<FieldAccess for lhs at nodes.lkt:4473:34>' Fld_2 nodes.lkt:4473







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_2 := Create_Internal_Entity_Expr (Node => Ent.Node.Logic_Unify_F_Lhs, Info => Ent.Info);
--# expr-done 2761



   if Fld_2.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_3 := Fld_2.Node.Expr_Expected_Type_Var'Unrestricted_Access;
--# expr-done 2762
Fld_3.Value := No_Entity;
Entity_Vars.Reset (Fld_3);





--# expr-start 2763 '<FieldAccess for logicvar_type at nodes.lkt:4474:32>' Fld_4 nodes.lkt:4474







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start LktNode.logicvar_type
Fld_4 := Liblktlang.Implementation.Lkt_Node_P_Logicvar_Type (Node => Ent.Node);
--# end
--# expr-done 2763



   
      Cast_Result := Create_Internal_Entity
        (Node => Fld_4.Node,
         Info => Fld_4.Info);


Bind_Result := Solver.Create_Assign (Fld_3, Cast_Result, Solver_Ifc.No_Converter, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4473:34") else null)); 
--# expr-done 2764
And_Pred := Create_And (Fld_1, Bind_Result, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4472:29") else null)); 
--# expr-done 2765
--# expr-start 2772 '<bind at nodes.lkt:4477:29>' Dyn_Var_Bind_Result nodes.lkt:4477





--# expr-start 2766 '<FieldAccess for lhs at nodes.lkt:4477:51>' Fld_5 nodes.lkt:4477







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_5 := Self.Logic_Unify_F_Lhs;
--# expr-done 2766



   
      Cast_Result_1 := Fld_5;


Bound_Error_Location := Cast_Result_1; 
--# expr-start 2771 '<Predicate on TypeDecl.matching_type at nodes.lkt:4478:29>' Pred nodes.lkt:4478
--# expr-start 2768 '<FieldAccess for expected_type_var at nodes.lkt:4479:33>' Fld_7 nodes.lkt:4479



--# expr-start 2767 '<FieldAccess for lhs at nodes.lkt:4479:33>' Fld_6 nodes.lkt:4479







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_6 := Create_Internal_Entity_Expr (Node => Ent.Node.Logic_Unify_F_Lhs, Info => Ent.Info);
--# expr-done 2767



   if Fld_6.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_7 := Fld_6.Node.Expr_Expected_Type_Var'Unrestricted_Access;
--# expr-done 2768
Fld_7.Value := No_Entity;
Entity_Vars.Reset (Fld_7);
--# expr-start 2770 '<FieldAccess for actual_type_var at nodes.lkt:4480:33>' Fld_9 nodes.lkt:4480



--# expr-start 2769 '<FieldAccess for lhs at nodes.lkt:4480:33>' Fld_8 nodes.lkt:4480







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_8 := Create_Internal_Entity_Expr (Node => Ent.Node.Logic_Unify_F_Lhs, Info => Ent.Info);
--# expr-done 2769



   if Fld_8.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_9 := Fld_8.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 2770
Fld_9.Value := No_Entity;
Entity_Vars.Reset (Fld_9);


Pred := Solver.Create_N_Predicate ((Fld_7, Fld_9), Create_Type_Decl_P_Matching_Type_0_Predicate (2, Bound_Error_Location)); 
--# expr-done 2771
Dyn_Var_Bind_Result := Pred; Inc_Ref (Dyn_Var_Bind_Result);
--# expr-done 2772
And_Pred_1 := Create_And (And_Pred, Dyn_Var_Bind_Result, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4471:25") else null)); 
--# expr-done 2773
--# expr-start 2775 '<FieldAccess for xref_equation at nodes.lkt:4484:26>' Fld_11 nodes.lkt:4484



--# expr-start 2774 '<FieldAccess for rhs at nodes.lkt:4484:26>' Fld_10 nodes.lkt:4484







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_10 := Create_Internal_Entity_Expr (Node => Ent.Node.Logic_Unify_F_Rhs, Info => Ent.Info);
--# expr-done 2774



   if Fld_10.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]LktNode.xref_equation'
Fld_11 := Liblktlang.Implementation.Dispatcher_Lkt_Node_P_Xref_Equation (Node => Fld_10.Node, E_Info => Fld_10.Info);
--# end
--# expr-done 2775
And_Pred_2 := Create_And (And_Pred_1, Fld_11, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4470:21") else null)); 
--# expr-done 2776
--# expr-start 2780 '<Bind at nodes.lkt:4486:22>' Bind_Result_1 nodes.lkt:4486
--# expr-start 2778 '<FieldAccess for expected_type_var at nodes.lkt:4486:22>' Fld_13 nodes.lkt:4486



--# expr-start 2777 '<FieldAccess for rhs at nodes.lkt:4486:22>' Fld_12 nodes.lkt:4486







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_12 := Create_Internal_Entity_Expr (Node => Ent.Node.Logic_Unify_F_Rhs, Info => Ent.Info);
--# expr-done 2777



   if Fld_12.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_13 := Fld_12.Node.Expr_Expected_Type_Var'Unrestricted_Access;
--# expr-done 2778
Fld_13.Value := No_Entity;
Entity_Vars.Reset (Fld_13);





--# expr-start 2779 '<FieldAccess for logicvar_type at nodes.lkt:4486:52>' Fld_14 nodes.lkt:4486







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start LktNode.logicvar_type
Fld_14 := Liblktlang.Implementation.Lkt_Node_P_Logicvar_Type (Node => Ent.Node);
--# end
--# expr-done 2779



   
      Cast_Result_2 := Create_Internal_Entity
        (Node => Fld_14.Node,
         Info => Fld_14.Info);


Bind_Result_1 := Solver.Create_Assign (Fld_13, Cast_Result_2, Solver_Ifc.No_Converter, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4486:22") else null)); 
--# expr-done 2780
And_Pred_3 := Create_And (And_Pred_2, Bind_Result_1, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4469:17") else null)); 
--# expr-done 2781
--# expr-start 2788 '<bind at nodes.lkt:4489:17>' Dyn_Var_Bind_Result_1 nodes.lkt:4489





--# expr-start 2782 '<FieldAccess for rhs at nodes.lkt:4489:39>' Fld_15 nodes.lkt:4489







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_15 := Self.Logic_Unify_F_Rhs;
--# expr-done 2782



   
      Cast_Result_3 := Fld_15;


Bound_Error_Location_1 := Cast_Result_3; 
--# expr-start 2787 '<Predicate on TypeDecl.matching_type at nodes.lkt:4490:17>' Pred_1 nodes.lkt:4490
--# expr-start 2784 '<FieldAccess for expected_type_var at nodes.lkt:4491:21>' Fld_17 nodes.lkt:4491



--# expr-start 2783 '<FieldAccess for rhs at nodes.lkt:4491:21>' Fld_16 nodes.lkt:4491







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_16 := Create_Internal_Entity_Expr (Node => Ent.Node.Logic_Unify_F_Rhs, Info => Ent.Info);
--# expr-done 2783



   if Fld_16.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_17 := Fld_16.Node.Expr_Expected_Type_Var'Unrestricted_Access;
--# expr-done 2784
Fld_17.Value := No_Entity;
Entity_Vars.Reset (Fld_17);
--# expr-start 2786 '<FieldAccess for actual_type_var at nodes.lkt:4492:21>' Fld_19 nodes.lkt:4492



--# expr-start 2785 '<FieldAccess for rhs at nodes.lkt:4492:21>' Fld_18 nodes.lkt:4492







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_18 := Create_Internal_Entity_Expr (Node => Ent.Node.Logic_Unify_F_Rhs, Info => Ent.Info);
--# expr-done 2785



   if Fld_18.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_19 := Fld_18.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 2786
Fld_19.Value := No_Entity;
Entity_Vars.Reset (Fld_19);


Pred_1 := Solver.Create_N_Predicate ((Fld_17, Fld_19), Create_Type_Decl_P_Matching_Type_0_Predicate (2, Bound_Error_Location_1)); 
--# expr-done 2787
Dyn_Var_Bind_Result_1 := Pred_1; Inc_Ref (Dyn_Var_Bind_Result_1);
--# expr-done 2788
And_Pred_4 := Create_And (And_Pred_3, Dyn_Var_Bind_Result_1, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4468:13") else null)); 
--# expr-done 2789
--# expr-start 2792 '<Bind at nodes.lkt:4496:14>' Bind_Result_2 nodes.lkt:4496
--# expr-start 2790 '<FieldAccess for actual_type_var at nodes.lkt:4496:14>' Fld_20 nodes.lkt:4496







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_20 := Ent.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 2790
Fld_20.Value := No_Entity;
Entity_Vars.Reset (Fld_20);





--# expr-start 2791 '<FieldAccess for equation_type at nodes.lkt:4496:38>' Fld_21 nodes.lkt:4496







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start LktNode.equation_type
Fld_21 := Liblktlang.Implementation.Lkt_Node_P_Equation_Type (Node => Ent.Node);
--# end
--# expr-done 2791



   
      Cast_Result_4 := Create_Internal_Entity
        (Node => Fld_21.Node,
         Info => Fld_21.Info);


Bind_Result_2 := Solver.Create_Assign (Fld_20, Cast_Result_4, Solver_Ifc.No_Converter, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4496:14") else null)); 
--# expr-done 2792
And_Pred_5 := Create_And (And_Pred_4, Bind_Result_2, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4467:9") else null)); 
--# expr-done 2793

         Property_Result := And_Pred_5;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_331;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_331;




            raise;
      end;



   return Property_Result;
end Logic_Unify_P_Xref_Equation;
--# end



   


      

   --
   --  Primitives for Bare_Match_Expr
   --

   



      
      procedure Initialize_Fields_For_Match_Expr
        (Self : Bare_Match_Expr
         ; Match_Expr_F_Match_Expr : Bare_Expr
         ; Match_Expr_F_Branches : Bare_Match_Branch_List
        ) is
      begin
            Initialize_Fields_For_Expr
              (Self);

            Self.Match_Expr_F_Match_Expr := Match_Expr_F_Match_Expr;
            Self.Match_Expr_F_Branches := Match_Expr_F_Branches;
         
      Self.Match_Expr_Expected_Branch_Type_Var := Null_Var_Record;

      end Initialize_Fields_For_Match_Expr;

      
   function Match_Expr_F_Match_Expr
     (Node : Bare_Match_Expr) return Bare_Expr
   is
      

   begin
         
         return Node.Match_Expr_F_Match_Expr;
      
   end;

      
   function Match_Expr_F_Branches
     (Node : Bare_Match_Expr) return Bare_Match_Branch_List
   is
      

   begin
         
         return Node.Match_Expr_F_Branches;
      
   end;


   







--# property-start MatchExpr.has_context_free_type nodes.lkt:4507
pragma Warnings (Off, "is not referenced");
 function Match_Expr_P_Has_Context_Free_Type
  
  (Node : Bare_Match_Expr
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Boolean
is
   Self : Bare_Match_Expr  := Bare_Match_Expr (Node);
     Ent : Internal_Entity_Match_Expr :=
       Internal_Entity_Match_Expr'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Boolean;

      
            procedure Finalizer_Scope_332 with Inline_Always;

      Fld : Internal_Entity_Expr_Array_Access;
Fld_1 : Boolean;
Quantifier_Result : Boolean;

            procedure Finalizer_Scope_332 is
            begin
                     Dec_Ref (Fld);
            end Finalizer_Scope_332;


begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         --# expr-start 2796 '<AnyQuantifier at nodes.lkt:4508:9>' Quantifier_Result nodes.lkt:4508








   

   --# expr-start 2794 '<FieldAccess for branch_exprs at nodes.lkt:4508:9>' Fld nodes.lkt:4508







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start MatchExpr.branch_exprs
Fld := Liblktlang.Implementation.Match_Expr_P_Branch_Exprs (Node => Ent.Node, E_Info => Ent.Info);
--# end
--# expr-done 2794

   
      Quantifier_Result := False;
   

   

      

      declare
         
         Collection : constant Internal_Entity_Expr_Array_Access := Fld;
      begin
         for Item_0 of
               Collection.Items
         loop

            
   --# scope-start


               --# bind e Item_0

            
      --# expr-start 2795 '<FieldAccess for has_context_free_type at nodes.lkt:4508:40>' Fld_1 nodes.lkt:4508







   if Item_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]Expr.has_context_free_type'
Fld_1 := Liblktlang.Implementation.Dispatcher_Expr_P_Has_Context_Free_Type (Node => Item_0.Node, E_Info => Item_0.Info);
--# end
--# expr-done 2795
      Quantifier_Result := Fld_1;
   

            
   --# end


               exit when Quantifier_Result;

         end loop;
      end;
   

   
   



--# expr-done 2796

         Property_Result := Quantifier_Result;
         
   --# end
      Finalizer_Scope_332;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_332;




            raise;
      end;



   return Property_Result;
end Match_Expr_P_Has_Context_Free_Type;
--# end

   







--# property-start MatchExpr.branch_exprs nodes.lkt:4511
pragma Warnings (Off, "is not referenced");
 function Match_Expr_P_Branch_Exprs
  
  (Node : Bare_Match_Expr
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Internal_Entity_Expr_Array_Access
is
   Self : Bare_Match_Expr  := Bare_Match_Expr (Node);
     Ent : Internal_Entity_Match_Expr :=
       Internal_Entity_Match_Expr'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Internal_Entity_Expr_Array_Access;

      
            procedure Finalizer_Scope_333 with Inline_Always;

      Fld : Internal_Entity_Match_Branch_List;
Fld_1 : Bare_Match_Branch_List;
Fld_2 : Internal_Entity_Info;
Item_0 : Internal_Entity_Match_Branch;
Bare_Item_0 : Bare_Match_Branch;
Fld_3 : Internal_Entity_Expr;
As_Entity : Internal_Entity_Match_Branch;
Is_Null : Boolean;
If_Result : Internal_Entity_Match_Branch;
Map_Result : Internal_Entity_Expr_Array_Access;

            procedure Finalizer_Scope_333 is
            begin
                     Dec_Ref (Map_Result);
            end Finalizer_Scope_333;


begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         --# expr-start 2799 '<Map at nodes.lkt:4511:47>' Map_Result nodes.lkt:4511








   

   --# expr-start 2797 '<FieldAccess for branches at nodes.lkt:4511:47>' Fld nodes.lkt:4511







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Create_Internal_Entity_Match_Branch_List (Node => Ent.Node.Match_Expr_F_Branches, Info => Ent.Info);
--# expr-done 2797









Fld_1 := Fld.Node;

   
      declare
         Map_Result_Vec : Internal_Entity_Expr_Vectors.Vector;
      begin
   

   

      if Fld_1 = null then
         
      Map_Result := Create_Internal_Entity_Expr_Array (0);
   
      else
         

      declare
         
         Collection : constant Bare_Match_Branch_List := Fld_1;
      begin
         for Untyped_Item_0 of
               Collection.Nodes (1 .. Children_Count (Collection))
         loop
                  
                  Bare_Item_0 := Untyped_Item_0; 
                  



Is_Null := Bare_Item_0 = null; 
if Is_Null then
   
   If_Result := No_Entity_Match_Branch;
else
   








Fld_2 := Fld.Info;

As_Entity := (Info => Fld_2, Node => Bare_Item_0); 
   If_Result := As_Entity;
end if;



                  Item_0 := If_Result; 

            
   --# scope-start


               --# bind b Item_0

            
         
         
      --# expr-start 2798 '<FieldAccess for expr at nodes.lkt:4511:72>' Fld_3 nodes.lkt:4511







   if Item_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_3 := Create_Internal_Entity_Expr (Node => Item_0.Node.Match_Branch_F_Expr, Info => Item_0.Info);
--# expr-done 2798
      

         declare
            Item_To_Append : constant Internal_Entity_Expr := Fld_3;
         begin
            Internal_Entity_Expr_Vectors.Append (Map_Result_Vec, Item_To_Append);
         end;
   
   
   

            
   --# end



         end loop;
      end;
   
      end if;

   

         Map_Result := Create_Internal_Entity_Expr_Array
           (Items_Count => Natural (Internal_Entity_Expr_Vectors.Length (Map_Result_Vec)));
         for I in Map_Result.Items'Range loop
            Map_Result.Items (I) := Internal_Entity_Expr_Vectors.Get
              (Map_Result_Vec,
               I + Internal_Entity_Expr_Vectors.Index_Type'First - Map_Result.Items'First);
         end loop;
         Internal_Entity_Expr_Vectors.Destroy (Map_Result_Vec);

      end;
   



--# expr-done 2799

         Property_Result := Map_Result;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_333;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_333;




            raise;
      end;



   return Property_Result;
end Match_Expr_P_Branch_Exprs;
--# end

   







--# property-start MatchExpr.expected_branch_type_equation nodes.lkt:4516
pragma Warnings (Off, "is not referenced");
 function Match_Expr_P_Expected_Branch_Type_Equation
  
  (Node : Bare_Match_Expr
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Logic_Equation
is
   Self : Bare_Match_Expr  := Bare_Match_Expr (Node);
     Ent : Internal_Entity_Match_Expr :=
       Internal_Entity_Match_Expr'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Logic_Equation;

      
            procedure Finalizer_Scope_334 with Inline_Always;
            procedure Finalizer_Scope_743 with Inline_Always;
            procedure Finalizer_Scope_744 with Inline_Always;

      Local_Logic_Vars : Logic_Var_Array_Access;
Left_Var : Logic_Var_Array_Access;
Fld : Internal_Entity_Expr_Array_Access;
Fld_1 : Boolean;
Map_Result : Internal_Entity_Expr_Array_Access;
Fld_2 : Logic_Var;
Map_Result_1 : Logic_Var_Array_Access;
Scope_Result : Logic_Var_Array_Access;
Fld_3 : Logic_Var;
Array_Lit : Logic_Var_Array_Access;
Result_Var : Logic_Var_Array_Access;
Fld_4 : Logic_Var;
Logic_Vars : Logic_Var_Array_Access;
Bind_Result : Logic_Equation;
Fld_5 : Internal_Entity_Match_Branch_List;
Fld_6 : Bare_Match_Branch_List;
Fld_7 : Internal_Entity_Info;
Item_2 : Internal_Entity_Match_Branch;
Bare_Item_2 : Bare_Match_Branch;
Fld_8 : Internal_Entity_Expr;
Fld_9 : Logic_Var;
Fld_10 : Logic_Var;
Bind_Result_1 : Logic_Equation;
As_Entity : Internal_Entity_Match_Branch;
Is_Null : Boolean;
If_Result : Internal_Entity_Match_Branch;
Map_Result_2 : Logic_Equation_Array_Access;
Logic_Boolean_Op : Logic_Equation;
And_Pred : Logic_Equation;
Let_Result : Logic_Equation;

            procedure Finalizer_Scope_334 is
            begin
                     Dec_Ref (Fld);
                     Dec_Ref (Map_Result);
                     Dec_Ref (Map_Result_1);
                     Dec_Ref (Scope_Result);
                     Dec_Ref (Array_Lit);
                     Dec_Ref (Result_Var);
                     Dec_Ref (Local_Logic_Vars);
                     Dec_Ref (Logic_Vars);
                     Dec_Ref (Bind_Result);
                     Dec_Ref (Map_Result_2);
                     Dec_Ref (Logic_Boolean_Op);
                     Dec_Ref (And_Pred);
                     Dec_Ref (Let_Result);
            end Finalizer_Scope_334;
            procedure Finalizer_Scope_743 is
            begin
                     Dec_Ref (Left_Var);
            end Finalizer_Scope_743;
            procedure Finalizer_Scope_744 is
            begin
                     Dec_Ref (Bind_Result_1);
            end Finalizer_Scope_744;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 2817 '<Let at nodes.lkt:4517:9>' Let_Result nodes.lkt:4517
--# scope-start



--# expr-start 2804 '<Map at nodes.lkt:4518:13>' Map_Result_1 nodes.lkt:4518








   

   --# expr-start 2802 '<Map at nodes.lkt:4518:13>' Map_Result nodes.lkt:4518








   

   --# expr-start 2800 '<FieldAccess for branch_exprs at nodes.lkt:4518:13>' Fld nodes.lkt:4518







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start MatchExpr.branch_exprs
Fld := Liblktlang.Implementation.Match_Expr_P_Branch_Exprs (Node => Ent.Node, E_Info => Ent.Info);
--# end
--# expr-done 2800

   
      declare
         Map_Result_Vec : Internal_Entity_Expr_Vectors.Vector;
      begin
   

   

      

      declare
         
         Collection : constant Internal_Entity_Expr_Array_Access := Fld;
      begin
         for Item_0 of
               Collection.Items
         loop

            
   --# scope-start


               --# bind expr Item_0

            
         --# expr-start 2801 '<FieldAccess for has_context_free_type at nodes.lkt:4518:50>' Fld_1 nodes.lkt:4518







   if Item_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]Expr.has_context_free_type'
Fld_1 := Liblktlang.Implementation.Dispatcher_Expr_P_Has_Context_Free_Type (Node => Item_0.Node, E_Info => Item_0.Info);
--# end
--# expr-done 2801
         if Fld_1 then
            
         
      
      

         declare
            Item_To_Append : constant Internal_Entity_Expr := Item_0;
         begin
            Internal_Entity_Expr_Vectors.Append (Map_Result_Vec, Item_To_Append);
         end;
   
   
         end if;
   

            
   --# end



         end loop;
      end;
   

   

         Map_Result := Create_Internal_Entity_Expr_Array
           (Items_Count => Natural (Internal_Entity_Expr_Vectors.Length (Map_Result_Vec)));
         for I in Map_Result.Items'Range loop
            Map_Result.Items (I) := Internal_Entity_Expr_Vectors.Get
              (Map_Result_Vec,
               I + Internal_Entity_Expr_Vectors.Index_Type'First - Map_Result.Items'First);
         end loop;
         Internal_Entity_Expr_Vectors.Destroy (Map_Result_Vec);

      end;
   



--# expr-done 2802

   
      declare
         Map_Result_1_Vec : Logic_Var_Vectors.Vector;
      begin
   

   

      

      declare
         
         Collection : constant Internal_Entity_Expr_Array_Access := Map_Result;
      begin
         for Item_1 of
               Collection.Items
         loop

            
   --# scope-start


               --# bind expr Item_1

            
         
         
      --# expr-start 2803 '<FieldAccess for actual_type_var at nodes.lkt:4519:28>' Fld_2 nodes.lkt:4519







   if Item_1.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_2 := Item_1.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 2803
      

         declare
            Item_To_Append : constant Logic_Var := Fld_2;
         begin
            Logic_Var_Vectors.Append (Map_Result_1_Vec, Item_To_Append);
         end;
   
   
   

            
   --# end



         end loop;
      end;
   

   

         Map_Result_1 := Create_Logic_Var_Array
           (Items_Count => Natural (Logic_Var_Vectors.Length (Map_Result_1_Vec)));
         for I in Map_Result_1.Items'Range loop
            Map_Result_1.Items (I) := Logic_Var_Vectors.Get
              (Map_Result_1_Vec,
               I + Logic_Var_Vectors.Index_Type'First - Map_Result_1.Items'First);
         end loop;
         Logic_Var_Vectors.Destroy (Map_Result_1_Vec);

      end;
   



--# expr-done 2804
Left_Var := Map_Result_1;

      Inc_Ref (Left_Var);




if Left_Var /= No_Logic_Var_Array_Type then
   



   --# scope-start


   


Scope_Result := Left_Var;
   Inc_Ref (Scope_Result);


   --# end
      Finalizer_Scope_743;


   Result_Var := Scope_Result;
else
   --# expr-start 2806 '<ArrayLiteral at nodes.lkt:4520:17>' Array_Lit nodes.lkt:4520
--# expr-start 2805 '<FieldAccess for expected_type_var at nodes.lkt:4520:18>' Fld_3 nodes.lkt:4520







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_3 := Ent.Node.Expr_Expected_Type_Var'Unrestricted_Access;
--# expr-done 2805
Array_Lit := Create_Logic_Var_Array (Internal_Logic_Var_Array'(1 => Fld_3)); 
--# expr-done 2806
   Result_Var := Array_Lit;
end if;

      Inc_Ref (Result_Var);


Local_Logic_Vars := Result_Var; Inc_Ref (Local_Logic_Vars);
--# bind logic_vars Local_Logic_Vars
--# expr-start 2816 '<LogicBinaryOp And at nodes.lkt:4522:9>' And_Pred nodes.lkt:4522

for Var of Local_Logic_Vars.Items loop
   Var.Value := No_Entity;
   Entity_Vars.Reset (Var);
end loop;
Logic_Vars := Local_Logic_Vars; Inc_Ref (Logic_Vars);
--# expr-start 2808 '<NPropagate at nodes.lkt:4522:9>' Bind_Result nodes.lkt:4522
--# expr-start 2807 '<FieldAccess for expected_branch_type_var at nodes.lkt:4522:9>' Fld_4 nodes.lkt:4522







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_4 := Ent.Node.Match_Expr_Expected_Branch_Type_Var'Unrestricted_Access;
--# expr-done 2807
Fld_4.Value := No_Entity;
Entity_Vars.Reset (Fld_4);


Bind_Result := Solver.Create_N_Propagate (Fld_4, Create_Type_Decl_P_Imprecise_Common_Ancestor_List_0_Functor (Logic_Vars.N), Entity_Vars.Logic_Var_Array (Logic_Vars.Items), Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4522:9") else null)); 
--# expr-done 2808
--# expr-start 2815 '<LogicAll at nodes.lkt:4524:14>' Logic_Boolean_Op nodes.lkt:4524
--# expr-start 2814 '<Map at nodes.lkt:4524:14>' Map_Result_2 nodes.lkt:4524








   

   --# expr-start 2809 '<FieldAccess for branches at nodes.lkt:4524:14>' Fld_5 nodes.lkt:4524







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_5 := Create_Internal_Entity_Match_Branch_List (Node => Ent.Node.Match_Expr_F_Branches, Info => Ent.Info);
--# expr-done 2809









Fld_6 := Fld_5.Node;

   
      declare
         Map_Result_2_Vec : Logic_Equation_Vectors.Vector;
      begin
   

   

      if Fld_6 = null then
         
      Map_Result_2 := Create_Logic_Equation_Array (0);
   
      else
         

      declare
         
         Collection : constant Bare_Match_Branch_List := Fld_6;
      begin
         for Untyped_Item_2 of
               Collection.Nodes (1 .. Children_Count (Collection))
         loop
                  
                  Bare_Item_2 := Untyped_Item_2; 
                  



Is_Null := Bare_Item_2 = null; 
if Is_Null then
   
   If_Result := No_Entity_Match_Branch;
else
   








Fld_7 := Fld_5.Info;

As_Entity := (Info => Fld_7, Node => Bare_Item_2); 
   If_Result := As_Entity;
end if;



                  Item_2 := If_Result; 

            
   --# scope-start


               --# bind b Item_2

            
         
         
      --# expr-start 2813 '<Bind at nodes.lkt:4525:20>' Bind_Result_1 nodes.lkt:4525
--# expr-start 2811 '<FieldAccess for expected_type_var at nodes.lkt:4525:20>' Fld_9 nodes.lkt:4525



--# expr-start 2810 '<FieldAccess for expr at nodes.lkt:4525:20>' Fld_8 nodes.lkt:4525







   if Item_2.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_8 := Create_Internal_Entity_Expr (Node => Item_2.Node.Match_Branch_F_Expr, Info => Item_2.Info);
--# expr-done 2810



   if Fld_8.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_9 := Fld_8.Node.Expr_Expected_Type_Var'Unrestricted_Access;
--# expr-done 2811
Fld_9.Value := No_Entity;
Entity_Vars.Reset (Fld_9);
--# expr-start 2812 '<FieldAccess for expected_branch_type_var at nodes.lkt:4525:49>' Fld_10 nodes.lkt:4525







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_10 := Ent.Node.Match_Expr_Expected_Branch_Type_Var'Unrestricted_Access;
--# expr-done 2812
Fld_10.Value := No_Entity;
Entity_Vars.Reset (Fld_10);
Bind_Result_1 := Solver.Create_Unify (Fld_9, Fld_10, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4525:20") else null)); 
--# expr-done 2813
      

         declare
            Item_To_Append : constant Logic_Equation := Bind_Result_1;
         begin
               Inc_Ref (Item_To_Append);
            Logic_Equation_Vectors.Append (Map_Result_2_Vec, Item_To_Append);
         end;
   
   
   

            
   --# end
      Finalizer_Scope_744;



         end loop;
      end;
   
      end if;

   

         Map_Result_2 := Create_Logic_Equation_Array
           (Items_Count => Natural (Logic_Equation_Vectors.Length (Map_Result_2_Vec)));
         for I in Map_Result_2.Items'Range loop
            Map_Result_2.Items (I) := Logic_Equation_Vectors.Get
              (Map_Result_2_Vec,
               I + Logic_Equation_Vectors.Index_Type'First - Map_Result_2.Items'First);
         end loop;
         Logic_Equation_Vectors.Destroy (Map_Result_2_Vec);

      end;
   



--# expr-done 2814
Logic_Boolean_Op := Solver.Create_All (Relation_Array (Map_Result_2.Items), (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4524:14") else null)); 
--# expr-done 2815
And_Pred := Create_And (Bind_Result, Logic_Boolean_Op, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4522:9") else null)); 
--# expr-done 2816
Let_Result := And_Pred; Inc_Ref (Let_Result);
--# end
--# expr-done 2817

         Property_Result := Let_Result;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_334;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_334;
                     Finalizer_Scope_743;
                     Finalizer_Scope_744;




            raise;
      end;



   return Property_Result;
end Match_Expr_P_Expected_Branch_Type_Equation;
--# end

   







--# property-start MatchExpr.xref_equation nodes.lkt:4529
pragma Warnings (Off, "is not referenced");
 function Match_Expr_P_Xref_Equation
  
  (Node : Bare_Match_Expr
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Logic_Equation
is
   Self : Bare_Match_Expr  := Bare_Match_Expr (Node);
     Ent : Internal_Entity_Match_Expr :=
       Internal_Entity_Match_Expr'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Logic_Equation;

      
            procedure Finalizer_Scope_335 with Inline_Always;
            procedure Finalizer_Scope_745 with Inline_Always;

      Fld : Logic_Equation;
Fld_1 : Internal_Entity_Match_Branch_List;
Fld_2 : Bare_Match_Branch_List;
Fld_3 : Internal_Entity_Info;
Item_0 : Internal_Entity_Match_Branch;
Bare_Item_0 : Bare_Match_Branch;
Fld_4 : Internal_Entity_Expr;
Fld_5 : Logic_Equation;
Fld_6 : Internal_Entity_Expr;
Fld_7 : Bare_Expr;
Cast_Result : Bare_Lkt_Node;
Bound_Error_Location : Bare_Lkt_Node;
Fld_8 : Internal_Entity_Expr;
Fld_9 : Logic_Var;
Fld_10 : Internal_Entity_Expr;
Fld_11 : Logic_Var;
Pred : Logic_Equation;
Dyn_Var_Bind_Result : Logic_Equation;
And_Pred : Logic_Equation;
As_Entity : Internal_Entity_Match_Branch;
Is_Null : Boolean;
If_Result : Internal_Entity_Match_Branch;
Map_Result : Logic_Equation_Array_Access;
Logic_Boolean_Op : Logic_Equation;
And_Pred_1 : Logic_Equation;
Fld_12 : Logic_Var;
Fld_13 : Internal_Entity_Expr_Array_Access;
Fld_14 : Logic_Var;
Map_Result_1 : Logic_Var_Array_Access;
Logic_Vars : Logic_Var_Array_Access;
Bind_Result : Logic_Equation;
And_Pred_2 : Logic_Equation;

            procedure Finalizer_Scope_335 is
            begin
                     Dec_Ref (Fld);
                     Dec_Ref (Map_Result);
                     Dec_Ref (Logic_Boolean_Op);
                     Dec_Ref (And_Pred_1);
                     Dec_Ref (Fld_13);
                     Dec_Ref (Map_Result_1);
                     Dec_Ref (Logic_Vars);
                     Dec_Ref (Bind_Result);
                     Dec_Ref (And_Pred_2);
            end Finalizer_Scope_335;
            procedure Finalizer_Scope_745 is
            begin
                     Dec_Ref (Fld_5);
                     Dec_Ref (Pred);
                     Dec_Ref (Dyn_Var_Bind_Result);
                     Dec_Ref (And_Pred);
            end Finalizer_Scope_745;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 2839 '<LogicBinaryOp And at nodes.lkt:4530:9>' And_Pred_2 nodes.lkt:4530
--# expr-start 2833 '<LogicBinaryOp And at nodes.lkt:4531:13>' And_Pred_1 nodes.lkt:4531
--# expr-start 2818 '<FieldAccess for expected_branch_type_equation at nodes.lkt:4531:13>' Fld nodes.lkt:4531







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start MatchExpr.expected_branch_type_equation
Fld := Liblktlang.Implementation.Match_Expr_P_Expected_Branch_Type_Equation (Node => Ent.Node, E_Info => Ent.Info);
--# end
--# expr-done 2818
--# expr-start 2832 '<LogicAll at nodes.lkt:4532:18>' Logic_Boolean_Op nodes.lkt:4532
--# expr-start 2831 '<Map at nodes.lkt:4532:18>' Map_Result nodes.lkt:4532








   

   --# expr-start 2819 '<FieldAccess for branches at nodes.lkt:4532:18>' Fld_1 nodes.lkt:4532







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_1 := Create_Internal_Entity_Match_Branch_List (Node => Ent.Node.Match_Expr_F_Branches, Info => Ent.Info);
--# expr-done 2819









Fld_2 := Fld_1.Node;

   
      declare
         Map_Result_Vec : Logic_Equation_Vectors.Vector;
      begin
   

   

      if Fld_2 = null then
         
      Map_Result := Create_Logic_Equation_Array (0);
   
      else
         

      declare
         
         Collection : constant Bare_Match_Branch_List := Fld_2;
      begin
         for Untyped_Item_0 of
               Collection.Nodes (1 .. Children_Count (Collection))
         loop
                  
                  Bare_Item_0 := Untyped_Item_0; 
                  



Is_Null := Bare_Item_0 = null; 
if Is_Null then
   
   If_Result := No_Entity_Match_Branch;
else
   








Fld_3 := Fld_1.Info;

As_Entity := (Info => Fld_3, Node => Bare_Item_0); 
   If_Result := As_Entity;
end if;



                  Item_0 := If_Result; 

            
   --# scope-start


               --# bind mb Item_0

            
         
         
      --# expr-start 2830 '<LogicBinaryOp And at nodes.lkt:4534:17>' And_Pred nodes.lkt:4534
--# expr-start 2821 '<FieldAccess for xref_equation at nodes.lkt:4534:17>' Fld_5 nodes.lkt:4534



--# expr-start 2820 '<FieldAccess for expr at nodes.lkt:4534:17>' Fld_4 nodes.lkt:4534







   if Item_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_4 := Create_Internal_Entity_Expr (Node => Item_0.Node.Match_Branch_F_Expr, Info => Item_0.Info);
--# expr-done 2820



   if Fld_4.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]LktNode.xref_equation'
Fld_5 := Liblktlang.Implementation.Dispatcher_Lkt_Node_P_Xref_Equation (Node => Fld_4.Node, E_Info => Fld_4.Info);
--# end
--# expr-done 2821
--# expr-start 2829 '<bind at nodes.lkt:4536:21>' Dyn_Var_Bind_Result nodes.lkt:4536





--# expr-start 2823 '<FieldAccess for node at nodes.lkt:4536:43>' Fld_7 nodes.lkt:4536



--# expr-start 2822 '<FieldAccess for expr at nodes.lkt:4536:43>' Fld_6 nodes.lkt:4536







   if Item_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_6 := Create_Internal_Entity_Expr (Node => Item_0.Node.Match_Branch_F_Expr, Info => Item_0.Info);
--# expr-done 2822





Fld_7 := Fld_6.Node;
--# expr-done 2823



   
      Cast_Result := Fld_7;


Bound_Error_Location := Cast_Result; 
--# expr-start 2828 '<Predicate on TypeDecl.matching_type at nodes.lkt:4537:21>' Pred nodes.lkt:4537
--# expr-start 2825 '<FieldAccess for expected_type_var at nodes.lkt:4538:25>' Fld_9 nodes.lkt:4538



--# expr-start 2824 '<FieldAccess for expr at nodes.lkt:4538:25>' Fld_8 nodes.lkt:4538







   if Item_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_8 := Create_Internal_Entity_Expr (Node => Item_0.Node.Match_Branch_F_Expr, Info => Item_0.Info);
--# expr-done 2824



   if Fld_8.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_9 := Fld_8.Node.Expr_Expected_Type_Var'Unrestricted_Access;
--# expr-done 2825
Fld_9.Value := No_Entity;
Entity_Vars.Reset (Fld_9);
--# expr-start 2827 '<FieldAccess for actual_type_var at nodes.lkt:4539:25>' Fld_11 nodes.lkt:4539



--# expr-start 2826 '<FieldAccess for expr at nodes.lkt:4539:25>' Fld_10 nodes.lkt:4539







   if Item_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_10 := Create_Internal_Entity_Expr (Node => Item_0.Node.Match_Branch_F_Expr, Info => Item_0.Info);
--# expr-done 2826



   if Fld_10.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_11 := Fld_10.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 2827
Fld_11.Value := No_Entity;
Entity_Vars.Reset (Fld_11);


Pred := Solver.Create_N_Predicate ((Fld_9, Fld_11), Create_Type_Decl_P_Matching_Type_0_Predicate (2, Bound_Error_Location)); 
--# expr-done 2828
Dyn_Var_Bind_Result := Pred; Inc_Ref (Dyn_Var_Bind_Result);
--# expr-done 2829
And_Pred := Create_And (Fld_5, Dyn_Var_Bind_Result, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4534:17") else null)); 
--# expr-done 2830
      

         declare
            Item_To_Append : constant Logic_Equation := And_Pred;
         begin
               Inc_Ref (Item_To_Append);
            Logic_Equation_Vectors.Append (Map_Result_Vec, Item_To_Append);
         end;
   
   
   

            
   --# end
      Finalizer_Scope_745;



         end loop;
      end;
   
      end if;

   

         Map_Result := Create_Logic_Equation_Array
           (Items_Count => Natural (Logic_Equation_Vectors.Length (Map_Result_Vec)));
         for I in Map_Result.Items'Range loop
            Map_Result.Items (I) := Logic_Equation_Vectors.Get
              (Map_Result_Vec,
               I + Logic_Equation_Vectors.Index_Type'First - Map_Result.Items'First);
         end loop;
         Logic_Equation_Vectors.Destroy (Map_Result_Vec);

      end;
   



--# expr-done 2831
Logic_Boolean_Op := Solver.Create_All (Relation_Array (Map_Result.Items), (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4532:18") else null)); 
--# expr-done 2832
And_Pred_1 := Create_And (Fld, Logic_Boolean_Op, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4531:13") else null)); 
--# expr-done 2833
--# expr-start 2836 '<Map at nodes.lkt:4546:13>' Map_Result_1 nodes.lkt:4546








   

   --# expr-start 2834 '<FieldAccess for branch_exprs at nodes.lkt:4546:13>' Fld_13 nodes.lkt:4546







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start MatchExpr.branch_exprs
Fld_13 := Liblktlang.Implementation.Match_Expr_P_Branch_Exprs (Node => Ent.Node, E_Info => Ent.Info);
--# end
--# expr-done 2834

   
      declare
         Map_Result_1_Vec : Logic_Var_Vectors.Vector;
      begin
   

   

      

      declare
         
         Collection : constant Internal_Entity_Expr_Array_Access := Fld_13;
      begin
         for Item_1 of
               Collection.Items
         loop

            
   --# scope-start


               --# bind e Item_1

            
         
         
      --# expr-start 2835 '<FieldAccess for actual_type_var at nodes.lkt:4546:44>' Fld_14 nodes.lkt:4546







   if Item_1.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_14 := Item_1.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 2835
      

         declare
            Item_To_Append : constant Logic_Var := Fld_14;
         begin
            Logic_Var_Vectors.Append (Map_Result_1_Vec, Item_To_Append);
         end;
   
   
   

            
   --# end



         end loop;
      end;
   

   

         Map_Result_1 := Create_Logic_Var_Array
           (Items_Count => Natural (Logic_Var_Vectors.Length (Map_Result_1_Vec)));
         for I in Map_Result_1.Items'Range loop
            Map_Result_1.Items (I) := Logic_Var_Vectors.Get
              (Map_Result_1_Vec,
               I + Logic_Var_Vectors.Index_Type'First - Map_Result_1.Items'First);
         end loop;
         Logic_Var_Vectors.Destroy (Map_Result_1_Vec);

      end;
   



--# expr-done 2836
for Var of Map_Result_1.Items loop
   Var.Value := No_Entity;
   Entity_Vars.Reset (Var);
end loop;
Logic_Vars := Map_Result_1; Inc_Ref (Logic_Vars);
--# expr-start 2838 '<NPropagate at nodes.lkt:4544:14>' Bind_Result nodes.lkt:4544
--# expr-start 2837 '<FieldAccess for actual_type_var at nodes.lkt:4544:14>' Fld_12 nodes.lkt:4544







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_12 := Ent.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 2837
Fld_12.Value := No_Entity;
Entity_Vars.Reset (Fld_12);


Bind_Result := Solver.Create_N_Propagate (Fld_12, Create_Type_Decl_P_Imprecise_Common_Ancestor_List_0_Functor (Logic_Vars.N), Entity_Vars.Logic_Var_Array (Logic_Vars.Items), Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4544:14") else null)); 
--# expr-done 2838
And_Pred_2 := Create_And (And_Pred_1, Bind_Result, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4530:9") else null)); 
--# expr-done 2839

         Property_Result := And_Pred_2;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_335;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_335;
                     Finalizer_Scope_745;




            raise;
      end;



   return Property_Result;
end Match_Expr_P_Xref_Equation;
--# end



   


      

   --
   --  Primitives for Bare_Not_Expr
   --

   



      
      procedure Initialize_Fields_For_Not_Expr
        (Self : Bare_Not_Expr
         ; Not_Expr_F_Expr : Bare_Expr
        ) is
      begin
            Initialize_Fields_For_Expr
              (Self);

            Self.Not_Expr_F_Expr := Not_Expr_F_Expr;
         

      end Initialize_Fields_For_Not_Expr;

      
   function Not_Expr_F_Expr
     (Node : Bare_Not_Expr) return Bare_Expr
   is
      

   begin
         
         return Node.Not_Expr_F_Expr;
      
   end;


   







--# property-start NotExpr.xref_equation nodes.lkt:4555
pragma Warnings (Off, "is not referenced");
 function Not_Expr_P_Xref_Equation
  
  (Node : Bare_Not_Expr
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Logic_Equation
is
   Self : Bare_Not_Expr  := Bare_Not_Expr (Node);
     Ent : Internal_Entity_Not_Expr :=
       Internal_Entity_Not_Expr'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Logic_Equation;

      
            procedure Finalizer_Scope_336 with Inline_Always;

      Fld : Internal_Entity_Expr;
Fld_1 : Logic_Equation;
Fld_2 : Logic_Var;
Fld_3 : Internal_Entity_Named_Type_Decl;
Cast_Result : Internal_Entity;
Bind_Result : Logic_Equation;
And_Pred : Logic_Equation;
Fld_4 : Internal_Entity_Expr;
Fld_5 : Logic_Var;
Fld_6 : Internal_Entity_Named_Type_Decl;
Cast_Result_1 : Internal_Entity;
Bind_Result_1 : Logic_Equation;
And_Pred_1 : Logic_Equation;
Cast_Expr : Bare_Not_Expr;
Cast_Result_2 : Bare_Lkt_Node;
Bound_Error_Location : Bare_Lkt_Node;
Fld_7 : Internal_Entity_Expr;
Fld_8 : Logic_Var;
Fld_9 : Internal_Entity_Expr;
Fld_10 : Logic_Var;
Pred : Logic_Equation;
Dyn_Var_Bind_Result : Logic_Equation;
And_Pred_2 : Logic_Equation;

            procedure Finalizer_Scope_336 is
            begin
                     Dec_Ref (Fld_1);
                     Dec_Ref (Bind_Result);
                     Dec_Ref (And_Pred);
                     Dec_Ref (Bind_Result_1);
                     Dec_Ref (And_Pred_1);
                     Dec_Ref (Pred);
                     Dec_Ref (Dyn_Var_Bind_Result);
                     Dec_Ref (And_Pred_2);
            end Finalizer_Scope_336;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 2857 '<LogicBinaryOp And at nodes.lkt:4556:9>' And_Pred_2 nodes.lkt:4556
--# expr-start 2850 '<LogicBinaryOp And at nodes.lkt:4557:13>' And_Pred_1 nodes.lkt:4557
--# expr-start 2845 '<LogicBinaryOp And at nodes.lkt:4558:17>' And_Pred nodes.lkt:4558
--# expr-start 2841 '<FieldAccess for xref_equation at nodes.lkt:4558:17>' Fld_1 nodes.lkt:4558



--# expr-start 2840 '<FieldAccess for expr at nodes.lkt:4558:17>' Fld nodes.lkt:4558







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Create_Internal_Entity_Expr (Node => Ent.Node.Not_Expr_F_Expr, Info => Ent.Info);
--# expr-done 2840



   if Fld.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]LktNode.xref_equation'
Fld_1 := Liblktlang.Implementation.Dispatcher_Lkt_Node_P_Xref_Equation (Node => Fld.Node, E_Info => Fld.Info);
--# end
--# expr-done 2841
--# expr-start 2844 '<Bind at nodes.lkt:4559:22>' Bind_Result nodes.lkt:4559
--# expr-start 2842 '<FieldAccess for actual_type_var at nodes.lkt:4559:22>' Fld_2 nodes.lkt:4559







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_2 := Ent.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 2842
Fld_2.Value := No_Entity;
Entity_Vars.Reset (Fld_2);





--# expr-start 2843 '<FieldAccess for bool_type at nodes.lkt:4559:46>' Fld_3 nodes.lkt:4559







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start LktNode.bool_type
Fld_3 := Liblktlang.Implementation.Lkt_Node_P_Bool_Type (Node => Ent.Node);
--# end
--# expr-done 2843



   
      Cast_Result := Create_Internal_Entity
        (Node => Fld_3.Node,
         Info => Fld_3.Info);


Bind_Result := Solver.Create_Assign (Fld_2, Cast_Result, Solver_Ifc.No_Converter, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4559:22") else null)); 
--# expr-done 2844
And_Pred := Create_And (Fld_1, Bind_Result, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4558:17") else null)); 
--# expr-done 2845
--# expr-start 2849 '<Bind at nodes.lkt:4561:18>' Bind_Result_1 nodes.lkt:4561
--# expr-start 2847 '<FieldAccess for expected_type_var at nodes.lkt:4561:18>' Fld_5 nodes.lkt:4561



--# expr-start 2846 '<FieldAccess for expr at nodes.lkt:4561:18>' Fld_4 nodes.lkt:4561







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_4 := Create_Internal_Entity_Expr (Node => Ent.Node.Not_Expr_F_Expr, Info => Ent.Info);
--# expr-done 2846



   if Fld_4.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_5 := Fld_4.Node.Expr_Expected_Type_Var'Unrestricted_Access;
--# expr-done 2847
Fld_5.Value := No_Entity;
Entity_Vars.Reset (Fld_5);





--# expr-start 2848 '<FieldAccess for bool_type at nodes.lkt:4561:49>' Fld_6 nodes.lkt:4561







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start LktNode.bool_type
Fld_6 := Liblktlang.Implementation.Lkt_Node_P_Bool_Type (Node => Ent.Node);
--# end
--# expr-done 2848



   
      Cast_Result_1 := Create_Internal_Entity
        (Node => Fld_6.Node,
         Info => Fld_6.Info);


Bind_Result_1 := Solver.Create_Assign (Fld_5, Cast_Result_1, Solver_Ifc.No_Converter, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4561:18") else null)); 
--# expr-done 2849
And_Pred_1 := Create_And (And_Pred, Bind_Result_1, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4557:13") else null)); 
--# expr-done 2850
--# expr-start 2856 '<bind at nodes.lkt:4564:13>' Dyn_Var_Bind_Result nodes.lkt:4564






Cast_Expr := Self; 



   
      Cast_Result_2 := Cast_Expr;


Bound_Error_Location := Cast_Result_2; 
--# expr-start 2855 '<Predicate on TypeDecl.matching_type at nodes.lkt:4565:13>' Pred nodes.lkt:4565
--# expr-start 2852 '<FieldAccess for expected_type_var at nodes.lkt:4566:17>' Fld_8 nodes.lkt:4566



--# expr-start 2851 '<FieldAccess for expr at nodes.lkt:4566:17>' Fld_7 nodes.lkt:4566







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_7 := Create_Internal_Entity_Expr (Node => Ent.Node.Not_Expr_F_Expr, Info => Ent.Info);
--# expr-done 2851



   if Fld_7.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_8 := Fld_7.Node.Expr_Expected_Type_Var'Unrestricted_Access;
--# expr-done 2852
Fld_8.Value := No_Entity;
Entity_Vars.Reset (Fld_8);
--# expr-start 2854 '<FieldAccess for actual_type_var at nodes.lkt:4567:17>' Fld_10 nodes.lkt:4567



--# expr-start 2853 '<FieldAccess for expr at nodes.lkt:4567:17>' Fld_9 nodes.lkt:4567







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_9 := Create_Internal_Entity_Expr (Node => Ent.Node.Not_Expr_F_Expr, Info => Ent.Info);
--# expr-done 2853



   if Fld_9.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_10 := Fld_9.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 2854
Fld_10.Value := No_Entity;
Entity_Vars.Reset (Fld_10);


Pred := Solver.Create_N_Predicate ((Fld_8, Fld_10), Create_Type_Decl_P_Matching_Type_0_Predicate (2, Bound_Error_Location)); 
--# expr-done 2855
Dyn_Var_Bind_Result := Pred; Inc_Ref (Dyn_Var_Bind_Result);
--# expr-done 2856
And_Pred_2 := Create_And (And_Pred_1, Dyn_Var_Bind_Result, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4556:9") else null)); 
--# expr-done 2857

         Property_Result := And_Pred_2;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_336;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_336;




            raise;
      end;



   return Property_Result;
end Not_Expr_P_Xref_Equation;
--# end



   


      

   --
   --  Primitives for Bare_Paren_Expr
   --

   



      
      procedure Initialize_Fields_For_Paren_Expr
        (Self : Bare_Paren_Expr
         ; Paren_Expr_F_Expr : Bare_Expr
        ) is
      begin
            Initialize_Fields_For_Expr
              (Self);

            Self.Paren_Expr_F_Expr := Paren_Expr_F_Expr;
         

      end Initialize_Fields_For_Paren_Expr;

      
   function Paren_Expr_F_Expr
     (Node : Bare_Paren_Expr) return Bare_Expr
   is
      

   begin
         
         return Node.Paren_Expr_F_Expr;
      
   end;


   







--# property-start ParenExpr.expected_type_equation nodes.lkt:4577
pragma Warnings (Off, "is not referenced");
 function Paren_Expr_P_Expected_Type_Equation
  
  (Node : Bare_Paren_Expr
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Logic_Equation
is
   Self : Bare_Paren_Expr  := Bare_Paren_Expr (Node);
     Ent : Internal_Entity_Paren_Expr :=
       Internal_Entity_Paren_Expr'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Logic_Equation;

      
            procedure Finalizer_Scope_337 with Inline_Always;

      Fld : Internal_Entity_Expr;
Fld_1 : Logic_Var;
Fld_2 : Internal_Entity_Type_Decl;
Cast_Result : Internal_Entity;
Bind_Result : Logic_Equation;

            procedure Finalizer_Scope_337 is
            begin
                     Dec_Ref (Bind_Result);
            end Finalizer_Scope_337;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 2861 '<Bind at nodes.lkt:4578:9>' Bind_Result nodes.lkt:4578
--# expr-start 2859 '<FieldAccess for expected_type_var at nodes.lkt:4578:9>' Fld_1 nodes.lkt:4578



--# expr-start 2858 '<FieldAccess for expr at nodes.lkt:4578:9>' Fld nodes.lkt:4578







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Create_Internal_Entity_Expr (Node => Ent.Node.Paren_Expr_F_Expr, Info => Ent.Info);
--# expr-done 2858



   if Fld.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_1 := Fld.Node.Expr_Expected_Type_Var'Unrestricted_Access;
--# expr-done 2859
Fld_1.Value := No_Entity;
Entity_Vars.Reset (Fld_1);





--# expr-start 2860 '<FieldAccess for get_expected_type at nodes.lkt:4578:40>' Fld_2 nodes.lkt:4578







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start Expr.get_expected_type
Fld_2 := Liblktlang.Implementation.Expr_P_Get_Expected_Type (Node => Ent.Node, E_Info => Ent.Info);
--# end
--# expr-done 2860



   
      Cast_Result := Create_Internal_Entity
        (Node => Fld_2.Node,
         Info => Fld_2.Info);


Bind_Result := Solver.Create_Assign (Fld_1, Cast_Result, Solver_Ifc.No_Converter, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4578:9") else null)); 
--# expr-done 2861

         Property_Result := Bind_Result;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_337;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_337;




            raise;
      end;



   return Property_Result;
end Paren_Expr_P_Expected_Type_Equation;
--# end

   







--# property-start ParenExpr.xref_equation nodes.lkt:4580
pragma Warnings (Off, "is not referenced");
 function Paren_Expr_P_Xref_Equation
  
  (Node : Bare_Paren_Expr
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Logic_Equation
is
   Self : Bare_Paren_Expr  := Bare_Paren_Expr (Node);
     Ent : Internal_Entity_Paren_Expr :=
       Internal_Entity_Paren_Expr'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Logic_Equation;

      
            procedure Finalizer_Scope_338 with Inline_Always;

      Fld : Internal_Entity_Expr;
Fld_1 : Logic_Equation;
Fld_2 : Logic_Var;
Fld_3 : Internal_Entity_Expr;
Fld_4 : Logic_Var;
Bind_Result : Logic_Equation;
And_Pred : Logic_Equation;
Fld_5 : Internal_Entity_Expr;
Fld_6 : Logic_Var;
Fld_7 : Internal_Entity_Type_Decl;
Cast_Result : Internal_Entity;
Bind_Result_1 : Logic_Equation;
Fld_8 : Internal_Entity_Expr;
Fld_9 : Logic_Var;
Fld_10 : Logic_Var;
Bind_Result_2 : Logic_Equation;
Fld_11 : Boolean;
If_Result : Logic_Equation;
And_Pred_1 : Logic_Equation;

            procedure Finalizer_Scope_338 is
            begin
                     Dec_Ref (Fld_1);
                     Dec_Ref (Bind_Result);
                     Dec_Ref (And_Pred);
                     Dec_Ref (Bind_Result_1);
                     Dec_Ref (Bind_Result_2);
                     Dec_Ref (If_Result);
                     Dec_Ref (And_Pred_1);
            end Finalizer_Scope_338;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 2879 '<LogicBinaryOp And at nodes.lkt:4581:9>' And_Pred_1 nodes.lkt:4581
--# expr-start 2868 '<LogicBinaryOp And at nodes.lkt:4582:13>' And_Pred nodes.lkt:4582
--# expr-start 2863 '<FieldAccess for xref_equation at nodes.lkt:4582:13>' Fld_1 nodes.lkt:4582



--# expr-start 2862 '<FieldAccess for expr at nodes.lkt:4582:13>' Fld nodes.lkt:4582







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Create_Internal_Entity_Expr (Node => Ent.Node.Paren_Expr_F_Expr, Info => Ent.Info);
--# expr-done 2862



   if Fld.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]LktNode.xref_equation'
Fld_1 := Liblktlang.Implementation.Dispatcher_Lkt_Node_P_Xref_Equation (Node => Fld.Node, E_Info => Fld.Info);
--# end
--# expr-done 2863
--# expr-start 2867 '<Bind at nodes.lkt:4583:18>' Bind_Result nodes.lkt:4583
--# expr-start 2864 '<FieldAccess for actual_type_var at nodes.lkt:4583:18>' Fld_2 nodes.lkt:4583







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_2 := Ent.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 2864
Fld_2.Value := No_Entity;
Entity_Vars.Reset (Fld_2);
--# expr-start 2866 '<FieldAccess for actual_type_var at nodes.lkt:4583:43>' Fld_4 nodes.lkt:4583



--# expr-start 2865 '<FieldAccess for expr at nodes.lkt:4583:43>' Fld_3 nodes.lkt:4583







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_3 := Create_Internal_Entity_Expr (Node => Ent.Node.Paren_Expr_F_Expr, Info => Ent.Info);
--# expr-done 2865



   if Fld_3.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_4 := Fld_3.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 2866
Fld_4.Value := No_Entity;
Entity_Vars.Reset (Fld_4);
Bind_Result := Solver.Create_Unify (Fld_2, Fld_4, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4583:18") else null)); 
--# expr-done 2867
And_Pred := Create_And (Fld_1, Bind_Result, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4582:13") else null)); 
--# expr-done 2868
--# expr-start 2878 '<If at nodes.lkt:4586:13>' If_Result nodes.lkt:4586



--# expr-start 2869 '<FieldAccess for xref_entry_point at nodes.lkt:4586:16>' Fld_11 nodes.lkt:4586







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]LktNode.xref_entry_point'
Fld_11 := Liblktlang.Implementation.Dispatcher_Lkt_Node_P_Xref_Entry_Point (Node => Ent.Node, E_Info => Ent.Info);
--# end
--# expr-done 2869
if Fld_11 then
   --# expr-start 2873 '<Bind at nodes.lkt:4587:18>' Bind_Result_1 nodes.lkt:4587
--# expr-start 2871 '<FieldAccess for expected_type_var at nodes.lkt:4587:18>' Fld_6 nodes.lkt:4587



--# expr-start 2870 '<FieldAccess for expr at nodes.lkt:4587:18>' Fld_5 nodes.lkt:4587







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_5 := Create_Internal_Entity_Expr (Node => Ent.Node.Paren_Expr_F_Expr, Info => Ent.Info);
--# expr-done 2870



   if Fld_5.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_6 := Fld_5.Node.Expr_Expected_Type_Var'Unrestricted_Access;
--# expr-done 2871
Fld_6.Value := No_Entity;
Entity_Vars.Reset (Fld_6);





--# expr-start 2872 '<FieldAccess for get_expected_type at nodes.lkt:4587:49>' Fld_7 nodes.lkt:4587







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start Expr.get_expected_type
Fld_7 := Liblktlang.Implementation.Expr_P_Get_Expected_Type (Node => Ent.Node, E_Info => Ent.Info);
--# end
--# expr-done 2872



   
      Cast_Result := Create_Internal_Entity
        (Node => Fld_7.Node,
         Info => Fld_7.Info);


Bind_Result_1 := Solver.Create_Assign (Fld_6, Cast_Result, Solver_Ifc.No_Converter, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4587:18") else null)); 
--# expr-done 2873
   If_Result := Bind_Result_1;
else
   --# expr-start 2877 '<Bind at nodes.lkt:4588:18>' Bind_Result_2 nodes.lkt:4588
--# expr-start 2875 '<FieldAccess for expected_type_var at nodes.lkt:4588:18>' Fld_9 nodes.lkt:4588



--# expr-start 2874 '<FieldAccess for expr at nodes.lkt:4588:18>' Fld_8 nodes.lkt:4588







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_8 := Create_Internal_Entity_Expr (Node => Ent.Node.Paren_Expr_F_Expr, Info => Ent.Info);
--# expr-done 2874



   if Fld_8.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_9 := Fld_8.Node.Expr_Expected_Type_Var'Unrestricted_Access;
--# expr-done 2875
Fld_9.Value := No_Entity;
Entity_Vars.Reset (Fld_9);
--# expr-start 2876 '<FieldAccess for expected_type_var at nodes.lkt:4588:50>' Fld_10 nodes.lkt:4588







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_10 := Ent.Node.Expr_Expected_Type_Var'Unrestricted_Access;
--# expr-done 2876
Fld_10.Value := No_Entity;
Entity_Vars.Reset (Fld_10);
Bind_Result_2 := Solver.Create_Unify (Fld_9, Fld_10, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4588:18") else null)); 
--# expr-done 2877
   If_Result := Bind_Result_2;
end if;

      Inc_Ref (If_Result);


--# expr-done 2878
And_Pred_1 := Create_And (And_Pred, If_Result, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4581:9") else null)); 
--# expr-done 2879

         Property_Result := And_Pred_1;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_338;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_338;




            raise;
      end;



   return Property_Result;
end Paren_Expr_P_Xref_Equation;
--# end

   







--# property-start ParenExpr.has_context_free_type nodes.lkt:4591
pragma Warnings (Off, "is not referenced");
 function Paren_Expr_P_Has_Context_Free_Type
  
  (Node : Bare_Paren_Expr
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Boolean
is
   Self : Bare_Paren_Expr  := Bare_Paren_Expr (Node);
     Ent : Internal_Entity_Paren_Expr :=
       Internal_Entity_Paren_Expr'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Boolean;

      

      Fld : Internal_Entity_Expr;
Fld_1 : Boolean;



begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         --# expr-start 2881 '<FieldAccess for has_context_free_type at nodes.lkt:4591:41>' Fld_1 nodes.lkt:4591



--# expr-start 2880 '<FieldAccess for expr at nodes.lkt:4591:41>' Fld nodes.lkt:4591







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Create_Internal_Entity_Expr (Node => Ent.Node.Paren_Expr_F_Expr, Info => Ent.Info);
--# expr-done 2880



   if Fld.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]Expr.has_context_free_type'
Fld_1 := Liblktlang.Implementation.Dispatcher_Expr_P_Has_Context_Free_Type (Node => Fld.Node, E_Info => Fld.Info);
--# end
--# expr-done 2881

         Property_Result := Fld_1;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Paren_Expr_P_Has_Context_Free_Type;
--# end



   


      

   --
   --  Primitives for Bare_Raise_Expr
   --

   



      
      procedure Initialize_Fields_For_Raise_Expr
        (Self : Bare_Raise_Expr
         ; Raise_Expr_F_Dest_Type : Bare_Type_Ref
         ; Raise_Expr_F_Except_Expr : Bare_Expr
        ) is
      begin
            Initialize_Fields_For_Expr
              (Self);

            Self.Raise_Expr_F_Dest_Type := Raise_Expr_F_Dest_Type;
            Self.Raise_Expr_F_Except_Expr := Raise_Expr_F_Except_Expr;
         

      end Initialize_Fields_For_Raise_Expr;

      
   function Raise_Expr_F_Dest_Type
     (Node : Bare_Raise_Expr) return Bare_Type_Ref
   is
      

   begin
         
         return Node.Raise_Expr_F_Dest_Type;
      
   end;

      
   function Raise_Expr_F_Except_Expr
     (Node : Bare_Raise_Expr) return Bare_Expr
   is
      

   begin
         
         return Node.Raise_Expr_F_Except_Expr;
      
   end;


   







--# property-start RaiseExpr.xref_equation nodes.lkt:4602
pragma Warnings (Off, "is not referenced");
 function Raise_Expr_P_Xref_Equation
  
  (Node : Bare_Raise_Expr
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Logic_Equation
is
   Self : Bare_Raise_Expr  := Bare_Raise_Expr (Node);
     Ent : Internal_Entity_Raise_Expr :=
       Internal_Entity_Raise_Expr'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Logic_Equation;

      
            procedure Finalizer_Scope_340 with Inline_Always;

      Fld : Internal_Entity_Expr;
Fld_1 : Logic_Equation;
Fld_2 : Logic_Var;
Fld_3 : Internal_Entity_Type_Decl;
Cast_Result : Internal_Entity;
Bind_Result : Logic_Equation;
Fld_4 : Logic_Var;
Fld_5 : Internal_Entity_Type_Ref;
Fld_6 : Internal_Entity_Type_Decl;
Cast_Result_1 : Internal_Entity;
Bind_Result_1 : Logic_Equation;
Fld_7 : Internal_Entity_Type_Ref;
Is_Null : Boolean;
If_Result : Logic_Equation;
And_Pred : Logic_Equation;
Fld_8 : Internal_Entity_Expr;
Fld_9 : Logic_Var;
Cast_Expr : Internal_Entity_Type_Decl;
Cast_Result_2 : Internal_Entity;
Bind_Result_2 : Logic_Equation;
And_Pred_1 : Logic_Equation;

            procedure Finalizer_Scope_340 is
            begin
                     Dec_Ref (Fld_1);
                     Dec_Ref (Bind_Result);
                     Dec_Ref (Bind_Result_1);
                     Dec_Ref (If_Result);
                     Dec_Ref (And_Pred);
                     Dec_Ref (Bind_Result_2);
                     Dec_Ref (And_Pred_1);
            end Finalizer_Scope_340;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 2898 '<LogicBinaryOp And at nodes.lkt:4603:9>' And_Pred_1 nodes.lkt:4603
--# expr-start 2894 '<LogicBinaryOp And at nodes.lkt:4604:13>' And_Pred nodes.lkt:4604
--# expr-start 2883 '<FieldAccess for xref_equation at nodes.lkt:4604:13>' Fld_1 nodes.lkt:4604



--# expr-start 2882 '<FieldAccess for except_expr at nodes.lkt:4604:13>' Fld nodes.lkt:4604







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Create_Internal_Entity_Expr (Node => Ent.Node.Raise_Expr_F_Except_Expr, Info => Ent.Info);
--# expr-done 2882



   if Fld.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]LktNode.xref_equation'
Fld_1 := Liblktlang.Implementation.Dispatcher_Lkt_Node_P_Xref_Equation (Node => Fld.Node, E_Info => Fld.Info);
--# end
--# expr-done 2883
--# expr-start 2893 '<If at nodes.lkt:4606:17>' If_Result nodes.lkt:4606



--# expr-start 2885 '<IsNull at nodes.lkt:4606:20>' Is_Null nodes.lkt:4606
--# expr-start 2884 '<FieldAccess for dest_type at nodes.lkt:4606:20>' Fld_7 nodes.lkt:4606







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_7 := Create_Internal_Entity_Type_Ref (Node => Ent.Node.Raise_Expr_F_Dest_Type, Info => Ent.Info);
--# expr-done 2884
Is_Null := Fld_7.Node = null; 
--# expr-done 2885
if Is_Null then
   --# expr-start 2888 '<Bind at nodes.lkt:4607:22>' Bind_Result nodes.lkt:4607
--# expr-start 2886 '<FieldAccess for actual_type_var at nodes.lkt:4607:22>' Fld_2 nodes.lkt:4607







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_2 := Ent.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 2886
Fld_2.Value := No_Entity;
Entity_Vars.Reset (Fld_2);





--# expr-start 2887 '<FieldAccess for get_expected_type at nodes.lkt:4607:46>' Fld_3 nodes.lkt:4607







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start Expr.get_expected_type
Fld_3 := Liblktlang.Implementation.Expr_P_Get_Expected_Type (Node => Ent.Node, E_Info => Ent.Info);
--# end
--# expr-done 2887



   
      Cast_Result := Create_Internal_Entity
        (Node => Fld_3.Node,
         Info => Fld_3.Info);


Bind_Result := Solver.Create_Assign (Fld_2, Cast_Result, Solver_Ifc.No_Converter, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4607:22") else null)); 
--# expr-done 2888
   If_Result := Bind_Result;
else
   --# expr-start 2892 '<Bind at nodes.lkt:4608:22>' Bind_Result_1 nodes.lkt:4608
--# expr-start 2889 '<FieldAccess for actual_type_var at nodes.lkt:4608:22>' Fld_4 nodes.lkt:4608







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_4 := Ent.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 2889
Fld_4.Value := No_Entity;
Entity_Vars.Reset (Fld_4);





--# expr-start 2891 '<FieldAccess for referenced_decl at nodes.lkt:4608:46>' Fld_6 nodes.lkt:4608



--# expr-start 2890 '<FieldAccess for dest_type at nodes.lkt:4608:46>' Fld_5 nodes.lkt:4608







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_5 := Create_Internal_Entity_Type_Ref (Node => Ent.Node.Raise_Expr_F_Dest_Type, Info => Ent.Info);
--# expr-done 2890



   if Fld_5.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start TypeRef.referenced_decl
Fld_6 := Liblktlang.Implementation.Type_Ref_P_Referenced_Decl (Node => Fld_5.Node, E_Info => Fld_5.Info);
--# end
--# expr-done 2891



   
      Cast_Result_1 := Create_Internal_Entity
        (Node => Fld_6.Node,
         Info => Fld_6.Info);


Bind_Result_1 := Solver.Create_Assign (Fld_4, Cast_Result_1, Solver_Ifc.No_Converter, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4608:22") else null)); 
--# expr-done 2892
   If_Result := Bind_Result_1;
end if;

      Inc_Ref (If_Result);


--# expr-done 2893
And_Pred := Create_And (Fld_1, If_Result, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4604:13") else null)); 
--# expr-done 2894
--# expr-start 2897 '<Bind at nodes.lkt:4611:14>' Bind_Result_2 nodes.lkt:4611
--# expr-start 2896 '<FieldAccess for expected_type_var at nodes.lkt:4611:14>' Fld_9 nodes.lkt:4611



--# expr-start 2895 '<FieldAccess for except_expr at nodes.lkt:4611:14>' Fld_8 nodes.lkt:4611







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_8 := Create_Internal_Entity_Expr (Node => Ent.Node.Raise_Expr_F_Except_Expr, Info => Ent.Info);
--# expr-done 2895



   if Fld_8.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_9 := Fld_8.Node.Expr_Expected_Type_Var'Unrestricted_Access;
--# expr-done 2896
Fld_9.Value := No_Entity;
Entity_Vars.Reset (Fld_9);






Cast_Expr := No_Entity_Type_Decl; 



   
      Cast_Result_2 := Create_Internal_Entity
        (Node => Cast_Expr.Node,
         Info => Cast_Expr.Info);


Bind_Result_2 := Solver.Create_Assign (Fld_9, Cast_Result_2, Solver_Ifc.No_Converter, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4611:14") else null)); 
--# expr-done 2897
And_Pred_1 := Create_And (And_Pred, Bind_Result_2, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4603:9") else null)); 
--# expr-done 2898

         Property_Result := And_Pred_1;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_340;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_340;




            raise;
      end;



   return Property_Result;
end Raise_Expr_P_Xref_Equation;
--# end

   







--# property-start RaiseExpr.has_context_free_type nodes.lkt:4613
pragma Warnings (Off, "is not referenced");
 function Raise_Expr_P_Has_Context_Free_Type
  
  (Node : Bare_Raise_Expr
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Boolean
is
   Self : Bare_Raise_Expr  := Bare_Raise_Expr (Node);
     Ent : Internal_Entity_Raise_Expr :=
       Internal_Entity_Raise_Expr'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Boolean;

      

      Fld : Internal_Entity_Type_Ref;
Is_Null : Boolean;
Not_Val : Boolean;



begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         --# expr-start 2901 '<Not at nodes.lkt:4613:41>' Not_Val nodes.lkt:4613
--# expr-start 2900 '<IsNull at nodes.lkt:4613:45>' Is_Null nodes.lkt:4613
--# expr-start 2899 '<FieldAccess for dest_type at nodes.lkt:4613:45>' Fld nodes.lkt:4613







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Create_Internal_Entity_Type_Ref (Node => Ent.Node.Raise_Expr_F_Dest_Type, Info => Ent.Info);
--# expr-done 2899
Is_Null := Fld.Node = null; 
--# expr-done 2900
Not_Val := not (Is_Null); 
--# expr-done 2901

         Property_Result := Not_Val;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Raise_Expr_P_Has_Context_Free_Type;
--# end



   


      

   --
   --  Primitives for Bare_Subscript_Expr
   --

   



      
      procedure Initialize_Fields_For_Subscript_Expr
        (Self : Bare_Subscript_Expr
         ; Subscript_Expr_F_Prefix : Bare_Expr
         ; Subscript_Expr_F_Index : Bare_Expr
        ) is
      begin
            Initialize_Fields_For_Expr
              (Self);

            Self.Subscript_Expr_F_Prefix := Subscript_Expr_F_Prefix;
            Self.Subscript_Expr_F_Index := Subscript_Expr_F_Index;
         

      end Initialize_Fields_For_Subscript_Expr;

      
   function Subscript_Expr_F_Prefix
     (Node : Bare_Subscript_Expr) return Bare_Expr
   is
      

   begin
         
         return Node.Subscript_Expr_F_Prefix;
      
   end;

      
   function Subscript_Expr_F_Index
     (Node : Bare_Subscript_Expr) return Bare_Expr
   is
      

   begin
         
         return Node.Subscript_Expr_F_Index;
      
   end;


   







--# property-start SubscriptExpr.has_context_free_type nodes.lkt:4623
pragma Warnings (Off, "is not referenced");
 function Subscript_Expr_P_Has_Context_Free_Type
  
  (Node : Bare_Subscript_Expr
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Boolean
is
   Self : Bare_Subscript_Expr  := Bare_Subscript_Expr (Node);
     Ent : Internal_Entity_Subscript_Expr :=
       Internal_Entity_Subscript_Expr'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Boolean;

      

      Fld : Internal_Entity_Expr;
Fld_1 : Boolean;



begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         --# expr-start 2903 '<FieldAccess for has_context_free_type at nodes.lkt:4623:41>' Fld_1 nodes.lkt:4623



--# expr-start 2902 '<FieldAccess for prefix at nodes.lkt:4623:41>' Fld nodes.lkt:4623







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Create_Internal_Entity_Expr (Node => Ent.Node.Subscript_Expr_F_Prefix, Info => Ent.Info);
--# expr-done 2902



   if Fld.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]Expr.has_context_free_type'
Fld_1 := Liblktlang.Implementation.Dispatcher_Expr_P_Has_Context_Free_Type (Node => Fld.Node, E_Info => Fld.Info);
--# end
--# expr-done 2903

         Property_Result := Fld_1;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Subscript_Expr_P_Has_Context_Free_Type;
--# end

   







--# property-start SubscriptExpr.xref_equation nodes.lkt:4625
pragma Warnings (Off, "is not referenced");
 function Subscript_Expr_P_Xref_Equation
  
  (Node : Bare_Subscript_Expr
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Logic_Equation
is
   Self : Bare_Subscript_Expr  := Bare_Subscript_Expr (Node);
     Ent : Internal_Entity_Subscript_Expr :=
       Internal_Entity_Subscript_Expr'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Logic_Equation;

      
            procedure Finalizer_Scope_343 with Inline_Always;

      Var_Expr_73 : Internal_Entity_Type_Decl;
Fld : Internal_Entity_Expr;
Fld_1 : Logic_Equation;
Fld_2 : Internal_Entity_Expr;
Fld_3 : Logic_Equation;
And_Pred : Logic_Equation;
Fld_4 : Logic_Var;
Fld_5 : Internal_Entity_Expr;
Fld_6 : Logic_Var;
Bind_Result : Logic_Equation;
And_Pred_1 : Logic_Equation;
Fld_7 : Internal_Entity_Expr;
Fld_8 : Logic_Var;
Fld_9 : Internal_Entity_Named_Type_Decl;
Cast_Result : Internal_Entity;
Bind_Result_1 : Logic_Equation;
And_Pred_2 : Logic_Equation;
Fld_10 : Internal_Entity_Expr;
Fld_11 : Logic_Var;
Fld_12 : Logic_Var;
Bind_Result_2 : Logic_Equation;
Fld_13 : Internal_Entity_Expr;
Fld_14 : Logic_Var;
Cast_Expr : Internal_Entity_Type_Decl;
Cast_Result_1 : Internal_Entity;
Bind_Result_3 : Logic_Equation;
Fld_15 : Internal_Entity_Expr;
Fld_16 : Logic_Var;
Fld_17 : Internal_Entity_Type_Decl;
Fld_18 : Internal_Entity_Type_Decl;
Scope_Result : Internal_Entity_Type_Decl;
Result_Var : Internal_Entity_Type_Decl;
Cast_Result_2 : Internal_Entity;
Bind_Result_4 : Logic_Equation;
Fld_19 : Internal_Entity_Expr;
Fld_20 : Boolean;
If_Result : Logic_Equation;
Fld_21 : Boolean;
Not_Val : Boolean;
If_Result_1 : Logic_Equation;
And_Pred_3 : Logic_Equation;
Fld_22 : Bare_Expr;
Cast_Result_3 : Bare_Lkt_Node;
Bound_Error_Location : Bare_Lkt_Node;
Fld_23 : Internal_Entity_Expr;
Fld_24 : Logic_Var;
Pred : Logic_Equation;
Dyn_Var_Bind_Result : Logic_Equation;
And_Pred_4 : Logic_Equation;
Fld_25 : Bare_Expr;
Cast_Result_4 : Bare_Lkt_Node;
Bound_Error_Location_1 : Bare_Lkt_Node;
Fld_26 : Internal_Entity_Expr;
Fld_27 : Logic_Var;
Pred_1 : Logic_Equation;
Dyn_Var_Bind_Result_1 : Logic_Equation;
And_Pred_5 : Logic_Equation;

            procedure Finalizer_Scope_343 is
            begin
                     Dec_Ref (Fld_1);
                     Dec_Ref (Fld_3);
                     Dec_Ref (And_Pred);
                     Dec_Ref (Bind_Result);
                     Dec_Ref (And_Pred_1);
                     Dec_Ref (Bind_Result_1);
                     Dec_Ref (And_Pred_2);
                     Dec_Ref (Bind_Result_2);
                     Dec_Ref (Bind_Result_3);
                     Dec_Ref (Bind_Result_4);
                     Dec_Ref (If_Result);
                     Dec_Ref (If_Result_1);
                     Dec_Ref (And_Pred_3);
                     Dec_Ref (Pred);
                     Dec_Ref (Dyn_Var_Bind_Result);
                     Dec_Ref (And_Pred_4);
                     Dec_Ref (Pred_1);
                     Dec_Ref (Dyn_Var_Bind_Result_1);
                     Dec_Ref (And_Pred_5);
            end Finalizer_Scope_343;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 2949 '<LogicBinaryOp And at nodes.lkt:4626:9>' And_Pred_5 nodes.lkt:4626
--# expr-start 2943 '<LogicBinaryOp And at nodes.lkt:4627:13>' And_Pred_4 nodes.lkt:4627
--# expr-start 2937 '<LogicBinaryOp And at nodes.lkt:4628:17>' And_Pred_3 nodes.lkt:4628
--# expr-start 2918 '<LogicBinaryOp And at nodes.lkt:4629:21>' And_Pred_2 nodes.lkt:4629
--# expr-start 2913 '<LogicBinaryOp And at nodes.lkt:4630:25>' And_Pred_1 nodes.lkt:4630
--# expr-start 2908 '<LogicBinaryOp And at nodes.lkt:4631:29>' And_Pred nodes.lkt:4631
--# expr-start 2905 '<FieldAccess for xref_equation at nodes.lkt:4631:29>' Fld_1 nodes.lkt:4631



--# expr-start 2904 '<FieldAccess for prefix at nodes.lkt:4631:29>' Fld nodes.lkt:4631







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Create_Internal_Entity_Expr (Node => Ent.Node.Subscript_Expr_F_Prefix, Info => Ent.Info);
--# expr-done 2904



   if Fld.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]LktNode.xref_equation'
Fld_1 := Liblktlang.Implementation.Dispatcher_Lkt_Node_P_Xref_Equation (Node => Fld.Node, E_Info => Fld.Info);
--# end
--# expr-done 2905
--# expr-start 2907 '<FieldAccess for xref_equation at nodes.lkt:4632:34>' Fld_3 nodes.lkt:4632



--# expr-start 2906 '<FieldAccess for index at nodes.lkt:4632:34>' Fld_2 nodes.lkt:4632







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_2 := Create_Internal_Entity_Expr (Node => Ent.Node.Subscript_Expr_F_Index, Info => Ent.Info);
--# expr-done 2906



   if Fld_2.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]LktNode.xref_equation'
Fld_3 := Liblktlang.Implementation.Dispatcher_Lkt_Node_P_Xref_Equation (Node => Fld_2.Node, E_Info => Fld_2.Info);
--# end
--# expr-done 2907
And_Pred := Create_And (Fld_1, Fld_3, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4631:29") else null)); 
--# expr-done 2908
--# expr-start 2912 '<NPropagate at nodes.lkt:4634:30>' Bind_Result nodes.lkt:4634
--# expr-start 2910 '<FieldAccess for actual_type_var at nodes.lkt:4636:29>' Fld_6 nodes.lkt:4636



--# expr-start 2909 '<FieldAccess for prefix at nodes.lkt:4636:29>' Fld_5 nodes.lkt:4636







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_5 := Create_Internal_Entity_Expr (Node => Ent.Node.Subscript_Expr_F_Prefix, Info => Ent.Info);
--# expr-done 2909



   if Fld_5.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_6 := Fld_5.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 2910
Fld_6.Value := No_Entity;
Entity_Vars.Reset (Fld_6);
--# expr-start 2911 '<FieldAccess for actual_type_var at nodes.lkt:4634:30>' Fld_4 nodes.lkt:4634







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_4 := Ent.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 2911
Fld_4.Value := No_Entity;
Entity_Vars.Reset (Fld_4);

Bind_Result := Solver.Create_Propagate (Fld_6, Fld_4, Create_Type_Decl_P_Get_Array_Content_Type_0_Functor, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4634:30") else null)); 
--# expr-done 2912
And_Pred_1 := Create_And (And_Pred, Bind_Result, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4630:25") else null)); 
--# expr-done 2913
--# expr-start 2917 '<Bind at nodes.lkt:4641:25>' Bind_Result_1 nodes.lkt:4641
--# expr-start 2915 '<FieldAccess for expected_type_var at nodes.lkt:4641:25>' Fld_8 nodes.lkt:4641



--# expr-start 2914 '<FieldAccess for index at nodes.lkt:4641:25>' Fld_7 nodes.lkt:4641







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_7 := Create_Internal_Entity_Expr (Node => Ent.Node.Subscript_Expr_F_Index, Info => Ent.Info);
--# expr-done 2914



   if Fld_7.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_8 := Fld_7.Node.Expr_Expected_Type_Var'Unrestricted_Access;
--# expr-done 2915
Fld_8.Value := No_Entity;
Entity_Vars.Reset (Fld_8);





--# expr-start 2916 '<FieldAccess for int_type at nodes.lkt:4641:57>' Fld_9 nodes.lkt:4641







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start LktNode.int_type
Fld_9 := Liblktlang.Implementation.Lkt_Node_P_Int_Type (Node => Ent.Node);
--# end
--# expr-done 2916



   
      Cast_Result := Create_Internal_Entity
        (Node => Fld_9.Node,
         Info => Fld_9.Info);


Bind_Result_1 := Solver.Create_Assign (Fld_8, Cast_Result, Solver_Ifc.No_Converter, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4641:25") else null)); 
--# expr-done 2917
And_Pred_2 := Create_And (And_Pred_1, Bind_Result_1, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4629:21") else null)); 
--# expr-done 2918
--# expr-start 2936 '<If at nodes.lkt:4645:21>' If_Result_1 nodes.lkt:4645



--# expr-start 2920 '<Not at nodes.lkt:4645:24>' Not_Val nodes.lkt:4645
--# expr-start 2919 '<FieldAccess for xref_entry_point at nodes.lkt:4645:28>' Fld_21 nodes.lkt:4645







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]LktNode.xref_entry_point'
Fld_21 := Liblktlang.Implementation.Dispatcher_Lkt_Node_P_Xref_Entry_Point (Node => Ent.Node, E_Info => Ent.Info);
--# end
--# expr-done 2919
Not_Val := not (Fld_21); 
--# expr-done 2920
if Not_Val then
   --# expr-start 2924 '<NPropagate at nodes.lkt:4647:25>' Bind_Result_2 nodes.lkt:4647
--# expr-start 2921 '<FieldAccess for expected_type_var at nodes.lkt:4648:54>' Fld_12 nodes.lkt:4648







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_12 := Ent.Node.Expr_Expected_Type_Var'Unrestricted_Access;
--# expr-done 2921
Fld_12.Value := No_Entity;
Entity_Vars.Reset (Fld_12);
--# expr-start 2923 '<FieldAccess for expected_type_var at nodes.lkt:4647:25>' Fld_11 nodes.lkt:4647



--# expr-start 2922 '<FieldAccess for prefix at nodes.lkt:4647:25>' Fld_10 nodes.lkt:4647







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_10 := Create_Internal_Entity_Expr (Node => Ent.Node.Subscript_Expr_F_Prefix, Info => Ent.Info);
--# expr-done 2922



   if Fld_10.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_11 := Fld_10.Node.Expr_Expected_Type_Var'Unrestricted_Access;
--# expr-done 2923
Fld_11.Value := No_Entity;
Entity_Vars.Reset (Fld_11);

Bind_Result_2 := Solver.Create_Propagate (Fld_12, Fld_11, Create_Type_Decl_P_Make_Array_Type_0_Functor, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4647:25") else null)); 
--# expr-done 2924
   If_Result_1 := Bind_Result_2;
else
   --# expr-start 2935 '<If at nodes.lkt:4645:21>' If_Result nodes.lkt:4645



--# expr-start 2926 '<FieldAccess for has_context_free_type at nodes.lkt:4649:26>' Fld_20 nodes.lkt:4649



--# expr-start 2925 '<FieldAccess for prefix at nodes.lkt:4649:26>' Fld_19 nodes.lkt:4649







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_19 := Create_Internal_Entity_Expr (Node => Ent.Node.Subscript_Expr_F_Prefix, Info => Ent.Info);
--# expr-done 2925



   if Fld_19.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]Expr.has_context_free_type'
Fld_20 := Liblktlang.Implementation.Dispatcher_Expr_P_Has_Context_Free_Type (Node => Fld_19.Node, E_Info => Fld_19.Info);
--# end
--# expr-done 2926
if Fld_20 then
   --# expr-start 2929 '<Bind at nodes.lkt:4651:25>' Bind_Result_3 nodes.lkt:4651
--# expr-start 2928 '<FieldAccess for expected_type_var at nodes.lkt:4651:25>' Fld_14 nodes.lkt:4651



--# expr-start 2927 '<FieldAccess for prefix at nodes.lkt:4651:25>' Fld_13 nodes.lkt:4651







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_13 := Create_Internal_Entity_Expr (Node => Ent.Node.Subscript_Expr_F_Prefix, Info => Ent.Info);
--# expr-done 2927



   if Fld_13.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_14 := Fld_13.Node.Expr_Expected_Type_Var'Unrestricted_Access;
--# expr-done 2928
Fld_14.Value := No_Entity;
Entity_Vars.Reset (Fld_14);






Cast_Expr := No_Entity_Type_Decl; 



   
      Cast_Result_1 := Create_Internal_Entity
        (Node => Cast_Expr.Node,
         Info => Cast_Expr.Info);


Bind_Result_3 := Solver.Create_Assign (Fld_14, Cast_Result_1, Solver_Ifc.No_Converter, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4651:25") else null)); 
--# expr-done 2929
   If_Result := Bind_Result_3;
else
   --# expr-start 2934 '<Bind at nodes.lkt:4653:25>' Bind_Result_4 nodes.lkt:4653
--# expr-start 2931 '<FieldAccess for expected_type_var at nodes.lkt:4653:25>' Fld_16 nodes.lkt:4653



--# expr-start 2930 '<FieldAccess for prefix at nodes.lkt:4653:25>' Fld_15 nodes.lkt:4653







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_15 := Create_Internal_Entity_Expr (Node => Ent.Node.Subscript_Expr_F_Prefix, Info => Ent.Info);
--# expr-done 2930



   if Fld_15.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_16 := Fld_15.Node.Expr_Expected_Type_Var'Unrestricted_Access;
--# expr-done 2931
Fld_16.Value := No_Entity;
Entity_Vars.Reset (Fld_16);








--# expr-start 2932 '<FieldAccess for get_expected_type at nodes.lkt:4654:28>' Fld_17 nodes.lkt:4654







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start Expr.get_expected_type
Fld_17 := Liblktlang.Implementation.Expr_P_Get_Expected_Type (Node => Ent.Node, E_Info => Ent.Info);
--# end
--# expr-done 2932
Var_Expr_73 := Fld_17;





if Var_Expr_73 /= No_Entity_Type_Decl then
   



   --# scope-start


   

--# expr-start 2933 '<FieldAccess for make_array_type at nodes.lkt:4654:28>' Fld_18 nodes.lkt:4654







   if Var_Expr_73.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start TypeDecl.make_array_type
Fld_18 := Liblktlang.Implementation.Type_Decl_P_Make_Array_Type (Node => Var_Expr_73.Node, E_Info => Var_Expr_73.Info);
--# end
--# expr-done 2933
Scope_Result := Fld_18;


   --# end


   Result_Var := Scope_Result;
else
   
   Result_Var := No_Entity_Type_Decl;
end if;






   
      Cast_Result_2 := Create_Internal_Entity
        (Node => Result_Var.Node,
         Info => Result_Var.Info);


Bind_Result_4 := Solver.Create_Assign (Fld_16, Cast_Result_2, Solver_Ifc.No_Converter, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4653:25") else null)); 
--# expr-done 2934
   If_Result := Bind_Result_4;
end if;

      Inc_Ref (If_Result);


--# expr-done 2935
   If_Result_1 := If_Result;
end if;

      Inc_Ref (If_Result_1);


--# expr-done 2936
And_Pred_3 := Create_And (And_Pred_2, If_Result_1, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4628:17") else null)); 
--# expr-done 2937
--# expr-start 2942 '<bind at nodes.lkt:4658:17>' Dyn_Var_Bind_Result nodes.lkt:4658





--# expr-start 2938 '<FieldAccess for index at nodes.lkt:4658:39>' Fld_22 nodes.lkt:4658







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_22 := Self.Subscript_Expr_F_Index;
--# expr-done 2938



   
      Cast_Result_3 := Fld_22;


Bound_Error_Location := Cast_Result_3; 
--# expr-start 2941 '<Predicate on TypeDecl.is_int_type at nodes.lkt:4659:17>' Pred nodes.lkt:4659
--# expr-start 2940 '<FieldAccess for actual_type_var at nodes.lkt:4659:39>' Fld_24 nodes.lkt:4659



--# expr-start 2939 '<FieldAccess for index at nodes.lkt:4659:39>' Fld_23 nodes.lkt:4659







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_23 := Create_Internal_Entity_Expr (Node => Ent.Node.Subscript_Expr_F_Index, Info => Ent.Info);
--# expr-done 2939



   if Fld_23.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_24 := Fld_23.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 2940
Fld_24.Value := No_Entity;
Entity_Vars.Reset (Fld_24);

Pred := Solver.Create_Predicate (Fld_24, Create_Type_Decl_P_Is_Int_Type_0_Predicate (Bound_Error_Location)); 
--# expr-done 2941
Dyn_Var_Bind_Result := Pred; Inc_Ref (Dyn_Var_Bind_Result);
--# expr-done 2942
And_Pred_4 := Create_And (And_Pred_3, Dyn_Var_Bind_Result, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4627:13") else null)); 
--# expr-done 2943
--# expr-start 2948 '<bind at nodes.lkt:4663:13>' Dyn_Var_Bind_Result_1 nodes.lkt:4663





--# expr-start 2944 '<FieldAccess for prefix at nodes.lkt:4663:35>' Fld_25 nodes.lkt:4663







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_25 := Self.Subscript_Expr_F_Prefix;
--# expr-done 2944



   
      Cast_Result_4 := Fld_25;


Bound_Error_Location_1 := Cast_Result_4; 
--# expr-start 2947 '<Predicate on TypeDecl.is_of_array_type at nodes.lkt:4664:13>' Pred_1 nodes.lkt:4664
--# expr-start 2946 '<FieldAccess for actual_type_var at nodes.lkt:4664:40>' Fld_27 nodes.lkt:4664



--# expr-start 2945 '<FieldAccess for prefix at nodes.lkt:4664:40>' Fld_26 nodes.lkt:4664







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_26 := Create_Internal_Entity_Expr (Node => Ent.Node.Subscript_Expr_F_Prefix, Info => Ent.Info);
--# expr-done 2945



   if Fld_26.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_27 := Fld_26.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 2946
Fld_27.Value := No_Entity;
Entity_Vars.Reset (Fld_27);

Pred_1 := Solver.Create_Predicate (Fld_27, Create_Type_Decl_P_Is_Of_Array_Type_0_Predicate (Bound_Error_Location_1)); 
--# expr-done 2947
Dyn_Var_Bind_Result_1 := Pred_1; Inc_Ref (Dyn_Var_Bind_Result_1);
--# expr-done 2948
And_Pred_5 := Create_And (And_Pred_4, Dyn_Var_Bind_Result_1, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4626:9") else null)); 
--# expr-done 2949

         Property_Result := And_Pred_5;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_343;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_343;




            raise;
      end;



   return Property_Result;
end Subscript_Expr_P_Xref_Equation;
--# end



   


      

   --
   --  Primitives for Bare_Null_Cond_Subscript_Expr
   --

   



      
      procedure Initialize_Fields_For_Null_Cond_Subscript_Expr
        (Self : Bare_Null_Cond_Subscript_Expr
         ; Subscript_Expr_F_Prefix : Bare_Expr
         ; Subscript_Expr_F_Index : Bare_Expr
        ) is
      begin
            Initialize_Fields_For_Subscript_Expr
              (Self, Subscript_Expr_F_Prefix, Subscript_Expr_F_Index);

         

      end Initialize_Fields_For_Null_Cond_Subscript_Expr;




   


      

   --
   --  Primitives for Bare_Try_Expr
   --

   



      
      procedure Initialize_Fields_For_Try_Expr
        (Self : Bare_Try_Expr
         ; Try_Expr_F_Try_Expr : Bare_Expr
         ; Try_Expr_F_Or_Expr : Bare_Expr
        ) is
      begin
            Initialize_Fields_For_Expr
              (Self);

            Self.Try_Expr_F_Try_Expr := Try_Expr_F_Try_Expr;
            Self.Try_Expr_F_Or_Expr := Try_Expr_F_Or_Expr;
         
      Self.Try_Expr_Expected_Expr_Type_Var := Null_Var_Record;

      end Initialize_Fields_For_Try_Expr;

      
   function Try_Expr_F_Try_Expr
     (Node : Bare_Try_Expr) return Bare_Expr
   is
      

   begin
         
         return Node.Try_Expr_F_Try_Expr;
      
   end;

      
   function Try_Expr_F_Or_Expr
     (Node : Bare_Try_Expr) return Bare_Expr
   is
      

   begin
         
         return Node.Try_Expr_F_Or_Expr;
      
   end;


   







--# property-start TryExpr.exprs nodes.lkt:4682
pragma Warnings (Off, "is not referenced");
 function Try_Expr_P_Exprs
  
  (Node : Bare_Try_Expr
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Internal_Entity_Expr_Array_Access
is
   Self : Bare_Try_Expr  := Bare_Try_Expr (Node);
     Ent : Internal_Entity_Try_Expr :=
       Internal_Entity_Try_Expr'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Internal_Entity_Expr_Array_Access;

      
            procedure Finalizer_Scope_344 with Inline_Always;

      Fld : Internal_Entity_Expr;
Array_Lit : Internal_Entity_Expr_Array_Access;
Fld_1 : Internal_Entity_Expr;
Fld_2 : Internal_Entity_Expr;
Array_Lit_1 : Internal_Entity_Expr_Array_Access;
Fld_3 : Internal_Entity_Expr;
Is_Null : Boolean;
If_Result : Internal_Entity_Expr_Array_Access;

            procedure Finalizer_Scope_344 is
            begin
                     Dec_Ref (Array_Lit);
                     Dec_Ref (Array_Lit_1);
                     Dec_Ref (If_Result);
            end Finalizer_Scope_344;


begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         --# expr-start 2957 '<If at nodes.lkt:4683:9>' If_Result nodes.lkt:4683



--# expr-start 2951 '<IsNull at nodes.lkt:4683:12>' Is_Null nodes.lkt:4683
--# expr-start 2950 '<FieldAccess for or_expr at nodes.lkt:4683:12>' Fld_3 nodes.lkt:4683







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_3 := Create_Internal_Entity_Expr (Node => Ent.Node.Try_Expr_F_Or_Expr, Info => Ent.Info);
--# expr-done 2950
Is_Null := Fld_3.Node = null; 
--# expr-done 2951
if Is_Null then
   --# expr-start 2953 '<ArrayLiteral at nodes.lkt:4683:38>' Array_Lit nodes.lkt:4683
--# expr-start 2952 '<FieldAccess for try_expr at nodes.lkt:4683:39>' Fld nodes.lkt:4683







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Create_Internal_Entity_Expr (Node => Ent.Node.Try_Expr_F_Try_Expr, Info => Ent.Info);
--# expr-done 2952
Array_Lit := Create_Internal_Entity_Expr_Array (Internal_Internal_Entity_Expr_Array'(1 => Fld)); 
--# expr-done 2953
   If_Result := Array_Lit;
else
   --# expr-start 2956 '<ArrayLiteral at nodes.lkt:4684:14>' Array_Lit_1 nodes.lkt:4684
--# expr-start 2954 '<FieldAccess for try_expr at nodes.lkt:4684:15>' Fld_1 nodes.lkt:4684







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_1 := Create_Internal_Entity_Expr (Node => Ent.Node.Try_Expr_F_Try_Expr, Info => Ent.Info);
--# expr-done 2954
--# expr-start 2955 '<FieldAccess for or_expr at nodes.lkt:4684:30>' Fld_2 nodes.lkt:4684







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_2 := Create_Internal_Entity_Expr (Node => Ent.Node.Try_Expr_F_Or_Expr, Info => Ent.Info);
--# expr-done 2955
Array_Lit_1 := Create_Internal_Entity_Expr_Array (Internal_Internal_Entity_Expr_Array'(1 => Fld_1, 2 => Fld_2)); 
--# expr-done 2956
   If_Result := Array_Lit_1;
end if;

      Inc_Ref (If_Result);


--# expr-done 2957

         Property_Result := If_Result;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_344;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_344;




            raise;
      end;



   return Property_Result;
end Try_Expr_P_Exprs;
--# end

   







--# property-start TryExpr.expected_exprs_type_equation nodes.lkt:4689
pragma Warnings (Off, "is not referenced");
 function Try_Expr_P_Expected_Exprs_Type_Equation
  
  (Node : Bare_Try_Expr
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Logic_Equation
is
   Self : Bare_Try_Expr  := Bare_Try_Expr (Node);
     Ent : Internal_Entity_Try_Expr :=
       Internal_Entity_Try_Expr'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Logic_Equation;

      
            procedure Finalizer_Scope_345 with Inline_Always;
            procedure Finalizer_Scope_750 with Inline_Always;
            procedure Finalizer_Scope_751 with Inline_Always;

      Local_Logic_Vars : Logic_Var_Array_Access;
Left_Var : Logic_Var_Array_Access;
Fld : Internal_Entity_Expr_Array_Access;
Fld_1 : Boolean;
Map_Result : Internal_Entity_Expr_Array_Access;
Fld_2 : Logic_Var;
Map_Result_1 : Logic_Var_Array_Access;
Fld_3 : Logic_Var;
Array_Lit : Logic_Var_Array_Access;
Concat_Result : Logic_Var_Array_Access;
Scope_Result : Logic_Var_Array_Access;
Fld_4 : Logic_Var;
Array_Lit_1 : Logic_Var_Array_Access;
Result_Var : Logic_Var_Array_Access;
Fld_5 : Logic_Var;
Logic_Vars : Logic_Var_Array_Access;
Bind_Result : Logic_Equation;
Fld_6 : Internal_Entity_Expr_Array_Access;
Fld_7 : Logic_Var;
Fld_8 : Logic_Var;
Bind_Result_1 : Logic_Equation;
Map_Result_2 : Logic_Equation_Array_Access;
Logic_Boolean_Op : Logic_Equation;
And_Pred : Logic_Equation;
Let_Result : Logic_Equation;

            procedure Finalizer_Scope_345 is
            begin
                     Dec_Ref (Fld);
                     Dec_Ref (Map_Result);
                     Dec_Ref (Map_Result_1);
                     Dec_Ref (Array_Lit);
                     Dec_Ref (Concat_Result);
                     Dec_Ref (Scope_Result);
                     Dec_Ref (Array_Lit_1);
                     Dec_Ref (Result_Var);
                     Dec_Ref (Local_Logic_Vars);
                     Dec_Ref (Logic_Vars);
                     Dec_Ref (Bind_Result);
                     Dec_Ref (Fld_6);
                     Dec_Ref (Map_Result_2);
                     Dec_Ref (Logic_Boolean_Op);
                     Dec_Ref (And_Pred);
                     Dec_Ref (Let_Result);
            end Finalizer_Scope_345;
            procedure Finalizer_Scope_750 is
            begin
                     Dec_Ref (Left_Var);
            end Finalizer_Scope_750;
            procedure Finalizer_Scope_751 is
            begin
                     Dec_Ref (Bind_Result_1);
            end Finalizer_Scope_751;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 2976 '<Let at nodes.lkt:4690:9>' Let_Result nodes.lkt:4690
--# scope-start



--# expr-start 2962 '<Map at nodes.lkt:4691:13>' Map_Result_1 nodes.lkt:4691








   

   --# expr-start 2960 '<Map at nodes.lkt:4691:13>' Map_Result nodes.lkt:4691








   

   --# expr-start 2958 '<FieldAccess for exprs at nodes.lkt:4691:13>' Fld nodes.lkt:4691







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start TryExpr.exprs
Fld := Liblktlang.Implementation.Try_Expr_P_Exprs (Node => Ent.Node, E_Info => Ent.Info);
--# end
--# expr-done 2958

   
      declare
         Map_Result_Vec : Internal_Entity_Expr_Vectors.Vector;
      begin
   

   

      

      declare
         
         Collection : constant Internal_Entity_Expr_Array_Access := Fld;
      begin
         for Item_0 of
               Collection.Items
         loop

            
   --# scope-start


               --# bind e Item_0

            
         --# expr-start 2959 '<FieldAccess for has_context_free_type at nodes.lkt:4691:40>' Fld_1 nodes.lkt:4691







   if Item_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]Expr.has_context_free_type'
Fld_1 := Liblktlang.Implementation.Dispatcher_Expr_P_Has_Context_Free_Type (Node => Item_0.Node, E_Info => Item_0.Info);
--# end
--# expr-done 2959
         if Fld_1 then
            
         
      
      

         declare
            Item_To_Append : constant Internal_Entity_Expr := Item_0;
         begin
            Internal_Entity_Expr_Vectors.Append (Map_Result_Vec, Item_To_Append);
         end;
   
   
         end if;
   

            
   --# end



         end loop;
      end;
   

   

         Map_Result := Create_Internal_Entity_Expr_Array
           (Items_Count => Natural (Internal_Entity_Expr_Vectors.Length (Map_Result_Vec)));
         for I in Map_Result.Items'Range loop
            Map_Result.Items (I) := Internal_Entity_Expr_Vectors.Get
              (Map_Result_Vec,
               I + Internal_Entity_Expr_Vectors.Index_Type'First - Map_Result.Items'First);
         end loop;
         Internal_Entity_Expr_Vectors.Destroy (Map_Result_Vec);

      end;
   



--# expr-done 2960

   
      declare
         Map_Result_1_Vec : Logic_Var_Vectors.Vector;
      begin
   

   

      

      declare
         
         Collection : constant Internal_Entity_Expr_Array_Access := Map_Result;
      begin
         for Item_1 of
               Collection.Items
         loop

            
   --# scope-start


               --# bind e Item_1

            
         
         
      --# expr-start 2961 '<FieldAccess for actual_type_var at nodes.lkt:4692:24>' Fld_2 nodes.lkt:4692







   if Item_1.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_2 := Item_1.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 2961
      

         declare
            Item_To_Append : constant Logic_Var := Fld_2;
         begin
            Logic_Var_Vectors.Append (Map_Result_1_Vec, Item_To_Append);
         end;
   
   
   

            
   --# end



         end loop;
      end;
   

   

         Map_Result_1 := Create_Logic_Var_Array
           (Items_Count => Natural (Logic_Var_Vectors.Length (Map_Result_1_Vec)));
         for I in Map_Result_1.Items'Range loop
            Map_Result_1.Items (I) := Logic_Var_Vectors.Get
              (Map_Result_1_Vec,
               I + Logic_Var_Vectors.Index_Type'First - Map_Result_1.Items'First);
         end loop;
         Logic_Var_Vectors.Destroy (Map_Result_1_Vec);

      end;
   



--# expr-done 2962
--# expr-start 2964 '<ArrayLiteral at nodes.lkt:4694:15>' Array_Lit nodes.lkt:4694
--# expr-start 2963 '<FieldAccess for expected_type_var at nodes.lkt:4694:16>' Fld_3 nodes.lkt:4694







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_3 := Ent.Node.Expr_Expected_Type_Var'Unrestricted_Access;
--# expr-done 2963
Array_Lit := Create_Logic_Var_Array (Internal_Logic_Var_Array'(1 => Fld_3)); 
--# expr-done 2964
Concat_Result := Concat (Map_Result_1, Array_Lit); 
Left_Var := Concat_Result;

      Inc_Ref (Left_Var);




if Left_Var /= No_Logic_Var_Array_Type then
   



   --# scope-start


   


Scope_Result := Left_Var;
   Inc_Ref (Scope_Result);


   --# end
      Finalizer_Scope_750;


   Result_Var := Scope_Result;
else
   --# expr-start 2966 '<ArrayLiteral at nodes.lkt:4695:17>' Array_Lit_1 nodes.lkt:4695
--# expr-start 2965 '<FieldAccess for expected_type_var at nodes.lkt:4695:18>' Fld_4 nodes.lkt:4695







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_4 := Ent.Node.Expr_Expected_Type_Var'Unrestricted_Access;
--# expr-done 2965
Array_Lit_1 := Create_Logic_Var_Array (Internal_Logic_Var_Array'(1 => Fld_4)); 
--# expr-done 2966
   Result_Var := Array_Lit_1;
end if;

      Inc_Ref (Result_Var);


Local_Logic_Vars := Result_Var; Inc_Ref (Local_Logic_Vars);
--# bind logic_vars Local_Logic_Vars
--# expr-start 2975 '<LogicBinaryOp And at nodes.lkt:4697:9>' And_Pred nodes.lkt:4697

for Var of Local_Logic_Vars.Items loop
   Var.Value := No_Entity;
   Entity_Vars.Reset (Var);
end loop;
Logic_Vars := Local_Logic_Vars; Inc_Ref (Logic_Vars);
--# expr-start 2968 '<NPropagate at nodes.lkt:4697:9>' Bind_Result nodes.lkt:4697
--# expr-start 2967 '<FieldAccess for expected_expr_type_var at nodes.lkt:4697:9>' Fld_5 nodes.lkt:4697







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_5 := Ent.Node.Try_Expr_Expected_Expr_Type_Var'Unrestricted_Access;
--# expr-done 2967
Fld_5.Value := No_Entity;
Entity_Vars.Reset (Fld_5);


Bind_Result := Solver.Create_N_Propagate (Fld_5, Create_Type_Decl_P_Imprecise_Common_Ancestor_List_0_Functor (Logic_Vars.N), Entity_Vars.Logic_Var_Array (Logic_Vars.Items), Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4697:9") else null)); 
--# expr-done 2968
--# expr-start 2974 '<LogicAll at nodes.lkt:4699:14>' Logic_Boolean_Op nodes.lkt:4699
--# expr-start 2973 '<Map at nodes.lkt:4699:14>' Map_Result_2 nodes.lkt:4699








   

   --# expr-start 2969 '<FieldAccess for exprs at nodes.lkt:4699:14>' Fld_6 nodes.lkt:4699







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start TryExpr.exprs
Fld_6 := Liblktlang.Implementation.Try_Expr_P_Exprs (Node => Ent.Node, E_Info => Ent.Info);
--# end
--# expr-done 2969

   
      declare
         Map_Result_2_Vec : Logic_Equation_Vectors.Vector;
      begin
   

   

      

      declare
         
         Collection : constant Internal_Entity_Expr_Array_Access := Fld_6;
      begin
         for Item_2 of
               Collection.Items
         loop

            
   --# scope-start


               --# bind e Item_2

            
         
         
      --# expr-start 2972 '<Bind at nodes.lkt:4700:20>' Bind_Result_1 nodes.lkt:4700
--# expr-start 2970 '<FieldAccess for expected_type_var at nodes.lkt:4700:20>' Fld_7 nodes.lkt:4700







   if Item_2.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_7 := Item_2.Node.Expr_Expected_Type_Var'Unrestricted_Access;
--# expr-done 2970
Fld_7.Value := No_Entity;
Entity_Vars.Reset (Fld_7);
--# expr-start 2971 '<FieldAccess for expected_expr_type_var at nodes.lkt:4700:44>' Fld_8 nodes.lkt:4700







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_8 := Ent.Node.Try_Expr_Expected_Expr_Type_Var'Unrestricted_Access;
--# expr-done 2971
Fld_8.Value := No_Entity;
Entity_Vars.Reset (Fld_8);
Bind_Result_1 := Solver.Create_Unify (Fld_7, Fld_8, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4700:20") else null)); 
--# expr-done 2972
      

         declare
            Item_To_Append : constant Logic_Equation := Bind_Result_1;
         begin
               Inc_Ref (Item_To_Append);
            Logic_Equation_Vectors.Append (Map_Result_2_Vec, Item_To_Append);
         end;
   
   
   

            
   --# end
      Finalizer_Scope_751;



         end loop;
      end;
   

   

         Map_Result_2 := Create_Logic_Equation_Array
           (Items_Count => Natural (Logic_Equation_Vectors.Length (Map_Result_2_Vec)));
         for I in Map_Result_2.Items'Range loop
            Map_Result_2.Items (I) := Logic_Equation_Vectors.Get
              (Map_Result_2_Vec,
               I + Logic_Equation_Vectors.Index_Type'First - Map_Result_2.Items'First);
         end loop;
         Logic_Equation_Vectors.Destroy (Map_Result_2_Vec);

      end;
   



--# expr-done 2973
Logic_Boolean_Op := Solver.Create_All (Relation_Array (Map_Result_2.Items), (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4699:14") else null)); 
--# expr-done 2974
And_Pred := Create_And (Bind_Result, Logic_Boolean_Op, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4697:9") else null)); 
--# expr-done 2975
Let_Result := And_Pred; Inc_Ref (Let_Result);
--# end
--# expr-done 2976

         Property_Result := Let_Result;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_345;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_345;
                     Finalizer_Scope_750;
                     Finalizer_Scope_751;




            raise;
      end;



   return Property_Result;
end Try_Expr_P_Expected_Exprs_Type_Equation;
--# end

   







--# property-start TryExpr.xref_equation nodes.lkt:4704
pragma Warnings (Off, "is not referenced");
 function Try_Expr_P_Xref_Equation
  
  (Node : Bare_Try_Expr
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Logic_Equation
is
   Self : Bare_Try_Expr  := Bare_Try_Expr (Node);
     Ent : Internal_Entity_Try_Expr :=
       Internal_Entity_Try_Expr'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Logic_Equation;

      
            procedure Finalizer_Scope_346 with Inline_Always;
            procedure Finalizer_Scope_752 with Inline_Always;

      Fld : Internal_Entity_Expr;
Fld_1 : Logic_Equation;
Fld_2 : Logic_Equation;
And_Pred : Logic_Equation;
Fld_3 : Internal_Entity_Expr_Array_Access;
Fld_4 : Logic_Equation;
Fld_5 : Bare_Expr;
Cast_Result : Bare_Lkt_Node;
Bound_Error_Location : Bare_Lkt_Node;
Fld_6 : Logic_Var;
Fld_7 : Logic_Var;
Pred : Logic_Equation;
Dyn_Var_Bind_Result : Logic_Equation;
And_Pred_1 : Logic_Equation;
Map_Result : Logic_Equation_Array_Access;
Logic_Boolean_Op : Logic_Equation;
And_Pred_2 : Logic_Equation;
Fld_8 : Logic_Var;
Fld_9 : Internal_Entity_Expr_Array_Access;
Fld_10 : Logic_Var;
Map_Result_1 : Logic_Var_Array_Access;
Logic_Vars : Logic_Var_Array_Access;
Bind_Result : Logic_Equation;
And_Pred_3 : Logic_Equation;

            procedure Finalizer_Scope_346 is
            begin
                     Dec_Ref (Fld_1);
                     Dec_Ref (Fld_2);
                     Dec_Ref (And_Pred);
                     Dec_Ref (Fld_3);
                     Dec_Ref (Map_Result);
                     Dec_Ref (Logic_Boolean_Op);
                     Dec_Ref (And_Pred_2);
                     Dec_Ref (Fld_9);
                     Dec_Ref (Map_Result_1);
                     Dec_Ref (Logic_Vars);
                     Dec_Ref (Bind_Result);
                     Dec_Ref (And_Pred_3);
            end Finalizer_Scope_346;
            procedure Finalizer_Scope_752 is
            begin
                     Dec_Ref (Fld_4);
                     Dec_Ref (Pred);
                     Dec_Ref (Dyn_Var_Bind_Result);
                     Dec_Ref (And_Pred_1);
            end Finalizer_Scope_752;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 2997 '<LogicBinaryOp And at nodes.lkt:4705:9>' And_Pred_3 nodes.lkt:4705
--# expr-start 2991 '<LogicBinaryOp And at nodes.lkt:4706:13>' And_Pred_2 nodes.lkt:4706
--# expr-start 2980 '<LogicBinaryOp And at nodes.lkt:4707:17>' And_Pred nodes.lkt:4707
--# expr-start 2978 '<FieldAccess for xref_equation at nodes.lkt:4707:17>' Fld_1 nodes.lkt:4707



--# expr-start 2977 '<FieldAccess for try_expr at nodes.lkt:4707:17>' Fld nodes.lkt:4707







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Create_Internal_Entity_Expr (Node => Ent.Node.Try_Expr_F_Try_Expr, Info => Ent.Info);
--# expr-done 2977



   if Fld.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]LktNode.xref_equation'
Fld_1 := Liblktlang.Implementation.Dispatcher_Lkt_Node_P_Xref_Equation (Node => Fld.Node, E_Info => Fld.Info);
--# end
--# expr-done 2978
--# expr-start 2979 '<FieldAccess for expected_exprs_type_equation at nodes.lkt:4708:22>' Fld_2 nodes.lkt:4708







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start TryExpr.expected_exprs_type_equation
Fld_2 := Liblktlang.Implementation.Try_Expr_P_Expected_Exprs_Type_Equation (Node => Ent.Node, E_Info => Ent.Info);
--# end
--# expr-done 2979
And_Pred := Create_And (Fld_1, Fld_2, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4707:17") else null)); 
--# expr-done 2980
--# expr-start 2990 '<LogicAll at nodes.lkt:4710:18>' Logic_Boolean_Op nodes.lkt:4710
--# expr-start 2989 '<Map at nodes.lkt:4710:18>' Map_Result nodes.lkt:4710








   

   --# expr-start 2981 '<FieldAccess for exprs at nodes.lkt:4710:18>' Fld_3 nodes.lkt:4710







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start TryExpr.exprs
Fld_3 := Liblktlang.Implementation.Try_Expr_P_Exprs (Node => Ent.Node, E_Info => Ent.Info);
--# end
--# expr-done 2981

   
      declare
         Map_Result_Vec : Logic_Equation_Vectors.Vector;
      begin
   

   

      

      declare
         
         Collection : constant Internal_Entity_Expr_Array_Access := Fld_3;
      begin
         for Item_0 of
               Collection.Items
         loop

            
   --# scope-start


               --# bind e Item_0

            
         
         
      --# expr-start 2988 '<LogicBinaryOp And at nodes.lkt:4712:17>' And_Pred_1 nodes.lkt:4712
--# expr-start 2982 '<FieldAccess for xref_equation at nodes.lkt:4712:17>' Fld_4 nodes.lkt:4712







   if Item_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]LktNode.xref_equation'
Fld_4 := Liblktlang.Implementation.Dispatcher_Lkt_Node_P_Xref_Equation (Node => Item_0.Node, E_Info => Item_0.Info);
--# end
--# expr-done 2982
--# expr-start 2987 '<bind at nodes.lkt:4714:21>' Dyn_Var_Bind_Result nodes.lkt:4714





--# expr-start 2983 '<FieldAccess for node at nodes.lkt:4714:43>' Fld_5 nodes.lkt:4714









Fld_5 := Item_0.Node;
--# expr-done 2983



   
      Cast_Result := Fld_5;


Bound_Error_Location := Cast_Result; 
--# expr-start 2986 '<Predicate on TypeDecl.commutative_matching_type at nodes.lkt:4715:21>' Pred nodes.lkt:4715
--# expr-start 2984 '<FieldAccess for expected_type_var at nodes.lkt:4716:25>' Fld_6 nodes.lkt:4716







   if Item_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_6 := Item_0.Node.Expr_Expected_Type_Var'Unrestricted_Access;
--# expr-done 2984
Fld_6.Value := No_Entity;
Entity_Vars.Reset (Fld_6);
--# expr-start 2985 '<FieldAccess for actual_type_var at nodes.lkt:4717:25>' Fld_7 nodes.lkt:4717







   if Item_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_7 := Item_0.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 2985
Fld_7.Value := No_Entity;
Entity_Vars.Reset (Fld_7);


Pred := Solver.Create_N_Predicate ((Fld_6, Fld_7), Create_Type_Decl_P_Commutative_Matching_Type_0_Predicate (2, Bound_Error_Location)); 
--# expr-done 2986
Dyn_Var_Bind_Result := Pred; Inc_Ref (Dyn_Var_Bind_Result);
--# expr-done 2987
And_Pred_1 := Create_And (Fld_4, Dyn_Var_Bind_Result, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4712:17") else null)); 
--# expr-done 2988
      

         declare
            Item_To_Append : constant Logic_Equation := And_Pred_1;
         begin
               Inc_Ref (Item_To_Append);
            Logic_Equation_Vectors.Append (Map_Result_Vec, Item_To_Append);
         end;
   
   
   

            
   --# end
      Finalizer_Scope_752;



         end loop;
      end;
   

   

         Map_Result := Create_Logic_Equation_Array
           (Items_Count => Natural (Logic_Equation_Vectors.Length (Map_Result_Vec)));
         for I in Map_Result.Items'Range loop
            Map_Result.Items (I) := Logic_Equation_Vectors.Get
              (Map_Result_Vec,
               I + Logic_Equation_Vectors.Index_Type'First - Map_Result.Items'First);
         end loop;
         Logic_Equation_Vectors.Destroy (Map_Result_Vec);

      end;
   



--# expr-done 2989
Logic_Boolean_Op := Solver.Create_All (Relation_Array (Map_Result.Items), (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4710:18") else null)); 
--# expr-done 2990
And_Pred_2 := Create_And (And_Pred, Logic_Boolean_Op, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4706:13") else null)); 
--# expr-done 2991
--# expr-start 2994 '<Map at nodes.lkt:4724:13>' Map_Result_1 nodes.lkt:4724








   

   --# expr-start 2992 '<FieldAccess for exprs at nodes.lkt:4724:13>' Fld_9 nodes.lkt:4724







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start TryExpr.exprs
Fld_9 := Liblktlang.Implementation.Try_Expr_P_Exprs (Node => Ent.Node, E_Info => Ent.Info);
--# end
--# expr-done 2992

   
      declare
         Map_Result_1_Vec : Logic_Var_Vectors.Vector;
      begin
   

   

      

      declare
         
         Collection : constant Internal_Entity_Expr_Array_Access := Fld_9;
      begin
         for Item_1 of
               Collection.Items
         loop

            
   --# scope-start


               --# bind e Item_1

            
         
         
      --# expr-start 2993 '<FieldAccess for actual_type_var at nodes.lkt:4724:37>' Fld_10 nodes.lkt:4724







   if Item_1.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_10 := Item_1.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 2993
      

         declare
            Item_To_Append : constant Logic_Var := Fld_10;
         begin
            Logic_Var_Vectors.Append (Map_Result_1_Vec, Item_To_Append);
         end;
   
   
   

            
   --# end



         end loop;
      end;
   

   

         Map_Result_1 := Create_Logic_Var_Array
           (Items_Count => Natural (Logic_Var_Vectors.Length (Map_Result_1_Vec)));
         for I in Map_Result_1.Items'Range loop
            Map_Result_1.Items (I) := Logic_Var_Vectors.Get
              (Map_Result_1_Vec,
               I + Logic_Var_Vectors.Index_Type'First - Map_Result_1.Items'First);
         end loop;
         Logic_Var_Vectors.Destroy (Map_Result_1_Vec);

      end;
   



--# expr-done 2994
for Var of Map_Result_1.Items loop
   Var.Value := No_Entity;
   Entity_Vars.Reset (Var);
end loop;
Logic_Vars := Map_Result_1; Inc_Ref (Logic_Vars);
--# expr-start 2996 '<NPropagate at nodes.lkt:4722:14>' Bind_Result nodes.lkt:4722
--# expr-start 2995 '<FieldAccess for actual_type_var at nodes.lkt:4722:14>' Fld_8 nodes.lkt:4722







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_8 := Ent.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 2995
Fld_8.Value := No_Entity;
Entity_Vars.Reset (Fld_8);


Bind_Result := Solver.Create_N_Propagate (Fld_8, Create_Type_Decl_P_Imprecise_Common_Ancestor_List_0_Functor (Logic_Vars.N), Entity_Vars.Logic_Var_Array (Logic_Vars.Items), Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4722:14") else null)); 
--# expr-done 2996
And_Pred_3 := Create_And (And_Pred_2, Bind_Result, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4705:9") else null)); 
--# expr-done 2997

         Property_Result := And_Pred_3;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_346;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_346;
                     Finalizer_Scope_752;




            raise;
      end;



   return Property_Result;
end Try_Expr_P_Xref_Equation;
--# end

   







--# property-start TryExpr.has_context_free_type nodes.lkt:4727
pragma Warnings (Off, "is not referenced");
 function Try_Expr_P_Has_Context_Free_Type
  
  (Node : Bare_Try_Expr
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Boolean
is
   Self : Bare_Try_Expr  := Bare_Try_Expr (Node);
      --# bind self Self

   


   Property_Result : Boolean;

      

      



begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         

         Property_Result := False;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Try_Expr_P_Has_Context_Free_Type;
--# end



   


      

   --
   --  Primitives for Bare_Un_Op
   --

   



      
      procedure Initialize_Fields_For_Un_Op
        (Self : Bare_Un_Op
         ; Un_Op_F_Op : Bare_Op
         ; Un_Op_F_Expr : Bare_Expr
        ) is
      begin
            Initialize_Fields_For_Expr
              (Self);

            Self.Un_Op_F_Op := Un_Op_F_Op;
            Self.Un_Op_F_Expr := Un_Op_F_Expr;
         

      end Initialize_Fields_For_Un_Op;

      
   function Un_Op_F_Op
     (Node : Bare_Un_Op) return Bare_Op
   is
      

   begin
         
         return Node.Un_Op_F_Op;
      
   end;

      
   function Un_Op_F_Expr
     (Node : Bare_Un_Op) return Bare_Expr
   is
      

   begin
         
         return Node.Un_Op_F_Expr;
      
   end;


   







--# property-start UnOp.xref_equation nodes.lkt:4737
pragma Warnings (Off, "is not referenced");
 function Un_Op_P_Xref_Equation
  
  (Node : Bare_Un_Op
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Logic_Equation
is
   Self : Bare_Un_Op  := Bare_Un_Op (Node);
     Ent : Internal_Entity_Un_Op :=
       Internal_Entity_Un_Op'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Logic_Equation;

      
            procedure Finalizer_Scope_348 with Inline_Always;

      Fld : Internal_Entity_Expr;
Fld_1 : Logic_Equation;
Fld_2 : Logic_Var;
Fld_3 : Internal_Entity_Expr;
Fld_4 : Logic_Var;
Bind_Result : Logic_Equation;
And_Pred : Logic_Equation;
Fld_5 : Bare_Expr;
Cast_Result : Bare_Lkt_Node;
Bound_Error_Location : Bare_Lkt_Node;
Fld_6 : Logic_Var;
Pred : Logic_Equation;
Dyn_Var_Bind_Result : Logic_Equation;
And_Pred_1 : Logic_Equation;

            procedure Finalizer_Scope_348 is
            begin
                     Dec_Ref (Fld_1);
                     Dec_Ref (Bind_Result);
                     Dec_Ref (And_Pred);
                     Dec_Ref (Pred);
                     Dec_Ref (Dyn_Var_Bind_Result);
                     Dec_Ref (And_Pred_1);
            end Finalizer_Scope_348;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 3009 '<LogicBinaryOp And at nodes.lkt:4738:9>' And_Pred_1 nodes.lkt:4738
--# expr-start 3004 '<LogicBinaryOp And at nodes.lkt:4739:13>' And_Pred nodes.lkt:4739
--# expr-start 2999 '<FieldAccess for xref_equation at nodes.lkt:4739:13>' Fld_1 nodes.lkt:4739



--# expr-start 2998 '<FieldAccess for expr at nodes.lkt:4739:13>' Fld nodes.lkt:4739







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Create_Internal_Entity_Expr (Node => Ent.Node.Un_Op_F_Expr, Info => Ent.Info);
--# expr-done 2998



   if Fld.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]LktNode.xref_equation'
Fld_1 := Liblktlang.Implementation.Dispatcher_Lkt_Node_P_Xref_Equation (Node => Fld.Node, E_Info => Fld.Info);
--# end
--# expr-done 2999
--# expr-start 3003 '<Bind at nodes.lkt:4740:18>' Bind_Result nodes.lkt:4740
--# expr-start 3000 '<FieldAccess for actual_type_var at nodes.lkt:4740:18>' Fld_2 nodes.lkt:4740







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_2 := Ent.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 3000
Fld_2.Value := No_Entity;
Entity_Vars.Reset (Fld_2);
--# expr-start 3002 '<FieldAccess for actual_type_var at nodes.lkt:4740:43>' Fld_4 nodes.lkt:4740



--# expr-start 3001 '<FieldAccess for expr at nodes.lkt:4740:43>' Fld_3 nodes.lkt:4740







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_3 := Create_Internal_Entity_Expr (Node => Ent.Node.Un_Op_F_Expr, Info => Ent.Info);
--# expr-done 3001



   if Fld_3.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_4 := Fld_3.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 3002
Fld_4.Value := No_Entity;
Entity_Vars.Reset (Fld_4);
Bind_Result := Solver.Create_Unify (Fld_2, Fld_4, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4740:18") else null)); 
--# expr-done 3003
And_Pred := Create_And (Fld_1, Bind_Result, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4739:13") else null)); 
--# expr-done 3004
--# expr-start 3008 '<bind at nodes.lkt:4743:13>' Dyn_Var_Bind_Result nodes.lkt:4743





--# expr-start 3005 '<FieldAccess for expr at nodes.lkt:4743:35>' Fld_5 nodes.lkt:4743







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_5 := Self.Un_Op_F_Expr;
--# expr-done 3005



   
      Cast_Result := Fld_5;


Bound_Error_Location := Cast_Result; 
--# expr-start 3007 '<Predicate on TypeDecl.is_int_type at nodes.lkt:4744:13>' Pred nodes.lkt:4744
--# expr-start 3006 '<FieldAccess for actual_type_var at nodes.lkt:4744:35>' Fld_6 nodes.lkt:4744







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_6 := Ent.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 3006
Fld_6.Value := No_Entity;
Entity_Vars.Reset (Fld_6);

Pred := Solver.Create_Predicate (Fld_6, Create_Type_Decl_P_Is_Int_Type_0_Predicate (Bound_Error_Location)); 
--# expr-done 3007
Dyn_Var_Bind_Result := Pred; Inc_Ref (Dyn_Var_Bind_Result);
--# expr-done 3008
And_Pred_1 := Create_And (And_Pred, Dyn_Var_Bind_Result, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4738:9") else null)); 
--# expr-done 3009

         Property_Result := And_Pred_1;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_348;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_348;




            raise;
      end;



   return Property_Result;
end Un_Op_P_Xref_Equation;
--# end



   


      

   --
   --  Primitives for Bare_Full_Decl
   --

   



      
      procedure Initialize_Fields_For_Full_Decl
        (Self : Bare_Full_Decl
         ; Full_Decl_F_Doc : Bare_String_Lit
         ; Full_Decl_F_Decl_Annotations : Bare_Decl_Annotation_List
         ; Full_Decl_F_Decl : Bare_Decl
        ) is
      begin

            Self.Full_Decl_F_Doc := Full_Decl_F_Doc;
            Self.Full_Decl_F_Decl_Annotations := Full_Decl_F_Decl_Annotations;
            Self.Full_Decl_F_Decl := Full_Decl_F_Decl;
         

      end Initialize_Fields_For_Full_Decl;

      
   function Full_Decl_F_Doc
     (Node : Bare_Full_Decl) return Bare_String_Lit
   is
      

   begin
         
         return Node.Full_Decl_F_Doc;
      
   end;

      
   function Full_Decl_F_Decl_Annotations
     (Node : Bare_Full_Decl) return Bare_Decl_Annotation_List
   is
      

   begin
         
         return Node.Full_Decl_F_Decl_Annotations;
      
   end;

      
   function Full_Decl_F_Decl
     (Node : Bare_Full_Decl) return Bare_Decl
   is
      

   begin
         
         return Node.Full_Decl_F_Decl;
      
   end;


   







--# property-start FullDecl.has_annotation nodes.lkt:4761
pragma Warnings (Off, "is not referenced");
 function Full_Decl_P_Has_Annotation
  
  (Node : Bare_Full_Decl
      ; Name : Symbol_Type
  )

   return Boolean
is
   Self : Bare_Full_Decl  := Bare_Full_Decl (Node);
      --# bind self Self

   

   --# bind name Name

   Property_Result : Boolean;

      

      Fld : Bare_Decl_Annotation;
Is_Null : Boolean;
Not_Val : Boolean;



begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         --# expr-start 3012 '<Not at nodes.lkt:4762:9>' Not_Val nodes.lkt:4762
--# expr-start 3011 '<IsNull at nodes.lkt:4762:13>' Is_Null nodes.lkt:4762
--# expr-start 3010 '<FieldAccess for get_annotation at nodes.lkt:4762:13>' Fld nodes.lkt:4762







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;



--# property-call-start FullDecl.get_annotation
Fld := Liblktlang.Implementation.Full_Decl_P_Get_Annotation (Node => Self, Name => Name);
--# end
--# expr-done 3010
Is_Null := Fld = null; 
--# expr-done 3011
Not_Val := not (Is_Null); 
--# expr-done 3012

         Property_Result := Not_Val;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Full_Decl_P_Has_Annotation;
--# end

   







--# property-start FullDecl.get_annotation nodes.lkt:4765
pragma Warnings (Off, "is not referenced");
 function Full_Decl_P_Get_Annotation
  
  (Node : Bare_Full_Decl
      ; Name : Symbol_Type
  )

   return Bare_Decl_Annotation
is
   Self : Bare_Full_Decl  := Bare_Full_Decl (Node);
      --# bind self Self

   

   --# bind name Name

   Property_Result : Bare_Decl_Annotation;

      

      Fld : Bare_Decl_Annotation_List;
Item_0 : Bare_Decl_Annotation;
Fld_1 : Bare_Id;
Sym : Symbol_Type;
Is_Equal : Boolean;
Find_Result : Bare_Decl_Annotation;



begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         --# expr-start 3017 '<Find at nodes.lkt:4766:9>' Find_Result nodes.lkt:4766








   

   --# expr-start 3013 '<FieldAccess for decl_annotations at nodes.lkt:4766:9>' Fld nodes.lkt:4766







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Self.Full_Decl_F_Decl_Annotations;
--# expr-done 3013

   
      Find_Result := No_Bare_Lkt_Node;
   

   

      if Fld = null then
         
      Find_Result := No_Bare_Lkt_Node;
   
      else
         

      declare
         
         Collection : constant Bare_Decl_Annotation_List := Fld;
      begin
         for Untyped_Item_0 of
               Collection.Nodes (1 .. Children_Count (Collection))
         loop
                  
                  Item_0 := Untyped_Item_0; 

            
   --# scope-start


               --# bind ann Item_0

            
      --# expr-start 3016 '<Eq at nodes.lkt:4766:45>' Is_Equal nodes.lkt:4766
--# expr-start 3015 '<GetSymbol at nodes.lkt:4766:45>' Sym nodes.lkt:4766
--# expr-start 3014 '<FieldAccess for name at nodes.lkt:4766:45>' Fld_1 nodes.lkt:4766







   if Item_0 = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_1 := Item_0.Decl_Annotation_F_Name;
--# expr-done 3014
Sym := Get_Symbol (Fld_1); 
--# expr-done 3015

Is_Equal := Sym = Name; 
--# expr-done 3016
      if Is_Equal then
         Find_Result := Item_0; 
      end if;
   

            
   --# end


               exit when Is_Equal;

         end loop;
      end;
   
      end if;

   
   



--# expr-done 3017

         Property_Result := Find_Result;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Full_Decl_P_Get_Annotation;
--# end



   


      

   --
   --  Primitives for Bare_Grammar_List_Sep
   --

   



      
      procedure Initialize_Fields_For_Grammar_List_Sep
        (Self : Bare_Grammar_List_Sep
         ; Grammar_List_Sep_F_Token : Bare_Grammar_Expr
         ; Grammar_List_Sep_F_Extra : Bare_Id
        ) is
      begin

            Self.Grammar_List_Sep_F_Token := Grammar_List_Sep_F_Token;
            Self.Grammar_List_Sep_F_Extra := Grammar_List_Sep_F_Extra;
         

      end Initialize_Fields_For_Grammar_List_Sep;

      
   function Grammar_List_Sep_F_Token
     (Node : Bare_Grammar_List_Sep) return Bare_Grammar_Expr
   is
      

   begin
         
         return Node.Grammar_List_Sep_F_Token;
      
   end;

      
   function Grammar_List_Sep_F_Extra
     (Node : Bare_Grammar_List_Sep) return Bare_Id
   is
      

   begin
         
         return Node.Grammar_List_Sep_F_Extra;
      
   end;




   


      

   --
   --  Primitives for Bare_Import
   --

   



   

   

   

   

   

   

   


      procedure Import_Pre_Env_Actions
        (Self            : Bare_Import;
         State           : in out PLE_Node_State;
         Add_To_Env_Only : Boolean := False) is
      begin
            


   
      declare
         Dummy : Internal_Unit;
      begin
         Dummy := Liblktlang.Implementation.Env_Do_23 (Node => 
Self);
      end;
   
   
      end;



      
      procedure Initialize_Fields_For_Import
        (Self : Bare_Import
         ; Import_F_Name : Bare_Module_Ref_Id
        ) is
      begin

            Self.Import_F_Name := Import_F_Name;
         

      end Initialize_Fields_For_Import;

      
   function Import_F_Name
     (Node : Bare_Import) return Bare_Module_Ref_Id
   is
      

   begin
         
         return Node.Import_F_Name;
      
   end;


   







--# property-start Import.referenced_unit nodes.lkt:4786
pragma Warnings (Off, "is not referenced");
 function Import_P_Referenced_Unit
  
  (Node : Bare_Import
  )

   return Internal_Unit
is
   Self : Bare_Import  := Bare_Import (Node);
      --# bind self Self

   


   Property_Result : Internal_Unit;

      
            procedure Finalizer_Scope_351 with Inline_Always;

      Fld : Bare_Module_Ref_Id;
Fld_1 : String_Type;
Fld_2 : Internal_Unit;

            procedure Finalizer_Scope_351 is
            begin
                     Dec_Ref (Fld_1);
            end Finalizer_Scope_351;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

            Populate_Lexical_Env_For_Unit (Self);
      end if;


      begin
         
   --# scope-start

         --# expr-start 3020 '<FieldAccess for internal_fetch_referenced_unit at nodes.lkt:4787:9>' Fld_2 nodes.lkt:4787







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# expr-start 3019 '<FieldAccess for text at nodes.lkt:4787:45>' Fld_1 nodes.lkt:4787



--# expr-start 3018 '<FieldAccess for name at nodes.lkt:4787:45>' Fld nodes.lkt:4787







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Self.Import_F_Name;
--# expr-done 3018



   if Fld = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_1 := Liblktlang.Implementation.Text (Node => Fld);
--# expr-done 3019
Fld_2 := Liblktlang.Implementation.Extensions.Lkt_Node_P_Internal_Fetch_Referenced_Unit (Node => Self, Name => Fld_1);
--# expr-done 3020

         Property_Result := Fld_2;
         
   --# end
      Finalizer_Scope_351;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_351;




            raise;
      end;



   return Property_Result;
end Import_P_Referenced_Unit;
--# end

   







--# property-start Import._env_do_23 nodes.lkt:4790
pragma Warnings (Off, "is not referenced");
 function Env_Do_23
  
  (Node : Bare_Import
  )

   return Internal_Unit
is
   Self : Bare_Import  := Bare_Import (Node);
      --# bind self Self

   


   Property_Result : Internal_Unit;

      

      Fld : Internal_Unit;



begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 3021 '<FieldAccess for referenced_unit at nodes.lkt:4790:12>' Fld nodes.lkt:4790







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start Import.referenced_unit
Fld := Liblktlang.Implementation.Import_P_Referenced_Unit (Node => Self);
--# end
--# expr-done 3021

         Property_Result := Fld;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Env_Do_23;
--# end



   


      

   --
   --  Primitives for Bare_Langkit_Root
   --

   



   

   

   

   

   

   

   


      procedure Langkit_Root_Pre_Env_Actions
        (Self            : Bare_Langkit_Root;
         State           : in out PLE_Node_State;
         Add_To_Env_Only : Boolean := False) is
      begin
            


   
      declare
         Dummy : Internal_Unit;
      begin
         Dummy := Liblktlang.Implementation.Env_Do_24 (Node => 
Self);
      end;
   
   
      end;

      procedure Langkit_Root_Post_Env_Actions
        (Self : Bare_Langkit_Root; State : in out PLE_Node_State) is
      begin
            


   
      if Liblktlang.Implementation.Ref_Cond_26 (Node => 
Self) then

         declare
            Ref_Env_Nodes : Bare_Lkt_Node_Array_Access :=
               Liblktlang.Implementation.Ref_Env_Nodes_25 (Node => 
Self);

            Env : Lexical_Env :=
              Self.Self_Env;
         begin

            Ref_Env
              (Self,
               Env,
               Ref_Env_Nodes,
               Langkit_Root_P_Internal_Env'Access,
               Normal,
               All_Cats,
               False);
            Dec_Ref (Ref_Env_Nodes);
         end;

      end if;
   
   
      end;


      
      procedure Initialize_Fields_For_Langkit_Root
        (Self : Bare_Langkit_Root
         ; Langkit_Root_F_Imports : Bare_Import_List
         ; Langkit_Root_F_Decls : Bare_Full_Decl_List
        ) is
      begin

            Self.Langkit_Root_F_Imports := Langkit_Root_F_Imports;
            Self.Langkit_Root_F_Decls := Langkit_Root_F_Decls;
         

      end Initialize_Fields_For_Langkit_Root;

      
   function Langkit_Root_F_Imports
     (Node : Bare_Langkit_Root) return Bare_Import_List
   is
      

   begin
         
         return Node.Langkit_Root_F_Imports;
      
   end;

      
   function Langkit_Root_F_Decls
     (Node : Bare_Langkit_Root) return Bare_Full_Decl_List
   is
      

   begin
         
         return Node.Langkit_Root_F_Decls;
      
   end;


   







--# property-start LangkitRoot.internal_env nodes.lkt:4810
pragma Warnings (Off, "is not referenced");
 function Langkit_Root_P_Internal_Env
  
  (Node : Bare_Langkit_Root
  )

   return Lexical_Env
is
   Self : Bare_Langkit_Root  := Bare_Langkit_Root (Node);
      --# bind self Self

   


   Property_Result : Lexical_Env;

      
            procedure Finalizer_Scope_353 with Inline_Always;

      Bound_Origin : Internal_Entity;
Fld : Lexical_Env := Empty_Env;
Sym : Symbol_Type;
Env_Get_Result : Internal_Entity;
Cast_Result : Internal_Entity_Decl;
Fld_1 : Lexical_Env := Empty_Env;
Dyn_Var_Bind_Result : Lexical_Env := Empty_Env;

            procedure Finalizer_Scope_353 is
            begin
                     Dec_Ref (Fld);
                     Dec_Ref (Fld_1);
                     Dec_Ref (Dyn_Var_Bind_Result);
            end Finalizer_Scope_353;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 3027 '<bind at nodes.lkt:4811:9>' Dyn_Var_Bind_Result nodes.lkt:4811

Bound_Origin := No_Entity; 
--# expr-start 3026 '<FieldAccess for defined_scope at nodes.lkt:4813:9>' Fld_1 nodes.lkt:4813



--# expr-start 3025 '<Cast to Decl at nodes.lkt:4813:9>' Cast_Result nodes.lkt:4813





--# expr-start 3024 '<EnvGet at nodes.lkt:4813:9>' Env_Get_Result nodes.lkt:4813
--# expr-start 3022 '<FieldAccess for children_env at nodes.lkt:4813:9>' Fld nodes.lkt:4813







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Liblktlang.Implementation.Children_Env (Node => Self);
--# expr-done 3022
--# expr-start 3023 '<Symbol __internal at nodes.lkt:4813:37>' Sym nodes.lkt:4813
Sym := Precomputed_Symbol (Precomputed_Symbol_Table (Self.Unit.Context.Symbols), Precomputed_Sym_Internal); 
--# expr-done 3023


Env_Get_Result := AST_Envs.Get_First (Self => Fld, Key => Thin (Sym), Lookup_Kind => To_Lookup_Kind_Type (Recursive), Categories => (Nocat => True)); 
--# expr-done 3024



   if Env_Get_Result.Node = null
      or else Env_Get_Result.Node.Kind in Lkt_Decl
   then
      
      Cast_Result := Create_Internal_Entity_Decl
        (Node => Env_Get_Result.Node,
         Info => Env_Get_Result.Info);

   else
         Cast_Result := No_Entity_Decl;
   end if;


--# expr-done 3025



   if Cast_Result.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]Decl.defined_scope'
Fld_1 := Liblktlang.Implementation.Dispatcher_Decl_P_Defined_Scope (Node => Cast_Result.Node, Origin => Bound_Origin, E_Info => Cast_Result.Info);
--# end
--# expr-done 3026
Dyn_Var_Bind_Result := Fld_1; Inc_Ref (Dyn_Var_Bind_Result);
--# expr-done 3027

         Property_Result := Dyn_Var_Bind_Result;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_353;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_353;




            raise;
      end;



   return Property_Result;
end Langkit_Root_P_Internal_Env;
--# end

   







--# property-start LangkitRoot._env_do_24 nodes.lkt:4817
pragma Warnings (Off, "is not referenced");
 function Env_Do_24
  
  (Node : Bare_Langkit_Root
  )

   return Internal_Unit
is
   Self : Bare_Langkit_Root  := Bare_Langkit_Root (Node);
      --# bind self Self

   


   Property_Result : Internal_Unit;

      

      Fld : Internal_Unit;



begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         --# expr-start 3028 '<FieldAccess for fetch_prelude at nodes.lkt:4817:12>' Fld nodes.lkt:4817







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Liblktlang.Implementation.Extensions.Langkit_Root_P_Fetch_Prelude (Node => Self);
--# expr-done 3028

         Property_Result := Fld;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Env_Do_24;
--# end

   







--# property-start LangkitRoot._ref_env_nodes_25 nodes.lkt:4820
pragma Warnings (Off, "is not referenced");
 function Ref_Env_Nodes_25
  
  (Node : Bare_Langkit_Root
  )

   return Bare_Lkt_Node_Array_Access
is
   Self : Bare_Langkit_Root  := Bare_Langkit_Root (Node);
      --# bind self Self

   


   Property_Result : Bare_Lkt_Node_Array_Access;

      
            procedure Finalizer_Scope_402 with Inline_Always;

      Cast_Expr : Bare_Langkit_Root;
Cast_Result : Bare_Lkt_Node;
Array_Lit : Bare_Lkt_Node_Array_Access;

            procedure Finalizer_Scope_402 is
            begin
                     Dec_Ref (Array_Lit);
            end Finalizer_Scope_402;


begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         --# expr-start 3030 '<ArrayLiteral at nodes.lkt:4820:13>' Array_Lit nodes.lkt:4820
--# expr-start 3029 '<Cast to LktNode at nodes.lkt:4820:14>' Cast_Result nodes.lkt:4820






Cast_Expr := Self; 



   
      Cast_Result := Cast_Expr;


--# expr-done 3029
Array_Lit := Create_Bare_Lkt_Node_Array (Internal_Bare_Lkt_Node_Array'(1 => Cast_Result)); 
--# expr-done 3030

         Property_Result := Array_Lit;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_402;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_402;




            raise;
      end;



   return Property_Result;
end Ref_Env_Nodes_25;
--# end

   







--# property-start LangkitRoot._ref_cond_26 nodes.lkt:4822
pragma Warnings (Off, "is not referenced");
 function Ref_Cond_26
  
  (Node : Bare_Langkit_Root
  )

   return Boolean
is
   Self : Bare_Langkit_Root  := Bare_Langkit_Root (Node);
      --# bind self Self

   


   Property_Result : Boolean;

      

      Fld : Internal_Unit;
Fld_1 : Internal_Unit;
Is_Equal : Boolean;



begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         --# expr-start 3033 '<Eq at nodes.lkt:4822:18>' Is_Equal nodes.lkt:4822
--# expr-start 3031 '<FieldAccess for unit at nodes.lkt:4822:18>' Fld nodes.lkt:4822







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Liblktlang.Implementation.Unit (Node => Self);
--# expr-done 3031
--# expr-start 3032 '<FieldAccess for fetch_prelude at nodes.lkt:4822:31>' Fld_1 nodes.lkt:4822







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_1 := Liblktlang.Implementation.Extensions.Langkit_Root_P_Fetch_Prelude (Node => Self);
--# expr-done 3032
Is_Equal := Fld = Fld_1; 
--# expr-done 3033

         Property_Result := Is_Equal;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Ref_Cond_26;
--# end


   
function Langkit_Root_P_Internal_Env
  (E : Entity
  ) return Lexical_Env
is
   

begin
   
      if E.Node /= null
         and then E.Node.Kind not in Lkt_Langkit_Root_Range
      then
         Raise_Property_Exception
           (E.Node,
            Property_Error'Identity,
            "mismatching node type");
      end if;

   declare
      Result : constant Lexical_Env :=
         Langkit_Root_P_Internal_Env (E.Node);
   begin
         return Result;
   end;
end;


   


      

   --
   --  Primitives for Bare_Lexer_Case_Rule
   --

   



      
      procedure Initialize_Fields_For_Lexer_Case_Rule
        (Self : Bare_Lexer_Case_Rule
         ; Lexer_Case_Rule_F_Expr : Bare_Grammar_Expr
         ; Lexer_Case_Rule_F_Alts : Bare_Base_Lexer_Case_Rule_Alt_List
        ) is
      begin

            Self.Lexer_Case_Rule_F_Expr := Lexer_Case_Rule_F_Expr;
            Self.Lexer_Case_Rule_F_Alts := Lexer_Case_Rule_F_Alts;
         

      end Initialize_Fields_For_Lexer_Case_Rule;

      
   function Lexer_Case_Rule_F_Expr
     (Node : Bare_Lexer_Case_Rule) return Bare_Grammar_Expr
   is
      

   begin
         
         return Node.Lexer_Case_Rule_F_Expr;
      
   end;

      
   function Lexer_Case_Rule_F_Alts
     (Node : Bare_Lexer_Case_Rule) return Bare_Base_Lexer_Case_Rule_Alt_List
   is
      

   begin
         
         return Node.Lexer_Case_Rule_F_Alts;
      
   end;




   


      

   --
   --  Primitives for Bare_Lexer_Case_Rule_Send
   --

   



      
      procedure Initialize_Fields_For_Lexer_Case_Rule_Send
        (Self : Bare_Lexer_Case_Rule_Send
         ; Lexer_Case_Rule_Send_F_Sent : Bare_Ref_Id
         ; Lexer_Case_Rule_Send_F_Match_Size : Bare_Num_Lit
        ) is
      begin

            Self.Lexer_Case_Rule_Send_F_Sent := Lexer_Case_Rule_Send_F_Sent;
            Self.Lexer_Case_Rule_Send_F_Match_Size := Lexer_Case_Rule_Send_F_Match_Size;
         

      end Initialize_Fields_For_Lexer_Case_Rule_Send;

      
   function Lexer_Case_Rule_Send_F_Sent
     (Node : Bare_Lexer_Case_Rule_Send) return Bare_Ref_Id
   is
      

   begin
         
         return Node.Lexer_Case_Rule_Send_F_Sent;
      
   end;

      
   function Lexer_Case_Rule_Send_F_Match_Size
     (Node : Bare_Lexer_Case_Rule_Send) return Bare_Num_Lit
   is
      

   begin
         
         return Node.Lexer_Case_Rule_Send_F_Match_Size;
      
   end;




   


      

   --
   --  Primitives for Bare_List_Kind
   --

   







   


      

   --
   --  Primitives for Bare_List_Kind_One
   --

   







   


      

   --
   --  Primitives for Bare_List_Kind_Zero
   --

   







   


      

   --
   --  Primitives for Bare_Lkt_Node_Base_List
   --

   







   


      

   --
   --  Primitives for Bare_Base_Lexer_Case_Rule_Alt_List
   --

   







   


      

   --
   --  Primitives for Bare_Block_String_Line_List
   --

   







   


      

   --
   --  Primitives for Bare_Call_Expr_List
   --

   







   


      

   --
   --  Primitives for Bare_Decl_Annotation_List
   --

   







   


      

   --
   --  Primitives for Bare_Elsif_Branch_List
   --

   







   


      

   --
   --  Primitives for Bare_Enum_Class_Alt_Decl_List
   --

   







   


      

   --
   --  Primitives for Bare_Enum_Class_Case_List
   --

   







   


      

   --
   --  Primitives for Bare_Enum_Lit_Decl_List
   --

   







   


      

   --
   --  Primitives for Bare_Expr_List
   --

   







   


      

   --
   --  Primitives for Bare_Any_Of_List
   --

   







   


      

   --
   --  Primitives for Bare_Full_Decl_List
   --

   







   


      

   --
   --  Primitives for Bare_Decl_Block
   --

   



   

   

   

   

   

   

   


      procedure Decl_Block_Pre_Env_Actions
        (Self            : Bare_Decl_Block;
         State           : in out PLE_Node_State;
         Add_To_Env_Only : Boolean := False) is
      begin
            


   
      if Add_To_Env_Only then
         return;
      end if;

      declare
         No_Parent         : constant Boolean :=
            False;
         Transitive_Parent : constant Boolean :=
            Liblktlang.Implementation.Env_Trans_Parent_27 (Node => 
Self);
         Names             : Symbol_Type_Array_Access :=
            null;
      begin
         Add_Env (Self, State, No_Parent, Transitive_Parent, Names);
      end;
   
   
      end;





   







--# property-start DeclBlock._env_trans_parent_27 '<builtin>:0'
pragma Warnings (Off, "is not referenced");
 function Env_Trans_Parent_27
  
  (Node : Bare_Decl_Block
  )

   return Boolean
is
   Self : Bare_Decl_Block  := Bare_Decl_Block (Node);
      --# bind self Self

   


   Property_Result : Boolean;

      

      



begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         

         Property_Result := False;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Env_Trans_Parent_27;
--# end



   


      

   --
   --  Primitives for Bare_Generic_Formal_Decl_List
   --

   







   


      

   --
   --  Primitives for Bare_Fun_Arg_Decl_List
   --

   







   


      

   --
   --  Primitives for Bare_Grammar_Expr_List
   --

   







   


      

   --
   --  Primitives for Bare_Grammar_Expr_List_List
   --

   







   


      

   --
   --  Primitives for Bare_Import_List
   --

   







   


      

   --
   --  Primitives for Bare_Lambda_Arg_Decl_List
   --

   







   


      

   --
   --  Primitives for Bare_Lkt_Node_List
   --

   







   


      

   --
   --  Primitives for Bare_Block_Decl_List
   --

   







   


      

   --
   --  Primitives for Bare_Match_Branch_List
   --

   







   


      

   --
   --  Primitives for Bare_Param_List
   --

   







   


      

   --
   --  Primitives for Bare_Ref_Id_List
   --

   







   


      

   --
   --  Primitives for Bare_Type_Ref_List
   --

   







   


      

   --
   --  Primitives for Bare_Isa_List
   --

   







   


      

   --
   --  Primitives for Bare_Match_Branch
   --

   



   

   

   

   

   

   

   


      procedure Match_Branch_Pre_Env_Actions
        (Self            : Bare_Match_Branch;
         State           : in out PLE_Node_State;
         Add_To_Env_Only : Boolean := False) is
      begin
            


   
      if Add_To_Env_Only then
         return;
      end if;

      declare
         No_Parent         : constant Boolean :=
            False;
         Transitive_Parent : constant Boolean :=
            Liblktlang.Implementation.Env_Trans_Parent_28 (Node => 
Self);
         Names             : Symbol_Type_Array_Access :=
            null;
      begin
         Add_Env (Self, State, No_Parent, Transitive_Parent, Names);
      end;
   
   
      end;



      
      procedure Initialize_Fields_For_Match_Branch
        (Self : Bare_Match_Branch
         ; Match_Branch_F_Decl : Bare_Match_Val_Decl
         ; Match_Branch_F_Expr : Bare_Expr
        ) is
      begin

            Self.Match_Branch_F_Decl := Match_Branch_F_Decl;
            Self.Match_Branch_F_Expr := Match_Branch_F_Expr;
         

      end Initialize_Fields_For_Match_Branch;

      
   function Match_Branch_F_Decl
     (Node : Bare_Match_Branch) return Bare_Match_Val_Decl
   is
      

   begin
         
         return Node.Match_Branch_F_Decl;
      
   end;

      
   function Match_Branch_F_Expr
     (Node : Bare_Match_Branch) return Bare_Expr
   is
      

   begin
         
         return Node.Match_Branch_F_Expr;
      
   end;


   







--# property-start MatchBranch._env_trans_parent_28 '<builtin>:0'
pragma Warnings (Off, "is not referenced");
 function Env_Trans_Parent_28
  
  (Node : Bare_Match_Branch
  )

   return Boolean
is
   Self : Bare_Match_Branch  := Bare_Match_Branch (Node);
      --# bind self Self

   


   Property_Result : Boolean;

      

      



begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         

         Property_Result := False;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Env_Trans_Parent_28;
--# end



   


      

   --
   --  Primitives for Bare_Op
   --

   





   







--# property-start Op.is_equation_op nodes.lkt:4910
pragma Warnings (Off, "is not referenced");
 function Op_P_Is_Equation_Op
  
  (Node : Bare_Op
  )

   return Boolean
is
   Self : Bare_Op  := Bare_Op (Node);
      --# bind self Self

   


   Property_Result : Boolean;

      

      Is_A : Boolean;



begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         --# expr-start 3034 '<IsA Op.LogicAnd, Op.LogicOr at nodes.lkt:4910:34>' Is_A nodes.lkt:4910

Is_A := Self /= null 
and then Self.Kind in Lkt_Op_Logic_And_Range | Lkt_Op_Logic_Or_Range; 
--# expr-done 3034

         Property_Result := Is_A;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Op_P_Is_Equation_Op;
--# end

   







--# property-start Op.is_bool_op nodes.lkt:4912
pragma Warnings (Off, "is not referenced");
 function Op_P_Is_Bool_Op
  
  (Node : Bare_Op
  )

   return Boolean
is
   Self : Bare_Op  := Bare_Op (Node);
      --# bind self Self

   


   Property_Result : Boolean;

      

      Is_A : Boolean;



begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         --# expr-start 3035 '<IsA Op.And, Op.Or at nodes.lkt:4912:30>' Is_A nodes.lkt:4912

Is_A := Self /= null 
and then Self.Kind in Lkt_Op_And_Range | Lkt_Op_Or_Range; 
--# expr-done 3035

         Property_Result := Is_A;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Op_P_Is_Bool_Op;
--# end

   







--# property-start Op.is_arith_op nodes.lkt:4914
pragma Warnings (Off, "is not referenced");
 function Op_P_Is_Arith_Op
  
  (Node : Bare_Op
  )

   return Boolean
is
   Self : Bare_Op  := Bare_Op (Node);
      --# bind self Self

   


   Property_Result : Boolean;

      

      Is_A : Boolean;



begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         --# expr-start 3036 '<IsA Op.Plus, Op.Minus, Op.Mult, Op.Div at nodes.lkt:4914:31>' Is_A nodes.lkt:4914

Is_A := Self /= null 
and then Self.Kind in Lkt_Op_Plus_Range | Lkt_Op_Minus_Range | Lkt_Op_Mult_Range | Lkt_Op_Div_Range; 
--# expr-done 3036

         Property_Result := Is_A;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Op_P_Is_Arith_Op;
--# end

   







--# property-start Op.is_order_op nodes.lkt:4916
pragma Warnings (Off, "is not referenced");
 function Op_P_Is_Order_Op
  
  (Node : Bare_Op
  )

   return Boolean
is
   Self : Bare_Op  := Bare_Op (Node);
      --# bind self Self

   


   Property_Result : Boolean;

      

      Is_A : Boolean;



begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         --# expr-start 3037 '<IsA Op.Lt, Op.Lte, Op.Gt, Op.Gte at nodes.lkt:4916:31>' Is_A nodes.lkt:4916

Is_A := Self /= null 
and then Self.Kind in Lkt_Op_Lt_Range | Lkt_Op_Lte_Range | Lkt_Op_Gt_Range | Lkt_Op_Gte_Range; 
--# expr-done 3037

         Property_Result := Is_A;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Op_P_Is_Order_Op;
--# end



   


      

   --
   --  Primitives for Bare_Op_Amp
   --

   







   


      

   --
   --  Primitives for Bare_Op_And
   --

   







   


      

   --
   --  Primitives for Bare_Op_Div
   --

   







   


      

   --
   --  Primitives for Bare_Op_Eq
   --

   







   


      

   --
   --  Primitives for Bare_Op_Gt
   --

   







   


      

   --
   --  Primitives for Bare_Op_Gte
   --

   







   


      

   --
   --  Primitives for Bare_Op_Logic_And
   --

   







   


      

   --
   --  Primitives for Bare_Op_Logic_Or
   --

   







   


      

   --
   --  Primitives for Bare_Op_Lt
   --

   







   


      

   --
   --  Primitives for Bare_Op_Lte
   --

   







   


      

   --
   --  Primitives for Bare_Op_Minus
   --

   







   


      

   --
   --  Primitives for Bare_Op_Mult
   --

   







   


      

   --
   --  Primitives for Bare_Op_Ne
   --

   







   


      

   --
   --  Primitives for Bare_Op_Or
   --

   







   


      

   --
   --  Primitives for Bare_Op_Or_Int
   --

   







   


      

   --
   --  Primitives for Bare_Op_Plus
   --

   







   


      

   --
   --  Primitives for Bare_Param
   --

   



      
      procedure Initialize_Fields_For_Param
        (Self : Bare_Param
         ; Param_F_Name : Bare_Ref_Id
         ; Param_F_Value : Bare_Expr
        ) is
      begin

            Self.Param_F_Name := Param_F_Name;
            Self.Param_F_Value := Param_F_Value;
         

      end Initialize_Fields_For_Param;

      
   function Param_F_Name
     (Node : Bare_Param) return Bare_Ref_Id
   is
      

   begin
         
         return Node.Param_F_Name;
      
   end;

      
   function Param_F_Value
     (Node : Bare_Param) return Bare_Expr
   is
      

   begin
         
         return Node.Param_F_Value;
      
   end;


   







--# property-start Param.expected_type_equation nodes.lkt:4927
pragma Warnings (Off, "is not referenced");
 function Param_P_Expected_Type_Equation
  
  (Node : Bare_Param
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Logic_Equation
is
   Self : Bare_Param  := Bare_Param (Node);
     Ent : Internal_Entity_Param :=
       Internal_Entity_Param'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Logic_Equation;

      
            procedure Finalizer_Scope_360 with Inline_Always;

      Fld : Internal_Entity_Expr;
Fld_1 : Logic_Var;
Cast_Expr : Internal_Entity_Type_Decl;
Cast_Result : Internal_Entity;
Bind_Result : Logic_Equation;
True_Rel : Logic_Equation;
Fld_2 : Internal_Entity_Expr;
Fld_3 : Boolean;
If_Result : Logic_Equation;

            procedure Finalizer_Scope_360 is
            begin
                     Dec_Ref (Bind_Result);
                     Dec_Ref (True_Rel);
                     Dec_Ref (If_Result);
            end Finalizer_Scope_360;


begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         --# expr-start 3043 '<If at nodes.lkt:4931:9>' If_Result nodes.lkt:4931



--# expr-start 3039 '<FieldAccess for has_context_free_type at nodes.lkt:4931:12>' Fld_3 nodes.lkt:4931



--# expr-start 3038 '<FieldAccess for value at nodes.lkt:4931:12>' Fld_2 nodes.lkt:4931







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_2 := Create_Internal_Entity_Expr (Node => Ent.Node.Param_F_Value, Info => Ent.Info);
--# expr-done 3038



   if Fld_2.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]Expr.has_context_free_type'
Fld_3 := Liblktlang.Implementation.Dispatcher_Expr_P_Has_Context_Free_Type (Node => Fld_2.Node, E_Info => Fld_2.Info);
--# end
--# expr-done 3039
if Fld_3 then
   --# expr-start 3042 '<Bind at nodes.lkt:4932:14>' Bind_Result nodes.lkt:4932
--# expr-start 3041 '<FieldAccess for expected_type_var at nodes.lkt:4932:14>' Fld_1 nodes.lkt:4932



--# expr-start 3040 '<FieldAccess for value at nodes.lkt:4932:14>' Fld nodes.lkt:4932







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Create_Internal_Entity_Expr (Node => Ent.Node.Param_F_Value, Info => Ent.Info);
--# expr-done 3040



   if Fld.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_1 := Fld.Node.Expr_Expected_Type_Var'Unrestricted_Access;
--# expr-done 3041
Fld_1.Value := No_Entity;
Entity_Vars.Reset (Fld_1);






Cast_Expr := No_Entity_Type_Decl; 



   
      Cast_Result := Create_Internal_Entity
        (Node => Cast_Expr.Node,
         Info => Cast_Expr.Info);


Bind_Result := Solver.Create_Assign (Fld_1, Cast_Result, Solver_Ifc.No_Converter, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4932:14") else null)); 
--# expr-done 3042
   If_Result := Bind_Result;
else
   True_Rel := Solver.Create_True ((if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4933:14") else null)); 
   If_Result := True_Rel;
end if;

      Inc_Ref (If_Result);


--# expr-done 3043

         Property_Result := If_Result;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_360;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_360;




            raise;
      end;



   return Property_Result;
end Param_P_Expected_Type_Equation;
--# end

   







--# property-start Param.xref_equation nodes.lkt:4935
pragma Warnings (Off, "is not referenced");
 function Param_P_Xref_Equation
  
  (Node : Bare_Param
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Logic_Equation
is
   Self : Bare_Param  := Bare_Param (Node);
     Ent : Internal_Entity_Param :=
       Internal_Entity_Param'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Logic_Equation;

      
            procedure Finalizer_Scope_361 with Inline_Always;
            procedure Finalizer_Scope_755 with Inline_Always;

      Var_Expr_0 : Internal_Entity_Ref_Id;
Fld : Internal_Entity_Expr;
Fld_1 : Logic_Equation;
Fld_2 : Internal_Entity_Ref_Id;
Fld_3 : Logic_Equation;
Scope_Result : Logic_Equation;
True_Rel : Logic_Equation;
Result_Var : Logic_Equation;
And_Pred : Logic_Equation;

            procedure Finalizer_Scope_361 is
            begin
                     Dec_Ref (Fld_1);
                     Dec_Ref (Scope_Result);
                     Dec_Ref (True_Rel);
                     Dec_Ref (Result_Var);
                     Dec_Ref (And_Pred);
            end Finalizer_Scope_361;
            procedure Finalizer_Scope_755 is
            begin
                     Dec_Ref (Fld_3);
            end Finalizer_Scope_755;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 3048 '<LogicBinaryOp And at nodes.lkt:4936:9>' And_Pred nodes.lkt:4936
--# expr-start 3045 '<FieldAccess for xref_equation at nodes.lkt:4936:9>' Fld_1 nodes.lkt:4936



--# expr-start 3044 '<FieldAccess for value at nodes.lkt:4936:9>' Fld nodes.lkt:4936







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Create_Internal_Entity_Expr (Node => Ent.Node.Param_F_Value, Info => Ent.Info);
--# expr-done 3044



   if Fld.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]LktNode.xref_equation'
Fld_1 := Liblktlang.Implementation.Dispatcher_Lkt_Node_P_Xref_Equation (Node => Fld.Node, E_Info => Fld.Info);
--# end
--# expr-done 3045



--# expr-start 3046 '<FieldAccess for name at nodes.lkt:4937:14>' Fld_2 nodes.lkt:4937







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_2 := Create_Internal_Entity_Ref_Id (Node => Ent.Node.Param_F_Name, Info => Ent.Info);
--# expr-done 3046
Var_Expr_0 := Fld_2;





if Var_Expr_0 /= No_Entity_Ref_Id then
   



   --# scope-start


   --# bind n Var_Expr_0

--# expr-start 3047 '<FieldAccess for xref_equation at nodes.lkt:4937:34>' Fld_3 nodes.lkt:4937







   if Var_Expr_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]LktNode.xref_equation'
Fld_3 := Liblktlang.Implementation.Dispatcher_Lkt_Node_P_Xref_Equation (Node => Var_Expr_0.Node, E_Info => Var_Expr_0.Info);
--# end
--# expr-done 3047
Scope_Result := Fld_3;
   Inc_Ref (Scope_Result);


   --# end
      Finalizer_Scope_755;


   Result_Var := Scope_Result;
else
   True_Rel := Solver.Create_True ((if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4937:65") else null)); 
   Result_Var := True_Rel;
end if;

      Inc_Ref (Result_Var);


And_Pred := Create_And (Fld_1, Result_Var, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4936:9") else null)); 
--# expr-done 3048

         Property_Result := And_Pred;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_361;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_361;
                     Finalizer_Scope_755;




            raise;
      end;



   return Property_Result;
end Param_P_Xref_Equation;
--# end



   


      

   --
   --  Primitives for Bare_Type_Ref
   --

   



      
      procedure Initialize_Fields_For_Type_Ref
        (Self : Bare_Type_Ref
        ) is
      begin

         
      Self.Type_Ref_Type_Var := Null_Var_Record;

      end Initialize_Fields_For_Type_Ref;


   







--# property-start TypeRef.xref_entry_point nodes.lkt:4948
pragma Warnings (Off, "is not referenced");
 function Type_Ref_P_Xref_Entry_Point
  
  (Node : Bare_Type_Ref
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Boolean
is
   Self : Bare_Type_Ref  := Bare_Type_Ref (Node);
      --# bind self Self

   


   Property_Result : Boolean;

      

      Fld : Bare_Lkt_Node;
Is_A : Boolean;
Fld_1 : Bare_Lkt_Node;
Fld_2 : Bare_Lkt_Node;
Is_A_1 : Boolean;
If_Result : Boolean;
Fld_3 : Bare_Lkt_Node;
Fld_4 : Bare_Lkt_Node;
Is_A_2 : Boolean;
If_Result_1 : Boolean;
Not_Val : Boolean;



begin
   --# property-body-start

   pragma Assert (Self = Node);





      begin
         
   --# scope-start

         --# expr-start 3059 '<Not at nodes.lkt:4949:9>' Not_Val nodes.lkt:4949
--# expr-start 3058 '<BooleanBinaryOp Or at nodes.lkt:4950:13>' If_Result_1 nodes.lkt:4950



--# expr-start 3054 '<BooleanBinaryOp Or at nodes.lkt:4950:14>' If_Result nodes.lkt:4950



--# expr-start 3050 '<IsA TypeRef at nodes.lkt:4950:14>' Is_A nodes.lkt:4950
--# expr-start 3049 '<parent at nodes.lkt:4950:14>' Fld nodes.lkt:4950







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Self.Parent; 
--# expr-done 3049
Is_A := Fld /= null 
and then Fld.Kind in Lkt_Type_Ref; 
--# expr-done 3050
if Is_A then
   
   If_Result := True;
else
   --# expr-start 3053 '<IsA TypeRef at nodes.lkt:4950:40>' Is_A_1 nodes.lkt:4950
--# expr-start 3052 '<parent at nodes.lkt:4950:40>' Fld_2 nodes.lkt:4950



--# expr-start 3051 '<parent at nodes.lkt:4950:40>' Fld_1 nodes.lkt:4950







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_1 := Self.Parent; 
--# expr-done 3051



   if Fld_1 = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_2 := Fld_1.Parent; 
--# expr-done 3052
Is_A_1 := Fld_2 /= null 
and then Fld_2.Kind in Lkt_Type_Ref; 
--# expr-done 3053
   If_Result := Is_A_1;
end if;



--# expr-done 3054
if If_Result then
   
   If_Result_1 := True;
else
   --# expr-start 3057 '<IsA GenericInstantiation at nodes.lkt:4951:16>' Is_A_2 nodes.lkt:4951
--# expr-start 3056 '<parent at nodes.lkt:4951:16>' Fld_4 nodes.lkt:4951



--# expr-start 3055 '<parent at nodes.lkt:4951:16>' Fld_3 nodes.lkt:4951







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_3 := Self.Parent; 
--# expr-done 3055



   if Fld_3 = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_4 := Fld_3.Parent; 
--# expr-done 3056
Is_A_2 := Fld_4 /= null 
and then Fld_4.Kind in Lkt_Generic_Instantiation_Range; 
--# expr-done 3057
   If_Result_1 := Is_A_2;
end if;



--# expr-done 3058
Not_Val := not (If_Result_1); 
--# expr-done 3059

         Property_Result := Not_Val;
         
   --# end


      exception
         when Exc : Property_Error =>




            raise;
      end;



   return Property_Result;
end Type_Ref_P_Xref_Entry_Point;
--# end

   







--# property-start TypeRef.referenced_decl nodes.lkt:4958
pragma Warnings (Off, "is not referenced");
 function Type_Ref_P_Referenced_Decl
  
  (Node : Bare_Type_Ref
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Internal_Entity_Type_Decl
is
   Self : Bare_Type_Ref  := Bare_Type_Ref (Node);
     Ent : Internal_Entity_Type_Ref :=
       Internal_Entity_Type_Ref'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Internal_Entity_Type_Decl;

      
            procedure Finalizer_Scope_355 with Inline_Always;

      Fld : Logic_Var;
Is_Logic_Var_Defined : Boolean;
Eq_Solution : Internal_Entity;
If_Result : Internal_Entity;
Cast_Result : Internal_Entity_Type_Decl;
Fld_1 : Internal_Solver_Result := No_Solver_Result;
Fld_2 : Boolean;
If_Result_1 : Internal_Entity_Type_Decl;

            procedure Finalizer_Scope_355 is
            begin
                     Dec_Ref (Fld_1);
            end Finalizer_Scope_355;

      
      Mmz_Handle : Memoization_Handle;
      Mmz_Val    : Mmz_Value;

      Mmz_Stored : Boolean;
      --  Whether the memoization couple was actually stored. Used to determine
      --  whether to inc-ref the memoized value.

      function Create_Mmz_Key return Mmz_Key;
      --  Create a memoization key for this property call and return it

      --------------------
      -- Create_Mmz_Key --
      --------------------

      function Create_Mmz_Key return Mmz_Key is
      begin
         return Mmz_K : Mmz_Key :=
           (Property => Mmz_Bare_Type_Ref_Type_Ref_P_Referenced_Decl,
            Items    => new Mmz_Key_Array (1 ..  2))
         do
            Mmz_K.Items (1) := (Kind => Mmz_Bare_Type_Ref,
                                As_Bare_Type_Ref => Self);
               Mmz_K.Items (2) :=
                 (Kind => Mmz_Internal_Entity_Info,
                  As_Internal_Entity_Info => E_Info);
         end return;
      end Create_Mmz_Key;

begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

            Populate_Lexical_Env_For_Unit (Self);
      end if;

      if Self /= null then

         if not Self.Unit.Context.In_Populate_Lexical_Env then

            if Find_Memoized_Value
              (Self.Unit, Mmz_Handle, Mmz_Val, Create_Mmz_Key'Access)
            then
               --# memoization-lookup

               if Mmz_Val.Kind = Mmz_Evaluating then
                  --# memoization-return
                  Raise_Property_Exception
                    (Self,
                     Property_Error'Identity,
                     "Infinite recursion detected");

               elsif Mmz_Val.Kind = Mmz_Error then
                  --# memoization-return
                  Reraise_Memoized_Error (Mmz_Val);

               else
                  Property_Result := Mmz_Val.As_Internal_Entity_Type_Decl;

                  --# memoization-return
                  return Property_Result;
               end if;
               --# end
            end if;

         end if;
      end if;

      begin
         
   --# scope-start

         --# expr-start 3065 '<If at nodes.lkt:4959:9>' If_Result_1 nodes.lkt:4959



--# expr-start 3061 '<FieldAccess for success at nodes.lkt:4959:12>' Fld_2 nodes.lkt:4959



--# expr-start 3060 '<FieldAccess for solve_enclosing_context at nodes.lkt:4959:12>' Fld_1 nodes.lkt:4959







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start LktNode.solve_enclosing_context
Fld_1 := Liblktlang.Implementation.Lkt_Node_P_Solve_Enclosing_Context (Node => Ent.Node, E_Info => Ent.Info);
--# end
--# expr-done 3060





Fld_2 := Fld_1.Success;
--# expr-done 3061
if Fld_2 then
   --# expr-start 3064 '<Cast to TypeDecl at nodes.lkt:4960:14>' Cast_Result nodes.lkt:4960





--# expr-start 3063 '<get_value at nodes.lkt:4960:14>' If_Result nodes.lkt:4960



--# expr-start 3062 '<FieldAccess for type_var at nodes.lkt:4960:14>' Fld nodes.lkt:4960







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Self.Type_Ref_Type_Var'Unrestricted_Access;
--# expr-done 3062
Is_Logic_Var_Defined := Entity_Vars.Is_Defined (Fld); 
if Is_Logic_Var_Defined then
   
Eq_Solution := Entity_Vars.Get_Value (Fld); 
   If_Result := Eq_Solution;
else
   
   If_Result := No_Entity;
end if;



--# expr-done 3063



   if If_Result.Node = null
      or else If_Result.Node.Kind in Lkt_Type_Decl
   then
      
      Cast_Result := Create_Internal_Entity_Type_Decl
        (Node => If_Result.Node,
         Info => If_Result.Info);

   else
         Raise_Property_Exception
           (Self, Property_Error'Identity, "invalid object cast");
   end if;


--# expr-done 3064
   If_Result_1 := Cast_Result;
else
   
   If_Result_1 := No_Entity_Type_Decl;
end if;



--# expr-done 3065

         Property_Result := If_Result_1;
         
   --# end
      Finalizer_Scope_355;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_355;


               if Self /= null then
                     if not Self.Unit.Context.In_Populate_Lexical_Env then
                        Add_Memoized_Error
                          (Self.Unit, Mmz_Handle, Exc, Mmz_Stored);
                     end if;
               end if;


            raise;
      end;

      if Self /= null then
         if not Self.Unit.Context.In_Populate_Lexical_Env then

            Mmz_Val := (Kind => Mmz_Internal_Entity_Type_Decl,
                        As_Internal_Entity_Type_Decl => Property_Result);
            Add_Memoized_Value (Self.Unit, Mmz_Handle, Mmz_Val, Mmz_Stored);

         end if;
      end if;



   return Property_Result;
end Type_Ref_P_Referenced_Decl;
--# end



   


      

   --
   --  Primitives for Bare_Default_List_Type_Ref
   --

   



      
      procedure Initialize_Fields_For_Default_List_Type_Ref
        (Self : Bare_Default_List_Type_Ref
        ) is
      begin
            Initialize_Fields_For_Type_Ref
              (Self);

         

      end Initialize_Fields_For_Default_List_Type_Ref;




   


      

   --
   --  Primitives for Bare_Function_Type_Ref
   --

   



      
      procedure Initialize_Fields_For_Function_Type_Ref
        (Self : Bare_Function_Type_Ref
         ; Function_Type_Ref_F_Args_Types : Bare_Type_Ref_List
         ; Function_Type_Ref_F_Return_Type : Bare_Type_Ref
        ) is
      begin
            Initialize_Fields_For_Type_Ref
              (Self);

            Self.Function_Type_Ref_F_Args_Types := Function_Type_Ref_F_Args_Types;
            Self.Function_Type_Ref_F_Return_Type := Function_Type_Ref_F_Return_Type;
         

      end Initialize_Fields_For_Function_Type_Ref;

      
   function Function_Type_Ref_F_Args_Types
     (Node : Bare_Function_Type_Ref) return Bare_Type_Ref_List
   is
      

   begin
         
         return Node.Function_Type_Ref_F_Args_Types;
      
   end;

      
   function Function_Type_Ref_F_Return_Type
     (Node : Bare_Function_Type_Ref) return Bare_Type_Ref
   is
      

   begin
         
         return Node.Function_Type_Ref_F_Return_Type;
      
   end;


   







--# property-start FunctionTypeRef.xref_equation nodes.lkt:4975
pragma Warnings (Off, "is not referenced");
 function Function_Type_Ref_P_Xref_Equation
  
  (Node : Bare_Function_Type_Ref
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Logic_Equation
is
   Self : Bare_Function_Type_Ref  := Bare_Function_Type_Ref (Node);
     Ent : Internal_Entity_Function_Type_Ref :=
       Internal_Entity_Function_Type_Ref'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Logic_Equation;

      
            procedure Finalizer_Scope_362 with Inline_Always;
            procedure Finalizer_Scope_756 with Inline_Always;

      Fld : Internal_Entity_Type_Ref_List;
Fld_1 : Bare_Type_Ref_List;
Fld_2 : Internal_Entity_Info;
Item_0 : Internal_Entity_Type_Ref;
Bare_Item_0 : Bare_Type_Ref;
Fld_3 : Logic_Equation;
As_Entity : Internal_Entity_Type_Ref;
Is_Null : Boolean;
If_Result : Internal_Entity_Type_Ref;
Map_Result : Logic_Equation_Array_Access;
Logic_Boolean_Op : Logic_Equation;
Fld_4 : Internal_Entity_Type_Ref;
Fld_5 : Logic_Equation;
And_Pred : Logic_Equation;
Fld_6 : Logic_Var;
Fld_7 : Internal_Entity_Type_Ref;
Fld_8 : Logic_Var;
Array_Lit : Logic_Var_Array_Access;
Fld_9 : Internal_Entity_Type_Ref_List;
Fld_10 : Bare_Type_Ref_List;
Fld_11 : Internal_Entity_Info;
Item_1 : Internal_Entity_Type_Ref;
Bare_Item_1 : Bare_Type_Ref;
Fld_12 : Logic_Var;
As_Entity_1 : Internal_Entity_Type_Ref;
Is_Null_1 : Boolean;
If_Result_1 : Internal_Entity_Type_Ref;
Map_Result_1 : Logic_Var_Array_Access;
Concat_Result : Logic_Var_Array_Access;
Logic_Vars : Logic_Var_Array_Access;
Bind_Result : Logic_Equation;
And_Pred_1 : Logic_Equation;

            procedure Finalizer_Scope_362 is
            begin
                     Dec_Ref (Map_Result);
                     Dec_Ref (Logic_Boolean_Op);
                     Dec_Ref (Fld_5);
                     Dec_Ref (And_Pred);
                     Dec_Ref (Array_Lit);
                     Dec_Ref (Map_Result_1);
                     Dec_Ref (Concat_Result);
                     Dec_Ref (Logic_Vars);
                     Dec_Ref (Bind_Result);
                     Dec_Ref (And_Pred_1);
            end Finalizer_Scope_362;
            procedure Finalizer_Scope_756 is
            begin
                     Dec_Ref (Fld_3);
            end Finalizer_Scope_756;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 3081 '<LogicBinaryOp And at nodes.lkt:4976:9>' And_Pred_1 nodes.lkt:4976
--# expr-start 3072 '<LogicBinaryOp And at nodes.lkt:4977:13>' And_Pred nodes.lkt:4977
--# expr-start 3069 '<LogicAll at nodes.lkt:4977:13>' Logic_Boolean_Op nodes.lkt:4977
--# expr-start 3068 '<Map at nodes.lkt:4977:13>' Map_Result nodes.lkt:4977








   

   --# expr-start 3066 '<FieldAccess for args_types at nodes.lkt:4977:13>' Fld nodes.lkt:4977







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Create_Internal_Entity_Type_Ref_List (Node => Ent.Node.Function_Type_Ref_F_Args_Types, Info => Ent.Info);
--# expr-done 3066









Fld_1 := Fld.Node;

   
      declare
         Map_Result_Vec : Logic_Equation_Vectors.Vector;
      begin
   

   

      if Fld_1 = null then
         
      Map_Result := Create_Logic_Equation_Array (0);
   
      else
         

      declare
         
         Collection : constant Bare_Type_Ref_List := Fld_1;
      begin
         for Untyped_Item_0 of
               Collection.Nodes (1 .. Children_Count (Collection))
         loop
                  
                  Bare_Item_0 := Untyped_Item_0; 
                  



Is_Null := Bare_Item_0 = null; 
if Is_Null then
   
   If_Result := No_Entity_Type_Ref;
else
   








Fld_2 := Fld.Info;

As_Entity := (Info => Fld_2, Node => Bare_Item_0); 
   If_Result := As_Entity;
end if;



                  Item_0 := If_Result; 

            
   --# scope-start


               --# bind a Item_0

            
         
         
      --# expr-start 3067 '<FieldAccess for xref_equation at nodes.lkt:4977:46>' Fld_3 nodes.lkt:4977







   if Item_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]LktNode.xref_equation'
Fld_3 := Liblktlang.Implementation.Dispatcher_Lkt_Node_P_Xref_Equation (Node => Item_0.Node, E_Info => Item_0.Info);
--# end
--# expr-done 3067
      

         declare
            Item_To_Append : constant Logic_Equation := Fld_3;
         begin
               Inc_Ref (Item_To_Append);
            Logic_Equation_Vectors.Append (Map_Result_Vec, Item_To_Append);
         end;
   
   
   

            
   --# end
      Finalizer_Scope_756;



         end loop;
      end;
   
      end if;

   

         Map_Result := Create_Logic_Equation_Array
           (Items_Count => Natural (Logic_Equation_Vectors.Length (Map_Result_Vec)));
         for I in Map_Result.Items'Range loop
            Map_Result.Items (I) := Logic_Equation_Vectors.Get
              (Map_Result_Vec,
               I + Logic_Equation_Vectors.Index_Type'First - Map_Result.Items'First);
         end loop;
         Logic_Equation_Vectors.Destroy (Map_Result_Vec);

      end;
   



--# expr-done 3068
Logic_Boolean_Op := Solver.Create_All (Relation_Array (Map_Result.Items), (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4977:13") else null)); 
--# expr-done 3069
--# expr-start 3071 '<FieldAccess for xref_equation at nodes.lkt:4978:18>' Fld_5 nodes.lkt:4978



--# expr-start 3070 '<FieldAccess for return_type at nodes.lkt:4978:18>' Fld_4 nodes.lkt:4978







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_4 := Create_Internal_Entity_Type_Ref (Node => Ent.Node.Function_Type_Ref_F_Return_Type, Info => Ent.Info);
--# expr-done 3070



   if Fld_4.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]LktNode.xref_equation'
Fld_5 := Liblktlang.Implementation.Dispatcher_Lkt_Node_P_Xref_Equation (Node => Fld_4.Node, E_Info => Fld_4.Info);
--# end
--# expr-done 3071
And_Pred := Create_And (Logic_Boolean_Op, Fld_5, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4977:13") else null)); 
--# expr-done 3072
--# expr-start 3075 '<ArrayLiteral at nodes.lkt:4982:13>' Array_Lit nodes.lkt:4982
--# expr-start 3074 '<FieldAccess for type_var at nodes.lkt:4982:14>' Fld_8 nodes.lkt:4982



--# expr-start 3073 '<FieldAccess for return_type at nodes.lkt:4982:14>' Fld_7 nodes.lkt:4982







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_7 := Create_Internal_Entity_Type_Ref (Node => Ent.Node.Function_Type_Ref_F_Return_Type, Info => Ent.Info);
--# expr-done 3073



   if Fld_7.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_8 := Fld_7.Node.Type_Ref_Type_Var'Unrestricted_Access;
--# expr-done 3074
Array_Lit := Create_Logic_Var_Array (Internal_Logic_Var_Array'(1 => Fld_8)); 
--# expr-done 3075
--# expr-start 3078 '<Map at nodes.lkt:4983:15>' Map_Result_1 nodes.lkt:4983








   

   --# expr-start 3076 '<FieldAccess for args_types at nodes.lkt:4983:15>' Fld_9 nodes.lkt:4983







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_9 := Create_Internal_Entity_Type_Ref_List (Node => Ent.Node.Function_Type_Ref_F_Args_Types, Info => Ent.Info);
--# expr-done 3076









Fld_10 := Fld_9.Node;

   
      declare
         Map_Result_1_Vec : Logic_Var_Vectors.Vector;
      begin
   

   

      if Fld_10 = null then
         
      Map_Result_1 := Create_Logic_Var_Array (0);
   
      else
         

      declare
         
         Collection : constant Bare_Type_Ref_List := Fld_10;
      begin
         for Untyped_Item_1 of
               Collection.Nodes (1 .. Children_Count (Collection))
         loop
                  
                  Bare_Item_1 := Untyped_Item_1; 
                  



Is_Null_1 := Bare_Item_1 = null; 
if Is_Null_1 then
   
   If_Result_1 := No_Entity_Type_Ref;
else
   








Fld_11 := Fld_9.Info;

As_Entity_1 := (Info => Fld_11, Node => Bare_Item_1); 
   If_Result_1 := As_Entity_1;
end if;



                  Item_1 := If_Result_1; 

            
   --# scope-start


               --# bind tr Item_1

            
         
         
      --# expr-start 3077 '<FieldAccess for type_var at nodes.lkt:4983:43>' Fld_12 nodes.lkt:4983







   if Item_1.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_12 := Item_1.Node.Type_Ref_Type_Var'Unrestricted_Access;
--# expr-done 3077
      

         declare
            Item_To_Append : constant Logic_Var := Fld_12;
         begin
            Logic_Var_Vectors.Append (Map_Result_1_Vec, Item_To_Append);
         end;
   
   
   

            
   --# end



         end loop;
      end;
   
      end if;

   

         Map_Result_1 := Create_Logic_Var_Array
           (Items_Count => Natural (Logic_Var_Vectors.Length (Map_Result_1_Vec)));
         for I in Map_Result_1.Items'Range loop
            Map_Result_1.Items (I) := Logic_Var_Vectors.Get
              (Map_Result_1_Vec,
               I + Logic_Var_Vectors.Index_Type'First - Map_Result_1.Items'First);
         end loop;
         Logic_Var_Vectors.Destroy (Map_Result_1_Vec);

      end;
   



--# expr-done 3078
Concat_Result := Concat (Array_Lit, Map_Result_1); 
for Var of Concat_Result.Items loop
   Var.Value := No_Entity;
   Entity_Vars.Reset (Var);
end loop;
Logic_Vars := Concat_Result; Inc_Ref (Logic_Vars);
--# expr-start 3080 '<NPropagate at nodes.lkt:4980:14>' Bind_Result nodes.lkt:4980
--# expr-start 3079 '<FieldAccess for type_var at nodes.lkt:4980:14>' Fld_6 nodes.lkt:4980







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_6 := Ent.Node.Type_Ref_Type_Var'Unrestricted_Access;
--# expr-done 3079
Fld_6.Value := No_Entity;
Entity_Vars.Reset (Fld_6);


Bind_Result := Solver.Create_N_Propagate (Fld_6, Create_Type_Decl_P_Create_Function_Type_0_Functor (Logic_Vars.N), Entity_Vars.Logic_Var_Array (Logic_Vars.Items), Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4980:14") else null)); 
--# expr-done 3080
And_Pred_1 := Create_And (And_Pred, Bind_Result, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4976:9") else null)); 
--# expr-done 3081

         Property_Result := And_Pred_1;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_362;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_362;
                     Finalizer_Scope_756;




            raise;
      end;



   return Property_Result;
end Function_Type_Ref_P_Xref_Equation;
--# end



   


      

   --
   --  Primitives for Bare_Generic_Type_Ref
   --

   



      
      procedure Initialize_Fields_For_Generic_Type_Ref
        (Self : Bare_Generic_Type_Ref
         ; Generic_Type_Ref_F_Type_Name : Bare_Expr
         ; Generic_Type_Ref_F_Params : Bare_Type_Ref_List
        ) is
      begin
            Initialize_Fields_For_Type_Ref
              (Self);

            Self.Generic_Type_Ref_F_Type_Name := Generic_Type_Ref_F_Type_Name;
            Self.Generic_Type_Ref_F_Params := Generic_Type_Ref_F_Params;
         

      end Initialize_Fields_For_Generic_Type_Ref;

      
   function Generic_Type_Ref_F_Type_Name
     (Node : Bare_Generic_Type_Ref) return Bare_Expr
   is
      

   begin
         
         return Node.Generic_Type_Ref_F_Type_Name;
      
   end;

      
   function Generic_Type_Ref_F_Params
     (Node : Bare_Generic_Type_Ref) return Bare_Type_Ref_List
   is
      

   begin
         
         return Node.Generic_Type_Ref_F_Params;
      
   end;


   







--# property-start GenericTypeRef.xref_equation nodes.lkt:4994
pragma Warnings (Off, "is not referenced");
 function Generic_Type_Ref_P_Xref_Equation
  
  (Node : Bare_Generic_Type_Ref
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Logic_Equation
is
   Self : Bare_Generic_Type_Ref  := Bare_Generic_Type_Ref (Node);
     Ent : Internal_Entity_Generic_Type_Ref :=
       Internal_Entity_Generic_Type_Ref'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Logic_Equation;

      
            procedure Finalizer_Scope_363 with Inline_Always;
            procedure Finalizer_Scope_758 with Inline_Always;
            procedure Finalizer_Scope_759 with Inline_Always;

      Var_Expr_1 : Internal_Entity_Ref_Id;
Fld : Internal_Entity_Expr;
Fld_1 : Logic_Equation;
Fld_2 : Internal_Entity_Type_Ref_List;
Fld_3 : Bare_Type_Ref_List;
Fld_4 : Internal_Entity_Info;
Item_0 : Internal_Entity_Type_Ref;
Bare_Item_0 : Bare_Type_Ref;
Fld_5 : Logic_Equation;
As_Entity : Internal_Entity_Type_Ref;
Is_Null : Boolean;
If_Result : Internal_Entity_Type_Ref;
Map_Result : Logic_Equation_Array_Access;
Logic_Boolean_Op : Logic_Equation;
And_Pred : Logic_Equation;
Fld_6 : Internal_Entity_Expr;
Fld_7 : Internal_Entity_Ref_Id;
Fld_8 : Logic_Var;
Fld_9 : Logic_Var;
Array_Lit : Logic_Var_Array_Access;
Fld_10 : Internal_Entity_Type_Ref_List;
Fld_11 : Bare_Type_Ref_List;
Fld_12 : Internal_Entity_Info;
Item_2 : Internal_Entity_Type_Ref;
Bare_Item_2 : Bare_Type_Ref;
Fld_13 : Logic_Var;
As_Entity_1 : Internal_Entity_Type_Ref;
Is_Null_1 : Boolean;
If_Result_1 : Internal_Entity_Type_Ref;
Map_Result_1 : Logic_Var_Array_Access;
Concat_Result : Logic_Var_Array_Access;
Logic_Vars : Logic_Var_Array_Access;
Bind_Result : Logic_Equation;
Fld_14 : Bare_Ref_Id;
Cast_Result : Bare_Lkt_Node;
Bound_Error_Location : Bare_Lkt_Node;
Fld_15 : Logic_Var;
Pred : Logic_Equation;
Dyn_Var_Bind_Result : Logic_Equation;
And_Pred_1 : Logic_Equation;
Fld_16 : Bare_Type_Ref_List;
Cast_Result_1 : Bare_Lkt_Node;
Bound_Error_Location_1 : Bare_Lkt_Node;
Fld_17 : Logic_Var;
Fld_18 : Internal_Entity_Type_Ref_List;
Fld_19 : Bare_Type_Ref_List;
Len : Integer;
Pred_1 : Logic_Equation;
Dyn_Var_Bind_Result_1 : Logic_Equation;
And_Pred_2 : Logic_Equation;
Scope_Result : Logic_Equation;
False_Rel : Logic_Equation;
Result_Var : Logic_Equation;
And_Pred_3 : Logic_Equation;

            procedure Finalizer_Scope_363 is
            begin
                     Dec_Ref (Fld_1);
                     Dec_Ref (Map_Result);
                     Dec_Ref (Logic_Boolean_Op);
                     Dec_Ref (And_Pred);
                     Dec_Ref (Scope_Result);
                     Dec_Ref (False_Rel);
                     Dec_Ref (Result_Var);
                     Dec_Ref (And_Pred_3);
            end Finalizer_Scope_363;
            procedure Finalizer_Scope_758 is
            begin
                     Dec_Ref (Fld_5);
            end Finalizer_Scope_758;
            procedure Finalizer_Scope_759 is
            begin
                     Dec_Ref (Array_Lit);
                     Dec_Ref (Map_Result_1);
                     Dec_Ref (Concat_Result);
                     Dec_Ref (Logic_Vars);
                     Dec_Ref (Bind_Result);
                     Dec_Ref (Pred);
                     Dec_Ref (Dyn_Var_Bind_Result);
                     Dec_Ref (And_Pred_1);
                     Dec_Ref (Pred_1);
                     Dec_Ref (Dyn_Var_Bind_Result_1);
                     Dec_Ref (And_Pred_2);
            end Finalizer_Scope_759;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 3110 '<LogicBinaryOp And at nodes.lkt:4995:9>' And_Pred_3 nodes.lkt:4995
--# expr-start 3088 '<LogicBinaryOp And at nodes.lkt:4996:13>' And_Pred nodes.lkt:4996
--# expr-start 3083 '<FieldAccess for xtype_equation at nodes.lkt:4996:13>' Fld_1 nodes.lkt:4996



--# expr-start 3082 '<FieldAccess for type_name at nodes.lkt:4996:13>' Fld nodes.lkt:4996







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Create_Internal_Entity_Expr (Node => Ent.Node.Generic_Type_Ref_F_Type_Name, Info => Ent.Info);
--# expr-done 3082



   if Fld.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]Expr.xtype_equation'
Fld_1 := Liblktlang.Implementation.Dispatcher_Expr_P_Xtype_Equation (Node => Fld.Node, E_Info => Fld.Info);
--# end
--# expr-done 3083
--# expr-start 3087 '<LogicAll at nodes.lkt:4997:18>' Logic_Boolean_Op nodes.lkt:4997
--# expr-start 3086 '<Map at nodes.lkt:4997:18>' Map_Result nodes.lkt:4997








   

   --# expr-start 3084 '<FieldAccess for params at nodes.lkt:4997:18>' Fld_2 nodes.lkt:4997







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_2 := Create_Internal_Entity_Type_Ref_List (Node => Ent.Node.Generic_Type_Ref_F_Params, Info => Ent.Info);
--# expr-done 3084









Fld_3 := Fld_2.Node;

   
      declare
         Map_Result_Vec : Logic_Equation_Vectors.Vector;
      begin
   

   

      if Fld_3 = null then
         
      Map_Result := Create_Logic_Equation_Array (0);
   
      else
         

      declare
         
         Collection : constant Bare_Type_Ref_List := Fld_3;
      begin
         for Untyped_Item_0 of
               Collection.Nodes (1 .. Children_Count (Collection))
         loop
                  
                  Bare_Item_0 := Untyped_Item_0; 
                  



Is_Null := Bare_Item_0 = null; 
if Is_Null then
   
   If_Result := No_Entity_Type_Ref;
else
   








Fld_4 := Fld_2.Info;

As_Entity := (Info => Fld_4, Node => Bare_Item_0); 
   If_Result := As_Entity;
end if;



                  Item_0 := If_Result; 

            
   --# scope-start


               --# bind p Item_0

            
         
         
      --# expr-start 3085 '<FieldAccess for xref_equation at nodes.lkt:4997:47>' Fld_5 nodes.lkt:4997







   if Item_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]LktNode.xref_equation'
Fld_5 := Liblktlang.Implementation.Dispatcher_Lkt_Node_P_Xref_Equation (Node => Item_0.Node, E_Info => Item_0.Info);
--# end
--# expr-done 3085
      

         declare
            Item_To_Append : constant Logic_Equation := Fld_5;
         begin
               Inc_Ref (Item_To_Append);
            Logic_Equation_Vectors.Append (Map_Result_Vec, Item_To_Append);
         end;
   
   
   

            
   --# end
      Finalizer_Scope_758;



         end loop;
      end;
   
      end if;

   

         Map_Result := Create_Logic_Equation_Array
           (Items_Count => Natural (Logic_Equation_Vectors.Length (Map_Result_Vec)));
         for I in Map_Result.Items'Range loop
            Map_Result.Items (I) := Logic_Equation_Vectors.Get
              (Map_Result_Vec,
               I + Logic_Equation_Vectors.Index_Type'First - Map_Result.Items'First);
         end loop;
         Logic_Equation_Vectors.Destroy (Map_Result_Vec);

      end;
   



--# expr-done 3086
Logic_Boolean_Op := Solver.Create_All (Relation_Array (Map_Result.Items), (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4997:18") else null)); 
--# expr-done 3087
And_Pred := Create_And (Fld_1, Logic_Boolean_Op, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4996:13") else null)); 
--# expr-done 3088



--# expr-start 3090 '<FieldAccess for get_rightmost_refid at nodes.lkt:4999:14>' Fld_7 nodes.lkt:4999



--# expr-start 3089 '<FieldAccess for type_name at nodes.lkt:4999:14>' Fld_6 nodes.lkt:4999







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_6 := Create_Internal_Entity_Expr (Node => Ent.Node.Generic_Type_Ref_F_Type_Name, Info => Ent.Info);
--# expr-done 3089



   if Fld_6.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start Expr.get_rightmost_refid
Fld_7 := Liblktlang.Implementation.Expr_P_Get_Rightmost_Refid (Node => Fld_6.Node, E_Info => Fld_6.Info);
--# end
--# expr-done 3090
Var_Expr_1 := Fld_7;





if Var_Expr_1 /= No_Entity_Ref_Id then
   



   --# scope-start


   --# bind ri Var_Expr_1

--# expr-start 3109 '<LogicBinaryOp And at nodes.lkt:5001:13>' And_Pred_2 nodes.lkt:5001
--# expr-start 3102 '<LogicBinaryOp And at nodes.lkt:5002:17>' And_Pred_1 nodes.lkt:5002
--# expr-start 3092 '<ArrayLiteral at nodes.lkt:5004:21>' Array_Lit nodes.lkt:5004
--# expr-start 3091 '<FieldAccess for ref_var at nodes.lkt:5004:22>' Fld_9 nodes.lkt:5004







   if Var_Expr_1.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_9 := Var_Expr_1.Node.Ref_Id_Ref_Var'Unrestricted_Access;
--# expr-done 3091
Array_Lit := Create_Logic_Var_Array (Internal_Logic_Var_Array'(1 => Fld_9)); 
--# expr-done 3092
--# expr-start 3095 '<Map at nodes.lkt:5004:36>' Map_Result_1 nodes.lkt:5004








   

   --# expr-start 3093 '<FieldAccess for params at nodes.lkt:5004:36>' Fld_10 nodes.lkt:5004







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_10 := Create_Internal_Entity_Type_Ref_List (Node => Ent.Node.Generic_Type_Ref_F_Params, Info => Ent.Info);
--# expr-done 3093









Fld_11 := Fld_10.Node;

   
      declare
         Map_Result_1_Vec : Logic_Var_Vectors.Vector;
      begin
   

   

      if Fld_11 = null then
         
      Map_Result_1 := Create_Logic_Var_Array (0);
   
      else
         

      declare
         
         Collection : constant Bare_Type_Ref_List := Fld_11;
      begin
         for Untyped_Item_2 of
               Collection.Nodes (1 .. Children_Count (Collection))
         loop
                  
                  Bare_Item_2 := Untyped_Item_2; 
                  



Is_Null_1 := Bare_Item_2 = null; 
if Is_Null_1 then
   
   If_Result_1 := No_Entity_Type_Ref;
else
   








Fld_12 := Fld_10.Info;

As_Entity_1 := (Info => Fld_12, Node => Bare_Item_2); 
   If_Result_1 := As_Entity_1;
end if;



                  Item_2 := If_Result_1; 

            
   --# scope-start


               --# bind p Item_2

            
         
         
      --# expr-start 3094 '<FieldAccess for type_var at nodes.lkt:5004:59>' Fld_13 nodes.lkt:5004







   if Item_2.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_13 := Item_2.Node.Type_Ref_Type_Var'Unrestricted_Access;
--# expr-done 3094
      

         declare
            Item_To_Append : constant Logic_Var := Fld_13;
         begin
            Logic_Var_Vectors.Append (Map_Result_1_Vec, Item_To_Append);
         end;
   
   
   

            
   --# end



         end loop;
      end;
   
      end if;

   

         Map_Result_1 := Create_Logic_Var_Array
           (Items_Count => Natural (Logic_Var_Vectors.Length (Map_Result_1_Vec)));
         for I in Map_Result_1.Items'Range loop
            Map_Result_1.Items (I) := Logic_Var_Vectors.Get
              (Map_Result_1_Vec,
               I + Logic_Var_Vectors.Index_Type'First - Map_Result_1.Items'First);
         end loop;
         Logic_Var_Vectors.Destroy (Map_Result_1_Vec);

      end;
   



--# expr-done 3095
Concat_Result := Concat (Array_Lit, Map_Result_1); 
for Var of Concat_Result.Items loop
   Var.Value := No_Entity;
   Entity_Vars.Reset (Var);
end loop;
Logic_Vars := Concat_Result; Inc_Ref (Logic_Vars);
--# expr-start 3097 '<NPropagate at nodes.lkt:5002:17>' Bind_Result nodes.lkt:5002
--# expr-start 3096 '<FieldAccess for type_var at nodes.lkt:5002:17>' Fld_8 nodes.lkt:5002







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_8 := Ent.Node.Type_Ref_Type_Var'Unrestricted_Access;
--# expr-done 3096
Fld_8.Value := No_Entity;
Entity_Vars.Reset (Fld_8);


Bind_Result := Solver.Create_N_Propagate (Fld_8, Create_Decl_P_Instantiate_Generic_Decl_0_Functor (Logic_Vars.N), Entity_Vars.Logic_Var_Array (Logic_Vars.Items), Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:5002:17") else null)); 
--# expr-done 3097
--# expr-start 3101 '<bind at nodes.lkt:5007:21>' Dyn_Var_Bind_Result nodes.lkt:5007





--# expr-start 3098 '<FieldAccess for node at nodes.lkt:5007:43>' Fld_14 nodes.lkt:5007









Fld_14 := Var_Expr_1.Node;
--# expr-done 3098



   
      Cast_Result := Fld_14;


Bound_Error_Location := Cast_Result; 
--# expr-start 3100 '<Predicate on Decl.is_generic at nodes.lkt:5008:21>' Pred nodes.lkt:5008
--# expr-start 3099 '<FieldAccess for ref_var at nodes.lkt:5008:38>' Fld_15 nodes.lkt:5008







   if Var_Expr_1.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_15 := Var_Expr_1.Node.Ref_Id_Ref_Var'Unrestricted_Access;
--# expr-done 3099
Fld_15.Value := No_Entity;
Entity_Vars.Reset (Fld_15);

Pred := Solver.Create_Predicate (Fld_15, Create_Decl_P_Is_Generic_0_Predicate (Bound_Error_Location)); 
--# expr-done 3100
Dyn_Var_Bind_Result := Pred; Inc_Ref (Dyn_Var_Bind_Result);
--# expr-done 3101
And_Pred_1 := Create_And (Bind_Result, Dyn_Var_Bind_Result, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:5002:17") else null)); 
--# expr-done 3102
--# expr-start 3108 '<bind at nodes.lkt:5012:17>' Dyn_Var_Bind_Result_1 nodes.lkt:5012





--# expr-start 3103 '<FieldAccess for params at nodes.lkt:5012:39>' Fld_16 nodes.lkt:5012







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_16 := Self.Generic_Type_Ref_F_Params;
--# expr-done 3103



   
      Cast_Result_1 := Fld_16;


Bound_Error_Location_1 := Cast_Result_1; 
--# expr-start 3107 '<Predicate on Decl.has_correct_type_param_number at nodes.lkt:5013:17>' Pred_1 nodes.lkt:5013
--# expr-start 3104 '<FieldAccess for ref_var at nodes.lkt:5014:21>' Fld_17 nodes.lkt:5014







   if Var_Expr_1.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_17 := Var_Expr_1.Node.Ref_Id_Ref_Var'Unrestricted_Access;
--# expr-done 3104
Fld_17.Value := No_Entity;
Entity_Vars.Reset (Fld_17);
--# expr-start 3106 '<length at nodes.lkt:5015:21>' Len nodes.lkt:5015



--# expr-start 3105 '<FieldAccess for params at nodes.lkt:5015:21>' Fld_18 nodes.lkt:5015







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_18 := Create_Internal_Entity_Type_Ref_List (Node => Ent.Node.Generic_Type_Ref_F_Params, Info => Ent.Info);
--# expr-done 3105





Fld_19 := Fld_18.Node; 
Len := Length (Fld_19); 
--# expr-done 3106

Pred_1 := Solver.Create_Predicate (Fld_17, Create_Decl_P_Has_Correct_Type_Param_Number_0_Predicate (Len, Bound_Error_Location_1)); 
--# expr-done 3107
Dyn_Var_Bind_Result_1 := Pred_1; Inc_Ref (Dyn_Var_Bind_Result_1);
--# expr-done 3108
And_Pred_2 := Create_And (And_Pred_1, Dyn_Var_Bind_Result_1, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:5001:13") else null)); 
--# expr-done 3109
Scope_Result := And_Pred_2;
   Inc_Ref (Scope_Result);


   --# end
      Finalizer_Scope_759;


   Result_Var := Scope_Result;
else
   False_Rel := Solver.Create_False ((if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:5018:25") else null)); 
   Result_Var := False_Rel;
end if;

      Inc_Ref (Result_Var);


And_Pred_3 := Create_And (And_Pred, Result_Var, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:4995:9") else null)); 
--# expr-done 3110

         Property_Result := And_Pred_3;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_363;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_363;
                     Finalizer_Scope_758;
                     Finalizer_Scope_759;




            raise;
      end;



   return Property_Result;
end Generic_Type_Ref_P_Xref_Equation;
--# end



   


      

   --
   --  Primitives for Bare_Simple_Type_Ref
   --

   



      
      procedure Initialize_Fields_For_Simple_Type_Ref
        (Self : Bare_Simple_Type_Ref
         ; Simple_Type_Ref_F_Type_Name : Bare_Expr
        ) is
      begin
            Initialize_Fields_For_Type_Ref
              (Self);

            Self.Simple_Type_Ref_F_Type_Name := Simple_Type_Ref_F_Type_Name;
         

      end Initialize_Fields_For_Simple_Type_Ref;

      
   function Simple_Type_Ref_F_Type_Name
     (Node : Bare_Simple_Type_Ref) return Bare_Expr
   is
      

   begin
         
         return Node.Simple_Type_Ref_F_Type_Name;
      
   end;


   







--# property-start SimpleTypeRef.xref_equation nodes.lkt:5027
pragma Warnings (Off, "is not referenced");
 function Simple_Type_Ref_P_Xref_Equation
  
  (Node : Bare_Simple_Type_Ref
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Logic_Equation
is
   Self : Bare_Simple_Type_Ref  := Bare_Simple_Type_Ref (Node);
     Ent : Internal_Entity_Simple_Type_Ref :=
       Internal_Entity_Simple_Type_Ref'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Logic_Equation;

      
            procedure Finalizer_Scope_364 with Inline_Always;
            procedure Finalizer_Scope_761 with Inline_Always;
            procedure Finalizer_Scope_762 with Inline_Always;

      Match_0 : Internal_Entity_Ref_Id;
Match_1 : Internal_Entity_Base_Dot_Expr;
Match_2 : Internal_Entity_Expr;
Fld : Internal_Entity_Expr;
Fld_1 : Logic_Equation;
Fld_2 : Internal_Entity_Expr;
Fld_3 : Logic_Var;
Fld_4 : Logic_Var;
Bind_Result : Logic_Equation;
Fld_5 : Logic_Var;
Fld_6 : Internal_Entity_Ref_Id;
Fld_7 : Logic_Var;
Bind_Result_1 : Logic_Equation;
Match_Prefix : Internal_Entity_Expr;
Cast_Result : Internal_Entity_Ref_Id;
Let_Result : Logic_Equation;
Scope_Result : Logic_Equation;
Cast_Result_1 : Internal_Entity_Base_Dot_Expr;
Let_Result_1 : Logic_Equation;
Scope_Result_1 : Logic_Equation;
Cast_Result_2 : Internal_Entity_Expr;
Let_Result_2 : Logic_Equation;
Scope_Result_2 : Logic_Equation;
Match_Result : Logic_Equation;
And_Pred : Logic_Equation;

            procedure Finalizer_Scope_364 is
            begin
                     Dec_Ref (Fld_1);
                     Dec_Ref (Let_Result);
                     Dec_Ref (Scope_Result);
                     Dec_Ref (Let_Result_1);
                     Dec_Ref (Scope_Result_1);
                     Dec_Ref (Let_Result_2);
                     Dec_Ref (Scope_Result_2);
                     Dec_Ref (Match_Result);
                     Dec_Ref (And_Pred);
            end Finalizer_Scope_364;
            procedure Finalizer_Scope_761 is
            begin
                     Dec_Ref (Bind_Result);
            end Finalizer_Scope_761;
            procedure Finalizer_Scope_762 is
            begin
                     Dec_Ref (Bind_Result_1);
            end Finalizer_Scope_762;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 3122 '<LogicBinaryOp And at nodes.lkt:5028:9>' And_Pred nodes.lkt:5028
--# expr-start 3112 '<FieldAccess for xtype_equation at nodes.lkt:5028:9>' Fld_1 nodes.lkt:5028



--# expr-start 3111 '<FieldAccess for type_name at nodes.lkt:5028:9>' Fld nodes.lkt:5028







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Create_Internal_Entity_Expr (Node => Ent.Node.Simple_Type_Ref_F_Type_Name, Info => Ent.Info);
--# expr-done 3111



   if Fld.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]Expr.xtype_equation'
Fld_1 := Liblktlang.Implementation.Dispatcher_Expr_P_Xtype_Equation (Node => Fld.Node, E_Info => Fld.Info);
--# end
--# expr-done 3112
--# expr-start 3121 '<Match at nodes.lkt:5029:14>' Match_Result nodes.lkt:5029






--# expr-start 3113 '<FieldAccess for type_name at nodes.lkt:5029:20>' Fld_2 nodes.lkt:5029







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_2 := Create_Internal_Entity_Expr (Node => Ent.Node.Simple_Type_Ref_F_Type_Name, Info => Ent.Info);
--# expr-done 3113



   if Fld_2.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Match_Prefix := Fld_2; 

case Lkt_Expr (Match_Prefix.Node.Kind) is
         when Lkt_Ref_Id =>
            



   --# scope-start



--# scope-start









   
      Cast_Result := Create_Internal_Entity_Ref_Id
        (Node => Match_Prefix.Node,
         Info => Match_Prefix.Info);


Match_0 := Cast_Result; 
--# bind ri Match_0
--# expr-start 3116 '<Bind at nodes.lkt:5030:31>' Bind_Result nodes.lkt:5030
--# expr-start 3114 '<FieldAccess for type_var at nodes.lkt:5030:31>' Fld_3 nodes.lkt:5030







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_3 := Ent.Node.Type_Ref_Type_Var'Unrestricted_Access;
--# expr-done 3114
Fld_3.Value := No_Entity;
Entity_Vars.Reset (Fld_3);
--# expr-start 3115 '<FieldAccess for ref_var at nodes.lkt:5030:49>' Fld_4 nodes.lkt:5030







   if Match_0.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_4 := Match_0.Node.Ref_Id_Ref_Var'Unrestricted_Access;
--# expr-done 3115
Fld_4.Value := No_Entity;
Entity_Vars.Reset (Fld_4);
Bind_Result := Solver.Create_Unify (Fld_3, Fld_4, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:5030:31") else null)); 
--# expr-done 3116
Let_Result := Bind_Result; Inc_Ref (Let_Result);
--# end
Scope_Result := Let_Result;
   Inc_Ref (Scope_Result);


   --# end
      Finalizer_Scope_761;


            Match_Result := Scope_Result; Inc_Ref (Match_Result);
         when Lkt_Dot_Expr .. Lkt_Null_Cond_Dotted_Name =>
            



   --# scope-start



--# scope-start









   
      Cast_Result_1 := Create_Internal_Entity_Base_Dot_Expr
        (Node => Match_Prefix.Node,
         Info => Match_Prefix.Info);


Match_1 := Cast_Result_1; 
--# bind de Match_1
--# expr-start 3120 '<Bind at nodes.lkt:5031:37>' Bind_Result_1 nodes.lkt:5031
--# expr-start 3117 '<FieldAccess for type_var at nodes.lkt:5031:37>' Fld_5 nodes.lkt:5031







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_5 := Ent.Node.Type_Ref_Type_Var'Unrestricted_Access;
--# expr-done 3117
Fld_5.Value := No_Entity;
Entity_Vars.Reset (Fld_5);
--# expr-start 3119 '<FieldAccess for ref_var at nodes.lkt:5031:55>' Fld_7 nodes.lkt:5031



--# expr-start 3118 '<FieldAccess for suffix at nodes.lkt:5031:55>' Fld_6 nodes.lkt:5031







   if Match_1.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_6 := Create_Internal_Entity_Ref_Id (Node => Match_1.Node.Base_Dot_Expr_F_Suffix, Info => Match_1.Info);
--# expr-done 3118



   if Fld_6.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_7 := Fld_6.Node.Ref_Id_Ref_Var'Unrestricted_Access;
--# expr-done 3119
Fld_7.Value := No_Entity;
Entity_Vars.Reset (Fld_7);
Bind_Result_1 := Solver.Create_Unify (Fld_5, Fld_7, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:5031:37") else null)); 
--# expr-done 3120
Let_Result_1 := Bind_Result_1; Inc_Ref (Let_Result_1);
--# end
Scope_Result_1 := Let_Result_1;
   Inc_Ref (Scope_Result_1);


   --# end
      Finalizer_Scope_762;


            Match_Result := Scope_Result_1; Inc_Ref (Match_Result);
         when Lkt_Any_Of .. Lkt_Logic_Propagate_Call | Lkt_Bin_Op .. Lkt_Module_Ref_Id | Lkt_If_Expr .. Lkt_Un_Op =>
            



   --# scope-start



--# scope-start









   
      Cast_Result_2 := Create_Internal_Entity_Expr
        (Node => Match_Prefix.Node,
         Info => Match_Prefix.Info);


Match_2 := Cast_Result_2; 
--# bind _ Match_2

Let_Result_2 := raise Property_Error with "Unreachable"; Inc_Ref (Let_Result_2);
--# end
Scope_Result_2 := Let_Result_2;
   Inc_Ref (Scope_Result_2);


   --# end


            Match_Result := Scope_Result_2; Inc_Ref (Match_Result);
end case;

--# expr-done 3121
And_Pred := Create_And (Fld_1, Match_Result, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:5028:9") else null)); 
--# expr-done 3122

         Property_Result := And_Pred;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_364;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_364;
                     Finalizer_Scope_761;
                     Finalizer_Scope_762;




            raise;
      end;



   return Property_Result;
end Simple_Type_Ref_P_Xref_Equation;
--# end



   


      

   --
   --  Primitives for Bare_Var_Bind
   --

   



      
      procedure Initialize_Fields_For_Var_Bind
        (Self : Bare_Var_Bind
         ; Var_Bind_F_Name : Bare_Ref_Id
         ; Var_Bind_F_Expr : Bare_Expr
        ) is
      begin

            Self.Var_Bind_F_Name := Var_Bind_F_Name;
            Self.Var_Bind_F_Expr := Var_Bind_F_Expr;
         

      end Initialize_Fields_For_Var_Bind;

      
   function Var_Bind_F_Name
     (Node : Bare_Var_Bind) return Bare_Ref_Id
   is
      

   begin
         
         return Node.Var_Bind_F_Name;
      
   end;

      
   function Var_Bind_F_Expr
     (Node : Bare_Var_Bind) return Bare_Expr
   is
      

   begin
         
         return Node.Var_Bind_F_Expr;
      
   end;


   







--# property-start VarBind.xref_equation nodes.lkt:5043
pragma Warnings (Off, "is not referenced");
 function Var_Bind_P_Xref_Equation
  
  (Node : Bare_Var_Bind
   ; E_Info : Internal_Entity_Info :=
      No_Entity_Info
  )

   return Logic_Equation
is
   Self : Bare_Var_Bind  := Bare_Var_Bind (Node);
     Ent : Internal_Entity_Var_Bind :=
       Internal_Entity_Var_Bind'(Node => Self, Info => E_Info);
      --# bind entity Ent

   


   Property_Result : Logic_Equation;

      
            procedure Finalizer_Scope_365 with Inline_Always;

      Fld : Internal_Entity_Ref_Id;
Fld_1 : Logic_Equation;
Fld_2 : Internal_Entity_Expr;
Fld_3 : Logic_Equation;
And_Pred : Logic_Equation;
Fld_4 : Internal_Entity_Expr;
Fld_5 : Logic_Var;
Fld_6 : Internal_Entity_Ref_Id;
Fld_7 : Logic_Var;
Bind_Result : Logic_Equation;
And_Pred_1 : Logic_Equation;
Fld_8 : Internal_Entity_Ref_Id;
Fld_9 : Logic_Var;
Cast_Expr : Internal_Entity_Type_Decl;
Cast_Result : Internal_Entity;
Bind_Result_1 : Logic_Equation;
And_Pred_2 : Logic_Equation;
Fld_10 : Bare_Expr;
Cast_Result_1 : Bare_Lkt_Node;
Bound_Error_Location : Bare_Lkt_Node;
Fld_11 : Internal_Entity_Expr;
Fld_12 : Logic_Var;
Fld_13 : Internal_Entity_Expr;
Fld_14 : Logic_Var;
Pred : Logic_Equation;
Dyn_Var_Bind_Result : Logic_Equation;
And_Pred_3 : Logic_Equation;

            procedure Finalizer_Scope_365 is
            begin
                     Dec_Ref (Fld_1);
                     Dec_Ref (Fld_3);
                     Dec_Ref (And_Pred);
                     Dec_Ref (Bind_Result);
                     Dec_Ref (And_Pred_1);
                     Dec_Ref (Bind_Result_1);
                     Dec_Ref (And_Pred_2);
                     Dec_Ref (Pred);
                     Dec_Ref (Dyn_Var_Bind_Result);
                     Dec_Ref (And_Pred_3);
            end Finalizer_Scope_365;


begin
   --# property-body-start

   pragma Assert (Self = Node);



      if Self /= null then
         Reset_Caches (Self.Unit);

      end if;


      begin
         
   --# scope-start

         --# expr-start 3145 '<LogicBinaryOp And at nodes.lkt:5044:9>' And_Pred_3 nodes.lkt:5044
--# expr-start 3137 '<LogicBinaryOp And at nodes.lkt:5045:13>' And_Pred_2 nodes.lkt:5045
--# expr-start 3133 '<LogicBinaryOp And at nodes.lkt:5046:17>' And_Pred_1 nodes.lkt:5046
--# expr-start 3127 '<LogicBinaryOp And at nodes.lkt:5046:18>' And_Pred nodes.lkt:5046
--# expr-start 3124 '<FieldAccess for xref_equation at nodes.lkt:5046:18>' Fld_1 nodes.lkt:5046



--# expr-start 3123 '<FieldAccess for name at nodes.lkt:5046:18>' Fld nodes.lkt:5046







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld := Create_Internal_Entity_Ref_Id (Node => Ent.Node.Var_Bind_F_Name, Info => Ent.Info);
--# expr-done 3123



   if Fld.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]LktNode.xref_equation'
Fld_1 := Liblktlang.Implementation.Dispatcher_Lkt_Node_P_Xref_Equation (Node => Fld.Node, E_Info => Fld.Info);
--# end
--# expr-done 3124
--# expr-start 3126 '<FieldAccess for xref_equation at nodes.lkt:5046:49>' Fld_3 nodes.lkt:5046



--# expr-start 3125 '<FieldAccess for expr at nodes.lkt:5046:49>' Fld_2 nodes.lkt:5046







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_2 := Create_Internal_Entity_Expr (Node => Ent.Node.Var_Bind_F_Expr, Info => Ent.Info);
--# expr-done 3125



   if Fld_2.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


--# property-call-start '[dispatcher]LktNode.xref_equation'
Fld_3 := Liblktlang.Implementation.Dispatcher_Lkt_Node_P_Xref_Equation (Node => Fld_2.Node, E_Info => Fld_2.Info);
--# end
--# expr-done 3126
And_Pred := Create_And (Fld_1, Fld_3, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:5046:18") else null)); 
--# expr-done 3127
--# expr-start 3132 '<Bind at nodes.lkt:5047:22>' Bind_Result nodes.lkt:5047
--# expr-start 3129 '<FieldAccess for expected_type_var at nodes.lkt:5047:22>' Fld_5 nodes.lkt:5047



--# expr-start 3128 '<FieldAccess for expr at nodes.lkt:5047:22>' Fld_4 nodes.lkt:5047







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_4 := Create_Internal_Entity_Expr (Node => Ent.Node.Var_Bind_F_Expr, Info => Ent.Info);
--# expr-done 3128



   if Fld_4.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_5 := Fld_4.Node.Expr_Expected_Type_Var'Unrestricted_Access;
--# expr-done 3129
Fld_5.Value := No_Entity;
Entity_Vars.Reset (Fld_5);
--# expr-start 3131 '<FieldAccess for actual_type_var at nodes.lkt:5047:54>' Fld_7 nodes.lkt:5047



--# expr-start 3130 '<FieldAccess for name at nodes.lkt:5047:54>' Fld_6 nodes.lkt:5047







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_6 := Create_Internal_Entity_Ref_Id (Node => Ent.Node.Var_Bind_F_Name, Info => Ent.Info);
--# expr-done 3130



   if Fld_6.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_7 := Fld_6.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 3131
Fld_7.Value := No_Entity;
Entity_Vars.Reset (Fld_7);
Bind_Result := Solver.Create_Unify (Fld_5, Fld_7, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:5047:22") else null)); 
--# expr-done 3132
And_Pred_1 := Create_And (And_Pred, Bind_Result, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:5046:17") else null)); 
--# expr-done 3133
--# expr-start 3136 '<Bind at nodes.lkt:5049:18>' Bind_Result_1 nodes.lkt:5049
--# expr-start 3135 '<FieldAccess for expected_type_var at nodes.lkt:5049:18>' Fld_9 nodes.lkt:5049



--# expr-start 3134 '<FieldAccess for name at nodes.lkt:5049:18>' Fld_8 nodes.lkt:5049







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_8 := Create_Internal_Entity_Ref_Id (Node => Ent.Node.Var_Bind_F_Name, Info => Ent.Info);
--# expr-done 3134



   if Fld_8.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_9 := Fld_8.Node.Expr_Expected_Type_Var'Unrestricted_Access;
--# expr-done 3135
Fld_9.Value := No_Entity;
Entity_Vars.Reset (Fld_9);






Cast_Expr := No_Entity_Type_Decl; 



   
      Cast_Result := Create_Internal_Entity
        (Node => Cast_Expr.Node,
         Info => Cast_Expr.Info);


Bind_Result_1 := Solver.Create_Assign (Fld_9, Cast_Result, Solver_Ifc.No_Converter, Debug_String => (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:5049:18") else null)); 
--# expr-done 3136
And_Pred_2 := Create_And (And_Pred_1, Bind_Result_1, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:5045:13") else null)); 
--# expr-done 3137
--# expr-start 3144 '<bind at nodes.lkt:5052:13>' Dyn_Var_Bind_Result nodes.lkt:5052





--# expr-start 3138 '<FieldAccess for expr at nodes.lkt:5052:35>' Fld_10 nodes.lkt:5052







   if Self = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_10 := Self.Var_Bind_F_Expr;
--# expr-done 3138



   
      Cast_Result_1 := Fld_10;


Bound_Error_Location := Cast_Result_1; 
--# expr-start 3143 '<Predicate on TypeDecl.matching_type at nodes.lkt:5053:13>' Pred nodes.lkt:5053
--# expr-start 3140 '<FieldAccess for expected_type_var at nodes.lkt:5054:17>' Fld_12 nodes.lkt:5054



--# expr-start 3139 '<FieldAccess for expr at nodes.lkt:5054:17>' Fld_11 nodes.lkt:5054







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_11 := Create_Internal_Entity_Expr (Node => Ent.Node.Var_Bind_F_Expr, Info => Ent.Info);
--# expr-done 3139



   if Fld_11.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_12 := Fld_11.Node.Expr_Expected_Type_Var'Unrestricted_Access;
--# expr-done 3140
Fld_12.Value := No_Entity;
Entity_Vars.Reset (Fld_12);
--# expr-start 3142 '<FieldAccess for actual_type_var at nodes.lkt:5055:17>' Fld_14 nodes.lkt:5055



--# expr-start 3141 '<FieldAccess for expr at nodes.lkt:5055:17>' Fld_13 nodes.lkt:5055







   if Ent.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_13 := Create_Internal_Entity_Expr (Node => Ent.Node.Var_Bind_F_Expr, Info => Ent.Info);
--# expr-done 3141



   if Fld_13.Node = null then
      Raise_Property_Exception
        (Self, Property_Error'Identity, "dereferencing a null access");
   end if;


Fld_14 := Fld_13.Node.Expr_Actual_Type_Var'Unrestricted_Access;
--# expr-done 3142
Fld_14.Value := No_Entity;
Entity_Vars.Reset (Fld_14);


Pred := Solver.Create_N_Predicate ((Fld_12, Fld_14), Create_Type_Decl_P_Matching_Type_0_Predicate (2, Bound_Error_Location)); 
--# expr-done 3143
Dyn_Var_Bind_Result := Pred; Inc_Ref (Dyn_Var_Bind_Result);
--# expr-done 3144
And_Pred_3 := Create_And (And_Pred_2, Dyn_Var_Bind_Result, (if Liblktlang_Support.Adalog.Debug.Debug then New_Unit_String (Node.Unit, "nodes.lkt:5044:9") else null)); 
--# expr-done 3145

         Property_Result := And_Pred_3;
            Inc_Ref (Property_Result);
         
   --# end
      Finalizer_Scope_365;


      exception
         when Exc : Property_Error =>
                     Finalizer_Scope_365;




            raise;
      end;



   return Property_Result;
end Var_Bind_P_Xref_Equation;
--# end



   



   ----------------------------
   -- Destroy_Synthetic_Node --
   ----------------------------

   procedure Destroy_Synthetic_Node (Node : in out Bare_Lkt_Node) is
      procedure Free is new Ada.Unchecked_Deallocation
        (Root_Node_Record, Bare_Lkt_Node);
   begin
      --  Don't call Node.Destroy, as Node's children may be gone already: they
      --  have their own destructor and there is no specified order for the
      --  call of these destructors.
      Free_User_Fields (Node);
      Free (Node);
   end Destroy_Synthetic_Node;

   -----------
   -- Image --
   -----------

   function Image (Value : Boolean) return String
   is (if Value then "True" else "False");

      -----------------
      -- Trace_Image --
      -----------------

      function Trace_Image
        (Node       : Bare_Lkt_Node;
         Decoration : Boolean := True) return String is
      begin
         if Node = null then
            return "None";
         else
            declare
               Result : constant String :=
                 (Kind_Name (Node) & " "
                  & Basename (Node.Unit) & ":"
                  & Image (Sloc_Range (Node)));
            begin
               return (if Decoration then "<" & Result & ">" else Result);
            end;
         end if;
      end Trace_Image;

   Kind_Names : array (Lkt_Node_Kind_Type) of Unbounded_String :=
     (Lkt_Lexer_Case_Rule_Cond_Alt => To_Unbounded_String ("LexerCaseRuleCondAlt"), 
Lkt_Lexer_Case_Rule_Default_Alt => To_Unbounded_String ("LexerCaseRuleDefaultAlt"), 
Lkt_Block_String_Line => To_Unbounded_String ("BlockStringLine"), 
Lkt_Class_Qualifier_Absent => To_Unbounded_String ("ClassQualifierAbsent"), 
Lkt_Class_Qualifier_Present => To_Unbounded_String ("ClassQualifierPresent"), 
Lkt_Grammar_Rule_Decl => To_Unbounded_String ("GrammarRuleDecl"), 
Lkt_Synthetic_Lexer_Decl => To_Unbounded_String ("SyntheticLexerDecl"), 
Lkt_Node_Decl => To_Unbounded_String ("NodeDecl"), 
Lkt_Self_Decl => To_Unbounded_String ("SelfDecl"), 
Lkt_Enum_Lit_Decl => To_Unbounded_String ("EnumLitDecl"), 
Lkt_Field_Decl => To_Unbounded_String ("FieldDecl"), 
Lkt_Fun_Arg_Decl => To_Unbounded_String ("FunArgDecl"), 
Lkt_Lambda_Arg_Decl => To_Unbounded_String ("LambdaArgDecl"), 
Lkt_Dyn_Var_Decl => To_Unbounded_String ("DynVarDecl"), 
Lkt_Match_Val_Decl => To_Unbounded_String ("MatchValDecl"), 
Lkt_Val_Decl => To_Unbounded_String ("ValDecl"), 
Lkt_Fun_Decl => To_Unbounded_String ("FunDecl"), 
Lkt_Env_Spec_Decl => To_Unbounded_String ("EnvSpecDecl"), 
Lkt_Generic_Decl => To_Unbounded_String ("GenericDecl"), 
Lkt_Grammar_Decl => To_Unbounded_String ("GrammarDecl"), 
Lkt_Lexer_Decl => To_Unbounded_String ("LexerDecl"), 
Lkt_Lexer_Family_Decl => To_Unbounded_String ("LexerFamilyDecl"), 
Lkt_Synth_Arg_Decl => To_Unbounded_String ("SynthArgDecl"), 
Lkt_Synth_Fun_Decl => To_Unbounded_String ("SynthFunDecl"), 
Lkt_Any_Type_Decl => To_Unbounded_String ("AnyTypeDecl"), 
Lkt_Enum_Class_Alt_Decl => To_Unbounded_String ("EnumClassAltDecl"), 
Lkt_Function_Type => To_Unbounded_String ("FunctionType"), 
Lkt_Generic_Formal_Type_Decl => To_Unbounded_String ("GenericFormalTypeDecl"), 
Lkt_Class_Decl => To_Unbounded_String ("ClassDecl"), 
Lkt_Enum_Class_Decl => To_Unbounded_String ("EnumClassDecl"), 
Lkt_Enum_Type_Decl => To_Unbounded_String ("EnumTypeDecl"), 
Lkt_Struct_Decl => To_Unbounded_String ("StructDecl"), 
Lkt_Trait_Decl => To_Unbounded_String ("TraitDecl"), 
Lkt_Decl_Annotation => To_Unbounded_String ("DeclAnnotation"), 
Lkt_Decl_Annotation_Params => To_Unbounded_String ("DeclAnnotationParams"), 
Lkt_Dyn_Env_Wrapper => To_Unbounded_String ("DynEnvWrapper"), 
Lkt_Elsif_Branch => To_Unbounded_String ("ElsifBranch"), 
Lkt_Enum_Class_Case => To_Unbounded_String ("EnumClassCase"), 
Lkt_Excludes_Null_Absent => To_Unbounded_String ("ExcludesNullAbsent"), 
Lkt_Excludes_Null_Present => To_Unbounded_String ("ExcludesNullPresent"), 
Lkt_Any_Of => To_Unbounded_String ("AnyOf"), 
Lkt_Array_Literal => To_Unbounded_String ("ArrayLiteral"), 
Lkt_Call_Expr => To_Unbounded_String ("CallExpr"), 
Lkt_Logic_Predicate => To_Unbounded_String ("LogicPredicate"), 
Lkt_Logic_Propagate_Call => To_Unbounded_String ("LogicPropagateCall"), 
Lkt_Dot_Expr => To_Unbounded_String ("DotExpr"), 
Lkt_Null_Cond_Dotted_Name => To_Unbounded_String ("NullCondDottedName"), 
Lkt_Bin_Op => To_Unbounded_String ("BinOp"), 
Lkt_Block_Expr => To_Unbounded_String ("BlockExpr"), 
Lkt_Cast_Expr => To_Unbounded_String ("CastExpr"), 
Lkt_Error_On_Null => To_Unbounded_String ("ErrorOnNull"), 
Lkt_Generic_Instantiation => To_Unbounded_String ("GenericInstantiation"), 
Lkt_Grammar_Cut => To_Unbounded_String ("GrammarCut"), 
Lkt_Grammar_Discard => To_Unbounded_String ("GrammarDiscard"), 
Lkt_Grammar_Dont_Skip => To_Unbounded_String ("GrammarDontSkip"), 
Lkt_Grammar_List => To_Unbounded_String ("GrammarList"), 
Lkt_Grammar_Null => To_Unbounded_String ("GrammarNull"), 
Lkt_Grammar_Opt => To_Unbounded_String ("GrammarOpt"), 
Lkt_Grammar_Opt_Error => To_Unbounded_String ("GrammarOptError"), 
Lkt_Grammar_Opt_Error_Group => To_Unbounded_String ("GrammarOptErrorGroup"), 
Lkt_Grammar_Opt_Group => To_Unbounded_String ("GrammarOptGroup"), 
Lkt_Grammar_Or_Expr => To_Unbounded_String ("GrammarOrExpr"), 
Lkt_Grammar_Pick => To_Unbounded_String ("GrammarPick"), 
Lkt_Grammar_Implicit_Pick => To_Unbounded_String ("GrammarImplicitPick"), 
Lkt_Grammar_Predicate => To_Unbounded_String ("GrammarPredicate"), 
Lkt_Grammar_Rule_Ref => To_Unbounded_String ("GrammarRuleRef"), 
Lkt_Grammar_Skip => To_Unbounded_String ("GrammarSkip"), 
Lkt_Grammar_Stop_Cut => To_Unbounded_String ("GrammarStopCut"), 
Lkt_Parse_Node_Expr => To_Unbounded_String ("ParseNodeExpr"), 
Lkt_Token_Lit => To_Unbounded_String ("TokenLit"), 
Lkt_Token_No_Case_Lit => To_Unbounded_String ("TokenNoCaseLit"), 
Lkt_Token_Pattern_Concat => To_Unbounded_String ("TokenPatternConcat"), 
Lkt_Token_Pattern_Lit => To_Unbounded_String ("TokenPatternLit"), 
Lkt_Token_Ref => To_Unbounded_String ("TokenRef"), 
Lkt_Id => To_Unbounded_String ("Id"), 
Lkt_Def_Id => To_Unbounded_String ("DefId"), 
Lkt_Module_Ref_Id => To_Unbounded_String ("ModuleRefId"), 
Lkt_Ref_Id => To_Unbounded_String ("RefId"), 
Lkt_If_Expr => To_Unbounded_String ("IfExpr"), 
Lkt_Isa => To_Unbounded_String ("Isa"), 
Lkt_Keep_Expr => To_Unbounded_String ("KeepExpr"), 
Lkt_Lambda_Expr => To_Unbounded_String ("LambdaExpr"), 
Lkt_Big_Num_Lit => To_Unbounded_String ("BigNumLit"), 
Lkt_Char_Lit => To_Unbounded_String ("CharLit"), 
Lkt_Null_Lit => To_Unbounded_String ("NullLit"), 
Lkt_Num_Lit => To_Unbounded_String ("NumLit"), 
Lkt_Block_String_Lit => To_Unbounded_String ("BlockStringLit"), 
Lkt_Single_Line_String_Lit => To_Unbounded_String ("SingleLineStringLit"), 
Lkt_Pattern_Single_Line_String_Lit => To_Unbounded_String ("PatternSingleLineStringLit"), 
Lkt_Logic_Assign => To_Unbounded_String ("LogicAssign"), 
Lkt_Logic_Expr => To_Unbounded_String ("LogicExpr"), 
Lkt_Logic_Propagate => To_Unbounded_String ("LogicPropagate"), 
Lkt_Logic_Unify => To_Unbounded_String ("LogicUnify"), 
Lkt_Match_Expr => To_Unbounded_String ("MatchExpr"), 
Lkt_Not_Expr => To_Unbounded_String ("NotExpr"), 
Lkt_Paren_Expr => To_Unbounded_String ("ParenExpr"), 
Lkt_Raise_Expr => To_Unbounded_String ("RaiseExpr"), 
Lkt_Subscript_Expr => To_Unbounded_String ("SubscriptExpr"), 
Lkt_Null_Cond_Subscript_Expr => To_Unbounded_String ("NullCondSubscriptExpr"), 
Lkt_Try_Expr => To_Unbounded_String ("TryExpr"), 
Lkt_Un_Op => To_Unbounded_String ("UnOp"), 
Lkt_Full_Decl => To_Unbounded_String ("FullDecl"), 
Lkt_Grammar_List_Sep => To_Unbounded_String ("GrammarListSep"), 
Lkt_Import => To_Unbounded_String ("Import"), 
Lkt_Langkit_Root => To_Unbounded_String ("LangkitRoot"), 
Lkt_Lexer_Case_Rule => To_Unbounded_String ("LexerCaseRule"), 
Lkt_Lexer_Case_Rule_Send => To_Unbounded_String ("LexerCaseRuleSend"), 
Lkt_List_Kind_One => To_Unbounded_String ("ListKindOne"), 
Lkt_List_Kind_Zero => To_Unbounded_String ("ListKindZero"), 
Lkt_Base_Lexer_Case_Rule_Alt_List => To_Unbounded_String ("BaseLexerCaseRuleAltList"), 
Lkt_Block_String_Line_List => To_Unbounded_String ("BlockStringLineList"), 
Lkt_Call_Expr_List => To_Unbounded_String ("CallExprList"), 
Lkt_Decl_Annotation_List => To_Unbounded_String ("DeclAnnotationList"), 
Lkt_Elsif_Branch_List => To_Unbounded_String ("ElsifBranchList"), 
Lkt_Enum_Class_Alt_Decl_List => To_Unbounded_String ("EnumClassAltDeclList"), 
Lkt_Enum_Class_Case_List => To_Unbounded_String ("EnumClassCaseList"), 
Lkt_Enum_Lit_Decl_List => To_Unbounded_String ("EnumLitDeclList"), 
Lkt_Expr_List => To_Unbounded_String ("ExprList"), 
Lkt_Any_Of_List => To_Unbounded_String ("AnyOfList"), 
Lkt_Full_Decl_List => To_Unbounded_String ("FullDeclList"), 
Lkt_Decl_Block => To_Unbounded_String ("DeclBlock"), 
Lkt_Generic_Formal_Decl_List => To_Unbounded_String ("GenericFormalDeclList"), 
Lkt_Fun_Arg_Decl_List => To_Unbounded_String ("FunArgDeclList"), 
Lkt_Grammar_Expr_List => To_Unbounded_String ("GrammarExprList"), 
Lkt_Grammar_Expr_List_List => To_Unbounded_String ("GrammarExprListList"), 
Lkt_Import_List => To_Unbounded_String ("ImportList"), 
Lkt_Lambda_Arg_Decl_List => To_Unbounded_String ("LambdaArgDeclList"), 
Lkt_Lkt_Node_List => To_Unbounded_String ("LktNodeList"), 
Lkt_Block_Decl_List => To_Unbounded_String ("BlockDeclList"), 
Lkt_Match_Branch_List => To_Unbounded_String ("MatchBranchList"), 
Lkt_Param_List => To_Unbounded_String ("ParamList"), 
Lkt_Ref_Id_List => To_Unbounded_String ("RefIdList"), 
Lkt_Type_Ref_List => To_Unbounded_String ("TypeRefList"), 
Lkt_Isa_List => To_Unbounded_String ("IsaList"), 
Lkt_Match_Branch => To_Unbounded_String ("MatchBranch"), 
Lkt_Op_Amp => To_Unbounded_String ("OpAmp"), 
Lkt_Op_And => To_Unbounded_String ("OpAnd"), 
Lkt_Op_Div => To_Unbounded_String ("OpDiv"), 
Lkt_Op_Eq => To_Unbounded_String ("OpEq"), 
Lkt_Op_Gt => To_Unbounded_String ("OpGt"), 
Lkt_Op_Gte => To_Unbounded_String ("OpGte"), 
Lkt_Op_Logic_And => To_Unbounded_String ("OpLogicAnd"), 
Lkt_Op_Logic_Or => To_Unbounded_String ("OpLogicOr"), 
Lkt_Op_Lt => To_Unbounded_String ("OpLt"), 
Lkt_Op_Lte => To_Unbounded_String ("OpLte"), 
Lkt_Op_Minus => To_Unbounded_String ("OpMinus"), 
Lkt_Op_Mult => To_Unbounded_String ("OpMult"), 
Lkt_Op_Ne => To_Unbounded_String ("OpNe"), 
Lkt_Op_Or => To_Unbounded_String ("OpOr"), 
Lkt_Op_Or_Int => To_Unbounded_String ("OpOrInt"), 
Lkt_Op_Plus => To_Unbounded_String ("OpPlus"), 
Lkt_Param => To_Unbounded_String ("Param"), 
Lkt_Default_List_Type_Ref => To_Unbounded_String ("DefaultListTypeRef"), 
Lkt_Function_Type_Ref => To_Unbounded_String ("FunctionTypeRef"), 
Lkt_Generic_Type_Ref => To_Unbounded_String ("GenericTypeRef"), 
Lkt_Simple_Type_Ref => To_Unbounded_String ("SimpleTypeRef"), 
Lkt_Var_Bind => To_Unbounded_String ("VarBind"));

   ---------------
   -- Kind_Name --
   ---------------

   function Kind_Name (Node : Bare_Lkt_Node) return String is
   begin
      return To_String (Kind_Names (Node.Kind));
   end Kind_Name;

   --------------------
   -- Children_Count --
   --------------------

   function Children_Count (Node : Bare_Lkt_Node) return Natural is
      C : Integer := Kind_To_Node_Children_Count (Node.Kind);
   begin
      if C = -1 then
         return Node.Count;
      else
         return C;
      end if;
   end Children_Count;

   ----------------------
   -- Free_User_Fields --
   ----------------------

   procedure Free_User_Fields (Node : Bare_Lkt_Node) is

      procedure Reset_Logic_Var (LV : in out Logic_Var_Record);
      --  Reset the LV logic variable, clearing the value it stores

      ---------------------
      -- Reset_Logic_Var --
      ---------------------

      procedure Reset_Logic_Var (LV : in out Logic_Var_Record) is
      begin
         LV.Value := No_Entity;
         Entity_Vars.Reset (LV'Unrestricted_Access);
         Entity_Vars.Destroy (LV);
      end Reset_Logic_Var;

      K : constant Lkt_Node_Kind_Type := Node.Kind;

   begin
      
      case Lkt_Lkt_Node (K) is
when Lkt_Lambda_Arg_Decl_Range =>
declare
N_Bare_Lambda_Arg_Decl : constant Bare_Lambda_Arg_Decl := Node;
begin
Reset_Logic_Var (N_Bare_Lambda_Arg_Decl.Lambda_Arg_Decl_Type_Var);
end;
when Lkt_Synth_Fun_Decl_Range =>
declare
N_Bare_Synth_Fun_Decl : constant Bare_Synth_Fun_Decl := Node;
begin
Dec_Ref (N_Bare_Synth_Fun_Decl.Synth_Fun_Decl_Args);
end;
when Lkt_Function_Type_Range =>
declare
N_Bare_Function_Type : constant Bare_Function_Type := Node;
begin
Dec_Ref (N_Bare_Function_Type.Function_Type_Args);
end;
when Lkt_Dyn_Env_Wrapper_Range =>
declare
N_Bare_Dyn_Env_Wrapper : constant Bare_Dyn_Env_Wrapper := Node;
begin
Dec_Ref (N_Bare_Dyn_Env_Wrapper.Dyn_Env_Wrapper_Names);
Dec_Ref (N_Bare_Dyn_Env_Wrapper.Dyn_Env_Wrapper_Types);
Dec_Ref (N_Bare_Dyn_Env_Wrapper.Bare_Dyn_Env_Wrapper_Lf_Stg_Dynenvwrapper_Instantiation_Env);
end;
when Lkt_Expr =>
declare
N_Bare_Expr : constant Bare_Expr := Node;
begin
Reset_Logic_Var (N_Bare_Expr.Expr_Expected_Type_Var);
Reset_Logic_Var (N_Bare_Expr.Expr_Actual_Type_Var);
Reset_Logic_Var (N_Bare_Expr.Expr_Generic_Func_Type_Var);
case Lkt_Expr (K) is
when Lkt_Array_Literal_Range =>
declare
N_Bare_Array_Literal : constant Bare_Array_Literal := N_Bare_Expr;
begin
Reset_Logic_Var (N_Bare_Array_Literal.Array_Literal_Expected_Exprs_Type_Var);
Reset_Logic_Var (N_Bare_Array_Literal.Array_Literal_Actual_Element_Type);
end;
when Lkt_Generic_Instantiation_Range =>
declare
N_Bare_Generic_Instantiation : constant Bare_Generic_Instantiation := N_Bare_Expr;
begin
Reset_Logic_Var (N_Bare_Generic_Instantiation.Generic_Instantiation_Rebinded_Var);
end;
when Lkt_Ref_Id_Range =>
declare
N_Bare_Ref_Id : constant Bare_Ref_Id := N_Bare_Expr;
begin
Reset_Logic_Var (N_Bare_Ref_Id.Ref_Id_Ref_Var);
end;
when Lkt_If_Expr_Range =>
declare
N_Bare_If_Expr : constant Bare_If_Expr := N_Bare_Expr;
begin
Reset_Logic_Var (N_Bare_If_Expr.If_Expr_Expected_Branch_Type_Var);
end;
when Lkt_Keep_Expr_Range =>
declare
N_Bare_Keep_Expr : constant Bare_Keep_Expr := N_Bare_Expr;
begin
Reset_Logic_Var (N_Bare_Keep_Expr.Keep_Expr_Array_Element_Type);
end;
when Lkt_Match_Expr_Range =>
declare
N_Bare_Match_Expr : constant Bare_Match_Expr := N_Bare_Expr;
begin
Reset_Logic_Var (N_Bare_Match_Expr.Match_Expr_Expected_Branch_Type_Var);
end;
when Lkt_Try_Expr_Range =>
declare
N_Bare_Try_Expr : constant Bare_Try_Expr := N_Bare_Expr;
begin
Reset_Logic_Var (N_Bare_Try_Expr.Try_Expr_Expected_Expr_Type_Var);
end;
when others => null;
end case;
end;
when Lkt_Type_Ref =>
declare
N_Bare_Type_Ref : constant Bare_Type_Ref := Node;
begin
Reset_Logic_Var (N_Bare_Type_Ref.Type_Ref_Type_Var);
end;
when others => null;
end case;
   end Free_User_Fields;

   ----------------
   -- Token_Data --
   ----------------

   function Token_Data (Unit : Internal_Unit) return Token_Data_Handler_Access
   is (Unit.TDH'Access);

   -------------------
   -- Lookup_Symbol --
   -------------------

   function Lookup_Symbol
     (Context : Internal_Context; Symbol : Text_Type) return Symbol_Type
   is
      Canon_Symbol : constant Symbolization_Result :=
            Create_Symbol (Symbol)
      ;
   begin
      if Canon_Symbol.Success then
         return To_Symbol
           (Context.Symbols, Find (Context.Symbols, Canon_Symbol.Symbol));
      else
         raise Invalid_Symbol_Error with Image (Canon_Symbol.Error_Message);
      end if;
   end Lookup_Symbol;

   -------------------------
   -- Create_Special_Unit --
   -------------------------

   function Create_Special_Unit
     (Context             : Internal_Context;
      Normalized_Filename : Virtual_File;
      Charset             : String;
      Rule                : Grammar_Rule) return Internal_Unit
   is
      Unit : Internal_Unit := new Analysis_Unit_Type'
        (Context                      => Context,
         Is_Internal                  => False,
         Ast_Root                     => null,
         Filename                     => Normalized_Filename,
         Charset                      => To_Unbounded_String (Charset),
         TDH                          => <>,
         Diagnostics                  => <>,
         Rule                         => Rule,
         Ast_Mem_Pool                 => No_Pool,
         Destroyables                 => Destroyable_Vectors.Empty_Vector,
         Referenced_Units             => <>,
         Exiled_Entries               => Exiled_Entry_Vectors.Empty_Vector,
         Foreign_Nodes                =>
            Foreign_Node_Entry_Vectors.Empty_Vector,
         Exiled_Entries_In_NED        =>
            Exiled_Entry_In_NED_Vectors.Empty_Vector,
         Exiled_Envs                  => Exiled_Env_Vectors.Empty_Vector,
         Named_Envs                   => Named_Env_Vectors.Empty_Vector,
         Nodes_With_Foreign_Env       => <>,
         Rebindings                   => Env_Rebindings_Vectors.Empty_Vector,
         Cache_Version                => <>,
         Unit_Version                 => <>,
         Memoization_Map            => <>,
         others => <>
      );
   begin
      Initialize
        (Unit.TDH, Context.Symbols, Unit.all'Address, Context.Tab_Stop);
      return Unit;
   end Create_Special_Unit;

   --------------------
   -- Templates_Unit --
   --------------------

   function Templates_Unit (Context : Internal_Context) return Internal_Unit is
   begin
      if Context.Templates_Unit = No_Analysis_Unit then
         Context.Templates_Unit := Create_Special_Unit
           (Context             => Context,
            Normalized_Filename => No_File,
            Charset             => Default_Charset,
            Rule                => Main_Rule_Rule);
      end if;
      return Context.Templates_Unit;
   end Templates_Unit;

   --------------
   -- Set_Rule --
   --------------

   procedure Set_Rule (Unit : Internal_Unit; Rule : Grammar_Rule) is
   begin
      Unit.Rule := Rule;
   end Set_Rule;

   ------------------------------
   -- Normalized_Unit_Filename --
   ------------------------------

   function Normalized_Unit_Filename
     (Context : Internal_Context; Filename : String) return Virtual_File
   is
      use Virtual_File_Maps;
      Key : constant Unbounded_String := To_Unbounded_String (Filename);
      Cur : Cursor := Context.Filenames.Find (Key);
   begin
      if Cur = No_Element then
         declare
            F : constant Virtual_File := Create
              (Create_From_Base (+Filename).Full_Name,
               Normalize => True);
         begin
            Context.Filenames.Insert (Key, F);
            return F;
         end;
      else
         return Element (Cur);
      end if;
   end Normalized_Unit_Filename;

   --------------------------
   -- Register_Destroyable --
   --------------------------

   procedure Register_Destroyable_Helper
     (Unit    : Internal_Unit;
      Object  : System.Address;
      Destroy : Destroy_Procedure)
   is
   begin
      Destroyable_Vectors.Append (Unit.Destroyables, (Object, Destroy));
   end Register_Destroyable_Helper;

   --------------------------
   -- Register_Destroyable --
   --------------------------

   procedure Register_Destroyable
     (Unit : Internal_Unit; Node : Bare_Lkt_Node)
   is
      procedure Helper is new Register_Destroyable_Gen
        (Root_Node_Record,
         Bare_Lkt_Node,
         Destroy_Synthetic_Node);
   begin
      Helper (Unit, Node);
   end Register_Destroyable;

   --------------------------
   -- Register_Destroyable --
   --------------------------

   procedure Register_Destroyable
     (Unit : Internal_Unit; Env : AST_Envs.Lexical_Env_Access)
   is
      procedure Helper is new Register_Destroyable_Gen
        (AST_Envs.Lexical_Env_Record, AST_Envs.Lexical_Env_Access, Destroy);
   begin
      Helper (Unit, Env);
   end Register_Destroyable;

   -----------------------
   -- Invalidate_Caches --
   -----------------------

   procedure Invalidate_Caches
     (Context : Internal_Context; Invalidate_Envs : Boolean) is
   begin
      --  Increase Context's version number. If we are about to overflow, reset
      --  all version numbers from analysis units.
      if Context.Cache_Version = Version_Number'Last then
         Context.Cache_Version := 1;
         for Unit of Context.Units loop
            Unit.Cache_Version := 0;
         end loop;
      else
         Context.Cache_Version := Context.Cache_Version + 1;
      end if;

      if Invalidate_Envs then
         Context.Reparse_Cache_Version := Context.Cache_Version;
      end if;
   end Invalidate_Caches;

   ------------------
   --  Reset_Envs  --
   ------------------

   procedure Reset_Envs (Unit : Internal_Unit) is

      procedure Deactivate_Refd_Envs (Node : Bare_Lkt_Node);
      procedure Recompute_Refd_Envs (Node : Bare_Lkt_Node);

      --------------------------
      -- Deactivate_Refd_Envs --
      --------------------------

      procedure Deactivate_Refd_Envs (Node : Bare_Lkt_Node) is
      begin
         if Node = null then
            return;
         end if;

         Deactivate_Referenced_Envs (Node.Self_Env);
         for I in 1 .. Children_Count (Node) loop
            Deactivate_Refd_Envs (Child (Node, I));
         end loop;
      end Deactivate_Refd_Envs;

      -------------------------
      -- Recompute_Refd_Envs --
      -------------------------

      procedure Recompute_Refd_Envs (Node : Bare_Lkt_Node) is
      begin
         if Node = null then
            return;
         end if;
         Recompute_Referenced_Envs (Node.Self_Env);
         for I in 1 .. Children_Count (Node) loop
            Recompute_Refd_Envs (Child (Node, I));
         end loop;
      end Recompute_Refd_Envs;

   begin
      --  First pass will deactivate every referenced envs that Unit possesses
      Deactivate_Refd_Envs (Unit.Ast_Root);

      --  Second pass will recompute the env they are pointing to
      Recompute_Refd_Envs (Unit.Ast_Root);
   end Reset_Envs;

   -------------
   -- Destroy --
   -------------

   procedure Destroy (Reparsed : in out Reparsed_Unit) is
   begin
      Free (Reparsed.TDH);
      Reparsed.Diagnostics := Diagnostics_Vectors.Empty_Vector;
      Free (Reparsed.Ast_Mem_Pool);
      Reparsed.Ast_Root := null;
   end Destroy;

   --------------
   -- Basename --
   --------------

   function Basename (Filename : String) return String is
   begin
      return +Create (+Filename).Base_Name;
   end Basename;

   --------------
   -- Basename --
   --------------

   function Basename (Unit : Internal_Unit) return String is
   begin
      return +Unit.Filename.Base_Name;
   end Basename;

   ------------------
   -- Reset_Caches --
   ------------------

   procedure Reset_Caches (Unit : Internal_Unit) is
      Cache_Version : constant Version_Number := Unit.Cache_Version;
   begin
      if Cache_Version < Unit.Context.Reparse_Cache_Version then
         Unit.Cache_Version := Unit.Context.Reparse_Cache_Version;
         Reset_Envs (Unit);
      end if;

      if Cache_Version < Unit.Context.Cache_Version then
         Unit.Cache_Version := Unit.Context.Cache_Version;
            Destroy (Unit.Memoization_Map);
      end if;
   end Reset_Caches;

   --------------------
   -- Reference_Unit --
   --------------------

   procedure Reference_Unit (From, Referenced : Internal_Unit) is
      Dummy : Boolean;
   begin
      Dummy := Analysis_Unit_Sets.Add (From.Referenced_Units, Referenced);
   end Reference_Unit;

   ------------------------
   -- Is_Referenced_From --
   ------------------------

   function Is_Referenced_From
     (Self, Unit : Internal_Unit) return Boolean is
   begin
      if Unit = null or else Self = null then
         return False;
      elsif Unit = Self then
         return True;
      else
         return Analysis_Unit_Sets.Has (Unit.Referenced_Units, Self);
      end if;
   end Is_Referenced_From;

   ----------------
   -- Do_Parsing --
   ----------------

   procedure Do_Parsing
     (Unit   : Internal_Unit;
      Input  : Internal_Lexer_Input;
      Result : out Reparsed_Unit)
   is
      Context  : constant Internal_Context := Unit.Context;
      Unit_TDH : constant Token_Data_Handler_Access := Token_Data (Unit);

      Saved_TDH : aliased Token_Data_Handler;
      --  Holder to save tokens data in Unit.
      --
      --  By design, parsing is required to bind the nodes it creates to an
      --  analysis unit. However, this procedure is supposed to preserve the
      --  Unit itself and return its parsing result in Result.
      --
      --  In order to implement this, we first move "old" token data in this
      --  variable, then we do parsing. Only then, we can move "new" token data
      --  from the unit to Result, and restore the "old" token data to Unit.
      --  This last step is what Rotate_TDH (see below) is above.

      procedure Rotate_TDH;
      --  Move token data from Unit to Result and restore data in Saved_TDH to
      --  Unit.

      ----------------
      -- Rotate_TDH --
      ----------------

      procedure Rotate_TDH is
      begin
         Move (Result.TDH, Unit_TDH.all);
         Move (Unit_TDH.all, Saved_TDH);
      end Rotate_TDH;

   begin
      GNATCOLL.Traces.Trace (Main_Trace, "Parsing unit " & Basename (Unit));

      Result :=
        (Present      => True,
         TDH          => <>,
         Diagnostics  => <>,
         Ast_Mem_Pool => <>,
         Ast_Root     => null);

      Move (Saved_TDH, Unit_TDH.all);
      Initialize (Unit_TDH.all,
                  Saved_TDH.Symbols,
                  Unit.all'Address,
                  Unit.Context.Tab_Stop);

      --  This is where lexing occurs, so this is where we get most "setup"
      --  issues: missing input file, bad charset, etc. If we have such an
      --  error, catch it, turn it into diagnostics and abort parsing.
      --
      --  As it is quite common, first check if the file is readable: if not,
      --  don't bother opening it and directly emit a diagnostic. This avoid
      --  pointless exceptions which harm debugging. Note that this
      --  optimization is valid only when there is no file reader, which can
      --  work even when there is no real source file.

      if Context.File_Reader = null
         and then Input.Kind = File
         and then (Input.Filename.Is_Directory
                   or else (not Input.Filename.Is_Readable))
      then
         declare
            Name : constant String := Basename (Unit);
         begin
            GNATCOLL.Traces.Trace
              (Main_Trace, "WARNING: File is not readable: " & Name);
            Append
              (Result.Diagnostics,
               No_Source_Location_Range,
               "Cannot read " & To_Text (Name));
            Rotate_TDH;
            return;
         end;
      end if;

      --  Initialize the parser, which fetches the source buffer and extract
      --  all tokens.

      declare
         Same_Contents : Boolean;
      begin
         Init_Parser
           (Input,
            Context.With_Trivia,
            Unit,
            Unit_TDH,
            Unit.Context.Parser,
            Saved_TDH'Access,
            Same_Contents);
         if Same_Contents then
            Rotate_TDH;
            Free (Result.TDH);
            Result := (Present => False);
            return;
         end if;
      end;

      --  If we could run the lexer, run the parser and get the root node

      if Unit_TDH.Source_Buffer /= null then
         Result.Ast_Mem_Pool := Create;
         Unit.Context.Parser.Mem_Pool := Result.Ast_Mem_Pool;
         Result.Ast_Root := Bare_Lkt_Node
           (Parse (Unit.Context.Parser, Rule => Unit.Rule));
      end if;

      --  Forward token data and diagnostics to the returned unit

      Rotate_TDH;
      Result.Diagnostics.Append_Vector (Unit.Context.Parser.Diagnostics);
   end Do_Parsing;

   --------------------------
   -- Update_After_Reparse --
   --------------------------

   procedure Update_After_Reparse
     (Unit : Internal_Unit; Reparsed : in out Reparsed_Unit) is
   begin
      --  If reparsing was skipped (same buffer as before), there is nothing to
      --  update.

      if not Reparsed.Present then
         return;
      end if;

      --  Remove the `symbol -> AST node` associations for Unit's nodes in
      --  foreign lexical environments.
      Remove_Exiled_Entries (Unit);

      --  Remove the named envs that Unit created
      declare
         Named_Envs_Needing_Update : NED_Maps.Map;
      begin
         Remove_Named_Envs (Unit, Named_Envs_Needing_Update);
         Update_Named_Envs (Unit.Context, Named_Envs_Needing_Update);
      end;

      --  Explicitly clear the env caches of this unit while it is still fully
      --  alive to make sure that ``Lexical_Env_Cache_Updated`` accesses valid
      --  data. Otherwise the env caches end up being cleared during the call
      --  to ``Destroy_Unit_Destroyables`` where the unit is already partially
      --  destroyed.
      Reset_Envs_Caches (Unit);

      --  At this point, envs and nodes that don't belong to this unit no
      --  longer reference this unit's envs and nodes. It is thus now safe to
      --  deallocate this unit's obsolete data.

      --  Replace Unit's diagnostics by Reparsed's
      Unit.Diagnostics := Reparsed.Diagnostics;
      Reparsed.Diagnostics.Clear;

      --  As (re-)loading a unit can change how any AST node property in the
      --  whole analysis context behaves, we have to invalidate caches. This
      --  is likely overkill, but kill all caches here as it's easy to do.
      --
      --  As an optimization, invalidate env caches only if PLE has run on this
      --  unit (U1) before: if it's the case, then envs in another unit (U2)
      --  may have cached env lookup results that would be different with the
      --  new version of U1.
      Invalidate_Caches
        (Context         => Unit.Context,
         Invalidate_Envs => (for some B of Unit.Env_Populated_Roots => B));

      --  Likewise for token data
      Free (Unit.TDH);
      Move (Unit.TDH, Reparsed.TDH);

      --  Reparsing will invalidate all lexical environments related to this
      --  unit, so destroy all related rebindings as well. This browses AST
      --  nodes, so we have to do this before destroying the old AST nodes
      --  pool.
      Destroy_Rebindings (Unit.Rebindings'Access);

      --  Clear the set of units referenced from that one, as it may no longer
      --  hold in the reparsed unit.
      Analysis_Unit_Sets.Destroy (Unit.Referenced_Units);

      --  Destroy the old AST node and replace it by the new one
      if Unit.Ast_Root /= null then
         Destroy (Unit.Ast_Root);
      end if;
      Unit.Ast_Root := Reparsed.Ast_Root;

      --  Likewise for memory pools
      Free (Unit.Ast_Mem_Pool);
      Unit.Ast_Mem_Pool := Reparsed.Ast_Mem_Pool;
      Reparsed.Ast_Mem_Pool := No_Pool;

      --  Increment unit version number to invalidate caches and stale node
      --  reference. Also propagate it to the TDH.
      Unit.Unit_Version := Unit.Unit_Version + 1;
      Unit.TDH.Version := Unit.Unit_Version;

      --  Compute the PLE_Roots_Starting_Token table

      Unit.PLE_Roots_Starting_Token.Clear;

      --  Update all the lexical envs entries affected by the reparse

      declare
         Unit_Name     : constant String := +Unit.Filename.Base_Name;
         Context       : constant Internal_Context := Unit.Context;
         Foreign_Nodes : Bare_Lkt_Node_Vectors.Vector :=
           Bare_Lkt_Node_Vectors.Empty_Vector;

         Saved_In_Populate_Lexical_Env : constant Boolean :=
           Context.In_Populate_Lexical_Env;
         Saved_Env_Populated_Roots     : constant Boolean_Vectors.Vector :=
           Unit.Env_Populated_Roots;
      begin
         Context.In_Populate_Lexical_Env := True;
         if Main_Trace.Active then
            Main_Trace.Trace
              ("Updating lexical envs for " & Unit_Name & " after reparse");
            Main_Trace.Increase_Indent;
         end if;

         --  Collect all nodes that are foreign in this Unit's lexical envs.
         --  Exclude them from the corresponding lists of exiled entries.
         Extract_Foreign_Nodes (Unit, Foreign_Nodes);

         --  Temporarily reset Env_Populated_Roots so that Populate_Lexical_Env
         --  accepts to do its work on reparsed trees.

         Unit.Env_Populated_Roots := Boolean_Vectors.Empty_Vector;

         --  Now that Unit has been reparsed, we can destroy all its
         --  destroyables, which refer to the old tree (i.e. dangling
         --  pointers).
         Destroy_Unit_Destroyables (Unit);

         for FN of Foreign_Nodes loop
            declare
               Node_Image : constant String := Image (Short_Text_Image (FN));
               Unit_Name  : constant String := +FN.Unit.Filename.Base_Name;
            begin
               GNATCOLL.Traces.Trace
                 (Main_Trace, "Rerooting: " & Node_Image
                              & " (from " & Unit_Name & ")");
            end;
            Reroot_Foreign_Node (FN);
         end loop;
         Foreign_Nodes.Destroy;

         --  Re-populate all PLE roots that were requested so far for this
         --  unit. In the case where the unit has no PLE root, run PLE on the
         --  whole unit iff it was requested on at least one PLE root.

         declare
            function At_Least_One_Root_Populated return Boolean
            is (for some B of Saved_Env_Populated_Roots => B);
         begin
               if At_Least_One_Root_Populated then
                  Populate_Lexical_Env (Unit);
               end if;
         end;

         --  Restore the unit's original Env_Populated_Roots flags

         Unit.Env_Populated_Roots.Destroy;
         Unit.Env_Populated_Roots := Saved_Env_Populated_Roots;

         Context.In_Populate_Lexical_Env := Saved_In_Populate_Lexical_Env;
         if Main_Trace.Is_Active then
            Main_Trace.Decrease_Indent;
         end if;
      end;

      --  Let extension potentially add new diagnostics

      


      --  Make sure they are sorted afterwards for a better user experience

      Sort (Unit.Diagnostics);
   end Update_After_Reparse;

   -------------------------------
   -- Destroy_Unit_Destroyables --
   -------------------------------

   procedure Destroy_Unit_Destroyables (Unit : Internal_Unit) is
   begin
      for D of Unit.Destroyables loop
         D.Destroy (D.Object);
      end loop;
      Destroyable_Vectors.Clear (Unit.Destroyables);
   end Destroy_Unit_Destroyables;

   ---------------------------
   -- Remove_Exiled_Entries --
   ---------------------------

   procedure Remove_Exiled_Entries (Unit : Internal_Unit) is
   begin
      for EE of Unit.Exiled_Entries loop
         AST_Envs.Remove (EE.Env, Thin (EE.Key), EE.Node);

         --  Also strip foreign nodes information from "outer" units so that it
         --  does not contain stale information (i.e. dangling pointers to
         --  nodes that belong to the units in the queue).
         if EE.Env.Owner /= No_Generic_Unit then
            declare
               Foreign_Nodes : Foreign_Node_Entry_Vectors.Vector renames
                  Convert_Unit (EE.Env.Owner).Foreign_Nodes;
               Current       : Positive := Foreign_Nodes.First_Index;
            begin
               while Current <= Foreign_Nodes.Last_Index loop
                  if Foreign_Nodes.Get (Current).Node = EE.Node then
                     Foreign_Nodes.Pop (Current);
                  else
                     Current := Current + 1;
                  end if;
               end loop;
            end;
         end if;
      end loop;

      Unit.Exiled_Entries.Clear;
   end Remove_Exiled_Entries;

   -----------------------
   -- Remove_Named_Envs --
   -----------------------

   procedure Remove_Named_Envs
     (Unit                      : Internal_Unit;
      Named_Envs_Needing_Update : in out NED_Maps.Map) is
   begin
      --  Remove nodes in this unit from the Named_Env_Descriptor.Foreign_Nodes
      --  components in which they are registered and from the foreign
      --  environments themselves.
      for EE of Unit.Exiled_Entries_In_NED loop
         Remove (EE.Named_Env.Foreign_Nodes, EE.Key, EE.Node);
         Remove (EE.Named_Env.Env_With_Precedence, Thin (EE.Key), EE.Node);
      end loop;
      Unit.Exiled_Entries_In_NED.Clear;

      --  Remove nodes in this unit from the
      --  Named_Env_Descriptor.Nodes_With_Foreign_Env components in which they
      --  are registered.
      for Cur in Unit.Nodes_With_Foreign_Env.Iterate loop
         declare
            use Node_To_Named_Env_Maps;
            Node : constant Bare_Lkt_Node := Key (Cur);
            NE   : constant Named_Env_Descriptor_Access := Element (Cur);
         begin
            NE.Nodes_With_Foreign_Env.Delete (Node);
         end;
      end loop;
      Unit.Nodes_With_Foreign_Env.Clear;

      --  Remove ends in this unit from the Named_Env_Descriptor.Foreign_Envs
      --  components in which they are registered.
      for EE of Unit.Exiled_Envs loop
         EE.Named_Env.Foreign_Envs.Delete (Env_Node (EE.Env));
      end loop;
      Unit.Exiled_Envs.Clear;

      --  Remove named envs that this unit created
      for NE of Unit.Named_Envs loop
         declare
            NED_Access : constant Named_Env_Descriptor_Access :=
               Unit.Context.Named_Envs.Element (NE.Name);
            NED        : Named_Env_Descriptor renames NED_Access.all;
         begin
            NED.Envs.Delete (Env_Node (NE.Env));

            --  If this named environment had precedence, we must schedule an
            --  update for this name environment entry.
            if NE.Env = NED.Env_With_Precedence then
               Named_Envs_Needing_Update.Include (NE.Name, NED_Access);
               NED.Env_With_Precedence := Empty_Env;
            end if;
         end;
      end loop;
      Unit.Named_Envs.Clear;
   end Remove_Named_Envs;

   ---------------------------
   -- Extract_Foreign_Nodes --
   ---------------------------

   procedure Extract_Foreign_Nodes
     (Unit          : Internal_Unit;
      Foreign_Nodes : in out Bare_Lkt_Node_Vectors.Vector) is
   begin
      --  Go through all foreign nodes registered in Unit's lexical
      --  environments.
      for FN of Unit.Foreign_Nodes loop
         --  Collect them
         Foreign_Nodes.Append (FN.Node);

         --  For each foreign node, remove the corresponding exiled entry in
         --  that foreign unit (each foreign node in unit A has a corresponding
         --  exiled entry in unit B).
         declare
            Exiled_Entries : Exiled_Entry_Vectors.Vector renames
               FN.Unit.Exiled_Entries;
            Current        : Positive := Exiled_Entries.First_Index;
         begin
            while Current <= Exiled_Entries.Last_Index loop
               if Exiled_Entries.Get (Current).Node = FN.Node then
                  Exiled_Entries.Pop (Current);
               else
                  Current := Current + 1;
               end if;
            end loop;
         end;
      end loop;
      Unit.Foreign_Nodes.Clear;
   end Extract_Foreign_Nodes;

   --------------------------
   -- Reroot_Foreign_Nodes --
   --------------------------

   procedure Reroot_Foreign_Node (Node : Bare_Lkt_Node) is
      Unit : constant Internal_Unit := Node.Unit;
   begin
      --  First, filter the exiled entries in foreign units so that they don't
      --  contain references to this unit's lexical environments.  We need to
      --  do that before running the partial Populate_Lexical_Env pass so that
      --  we don't remove exiled entries that this pass will produce.
      declare
         Exiled_Entries : Exiled_Entry_Vectors.Vector renames
            Unit.Exiled_Entries;
         Current        : Positive := Exiled_Entries.First_Index;
      begin
         while Current <= Exiled_Entries.Last_Index loop
            if Exiled_Entries.Get (Current).Node = Node then
               Exiled_Entries.Pop (Current);
            else
               Current := Current + 1;
            end if;
         end loop;
      end;

      --  Re-do a partial Populate_Lexical_Env pass for each foreign node that
      --  this unit contains so that they are relocated in our new lexical
      --  environments.
      declare
         Unit_State : aliased PLE_Unit_State :=
           (Named_Envs_Needing_Update => <>);
         State      : PLE_Node_State :=
           (Unit_State  => Unit_State'Unchecked_Access,
            Current_Env => Node.Self_Env,
            Current_NED => null);
      begin
         Pre_Env_Actions (Node, State, Add_To_Env_Only => True);
         Post_Env_Actions (Node, State);
      end;
   end Reroot_Foreign_Node;

   ----------
   -- Text --
   ----------

   function Text (Node : Bare_Lkt_Node) return String_Type is
   begin
      return Create_String (Text (Node));
   end Text;

   ------------------------
   -- Destroy_Rebindings --
   ------------------------

   procedure Destroy_Rebindings
     (Rebindings : access Env_Rebindings_Vectors.Vector)
   is
      procedure Recurse (R : in out Env_Rebindings);
      --  Destroy R's children and then destroy R. It is up to the caller to
      --  remove R from its parent's Children vector.

      procedure Unregister
        (R          : Env_Rebindings;
         Rebindings : in out Env_Rebindings_Vectors.Vector);
      --  Remove R from Rebindings

      -------------
      -- Recurse --
      -------------

      procedure Recurse (R : in out Env_Rebindings) is
      begin
         for C of R.Children loop
            declare
               C_Var : Env_Rebindings := C;
            begin
               Recurse (C_Var);
            end;
         end loop;
         R.Children.Destroy;

         Unregister (R, Convert_Unit (R.Old_Env.Owner).Rebindings);
         Unregister (R, Convert_Unit (R.New_Env.Owner).Rebindings);

         Release_Rebinding (R);
      end Recurse;

      ----------------
      -- Unregister --
      ----------------

      procedure Unregister
        (R          : Env_Rebindings;
         Rebindings : in out Env_Rebindings_Vectors.Vector) is
      begin
         for I in 1 .. Rebindings.Length loop
            if Rebindings.Get (I) = R then
               Rebindings.Pop (I);
               return;
            end if;
         end loop;

         --  We are always supposed to find R in Rebindings, so this should be
         --  unreachable.
         raise Program_Error;
      end Unregister;

   begin
      while Rebindings.Length > 0 loop
         declare
            R : Env_Rebindings := Rebindings.Get (1);
         begin
            --  Here, we basically undo what has been done in AST_Envs.Append

            --  If this rebinding has no parent, then during its creation we
            --  registered it in its Old_Env. Otherwise, it is registered
            --  in its Parent's Children list.
            if R.Parent = null then
               Unwrap (R.Old_Env).Rebindings_Pool.Delete (R.New_Env);
            else
               Unregister (R, R.Parent.Children);
            end if;

            --  In all cases it's registered in Old_Env's and New_Env's units
            Recurse (R);
         end;
      end loop;
   end Destroy_Rebindings;

   --------------------------
   -- Get_Rewriting_Handle --
   --------------------------

   function Get_Rewriting_Handle
     (Context : Internal_Context) return Rewriting_Handle_Pointer is
   begin
      return Context.Rewriting_Handle;
   end Get_Rewriting_Handle;

   --------------------------
   -- Set_Rewriting_Handle --
   --------------------------

   procedure Set_Rewriting_Handle
     (Context : Internal_Context; Handle : Rewriting_Handle_Pointer) is
   begin
      Context.Rewriting_Handle := Handle;
   end Set_Rewriting_Handle;

   -----------------------
   -- Create_Safety_Net --
   -----------------------

   function Create_Safety_Net
     (Context : Internal_Context) return Iterator_Safety_Net
   is
   begin
      return (Context         => Context,
              Context_Serial  => Context.Serial_Number,
              Context_Version => Context.Cache_Version);
   end Create_Safety_Net;

   ----------------------
   -- Check_Safety_Net --
   ----------------------

   procedure Check_Safety_Net (Self : Iterator_Safety_Net) is
   begin
      if Self.Context = null then
         return;
      end if;

      --  Check that the context is still the same (not released nor reused)
      if Self.Context.Serial_Number /= Self.Context_Serial
         or else Self.Context.Cache_Version /= Self.Context_Version
      then
         raise Stale_Reference_Error;
      end if;
   end Check_Safety_Net;

   ----------------------
   -- String_To_Symbol --
   ----------------------

   function String_To_Symbol
     (Self    : Bare_Lkt_Node;
      Context : Internal_Context;
      S       : String_Type) return Symbol_Type is
   begin
      return (if S.Length > 0
              then Lookup_Symbol (Context, S.Content)
              else No_Symbol);
   exception
      when Exc : Invalid_Symbol_Error =>
         Raise_Property_Exception
           (Self,
            Property_Error'Identity,
            Ada.Exceptions.Exception_Message (Exc));
   end String_To_Symbol;

   -------------
   -- Inc_Ref --
   -------------

   procedure Inc_Ref (Self : String_Type) is
   begin
      if Self.Ref_Count >= 0 then
         Self.Ref_Count := Self.Ref_Count + 1;
      end if;
   end Inc_Ref;

   -------------
   -- Dec_Ref --
   -------------

   procedure Dec_Ref (Self : in out String_Type) is
   begin
      if Self = null or else Self.Ref_Count < 0 then
         return;
      end if;

      if Self.Ref_Count = 1 then
         Free (Self);
      else
         Self.Ref_Count := Self.Ref_Count - 1;
         Self := null;
      end if;
   end Dec_Ref;

   -------------------
   -- Create_String --
   -------------------

   function Create_String (Content : Text_Type) return String_Type is
   begin
      return Result : constant String_Type := new String_Record'
        (Length    => Content'Length,
         Ref_Count => 1,
         Content   => Content);
   end Create_String;

   -------------------
   -- Create_String --
   -------------------

   function Create_String (Content : Unbounded_Text_Type) return String_Type is
      S : Big_Wide_Wide_String_Access;
      L : Natural;
   begin
      Get_Wide_Wide_String (Content, S, L);
      return Create_String (S.all (1 .. L));
   end Create_String;

   -------------------
   -- Concat_String --
   -------------------

   function Concat_String (Left, Right : String_Type) return String_Type is
   begin
      return Result : constant String_Type :=
        new String_Record (Length => Left.Length + Right.Length)
      do
         Result.Ref_Count := 1;
         Result.Content (1 .. Left.Length) := Left.Content;
         Result.Content (Left.Length + 1 .. Result.Length) := Right.Content;
      end return;
   end Concat_String;

   ----------------
   -- Equivalent --
   ----------------

   function Equivalent (Left, Right : String_Type) return Boolean is
   begin
      return Left.Content = Right.Content;
   end Equivalent;

begin
   No_Big_Integer.Value.Set (0);
end Liblktlang.Implementation;
