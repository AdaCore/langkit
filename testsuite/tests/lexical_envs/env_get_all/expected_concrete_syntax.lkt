grammar None_grammar {
    main_rule <- list*(insert)
    ident <- Id(@Identifier)
    insert <- Insert(@Def ident ident)

}

class FooNode {

    public fun env_get_all (): Array[Entity[FooNode]] =
    self.children_env.get(null)

    memoized fun make_id (s : SymbolType): FooNode = new SynthId(sym=s)

    fun unique_id (s : SymbolType): FooNode = self.unit.root.make_id(s)
}

"""
List of Insert.
"""
class ASTList[Insert] : FooNodeBaseList {
}

class ASTList[Insert] : ASTList[Insert] {
}

class Id : FooNode {
}

class Insert : FooNode {
    parse field sym : Id
    parse field node : Id
}

class SynthId : FooNode {
    field sym : SymbolType

    public fun get_sym (): Array[CharacterType] = self.sym.image
}
