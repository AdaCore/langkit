import lexer_example
grammar foo_grammar {
    @main_rule main_rule <- list+(or(Literal(@number) | Identifier(@identifier)))

}

@abstract class FooNode implements Node {
}

@abstract class RootNode : FooNode {
    var : LogicVar

    fun xref_eq (arg1 : FooNode, arg2 : FooNode): LogicEquation

    @export fun solve_eq (arg1 : FooNode, arg2 : FooNode): Bool =
    node.xref_eq(arg1, arg2).solve()
}

class Identifier : RootNode implements TokenNode {

    fun xref_eq (arg1 : FooNode, arg2 : FooNode): LogicEquation =
    %domain(node.var, [node])
}

class Literal : RootNode implements TokenNode {

    fun is_eq (other : Literal): Bool = node.as_entity = other

    fun xref_eq (arg1 : FooNode, arg2 : FooNode): LogicEquation =
    (%domain(node.var, [arg1])) and (
        %eq(node.var, arg2, eq_prop=BareLiteral.is_eq)
    )
}
