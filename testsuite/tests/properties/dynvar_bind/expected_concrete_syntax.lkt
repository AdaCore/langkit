@spacing(alphanumericals, alphanumericals)
lexer foo_lexer {

    whitespace <- p"[ \n\r\t]+"

    family alphanumericals {
        def <- "def"
    }

    var <- "var"

    family alphanumericals {
        error <- "error"
        example <- "example"
        null_tok <- "null"
    }

    comma <- ","
    dot <- "."
    semicolon <- ";"
    l_par <- "("
    r_par <- ")"
    l_brace <- "{"
    r_brace <- "}"
    equal <- "="
    plus <- "+"
    minus <- "-"
    less_than <- "<"

    family alphanumericals {
        number <- p"[0-9]+"
        @symbol identifier <- p"[a-zA-Z_][a-zA-Z0-9_]*"
    }

    string <- p"\"[^\"]*\""
    @newline_after comment <- p"#(.?)+"
}
grammar foo_grammar {
    @main_rule main_rule <- ASTList[Decl]+(decl)
    decl <- Decl(
        Name(@identifier) "(" ASTList[Ref]*(ref) ")"
    )
    ref <- Ref(Name(@identifier))

}

@root_node class FooNode {
}

class Decl : FooNode {
    @parse_field name : Name
    @parse_field refs : ASTList[Ref]
}

class Name : FooNode {
}

class Ref : FooNode {
    @parse_field name : Name

    @export fun resolve (): FooNode = {
        bind env = node.parent.parent.node_env;

        env.get(node.name.symbol)?(0)
    }
}

struct EnvAssoc {
    key : SymbolType
    value : FooNode
    dest_env : LexicalEnv
    metadata : Metadata
}
