grammar None_grammar {
    name <- Name(@Identifier)
    vars <- ("{" list*(var) "}")
    main_rule <- list*(block)
    param <- Param(name)
    params <- ("(" list*(param) ")")
    var <- BlockVar(name)
    block <- Block(params name vars)

}

@abstract class FooNode {
}

@abstract class DefNode : FooNode {

    @export fun name (): SymbolType
}

class Block : DefNode {
    @parse_field params : Params
    @parse_field name_field : Name
    @parse_field vars : ASTList[BlockVar]

    fun name (): SymbolType = self.name_field.symbol

    @export fun rebind (from_block : Entity[Block], to_block : Entity[Block]): Entity[Block] =
    {
        val rbdng = entity.info.rebindings.append_rebinding(
            from_block.params.children_env, to_block.children_env
        );
        val e_info = EntityInfo(
            md=entity.info.md, from_rebound=false, rebindings=rbdng
        );

        Entity[Block](info=e_info, node=self)
    }

    @export fun parent_rebindings (): Entity[Block] = {
        val e_info = EntityInfo(
            md=entity.info.md, from_rebound=false, rebindings=entity.info.rebindings.get_parent
        );

        Entity[Block](info=e_info, node=self)
    }

    @export fun new (): Entity[FooNode] =
    entity.info.rebindings.new_env.env_node.as_bare_entity

    @export fun old (): Entity[FooNode] =
    entity.info.rebindings.new_env.env_node.as_bare_entity
}

class BlockVar : DefNode {
    @parse_field name_field : Name

    fun name (): SymbolType = self.name_field.symbol
}

class Param : DefNode {
    @parse_field name_field : Name

    fun name (): SymbolType = self.name_field.symbol
}

class Params : ASTList[Param] {
}

class Name : FooNode {
}
