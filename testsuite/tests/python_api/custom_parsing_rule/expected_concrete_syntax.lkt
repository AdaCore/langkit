@spacing(alphanumericals, alphanumericals)
lexer foo_lexer {

    whitespace <- p"[ \n\r\t]+"

    family alphanumericals {
        def <- "def"
    }

    var <- "var"

    family alphanumericals {
        error <- "error"
        example <- "example"
        null_tok <- "null"
    }

    comma <- ","
    dot <- "."
    semicolon <- ";"
    l_par <- "("
    r_par <- ")"
    l_brace <- "{"
    r_brace <- "}"
    equal <- "="
    plus <- "+"
    minus <- "-"
    less_than <- "<"

    family alphanumericals {
        number <- p"[0-9]+"
        @symbol identifier <- p"[a-zA-Z_][a-zA-Z0-9_]*"
    }

    string <- p"\"[^\"]*\""
    @newline_after comment <- p"#(.?)+"
}
grammar foo_grammar {
    @main_rule main_rule <- ASTList[Def]+(def_rule)
    name <- Name(@identifier)
    def_rule <- Def(
        "def"
        name ?pick("(" ASTList[Name]+(name, ",") ")") "=" expr
    )
    expr <- or(
        | Plus(expr "+" expr)
        | ParentExpr("(" expr ")")
        | Ref(name)
        | Literal(@number)
    )

}

@root_node class FooNode {
}

class Def : FooNode {
    @parse_field name : Name
    @parse_field args : ASTList[Name]
    @parse_field expr : Expr
}

@abstract class Expr : FooNode {
}

class Literal : Expr {
}

class ParentExpr : Expr {
    @parse_field expr : Expr
}

class Plus : Expr {
    @parse_field lhs : Expr
    @parse_field rhs : Expr
}

class Ref : Expr {
    @parse_field name : Name
}

class Name : FooNode {
}
