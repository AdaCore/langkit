import lexer_example

@with_lexer(foo_lexer)
grammar foo_grammar {
    @main_rule main_rule <- list+(decl)
    decl <- Decl(HasPlus("+") name "(" ref_list ")")
    ref_list <- list*(ref)
    ref <- Ref(name)
    name <- Name(@identifier)

}

@abstract class FooNode implements Node[FooNode] {
}

class Decl : FooNode {
    @parse_field has_plus: HasPlus
    @parse_field name: Name
    @parse_field items: ASTList[FooNode, Ref]

    @export @trace fun entity_items(): Array[Ref] =
    node.as_entity.items.map((i) => i)
}

@qualifier enum class HasPlus : FooNode {
}

class Name : FooNode implements TokenNode {
}

class Ref : FooNode {
    @parse_field name: Name
}
