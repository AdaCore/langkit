# V328-009: libgnarl has memory leaks when pragma Interrupt_State (SIGSEGV,
# System) is active.
{
   GNAT tasking runtime
   Memcheck:Leak
   ...
   fun:system__interrupts___elabs
   fun:langkit_sigsegv_handlerinit
   ...
}
{
   GNAT tasking runtime
   Memcheck:Leak
   ...
   fun:system__interrupts___elabb
   fun:langkit_sigsegv_handlerinit
   ...
}

{
   allocate_n implementation is supposed to free the allocated pointer itself
   Memcheck:Leak
   fun:calloc
   fun:ctypes_allocate
   fun:camlCtypes_memory__allocate_n_*
   ...
}
{
   false positives with camlForeign
   Memcheck:Leak
   fun:malloc
   ...
   fun:caml_stat_alloc
   fun:ctypes_prep_callspec
   ...
}
{
   false positives with camlForeign
   Memcheck:Leak
   fun:malloc
   ...
   fun:caml_stat_resize
   fun:ctypes_add_argument
   ...
}
{
   false positives with camlForeign
   Memcheck:Leak
   fun:realloc
   ...
   fun:caml_stat_resize
   fun:ctypes_add_argument
   ...
}
{
   false positives with caml mutex
   Memcheck:Leak
   fun:malloc
   ...
   fun:caml_mutex_new
   ...
}
{
   false positives with caml thread
   Memcheck:Leak
   fun:malloc
   fun:caml_thread_new_descriptor
   fun:caml_thread_initialize
   ...
}
{
   false positives with caml thread
   Memcheck:Leak
   fun:malloc
   fun:st_event_create
   fun:caml_threadstatus_new
   fun:caml_thread_new_descriptor
   fun:caml_thread_initialize
   ...
}
{
   caml is managing the memory, suppress caml_alloc_for_heap calls
   Memcheck:Leak
   fun:malloc
   fun:caml_stat_alloc_aligned_noexc
   fun:caml_alloc_for_heap
   ...
}
{
   false positives in caml startup code
   Memcheck:Leak
   fun:malloc
   fun:caml_stat_alloc*
   fun:caml_init_atom_table
   fun:init_static
   ...
}
{
   caml startup specific issues
   Memcheck:Param
   sigaltstack(ss)
   fun:sigaltstack
   fun:caml_stop_stack_overflow_detection
   fun:caml_terminate_signals
   fun:caml_startup_common
   fun:caml_startup_exn
   fun:caml_startup
   fun:caml_main
   fun:main
}
{
   caml sys_exit specific issues
   Memcheck:Param
   sigaltstack(ss)
   fun:sigaltstack
   fun:caml_stop_stack_overflow_detection
   fun:caml_terminate_signals
   fun:caml_sys_exit
   fun:main
}

# On Ubuntu 24.04, the OCaml testcase exhibits memory leaks during the
# elaboration of some shared libraries. The precise cause is unknown, but these
# leaks do not really matter.
{
   Ubuntu 24.04 dlinit leaks
   Memcheck:Leak
   ...
   fun:call_init.part.0
   fun:call_init
   fun:_dl_init
   fun:_dl_catch_exception
   fun:dl_open_worker
   ...
}
{
   Ubuntu 24.04 dl-tls leak
   Memcheck:Leak
   match-leak-kinds: possible
   fun:malloc
   fun:malloc
   fun:allocate_dtv_entry
   fun:allocate_and_init
   fun:tls_get_addr_tail
   fun:__tls_get_addr
   ...
}
