grammar None_grammar {
    decl <- Decl(@Def name)
    main_rule <- RootNode(list*(or(decl | subdecl | other_decl), @Semicolon))
    other_decl <- OtherDecl(@Def @Var name)
    name <- Name(@Identifier)
    subdecl <- SubDecl(@Var name)

}

class FooNode {
}

class BaseDecl : FooNode {

    public fun lookup (n : SymbolType): Entity[FooNode] = self.env_lookup(self.node_env, n)

    fun env_lookup (env : LexicalEnv, n : SymbolType): Entity[FooNode] = env.get(n, only_first=true)
}

class Decl : BaseDecl {
    parse field name : Name
}

class SubDecl : Decl {
}

class OtherDecl : BaseDecl {
    parse field name : Name
}

"""
List of BaseDecl.
"""
class ASTList[BaseDecl] : FooNodeBaseList {
}

class Name : FooNode {
}

class RootNode : FooNode {
    parse field decls : ASTList[BaseDecl]
}
