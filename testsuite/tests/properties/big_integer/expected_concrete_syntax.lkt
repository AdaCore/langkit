import lexer_example

@with_lexer(foo_lexer)
grammar foo_grammar {
    @main_rule main_rule <- list+(decl)
    decl <- Decl("def" name "=" expr)
    name <- Identifier(@identifier)
    expr <- or(BinOp(expr op term) | term)
    term <- or(ParenExpr("(" expr ")") | atom)
    op <- or(
        | OpKind.Plus("+")
        | OpKind.Minus("-")
        | OpKind.Equal("=")
        | OpKind.LessThan("<")
        | OpKind.LessThanOrEqual("<=")
        | OpKind.GreaterThan(">")
        | OpKind.GreaterThanOrEqual(">=")
    )
    atom <- literal
    literal <- Literal(@number)
}

@abstract class FooNode implements Node[FooNode] {
    @export fun identity(value: BigInt): BigInt = value

    @export fun check_big_literal(): BigInt =
    99999999999999999999999999999999999999999999b

    fun to_int(b: Bool): BigInt = if b then 1b else 0b
}

class Decl: FooNode {
    @parse_field name: Identifier
    @parse_field expr_tree: Expr
}

@abstract class Expr: FooNode {
    @export @abstract fun evaluate(): BigInt

    @export fun evaluate_as_int(): Int = node.evaluate().as_int()
}

class BinOp: Expr {
    @parse_field left: Expr
    @parse_field op: OpKind
    @parse_field right: Expr

    fun evaluate(): BigInt = {
        val left = node.left.evaluate();
        val right = node.right.evaluate();

        match node.op {
            case _: OpKind.Plus => left + right
            case _: OpKind.Minus => left - right
            case _: OpKind.Equal => node.to_int(left == right)
            case _: OpKind.LessThan => node.to_int(left < right)
            case _: OpKind.LessThanOrEqual => node.to_int(left <= right)
            case _: OpKind.GreaterThan => node.to_int(left > right)
            case _: OpKind.GreaterThanOrEqual => node.to_int(left >= right)
        }
    }
}

class Literal: Expr implements TokenNode {
    @external() fun evaluate(): BigInt
}

class ParenExpr: Expr {
    @parse_field expr: Expr

    fun evaluate(): BigInt = node.expr.evaluate()
}

class Identifier: FooNode implements TokenNode {
}

enum class OpKind: FooNode {
    case Plus,
    Minus,
    Equal, LessThan, LessThanOrEqual, GreaterThan, GreaterThanOrEqual
}
