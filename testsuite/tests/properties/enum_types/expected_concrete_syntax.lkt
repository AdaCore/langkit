grammar FooGrammar {
    decl <- or(
        | VarDecl("def" name "=" expr)
        | FuncDecl(
            "def" name "(" list*(name, ",") ")" "=" expr
        )
    )
    main_rule <- list*(decl ";")
    expr <- or(Plus(atom "+" expr) | atom)
    name <- Name(@Identifier)
    atom <- or(Literal(@Number) | name)

}

@root_node class FooNode {

    @export fun identity (k : DeclKind): DeclKind = k
}

@abstract class Decl : FooNode {

    @export fun decl_kind (): DeclKind
}

class FuncDecl : Decl {
    @parse_field name : Name
    @parse_field args : ASTList[Name]
    @parse_field expr : Expression

    fun decl_kind (): DeclKind = DeclKind.Func
}

class VarDecl : Decl {
    @parse_field name : Name
    @parse_field expr : Expression

    fun decl_kind (): DeclKind = DeclKind.Var
}

@abstract class Expression : FooNode {
}

class Literal : Expression {
}

class Name : Expression {
}

class Plus : Expression {
    @parse_field left : Expression
    @parse_field right : Expression
}
