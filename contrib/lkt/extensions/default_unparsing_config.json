{
  "node_configs": {
    "AnyOf": {
      "node": {
        "kind": "group",
        "document": [
          {"kind": "recurse_field", "field": "f_expr"},
          "whitespace",
          {"kind": "text", "text": "in"},
          "whitespace",

          {
            "kind": "indent",
            "contents": {
              "kind": "group",
              "document": {"kind": "recurse_field", "field": "f_values"}
            }
          }
        ]
      }
    },
    "AnyOfList": {
      "sep": ["line", "recurse", "whitespace"]
    },
    "ArrayLiteral": {
      "fields": {
        "f_exprs": {
          "kind": "group",
          "document": [
            {
              "kind": "indent", "contents": [
                "softline",
                {"kind": "group", "document": "recurse"}
              ]
            },
            "softline"
          ]
        },
        "f_element_type": [
          {"kind": "text", "text": ":"},
          "whitespace",
          "recurse"
        ]
      }
    },
    "BaseCallExpr": {
      "node": {
        "kind": "group", "document": "recurse"
      },
      "fields": {
        "f_name": {
          "kind": "group",
          "document": {
            "kind": "recurse_flatten",
            "if": ["BaseDotExpr", "KeepExpr", "CastExpr", "CallExpr"]
          }
        },
        "f_args": {
          "kind": "ifEmpty",
          "then": "recurse",
          "else": {
            "kind": "group",
            "document": [
              {
                "kind": "indent",
                "contents": ["softline", "recurse"]
              },
              "softline"
            ]
          }
        }
      }
    },
    "BaseDotExpr": {
      "node": {
        "kind": "group", "document": "recurse"
      },
      "fields": {
        "f_prefix": [
          {
            "kind": "recurse_flatten",
            "if": ["BaseDotExpr", "KeepExpr", "CastExpr", "CallExpr"]
          },
          "softline"
        ]
      }
    },
    "BaseLexerCaseRuleAlt": {},
    "BaseLexerCaseRuleAltList": {
      "sep": ["recurse", "hardline"]
    },
    "BigNumLit": {},
    "BinOp": {
      "node": {
        "kind": "group",
        "document": [
           {"kind": "recurse_field", "field": "f_left"},
           "line",
           {"kind": "recurse_field", "field": "f_op"},
           "whitespace",
           {"kind": "recurse_field", "field": "f_right"}
        ]
      }
    },
    "BlockDeclList": {
      "sep": [{"kind": "group", "document": "recurse"}, "hardline"]
    },
    "BlockExpr": {
      "node": [
         {"kind": "text", "text": "{"},
         {
           "kind": "indent",
           "contents": [
             "hardline",
             {"kind": "recurse_field", "field": "f_val_defs"},
             {"kind": "text", "text": ";"},
             "hardline",
             "flushLineBreaks",
             {
               "kind": "group",
               "document": {"kind": "recurse_field", "field": "f_expr"}
             }
           ]
         },
         "hardline",
         {"kind": "text", "text": "}"}
      ]
    },
    "BlockStringLine": {},
    "BlockStringLineList": {},
    "BlockStringLit": {},
    "CallExprList": {
      "sep": ["recurse", "hardline"]
    },
    "CastExpr": {
      "node": {
        "kind": "group", "document": "recurse"
      },
      "fields": {
        "f_expr": [
          {
            "kind": "recurse_flatten",
            "if": ["BaseDotExpr", "KeepExpr", "CastExpr", "CallExpr"]
          },
          "softline"
        ]
      }
    },
    "CharLit": {},
    "ClassDecl": {
      "node": [
         {"kind": "text", "text": "class"},
         {"kind": "recurse_field", "field": "f_syn_name"},
         {"kind": "recurse_field", "field": "f_syn_base_type"},
         {"kind": "recurse_field", "field": "f_traits"},
         "whitespace",
         {"kind": "text", "text": "{"},
         {"kind": "recurse_field", "field": "f_decls"},
         {"kind": "text", "text": "}"}
      ],
      "fields": {
        "f_syn_base_type": [
         {"kind": "text", "text": ":"},
         "whitespace",
         "recurse"
        ],
        "f_decls": [
          {
            "kind": "ifEmpty",
            "then": ["hardline", "recurse"],
            "else": [
              {"kind": "indent", "contents": ["hardline", "recurse"]},
              "hardline"
            ]
          }
        ]
      }
    },
    "ClassQualifier": {},
    "DeclAnnotation": {
      "node": ["recurse", "hardline"]
    },
    "DeclAnnotationList": {},
    "DeclAnnotationParams": {
      "fields": {
        "f_params": {
          "kind": "group",
          "document": [
            {
              "kind": "indent",
              "contents": [
                "softline",
                {"kind": "group", "document": "recurse"}
              ]
            },
            "softline"
          ]
        }
      }
    },
    "DefId": {},
    "DefaultListTypeRef": {},
    "DynVarDecl": {
      "fields": {
        "f_decl_type": ["whitespace", "recurse"]
      }
    },
    "ElsifBranch": {
      "node": [
        "hardline",
        {"kind": "text", "text": "elif"},
        "whitespace",
        {"kind": "recurse_field", "field": "f_cond_expr"},
        {
          "kind": "group",
          "document": [
            "line",
            {"kind": "text", "text": "then"},
            "whitespace",
            {"kind": "recurse_field", "field": "f_then_expr"}
          ]
        }
      ],
      "fields": {
        "f_cond_expr": {
          "kind": "ifKind",
          "matchers": [
            {"kind": ["BlockExpr", "ParenExpr"], "document": "recurse"}
          ],
          "default": {
            "kind": "group",
            "document": {"kind": "indent", "contents": ["softline", "recurse"]}
          }
        },
        "f_then_expr": {
          "kind": "ifKind",
          "matchers": [
            {"kind": ["BlockExpr", "ParenExpr"], "document": "recurse"}
          ],
          "default": {
            "kind": "group",
            "document": {"kind": "indent", "contents": ["softline", "recurse"]}
          }
        }
      }
    },
    "ElsifBranchList": {
      "flush_before_children": false
    },
    "EnumClassAltDecl": {},
    "EnumClassAltDeclList": {
      "sep": ["recurse", "line"]
    },
    "EnumClassCase": {
      "node": [
        {"kind": "text", "text": "case"},
        {
          "kind": "group",
          "document": [
            {
              "kind": "indent",
              "contents": [
                "line",
                {"kind": "recurse_field", "field": "f_decls"}
              ]
            }
          ]
        }
      ]
    },
    "EnumClassCaseList": {
      "sep": ["recurse", "hardline"]
    },
    "EnumClassDecl": {
      "node": [
         {"kind": "text", "text": "enum"},
         {"kind": "text", "text": "class"},
         {"kind": "recurse_field", "field": "f_syn_name"},
         {"kind": "recurse_field", "field": "f_syn_base_type"},
         {"kind": "recurse_field", "field": "f_traits"},
         "whitespace",
         {"kind": "text", "text": "{"},
         {
           "kind": "indent",
           "contents": [
             {"kind": "recurse_field", "field": "f_branches"},
             {"kind": "recurse_field", "field": "f_decls"}
           ]
         },
         "hardline",
         {"kind": "text", "text": "}"}
      ],
      "fields": {
        "f_syn_base_type": [
         {"kind": "text", "text": ":"},
         "whitespace",
         "recurse"
        ],
        "f_branches": {
          "kind": "ifEmpty",
          "then": ["recurse"],
          "else": ["hardline", "recurse"]
        },
        "f_decls": {
          "kind": "ifEmpty",
          "then": ["recurse"],
          "else": ["hardline", "recurse"]
        }
      }
    },
    "EnumLitDecl": {},
    "EnumLitDeclList": {
      "sep": ["recurse", "line"]
    },
    "EnumTypeDecl": {
      "node": [
         {"kind": "text", "text": "enum"},
         {"kind": "recurse_field", "field": "f_syn_name"},
         {"kind": "recurse_field", "field": "f_traits"},
         "whitespace",
         {"kind": "text", "text": "{"},
         {
           "kind": "indent",
           "contents": [
             "hardline",
             {"kind": "text", "text": "case"},
             {
               "kind": "group",
               "document": {
                 "kind": "indent",
                 "contents": [
                   "line",
                   {"kind": "recurse_field", "field": "f_literals"}
                 ]
               }
             },
             {"kind": "recurse_field", "field": "f_decls"}
           ]
         },
         "hardline",
         {"kind": "text", "text": "}"}
      ],
      "fields": {
        "f_decls": {
          "kind": "ifEmpty",
          "then": ["recurse"],
          "else": ["hardline", "recurse"]
        }
      }
    },
    "EnvSpecDecl": {
      "fields": {
        "f_syn_name": ["recurse", "whitespace"],
        "f_actions": [
          {
            "kind": "indent",
            "contents": [
              {"kind": "ifEmpty", "then": [], "else": "hardline"},
              "recurse"
            ]
          },
          "hardline"
        ]
      }
    },
    "ErrorOnNull": {},
    "ExcludesNull": {},
    "ExprList": {
      "sep": ["recurse", "line"]
    },
    "FieldDecl": {
      "node": [
        {"kind": "recurse_field", "field": "f_syn_name"},
        {"kind": "text", "text": ":"},
        "whitespace",
        {"kind": "recurse_field", "field": "f_decl_type"},
        {"kind": "recurse_field", "field": "f_default_val"}
      ],
      "fields": {
        "f_default_val": [
          "whitespace",
          {"kind": "text", "text": "="},
          {
            "kind": "ifKind",
            "matchers": [
              {"kind": "BlockExpr", "document": ["whitespace", "recurse"]},
              {"kind": "ParenExpr", "document": ["whitespace", "recurse"]}
            ],
            "default": {
              "kind": "group",
              "document": {"kind": "indent", "contents": ["line", "recurse"]}
            }
          }
        ]
      }
    },
    "FullDecl": {},
    "FullDeclList": {
      "sep": ["recurse", "hardline"]
    },
    "FunArgDecl": {
      "node": [
        {"kind": "recurse_field", "field": "f_decl_annotations"},
        {"kind": "recurse_field", "field": "f_syn_name"},
        {"kind": "text", "text": ":"},
        "whitespace",
        {"kind": "recurse_field", "field": "f_decl_type"},
        {"kind": "recurse_field", "field": "f_default_val"}
      ],
      "fields": {
        "f_default_val": [
          "whitespace",
          {"kind": "text", "text": "="},
          {
            "kind": "group",
            "document": {"kind": "indent", "contents": ["line", "recurse"]}
          }
        ]
      }
    },
    "FunArgDeclList": {
      "sep": ["recurse", "line"]
    },
    "FunDecl": {
      "node": [
        {"kind": "text", "text": "fun"},
        {"kind": "recurse_field", "field": "f_syn_name"},
        {"kind": "text", "text": "("},
        {
          "kind": "group",
          "document": [
            {
              "kind": "indent",
              "contents": [
                "softline",
                {"kind": "recurse_field", "field": "f_args"}
              ]
            },
            "softline"
          ]
        },
        {"kind": "text", "text": ")"},
        {"kind": "text", "text": ":"},
        "whitespace",
        {"kind": "recurse_field", "field": "f_return_type"},
        {"kind": "recurse_field", "field": "f_body"}
      ],
      "fields": {
        "f_body": [
         "whitespace",
         {
           "kind": "ifKind",
           "matchers": [
             {
               "kind": ["BlockExpr", "MatchExpr"],
               "document": [
                 {"kind": "text", "text": "="},
                 "whitespace",
                 "recurse"
               ]
             }
           ],
           "default": {
             "kind": "group",
             "document": [
               {
                 "kind": "indent",
                 "contents": [
                   {"kind": "text", "text": "="},
                   "line",
                   "recurse"
                 ]
               }
             ]
           }
         }
        ]
      }
    },
    "FunctionTypeRef": {},
    "GenericDecl": {
      "node": [
        {"kind": "text", "text": "generic"},
        {"kind": "text", "text": "["},
        {
          "kind": "group",
          "document": [
            {
              "kind": "indent",
              "contents": [
                "softline",
                {"kind": "recurse_field", "field": "f_generic_formal_decls"}
              ]
            },
            "softline"
          ]
        },
        {"kind": "text", "text": "]"},
        "hardline",
        {"kind": "recurse_field", "field": "f_decl"}
      ]
    },
    "GenericFormalDeclList": {
      "sep": ["recurse", "line"]
    },
    "GenericFormalTypeDecl": {},
    "GenericInstantiation": {},
    "GenericTypeRef": {},
    "GrammarCut": {},
    "GrammarDecl": {
      "node": [
        {"kind": "text", "text": "grammar"},
        {"kind": "recurse_field", "field": "f_syn_name"},
        "whitespace",
        {"kind": "text", "text": "{"},
        {"kind": "recurse_field", "field": "f_rules"},
        {"kind": "text", "text": "}"}
      ],
      "fields": {
        "f_rules": [
          {
            "kind": "ifEmpty",
            "then": ["hardline", "recurse"],
            "else": [
              {"kind": "indent", "contents": ["hardline", "recurse"]},
              "hardline"
            ]
          }
        ]
      }
    },
    "GrammarDiscard": {
      "fields": {
        "f_expr": {
          "kind": "group",
          "document": [
            {
              "kind": "indent",
              "contents": ["softline", "recurse"]
            },
            "softline"
          ]
        }
      }
    },
    "GrammarDontSkip": {},
    "GrammarExprList": {
      "sep": ["recurse", "line"]
    },
    "GrammarExprListList": {
      "sep": ["line", "recurse", "whitespace"],
      "leading_sep": ["recurse", "whitespace"]
    },
    "GrammarImplicitPick": {
      "fields": {
        "f_exprs": "recurse"
      }
    },
    "GrammarList": {
      "node": [
        {"kind": "recurse_field", "field": "f_list_type"},
        {"kind": "recurse_field", "field": "f_kind"},
        {"kind": "text", "text": "("},
        {
          "kind": "group",
          "document": [
            {
              "kind": "indent",
              "contents": [
                "softline",
                {"kind": "recurse_field", "field": "f_expr"},
                {"kind": "recurse_field", "field": "f_sep"}
              ]
            },
            "softline"
          ]
        },
        {"kind": "text", "text": ")"}
      ],
      "fields": {
        "f_sep": [
          {"kind": "text", "text": ","},
          "line",
          "recurse"
        ]
      }
    },
    "GrammarListSep": {
      "fields": {
        "f_extra": [
          {"kind": "text", "text": ","},
          "line",
          "recurse"
        ]
      }
    },
    "GrammarNull": {},
    "GrammarOpt": {},
    "GrammarOptError": {},
    "GrammarOptErrorGroup": {
      "fields": {
        "f_expr": {
          "kind": "group",
          "document": [
            {
              "kind": "indent",
              "contents": ["softline", "recurse"]
            },
            "softline"
          ]
        }
      }
    },
    "GrammarOptGroup": {
      "fields": {
        "f_expr": {
          "kind": "group",
          "document": [
            {
              "kind": "indent",
              "contents": ["softline", "recurse"]
            },
            "softline"
          ]
        }
      }
    },
    "GrammarOrExpr": {
      "fields": {
        "f_sub_exprs": {
          "kind": "group",
          "document": [
            {
              "kind": "indent",
              "contents": ["softline", "recurse"]
            },
            "softline"
          ]
        }
      }
    },
    "GrammarPick": {
      "fields": {
        "f_exprs": {
          "kind": "group",
          "document": [
            {
              "kind": "indent",
              "contents": ["softline", "recurse"]
            },
            "softline"
          ]
        }
      }
    },
    "GrammarPredicate": {
      "node": [
         {"kind": "recurse_field", "field": "f_expr"},
         "whitespace",
         {"kind": "text", "text": "|>"},
         "whitespace",
         {"kind": "text", "text": "when"},
         {"kind": "text", "text": "("},
         {"kind": "recurse_field", "field": "f_prop_ref"},
         {"kind": "text", "text": ")"}
      ]
    },
    "GrammarRuleDecl": {
      "fields": {
        "f_expr": [
           "whitespace",
           {"kind": "text", "text": "<-"},
           "whitespace",
           "recurse"
        ]
      }
    },
    "GrammarRuleRef": {},
    "GrammarSkip": {},
    "GrammarStopCut": {
      "fields": {
        "f_expr": {
          "kind": "group",
          "document": [
            {
              "kind": "indent",
              "contents": ["softline", "recurse"]
            },
            "softline"
          ]
        }
      }
    },
    "Id": {},
    "IfExpr": {
      "node": {
        "kind": "group",
        "document": [
          {
            "kind": "group",
            "document": [
              {"kind": "text", "text": "if"},
              "whitespace",
              {"kind": "recurse_field", "field": "f_cond_expr"},
              "line",
              {"kind": "text", "text": "then"},
              "whitespace",
              {"kind": "recurse_field", "field": "f_then_expr"}
            ]
          },

          {
            "kind": "group",
            "document": [
              {"kind": "recurse_field", "field": "f_alternatives"}
            ]
          },

          "line",
          {
            "kind": "group",
            "document": [
              {"kind": "text", "text": "else"},
              "whitespace",
              {"kind": "recurse_field", "field": "f_else_expr"}
            ]
          }
        ]
      },
      "fields": {
        "f_cond_expr": {
          "kind": "ifKind",
          "matchers": [
            {"kind": ["BlockExpr", "ParenExpr"], "document": "recurse"}
          ],
          "default": {
            "kind": "group",
            "document": {"kind": "indent", "contents": ["softline", "recurse"]}
          }
        },
        "f_else_expr": {
          "kind": "ifKind",
          "matchers": [
            {"kind": ["BlockExpr", "ParenExpr"], "document": "recurse"}
          ],
          "default": {
            "kind": "group",
            "document": {"kind": "indent", "contents": ["softline", "recurse"]}
          }
        },
        "f_then_expr": {
          "kind": "ifKind",
          "matchers": [
            {"kind": ["BlockExpr", "ParenExpr"], "document": "recurse"}
          ],
          "default": {
            "kind": "group",
            "document": {"kind": "indent", "contents": ["softline", "recurse"]}
          }
        }
      }
    },
    "Import": {
      "node": ["recurse", "hardline"]
    },
    "ImportList": {},
    "Isa": {
      "node": {
        "kind": "group",
        "document": [
          {"kind": "recurse_field", "field": "f_expr"},
          "whitespace",
          {"kind": "text", "text": "is"},
          "whitespace",
          {"kind": "recurse_field", "field": "f_dest_type"}
        ]
      }
    },
    "IsaList": {
      "sep": ["line", "recurse", "whitespace"]
    },
    "KeepExpr": {
      "fields": {
        "f_expr": [
          {
            "kind": "recurse_flatten",
            "if": ["BaseDotExpr", "KeepExpr", "CastExpr", "CallExpr"]
          },
          "softline"
        ]
      }
    },
    "LambdaArgDecl": {
      "fields": {
        "f_decl_type": [
          {"kind": "text", "text": ":"},
          "whitespace",
          "recurse"
        ],
        "f_default_val": [
          "whitespace",
          {"kind": "text", "text": "="},
          "whitespace",
          "recurse"
        ]
      }
    },
    "LambdaArgDeclList": {
      "sep": ["recurse", "line"]
    },
    "LambdaExpr": {
      "node": [
        {"kind": "text", "text": "("},
        {"kind": "recurse_field", "field": "f_params"},
        {"kind": "text", "text": ")"},
        {"kind": "recurse_field", "field": "f_return_type"},
        "whitespace",
        {
          "kind": "group",
          "id": "comments",
          "document": [
            {"kind": "text", "text": "=>"},
            "flushLineBreaks"
          ],
          "bubbleUpTrailingTrivias": false
        },
        {
          "kind": "ifKind",
          "field": "f_body",
          "matchers": [
            {
              "kind": "BlockExpr",
              "document": [
                {
                  "kind": "ifBreak",
                  "groupId": "comments",
                  "breakContents": [],
                  "flatContents": "whitespace"
                },
                {"kind": "recurse_field", "field": "f_body"}
              ]
            }
          ],
          "default": {
            "kind": "group",
            "document": [
              {
                "kind": "ifBreak",
                "groupId": "comments",
                "breakContents": [],
                "flatContents": "line"
              },
              {"kind": "recurse_field", "field": "f_body"}
            ]
          }
        }
      ],
      "fields": {
        "f_params": {
          "kind": "group",
          "document": [
            {
              "kind": "indent",
              "contents": ["softline", "recurse"]
            },
            "softline"
          ]
        },
        "f_return_type": [
          {"kind": "text", "text": ":"},
          "whitespace",
          "recurse"
        ]
      }
    },
    "LangkitRoot": {
      "fields": {
        "f_imports": [
          "recurse",
          {"kind": "ifEmpty", "then": [], "else": "hardline"}
        ]
      }
    },
    "LexerCaseRule": {
      "node": [
         {"kind": "text", "text": "match"},
         {"kind": "recurse_field", "field": "f_expr"},
         "whitespace",
         {"kind": "text", "text": "{"},
         {"kind": "recurse_field", "field": "f_alts"},
         {"kind": "text", "text": "}"}
      ],
      "fields": {
        "f_alts": [
          {"kind": "indent", "contents": ["hardline", "recurse"]},
          "hardline"
        ]
      }
    },
    "LexerCaseRuleSend": {
      "fields": {
        "f_match_size": ["whitespace", "recurse"]
      }
    },
    "LexerDecl": {
      "node": [
         {"kind": "text", "text": "lexer"},
         {"kind": "recurse_field", "field": "f_syn_name"},
         "whitespace",
         {"kind": "text", "text": "{"},
         {"kind": "recurse_field", "field": "f_rules"},
         {"kind": "text", "text": "}"}
      ],
      "fields": {
        "f_rules": [
          {
            "kind": "ifEmpty",
            "then": ["hardline", "recurse"],
            "else": [
              {"kind": "indent", "contents": ["hardline", "recurse"]},
              "hardline"
            ]
          }
        ]
      }
    },
    "LexerFamilyDecl": {
      "node": [
         {"kind": "text", "text": "family"},
         {"kind": "recurse_field", "field": "f_syn_name"},
         "whitespace",
         {"kind": "text", "text": "{"},
         {"kind": "recurse_field", "field": "f_rules"},
         {"kind": "text", "text": "}"}
      ],
      "fields": {
        "f_rules": [
          {
            "kind": "ifEmpty",
            "then": ["hardline", "recurse"],
            "else": [
              {"kind": "indent", "contents": ["hardline", "recurse"]},
              "hardline"
            ]
          }
        ]
      }
    },
    "ListKind": {},
    "LktNodeList": {
      "sep": ["recurse", "hardline"]
    },
    "LogicAssign": {
      "node": {
        "kind": "group",
        "document": [
          {"kind": "recurse_field", "field": "f_dest_var"},
          "line",
          {"kind": "text", "text": "<-"},
          "whitespace",
          {"kind": "recurse_field", "field": "f_value"}
        ]
      }
    },
    "LogicExpr": {},
    "LogicPredicate": {},
    "LogicPropagate": {
      "node": {
        "kind": "group",
        "document": [
          {"kind": "recurse_field", "field": "f_dest_var"},
          "line",
          {"kind": "text", "text": "<-"},
          "whitespace",
          {"kind": "recurse_field", "field": "f_call"}
        ]
      }
    },
    "LogicUnify": {
      "node": {
        "kind": "group",
        "document": [
          {"kind": "recurse_field", "field": "f_lhs"},
          "line",
          {"kind": "text", "text": "<->"},
          "whitespace",
          {"kind": "recurse_field", "field": "f_rhs"}
        ]
      }
    },
    "MatchBranch": {
      "node": [
        {"kind": "text", "text": "case"},
        "whitespace",
        {"kind": "recurse_field", "field": "f_decl"},
        "whitespace",
        {"kind": "text", "text": "=>"},
        {
          "kind": "group",
          "document": {
            "kind": "indent",
            "contents": [
              "line",
              {"kind": "recurse_field", "field": "f_expr"}
            ]
          }
        }
      ]
    },
    "MatchBranchList": {
      "sep": ["recurse", "hardline"]
    },
    "MatchExpr": {
      "node": [
        {"kind": "text", "text": "match"},
        {
          "kind": "group",
          "document": [
            {
              "kind": "indent",
              "contents": [
                "line",
                {"kind": "recurse_field", "field": "f_match_expr"}
              ]
            },
            "line"
          ]
        },
        {"kind": "text", "text": "{"},
        {
          "kind": "indent",
          "contents": [
            "hardline",
            {"kind": "recurse_field", "field": "f_branches"}
          ]
        },
        "hardline",
        {"kind": "text", "text": "}"}
      ]
    },
    "MatchValDecl": {
      "fields": {
        "f_decl_type": ["whitespace", "recurse"]
      }
    },
    "ModuleRefId": {},
    "NotExpr": {
      "fields": {
        "f_expr": {
          "kind": "group",
          "document": ["whitespace", "recurse"]
        }
      }
    },
    "NullLit": {},
    "NumLit": {},
    "Op": {},
    "Param": {},
    "ParamList": {
      "sep": ["recurse", "line"]
    },
    "ParenExpr": {
      "node": {
        "kind": "group",
        "document": [
          {
              "kind": "indent",
              "contents": [
                  {"kind": "text", "text": "("},
                  "softline",
                  {
                  "kind": "group",
                  "document": {"kind": "recurse_field", "field": "f_expr"}
                  }
              ]
          },
          "softline",
          {"kind": "text", "text": ")"}
        ]
      }
    },
    "ParseNodeExpr": {
      "fields": {
        "f_sub_exprs": {
          "kind": "group",
          "document": [
            {
              "kind": "indent",
              "contents": [
                "softline",
                {"kind": "group", "document": "recurse"}
              ]
            },
            "softline"
          ]
        }
      }
    },
    "RaiseExpr": {
      "fields": {
        "f_except_expr": ["whitespace", "recurse"]
      }
    },
    "RefId": {},
    "RefIdList": {},
    "SimpleTypeRef": {},
    "SingleLineStringLit": {},
    "StructDecl": {
      "node": [
         {"kind": "text", "text": "struct"},
         {"kind": "recurse_field", "field": "f_syn_name"},
         {"kind": "recurse_field", "field": "f_traits"},
         "whitespace",
         {"kind": "text", "text": "{"},
         {"kind": "recurse_field", "field": "f_decls"},
         {"kind": "text", "text": "}"}
      ],
      "fields": {
        "f_decls": [
          {
            "kind": "ifEmpty",
            "then": ["hardline", "recurse"],
            "else": [
              {"kind": "indent", "contents": ["hardline", "recurse"]},
              "hardline"
            ]
          }
        ]
      }
    },
    "SubscriptExpr": {
      "node": {"kind": "group", "document": "recurse"},
      "fields": {
        "f_index": [
          {"kind": "indent", "contents": ["softline", "recurse"]},
          "softline"
        ]
      }
    },
    "TokenLit": {},
    "TokenNoCaseLit": {},
    "TokenPatternLit": {},
    "TokenRef": {},
    "TraitDecl": {
      "node": [
        {"kind": "text", "text": "trait"},
        {"kind": "recurse_field", "field": "f_syn_name"},
        "whitespace",
        {"kind": "text", "text": "{"},
        {"kind": "recurse_field", "field": "f_decls"},
        {"kind": "text", "text": "}"}
      ],
      "fields": {
        "f_decls": [
          {
            "kind": "ifEmpty",
            "then": ["hardline", "recurse"],
            "else": [
              {"kind": "indent", "contents": ["hardline", "recurse"]},
              "hardline"
            ]
          }
        ]
      }
    },
    "TryExpr": {
      "node": {
        "kind": "group",
        "document": [
          {
            "kind": "group",
            "document": [
               {"kind": "text", "text": "try"},
               "whitespace",
               {"kind": "recurse_field", "field": "f_try_expr"}
            ]
          },
          {
            "kind": "ifKind",
            "field": "f_or_expr",
            "matchers": [],
            "default": [
              "line",
              {
                "kind": "group",
                "document": {"kind": "recurse_field", "field": "f_or_expr"}
              }
            ],
            "absent": {"kind": "recurse_field", "field": "f_or_expr"}
          }
        ]
      }
    },
    "TypeRefList": {
      "sep": ["recurse", "whitespace"]
    },
    "UnOp": {},
    "ValDecl": {
      "node": {
        "kind": "group",
        "document": [
          {"kind": "text", "text": "val"},
          {"kind": "recurse_field", "field": "f_syn_name"},
          {"kind": "recurse_field", "field": "f_decl_type"},
          "whitespace",
          {"kind": "text", "text": "="},
          {
            "kind": "ifKind",
            "field": "f_val",
            "__TODO__": [
              "All matchers below are wrapped in a group in order to",
              "workaround #838"
            ],
            "matchers": [
              {
                "kind": ["BlockExpr", "ParenExpr", "MatchExpr"],
                "document": [
                  "whitespace",
                  {"kind": "recurse_field", "field": "f_val"}
                 ]
              }
            ],
            "default": {
              "kind": "indent",
              "contents": ["line", {"kind": "recurse_field", "field": "f_val"}]
            }
          }
        ]
      },
      "fields": {
         "f_decl_type": [
           {"kind": "text", "text": ":"},
           "whitespace",
           "recurse"
         ]
      }
    },
    "VarBind": {
      "node": {
        "kind": "group",
        "document": [
          {"kind": "text", "text": "bind"},
          {"kind": "recurse_field", "field": "f_name"},
          "whitespace",
          {"kind": "text", "text": "="},
          {
            "kind": "indent",
            "contents": [
              "line",
              {"kind": "recurse_field", "field": "f_expr"}
            ]
          }
        ]
      }
    }
  }
}
