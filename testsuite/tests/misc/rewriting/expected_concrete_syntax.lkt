grammar FooGrammar {
    @main_rule main_rule <- list+(def_rule)
    name <- Name(@Identifier)
    def_rule <- Def(
        "def" name ?"(" list*(name, ",") ")" "=" expr
    )
    expr <- or(
        | Plus(expr "+" expr)
        | ParenExpr("(" expr ")")
        | Ref(name)
        | Literal(@Number)
    )

}

@root_node class FooNode {
}

class Def : FooNode {
    @parse_field name : Name
    @parse_field args : ASTList[Name]
    @parse_field expr : Expr
}

@abstract class Expr : FooNode {
}

class Literal : Expr {
}

class ParenExpr : Expr {
    @parse_field expr : Expr
}

class Plus : Expr {
    @parse_field lhs : Expr
    @parse_field rhs : Expr
}

class Ref : Expr {
    @parse_field name : Name
}

class Name : FooNode {
}
