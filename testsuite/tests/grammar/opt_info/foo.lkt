import lexer_example

@with_lexer(foo_lexer)
grammar foo_grammar {
    @main_rule main_rule <- or(rule_1 | rule_2)

    rule_1 <- ExampleWrapper(
        ?Example("example")
        or(Example("example") | null(Example))
        sub_rule
        null(Example)
        ?(Example("example")).dont_skip(sub_rule)

        HasExample(Example("example"))
        Example("example")
    )

    rule_2 <- ExampleWrapper(
        Example("example")
        Example("example")
        Example("example")
        Example("example")
        Example("example")

        HasExample("example")
        Example("example")
    )

    sub_rule <- ?Example("example")
}

class FooNode implements Node[FooNode] {
}

class Example : FooNode {
}

class ExampleWrapper : FooNode {
    # Optional fields
    @parse_field field_opt: Example
    @parse_field field_or: Example
    @parse_field field_defer: Example
    @parse_field field_null: Example
    @parse_field field_dont_skip: Example

    # Non optional fields
    @parse_field field_opt_bool: HasExample
    @parse_field field_transform: Example
}

@qualifier enum class HasExample : FooNode {
}
