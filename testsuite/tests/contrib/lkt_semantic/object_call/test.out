Resolving test.lkt
==================
Id   <RefId "Int" test.lkt:4:15-4:18>
     references <StructDecl prelude: "Int">

Id   <RefId "Array" test.lkt:4:21-4:26>
     references <GenericDecl prelude: "Array">

Id   <RefId "Int" test.lkt:4:27-4:30>
     references <StructDecl prelude: "Int">

Id   <RefId "Int" test.lkt:5:8-5:11>
     references <StructDecl prelude: "Int">

Id   <RefId "arr" test.lkt:5:14-5:17>
     references <FunDecl "arr" test.lkt:4:1-4:31>

Expr <RefId "arr" test.lkt:5:14-5:17>
     has type <FunctionType prelude: "(Int) -> Array[Int]">

Expr <NumLit test.lkt:5:18-5:20>
     has type <StructDecl prelude: "Int">

Expr <CallExpr test.lkt:5:14-5:21>
     has type <InstantiatedGenericType prelude: "Array[Int]">

Expr <NumLit test.lkt:5:22-5:23>
     has type <StructDecl prelude: "Int">

Expr <CallExpr test.lkt:5:14-5:24>
     has type <StructDecl prelude: "Int">

Id   <RefId "Int" test.lkt:7:32-7:35>
     references <StructDecl prelude: "Int">

Id   <RefId "arr" test.lkt:7:38-7:41>
     references <FunDecl "arr" test.lkt:4:1-4:31>

Expr <RefId "arr" test.lkt:7:38-7:41>
     has type <FunctionType prelude: "(Int) -> Array[Int]">

Expr <NumLit test.lkt:7:42-7:44>
     has type <StructDecl prelude: "Int">

Expr <CallExpr test.lkt:7:38-7:45>
     has type <InstantiatedGenericType prelude: "Array[Int]">

test.lkt:7:46: error: Mismatched types: expected `Int`, got a string literal
6 | @incorrect val incorrect_call: Int = arr(12)("a")
  |                                              ^^^ 

Expr <CallExpr test.lkt:7:38-7:50>
     has type <StructDecl prelude: "Int">

Id   <RefId "Int" test.lkt:8:34-8:37>
     references <StructDecl prelude: "Int">

test.lkt:8:40: error: No value for parameter
7 | @incorrect val incorrect_call_1: Int = arr(12)()
  |                                        ^^^^^^^^^

Id   <RefId "arr" test.lkt:8:40-8:43>
     references <FunDecl "arr" test.lkt:4:1-4:31>

Expr <RefId "arr" test.lkt:8:40-8:43>
     has type <FunctionType prelude: "(Int) -> Array[Int]">

Expr <NumLit test.lkt:8:44-8:46>
     has type <StructDecl prelude: "Int">

Expr <CallExpr test.lkt:8:40-8:47>
     has type <InstantiatedGenericType prelude: "Array[Int]">

Expr <CallExpr test.lkt:8:40-8:49>
     has type <StructDecl prelude: "Int">

Id   <RefId "Int" test.lkt:9:34-9:37>
     references <StructDecl prelude: "Int">

test.lkt:9:51: error: Unmatched actual
8 | @incorrect val incorrect_call_2: Int = arr(12)(1, 2)
  |                                                   ^ 

Id   <RefId "arr" test.lkt:9:40-9:43>
     references <FunDecl "arr" test.lkt:4:1-4:31>

Expr <RefId "arr" test.lkt:9:40-9:43>
     has type <FunctionType prelude: "(Int) -> Array[Int]">

Expr <NumLit test.lkt:9:44-9:46>
     has type <StructDecl prelude: "Int">

Expr <CallExpr test.lkt:9:40-9:47>
     has type <InstantiatedGenericType prelude: "Array[Int]">

Expr <NumLit test.lkt:9:48-9:49>
     has type <StructDecl prelude: "Int">

test.lkt:9:51: error: ambiguous type for expression
8 | @incorrect val incorrect_call_2: Int = arr(12)(1, 2)
  |                                                   ^ 

Expr <CallExpr test.lkt:9:40-9:53>
     has type <StructDecl prelude: "Int">

Id   <RefId "Int" test.lkt:11:21-11:24>
     references <StructDecl prelude: "Int">

Id   <RefId "Int" test.lkt:11:26-11:29>
     references <StructDecl prelude: "Int">

Id   <RefId "Int" test.lkt:11:34-11:37>
     references <StructDecl prelude: "Int">

Id   <RefId "Int" test.lkt:13:8-13:11>
     references <StructDecl prelude: "Int">

Id   <RefId "return_func" test.lkt:13:14-13:25>
     references <FunDecl "return_func" test.lkt:11:1-11:37>

Expr <RefId "return_func" test.lkt:13:14-13:25>
     has type <FunctionType prelude: "() -> (Int, Int) -> Int">

Expr <CallExpr test.lkt:13:14-13:27>
     has type <FunctionType prelude: "(Int, Int) -> Int">

Expr <NumLit test.lkt:13:28-13:29>
     has type <StructDecl prelude: "Int">

Expr <NumLit test.lkt:13:31-13:32>
     has type <StructDecl prelude: "Int">

Expr <CallExpr test.lkt:13:14-13:33>
     has type <StructDecl prelude: "Int">

Id   <RefId "Int" test.lkt:14:19-14:22>
     references <StructDecl prelude: "Int">

Id   <RefId "return_func" test.lkt:14:25-14:36>
     references <FunDecl "return_func" test.lkt:11:1-11:37>

Expr <RefId "return_func" test.lkt:14:25-14:36>
     has type <FunctionType prelude: "() -> (Int, Int) -> Int">

Expr <CallExpr test.lkt:14:25-14:38>
     has type <FunctionType prelude: "(Int, Int) -> Int">

Expr <NumLit test.lkt:14:39-14:40>
     has type <StructDecl prelude: "Int">

test.lkt:14:42: error: Mismatched types: expected `Int`, got a character literal
13 | @incorrect val b: Int = return_func()(1, '2')
   |                                          ^^^ 

Expr <CallExpr test.lkt:14:25-14:46>
     has type <StructDecl prelude: "Int">

