@spacing(alphanumericals, alphanumericals)
lexer foo_lexer {

    whitespace <- p"[ \n\r\t]+"

    family alphanumericals {
        def <- "def"
    }

    var <- "var"

    family alphanumericals {
        error <- "error"
        example <- "example"
        null_tok <- "null"
    }

    comma <- ","
    dot <- "."
    semicolon <- ";"
    l_par <- "("
    r_par <- ")"
    l_brace <- "{"
    r_brace <- "}"
    equal <- "="
    plus <- "+"
    minus <- "-"
    less_than <- "<"

    family alphanumericals {
        number <- p"[0-9]+"
        @symbol identifier <- p"[a-zA-Z_][a-zA-Z0-9_]*"
    }

    string <- p"\"[^\"]*\""
    @newline_after comment <- p"#(.?)+"
}
grammar foo_grammar {
    @main_rule main_rule <- item
    item <- or(couple | literal)
    couple <- Couple("(" item "," item ")")
    literal <- Literal(@number)

}

@root_node class FooNode {

    @export fun first_set (): Boolean = self.info.md.is_first

    @export fun second_set (): Boolean = self.info.md.is_second

    @export fun test_main (): FooNode =
    node.as_entity.to[Couple].first_entity.first
}

class Couple : FooNode {
    @parse_field first : FooNode
    @parse_field second : FooNode

    fun first_entity (): Couple =
    node.as_entity.get_entity(Metadata(is_first=true, is_second=false))

    fun get_entity (md : Metadata): Couple = Couple(
        info=EntityInfo(
            md=md, from_rebound=false, rebindings=null
        ), node=node
    )

    @export fun property_on_entity (): Couple =
    # Check that we can do ".get_entity" even when the prefix is an entity
    node.as_entity.get_entity(node.as_entity.info.md)
}

class Literal : FooNode {
}
