grammar FooGrammar {
    newline <- Newline(@Newline)
    expr <- or(call | identifier | indented)
    identifier <- Identifier(@Identifier)
    call <- Call(
        identifier
        "("
        discard(list*(newline))
        list*(call, ",") discard(list*(newline)) ")"
    )
    indented <- Indented(
        discard(list*(newline))
        @Indent
        list+(discard(list*(newline))
        expr discard(list*(newline)), @Newline) @Dedent
    )
    def_node <- Def("def" identifier @Newline list+(indented))
    @main_rule main_rule <- list+(discard(list*(newline))
    def_node discard(list*(newline)))

}

@root_node class FooNode {
}

class Call : FooNode {
    @parse_field name : Identifier
    @parse_field args : ASTList[Call]
}

class Def : FooNode {
    @parse_field name : Identifier
    @parse_field stmts : ASTList[Indented]
}

class Identifier : FooNode {
}

class Indented : FooNode {
    @parse_field inner : ASTList[FooNode]
}

class Newline : FooNode {
}
