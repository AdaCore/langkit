import lexer_example

@with_lexer(foo_lexer)
grammar foo_grammar {
    @main_rule main_rule <- or(
        | ExampleNode("example")
        | NodeType1("def")
        | NodeType2(";")
    )
}

|" Root node class for Test AST nodes.
@abstract class TestNode implements Node[TestNode] {
}

|" Example node.
|"
|" Second line.
class ExampleNode: TestNode {
    |" docstring.
    @export fun test_no_var(): Int = # hello
    42

    @export fun prop_inline(): Int = 43

    @export fun prop_lambda(x: Int): Int = # identity
    # yep
    x

    @export fun test_cond(x: Int): Int = # incredible function
    # case 0
    if (x == 0) then (
        # identity
        x
    )
    # case 1
    elif (x == 1) then (
        # increment
        x + 1
    )
    # otherwise double
    else (x + x)

    @export fun test_if(): Int = {
        # define x
        # let's see... maybe 24?
        val x = 24;

        # call foo
        # no way!
        if true then (
            # haha
            # second
            if false then (
                # nope
                12
            ) else (
                # finally!
                node.test_cond(
                    # arg
                    x
                )
            )
        ) else (
            # hoho
            24
        )
    }

    @export fun test_match(): Int = match node {
        # first case
        case x: NodeType1 => 0

        # node type 2!
        case y: NodeType2 => 1

        # well otherwise...
        case _ => 2
    }

    @export fun test_let(): Int = # let it go!!!
    # where is this comment?
    {
        # define x
        val x = 42;
        # define y
        val y = 24;

        # compute
        x + y
    }

    @export fun test_bool_binops(x: Bool, y: Bool): Bool = (
        # hehe
        (
            (
                # hoho
                x and (
                    # hihi
                    y
                )
            ) and x
        ) or x
    ) and (
        # wow
        x or (
            x in
                # True
                true
                # False
                | false

        )
    )
}

class NodeType1: ExampleNode {
}

class NodeType2: ExampleNode {
}
