Resolving test.lkt
==================
Id   <RefId "A" test.lkt:2:21-2:22>
     references <ClassDecl "A" test.lkt:1:12-26:2>

Id   <RefId "self" test.lkt:2:25-2:29>
     references <SelfDecl "self" test.lkt:1:12-26:2>

Expr <RefId "self" test.lkt:2:25-2:29>
     has type <ClassDecl "A" test.lkt:1:12-26:2>

Id   <RefId "Int" test.lkt:4:21-4:24>
     references <StructDecl "Int" __prelude:1:10-1:23>

Expr <NumLit test.lkt:4:27-4:29>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "A" test.lkt:6:29-6:30>
     references <ClassDecl "A" test.lkt:1:12-26:2>

test.lkt:6:33: error: Mismatched types: expected `A`, got a number literal
5 |     fun test_int_invalid(): A = 12
  |                                 ^^

Id   <RefId "Int" test.lkt:8:25-8:28>
     references <StructDecl "Int" __prelude:1:10-1:23>

Expr <NumLit test.lkt:8:31-8:33>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Expr <NumLit test.lkt:8:36-8:38>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Expr <BinOp test.lkt:8:31-8:38>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "Int" test.lkt:10:35-10:38>
     references <StructDecl "Int" __prelude:1:10-1:23>

test.lkt:10:41: error: Mismatched types: expected `Int`, got a string literal
 9 |     fun test_int_add_invalid_1(): Int = "12" + 15
   |                                         ^^^^     

Expr <NumLit test.lkt:10:48-10:50>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Expr <BinOp test.lkt:10:41-10:50>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "Int" test.lkt:12:35-12:38>
     references <StructDecl "Int" __prelude:1:10-1:23>

Expr <NumLit test.lkt:12:41-12:43>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "self" test.lkt:12:46-12:50>
     references <SelfDecl "self" test.lkt:1:12-26:2>

test.lkt:12:46: error: Mismatched types: expected `Int`, got `A`
11 |     fun test_int_add_invalid_2(): Int = 15 + self
   |                                              ^^^^

Expr <BinOp test.lkt:12:41-12:50>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "A" test.lkt:14:35-14:36>
     references <ClassDecl "A" test.lkt:1:12-26:2>

test.lkt:14:39: error: Mismatched types: expected `A`, got a number literal
13 |     fun test_int_add_invalid_3(): A = 15 + self
   |                                       ^^       

Id   <RefId "self" test.lkt:14:44-14:48>
     references <SelfDecl "self" test.lkt:1:12-26:2>

Expr <RefId "self" test.lkt:14:44-14:48>
     has type <ClassDecl "A" test.lkt:1:12-26:2>

Expr <BinOp test.lkt:14:39-14:48>
     has type <ClassDecl "A" test.lkt:1:12-26:2>

Id   <RefId "Regexp" test.lkt:16:26-16:32>
     references <StructDecl "Regexp" __prelude:5:10-5:26>

Expr <StringLit test.lkt:16:35-16:43>
     has type <StructDecl "Regexp" __prelude:5:10-5:26>

Id   <RefId "Regexp" test.lkt:18:26-18:32>
     references <StructDecl "Regexp" __prelude:5:10-5:26>

Expr <StringLit test.lkt:19:18-19:26>
     has type <StructDecl "Regexp" __prelude:5:10-5:26>

Id   <RefId "rg" test.lkt:20:9-20:11>
     references <ValDecl "rg" test.lkt:19:9-19:26>

Expr <RefId "rg" test.lkt:20:9-20:11>
     has type <StructDecl "Regexp" __prelude:5:10-5:26>

Expr <BlockExpr test.lkt:18:35-21:6>
     has type <StructDecl "Regexp" __prelude:5:10-5:26>

Id   <RefId "Int" test.lkt:23:22-23:25>
     references <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "true" test.lkt:23:31-23:35>
     references <EnumLitDecl "true" __prelude:6:28-6:32>

Expr <RefId "true" test.lkt:23:31-23:35>
     has type <EnumTypeDecl "Bool" __prelude:6:10-6:36>

Expr <NumLit test.lkt:23:41-23:42>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Expr <NumLit test.lkt:23:48-23:49>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Expr <IfExpr test.lkt:23:28-23:49>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "Int" test.lkt:25:30-25:33>
     references <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "true" test.lkt:25:39-25:43>
     references <EnumLitDecl "true" __prelude:6:28-6:32>

Expr <RefId "true" test.lkt:25:39-25:43>
     has type <EnumTypeDecl "Bool" __prelude:6:10-6:36>

Expr <NumLit test.lkt:25:49-25:50>
     has type <StructDecl "Int" __prelude:1:10-1:23>

test.lkt:25:56: error: Mismatched types: expected `Int`, got a string literal
24 |     fun test_if_invalid_1(): Int = if true then 1 else "2"
   |                                                        ^^^

Expr <IfExpr test.lkt:25:36-25:59>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "C" test.lkt:29:9-29:10>
     references <GenericFormalTypeDecl "C" test.lkt:28:10-28:11>

Id   <RefId "C" test.lkt:30:9-30:10>
     references <GenericFormalTypeDecl "C" test.lkt:28:10-28:11>

Id   <RefId "C" test.lkt:34:9-34:10>
     references <GenericFormalTypeDecl "C" test.lkt:33:10-33:11>

Id   <RefId "D" test.lkt:35:9-35:10>
     references <GenericFormalTypeDecl "D" test.lkt:33:13-33:14>

Id   <RefId "C" test.lkt:37:17-37:18>
     references <GenericFormalTypeDecl "C" test.lkt:33:10-33:11>

Id   <RefId "A" test.lkt:40:11-40:12>
     references <ClassDecl "A" test.lkt:1:12-26:2>

Id   <RefId "Pair" test.lkt:41:37-41:41>
     references <GenericDecl "Pair" test.lkt:28:1-31:2>

Id   <RefId "Int" test.lkt:41:42-41:45>
     references <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "Pair" test.lkt:41:49-41:53>
     references <GenericDecl "Pair" test.lkt:28:1-31:2>

Id   <RefId "Int" test.lkt:41:54-41:57>
     references <StructDecl "Int" __prelude:1:10-1:23>

Expr <NumLit test.lkt:41:59-41:61>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Expr <NumLit test.lkt:41:63-41:65>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Expr <CallExpr test.lkt:41:49-41:66>
     has type <InstantiatedGenericType "Pair[Int]" test.lkt:28:1-31:2>

Id   <RefId "Int" test.lkt:42:42-42:45>
     references <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "Pair" test.lkt:42:48-42:52>
     references <GenericDecl "Pair" test.lkt:28:1-31:2>

Id   <RefId "Int" test.lkt:42:53-42:56>
     references <StructDecl "Int" __prelude:1:10-1:23>

Expr <NumLit test.lkt:42:58-42:60>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Expr <NumLit test.lkt:42:63-42:65>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Expr <CallExpr test.lkt:42:48-42:66>
     has type <InstantiatedGenericType "Pair[Int]" test.lkt:28:1-31:2>

Id   <RefId "a" test.lkt:42:67-42:68>
     references <FieldDecl "a" test.lkt:29:5-29:10>

Expr <RefId "a" test.lkt:42:67-42:68>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Expr <DotExpr test.lkt:42:48-42:68>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "Pair" test.lkt:43:38-43:42>
     references <GenericDecl "Pair" test.lkt:28:1-31:2>

Id   <RefId "Int" test.lkt:43:43-43:46>
     references <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "Pair" test.lkt:43:50-43:54>
     references <GenericDecl "Pair" test.lkt:28:1-31:2>

Id   <RefId "Int" test.lkt:43:55-43:58>
     references <StructDecl "Int" __prelude:1:10-1:23>

Expr <NumLit test.lkt:43:60-43:62>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Expr <NumLit test.lkt:43:64-43:66>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Expr <CallExpr test.lkt:43:50-43:67>
     has type <InstantiatedGenericType "Pair[Int]" test.lkt:28:1-31:2>

Id   <RefId "a" test.lkt:43:68-43:69>
     references <FieldDecl "a" test.lkt:29:5-29:10>

Expr <RefId "a" test.lkt:43:68-43:69>
     has type <StructDecl "Int" __prelude:1:10-1:23>

test.lkt:43:50: error: Mismatched types: expected `Pair[Int]`, got `Int`
42 |     fun test_invalid_generic_type(): Pair[Int] = Pair[Int](12, 15).a
   |                                                  ^^^^^^^^^^^^^^^^^^^

Id   <RefId "Bool" test.lkt:44:44-44:48>
     references <EnumTypeDecl "Bool" __prelude:6:10-6:36>

Id   <RefId "Tuple2" test.lkt:44:51-44:57>
     references <GenericDecl "Tuple2" test.lkt:33:1-38:2>

Id   <RefId "Int" test.lkt:44:58-44:61>
     references <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "Bool" test.lkt:44:63-44:67>
     references <EnumTypeDecl "Bool" __prelude:6:10-6:36>

Expr <NumLit test.lkt:44:69-44:71>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "true" test.lkt:44:73-44:77>
     references <EnumLitDecl "true" __prelude:6:28-6:32>

Expr <RefId "true" test.lkt:44:73-44:77>
     has type <EnumTypeDecl "Bool" __prelude:6:10-6:36>

Expr <CallExpr test.lkt:44:51-44:78>
     has type <InstantiatedGenericType "Tuple2[Int, Bool]" test.lkt:33:1-38:2>

Id   <RefId "b" test.lkt:44:79-44:80>
     references <FieldDecl "b" test.lkt:35:5-35:10>

Expr <RefId "b" test.lkt:44:79-44:80>
     has type <EnumTypeDecl "Bool" __prelude:6:10-6:36>

Expr <DotExpr test.lkt:44:51-44:80>
     has type <EnumTypeDecl "Bool" __prelude:6:10-6:36>

Id   <RefId "Tuple2" test.lkt:45:40-45:46>
     references <GenericDecl "Tuple2" test.lkt:33:1-38:2>

Id   <RefId "Int" test.lkt:45:47-45:50>
     references <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "Bool" test.lkt:45:52-45:56>
     references <EnumTypeDecl "Bool" __prelude:6:10-6:36>

Id   <RefId "true" test.lkt:45:60-45:64>
     references <EnumLitDecl "true" __prelude:6:28-6:32>

test.lkt:45:60: error: Mismatched types: expected `Tuple2[Int, Bool]`, got `Bool`
44 |     fun test_invalid_generic_type_2(): Tuple2[Int, Bool] = true
   |                                                            ^^^^

Id   <RefId "A" test.lkt:46:29-46:30>
     references <ClassDecl "A" test.lkt:1:12-26:2>

Id   <RefId "Int" test.lkt:46:33-46:36>
     references <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "arg" test.lkt:46:39-46:42>
     references <FunArgDecl "arg" test.lkt:46:23-46:30>

Expr <RefId "arg" test.lkt:46:39-46:42>
     has type <ClassDecl "A" test.lkt:1:12-26:2>

Id   <RefId "test_int_add" test.lkt:46:43-46:55>
     references <FunDecl "test_int_add" test.lkt:8:5-8:38>

Expr <RefId "test_int_add" test.lkt:46:43-46:55>
     has type <FunctionType "(A) -> Int" __prelude>

Expr <DotExpr test.lkt:46:39-46:55>
     has type <FunctionType "(A) -> Int" __prelude>

Expr <CallExpr test.lkt:46:39-46:57>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "Tuple2" test.lkt:47:30-47:36>
     references <GenericDecl "Tuple2" test.lkt:33:1-38:2>

Id   <RefId "Int" test.lkt:47:37-47:40>
     references <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "Bool" test.lkt:47:42-47:46>
     references <EnumTypeDecl "Bool" __prelude:6:10-6:36>

Id   <RefId "Int" test.lkt:47:50-47:53>
     references <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "arg" test.lkt:47:56-47:59>
     references <FunArgDecl "arg" test.lkt:47:25-47:47>

Expr <RefId "arg" test.lkt:47:56-47:59>
     has type <InstantiatedGenericType "Tuple2[Int, Bool]" test.lkt:33:1-38:2>

Id   <RefId "test" test.lkt:47:60-47:64>
     references <FunDecl "test" test.lkt:37:5-37:18>

Expr <RefId "test" test.lkt:47:60-47:64>
     has type <FunctionType "(Tuple2) -> Int" __prelude>

Expr <DotExpr test.lkt:47:56-47:64>
     has type <FunctionType "(Tuple2) -> Int" __prelude>

Expr <CallExpr test.lkt:47:56-47:66>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "Array" test.lkt:48:34-48:39>
     references <GenericDecl "Array" __prelude:13:10-14:2>

Id   <RefId "Int" test.lkt:48:40-48:43>
     references <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "Int" test.lkt:48:47-48:50>
     references <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "arg" test.lkt:48:53-48:56>
     references <FunArgDecl "arg" test.lkt:48:29-48:44>

Expr <RefId "arg" test.lkt:48:53-48:56>
     has type <InstantiatedGenericType "Array[Int]" __prelude:13:10-14:2>

Expr <NumLit test.lkt:48:58-48:60>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Expr <CallExpr test.lkt:48:53-48:61>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "Int" test.lkt:51:9-51:12>
     references <StructDecl "Int" __prelude:1:10-1:23>

Expr <NumLit test.lkt:51:15-51:17>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "Int" test.lkt:55:41-55:44>
     references <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "self" test.lkt:55:47-55:51>
     references <SelfDecl "self" test.lkt:53:1-56:2>

Expr <RefId "self" test.lkt:55:47-55:51>
     has type <StructDecl "Foo" test.lkt:53:1-56:2>

test.lkt:55:52: error: Cannot find entity `a` in this scope
54 |     fun test_identifier_leak_invalid(): Int = self.a
   |                                                    ^

Id   <RefId "D" test.lkt:59:16-59:17>
     references <EnumClassAltDecl "D" test.lkt:58:15-58:16>

Id   <RefId "Int" test.lkt:63:14-63:17>
     references <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "Int" test.lkt:63:23-63:26>
     references <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "Int" test.lkt:63:29-63:32>
     references <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "a" test.lkt:63:35-63:36>
     references <FunArgDecl "a" test.lkt:63:10-63:17>

Expr <RefId "a" test.lkt:63:35-63:36>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "b" test.lkt:63:39-63:40>
     references <FunArgDecl "b" test.lkt:63:19-63:26>

Expr <RefId "b" test.lkt:63:39-63:40>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Expr <BinOp test.lkt:63:35-63:40>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "Int" test.lkt:64:16-64:19>
     references <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "Int" test.lkt:64:21-64:24>
     references <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "Int" test.lkt:64:29-64:32>
     references <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "add" test.lkt:64:35-64:38>
     references <FunDecl "add" test.lkt:63:1-63:40>

Expr <RefId "add" test.lkt:64:35-64:38>
     has type <FunctionType "(Int, Int) -> Int" __prelude>

Id   <RefId "B" test.lkt:65:24-65:25>
     references <ClassDecl "B" test.lkt:40:1-49:2>

Id   <RefId "B" test.lkt:65:29-65:30>
     references <ClassDecl "B" test.lkt:40:1-49:2>

Id   <RefId "Int" test.lkt:65:35-65:38>
     references <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "b_inst" test.lkt:65:41-65:47>
     references <FunArgDecl "b_inst" test.lkt:65:16-65:25>

Expr <RefId "b_inst" test.lkt:65:41-65:47>
     has type <ClassDecl "B" test.lkt:40:1-49:2>

Id   <RefId "test_generic_component_access" test.lkt:65:48-65:77>
     references <FunDecl "test_generic_component_access" test.lkt:42:5-42:68>

Expr <RefId "test_generic_component_access" test.lkt:65:48-65:77>
     has type <FunctionType "(B) -> Int" __prelude>

Expr <DotExpr test.lkt:65:41-65:77>
     has type <FunctionType "(B) -> Int" __prelude>

Id   <RefId "B" test.lkt:66:32-66:33>
     references <ClassDecl "B" test.lkt:40:1-49:2>

Id   <RefId "B" test.lkt:66:37-66:38>
     references <ClassDecl "B" test.lkt:40:1-49:2>

Id   <RefId "Int" test.lkt:66:43-66:46>
     references <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "b_inst" test.lkt:66:49-66:55>
     references <FunArgDecl "b_inst" test.lkt:66:24-66:33>

Expr <RefId "b_inst" test.lkt:66:49-66:55>
     has type <ClassDecl "B" test.lkt:40:1-49:2>

Id   <RefId "test_fun_call" test.lkt:66:56-66:69>
     references <FunDecl "test_fun_call" test.lkt:46:5-46:57>

Expr <RefId "test_fun_call" test.lkt:66:56-66:69>
     has type <FunctionType "(B, A) -> Int" __prelude>

test.lkt:66:49: error: Mismatched types: expected `(B) -> Int`, got `(B, A) -> Int`
65 | fun get_method_invalid(b_inst: B): (B) -> Int = b_inst.test_fun_call
   |                                                 ^^^^^^^^^^^^^^^^^^^^

Id   <RefId "ASTList" test.lkt:70:28-70:35>
     references <GenericDecl "ASTList" __prelude:15:10-16:2>

Id   <RefId "String" test.lkt:70:36-70:42>
     references <StructDecl "String" __prelude:3:10-3:26>

Id   <RefId "Int" test.lkt:70:46-70:49>
     references <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "self" test.lkt:70:52-70:56>
     references <FunArgDecl "self" test.lkt:70:22-70:43>

Expr <RefId "self" test.lkt:70:52-70:56>
     has type <InstantiatedGenericType "ASTList[String]" __prelude:15:10-16:2>

Id   <RefId "length" test.lkt:70:57-70:63>
     references <FunDecl "length" __prelude:8:14-8:31>

Expr <RefId "length" test.lkt:70:57-70:63>
     has type <FunctionType "(Sized) -> Int" __prelude>

Expr <DotExpr test.lkt:70:52-70:63>
     has type <FunctionType "(Sized) -> Int" __prelude>

Expr <CallExpr test.lkt:70:52-70:65>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "Array" test.lkt:71:26-71:31>
     references <GenericDecl "Array" __prelude:13:10-14:2>

Id   <RefId "String" test.lkt:71:32-71:38>
     references <StructDecl "String" __prelude:3:10-3:26>

Id   <RefId "Int" test.lkt:71:42-71:45>
     references <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "self" test.lkt:71:48-71:52>
     references <FunArgDecl "self" test.lkt:71:20-71:39>

Expr <RefId "self" test.lkt:71:48-71:52>
     has type <InstantiatedGenericType "Array[String]" __prelude:13:10-14:2>

Id   <RefId "length" test.lkt:71:53-71:59>
     references <FunDecl "length" __prelude:8:14-8:31>

Expr <RefId "length" test.lkt:71:53-71:59>
     has type <FunctionType "(Sized) -> Int" __prelude>

Expr <DotExpr test.lkt:71:48-71:59>
     has type <FunctionType "(Sized) -> Int" __prelude>

Expr <CallExpr test.lkt:71:48-71:61>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "ASTList" test.lkt:72:33-72:40>
     references <GenericDecl "ASTList" __prelude:15:10-16:2>

Id   <RefId "String" test.lkt:72:41-72:47>
     references <StructDecl "String" __prelude:3:10-3:26>

Id   <RefId "String" test.lkt:72:51-72:57>
     references <StructDecl "String" __prelude:3:10-3:26>

Id   <RefId "self" test.lkt:72:60-72:64>
     references <FunArgDecl "self" test.lkt:72:27-72:48>

Expr <RefId "self" test.lkt:72:60-72:64>
     has type <InstantiatedGenericType "ASTList[String]" __prelude:15:10-16:2>

Expr <NumLit test.lkt:72:66-72:68>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Expr <CallExpr test.lkt:72:60-72:69>
     has type <StructDecl "String" __prelude:3:10-3:26>

Id   <RefId "ASTList" test.lkt:80:30-80:37>
     references <GenericDecl "ASTList" __prelude:15:10-16:2>

Id   <RefId "String" test.lkt:80:38-80:44>
     references <StructDecl "String" __prelude:3:10-3:26>

Id   <RefId "String" test.lkt:80:48-80:54>
     references <StructDecl "String" __prelude:3:10-3:26>

test.lkt:80:57: error: Cannot find entity `self` in this scope
79 | fun test_astlist_indexing(a: ASTList[String]): String = self (12)
   |                                                         ^^^^     

Id   <RefId "Int" test.lkt:86:28-86:31>
     references <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "Int" test.lkt:90:35-90:38>
     references <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "T" test.lkt:90:41-90:42>
     references <GenericFormalTypeDecl "T" test.lkt:89:10-89:11>

Id   <RefId "WithLength" test.lkt:93:34-93:44>
     references <TraitDecl "WithLength" test.lkt:85:1-87:2>

Id   <RefId "WithIndex" test.lkt:93:46-93:55>
     references <GenericDecl "WithIndex" test.lkt:89:1-91:2>

Id   <RefId "T" test.lkt:93:56-93:57>
     references <GenericFormalTypeDecl "T" test.lkt:93:10-93:11>

Id   <RefId "Vec" test.lkt:96:11-96:14>
     references <GenericDecl "Vec" test.lkt:93:1-94:2>

Id   <RefId "String" test.lkt:96:15-96:21>
     references <StructDecl "String" __prelude:3:10-3:26>

Expr <NullLit test.lkt:96:25-96:29>
     has type <InstantiatedGenericType "Vec[String]" test.lkt:93:1-94:2>

Id   <RefId "Int" test.lkt:97:18-97:21>
     references <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "vec" test.lkt:97:24-97:27>
     references <ValDecl "vec" test.lkt:96:1-96:29>

Expr <RefId "vec" test.lkt:97:24-97:27>
     has type <InstantiatedGenericType "Vec[String]" test.lkt:93:1-94:2>

Id   <RefId "length" test.lkt:97:28-97:34>
     references <FunDecl "length" test.lkt:86:14-86:31>

Expr <RefId "length" test.lkt:97:28-97:34>
     has type <FunctionType "(WithLength) -> Int" __prelude>

Expr <DotExpr test.lkt:97:24-97:34>
     has type <FunctionType "(WithLength) -> Int" __prelude>

Expr <CallExpr test.lkt:97:24-97:36>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "String" test.lkt:98:16-98:22>
     references <StructDecl "String" __prelude:3:10-3:26>

Id   <RefId "vec" test.lkt:98:25-98:28>
     references <ValDecl "vec" test.lkt:96:1-96:29>

Expr <RefId "vec" test.lkt:98:25-98:28>
     has type <InstantiatedGenericType "Vec[String]" test.lkt:93:1-94:2>

Expr <NumLit test.lkt:98:30-98:31>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Expr <CallExpr test.lkt:98:25-98:32>
     has type <StructDecl "String" __prelude:3:10-3:26>

Id   <RefId "Int" test.lkt:102:30-102:33>
     references <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "Int" test.lkt:102:36-102:39>
     references <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "a" test.lkt:102:42-102:43>
     references <FunArgDecl "a" test.lkt:102:27-102:33>

Expr <RefId "a" test.lkt:102:42-102:43>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "Int" test.lkt:103:10-103:13>
     references <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "test_named_parameters" test.lkt:103:16-103:37>
     references <FunDecl "test_named_parameters" test.lkt:102:1-102:43>

Expr <RefId "test_named_parameters" test.lkt:103:16-103:37>
     has type <FunctionType "(Int) -> Int" __prelude>

Id   <RefId "a" test.lkt:103:38-103:39>
     references <FunArgDecl "a" test.lkt:102:27-102:33>

Expr <RefId "a" test.lkt:103:38-103:39>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Expr <NumLit test.lkt:103:40-103:42>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Expr <CallExpr test.lkt:103:16-103:43>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "EnClass" test.lkt:110:21-110:28>
     references <EnumClassDecl "EnClass" test.lkt:108:1-108:56>

Id   <RefId "SubclassB" test.lkt:110:29-110:38>
     references <EnumClassAltDecl "SubclassB" test.lkt:108:32-108:41>

Id   <RefId "EnClass" test.lkt:110:41-110:48>
     references <EnumClassDecl "EnClass" test.lkt:108:1-108:56>

Id   <RefId "SubclassB" test.lkt:110:49-110:58>
     references <EnumClassAltDecl "SubclassB" test.lkt:108:32-108:41>

Expr <CallExpr test.lkt:110:41-110:60>
     has type <EnumClassAltDecl "SubclassB" test.lkt:108:32-108:41>

test.lkt:112:24: error: Cannot find entity `SubclassB` in this scope
111 | val invalid_en_class : SubclassB = SubclassB()
    |                        ^^^^^^^^^              

test.lkt:112:36: error: Cannot find entity `SubclassB` in this scope
111 | val invalid_en_class : SubclassB = SubclassB()
    |                                    ^^^^^^^^^  

Id   <RefId "Int" test.lkt:116:13-116:16>
     references <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "Int" test.lkt:116:21-116:24>
     references <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "Int" test.lkt:116:27-116:30>
     references <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "a" test.lkt:116:33-116:34>
     references <FunArgDecl "a" test.lkt:116:10-116:16>

Expr <RefId "a" test.lkt:116:33-116:34>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "b" test.lkt:116:37-116:38>
     references <FunArgDecl "b" test.lkt:116:18-116:24>

Expr <RefId "b" test.lkt:116:37-116:38>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Expr <BinOp test.lkt:116:33-116:38>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "Int" test.lkt:118:9-118:12>
     references <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "test" test.lkt:118:15-118:19>
     references <FunDecl "test" test.lkt:116:1-116:38>

Expr <RefId "test" test.lkt:118:15-118:19>
     has type <FunctionType "(Int, Int) -> Int" __prelude>

Expr <NumLit test.lkt:118:20-118:22>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Expr <NumLit test.lkt:118:24-118:26>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Expr <CallExpr test.lkt:118:15-118:27>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "Int" test.lkt:119:9-119:12>
     references <StructDecl "Int" __prelude:1:10-1:23>

test.lkt:119:15: error: No value for parameter `b` in call to `test`
118 | val u : Int = test(12) # Missing params
    |               ^^^^^^^^                 

Id   <RefId "test" test.lkt:119:15-119:19>
     references <FunDecl "test" test.lkt:116:1-116:38>

Expr <RefId "test" test.lkt:119:15-119:19>
     has type <FunctionType "(Int, Int) -> Int" __prelude>

Expr <NumLit test.lkt:119:20-119:22>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Expr <CallExpr test.lkt:119:15-119:23>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "Int" test.lkt:120:9-120:12>
     references <StructDecl "Int" __prelude:1:10-1:23>

test.lkt:120:15: error: No value for parameter `a` in call to `test`
119 | val v : Int = test(b=12) # Missing params in call with kwargs
    |               ^^^^^^^^^^                                     

Id   <RefId "test" test.lkt:120:15-120:19>
     references <FunDecl "test" test.lkt:116:1-116:38>

Expr <RefId "test" test.lkt:120:15-120:19>
     has type <FunctionType "(Int, Int) -> Int" __prelude>

Id   <RefId "b" test.lkt:120:20-120:21>
     references <FunArgDecl "b" test.lkt:116:18-116:24>

Expr <RefId "b" test.lkt:120:20-120:21>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Expr <NumLit test.lkt:120:22-120:24>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Expr <CallExpr test.lkt:120:15-120:25>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "Int" test.lkt:121:9-121:12>
     references <StructDecl "Int" __prelude:1:10-1:23>

test.lkt:121:28: error: Unmatched actual in call to `test`
120 | val x : Int = test(12, 15, 17) # Too many params
    |                            ^^                   

Id   <RefId "test" test.lkt:121:15-121:19>
     references <FunDecl "test" test.lkt:116:1-116:38>

Expr <RefId "test" test.lkt:121:15-121:19>
     has type <FunctionType "(Int, Int) -> Int" __prelude>

Expr <NumLit test.lkt:121:20-121:22>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Expr <NumLit test.lkt:121:24-121:26>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Expr <CallExpr test.lkt:121:15-121:31>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "Int" test.lkt:122:9-122:12>
     references <StructDecl "Int" __prelude:1:10-1:23>

test.lkt:122:31: error: Unmatched actual in call to `test`
121 | val y : Int = test(a=1, b=12, c=15) # Too many params kwargs
    |                               ^^^^                          

Id   <RefId "test" test.lkt:122:15-122:19>
     references <FunDecl "test" test.lkt:116:1-116:38>

Expr <RefId "test" test.lkt:122:15-122:19>
     has type <FunctionType "(Int, Int) -> Int" __prelude>

Id   <RefId "a" test.lkt:122:20-122:21>
     references <FunArgDecl "a" test.lkt:116:10-116:16>

Expr <RefId "a" test.lkt:122:20-122:21>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Expr <NumLit test.lkt:122:22-122:23>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "b" test.lkt:122:25-122:26>
     references <FunArgDecl "b" test.lkt:116:18-116:24>

Expr <RefId "b" test.lkt:122:25-122:26>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Expr <NumLit test.lkt:122:27-122:29>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Expr <CallExpr test.lkt:122:15-122:36>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "Int" test.lkt:123:9-123:12>
     references <StructDecl "Int" __prelude:1:10-1:23>

test.lkt:123:31: error: Unmatched actual in call to `test`
122 | val z : Int = test(a=1, b=12, c=foo) # Invalid kwarg with wrong value: check that there is an error message for the expr
    |                               ^^^^^                                                                                     

Id   <RefId "test" test.lkt:123:15-123:19>
     references <FunDecl "test" test.lkt:116:1-116:38>

Expr <RefId "test" test.lkt:123:15-123:19>
     has type <FunctionType "(Int, Int) -> Int" __prelude>

Id   <RefId "a" test.lkt:123:20-123:21>
     references <FunArgDecl "a" test.lkt:116:10-116:16>

Expr <RefId "a" test.lkt:123:20-123:21>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Expr <NumLit test.lkt:123:22-123:23>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "b" test.lkt:123:25-123:26>
     references <FunArgDecl "b" test.lkt:116:18-116:24>

Expr <RefId "b" test.lkt:123:25-123:26>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Expr <NumLit test.lkt:123:27-123:29>
     has type <StructDecl "Int" __prelude:1:10-1:23>

test.lkt:123:33: error: Cannot find entity `foo` in this scope
122 | val z : Int = test(a=1, b=12, c=foo) # Invalid kwarg with wrong value: check that there is an error message for the expr
    |                                 ^^^                                                                                     

Expr <CallExpr test.lkt:123:15-123:37>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "Int" test.lkt:127:9-127:12>
     references <StructDecl "Int" __prelude:1:10-1:23>

Expr <NumLit test.lkt:127:15-127:16>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "Int" test.lkt:128:9-128:12>
     references <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "a" test.lkt:128:15-128:16>
     references <ValDecl "a" test.lkt:51:1-51:17>

Expr <RefId "a" test.lkt:128:15-128:16>
     has type <StructDecl "Int" __prelude:1:10-1:23>

test.lkt:128:17: error: Cannot find entity `plus` in this scope
127 | val b : Int = a.plus(2)
    |                 ^^^^   

Id   <RefId "Int" test.lkt:131:18-131:21>
     references <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "Int" test.lkt:131:26-131:29>
     references <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "Int" test.lkt:131:32-131:35>
     references <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "a" test.lkt:131:41-131:42>
     references <FunArgDecl "a" test.lkt:131:15-131:21>

Expr <RefId "a" test.lkt:131:41-131:42>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "b" test.lkt:131:45-131:46>
     references <FunArgDecl "b" test.lkt:131:23-131:29>

Expr <RefId "b" test.lkt:131:45-131:46>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Expr <BinOp test.lkt:131:41-131:46>
     has type <EnumTypeDecl "Bool" __prelude:6:10-6:36>

Id   <RefId "a" test.lkt:131:52-131:53>
     references <FunArgDecl "a" test.lkt:131:15-131:21>

Expr <RefId "a" test.lkt:131:52-131:53>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "b" test.lkt:131:59-131:60>
     references <FunArgDecl "b" test.lkt:131:23-131:29>

Expr <RefId "b" test.lkt:131:59-131:60>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Expr <IfExpr test.lkt:131:38-131:60>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "Int" test.lkt:137:29-137:32>
     references <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "Int" test.lkt:137:39-137:42>
     references <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "Int" test.lkt:137:44-137:47>
     references <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "Int" test.lkt:137:52-137:55>
     references <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "Int" test.lkt:137:58-137:61>
     references <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "Int" test.lkt:140:22-140:25>
     references <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "lambda_test_helper" test.lkt:140:28-140:46>
     references <FunDecl "lambda_test_helper" test.lkt:137:1-137:61>

Expr <RefId "lambda_test_helper" test.lkt:140:28-140:46>
     has type <FunctionType "(Int, (Int, Int) -> Int) -> Int" __prelude>

Expr <NumLit test.lkt:140:47-140:49>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "x" test.lkt:140:61-140:62>
     references <LambdaArgDecl "x" test.lkt:140:52-140:53>

Expr <RefId "x" test.lkt:140:61-140:62>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "y" test.lkt:140:65-140:66>
     references <LambdaArgDecl "y" test.lkt:140:55-140:56>

Expr <RefId "y" test.lkt:140:65-140:66>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Expr <NumLit test.lkt:140:69-140:70>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Expr <BinOp test.lkt:140:65-140:70>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Expr <BinOp test.lkt:140:61-140:70>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Expr <LambdaExpr test.lkt:140:51-140:70>
     has type <FunctionType "(Int, Int) -> Int" __prelude>

Expr <CallExpr test.lkt:140:28-140:71>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "Int" test.lkt:143:32-143:35>
     references <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "lambda_test_helper" test.lkt:143:38-143:56>
     references <FunDecl "lambda_test_helper" test.lkt:137:1-137:61>

Expr <RefId "lambda_test_helper" test.lkt:143:38-143:56>
     has type <FunctionType "(Int, (Int, Int) -> Int) -> Int" __prelude>

Expr <NumLit test.lkt:143:57-143:59>
     has type <StructDecl "Int" __prelude:1:10-1:23>

test.lkt:143:62: error: Invalid type annotations for lambda parameters.
Annotate either all or no params
142 | fun lambda_test_incorrect_1(): Int = lambda_test_helper(12, (x : Int, y) => x + y * 2)
    |                                                              ^^^^^^^^^^               

Id   <RefId "Int" test.lkt:143:66-143:69>
     references <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "x" test.lkt:143:77-143:78>
     references <LambdaArgDecl "x" test.lkt:143:62-143:69>

Expr <RefId "x" test.lkt:143:77-143:78>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "y" test.lkt:143:81-143:82>
     references <LambdaArgDecl "y" test.lkt:143:71-143:72>

Expr <RefId "y" test.lkt:143:81-143:82>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Expr <NumLit test.lkt:143:85-143:86>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Expr <BinOp test.lkt:143:81-143:86>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Expr <BinOp test.lkt:143:77-143:86>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Expr <LambdaExpr test.lkt:143:61-143:86>
     has type <FunctionType "(Int, Int) -> Int" __prelude>

Expr <CallExpr test.lkt:143:38-143:87>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "Int" test.lkt:146:32-146:35>
     references <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "lambda_test_helper" test.lkt:146:38-146:56>
     references <FunDecl "lambda_test_helper" test.lkt:137:1-137:61>

Expr <RefId "lambda_test_helper" test.lkt:146:38-146:56>
     has type <FunctionType "(Int, (Int, Int) -> Int) -> Int" __prelude>

Expr <NumLit test.lkt:146:57-146:59>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "String" test.lkt:146:66-146:72>
     references <StructDecl "String" __prelude:3:10-3:26>

Id   <RefId "String" test.lkt:146:78-146:84>
     references <StructDecl "String" __prelude:3:10-3:26>

Id   <RefId "Int" test.lkt:146:87-146:90>
     references <StructDecl "Int" __prelude:1:10-1:23>

Expr <NumLit test.lkt:146:94-146:96>
     has type <StructDecl "Int" __prelude:1:10-1:23>

test.lkt:146:61: error: Mismatched types: expected `(Int, Int) -> Int`, got `(String, String) -> Int`
145 | fun lambda_test_incorrect_2(): Int = lambda_test_helper(12, (x : String, y : String): Int => 12)
    |                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ 

Expr <CallExpr test.lkt:146:38-146:97>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "Int" test.lkt:153:16-153:19>
     references <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "Foo" test.lkt:156:13-156:16>
     references <StructDecl "Foo" test.lkt:53:1-56:2>

Id   <RefId "Baz" test.lkt:158:33-158:36>
     references <ClassDecl "Baz" test.lkt:156:1-156:19>

Id   <RefId "Int" test.lkt:158:39-158:42>
     references <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "arg" test.lkt:158:45-158:48>
     references <FunArgDecl "arg" test.lkt:158:28-158:36>

Expr <RefId "arg" test.lkt:158:45-158:48>
     has type <ClassDecl "Baz" test.lkt:156:1-156:19>

test.lkt:158:49: error: Cannot find entity `bar` in this scope
157 | fun test_base_type_methods(arg: Baz): Int = arg.bar()
    |                                                 ^^^  

Id   <RefId "Int" test.lkt:165:34-165:37>
     references <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "T" test.lkt:165:40-165:41>
     references <GenericFormalTypeDecl "T" test.lkt:165:10-165:11>

Id   <RefId "T" test.lkt:166:31-166:32>
     references <GenericFormalTypeDecl "T" test.lkt:166:10-166:11>

Id   <RefId "T" test.lkt:166:35-166:36>
     references <GenericFormalTypeDecl "T" test.lkt:166:10-166:11>

Id   <RefId "T" test.lkt:167:32-167:33>
     references <GenericFormalTypeDecl "T" test.lkt:167:10-167:11>

Id   <RefId "Array" test.lkt:167:36-167:41>
     references <GenericDecl "Array" __prelude:13:10-14:2>

Id   <RefId "T" test.lkt:167:42-167:43>
     references <GenericFormalTypeDecl "T" test.lkt:167:10-167:11>

Id   <RefId "T" test.lkt:168:29-168:30>
     references <GenericFormalTypeDecl "T" test.lkt:168:10-168:11>

Id   <RefId "T" test.lkt:168:35-168:36>
     references <GenericFormalTypeDecl "T" test.lkt:168:10-168:11>

Id   <RefId "T" test.lkt:168:41-168:42>
     references <GenericFormalTypeDecl "T" test.lkt:168:10-168:11>

Id   <RefId "T" test.lkt:168:45-168:46>
     references <GenericFormalTypeDecl "T" test.lkt:168:10-168:11>

Id   <RefId "String" test.lkt:171:29-171:35>
     references <StructDecl "String" __prelude:3:10-3:26>

Id   <RefId "convert_int" test.lkt:171:38-171:49>
     references <GenericDecl "convert_int" test.lkt:165:1-165:41>

Id   <RefId "String" test.lkt:171:50-171:56>
     references <StructDecl "String" __prelude:3:10-3:26>

Expr <GenericInstantiation test.lkt:171:38-171:57>
     has type <FunctionType "(Int) -> String" __prelude>

Expr <NumLit test.lkt:171:58-171:60>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Expr <CallExpr test.lkt:171:38-171:61>
     has type <StructDecl "String" __prelude:3:10-3:26>

Id   <RefId "Int" test.lkt:172:31-172:34>
     references <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "identity" test.lkt:172:37-172:45>
     references <GenericDecl "identity" test.lkt:166:1-166:36>

Id   <RefId "Int" test.lkt:172:46-172:49>
     references <StructDecl "Int" __prelude:1:10-1:23>

Expr <GenericInstantiation test.lkt:172:37-172:50>
     has type <FunctionType "(Int) -> Int" __prelude>

Expr <NumLit test.lkt:172:51-172:53>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Expr <CallExpr test.lkt:172:37-172:54>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "Array" test.lkt:173:32-173:37>
     references <GenericDecl "Array" __prelude:13:10-14:2>

Id   <RefId "Int" test.lkt:173:38-173:41>
     references <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "singleton" test.lkt:173:45-173:54>
     references <GenericDecl "singleton" test.lkt:167:1-167:44>

Id   <RefId "Int" test.lkt:173:55-173:58>
     references <StructDecl "Int" __prelude:1:10-1:23>

Expr <GenericInstantiation test.lkt:173:45-173:59>
     has type <FunctionType "(Int) -> Array[Int]" __prelude>

Expr <NumLit test.lkt:173:60-173:62>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Expr <CallExpr test.lkt:173:45-173:63>
     has type <InstantiatedGenericType "Array[Int]" __prelude:13:10-14:2>

Id   <RefId "Int" test.lkt:176:18-176:21>
     references <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "Int" test.lkt:176:24-176:27>
     references <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "arg" test.lkt:176:30-176:33>
     references <FunArgDecl "arg" test.lkt:176:13-176:21>

Expr <RefId "arg" test.lkt:176:30-176:33>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Expr <NumLit test.lkt:176:36-176:37>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Expr <BinOp test.lkt:176:30-176:37>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "Int" test.lkt:177:19-177:22>
     references <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "apply" test.lkt:177:25-177:30>
     references <GenericDecl "apply" test.lkt:168:1-168:46>

Id   <RefId "Int" test.lkt:177:31-177:34>
     references <StructDecl "Int" __prelude:1:10-1:23>

Expr <GenericInstantiation test.lkt:177:25-177:35>
     has type <FunctionType "((Int) -> Int, Int) -> Int" __prelude>

Id   <RefId "double" test.lkt:177:36-177:42>
     references <FunDecl "double" test.lkt:176:1-176:37>

Expr <RefId "double" test.lkt:177:36-177:42>
     has type <FunctionType "(Int) -> Int" __prelude>

Expr <NumLit test.lkt:177:44-177:46>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Expr <CallExpr test.lkt:177:25-177:47>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "Int" test.lkt:180:24-180:27>
     references <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "true" test.lkt:180:34-180:38>
     references <EnumLitDecl "true" __prelude:6:28-6:32>

Expr <RefId "true" test.lkt:180:34-180:38>
     has type <EnumTypeDecl "Bool" __prelude:6:10-6:36>

Expr <NumLit test.lkt:180:44-180:46>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Expr <NullLit test.lkt:180:52-180:56>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Expr <IfExpr test.lkt:180:31-180:56>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Expr <ParenExpr test.lkt:180:30-180:57>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "Int" test.lkt:183:28-183:31>
     references <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "true" test.lkt:183:38-183:42>
     references <EnumLitDecl "true" __prelude:6:28-6:32>

Expr <RefId "true" test.lkt:183:38-183:42>
     has type <EnumTypeDecl "Bool" __prelude:6:10-6:36>

Expr <NumLit test.lkt:183:48-183:50>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Expr <NullLit test.lkt:183:56-183:60>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Expr <IfExpr test.lkt:183:35-183:60>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Expr <ParenExpr test.lkt:183:34-183:61>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Expr <ErrorOnNull test.lkt:183:34-183:62>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "String" test.lkt:189:20-189:26>
     references <StructDecl "String" __prelude:3:10-3:26>

Id   <RefId "convert_int" test.lkt:189:29-189:40>
     references <GenericDecl "convert_int" test.lkt:165:1-165:41>

Expr <NumLit test.lkt:189:41-189:43>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Expr <CallExpr test.lkt:189:29-189:44>
     has type <StructDecl "String" __prelude:3:10-3:26>

Id   <RefId "Int" test.lkt:194:22-194:25>
     references <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "identity" test.lkt:194:28-194:36>
     references <GenericDecl "identity" test.lkt:166:1-166:36>

Expr <NumLit test.lkt:194:37-194:39>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Expr <CallExpr test.lkt:194:28-194:40>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "Array" test.lkt:198:23-198:28>
     references <GenericDecl "Array" __prelude:13:10-14:2>

Id   <RefId "Int" test.lkt:198:29-198:32>
     references <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "singleton" test.lkt:198:36-198:45>
     references <GenericDecl "singleton" test.lkt:167:1-167:44>

Expr <NumLit test.lkt:198:46-198:48>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Expr <CallExpr test.lkt:198:36-198:49>
     has type <InstantiatedGenericType "Array[Int]" __prelude:13:10-14:2>

Id   <RefId "Int" test.lkt:201:28-201:31>
     references <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "apply" test.lkt:201:34-201:39>
     references <GenericDecl "apply" test.lkt:168:1-168:46>

Id   <RefId "double" test.lkt:201:40-201:46>
     references <FunDecl "double" test.lkt:176:1-176:37>

Expr <RefId "double" test.lkt:201:40-201:46>
     has type <FunctionType "(Int) -> Int" __prelude>

Expr <NumLit test.lkt:201:48-201:50>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Expr <CallExpr test.lkt:201:34-201:51>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "T" test.lkt:204:25-204:26>
     references <GenericFormalTypeDecl "T" test.lkt:204:10-204:11>

Id   <RefId "T" test.lkt:204:31-204:32>
     references <GenericFormalTypeDecl "T" test.lkt:204:10-204:11>

Id   <RefId "Int" test.lkt:204:35-204:38>
     references <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "Int" test.lkt:205:45-205:48>
     references <StructDecl "Int" __prelude:1:10-1:23>

test.lkt:205:51: error: Not enough information to infer instantiation of generic callee
204 | fun test_ambiguous_generic_instantiation(): Int = fooz(1, "lol")
    |                                                   ^^^^^^^^^^^^^^

Id   <RefId "fooz" test.lkt:205:51-205:55>
     references <GenericDecl "fooz" test.lkt:204:1-204:38>

Id   <RefId "Array" test.lkt:208:31-208:36>
     references <GenericDecl "Array" __prelude:13:10-14:2>

Id   <RefId "Int" test.lkt:208:37-208:40>
     references <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "singleton" test.lkt:208:44-208:53>
     references <GenericDecl "singleton" test.lkt:167:1-167:44>

test.lkt:208:54: error: Mismatched types: expected `Int`, got a string literal
207 | fun test_invalid_singleton(): Array[Int] = singleton("lol")
    |                                                      ^^^^^ 

Expr <CallExpr test.lkt:208:44-208:60>
     has type <InstantiatedGenericType "Array[Int]" __prelude:13:10-14:2>

Id   <RefId "Int" test.lkt:211:33-211:36>
     references <StructDecl "Int" __prelude:1:10-1:23>

test.lkt:211:39: error: Cannot instantiate callee: cannot unify `Array[T]` with `Int`
210 | fun test_invalid_singleton_2(): Int = singleton("lol")
    |                                       ^^^^^^^^^^^^^^^^

Id   <RefId "singleton" test.lkt:211:39-211:48>
     references <GenericDecl "singleton" test.lkt:167:1-167:44>

Id   <RefId "Dummy" test.lkt:216:33-216:38>
     references <GenericDecl "Dummy" test.lkt:213:1-213:31>

Id   <RefId "Int" test.lkt:216:39-216:42>
     references <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "String" test.lkt:216:44-216:50>
     references <StructDecl "String" __prelude:3:10-3:26>

test.lkt:216:54: error: Cannot instantiate callee: cannot unify `Array[T]` with `Dummy[Int, String]`
215 | fun test_invalid_singleton_3(): Dummy[Int, String] = singleton("lol")
    |                                                      ^^^^^^^^^^^^^^^^

Id   <RefId "singleton" test.lkt:216:54-216:63>
     references <GenericDecl "singleton" test.lkt:167:1-167:44>

Id   <RefId "Int" test.lkt:219:18-219:21>
     references <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "Bool" test.lkt:219:24-219:28>
     references <EnumTypeDecl "Bool" __prelude:6:10-6:36>

Id   <RefId "a" test.lkt:219:32-219:33>
     references <FunArgDecl "a" test.lkt:219:14-219:21>

Expr <RefId "a" test.lkt:219:32-219:33>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Expr <NumLit test.lkt:219:36-219:38>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Expr <BinOp test.lkt:219:32-219:38>
     has type <EnumTypeDecl "Bool" __prelude:6:10-6:36>

Expr <ParenExpr test.lkt:219:31-219:39>
     has type <EnumTypeDecl "Bool" __prelude:6:10-6:36>

Id   <RefId "a" test.lkt:219:44-219:45>
     references <FunArgDecl "a" test.lkt:219:14-219:21>

Expr <RefId "a" test.lkt:219:44-219:45>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Expr <NumLit test.lkt:219:48-219:50>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Expr <BinOp test.lkt:219:44-219:50>
     has type <EnumTypeDecl "Bool" __prelude:6:10-6:36>

Expr <ParenExpr test.lkt:219:43-219:51>
     has type <EnumTypeDecl "Bool" __prelude:6:10-6:36>

Expr <BinOp test.lkt:219:31-219:51>
     has type <EnumTypeDecl "Bool" __prelude:6:10-6:36>

