Resolving test.lkt
==================
Id   <RefId "Node" test.lkt:1:37-1:41>
     references <GenericDecl prelude: "Node">

Id   <RefId "RootNode" test.lkt:1:42-1:50>
     references <ClassDecl "RootNode" test.lkt:1:11-1:54>

Id   <RefId "RootNode" test.lkt:3:14-3:22>
     references <ClassDecl "RootNode" test.lkt:1:11-1:54>

Id   <RefId "TokenNode" test.lkt:3:34-3:43>
     references <TraitDecl prelude: "TokenNode">

Id   <RefId "RootNode" test.lkt:5:24-5:32>
     references <ClassDecl "RootNode" test.lkt:1:11-1:54>

Id   <RefId "node" test.lkt:5:35-5:39>
     references <NodeDecl "node" test.lkt:3:1-29:2>

Expr <RefId "node" test.lkt:5:35-5:39>
     has type <ClassDecl "Name" test.lkt:3:1-29:2>

Id   <RefId "parent" test.lkt:5:40-5:46>
     references <FunDecl prelude: "parent">

Expr <RefId "parent" test.lkt:5:40-5:46>
     has type <ClassDecl "RootNode" test.lkt:1:11-1:54>

Expr <DotExpr test.lkt:5:35-5:46>
     has type <ClassDecl "RootNode" test.lkt:1:11-1:54>

Id   <RefId "LexicalEnv" test.lkt:7:23-7:33>
     references <GenericDecl prelude: "LexicalEnv">

Id   <RefId "RootNode" test.lkt:7:34-7:42>
     references <ClassDecl "RootNode" test.lkt:1:11-1:54>

Id   <RefId "node" test.lkt:7:46-7:50>
     references <NodeDecl "node" test.lkt:3:1-29:2>

Expr <RefId "node" test.lkt:7:46-7:50>
     has type <ClassDecl "Name" test.lkt:3:1-29:2>

Id   <RefId "parent" test.lkt:7:51-7:57>
     references <FunDecl prelude: "parent">

Expr <RefId "parent" test.lkt:7:51-7:57>
     has type <ClassDecl "RootNode" test.lkt:1:11-1:54>

Expr <DotExpr test.lkt:7:46-7:57>
     has type <ClassDecl "RootNode" test.lkt:1:11-1:54>

Id   <RefId "node_env" test.lkt:7:58-7:66>
     references <FunDecl prelude: "node_env">

Expr <RefId "node_env" test.lkt:7:58-7:66>
     has type <FunctionType prelude: "() -> LexicalEnv[RootNode]">

Expr <DotExpr test.lkt:7:46-7:66>
     has type <FunctionType prelude: "() -> LexicalEnv[RootNode]">

Expr <CallExpr test.lkt:7:46-7:68>
     has type <InstantiatedGenericType prelude: "LexicalEnv[RootNode]">

Id   <RefId "LexicalEnv" test.lkt:8:23-8:33>
     references <GenericDecl prelude: "LexicalEnv">

Id   <RefId "RootNode" test.lkt:8:34-8:42>
     references <ClassDecl "RootNode" test.lkt:1:11-1:54>

Id   <RefId "node" test.lkt:8:46-8:50>
     references <NodeDecl "node" test.lkt:3:1-29:2>

Expr <RefId "node" test.lkt:8:46-8:50>
     has type <ClassDecl "Name" test.lkt:3:1-29:2>

Id   <RefId "parent_node" test.lkt:8:51-8:62>
     references <FunDecl "parent_node" test.lkt:5:5-5:46>

Expr <RefId "parent_node" test.lkt:8:51-8:62>
     has type <FunctionType "() -> RootNode" test.lkt>

Expr <DotExpr test.lkt:8:46-8:62>
     has type <FunctionType "() -> RootNode" test.lkt>

Expr <CallExpr test.lkt:8:46-8:64>
     has type <ClassDecl "RootNode" test.lkt:1:11-1:54>

Id   <RefId "node_env" test.lkt:8:65-8:73>
     references <FunDecl prelude: "node_env">

Expr <RefId "node_env" test.lkt:8:65-8:73>
     has type <FunctionType prelude: "() -> LexicalEnv[RootNode]">

Expr <DotExpr test.lkt:8:46-8:73>
     has type <FunctionType prelude: "() -> LexicalEnv[RootNode]">

Expr <CallExpr test.lkt:8:46-8:75>
     has type <InstantiatedGenericType prelude: "LexicalEnv[RootNode]">

Id   <RefId "RootNode" test.lkt:10:28-10:36>
     references <ClassDecl "RootNode" test.lkt:1:11-1:54>

Id   <RefId "node" test.lkt:11:9-11:13>
     references <NodeDecl "node" test.lkt:3:1-29:2>

Expr <RefId "node" test.lkt:11:9-11:13>
     has type <ClassDecl "Name" test.lkt:3:1-29:2>

Id   <RefId "parent" test.lkt:11:14-11:20>
     references <FunDecl prelude: "parent">

Expr <RefId "parent" test.lkt:11:14-11:20>
     has type <ClassDecl "RootNode" test.lkt:1:11-1:54>

Expr <DotExpr test.lkt:11:9-11:20>
     has type <ClassDecl "RootNode" test.lkt:1:11-1:54>

Id   <RefId "node_env" test.lkt:11:21-11:29>
     references <FunDecl prelude: "node_env">

Expr <RefId "node_env" test.lkt:11:21-11:29>
     has type <FunctionType prelude: "() -> LexicalEnv[RootNode]">

Expr <DotExpr test.lkt:11:9-11:29>
     has type <FunctionType prelude: "() -> LexicalEnv[RootNode]">

Expr <CallExpr test.lkt:11:9-11:31>
     has type <InstantiatedGenericType prelude: "LexicalEnv[RootNode]">

Id   <RefId "get" test.lkt:11:32-11:35>
     references <FunDecl prelude: "get">

Expr <RefId "get" test.lkt:11:32-11:35>
     has type <FunctionType prelude: "(Symbol) -> Array[RootNode]">

Expr <DotExpr test.lkt:11:9-11:35>
     has type <FunctionType prelude: "(Symbol) -> Array[RootNode]">

Id   <RefId "node" test.lkt:11:36-11:40>
     references <NodeDecl "node" test.lkt:3:1-29:2>

Expr <RefId "node" test.lkt:11:36-11:40>
     has type <ClassDecl "Name" test.lkt:3:1-29:2>

Id   <RefId "symbol" test.lkt:11:41-11:47>
     references <FunDecl prelude: "symbol">

Expr <RefId "symbol" test.lkt:11:41-11:47>
     has type <StructDecl prelude: "Symbol">

Expr <DotExpr test.lkt:11:36-11:47>
     has type <StructDecl prelude: "Symbol">

Expr <CallExpr test.lkt:11:9-11:48>
     has type <InstantiatedGenericType prelude: "Array[RootNode]">

Expr <NumLit test.lkt:11:50-11:51>
     has type <StructDecl prelude: "Int">

Expr <NullCondSubscriptExpr test.lkt:11:9-11:52>
     has type <ClassDecl "RootNode" test.lkt:1:11-1:54>

Id   <RefId "RootNode" test.lkt:12:28-12:36>
     references <ClassDecl "RootNode" test.lkt:1:11-1:54>

Id   <RefId "node" test.lkt:12:39-12:43>
     references <NodeDecl "node" test.lkt:3:1-29:2>

Expr <RefId "node" test.lkt:12:39-12:43>
     has type <ClassDecl "Name" test.lkt:3:1-29:2>

Id   <RefId "parent_env" test.lkt:12:44-12:54>
     references <FunDecl "parent_env" test.lkt:8:5-8:75>

Expr <RefId "parent_env" test.lkt:12:44-12:54>
     has type <FunctionType prelude: "() -> LexicalEnv[RootNode]">

Expr <DotExpr test.lkt:12:39-12:54>
     has type <FunctionType prelude: "() -> LexicalEnv[RootNode]">

Expr <CallExpr test.lkt:12:39-12:56>
     has type <InstantiatedGenericType prelude: "LexicalEnv[RootNode]">

Id   <RefId "get" test.lkt:12:57-12:60>
     references <FunDecl prelude: "get">

Expr <RefId "get" test.lkt:12:57-12:60>
     has type <FunctionType prelude: "(Symbol) -> Array[RootNode]">

Expr <DotExpr test.lkt:12:39-12:60>
     has type <FunctionType prelude: "(Symbol) -> Array[RootNode]">

Id   <RefId "node" test.lkt:12:61-12:65>
     references <NodeDecl "node" test.lkt:3:1-29:2>

Expr <RefId "node" test.lkt:12:61-12:65>
     has type <ClassDecl "Name" test.lkt:3:1-29:2>

Id   <RefId "symbol" test.lkt:12:66-12:72>
     references <FunDecl prelude: "symbol">

Expr <RefId "symbol" test.lkt:12:66-12:72>
     has type <StructDecl prelude: "Symbol">

Expr <DotExpr test.lkt:12:61-12:72>
     has type <StructDecl prelude: "Symbol">

Expr <CallExpr test.lkt:12:39-12:73>
     has type <InstantiatedGenericType prelude: "Array[RootNode]">

Expr <NumLit test.lkt:12:75-12:76>
     has type <StructDecl prelude: "Int">

Expr <NullCondSubscriptExpr test.lkt:12:39-12:77>
     has type <ClassDecl "RootNode" test.lkt:1:11-1:54>

Id   <RefId "RootNode" test.lkt:14:31-14:39>
     references <ClassDecl "RootNode" test.lkt:1:11-1:54>

Id   <RefId "node" test.lkt:14:42-14:46>
     references <NodeDecl "node" test.lkt:3:1-29:2>

Expr <RefId "node" test.lkt:14:42-14:46>
     has type <ClassDecl "Name" test.lkt:3:1-29:2>

Id   <RefId "unit" test.lkt:14:47-14:51>
     references <FunDecl prelude: "unit">

Expr <RefId "unit" test.lkt:14:47-14:51>
     has type <FunctionType prelude: "() -> AnalysisUnit[RootNode]">

Expr <DotExpr test.lkt:14:42-14:51>
     has type <FunctionType prelude: "() -> AnalysisUnit[RootNode]">

Expr <CallExpr test.lkt:14:42-14:53>
     has type <InstantiatedGenericType prelude: "AnalysisUnit[RootNode]">

Id   <RefId "root" test.lkt:14:54-14:58>
     references <FunDecl prelude: "root">

Expr <RefId "root" test.lkt:14:54-14:58>
     has type <ClassDecl "RootNode" test.lkt:1:11-1:54>

Expr <DotExpr test.lkt:14:42-14:58>
     has type <ClassDecl "RootNode" test.lkt:1:11-1:54>

Id   <RefId "RootNode" test.lkt:16:23-16:31>
     references <ClassDecl "RootNode" test.lkt:1:11-1:54>

Id   <RefId "node" test.lkt:16:34-16:38>
     references <NodeDecl "node" test.lkt:3:1-29:2>

Expr <RefId "node" test.lkt:16:34-16:38>
     has type <ClassDecl "Name" test.lkt:3:1-29:2>

Id   <RefId "node_env" test.lkt:16:39-16:47>
     references <FunDecl prelude: "node_env">

Expr <RefId "node_env" test.lkt:16:39-16:47>
     has type <FunctionType prelude: "() -> LexicalEnv[RootNode]">

Expr <DotExpr test.lkt:16:34-16:47>
     has type <FunctionType prelude: "() -> LexicalEnv[RootNode]">

Expr <CallExpr test.lkt:16:34-16:49>
     has type <InstantiatedGenericType prelude: "LexicalEnv[RootNode]">

Id   <RefId "get_first" test.lkt:16:50-16:59>
     references <FunDecl prelude: "get_first">

Expr <RefId "get_first" test.lkt:16:50-16:59>
     has type <FunctionType "(Symbol) -> RootNode" test.lkt>

Expr <DotExpr test.lkt:16:34-16:59>
     has type <FunctionType "(Symbol) -> RootNode" test.lkt>

Id   <RefId "node" test.lkt:16:60-16:64>
     references <NodeDecl "node" test.lkt:3:1-29:2>

Expr <RefId "node" test.lkt:16:60-16:64>
     has type <ClassDecl "Name" test.lkt:3:1-29:2>

Id   <RefId "symbol" test.lkt:16:65-16:71>
     references <FunDecl prelude: "symbol">

Expr <RefId "symbol" test.lkt:16:65-16:71>
     has type <StructDecl prelude: "Symbol">

Expr <DotExpr test.lkt:16:60-16:71>
     has type <StructDecl prelude: "Symbol">

Expr <CallExpr test.lkt:16:34-16:72>
     has type <ClassDecl "RootNode" test.lkt:1:11-1:54>

Id   <RefId "RootNode" test.lkt:18:21-18:29>
     references <ClassDecl "RootNode" test.lkt:1:11-1:54>

Id   <RefId "node" test.lkt:18:32-18:36>
     references <NodeDecl "node" test.lkt:3:1-29:2>

Expr <RefId "node" test.lkt:18:32-18:36>
     has type <ClassDecl "Name" test.lkt:3:1-29:2>

Id   <RefId "node_env" test.lkt:18:37-18:45>
     references <FunDecl prelude: "node_env">

Expr <RefId "node_env" test.lkt:18:37-18:45>
     has type <FunctionType prelude: "() -> LexicalEnv[RootNode]">

Expr <DotExpr test.lkt:18:32-18:45>
     has type <FunctionType prelude: "() -> LexicalEnv[RootNode]">

Expr <CallExpr test.lkt:18:32-18:47>
     has type <InstantiatedGenericType prelude: "LexicalEnv[RootNode]">

Id   <RefId "env_node" test.lkt:18:48-18:56>
     references <FunDecl prelude: "env_node">

Expr <RefId "env_node" test.lkt:18:48-18:56>
     has type <FunctionType "() -> RootNode" test.lkt>

Expr <DotExpr test.lkt:18:32-18:56>
     has type <FunctionType "() -> RootNode" test.lkt>

Expr <CallExpr test.lkt:18:32-18:58>
     has type <ClassDecl "RootNode" test.lkt:1:11-1:54>

Id   <RefId "LexicalEnv" test.lkt:20:25-20:35>
     references <GenericDecl prelude: "LexicalEnv">

Id   <RefId "RootNode" test.lkt:20:36-20:44>
     references <ClassDecl "RootNode" test.lkt:1:11-1:54>

Id   <RefId "node" test.lkt:20:48-20:52>
     references <NodeDecl "node" test.lkt:3:1-29:2>

Expr <RefId "node" test.lkt:20:48-20:52>
     has type <ClassDecl "Name" test.lkt:3:1-29:2>

Id   <RefId "children_env" test.lkt:20:53-20:65>
     references <FunDecl "children_env" test.lkt:20:5-20:67>

Expr <RefId "children_env" test.lkt:20:53-20:65>
     has type <FunctionType prelude: "() -> LexicalEnv[RootNode]">

Expr <DotExpr test.lkt:20:48-20:65>
     has type <FunctionType prelude: "() -> LexicalEnv[RootNode]">

Expr <CallExpr test.lkt:20:48-20:67>
     has type <InstantiatedGenericType prelude: "LexicalEnv[RootNode]">

Id   <RefId "String" test.lkt:22:23-22:29>
     references <StructDecl prelude: "String">

Id   <RefId "Symbol" test.lkt:22:32-22:38>
     references <StructDecl prelude: "Symbol">

Id   <RefId "s" test.lkt:22:41-22:42>
     references <FunArgDecl "s" test.lkt:22:19-22:29>

Expr <RefId "s" test.lkt:22:41-22:42>
     has type <StructDecl prelude: "String">

Id   <RefId "to_symbol" test.lkt:22:43-22:52>
     references <FunDecl prelude: "to_symbol">

Expr <RefId "to_symbol" test.lkt:22:43-22:52>
     has type <StructDecl prelude: "Symbol">

Expr <DotExpr test.lkt:22:41-22:52>
     has type <StructDecl prelude: "Symbol">

Id   <RefId "Array" test.lkt:24:25-24:30>
     references <GenericDecl prelude: "Array">

Id   <RefId "RootNode" test.lkt:24:31-24:39>
     references <ClassDecl "RootNode" test.lkt:1:11-1:54>

Id   <RefId "node" test.lkt:24:43-24:47>
     references <NodeDecl "node" test.lkt:3:1-29:2>

Expr <RefId "node" test.lkt:24:43-24:47>
     has type <ClassDecl "Name" test.lkt:3:1-29:2>

Id   <RefId "parents" test.lkt:24:48-24:55>
     references <FunDecl prelude: "parents">

Expr <RefId "parents" test.lkt:24:48-24:55>
     has type <FunctionType prelude: "(Bool) -> Array[RootNode]">

Expr <DotExpr test.lkt:24:43-24:55>
     has type <FunctionType prelude: "(Bool) -> Array[RootNode]">

Expr <CallExpr test.lkt:24:43-24:57>
     has type <InstantiatedGenericType prelude: "Array[RootNode]">

Id   <RefId "Array" test.lkt:25:25-25:30>
     references <GenericDecl prelude: "Array">

Id   <RefId "RootNode" test.lkt:25:31-25:39>
     references <ClassDecl "RootNode" test.lkt:1:11-1:54>

Id   <RefId "node" test.lkt:25:43-25:47>
     references <NodeDecl "node" test.lkt:3:1-29:2>

Expr <RefId "node" test.lkt:25:43-25:47>
     has type <ClassDecl "Name" test.lkt:3:1-29:2>

Id   <RefId "parents" test.lkt:25:48-25:55>
     references <FunDecl prelude: "parents">

Expr <RefId "parents" test.lkt:25:48-25:55>
     has type <FunctionType prelude: "(Bool) -> Array[RootNode]">

Expr <DotExpr test.lkt:25:43-25:55>
     has type <FunctionType prelude: "(Bool) -> Array[RootNode]">

Id   <RefId "with_self" test.lkt:25:56-25:65>
     references <FunArgDecl prelude: "with_self">

Expr <RefId "with_self" test.lkt:25:56-25:65>
     has type <EnumTypeDecl prelude: "Bool">

Id   <RefId "false" test.lkt:25:66-25:71>
     references <EnumLitDecl prelude: "false">

Expr <RefId "false" test.lkt:25:66-25:71>
     has type <EnumTypeDecl prelude: "Bool">

Expr <CallExpr test.lkt:25:43-25:72>
     has type <InstantiatedGenericType prelude: "Array[RootNode]">

Id   <RefId "Iterator" test.lkt:27:26-27:34>
     references <GenericDecl prelude: "Iterator">

Id   <RefId "RootNode" test.lkt:27:35-27:43>
     references <ClassDecl "RootNode" test.lkt:1:11-1:54>

Id   <RefId "node" test.lkt:27:47-27:51>
     references <NodeDecl "node" test.lkt:3:1-29:2>

Expr <RefId "node" test.lkt:27:47-27:51>
     has type <ClassDecl "Name" test.lkt:3:1-29:2>

Id   <RefId "parents" test.lkt:27:52-27:59>
     references <FunDecl prelude: "parents">

Expr <RefId "parents" test.lkt:27:52-27:59>
     has type <FunctionType prelude: "(Bool) -> Array[RootNode]">

Expr <DotExpr test.lkt:27:47-27:59>
     has type <FunctionType prelude: "(Bool) -> Array[RootNode]">

Expr <CallExpr test.lkt:27:47-27:61>
     has type <InstantiatedGenericType prelude: "Array[RootNode]">

Id   <RefId "to_iterator" test.lkt:27:62-27:73>
     references <FunDecl prelude: "to_iterator">

Expr <RefId "to_iterator" test.lkt:27:62-27:73>
     has type <FunctionType prelude: "() -> Iterator[RootNode]">

Expr <DotExpr test.lkt:27:47-27:73>
     has type <FunctionType prelude: "() -> Iterator[RootNode]">

Expr <CallExpr test.lkt:27:47-27:75>
     has type <InstantiatedGenericType prelude: "Iterator[RootNode]">

