# Test that Java API is properly working

import lexer_example

@with_lexer(foo_lexer)
grammar foo_grammar {
    @main_rule main_rule <- Sequence+(node)
    node <- or(example | null_node | var | ident | string)
    example <- Example("example")
    null_node <- Null("null")
    var <- Var("var" "(" main_rule ")")
    ident <- Ident(@Identifier)
    string <- StringLiteral(@String)
}

enum Color {
    case red, green, blue
}

@abstract
@with_abstract_list
class FooNode implements Node[FooNode] {
    @exported
    fun with_md(eq_used: Bool, eq_ignored: Bool): Entity[FooNode] =
        Entity[FooNode](
            node=node, info=EntityInfo(
                md=Metadata(eq_used=eq_used, eq_ignored=eq_ignored),
                rebindings=self.info.rebindings,
                from_rebound=self.info.from_rebound
            )
        )

    @exported
    fun count(seq: Array[Entity[Example]]): Int = seq.length()

    @exported
    fun get_a(c: Char = 'a'): Char = c

    @exported
    fun get_eacute(c: Char = '\xe9'): Char = c

    @exported
    fun get_int_array(): Array[Int] = [1, 2, 3]

    @exported
    fun array_len(a: Array[Int]): Int = a.length()

    @exported
    fun array_prop_error(): Array[Entity[FooNode]] =
        raise[Array[Entity[FooNode]]] PropertyError("this is an eror")

    @exported
    fun identity(c: Char): Char = c

    @exported
    fun get_str(s: String): String = s

    @exported
    fun same_color(c: Color): Color = c

    @exported
    fun same_color_dflt(c: Color = Color.red): Color = c

    @exported
    fun int_double(c: BigInt): BigInt = c + c

    @exported
    fun me(b: Bool): FooNodeStruct = FooNodeStruct(
        node=if b then self else null[Entity[FooNode]]
    )

    @exported
    fun my_node(): BareNodeStruct = BareNodeStruct(
        a_boolean=true, bare_node=self.node, a_char='a'
    )

    @exported
    fun get_node(node_struct: FooNodeStruct): Entity[FooNode] =
        node_struct.node

    @exported
    fun get_char(s: BareNodeStruct): Char = s.a_char

    @exported
    fun iter_int(): Iterator[Int] = [1, 2, 3].to_iterator()

    @exported
    @external()
    fun trigger_unit_requested(name: Symbol, found: Bool, error: Bool): Bool

    @exported
    fun iter_int_id(it: Iterator[Int]): Iterator[Int] = it

    @exported
    fun iter_entity(): Iterator[Entity[FooNode]] =
        [self, self, self].to_iterator()

    @exported
    fun iter_struct(): Iterator[SomeStruct] =
        [null[SomeStruct], null[SomeStruct]].to_iterator()
}

class Example: FooNode {
    @exported
    fun singleton(): SomeStruct = SomeStruct(examples=[self])
}

class Sequence: ASTList[FooNode] {
    @exported
    fun all_items(): Array[Entity[FooNode]] = self.map((i) => i)

    @exported
    fun example_items(): Array[Entity[Example]] = self.filtermap(
        (i) => i.as![Example], (i) => i is Example
    )
}

class Ident: FooNode implements TokenNode {
    @exported
    fun sym(sym: Symbol): Symbol = sym
}

class Null: FooNode {
}

class StringLiteral: FooNode {
}

class Var: FooNode {
    @parse_field arg: Sequence
}

struct BareNodeStruct {
    a_boolean: Bool
    bare_node: FooNode
    a_char: Char
}

@metadata
struct Metadata {
    @used_in_equality eq_used: Bool
    eq_ignored: Bool
}

struct FooNodeStruct {
    node: Entity[FooNode]
}

struct SomeStruct {
    examples: Array[Entity[Example]]
}
