Resolving test.lkt
==================
Id   <RefId "Int" test.lkt:7:34-7:37>
     references <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "T" test.lkt:7:40-7:41>
     references <GenericFormalTypeDecl "T" test.lkt:7:10-7:11>

Id   <RefId "T" test.lkt:8:31-8:32>
     references <GenericFormalTypeDecl "T" test.lkt:8:10-8:11>

Id   <RefId "T" test.lkt:8:35-8:36>
     references <GenericFormalTypeDecl "T" test.lkt:8:10-8:11>

Id   <RefId "T" test.lkt:9:32-9:33>
     references <GenericFormalTypeDecl "T" test.lkt:9:10-9:11>

Id   <RefId "Array" test.lkt:9:36-9:41>
     references <GenericDecl "Array" __prelude:20:10-22:2>

Id   <RefId "T" test.lkt:9:42-9:43>
     references <GenericFormalTypeDecl "T" test.lkt:9:10-9:11>

Id   <RefId "T" test.lkt:10:29-10:30>
     references <GenericFormalTypeDecl "T" test.lkt:10:10-10:11>

Id   <RefId "T" test.lkt:10:35-10:36>
     references <GenericFormalTypeDecl "T" test.lkt:10:10-10:11>

Id   <RefId "T" test.lkt:10:41-10:42>
     references <GenericFormalTypeDecl "T" test.lkt:10:10-10:11>

Id   <RefId "T" test.lkt:10:45-10:46>
     references <GenericFormalTypeDecl "T" test.lkt:10:10-10:11>

Id   <RefId "String" test.lkt:13:29-13:35>
     references <StructDecl "String" __prelude:26:10-28:2>

Id   <RefId "convert_int" test.lkt:13:38-13:49>
     references <GenericDecl "convert_int" test.lkt:7:1-7:41>

Id   <RefId "String" test.lkt:13:50-13:56>
     references <StructDecl "String" __prelude:26:10-28:2>

Expr <GenericInstantiation test.lkt:13:38-13:57>
     has type <FunctionType "(Int) -> String" __prelude>

Expr <NumLit test.lkt:13:58-13:60>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Expr <CallExpr test.lkt:13:38-13:61>
     has type <StructDecl "String" __prelude:26:10-28:2>

Id   <RefId "Int" test.lkt:14:31-14:34>
     references <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "identity" test.lkt:14:37-14:45>
     references <GenericDecl "identity" test.lkt:8:1-8:36>

Id   <RefId "Int" test.lkt:14:46-14:49>
     references <StructDecl "Int" __prelude:1:10-1:23>

Expr <GenericInstantiation test.lkt:14:37-14:50>
     has type <FunctionType "(Int) -> Int" __prelude>

Expr <NumLit test.lkt:14:51-14:53>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Expr <CallExpr test.lkt:14:37-14:54>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "Array" test.lkt:15:32-15:37>
     references <GenericDecl "Array" __prelude:20:10-22:2>

Id   <RefId "Int" test.lkt:15:38-15:41>
     references <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "singleton" test.lkt:15:45-15:54>
     references <GenericDecl "singleton" test.lkt:9:1-9:44>

Id   <RefId "Int" test.lkt:15:55-15:58>
     references <StructDecl "Int" __prelude:1:10-1:23>

Expr <GenericInstantiation test.lkt:15:45-15:59>
     has type <FunctionType "(Int) -> Array[Int]" __prelude>

Expr <NumLit test.lkt:15:60-15:62>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Expr <CallExpr test.lkt:15:45-15:63>
     has type <InstantiatedGenericType "Array[Int]" __prelude:20:10-22:2>

Id   <RefId "Int" test.lkt:18:18-18:21>
     references <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "Int" test.lkt:18:24-18:27>
     references <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "arg" test.lkt:18:30-18:33>
     references <FunArgDecl "arg" test.lkt:18:13-18:21>

Expr <RefId "arg" test.lkt:18:30-18:33>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Expr <NumLit test.lkt:18:36-18:37>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Expr <BinOp test.lkt:18:30-18:37>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "Int" test.lkt:19:19-19:22>
     references <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "apply" test.lkt:19:25-19:30>
     references <GenericDecl "apply" test.lkt:10:1-10:46>

Id   <RefId "Int" test.lkt:19:31-19:34>
     references <StructDecl "Int" __prelude:1:10-1:23>

Expr <GenericInstantiation test.lkt:19:25-19:35>
     has type <FunctionType "((Int) -> Int, Int) -> Int" __prelude>

Id   <RefId "double" test.lkt:19:36-19:42>
     references <FunDecl "double" test.lkt:18:1-18:37>

Expr <RefId "double" test.lkt:19:36-19:42>
     has type <FunctionType "(Int) -> Int" __prelude>

Expr <NumLit test.lkt:19:44-19:46>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Expr <CallExpr test.lkt:19:25-19:47>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "Int" test.lkt:22:24-22:27>
     references <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "true" test.lkt:22:34-22:38>
     references <EnumLitDecl "true" __prelude:8:17-8:21>

Expr <RefId "true" test.lkt:22:34-22:38>
     has type <EnumTypeDecl "Bool" __prelude:7:16-9:2>

Expr <NumLit test.lkt:22:44-22:46>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Expr <NullLit test.lkt:22:52-22:56>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Expr <IfExpr test.lkt:22:31-22:56>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Expr <ParenExpr test.lkt:22:30-22:57>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "Int" test.lkt:25:28-25:31>
     references <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "true" test.lkt:25:38-25:42>
     references <EnumLitDecl "true" __prelude:8:17-8:21>

Expr <RefId "true" test.lkt:25:38-25:42>
     has type <EnumTypeDecl "Bool" __prelude:7:16-9:2>

Expr <NumLit test.lkt:25:48-25:50>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Expr <NullLit test.lkt:25:56-25:60>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Expr <IfExpr test.lkt:25:35-25:60>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Expr <ParenExpr test.lkt:25:34-25:61>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Expr <ErrorOnNull test.lkt:25:34-25:62>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "String" test.lkt:31:20-31:26>
     references <StructDecl "String" __prelude:26:10-28:2>

Id   <RefId "convert_int" test.lkt:31:29-31:40>
     references <GenericDecl "convert_int" test.lkt:7:1-7:41>

Expr <NumLit test.lkt:31:41-31:43>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Expr <CallExpr test.lkt:31:29-31:44>
     has type <StructDecl "String" __prelude:26:10-28:2>

Id   <RefId "Int" test.lkt:36:22-36:25>
     references <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "identity" test.lkt:36:28-36:36>
     references <GenericDecl "identity" test.lkt:8:1-8:36>

Expr <NumLit test.lkt:36:37-36:39>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Expr <CallExpr test.lkt:36:28-36:40>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "Array" test.lkt:40:23-40:28>
     references <GenericDecl "Array" __prelude:20:10-22:2>

Id   <RefId "Int" test.lkt:40:29-40:32>
     references <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "singleton" test.lkt:40:36-40:45>
     references <GenericDecl "singleton" test.lkt:9:1-9:44>

Expr <NumLit test.lkt:40:46-40:48>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Expr <CallExpr test.lkt:40:36-40:49>
     has type <InstantiatedGenericType "Array[Int]" __prelude:20:10-22:2>

Id   <RefId "Int" test.lkt:43:28-43:31>
     references <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "apply" test.lkt:43:34-43:39>
     references <GenericDecl "apply" test.lkt:10:1-10:46>

Id   <RefId "double" test.lkt:43:40-43:46>
     references <FunDecl "double" test.lkt:18:1-18:37>

Expr <RefId "double" test.lkt:43:40-43:46>
     has type <FunctionType "(Int) -> Int" __prelude>

Expr <NumLit test.lkt:43:48-43:50>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Expr <CallExpr test.lkt:43:34-43:51>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "T" test.lkt:46:25-46:26>
     references <GenericFormalTypeDecl "T" test.lkt:46:10-46:11>

Id   <RefId "T" test.lkt:46:31-46:32>
     references <GenericFormalTypeDecl "T" test.lkt:46:10-46:11>

Id   <RefId "Int" test.lkt:46:35-46:38>
     references <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "Int" test.lkt:47:54-47:57>
     references <StructDecl "Int" __prelude:1:10-1:23>

test.lkt:47:60: error: Not enough information to infer instantiation of generic callee
46 | @invalid fun test_ambiguous_generic_instantiation(): Int = fooz(1, "lol")
   |                                                            ^^^^^^^^^^^^^^

Id   <RefId "fooz" test.lkt:47:60-47:64>
     references <GenericDecl "fooz" test.lkt:46:1-46:38>

Id   <RefId "Array" test.lkt:50:40-50:45>
     references <GenericDecl "Array" __prelude:20:10-22:2>

Id   <RefId "Int" test.lkt:50:46-50:49>
     references <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "singleton" test.lkt:50:53-50:62>
     references <GenericDecl "singleton" test.lkt:9:1-9:44>

test.lkt:50:63: error: Mismatched types: expected `Int`, got a string literal
49 | @invalid fun test_invalid_singleton(): Array[Int] = singleton("lol")
   |                                                               ^^^^^ 

Expr <CallExpr test.lkt:50:53-50:69>
     has type <InstantiatedGenericType "Array[Int]" __prelude:20:10-22:2>

Id   <RefId "Int" test.lkt:53:42-53:45>
     references <StructDecl "Int" __prelude:1:10-1:23>

test.lkt:53:48: error: Cannot instantiate callee: cannot unify `Array[T]` with `Int`
52 | @invalid fun test_invalid_singleton_2(): Int = singleton("lol")
   |                                                ^^^^^^^^^^^^^^^^

Id   <RefId "singleton" test.lkt:53:48-53:57>
     references <GenericDecl "singleton" test.lkt:9:1-9:44>

Id   <RefId "Dummy" test.lkt:58:42-58:47>
     references <GenericDecl "Dummy" test.lkt:55:1-55:31>

Id   <RefId "Int" test.lkt:58:48-58:51>
     references <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "String" test.lkt:58:53-58:59>
     references <StructDecl "String" __prelude:26:10-28:2>

test.lkt:58:63: error: Cannot instantiate callee: cannot unify `Array[T]` with `Dummy[Int, String]`
57 | @invalid fun test_invalid_singleton_3(): Dummy[Int, String] = singleton("lol")
   |                                                               ^^^^^^^^^^^^^^^^

Id   <RefId "singleton" test.lkt:58:63-58:72>
     references <GenericDecl "singleton" test.lkt:9:1-9:44>

Id   <RefId "Int" test.lkt:61:18-61:21>
     references <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "Bool" test.lkt:61:24-61:28>
     references <EnumTypeDecl "Bool" __prelude:7:16-9:2>

Id   <RefId "a" test.lkt:61:32-61:33>
     references <FunArgDecl "a" test.lkt:61:14-61:21>

Expr <RefId "a" test.lkt:61:32-61:33>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Expr <NumLit test.lkt:61:36-61:38>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Expr <BinOp test.lkt:61:32-61:38>
     has type <EnumTypeDecl "Bool" __prelude:7:16-9:2>

Expr <ParenExpr test.lkt:61:31-61:39>
     has type <EnumTypeDecl "Bool" __prelude:7:16-9:2>

Id   <RefId "a" test.lkt:61:44-61:45>
     references <FunArgDecl "a" test.lkt:61:14-61:21>

Expr <RefId "a" test.lkt:61:44-61:45>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Expr <NumLit test.lkt:61:48-61:50>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Expr <BinOp test.lkt:61:44-61:50>
     has type <EnumTypeDecl "Bool" __prelude:7:16-9:2>

Expr <ParenExpr test.lkt:61:43-61:51>
     has type <EnumTypeDecl "Bool" __prelude:7:16-9:2>

Expr <BinOp test.lkt:61:31-61:51>
     has type <EnumTypeDecl "Bool" __prelude:7:16-9:2>

Id   <RefId "Int" test.lkt:64:34-64:37>
     references <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "Int" test.lkt:64:42-64:45>
     references <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "Int" test.lkt:64:51-64:54>
     references <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "Int" test.lkt:64:59-64:62>
     references <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "Int" test.lkt:64:65-64:68>
     references <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "Int" test.lkt:65:34-65:37>
     references <StructDecl "Int" __prelude:1:10-1:23>

Id   <RefId "test_lambda_leak_support" test.lkt:66:5-66:29>
     references <FunDecl "test_lambda_leak_support" test.lkt:64:1-64:68>

Expr <RefId "test_lambda_leak_support" test.lkt:66:5-66:29>
     has type <FunctionType "((Int) -> Int, (Int) -> Int) -> Int" __prelude>

Id   <RefId "xxx" test.lkt:67:18-67:21>
     references <LambdaArgDecl "xxx" test.lkt:67:10-67:13>

Expr <RefId "xxx" test.lkt:67:18-67:21>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Expr <NumLit test.lkt:67:24-67:25>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Expr <BinOp test.lkt:67:18-67:25>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Expr <LambdaExpr test.lkt:67:9-67:25>
     has type <FunctionType "(Int) -> Int" __prelude>

test.lkt:68:18: error: Cannot find entity `xxx` in this scope
67 |         (yyy) => xxx * yyy
   |                  ^^^      

Id   <RefId "yyy" test.lkt:68:24-68:27>
     references <LambdaArgDecl "yyy" test.lkt:68:10-68:13>

Expr <RefId "yyy" test.lkt:68:24-68:27>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Expr <BinOp test.lkt:68:18-68:27>
     has type <StructDecl "Int" __prelude:1:10-1:23>

Expr <LambdaExpr test.lkt:68:9-68:27>
     has type <FunctionType "(Int) -> Int" __prelude>

Expr <CallExpr test.lkt:66:5-70:6>
     has type <StructDecl "Int" __prelude:1:10-1:23>

