import lexer_example

@with_lexer(foo_lexer)
grammar foo_grammar {
    @main_rule main_rule <- or(Plus(atom "+" main_rule) | atom)
    atom <- or(Literal(@Number) | Name(@Identifier))
}

@abstract
class FooNode implements Node[FooNode] {
    @exported
    fun eval_unit(u: AnalysisUnit[FooNode]): Int =
        u.root.as[Expression].result()

    @exported
    fun id_unit(u: AnalysisUnit[FooNode]): AnalysisUnit[FooNode] = u
}

@abstract
class Expression: FooNode {
    @exported
    @abstract
    fun result(): Int
}

class Literal: Expression implements TokenNode {
    @external()
    fun result(): Int
}

class Name: Expression implements TokenNode {
    @external(uses_envs=true)
    fun designated_unit(): AnalysisUnit[FooNode]

    fun result(): Int = node.designated_unit().root.as[Expression].result()
}

class Plus: Expression {
    @parse_field left: Expression
    @parse_field right: Expression

    fun result(): Int = node.left.result() + node.right.result()
}
