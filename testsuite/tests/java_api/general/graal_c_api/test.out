===== Start the Java tests =====

--- Diagnostics ---
Cannot read unknown at <0:0-0:0>
Expected '(', got Identifier at <1:5-1:15>
-------------------

--- Unit Filename ---
<AnalysisUnit "foo.txt"> != <AnalysisUnit "foo.txt"> = true
<AnalysisUnit "foo.txt">.equals(<AnalysisUnit "foo.txt">) = true
<AnalysisUnit "foo.txt">.equals(<AnalysisUnit "bar.txt">) = false
Unit for the file foo.txt
---------------------

--- Unit provider ---
pkg/body resolved to: pkg-body.txt
---------------------

--- Tokens ---
--- Token info without trivia
  unit_text =
    null example var (null example null) example null
  first_token = <Token Kind=Null Text="null">
  first_text = null
  last_token = <Token Kind=Termination Text="">
  last_text = 
  root_node = <Sequence foo.txt:1:1-1:50>
  root_start = <Token Kind=Null Text="null">
  root_end = <Token Kind=Null Text="null">
  token_count = 11
  trivia_count = 0
--- Token info with trivia
  unit_text =
    null example var (null example null) example null
  first_token = <Token Kind=Null Text="null">
  first_text = null
  last_token = <Token Kind=Termination Text="">
  last_text = 
  root_node = <Sequence foo.txt:1:1-1:50>
  root_start = <Token Kind=Null Text="null">
  root_end = <Token Kind=Null Text="null">
  token_count = 11
  trivia_count = 8

The NO_TOKEN = <Token Kind=No_Token Text="">
Text range with a NO_TOKEN = 
Equivalent tokens : <Token Kind=Identifier Text="identifier"> and <Token Kind=Identifier Text="identifier">
Equivalent tokens : <Token Kind=Example Text="example"> and <Token Kind=Example Text="example">
<Token Kind=Null Text="null"> != <Token Kind=Null Text="null"> = true
<Token Kind=Null Text="null">.equals(<Token Kind=Null Text="null">) = true
<Token Kind=Whitespace Text=" "> != <Token Kind=Whitespace Text=" "> = true
<Token Kind=Whitespace Text=" ">.equals(<Token Kind=Whitespace Text=" ">) = true
<Token Kind=Identifier Text="identifier"> != <Token Kind=Identifier Text="identifier"> = true
<Token Kind=Identifier Text="identifier">.equals(<Token Kind=Identifier Text="identifier">) = true
<Token Kind=Whitespace Text=" "> != <Token Kind=Whitespace Text=" "> = true
<Token Kind=Whitespace Text=" ">.equals(<Token Kind=Whitespace Text=" ">) = true
<Token Kind=Example Text="example"> != <Token Kind=Example Text="example"> = true
<Token Kind=Example Text="example">.equals(<Token Kind=Example Text="example">) = true
<Token Kind=Whitespace Text=" "> != <Token Kind=Whitespace Text=" "> = true
<Token Kind=Whitespace Text=" ">.equals(<Token Kind=Whitespace Text=" ">) = true
<Token Kind=Identifier Text="identifier"> != <Token Kind=Identifier Text="identifier"> = true
<Token Kind=Identifier Text="identifier">.equals(<Token Kind=Identifier Text="identifier">) = true
<Token Kind=Whitespace Text=" "> != <Token Kind=Whitespace Text=" "> = true
<Token Kind=Whitespace Text=" ">.equals(<Token Kind=Whitespace Text=" ">) = true
<Token Kind=Example Text="example"> != <Token Kind=Example Text="example"> = true
<Token Kind=Example Text="example">.equals(<Token Kind=Example Text="example">) = true
<Token Kind=Termination Text=""> != <Token Kind=Termination Text=""> = true
<Token Kind=Termination Text="">.equals(<Token Kind=Termination Text="">) = true
--------------

--- Nodes ---
Unit = <AnalysisUnit "foo.txt">
Unit root = <Sequence foo.txt:1:1-1:50>
Unit root kind = Sequence
Unit root children count = 5
Unit root children = [<NullNode foo.txt:1:1-1:5>, <Example foo.txt:1:6-1:13>, <Var foo.txt:1:14-1:37>, <Example foo.txt:1:38-1:45>, <NullNode foo.txt:1:46-1:50>]
Unit root tree dump = Sequence foo.txt:1:1-1:50>
|item_0:
|  NullNode foo.txt:1:1-1:5>
|item_1:
|  Example foo.txt:1:6-1:13>
|item_2:
|  Var foo.txt:1:14-1:37>
|  |f_arg:
|  |  Sequence foo.txt:1:19-1:36>
|  |  |item_0:
|  |  |  NullNode foo.txt:1:19-1:23>
|  |  |item_1:
|  |  |  Example foo.txt:1:24-1:31>
|  |  |item_2:
|  |  |  NullNode foo.txt:1:32-1:36>
|item_3:
|  Example foo.txt:1:38-1:45>
|item_4:
|  NullNode foo.txt:1:46-1:50>

Unit root is a list node = true
Unit root is a token node = false
Unit root image = <Sequence foo.txt:1:1-1:50>
Unit root text = null example var (null example null) example null
Root "p_all_items" = [<NullNode foo.txt:1:1-1:5>, <Example foo.txt:1:6-1:13>, <Var foo.txt:1:14-1:37>, <Example foo.txt:1:38-1:45>, <NullNode foo.txt:1:46-1:50>]
Root "p_example_items" = [<Example foo.txt:1:6-1:13>, <Example foo.txt:1:38-1:45>]
Var (3rd child) = <Var foo.txt:1:14-1:37>
Var image = <Var foo.txt:1:14-1:37>
Var fields = [f_arg]
Var arg = <Sequence foo.txt:1:19-1:36>
Var content = [<NullNode foo.txt:1:19-1:23>, <Example foo.txt:1:24-1:31>, <NullNode foo.txt:1:32-1:36>]
Node equality = true
Node hash equality = true
Node 'p_all_items' member reference equality = true
e1.equals(e2) = true
e1.equals(e3) = false
hash(e1) == hash(e2) = true
hash(e1) == hash(e3) = false
-------------

--- Parent(s) ---
Node <Sequence foo.txt:1:1-1:50> | Parents :

Node <NullNode foo.txt:1:1-1:5> | Parents :
  <Sequence foo.txt:1:1-1:50>

Node <Example foo.txt:1:6-1:13> | Parents :
  <Sequence foo.txt:1:1-1:50>

Node <Var foo.txt:1:14-1:37> | Parents :
  <Sequence foo.txt:1:1-1:50>

Node <Example foo.txt:1:38-1:45> | Parents :
  <Sequence foo.txt:1:1-1:50>

Node <NullNode foo.txt:1:46-1:50> | Parents :
  <Sequence foo.txt:1:1-1:50>

Node <Sequence foo.txt:1:19-1:36> | Parents :
  <Var foo.txt:1:14-1:37>
  <Sequence foo.txt:1:1-1:50>

Node <NullNode foo.txt:1:19-1:23> | Parents :
  <Sequence foo.txt:1:19-1:36>
  <Var foo.txt:1:14-1:37>
  <Sequence foo.txt:1:1-1:50>

Node <Example foo.txt:1:24-1:31> | Parents :
  <Sequence foo.txt:1:19-1:36>
  <Var foo.txt:1:14-1:37>
  <Sequence foo.txt:1:1-1:50>

Node <NullNode foo.txt:1:32-1:36> | Parents :
  <Sequence foo.txt:1:19-1:36>
  <Var foo.txt:1:14-1:37>
  <Sequence foo.txt:1:1-1:50>

proposition (for all node n. for fields fields f of n. parent f = n) is true
-----------------

--- Siblings ---
<NullNode foo.txt:1:1-1:5> | previous = None | next = <Example foo.txt:1:6-1:13>
<Example foo.txt:1:6-1:13> | previous = <NullNode foo.txt:1:1-1:5> | next = <Var foo.txt:1:14-1:37>
<Var foo.txt:1:14-1:37> | previous = <Example foo.txt:1:6-1:13> | next = <Example foo.txt:1:38-1:45>
<Example foo.txt:1:38-1:45> | previous = <Var foo.txt:1:14-1:37> | next = <NullNode foo.txt:1:46-1:50>
<NullNode foo.txt:1:46-1:50> | previous = <Example foo.txt:1:38-1:45> | next = None
----------------

--- Arrays ---
Sequence size = 5
Sequence content :
  <Example foo.txt:1:1-1:8>
  <NullNode foo.txt:1:9-1:13>
  <NullNode foo.txt:1:14-1:18>
  <Example foo.txt:1:19-1:26>
  <Var foo.txt:1:27-1:53>
Array equality = false
Integer array size = 3
Integer array size (from property) = 3
Integer array content :
  1
  2
  3
Expected exception: PROPERTY_ERROR - this is an eror (Stack trace available)
--------------

--- Iterators ---
--- Integer iterator
  1
  2
  3
--- Entity iterator
  <Sequence foo.txt:1:1-1:9>
  <Sequence foo.txt:1:1-1:9>
  <Sequence foo.txt:1:1-1:9>
--- Struct iterator
  SomeStruct(examples=[])
  SomeStruct(examples=[])
--- Iterator as property parameter
Identity iterator is the same = true
-----------------

--- Symbols ---
source = my_ident | symbol = my_ident
source = MY_IDENT | symbol = my_ident
source = no_such_symbol | symbol = no_such_symbol
source = invalid_symbol0 | exception = Invalid symbol : 'invalid_symbol0'
---------------

--- Character ---
The 'a' char = a
The eacute char = 233
Identity of eacute = 233
-----------------

--- String ---
Source = "Hello!" | Identity = "Hello!"
Empty source = "" | Empty identity = ""
--------------

--- Big Integer ---
Double of 42 = 84
Double of 10**100 = 20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-------------------

--- Struct ---
me false = None
me true = <Sequence foo.txt:1:1-1:50>
falseNode.equals(falseNodeStruct.node) = true
root.pMyNode().bareNode = <Sequence foo.txt:1:1-1:50>
aChar.equals(otherChar) = true
--------------

--- Event handlers ---
=== Non null callbacks ===
--- Unit parsed callback
unit: <AnalysisUnit "example">
reparsed: false

--- Unit parsed callback
unit: <AnalysisUnit "example">
reparsed: true

--- Unit requested callback
name: foo_a
from: <AnalysisUnit "example">
found: false
is_not_found_error: false

--- Unit requested callback
name: foo_b
from: <AnalysisUnit "example">
found: true
is_not_found_error: false

--- Unit requested callback
name: foo_c
from: <AnalysisUnit "example">
found: true
is_not_found_error: true

--- Unit requested callback
name: foo_d
from: <AnalysisUnit "example">
found: false
is_not_found_error: true

=== Null callbacks ===
=== Unclosed event handler ===
----------------------

===== End of the Java tests =====
Done
