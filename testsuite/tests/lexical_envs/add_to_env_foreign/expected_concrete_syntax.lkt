grammar None_grammar {
    foreign_decl <- ForeignDecl(identifier)
    main_rule <- list*(or(scope | self_decl | foreign_decl))
    self_decl <- SelfDecl(
        @Plus identifier ?@LPar identifier @RPar
    )
    scope <- Scope(
        simple_identifier @LBrace list+(scope) @RBrace
    )
    identifier <- or(
        | ScopedId(identifier @Dot simple_identifier)
        | simple_identifier
    )
    simple_identifier <- SimpleId(@Identifier)

}

class FooNode {
}

"""
List of FooNode.

This list node can contain one of the following nodes:

* ${node_name(T.ForeignDecl)}
* ${node_name(T.Scope)}
* ${node_name(T.SelfDecl)}
"""
class ASTList[FooNode] : FooNodeBaseList {
}

"""
List of Scope.
"""
class ASTList[Scope] : FooNodeBaseList {
}

class ForeignDecl : FooNode {
    parse field id : Id
}

class Id : FooNode {

    fun simple_name (): SimpleId

    fun resolve (base_env : LexicalEnv): Scope
}

class ScopedId : Id {
    parse field scope : Id
    parse field name : SimpleId

    fun simple_name (): SimpleId = self.name

    fun resolve (base_env : LexicalEnv): Scope =
    self.scope.resolve(base_env).children_env.get(self.name.symbol, only_first=true).node.to[Scope]
}

class SimpleId : Id {

    fun simple_name (): SimpleId = self

    fun resolve (base_env : LexicalEnv): Scope =
    base_env.get(self.symbol, only_first=true).node.to[Scope]
}

class Scope : FooNode {
    parse field name : SimpleId
    parse field content : ASTList[Scope]
}

class SelfDecl : FooNode {
    parse field id : Id
    parse field md_node : Id
}
