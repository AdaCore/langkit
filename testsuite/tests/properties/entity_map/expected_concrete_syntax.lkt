grammar None_grammar {
    decl <- Decl(
        ?"+" Name(@Identifier) "(" ref_list ")"
    )
    main_rule <- list*(decl)
    ref <- Ref(Name(@Identifier))
    ref_list <- list+(ref)

}

class FooNode {

    @export fun b_set (): Boolean = entity.info.md.b
}

class Decl : FooNode {
    @parse_field has_plus : HasPlus
    @parse_field name : Name
    @parse_field items : ASTList[Ref]

    @export fun entity_items (): Array[Entity[Ref]] =
    self.as_entity.items.map((i) => i)
}

@qualifier class HasPlus : FooNode {

    ## Return whether this is an instance of HasPlusPresent
    @export fun as_bool (): Boolean
}

class Name : FooNode {
}

class Ref : FooNode {
    @parse_field name : Name

    @export fun decl (): Entity[Decl] =
    self.children_env.get(self.name)?(0).to[Decl]!
}
