import lexer_example

@with_lexer(foo_lexer)
grammar foo_grammar {
    @main_rule main_rule <- Example(@Example)
}

@abstract
class FooNode implements Node[FooNode] {
    fun resolver(): Entity[FooNode] = null[Entity[FooNode]]
}

class Example: FooNode implements TokenNode {
    @exported
    fun get_all_foo(): Array[Entity[FooNode]] =
        node.children_env().get(s"foo")

    env_spec {
        add_env()
        add_to_env(
            EnvAssoc(
                key=s"foo", value=node, dest_env=DesignatedEnv(
                    kind=DesignatedEnvKind.current_env, env_name=null[Symbol], direct_env=null[LexicalEnv]
                ), metadata=null[Metadata]
            ), resolver=FooNode.resolver
        )
    }
}
