@spacing("alphanumericals", "alphanumericals")
lexer foo_lexer {

    @text whitespace <- p"[ \n\r\t]+"
    @family("alphanumericals") @text def <- "def"
    @text var <- "var"
    @family("alphanumericals") @text error <- "error"
    @family("alphanumericals") @text example <- "example"
    @family("alphanumericals") @text null_tok <- "null"
    @text comma <- ","
    @text dot <- "."
    @text semicolon <- ";"
    @text l_par <- "("
    @text r_par <- ")"
    @text l_brace <- "{"
    @text r_brace <- "}"
    @text equal <- "="
    @text plus <- "+"
    @text minus <- "-"
    @text less_than <- "<"
    @family("alphanumericals") @text number <- p"[0-9]+"
    @family("alphanumericals") @symbol identifier <- p"[a-zA-Z_][a-zA-Z0-9_]*"
    @text string <- p"\"[^\"]*\""
    @newline_after @text comment <- p"#(.?)+"

}
grammar foo_grammar {
    @main_rule main_rule <- RootNode(
        ASTList[BaseDecl]+(or(decl | subdecl | other_decl), ";")
    )
    decl <- Decl("def" name)
    other_decl <- OtherDecl("def" "var" name)
    subdecl <- SubDecl("var" name)
    name <- Name(@identifier)

}

@root_node class FooNode {
}

@abstract class BaseDecl : FooNode {

    @export fun lookup (n : SymbolType): FooNode =
    node.env_lookup(node.node_env, n)

    fun env_lookup (env : LexicalEnv, n : SymbolType): FooNode =
    env.get(n, only_first=true)
}

class Decl : BaseDecl {
    @parse_field name : Name
}

class SubDecl : Decl {
}

class OtherDecl : BaseDecl {
    @parse_field name : Name
}

class Name : FooNode {
}

class RootNode : FooNode {
    @parse_field decls : ASTList[BaseDecl]
}

struct EnvAssoc {
    key : SymbolType
    value : FooNode
    dest_env : LexicalEnv
    metadata : Metadata
}
