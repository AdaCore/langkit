grammar None_grammar {
    defs <- list+(def_rule)
    name <- or(
        | Prefix(name "." Id(@Identifier))
        | Id(@Identifier)
    )
    main_rule <- defs
    def_rule <- or(scope | var)
    var <- Var(Id(@Identifier) "=" name)
    scope <- Scope(?"error" Id(@Identifier) "{" defs "}")

}

@abstract class FooNode {
}

@abstract class DefNode : FooNode {
}

class Scope : DefNode {
    @parse_field error : HasError
    @parse_field name : Id
    @parse_field defs : ASTList[DefNode]
}

class Var : DefNode {
    @parse_field name : Id
    @parse_field value : Name
}

@abstract @qualifier class HasError : FooNode {

    ## Return whether this is an instance of HasErrorPresent
    @export fun as_bool (): Boolean
}

@abstract class Name : FooNode {

    @export fun resolve (): Entity[FooNode]
}

class Id : Name {

    fun resolve (): Entity[FooNode] = self.node_env.get(self, only_first=true)
}

class Prefix : Name {
    @parse_field prefix : Name
    @parse_field suffix : Id

    fun resolve (): Entity[FooNode] =
    self.prefix.resolve.children_env.get(self.suffix.symbol, only_first=true)
}
