== analysis.adb ==

Language name: Foo

Grammar rules:
  Main_Rule (default)
  Var_Decl
  Expr
  Atom
  Number
  Ref
  Name

Token kinds:
  Termination
  Lexing_Failure
  Whitespace
  Def
  Var
  Error
  Example
  Null_Tok
  Comma
  Dot
  Semicolon
  L_Par
  R_Par
  L_Brace
  R_Brace
  Equal
  Plus
  Minus
  Less_Than
  Number
  Identifier
  String
  Comment

Use of null context:
Got a Precondition_Failure exception: null context

Use of null unit:
Got a Precondition_Failure exception: null unit

Use of null node:
Got a Precondition_Failure exception: null node

Parsing example.txt...
Has example.txt? -> TRUE
Has foo.txt? -> FALSE
Line 2:
  "var a = 0;"
Traversing its parsing tree...
<FooNodeList example.txt:1:1-3:15>
<Example example.txt:1:1-1:8>
<VarDecl example.txt:2:1-2:11>
<Name example.txt:2:5-2:6>
<Number example.txt:2:9-2:10>
<VarDecl example.txt:3:1-3:15>
<Name example.txt:3:5-3:6>
<Addition example.txt:3:9-3:14>
<Number example.txt:3:9-3:10>
<Ref example.txt:3:13-3:14>
<Name example.txt:3:13-3:14>

Testing various node operations:
Root.Is_Null -> FALSE
Root.Next_Sibling.Image -> None
Root.Next_Sibling.Is_Null -> TRUE
Root.Child (2).Image -> <VarDecl example.txt:2:1-2:11>
Root.Child (2).Previous_Sibling.Image -> <Example example.txt:1:1-1:8>
[...].Previous_Sibling = [...] -> TRUE
[...].Previous_Sibling = [...].Previous_Sibling.Next_Sibling -> FALSE
Root.Children:
  -> <Example example.txt:1:1-1:8>
  -> <VarDecl example.txt:2:1-2:11>
  -> <VarDecl example.txt:3:1-3:15>

Testing various token operations:
No_Lk_Token.Is_Null -> TRUE
First_Token.Is_Null -> FALSE
First_Token.Kind -> Example
First_Token.Image -> <Token Kind=Example Text="example">
No_Lk_Token.Image -> <No Token>
First_Token.Text -> "example"
No_Lk_Token.Text -> Got a Precondition_Failure exception: null token
No_Lk_Token.Next -> <No Token>
First_Token.Next -> <Token Kind=Whitespace Text="\x0a">
Last_Token.Next -> <No Token>
No_Lk_Token.Previous -> <No Token>
First_Token.Previous -> <No Token>
Last_Token.Previous -> <Token Kind=Whitespace Text="\x0a">
First_Token.Is_Trivia -> FALSE
Last_Token.Is_Trivia -> FALSE
Last_Token.Previous.Is_Trivia -> TRUE
First_Token.Index -> 1

Testing ordering predicate for various cases:
First_Token < Last_Token: -> TRUE
First_Token < No_Lk_Token: -> Got a Precondition_Failure exception: tokens from different units
No_Lk_Token < Last_Token: -> Got a Precondition_Failure exception: tokens from different units
First_Token < Other_Unit -> Got a Precondition_Failure exception: tokens from different units
First_Token < Stale -> Got a Stale_Reference_Error exception: unit was reparsed
Stale < Last_Token -> Got a Stale_Reference_Error exception: unit was reparsed

Testing text range for various cases:
First_Token .. Last_Token: -> "example\x0avar a = 0;\x0avar b = 1 + a;\x0a# Comment\x0a"
First_Token .. No_Lk_Token: -> Got a Precondition_Failure exception: tokens from different units
No_Lk_Token .. Last_Token: -> Got a Precondition_Failure exception: tokens from different units
First_Token .. Other_Unit -> Got a Precondition_Failure exception: tokens from different units
First_Token .. Stale -> Got a Stale_Reference_Error exception: unit was reparsed
Stale .. Last_Token -> Got a Stale_Reference_Error exception: unit was reparsed

Use of stale node reference:
Got a Stale_Reference_Error exception: unit was reparsed

Check generic/specific context type converters
<FooNodeList foo.txt:1:1-1:8>


== introspection_types.adb ==

All types
=========

* AnalysisUnit
* BigInt
* Bool
* Character
* Int
* SourceLocationRange
* String
* Token
* Symbol
* AnalysisUnitKind
  is an enum
* LookupKind
  is an enum
* DesignatedEnvKind
  is an enum
* GrammarRule
  is an enum
* BigInt.array
  is an array
* FooNode.array
  is an array
* Expr.array
  is an array
* AnalysisUnit.array
  is an array
* BigInt.iterator
  is an iterator
* NodeResult
  is a struct
* Point
  is a struct
* FooNode
  is a node
* Example
  is a node
* Expr
  is a node
* Addition
  is a node
* Number
  is a node
* Ref
  is a node
* FooNodeBaseList
  is a node
* FooNode.list
  is a node
* Name
  is a node
* VarDecl
  is a node

Language_For: null T argument: LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: null type reference
To_Index: Null T argument: LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: null type reference
From_Index: out of range type index: LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: invalid type index
Debug_Name: Null T argument: <No_Type_Ref>
Enum types
==========

Analysis_Unit_Kind ( 10)
  Default value: 0

  1: Unit_Specification
  2: Unit_Body

Lookup_Kind ( 11)
  Default value: 0

  1: Recursive
  2: Flat
  3: Minimal

Designated_Env_Kind ( 12)
  Default value: 1

  1: None
  2: Current_Env
  3: Named_Env
  4: Direct_Env

Grammar_Rule ( 13)
  Default value: 0

  1: Main_Rule_Rule
  2: Var_Decl_Rule
  3: Expr_Rule
  4: Atom_Rule
  5: Number_Rule
  6: Ref_Rule
  7: Name_Rule

Is_Enum_Type: Null T argument: LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: null type reference

Invalid args for Enum_Type_Name:
Null Enum argument: LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: null type reference
Non-enum Enum argument: LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: invalid enum type

Invalid args for Enum_Last_Value:
Null Enum argument: LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: null type reference
Non-enum Enum argument: LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: invalid enum type

Invalid args for Enum_Default_Value:
Null Enum argument: LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: null type reference
Non-enum Enum argument: LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: invalid enum type

Enum_Value_Name: Null Value argument: LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: null enum value reference

To_Index: Null Value argument: LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: null enum value reference
From_Index: out of range enum value index: LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: invalid enum value index

Arrays
======

BigInt.array
Array of BigInt

FooNode.array
Array of FooNode

Expr.array
Array of Expr

AnalysisUnit.array
Array of AnalysisUnit

Is_Array_Type: Null T argument: LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: null type reference

Invalid args for Array_Element_Type:
Null T argument: LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: null type reference
Non-array T argument: LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: invalid array type

Iterator types
==============

BigInt.iteratorIterator of BigInt

Is_Iterator_Type: Null T argument: LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: null type reference

Invalid args for Iterator_Element_Type:
Null T argument: LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: null type reference
Non-iterator T argument: LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: invalid iterator type

Structs
=======

Node_Result

Point

Is_Struct_Type: Null T argument: LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: null type reference

Invalid args for Struct_Type_Name:
Null Struct argument: LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: null type reference
Non-struct Struct argument: LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: invalid struct type

Nodes
=====

Foo_Node ( 21)
  is abstract
  base = Bad_Type_Error: trying to get base type of root node
  last derivation = Var_Decl ( 30)
  derivations:
    Example ( 22)
    Expr ( 23)
    Foo_Node_Base_List ( 27)
    Name ( 29)
    Var_Decl ( 30)

Example ( 22)
  base = Foo_Node ( 21)
  last derivation = Example ( 22)
  derivations:
    <none>

Expr ( 23)
  is abstract
  base = Foo_Node ( 21)
  last derivation = Ref ( 26)
  derivations:
    Addition ( 24)
    Number ( 25)
    Ref ( 26)

Addition ( 24)
  base = Expr ( 23)
  last derivation = Addition ( 24)
  derivations:
    <none>

Number ( 25)
  base = Expr ( 23)
  last derivation = Number ( 25)
  derivations:
    <none>

Ref ( 26)
  base = Expr ( 23)
  last derivation = Ref ( 26)
  derivations:
    <none>

Foo_Node_Base_List ( 27)
  is abstract
  base = Foo_Node ( 21)
  last derivation = Foo_Node_List ( 28)
  derivations:
    Foo_Node_List ( 28)

Foo_Node_List ( 28)
  base = Foo_Node_Base_List ( 27)
  last derivation = Foo_Node_List ( 28)
  derivations:
    <none>

Name ( 29)
  base = Foo_Node ( 21)
  last derivation = Name ( 29)
  derivations:
    <none>

Var_Decl ( 30)
  base = Foo_Node ( 21)
  last derivation = Var_Decl ( 30)
  derivations:
    <none>

Is_Node_Type: Null T argument: LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: null type reference

Invalid args for Node_Type_Name:
Null Node argument: LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: null type reference
Non-node Node argument: LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: invalid node type

Invalid args for Is_Abstract:
Null Node argument: LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: null type reference
Non-node Node argument: LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: invalid node type

Invalid args for Is_Concrete:
Null Node argument: LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: null type reference
Non-node Node argument: LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: invalid node type

Invalid args for Base_Type:
Null Node argument: LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: null type reference
Non-node Node argument: LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: invalid node type
Root Node argument: LANGKIT_SUPPORT.ERRORS.INTROSPECTION.BAD_TYPE_ERROR: trying to get base type of root node

Invalid args for Derived_Types:
Null Node argument: LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: null type reference
Non-node Node argument: LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: invalid node type

Invalid args for Last_Derived_Type:
Null Node argument: LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: null type reference
Non-node Node argument: LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: invalid node type

Check Is_Derived_From:
Checking: root derives from root
Checking: expr derives from root
Checking: addition derives from root
Checking: ref does not derive from number
Null Node argument: LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: null type reference
Non-node Node argument: LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: invalid node type
Null Parent argument: LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: null type reference
Non-node Parent argument: LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: invalid node type

Members
=======

For Node_Result
  N (NodeResult.n: 1)
  E (NodeResult.e: 2)

For Point
  Label (Point.label: 3)
  X (Point.x: 4)
  Y (Point.y: 5)

For Foo_Node
  Parent (FooNode.parent: 11)
  Parents (FooNode.parents: 12)
  Children (FooNode.children: 13)
  Token_Start (FooNode.token_start: 14)
  Token_End (FooNode.token_end: 15)
  Child_Index (FooNode.child_index: 16)
  Previous_Sibling (FooNode.previous_sibling: 17)
  Next_Sibling (FooNode.next_sibling: 18)
  Unit (FooNode.unit: 19)
  Is_Ghost (FooNode.is_ghost: 20)
  Full_Sloc_Image (FooNode.full_sloc_image: 21)

For Example
  Parent (FooNode.parent: 11)
  Parents (FooNode.parents: 12)
  Children (FooNode.children: 13)
  Token_Start (FooNode.token_start: 14)
  Token_End (FooNode.token_end: 15)
  Child_Index (FooNode.child_index: 16)
  Previous_Sibling (FooNode.previous_sibling: 17)
  Next_Sibling (FooNode.next_sibling: 18)
  Unit (FooNode.unit: 19)
  Is_Ghost (FooNode.is_ghost: 20)
  Full_Sloc_Image (FooNode.full_sloc_image: 21)
  P_Prop (Example.p_prop: 22)
  P_Result (Example.p_result: 23)
  P_Id_Bool (Example.p_id_bool: 24)
  P_Id_Int (Example.p_id_int: 25)
  P_Id_Bigint (Example.p_id_bigint: 26)
  P_Id_Char (Example.p_id_char: 27)
  P_Id_Token (Example.p_id_token: 28)
  P_Id_Sym (Example.p_id_sym: 29)
  P_Id_Unit (Example.p_id_unit: 30)
  P_Id_Root_Node (Example.p_id_root_node: 31)
  P_Id_Name (Example.p_id_name: 32)
  P_Id_Unit_Kind (Example.p_id_unit_kind: 33)
  P_Id_Node_Array (Example.p_id_node_array: 34)
  P_Id_Expr_Array (Example.p_id_expr_array: 35)
  P_Id_Bigint_Array (Example.p_id_bigint_array: 36)
  P_Id_Unit_Array (Example.p_id_unit_array: 37)
  P_Create_Bigint_Iterator (Example.p_create_bigint_iterator: 38)
  P_Id_Bigint_Iterator (Example.p_id_bigint_iterator: 39)
  P_Id_Dflt_Bool (Example.p_id_dflt_bool: 40)
  P_Id_Dflt_Int (Example.p_id_dflt_int: 41)
  P_Id_Dflt_Char (Example.p_id_dflt_char: 42)
  P_Id_Dflt_Root_Node (Example.p_id_dflt_root_node: 43)

For Expr
  Parent (FooNode.parent: 11)
  Parents (FooNode.parents: 12)
  Children (FooNode.children: 13)
  Token_Start (FooNode.token_start: 14)
  Token_End (FooNode.token_end: 15)
  Child_Index (FooNode.child_index: 16)
  Previous_Sibling (FooNode.previous_sibling: 17)
  Next_Sibling (FooNode.next_sibling: 18)
  Unit (FooNode.unit: 19)
  Is_Ghost (FooNode.is_ghost: 20)
  Full_Sloc_Image (FooNode.full_sloc_image: 21)

For Addition
  Parent (FooNode.parent: 11)
  Parents (FooNode.parents: 12)
  Children (FooNode.children: 13)
  Token_Start (FooNode.token_start: 14)
  Token_End (FooNode.token_end: 15)
  Child_Index (FooNode.child_index: 16)
  Previous_Sibling (FooNode.previous_sibling: 17)
  Next_Sibling (FooNode.next_sibling: 18)
  Unit (FooNode.unit: 19)
  Is_Ghost (FooNode.is_ghost: 20)
  Full_Sloc_Image (FooNode.full_sloc_image: 21)
  F_Lhs (Addition.f_lhs: 6)
  F_Rhs (Addition.f_rhs: 7)

For Number
  Parent (FooNode.parent: 11)
  Parents (FooNode.parents: 12)
  Children (FooNode.children: 13)
  Token_Start (FooNode.token_start: 14)
  Token_End (FooNode.token_end: 15)
  Child_Index (FooNode.child_index: 16)
  Previous_Sibling (FooNode.previous_sibling: 17)
  Next_Sibling (FooNode.next_sibling: 18)
  Unit (FooNode.unit: 19)
  Is_Ghost (FooNode.is_ghost: 20)
  Full_Sloc_Image (FooNode.full_sloc_image: 21)

For Ref
  Parent (FooNode.parent: 11)
  Parents (FooNode.parents: 12)
  Children (FooNode.children: 13)
  Token_Start (FooNode.token_start: 14)
  Token_End (FooNode.token_end: 15)
  Child_Index (FooNode.child_index: 16)
  Previous_Sibling (FooNode.previous_sibling: 17)
  Next_Sibling (FooNode.next_sibling: 18)
  Unit (FooNode.unit: 19)
  Is_Ghost (FooNode.is_ghost: 20)
  Full_Sloc_Image (FooNode.full_sloc_image: 21)
  F_Name (Ref.f_name: 8)

For Foo_Node_Base_List
  Parent (FooNode.parent: 11)
  Parents (FooNode.parents: 12)
  Children (FooNode.children: 13)
  Token_Start (FooNode.token_start: 14)
  Token_End (FooNode.token_end: 15)
  Child_Index (FooNode.child_index: 16)
  Previous_Sibling (FooNode.previous_sibling: 17)
  Next_Sibling (FooNode.next_sibling: 18)
  Unit (FooNode.unit: 19)
  Is_Ghost (FooNode.is_ghost: 20)
  Full_Sloc_Image (FooNode.full_sloc_image: 21)

For Foo_Node_List
  Parent (FooNode.parent: 11)
  Parents (FooNode.parents: 12)
  Children (FooNode.children: 13)
  Token_Start (FooNode.token_start: 14)
  Token_End (FooNode.token_end: 15)
  Child_Index (FooNode.child_index: 16)
  Previous_Sibling (FooNode.previous_sibling: 17)
  Next_Sibling (FooNode.next_sibling: 18)
  Unit (FooNode.unit: 19)
  Is_Ghost (FooNode.is_ghost: 20)
  Full_Sloc_Image (FooNode.full_sloc_image: 21)

For Name
  Parent (FooNode.parent: 11)
  Parents (FooNode.parents: 12)
  Children (FooNode.children: 13)
  Token_Start (FooNode.token_start: 14)
  Token_End (FooNode.token_end: 15)
  Child_Index (FooNode.child_index: 16)
  Previous_Sibling (FooNode.previous_sibling: 17)
  Next_Sibling (FooNode.next_sibling: 18)
  Unit (FooNode.unit: 19)
  Is_Ghost (FooNode.is_ghost: 20)
  Full_Sloc_Image (FooNode.full_sloc_image: 21)

For Var_Decl
  Parent (FooNode.parent: 11)
  Parents (FooNode.parents: 12)
  Children (FooNode.children: 13)
  Token_Start (FooNode.token_start: 14)
  Token_End (FooNode.token_end: 15)
  Child_Index (FooNode.child_index: 16)
  Previous_Sibling (FooNode.previous_sibling: 17)
  Next_Sibling (FooNode.next_sibling: 18)
  Unit (FooNode.unit: 19)
  Is_Ghost (FooNode.is_ghost: 20)
  Full_Sloc_Image (FooNode.full_sloc_image: 21)
  F_Name (VarDecl.f_name: 9)
  F_Value (VarDecl.f_value: 10)

Detailed list of members
========================

N (NodeResult.n: 1)
  owner: NodeResult
  type: Example
  no argument

E (NodeResult.e: 2)
  owner: NodeResult
  type: Example
  no argument

Label (Point.label: 3)
  owner: Point
  type: String
  no argument

X (Point.x: 4)
  owner: Point
  type: BigInt
  no argument

Y (Point.y: 5)
  owner: Point
  type: BigInt
  no argument

F_Lhs (Addition.f_lhs: 6)
  owner: Addition
  type: Expr
  no argument

F_Rhs (Addition.f_rhs: 7)
  owner: Addition
  type: Expr
  no argument

F_Name (Ref.f_name: 8)
  owner: Ref
  type: Name
  no argument

F_Name (VarDecl.f_name: 9)
  owner: VarDecl
  type: Name
  no argument

F_Value (VarDecl.f_value: 10)
  owner: VarDecl
  type: Expr
  no argument

Parent (FooNode.parent: 11)
  owner: FooNode
  is a property
  type: FooNode
  no argument

Parents (FooNode.parents: 12)
  owner: FooNode
  is a property
  type: FooNode.array
  arguments:
    With_Self: Bool := True

Children (FooNode.children: 13)
  owner: FooNode
  is a property
  type: FooNode.array
  no argument

Token_Start (FooNode.token_start: 14)
  owner: FooNode
  is a property
  type: Token
  no argument

Token_End (FooNode.token_end: 15)
  owner: FooNode
  is a property
  type: Token
  no argument

Child_Index (FooNode.child_index: 16)
  owner: FooNode
  is a property
  type: Int
  no argument

Previous_Sibling (FooNode.previous_sibling: 17)
  owner: FooNode
  is a property
  type: FooNode
  no argument

Next_Sibling (FooNode.next_sibling: 18)
  owner: FooNode
  is a property
  type: FooNode
  no argument

Unit (FooNode.unit: 19)
  owner: FooNode
  is a property
  type: AnalysisUnit
  no argument

Is_Ghost (FooNode.is_ghost: 20)
  owner: FooNode
  is a property
  type: Bool
  no argument

Full_Sloc_Image (FooNode.full_sloc_image: 21)
  owner: FooNode
  is a property
  type: String
  no argument

P_Prop (Example.p_prop: 22)
  owner: Example
  is a property
  type: Point
  arguments:
    P: Point

P_Result (Example.p_result: 23)
  owner: Example
  is a property
  type: NodeResult
  no argument

P_Id_Bool (Example.p_id_bool: 24)
  owner: Example
  is a property
  type: Bool
  arguments:
    Id: Bool

P_Id_Int (Example.p_id_int: 25)
  owner: Example
  is a property
  type: Int
  arguments:
    Id: Int

P_Id_Bigint (Example.p_id_bigint: 26)
  owner: Example
  is a property
  type: BigInt
  arguments:
    Id: BigInt

P_Id_Char (Example.p_id_char: 27)
  owner: Example
  is a property
  type: Character
  arguments:
    Id: Character

P_Id_Token (Example.p_id_token: 28)
  owner: Example
  is a property
  type: Token
  arguments:
    Id: Token

P_Id_Sym (Example.p_id_sym: 29)
  owner: Example
  is a property
  type: Symbol
  arguments:
    Id: Symbol

P_Id_Unit (Example.p_id_unit: 30)
  owner: Example
  is a property
  type: AnalysisUnit
  arguments:
    Id: AnalysisUnit

P_Id_Root_Node (Example.p_id_root_node: 31)
  owner: Example
  is a property
  type: FooNode
  arguments:
    Id: FooNode

P_Id_Name (Example.p_id_name: 32)
  owner: Example
  is a property
  type: Name
  arguments:
    Id: Name

P_Id_Unit_Kind (Example.p_id_unit_kind: 33)
  owner: Example
  is a property
  type: AnalysisUnitKind
  arguments:
    Id: AnalysisUnitKind

P_Id_Node_Array (Example.p_id_node_array: 34)
  owner: Example
  is a property
  type: FooNode.array
  arguments:
    Id: FooNode.array

P_Id_Expr_Array (Example.p_id_expr_array: 35)
  owner: Example
  is a property
  type: Expr.array
  arguments:
    Id: Expr.array

P_Id_Bigint_Array (Example.p_id_bigint_array: 36)
  owner: Example
  is a property
  type: BigInt.array
  arguments:
    Id: BigInt.array

P_Id_Unit_Array (Example.p_id_unit_array: 37)
  owner: Example
  is a property
  type: AnalysisUnit.array
  arguments:
    Id: AnalysisUnit.array

P_Create_Bigint_Iterator (Example.p_create_bigint_iterator: 38)
  owner: Example
  is a property
  type: BigInt.iterator
  no argument

P_Id_Bigint_Iterator (Example.p_id_bigint_iterator: 39)
  owner: Example
  is a property
  type: BigInt.iterator
  arguments:
    Id: BigInt.iterator

P_Id_Dflt_Bool (Example.p_id_dflt_bool: 40)
  owner: Example
  is a property
  type: Bool
  arguments:
    Id: Bool := True

P_Id_Dflt_Int (Example.p_id_dflt_int: 41)
  owner: Example
  is a property
  type: Int
  arguments:
    Id: Int := 42

P_Id_Dflt_Char (Example.p_id_dflt_char: 42)
  owner: Example
  is a property
  type: Character
  arguments:
    Id: Character := '\x00'

P_Id_Dflt_Root_Node (Example.p_id_dflt_root_node: 43)
  owner: Example
  is a property
  type: FooNode
  arguments:
    Id: FooNode := <No node>

Is_Property: Null Member argument: LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: null struct member reference

Invalid args for Members:
Null Struct argument: LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: null type reference
Non-struct Struct argument: LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: invalid base struct type

Member_Name: Null Member argument: LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: null struct member reference

Member_Type: Null Member argument: LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: null struct member reference

To_Index: Null Member argument: LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: null struct member reference
From_Index: out of range member index: LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: invalid struct member index
Member_Last_Argument: Null Member argument: LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: null struct member reference

Invalid args for Member_Argument_Type:
Null Member argument: LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: null struct member reference
Invalid Argument argument: LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: invalid struct member argument

Invalid args for Member_Argument_Name:
Null Member argument: LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: null struct member reference
Invalid Argument argument: LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: invalid struct member argument

Invalid args for Member_Argument_Default_Value:
Null Member argument: LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: null struct member reference
Invalid Argument argument: LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: invalid struct member argument

== introspection_values.adb ==
Value comparisons
=================

<No_Value_Ref> = <No_Value_Ref> => TRUE
<No_Value_Ref> = False => FALSE
False = False => TRUE
True = False => FALSE
False = 1 => FALSE

Value constructors/getters
==========================

Inspect: <No_Value_Ref>
  Type_Of: LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: null value reference
Inspect: <No analysis unit>
  Type_Of: AnalysisUnit
Inspect: <Unit for example.txt>
  Type_Of: AnalysisUnit
Inspect: BigInt(9111111111124567890)
  Type_Of: BigInt
Inspect: True
  Type_Of: Bool
Inspect: False
  Type_Of: Bool
Inspect: 'A'
  Type_Of: Character
Inspect: 42
  Type_Of: Int
Inspect: 1:2-3:4
  Type_Of: SourceLocationRange
Inspect: "hello, world!"
  Type_Of: String
Inspect: <Token Kind=Example Text="example">
  Type_Of: Token
Inspect: Symbol("foo_bar42")
  Type_Of: Symbol
Inspect: <No node>
  Type_Of: FooNode
Inspect: <FooNodeList example.txt:1:1-3:15>
  Type_Of: FooNode.list

Enum values introspection
=========================

Create_Enum: null enum value ref: LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: null enum value reference
Inspect: Analysis_Unit_Kind(UNIT_SPECIFICATION)
  Type_Of: AnalysisUnitKind

Array values introspection
==========================

Create_Array: null array type: LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: null type reference
Create_Array: null value reference: LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: null value reference
Create_Array: value type mismatch: LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: unexpected value type
Inspect: Array of 0 FooNode elements
  Type_Of: FooNode.array
Inspect: Array of 1 FooNode elements
  Type_Of: FooNode.array
As_Array: null value: LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: null value reference
As_Array: value type mismatch: LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: non-array value
Array_Length: null value: LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: null value reference
Array_Length: value type mismatch: LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: non-array value
Array_Item: null value: LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: null value reference
Array_Item: value type mismatch: LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: non-array value

Array_Item: index checks
  array: Array of 3 BigInt elements
  ( 1): BigInt(10)
  ( 2): BigInt(20)
  ( 3): BigInt(30)
  ( 4): LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: out-of-bounds array index
  ( 5): LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: out-of-bounds array index

Iterator values introspection
=============================

Iterator_Next: null value: LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: null value reference
Iterator_Next: value type mismatch: LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: non-iterator value

Full iteration through Iterator_Next:
Inspect: Iterator on BigInt
  Type_Of: BigInt.iterator

Inspect: BigInt(1)
  Type_Of: BigInt
Inspect: BigInt(2)
  Type_Of: BigInt
Inspect: BigInt(3)
  Type_Of: BigInt

Struct values introspection
===========================

Create_Struct: null struct type: LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: null type reference
Create_Struct: invalid struct type: LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: invalid struct type
Create_Struct: null value reference: LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: invalid null value
Create_Struct: value type mismatch: LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: member type mismatch
Create_Struct: value count mismatch: LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: NodeResult has 2 members but got 1 value(s)
Inspect: Point("hello world!", BigInt(10), BigInt(20))
  Type_Of: Point
Eval_Member: null struct value: LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: null value reference
Eval_Member: invalid struct type: LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: invalid base struct type
Eval_Member: no such member: LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: Point does not have the NodeResult.n member
Eval_Member: too many arguments: LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: Point takes 0 arguments but got 1 values
Eval_Member: argument type mismatch: LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: unexpected type for argument 1
Eval_Member: no such node member: LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: FooNode.list does not have the Example.p_id_bool member
Eval_Member: Point_Label on Point("hello world!", BigInt(10), BigInt(20)):
Inspect: "hello world!"
  Type_Of: String

Eval_Member: Example.p_id_bool:
Inspect: True
  Type_Of: Bool

Eval_Member: Example.p_id_int:
Inspect: 42
  Type_Of: Int

Eval_Member: Example.p_id_bigint:
Inspect: BigInt(1234567890987654321)
  Type_Of: BigInt

Eval_Member: Example.p_id_char:
Inspect: 'A'
  Type_Of: Character

Eval_Member: Example.p_id_token:
Inspect: <Token Kind=Example Text="example">
  Type_Of: Token

Eval_Member: Example.p_id_sym:
Inspect: Symbol("foobar")
  Type_Of: Symbol

Eval_Member: Example.p_id_unit:
Inspect: <Unit for example.txt>
  Type_Of: AnalysisUnit

Eval_Member: Example.p_id_root_node:
Inspect: <FooNodeList example.txt:1:1-3:15>
  Type_Of: FooNode.list

Eval_Member: Example.p_id_name:
Inspect: <No node>
  Type_Of: FooNode

Eval_Member: Example.p_id_name:
Inspect: <Name example.txt:2:5-2:6>
  Type_Of: Name

Eval_Member: Example.p_id_unit_kind:
Inspect: Analysis_Unit_Kind(UNIT_SPECIFICATION)
  Type_Of: AnalysisUnitKind

Eval_Member: Example.p_id_node_array:
Inspect: Array of 1 FooNode elements
  Type_Of: FooNode.array

Eval_Member: Example.p_id_expr_array:
Inspect: Array of 1 Expr elements
  Type_Of: Expr.array

Eval_Member: Example.p_id_bigint_iterator:
Inspect: Iterator on BigInt
  Type_Of: BigInt.iterator

Type matching
=============

Basic cases:
32 matches Int? True
32 matches Bool? False
<FooNodeList example.txt:1:1-3:15> matches Bool? False

Nodes:
<FooNodeList example.txt:1:1-3:15> matches FooNode? True
<FooNodeList example.txt:1:1-3:15> matches VarDecl? False
<No node> matches FooNode? True
<No node> matches VarDecl? True

Error cases:
<No_Value_Ref> matches Int? LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: null value reference
<No node> matches <No_Type_Ref>? LANGKIT_SUPPORT.ERRORS.PRECONDITION_FAILURE: null type reference


== hash.adb ==
hash.adb: no error

Done
