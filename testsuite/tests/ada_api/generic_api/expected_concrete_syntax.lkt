import lexer_example

@with_lexer(foo_lexer)
grammar foo_grammar {
    ## Parser main entry point
    @main_rule main_rule <- list+(or(var_decl | Example(@example name)))
    null_qual <- NullQual("null")
    var_decl <- VarDecl(null_qual "var" name "=" expr ";")
    ## Use this to parse
    ## any kind of expression.
    @entry_point expr <- or(Addition(expr "+" expr) | atom)
    atom <- or(number | ref)
    number <- Number(@number)
    ref <- Ref(name)
    name <- Name(@identifier)
}

@abstract class FooNode implements Node[FooNode] {
}

@abstract class BaseExample : FooNode {
    @abstract @parse_field fld_1: Name
    @abstract @parse_field @nullable fld_2: FooNode

    @export @abstract fun id_bool(id: Bool): Bool
}

class Example : BaseExample {
    @parse_field @null_field fld_2: FooNode
    @parse_field fld_1: Name

    fun to_public(p: PrivatePoint): Point =
    Point(label="from private", x=p.x, y=p.y)

    @export fun prop(p: Point): Point =
    node.to_public(PrivatePoint(x=p.x, y=p.y))

    @export fun result(): NodeResult = NodeResult(n=node, e=self)

    fun id_bool(id: Bool): Bool = id

    @export fun id_int(id: Int): Int = id

    @export fun id_bigint(id: BigInt): BigInt = id

    @export fun id_char(id: Char): Char = id

    @export fun id_token(id: Token): Token = id

    @export fun id_sym(id: Symbol): Symbol = id

    @export fun id_unit(id: AnalysisUnit[FooNode]): AnalysisUnit[FooNode] = id

    @export fun id_root_node(id: FooNode): FooNode = id

    @export fun id_name(id: Name): Name = id

    @export fun id_unit_kind(id: AnalysisUnitKind): AnalysisUnitKind = id

    @export fun id_node_array(id: Array[FooNode]): Array[FooNode] = id

    @export fun id_expr_array(id: Array[Expr]): Array[Expr] = id

    @export fun id_bigint_array(id: Array[BigInt]): Array[BigInt] = id

    @export fun id_unit_array(id: Array[AnalysisUnit[FooNode]]): Array[AnalysisUnit[FooNode]] =
    id

    @export fun create_bigint_iterator(): Iterator[BigInt] =
    [1b, 2b, 3b].to_iterator()

    @export fun id_bigint_iterator(id: Iterator[BigInt]): Iterator[BigInt] = id

    @export fun id_dflt_bool(id: Bool = true): Bool = id

    @export fun id_dflt_int(id: Int = 42): Int = id

    @export fun id_dflt_char(id: Char = '\x00'): Char = id

    @export fun id_dflt_root_node(id: FooNode = null[FooNode]): FooNode = id

    @export fun with_md(md1: Bool, md2: Bool): Example = Example(
        node=self.node, info=EntityInfo(
            md=Metadata(md1=md1, md2=md2), rebindings=self.info.rebindings, from_rebound=self.info.from_rebound
        )
    )
}

@abstract class Expr : FooNode {
}

class Addition : Expr {
    @parse_field lhs: Expr
    @parse_field rhs: Expr
}

class Number : Expr implements TokenNode {
}

class Ref : Expr {
    @parse_field name: Name
}

class Name : FooNode implements TokenNode {
}

@qualifier enum class NullQual : FooNode {
}

class VarDecl : FooNode {
    @parse_field is_null: NullQual
    @parse_field name: Name
    @parse_field value: Expr
}

struct NodeResult {
    n: Example
    e: Example
}

struct Point {
    label: String
    x: BigInt
    y: BigInt
}

struct PrivatePoint {
    x: BigInt
    y: BigInt
}
