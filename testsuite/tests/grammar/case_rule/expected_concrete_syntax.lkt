lexer foo_lexer {

    char
    dot <- "."
    id <- p"[a-zA-Z]+"
    tick <- "'"
    newline <- p"\n"

    match p"'.'" {
        if previous_token is id then send(tick, 1)
        else send(char, 3)
    }
}
@with_lexer(foo_lexer)
grammar foo_grammar {
    @main_rule expr <- or(
        | DotExpr(expr "." name)
        | AttrRef(expr "'" name)
        | char_lit
        | name
    )
    char_lit <- CharLit(@char)
    name <- Name(@id)

}

@abstract class FooNode implements Node {
}

@abstract class Expr : FooNode {
}

class AttrRef : Expr {
    @parse_field prefix : Expr
    @parse_field name : Name
}

class CharLit : Expr implements TokenNode {
}

class DotExpr : Expr {
    @parse_field prefix : Expr
    @parse_field suffix : Name
}

class Name : Expr implements TokenNode {
}
