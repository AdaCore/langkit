import lexer_example

@with_lexer(foo_lexer)
grammar foo_grammar {
    @main_rule main_rule <- list*(sequence)
    sequence <- Sequence("(" list*(sequence_item) ")")
    sequence_item <- or(Number(@Number) | Identifier(@Identifier))
}

@abstract
class FooNode implements Node[FooNode] {
}

class Identifier: FooNode implements TokenNode {
}

class Number: FooNode implements TokenNode {
}

class Sequence: FooNode {
    @parse_field items: ASTList[FooNode]

    @exported
    fun keep_list(): Array[Entity[Identifier]] = self.items.keep[Identifier]

    @exported
    fun keep_array(items: Array[Entity[FooNode]]): Array[Entity[Identifier]] =
        items.keep[Identifier]
}
