grammar foo_grammar {
    @main_rule main_rule <- list+(decl)
    decl <- Decl(Name(@Identifier) "(" ref_list ")")
    ref_list <- list*(ref)
    ref <- Ref(Name(@Identifier))

}

@root_node class FooNode {
}

class Decl : FooNode {
    @parse_field name : Name
    @parse_field items : ASTList[Ref]
}

class Name : FooNode {
}

class Ref : FooNode {
    @parse_field name : Name

    @export fun decl_wrapper (): Decl = self.decl

    @export fun decl (): Decl =
    node.children_env.get(node.name, only_first=true).to[Decl]!
}

struct EnvAssoc {
    key : SymbolType
    value : FooNode
    dest_env : LexicalEnv
    metadata : Metadata
}
