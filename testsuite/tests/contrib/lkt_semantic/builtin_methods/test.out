Resolving test.lkt
==================
Id   <RefId "Node" test.lkt:1:14-1:18>
     references <ClassDecl prelude: "Node">

Id   <RefId "TokenNode" test.lkt:1:30-1:39>
     references <TraitDecl prelude: "TokenNode">

Id   <RefId "Node" test.lkt:3:25-3:29>
     references <ClassDecl prelude: "Node">

Id   <RefId "node" test.lkt:3:32-3:36>
     references <NodeDecl "node" test.lkt:1:1-26:2>

Expr <RefId "node" test.lkt:3:32-3:36>
     has type <ClassDecl "Name" test.lkt:1:1-26:2>

Id   <RefId "parent" test.lkt:3:37-3:43>
     references <FunDecl prelude: "parent">

Expr <RefId "parent" test.lkt:3:37-3:43>
     has type <ClassDecl prelude: "Node">

Expr <DotExpr test.lkt:3:32-3:43>
     has type <ClassDecl prelude: "Node">

Id   <RefId "LexicalEnv" test.lkt:5:24-5:34>
     references <ClassDecl prelude: "LexicalEnv">

Id   <RefId "node" test.lkt:5:37-5:41>
     references <NodeDecl "node" test.lkt:1:1-26:2>

Expr <RefId "node" test.lkt:5:37-5:41>
     has type <ClassDecl "Name" test.lkt:1:1-26:2>

Id   <RefId "parent" test.lkt:5:42-5:48>
     references <FunDecl prelude: "parent">

Expr <RefId "parent" test.lkt:5:42-5:48>
     has type <ClassDecl prelude: "Node">

Expr <DotExpr test.lkt:5:37-5:48>
     has type <ClassDecl prelude: "Node">

Id   <RefId "node_env" test.lkt:5:49-5:57>
     references <FunDecl prelude: "node_env">

Expr <RefId "node_env" test.lkt:5:49-5:57>
     has type <FunctionType prelude: "() -> LexicalEnv">

Expr <DotExpr test.lkt:5:37-5:57>
     has type <FunctionType prelude: "() -> LexicalEnv">

Expr <CallExpr test.lkt:5:37-5:59>
     has type <ClassDecl prelude: "LexicalEnv">

Id   <RefId "LexicalEnv" test.lkt:6:24-6:34>
     references <ClassDecl prelude: "LexicalEnv">

Id   <RefId "node" test.lkt:6:37-6:41>
     references <NodeDecl "node" test.lkt:1:1-26:2>

Expr <RefId "node" test.lkt:6:37-6:41>
     has type <ClassDecl "Name" test.lkt:1:1-26:2>

Id   <RefId "parent_node" test.lkt:6:42-6:53>
     references <FunDecl "parent_node" test.lkt:3:5-3:43>

Expr <RefId "parent_node" test.lkt:6:42-6:53>
     has type <FunctionType prelude: "() -> Node">

Expr <DotExpr test.lkt:6:37-6:53>
     has type <FunctionType prelude: "() -> Node">

Expr <CallExpr test.lkt:6:37-6:55>
     has type <ClassDecl prelude: "Node">

Id   <RefId "node_env" test.lkt:6:56-6:64>
     references <FunDecl prelude: "node_env">

Expr <RefId "node_env" test.lkt:6:56-6:64>
     has type <FunctionType prelude: "() -> LexicalEnv">

Expr <DotExpr test.lkt:6:37-6:64>
     has type <FunctionType prelude: "() -> LexicalEnv">

Expr <CallExpr test.lkt:6:37-6:66>
     has type <ClassDecl prelude: "LexicalEnv">

Id   <RefId "Node" test.lkt:8:29-8:33>
     references <ClassDecl prelude: "Node">

Id   <RefId "node" test.lkt:8:36-8:40>
     references <NodeDecl "node" test.lkt:1:1-26:2>

Expr <RefId "node" test.lkt:8:36-8:40>
     has type <ClassDecl "Name" test.lkt:1:1-26:2>

Id   <RefId "parent" test.lkt:8:41-8:47>
     references <FunDecl prelude: "parent">

Expr <RefId "parent" test.lkt:8:41-8:47>
     has type <ClassDecl prelude: "Node">

Expr <DotExpr test.lkt:8:36-8:47>
     has type <ClassDecl prelude: "Node">

Id   <RefId "node_env" test.lkt:8:48-8:56>
     references <FunDecl prelude: "node_env">

Expr <RefId "node_env" test.lkt:8:48-8:56>
     has type <FunctionType prelude: "() -> LexicalEnv">

Expr <DotExpr test.lkt:8:36-8:56>
     has type <FunctionType prelude: "() -> LexicalEnv">

Expr <CallExpr test.lkt:8:36-8:58>
     has type <ClassDecl prelude: "LexicalEnv">

Id   <RefId "get" test.lkt:8:59-8:62>
     references <FunDecl prelude: "get">

Expr <RefId "get" test.lkt:8:59-8:62>
     has type <FunctionType prelude: "(Symbol) -> Array[Node]">

Expr <DotExpr test.lkt:8:36-8:62>
     has type <FunctionType prelude: "(Symbol) -> Array[Node]">

Id   <RefId "node" test.lkt:8:63-8:67>
     references <NodeDecl "node" test.lkt:1:1-26:2>

Expr <RefId "node" test.lkt:8:63-8:67>
     has type <ClassDecl "Name" test.lkt:1:1-26:2>

Id   <RefId "symbol" test.lkt:8:68-8:74>
     references <FunDecl prelude: "symbol">

Expr <RefId "symbol" test.lkt:8:68-8:74>
     has type <StructDecl prelude: "Symbol">

Expr <DotExpr test.lkt:8:63-8:74>
     has type <StructDecl prelude: "Symbol">

Expr <CallExpr test.lkt:8:36-8:75>
     has type <InstantiatedGenericType prelude: "Array[Node]">

Expr <NumLit test.lkt:8:77-8:78>
     has type <StructDecl prelude: "Int">

Expr <NullCondCallExpr test.lkt:8:36-8:79>
     has type <ClassDecl prelude: "Node">

Id   <RefId "Node" test.lkt:9:29-9:33>
     references <ClassDecl prelude: "Node">

Id   <RefId "node" test.lkt:9:36-9:40>
     references <NodeDecl "node" test.lkt:1:1-26:2>

Expr <RefId "node" test.lkt:9:36-9:40>
     has type <ClassDecl "Name" test.lkt:1:1-26:2>

Id   <RefId "parent_env" test.lkt:9:41-9:51>
     references <FunDecl "parent_env" test.lkt:6:5-6:66>

Expr <RefId "parent_env" test.lkt:9:41-9:51>
     has type <FunctionType prelude: "() -> LexicalEnv">

Expr <DotExpr test.lkt:9:36-9:51>
     has type <FunctionType prelude: "() -> LexicalEnv">

Expr <CallExpr test.lkt:9:36-9:53>
     has type <ClassDecl prelude: "LexicalEnv">

Id   <RefId "get" test.lkt:9:54-9:57>
     references <FunDecl prelude: "get">

Expr <RefId "get" test.lkt:9:54-9:57>
     has type <FunctionType prelude: "(Symbol) -> Array[Node]">

Expr <DotExpr test.lkt:9:36-9:57>
     has type <FunctionType prelude: "(Symbol) -> Array[Node]">

Id   <RefId "node" test.lkt:9:58-9:62>
     references <NodeDecl "node" test.lkt:1:1-26:2>

Expr <RefId "node" test.lkt:9:58-9:62>
     has type <ClassDecl "Name" test.lkt:1:1-26:2>

Id   <RefId "symbol" test.lkt:9:63-9:69>
     references <FunDecl prelude: "symbol">

Expr <RefId "symbol" test.lkt:9:63-9:69>
     has type <StructDecl prelude: "Symbol">

Expr <DotExpr test.lkt:9:58-9:69>
     has type <StructDecl prelude: "Symbol">

Expr <CallExpr test.lkt:9:36-9:70>
     has type <InstantiatedGenericType prelude: "Array[Node]">

Expr <NumLit test.lkt:9:72-9:73>
     has type <StructDecl prelude: "Int">

Expr <NullCondCallExpr test.lkt:9:36-9:74>
     has type <ClassDecl prelude: "Node">

Id   <RefId "Node" test.lkt:11:32-11:36>
     references <ClassDecl prelude: "Node">

Id   <RefId "node" test.lkt:11:39-11:43>
     references <NodeDecl "node" test.lkt:1:1-26:2>

Expr <RefId "node" test.lkt:11:39-11:43>
     has type <ClassDecl "Name" test.lkt:1:1-26:2>

Id   <RefId "unit" test.lkt:11:44-11:48>
     references <FunDecl prelude: "unit">

Expr <RefId "unit" test.lkt:11:44-11:48>
     has type <FunctionType prelude: "() -> AnalysisUnit">

Expr <DotExpr test.lkt:11:39-11:48>
     has type <FunctionType prelude: "() -> AnalysisUnit">

Expr <CallExpr test.lkt:11:39-11:50>
     has type <ClassDecl prelude: "AnalysisUnit">

Id   <RefId "root" test.lkt:11:51-11:55>
     references <FunDecl prelude: "root">

Expr <RefId "root" test.lkt:11:51-11:55>
     has type <ClassDecl prelude: "Node">

Expr <DotExpr test.lkt:11:39-11:55>
     has type <ClassDecl prelude: "Node">

Id   <RefId "Node" test.lkt:13:24-13:28>
     references <ClassDecl prelude: "Node">

Id   <RefId "node" test.lkt:13:31-13:35>
     references <NodeDecl "node" test.lkt:1:1-26:2>

Expr <RefId "node" test.lkt:13:31-13:35>
     has type <ClassDecl "Name" test.lkt:1:1-26:2>

Id   <RefId "node_env" test.lkt:13:36-13:44>
     references <FunDecl prelude: "node_env">

Expr <RefId "node_env" test.lkt:13:36-13:44>
     has type <FunctionType prelude: "() -> LexicalEnv">

Expr <DotExpr test.lkt:13:31-13:44>
     has type <FunctionType prelude: "() -> LexicalEnv">

Expr <CallExpr test.lkt:13:31-13:46>
     has type <ClassDecl prelude: "LexicalEnv">

Id   <RefId "get_first" test.lkt:13:47-13:56>
     references <FunDecl prelude: "get_first">

Expr <RefId "get_first" test.lkt:13:47-13:56>
     has type <FunctionType prelude: "(Symbol) -> Node">

Expr <DotExpr test.lkt:13:31-13:56>
     has type <FunctionType prelude: "(Symbol) -> Node">

Id   <RefId "node" test.lkt:13:57-13:61>
     references <NodeDecl "node" test.lkt:1:1-26:2>

Expr <RefId "node" test.lkt:13:57-13:61>
     has type <ClassDecl "Name" test.lkt:1:1-26:2>

Id   <RefId "symbol" test.lkt:13:62-13:68>
     references <FunDecl prelude: "symbol">

Expr <RefId "symbol" test.lkt:13:62-13:68>
     has type <StructDecl prelude: "Symbol">

Expr <DotExpr test.lkt:13:57-13:68>
     has type <StructDecl prelude: "Symbol">

Expr <CallExpr test.lkt:13:31-13:69>
     has type <ClassDecl prelude: "Node">

Id   <RefId "Node" test.lkt:15:22-15:26>
     references <ClassDecl prelude: "Node">

Id   <RefId "node" test.lkt:15:29-15:33>
     references <NodeDecl "node" test.lkt:1:1-26:2>

Expr <RefId "node" test.lkt:15:29-15:33>
     has type <ClassDecl "Name" test.lkt:1:1-26:2>

Id   <RefId "node_env" test.lkt:15:34-15:42>
     references <FunDecl prelude: "node_env">

Expr <RefId "node_env" test.lkt:15:34-15:42>
     has type <FunctionType prelude: "() -> LexicalEnv">

Expr <DotExpr test.lkt:15:29-15:42>
     has type <FunctionType prelude: "() -> LexicalEnv">

Expr <CallExpr test.lkt:15:29-15:44>
     has type <ClassDecl prelude: "LexicalEnv">

Id   <RefId "env_node" test.lkt:15:45-15:53>
     references <FunDecl prelude: "env_node">

Expr <RefId "env_node" test.lkt:15:45-15:53>
     has type <FunctionType prelude: "() -> Node">

Expr <DotExpr test.lkt:15:29-15:53>
     has type <FunctionType prelude: "() -> Node">

Expr <CallExpr test.lkt:15:29-15:55>
     has type <ClassDecl prelude: "Node">

Id   <RefId "LexicalEnv" test.lkt:17:26-17:36>
     references <ClassDecl prelude: "LexicalEnv">

Id   <RefId "node" test.lkt:17:39-17:43>
     references <NodeDecl "node" test.lkt:1:1-26:2>

Expr <RefId "node" test.lkt:17:39-17:43>
     has type <ClassDecl "Name" test.lkt:1:1-26:2>

Id   <RefId "children_env" test.lkt:17:44-17:56>
     references <FunDecl "children_env" test.lkt:17:5-17:58>

Expr <RefId "children_env" test.lkt:17:44-17:56>
     has type <FunctionType prelude: "() -> LexicalEnv">

Expr <DotExpr test.lkt:17:39-17:56>
     has type <FunctionType prelude: "() -> LexicalEnv">

Expr <CallExpr test.lkt:17:39-17:58>
     has type <ClassDecl prelude: "LexicalEnv">

Id   <RefId "String" test.lkt:19:24-19:30>
     references <StructDecl prelude: "String">

Id   <RefId "Symbol" test.lkt:19:33-19:39>
     references <StructDecl prelude: "Symbol">

Id   <RefId "s" test.lkt:19:42-19:43>
     references <FunArgDecl "s" test.lkt:19:20-19:30>

Expr <RefId "s" test.lkt:19:42-19:43>
     has type <StructDecl prelude: "String">

Id   <RefId "to_symbol" test.lkt:19:44-19:53>
     references <FunDecl prelude: "to_symbol">

Expr <RefId "to_symbol" test.lkt:19:44-19:53>
     has type <StructDecl prelude: "Symbol">

Expr <DotExpr test.lkt:19:42-19:53>
     has type <StructDecl prelude: "Symbol">

Id   <RefId "Array" test.lkt:21:26-21:31>
     references <GenericDecl prelude: "Array">

Id   <RefId "Node" test.lkt:21:32-21:36>
     references <ClassDecl prelude: "Node">

Id   <RefId "node" test.lkt:21:40-21:44>
     references <NodeDecl "node" test.lkt:1:1-26:2>

Expr <RefId "node" test.lkt:21:40-21:44>
     has type <ClassDecl "Name" test.lkt:1:1-26:2>

Id   <RefId "parents" test.lkt:21:45-21:52>
     references <FunDecl prelude: "parents">

Expr <RefId "parents" test.lkt:21:45-21:52>
     has type <FunctionType prelude: "(Bool) -> Array[Node]">

Expr <DotExpr test.lkt:21:40-21:52>
     has type <FunctionType prelude: "(Bool) -> Array[Node]">

Expr <CallExpr test.lkt:21:40-21:54>
     has type <InstantiatedGenericType prelude: "Array[Node]">

Id   <RefId "Array" test.lkt:22:26-22:31>
     references <GenericDecl prelude: "Array">

Id   <RefId "Node" test.lkt:22:32-22:36>
     references <ClassDecl prelude: "Node">

Id   <RefId "node" test.lkt:22:40-22:44>
     references <NodeDecl "node" test.lkt:1:1-26:2>

Expr <RefId "node" test.lkt:22:40-22:44>
     has type <ClassDecl "Name" test.lkt:1:1-26:2>

Id   <RefId "parents" test.lkt:22:45-22:52>
     references <FunDecl prelude: "parents">

Expr <RefId "parents" test.lkt:22:45-22:52>
     has type <FunctionType prelude: "(Bool) -> Array[Node]">

Expr <DotExpr test.lkt:22:40-22:52>
     has type <FunctionType prelude: "(Bool) -> Array[Node]">

Id   <RefId "with_self" test.lkt:22:53-22:62>
     references <FunArgDecl prelude: "with_self">

Expr <RefId "with_self" test.lkt:22:53-22:62>
     has type <EnumTypeDecl prelude: "Bool">

Id   <RefId "false" test.lkt:22:63-22:68>
     references <EnumLitDecl prelude: "false">

Expr <RefId "false" test.lkt:22:63-22:68>
     has type <EnumTypeDecl prelude: "Bool">

Expr <CallExpr test.lkt:22:40-22:69>
     has type <InstantiatedGenericType prelude: "Array[Node]">

Id   <RefId "Iterator" test.lkt:24:27-24:35>
     references <GenericDecl prelude: "Iterator">

Id   <RefId "Node" test.lkt:24:36-24:40>
     references <ClassDecl prelude: "Node">

Id   <RefId "node" test.lkt:24:44-24:48>
     references <NodeDecl "node" test.lkt:1:1-26:2>

Expr <RefId "node" test.lkt:24:44-24:48>
     has type <ClassDecl "Name" test.lkt:1:1-26:2>

Id   <RefId "parents" test.lkt:24:49-24:56>
     references <FunDecl prelude: "parents">

Expr <RefId "parents" test.lkt:24:49-24:56>
     has type <FunctionType prelude: "(Bool) -> Array[Node]">

Expr <DotExpr test.lkt:24:44-24:56>
     has type <FunctionType prelude: "(Bool) -> Array[Node]">

Expr <CallExpr test.lkt:24:44-24:58>
     has type <InstantiatedGenericType prelude: "Array[Node]">

Id   <RefId "to_iterator" test.lkt:24:59-24:70>
     references <FunDecl prelude: "to_iterator">

Expr <RefId "to_iterator" test.lkt:24:59-24:70>
     has type <InstantiatedGenericType prelude: "Iterator[Node]">

Expr <DotExpr test.lkt:24:44-24:70>
     has type <InstantiatedGenericType prelude: "Iterator[Node]">

