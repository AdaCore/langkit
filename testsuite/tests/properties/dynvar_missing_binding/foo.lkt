import lexer_example

@with_lexer(foo_lexer)
grammar foo_grammar {
    @main_rule main_rule <- Example("example")
}

dynvar my_var: FooNode

class FooNode implements Node[FooNode] {
}

class Example: FooNode {
    # The "construct" pass on p1 will require the type of p2 and thus trigger
    # the construction of p2. A bug used to propagate the binding of "dynvar"
    # from the construction of p1 to p2's.
    @exported fun p1(): Entity[FooNode] = {
        bind my_var = node;
        node.p2().as_bare_entity
    }

    fun p2(): FooNode = my_var
}
