import lexer_example
grammar foo_grammar {
    @main_rule main_rule <- or(Plus(atom "+" main_rule) | atom)
    atom <- or(Literal(@number) | Name(@identifier))

}

@abstract class FooNode implements Node {

    @export fun eval_unit (u : AnalysisUnit): Int =
    u.root.as[Expression].result()
}

@abstract class Expression : FooNode {

    @export fun result (): Int
}

class Literal : Expression implements TokenNode {

    fun result (): Int
}

class Name : Expression implements TokenNode {

    fun designated_unit (): AnalysisUnit

    fun result (): Int = node.designated_unit().root.as[Expression].result()
}

class Plus : Expression {
    @parse_field left : Expression
    @parse_field right : Expression

    fun result (): Int = node.left.result() + node.right.result()
}
