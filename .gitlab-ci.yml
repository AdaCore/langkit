include:
  - project: eng/libadalang/libadalang
    file: /utils/gitlab-ci-common.yml

variables:
  PACKAGE_BASENAME: langkit.tar.gz
  PACKAGE_ABSOLUTE_NAME: $CI_PROJECT_DIR/$PACKAGE_BASENAME
  PACKAGE_REPOSITORY_PROJECT: eng/libadalang/ci-packages
  CI_FRAGMENTS: ci_fragments
  CI_FRAGMENTS_GIT: https://gitlab-ci-token:${CI_JOB_TOKEN}@${CI_SERVER_HOST}:${CI_SERVER_PORT}/setton/$CI_FRAGMENTS
  LIBADALANG_GIT: https://gitlab-ci-token:${CI_JOB_TOKEN}@${CI_SERVER_HOST}:${CI_SERVER_PORT}/eng/libadalang/libadalang

stages:
  - stage1  # langkit_build, continuous_builder
  - stage2  # langkit_test,  libadalang_build_and_test
  - stage3  # package, executed regardless of testing
  - stage4  # CB, executed regardless of the rest

#########
# BUILD #
#########

langkit_build:
  extends: .basic
  rules:
    # Run this for both merge requests and "trigger" pipelines
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_PIPELINE_SOURCE == "pipeline"'
  services:
     - image:sandbox
     - cpu:8
     - mem:16
  stage: stage1
  script:
    - require_issue
    - !reference [.script_snippets, setup]

    - cd /it/wave

    # Build using anod
    - anod vcs --add-repo langkit $CI_PROJECT_DIR
    - anod build --minimal adasat
    - anod build --minimal langkit_support
    - anod build --minimal langkit

    # Create the langkit package
    - tar czf $PACKAGE_ABSOLUTE_NAME -C /
        it/wave/x86_64-linux/langkit_support/install
        it/wave/x86_64-linux/langkit/install

  artifacts:
    paths:
      - $PACKAGE_BASENAME

########
# TEST #
########

langkit_test:
  extends: .basic
  rules:
    # Run this for merge requests only
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
  services:
     - image:sandbox
     - cpu:8
     - mem:16
  stage: stage2
  rules:
    # We are not interested in running tests in CIs that just
    # rebuild the artifact
    - if: $CI_REBUILD_ARTIFACT
      when: never
    - when: always
  script:
    - !reference [.script_snippets, setup]

    # Unpack langkit
    - tar zxf $PACKAGE_ABSOLUTE_NAME -C /
    - rm $PACKAGE_ABSOLUTE_NAME

    # Run the testsuite
    - cd /it/wave
    - mkdir -p fingerprints
    - anod vcs --add-repo langkit $CI_PROJECT_DIR
    - touch fingerprints/x86_64-linux.adasat.install.json.assume-unchanged
    - touch fingerprints/x86_64-linux.langkit_support.install.json.assume-unchanged
    - touch fingerprints/x86_64-linux.langkit.install.json.assume-unchanged
    - anod test --minimal langkit

    # Produce a XUnit report for GitLab
    - e3-testsuite-report
        --failure-exit-code 1
        --xunit-output $CI_PROJECT_DIR/xunit_output.xml
        --xunit-name Langkit
        x86_64-linux/langkit_test/results/new/

  artifacts:
    when: always
    paths:
      - xunit_output.xml
    reports:
      junit: xunit_output.xml

#############################
# LIBADALANG BUILD AND TEST #
#############################

libadalang_build_and_test:
  extends: .basic
  services:
     - image:sandbox
     - cpu:8
     - mem:16
  stage: stage2
  rules:
    # Run this for merge requests only
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
  script:
    - !reference [.script_snippets, setup]

    # Unpack langkit
    - tar zxf $PACKAGE_ABSOLUTE_NAME -C /
    - rm $PACKAGE_ABSOLUTE_NAME

    # Get libadalang. Use this branch if it's a "/sync/" branch.
    - cd /tmp
    - LAL_BRANCH=master
    - if [[ $CI_COMMIT_BRANCH =~ ^sync/ ]]; then
         LAL_BRANCH=$CI_COMMIT_BRANCH;
      elif [[ $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ ^sync/ ]]; then
         LAL_BRANCH=$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME;
      fi
    - git clone $LIBADALANG_GIT -b $LAL_BRANCH

    # Build and test libadalang
    - cd /it/wave
    - mkdir -p fingerprints
    - anod vcs --add-repo libadalang /tmp/libadalang
    - touch fingerprints/x86_64-linux.langkit_support.install.json.assume-unchanged
    - touch fingerprints/x86_64-linux.langkit.install.json.assume-unchanged
    - anod build --minimal libadalang
    # Protect us against the potential build failure of libadalang-doc this day
    - anod install --latest libadalang-doc
    - anod build --minimal libadalang_for_customers
    - anod test  --minimal libadalang

    # Produce a XUnit report for GitLab
    - e3-testsuite-report
        --failure-exit-code 1
        --xunit-output $CI_PROJECT_DIR/xunit_output.xml
        --xunit-name Libadalang
        x86_64-linux/libadalang_test/results/new/;

  artifacts:
    when: always
    paths:
      - xunit_output.xml
    reports:
      junit: xunit_output.xml

###########
# PACKAGE #
###########

# This job uploads the package to the package registry.
# This is launched only for CIs on the master branch.
package:
  services:
     - image:e3
  stage: stage3
  needs: [langkit_build] # Do not wait for jobs in stage2 (i.e. tests)
  rules:
     # Store the artifact only for pushes the master branch and scheduled
     # pipelines.
     - if: '$CI_COMMIT_REF_NAME != "master"'
       when: never
     - if: '$CI_PIPELINE_SOURCE == "push"'
     - if: '$CI_PIPELINE_SOURCE == "pipeline"'
  script:
    - export PATH=/it/e3/bin:$PATH

    # Upload the package
    - git clone $CI_FRAGMENTS_GIT
    - ./$CI_FRAGMENTS/upload_generic_package $PACKAGE_REPOSITORY_PROJECT $PACKAGE_ABSOLUTE_NAME

######
# CB #
######

continuous_builder:
  extends: .cb
  stage: stage4
  needs: []
