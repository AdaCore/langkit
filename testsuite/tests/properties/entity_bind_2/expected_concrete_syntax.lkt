grammar None_grammar {
    main_rule <- list*(or(Literal(@Number) | Identifier(@Identifier)))

}

class FooNode {
}

class RootNode : FooNode {
    var : LogicVar

    fun xref_eq (arg1 : Entity[FooNode], arg2 : Entity[FooNode]): LogicEquation

    @export fun solve_eq (arg1 : Entity[FooNode], arg2 : Entity[FooNode]): Boolean =
    self.xref_eq(arg1, arg2).solve
}

class Identifier : RootNode {

    fun xref_eq (arg1 : Entity[FooNode], arg2 : Entity[FooNode]): LogicEquation =
    <domain(<FieldAccess .var>, [<Var Self>])>
}

class Literal : RootNode {

    fun is_eq (other : Entity[Literal]): Boolean = self.as_entity == other

    fun xref_eq (arg1 : Entity[FooNode], arg2 : Entity[FooNode]): LogicEquation =
    (
        <domain(<FieldAccess .var>, [<Var arg1>])>
    ) and (<Bind>)
}
