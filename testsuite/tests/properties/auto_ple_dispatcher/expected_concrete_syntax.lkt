@spacing(alphanumericals, alphanumericals)
lexer foo_lexer {

    whitespace <- p"[ \n\r\t]+"

    family alphanumericals {
        def <- "def"
    }

    var <- "var"

    family alphanumericals {
        error <- "error"
        example <- "example"
        null_tok <- "null"
    }

    comma <- ","
    dot <- "."
    semicolon <- ";"
    l_par <- "("
    r_par <- ")"
    l_brace <- "{"
    r_brace <- "}"
    equal <- "="
    plus <- "+"
    minus <- "-"
    less_than <- "<"

    family alphanumericals {
        number <- p"[0-9]+"
        @symbol identifier <- p"[a-zA-Z_][a-zA-Z0-9_]*"
    }

    string <- p"\"[^\"]*\""
    @newline_after comment <- p"#(.?)+"
}
grammar foo_grammar {
    @main_rule main_rule <- defs
    defs <- list*(def_rule)
    def_rule <- or(scope | var)
    scope <- Scope(Id(@identifier) "{" defs "}")
    var <- Var(Id(@identifier) "=" name)
    name <- or(
        | Prefix(name "." Id(@identifier))
        | Id(@identifier)
    )

}

@root_node class FooNode {
}

@abstract class DefNode : FooNode {
}

class Scope : DefNode {
    @parse_field name : Id
    @parse_field defs : ASTList[DefNode]
}

class Var : DefNode {
    @parse_field name : Id
    @parse_field value : Name
}

@abstract class Name : FooNode {

    @export fun resolve (): FooNode
}

class Id : Name {

    fun resolve (): FooNode = node.node_env.get(node, only_first=true)
}

class Prefix : Name {
    @parse_field prefix : Name
    @parse_field suffix : Id

    fun resolve (): FooNode =
    node.prefix.resolve.children_env.get(node.suffix.symbol, only_first=true)
}

struct EnvAssoc {
    key : SymbolType
    value : FooNode
    dest_env : LexicalEnv
    metadata : Metadata
}
