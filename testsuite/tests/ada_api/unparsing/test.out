== main.adb config.json example.txt ==
var v1: Int = 2;
null var v2: Int = 0;
def f1(a: Int, b: Int=0): Int
{
    print(a, b);
    very_long_call(
        aaaaaaaaa,
        bbbbbbb,
        cccccccc,
        dddddddd,
        eeeeeee,
        fffffffff,
        ggggggggg,
        hhhhhhhh
    );
    a + b + 1;
    n1, n2, n2 = foo(a, b);
}

== main.adb -r param_spec config.json param_spec.txt ==
a: Int=2

== invalid_config.adb ==
== Errors outside of templates ==

# no_such_file.json
    cannot read no_such_file.json
# invalid_syntax.json
    1:2: string expected
# missing_node_configs.json
    missing "node_configs" key
# invalid_type_name.json
    invalid node name: NoSuchNode
# invalid_node_name.json
    invalid node name: Int
# invalid_member_name.json
    invalid field for VarDecl: f_no_such_field
# invalid_field_name.json
    parent is not a syntax field for VarDecl
# invalid_node_sep.json
    VarDecl is not a list node, invalid "sep" configuration

== Decoding errors in templates ==

# invalid_template.json
    template for VarDecl.f_name: invalid template JSON node: JSON_INT_TYPE
# invalid_string_template.json
    template for VarDecl.f_name: invalid string template document kind: foo
# invalid_kind_template.json
    template for VarDecl.f_name: missing "kind" key
# invalid_kind_template2.json
    template for VarDecl.f_name: invalid "kind": JSON_INT_TYPE
# invalid_kind_template3.json
    template for VarDecl.f_name: invalid template document kind: foo
# invalid_whitespace.json
    template for VarDecl.f_name: invalid whitespace length: JSON_STRING_TYPE
# invalid_whitespace2.json
    template for VarDecl.f_name: missing "length" key
# invalid_align.json
    template for VarDecl.f_name: missing "width" key for align
# invalid_align2.json
    template for VarDecl.f_name: invalid "width" key for align
# invalid_dedent.json
    template for VarDecl.f_name: missing "contents" key for dedent
# invalid_dedenttoroot.json
    template for VarDecl.f_name: missing "contents" key for dedentToRoot
# invalid_fill.json
    template for VarDecl.f_name: missing "document" key for fill
# invalid_group.json
    template for VarDecl.f_name: missing "document" key for group
# invalid_group2.json
    template for VarDecl.f_name: invalid group shouldBreak: JSON_INT_TYPE
# invalid_group3.json
    template for VarDecl.f_name: invalid group id: JSON_INT_TYPE
# invalid_group4.json
    template for VarDecl.f_name: duplicate group id: myGroup
# invalid_ifbreak.json
    template for VarDecl.f_name: missing "breakContents" key for ifBreak
# invalid_ifbreak2.json
    template for VarDecl.f_name: invalid group id: JSON_INT_TYPE
# invalid_ifbreak3.json
    template for VarDecl.f_name: undefined symbol: myGroup
# invalid_ifempty.json
    template for VarDecl.f_name: missing "else" key for ifEmpty
# invalid_ifempty2.json
    template for VarDecl.f_name: missing "then" key for ifEmpty
# invalid_ifempty3.json
    "node" template for VarDecl: "ifEmpty" is valid only in field templates
# invalid_indent.json
    template for VarDecl.f_name: missing "contents" key for indent
# invalid_markasroot.json
    template for VarDecl.f_name: missing "contents" key for markAsRoot
# invalid_innerroot.json
    template for VarDecl.f_name: missing "contents" key for innerRoot
# invalid_recurse_field.json
    template for VarDecl.f_name: recurse_field cannot appear in a "recurse" template
# invalid_recurse_field2.json
    "node" template for ExprStmt: missing "field" key for recurse_field
# invalid_recurse_field3.json
    "node" template for ExprStmt: invalid recurse_field field: JSON_NULL_TYPE
# invalid_recurse_field4.json
    "node" template for Decl: text/recurse_field are valid for concrete nodes only
# invalid_recurse_field5.json
    "node" template for StmtList: text/recurse_field are not valid for list nodes
# invalid_recurse_field6.json
    invalid field for ExprStmt: f_foo
# invalid_recurse_field7.json
    "node" template for Name: text/recurse_field are not valid for token nodes
# invalid_recurse_field8.json
    "node" template for VarDecl: using "recurse"/"recurse_flatten" in the same template as "recurse_field"/"text" is invalid
# invalid_recurse_field9.json
    "node" template for VarDecl: token "var" expected, got field f_name
    Expected:
    * field f_is_null
    * token "var"
    * field f_name
    * token ":"
    * field f_type_expr
    * token "="
    * field f_value
    * token ";"
# invalid_recurse_field10.json
    "node" template for VarDecl: missing token ";"
    Expected:
    * field f_is_null
    * token "var"
    * field f_name
    * token ":"
    * field f_type_expr
    * token "="
    * field f_value
    * token ";"
# invalid_recurse_field11.json
    "node" template for VarDecl: unexpected extra template item: token "def"
    Expected:
    * field f_is_null
    * token "var"
    * field f_name
    * token ":"
    * field f_type_expr
    * token "="
    * field f_value
    * token ";"
# invalid_recurse_flatten.json
    template for VarDecl.f_name: invalid recurse_flatten if: JSON_NULL_TYPE
# invalid_recurse_flatten2.json
    template for VarDecl.f_name: invalid item in recurse_flatten if: JSON_NULL_TYPE
# invalid_recurse_flatten3.json
    template for VarDecl.f_name: invalid node type in recurse_flatten if: NoSuchNode

== Invalid templates (too many/few "recurse") ==

# recurse_in_field_too_many.json
    template for CallArg.f_name: unexpected extra template item: recurse
    Expected:
    * recurse
    * token "="
# recurse_list_too_few.json
    "sep" template for StmtList: recursion is missing
# recurse_list_too_many.json
    "sep" template for StmtList: too many recursions
# recurse_line.json
    "sep" template for StmtList: recursion is missing
# recurse_whitespace.json
    "sep" template for StmtList: recursion is missing
# recurse_indent_too_few.json
    "sep" template for StmtList: recursion is missing
# recurse_indent_too_many.json
    "sep" template for StmtList: too many recursions
# recurse_if_empty.json
    template for VarDecl.f_name: ifEmpty alternatives have inconsistent recurse structure

Done.

== commands.adb ==
== cmd_align.json ==

{
  "command": {
    "alignContents": {
      "id": 2,
      "kind": "list",
      "list": [
        {
          "kind": "text",
          "text": "var i:Int=0;"
        }
      ]
    },
    "alignData": {
      "kind": "width",
      "n": 2
    },
    "command": "align"
  },
  "id": 1,
  "kind": "command"
}

== cmd_align2.json ==

{
  "command": {
    "alignContents": {
      "id": 2,
      "kind": "list",
      "list": [
        {
          "id": 3,
          "kind": "text",
          "text": "var i:Int=0;"
        }
      ]
    },
    "alignData": {
      "kind": "text",
      "t": "  "
    },
    "command": "align"
  },
  "id": 1,
  "kind": "command"
}

== cmd_breakparent.json ==

{
  "id": 1,
  "kind": "list",
  "list": [
    {
      "command": {
        "command": "breakParent"
      },
      "id": 2,
      "kind": "command"
    },
    {
      "id": 3,
      "kind": "text",
      "text": "var i:Int=0;"
    }
  ]
}

== cmd_dedent.json ==

{
  "command": {
    "alignContents": {
      "id": 2,
      "kind": "list",
      "list": [
        {
          "command": {
            "command": "line",
            "hard": false,
            "literal": false,
            "soft": false
          },
          "id": 3,
          "kind": "command"
        },
        {
          "id": 4,
          "kind": "text",
          "text": "var i:Int=0;"
        }
      ]
    },
    "alignData": {
      "kind": "dedent"
    },
    "command": "align"
  },
  "id": 1,
  "kind": "command"
}

== cmd_dedenttoroot.json ==

{
  "command": {
    "alignContents": {
      "id": 2,
      "kind": "list",
      "list": [
        {
          "command": {
            "command": "line",
            "hard": false,
            "literal": false,
            "soft": false
          },
          "id": 3,
          "kind": "command"
        },
        {
          "id": 4,
          "kind": "text",
          "text": "var i:Int=0;"
        }
      ]
    },
    "alignData": {
      "kind": "dedentToRoot"
    },
    "command": "align"
  },
  "id": 1,
  "kind": "command"
}

== cmd_fill.json ==

{
  "command": {
    "command": "fill",
    "parts": {
      "id": 2,
      "kind": "list",
      "list": [
        {
          "command": {
            "command": "line",
            "hard": false,
            "literal": false,
            "soft": false
          },
          "id": 3,
          "kind": "command"
        },
        {
          "id": 4,
          "kind": "text",
          "text": "var i:Int=0;"
        },
        {
          "command": {
            "command": "line",
            "hard": false,
            "literal": false,
            "soft": false
          },
          "id": 5,
          "kind": "command"
        }
      ]
    }
  },
  "id": 1,
  "kind": "command"
}

== cmd_group.json ==

{
  "id": 1,
  "kind": "list",
  "list": [
    {
      "command": {
        "break": false,
        "command": "group",
        "expandedStates": null,
        "groupContents": {
          "command": {
            "command": "line",
            "hard": false,
            "literal": false,
            "soft": false
          },
          "id": 3,
          "kind": "command"
        }
      },
      "id": 2,
      "kind": "command"
    },
    {
      "id": 4,
      "kind": "text",
      "text": "var i:Int=0;"
    },
    {
      "command": {
        "break": true,
        "command": "group",
        "expandedStates": null,
        "groupContents": {
          "command": {
            "command": "line",
            "hard": false,
            "literal": false,
            "soft": false
          },
          "id": 6,
          "kind": "command"
        }
      },
      "id": 5,
      "kind": "command"
    }
  ]
}

== cmd_group_id.json ==

{
  "id": 1,
  "kind": "list",
  "list": [
    {
      "command": {
        "break": false,
        "command": "group",
        "expandedStates": null,
        "groupContents": {
          "command": {
            "command": "line",
            "hard": false,
            "literal": false,
            "soft": false
          },
          "id": 4,
          "kind": "command"
        },
        "id": 3
      },
      "id": 2,
      "kind": "command"
    },
    {
      "id": 5,
      "kind": "text",
      "text": "var i:Int=0;"
    },
    {
      "command": {
        "break": true,
        "command": "group",
        "expandedStates": null,
        "groupContents": {
          "command": {
            "command": "line",
            "hard": false,
            "literal": false,
            "soft": false
          },
          "id": 7,
          "kind": "command"
        }
      },
      "id": 6,
      "kind": "command"
    },
    {
      "command": {
        "breakContents": {
          "command": {
            "command": "line",
            "hard": false,
            "literal": false,
            "soft": false
          },
          "id": 9,
          "kind": "command"
        },
        "command": "ifBreak",
        "flatContents": {
          "command": {
            "command": "line",
            "hard": false,
            "literal": false,
            "soft": false
          },
          "id": 10,
          "kind": "command"
        },
        "ifBreakGroupId": 3
      },
      "id": 8,
      "kind": "command"
    }
  ]
}

== cmd_hardline.json ==

{
  "id": 1,
  "kind": "list",
  "list": [
    {
      "id": 2,
      "kind": "list",
      "list": [
        {
          "command": {
            "command": "line",
            "hard": true,
            "literal": false,
            "soft": false
          },
          "id": 3,
          "kind": "command"
        },
        {
          "command": {
            "command": "breakParent"
          },
          "id": 4,
          "kind": "command"
        }
      ]
    },
    {
      "id": 5,
      "kind": "text",
      "text": "var i:Int=0;"
    }
  ]
}

== cmd_hardlinewithoutbreakparent.json ==

{
  "id": 1,
  "kind": "list",
  "list": [
    {
      "command": {
        "command": "line",
        "hard": true,
        "literal": false,
        "soft": false
      },
      "id": 2,
      "kind": "command"
    },
    {
      "id": 3,
      "kind": "text",
      "text": "var i:Int=0;"
    }
  ]
}

== cmd_ifbreak.json ==

{
  "id": 1,
  "kind": "list",
  "list": [
    {
      "command": {
        "breakContents": {
          "command": {
            "command": "line",
            "hard": false,
            "literal": false,
            "soft": false
          },
          "id": 3,
          "kind": "command"
        },
        "command": "ifBreak",
        "flatContents": {
          "id": 4,
          "kind": "list",
          "list": [
          ]
        }
      },
      "id": 2,
      "kind": "command"
    },
    {
      "id": 5,
      "kind": "text",
      "text": "var i:Int=0;"
    },
    {
      "command": {
        "breakContents": {
          "command": {
            "command": "line",
            "hard": false,
            "literal": false,
            "soft": false
          },
          "id": 7,
          "kind": "command"
        },
        "command": "ifBreak",
        "flatContents": {
          "id": 8,
          "kind": "text",
          "text": " "
        }
      },
      "id": 6,
      "kind": "command"
    }
  ]
}

== cmd_ifempty.json ==

{
  "id": 1,
  "kind": "list",
  "list": [
    {
      "id": 2,
      "kind": "text",
      "text": "def f("
    },
    {
      "command": {
        "command": "line",
        "hard": false,
        "literal": false,
        "soft": true
      },
      "id": 3,
      "kind": "command"
    },
    {
      "id": 4,
      "kind": "text",
      "text": "):Int{i;}"
    }
  ]
}

== cmd_ifempty.json ==

{
  "id": 1,
  "kind": "list",
  "list": [
    {
      "id": 2,
      "kind": "text",
      "text": "def f("
    },
    {
      "command": {
        "command": "indent",
        "indentContents": {
          "id": 4,
          "kind": "list",
          "list": [
            {
              "id": 5,
              "kind": "list",
              "list": [
                {
                  "command": {
                    "command": "line",
                    "hard": true,
                    "literal": false,
                    "soft": false
                  },
                  "id": 6,
                  "kind": "command"
                },
                {
                  "command": {
                    "command": "breakParent"
                  },
                  "id": 7,
                  "kind": "command"
                }
              ]
            },
            {
              "id": 8,
              "kind": "text",
              "text": "i:Int"
            }
          ]
        }
      },
      "id": 3,
      "kind": "command"
    },
    {
      "id": 9,
      "kind": "list",
      "list": [
        {
          "command": {
            "command": "line",
            "hard": true,
            "literal": false,
            "soft": false
          },
          "id": 10,
          "kind": "command"
        },
        {
          "command": {
            "command": "breakParent"
          },
          "id": 11,
          "kind": "command"
        }
      ]
    },
    {
      "id": 12,
      "kind": "text",
      "text": "):Int{i;}"
    }
  ]
}

== cmd_indent.json ==

{
  "command": {
    "command": "indent",
    "indentContents": {
      "id": 2,
      "kind": "list",
      "list": [
        {
          "command": {
            "command": "line",
            "hard": false,
            "literal": false,
            "soft": false
          },
          "id": 3,
          "kind": "command"
        },
        {
          "id": 4,
          "kind": "text",
          "text": "var i:Int=0;"
        }
      ]
    }
  },
  "id": 1,
  "kind": "command"
}

== cmd_line.json ==

{
  "id": 1,
  "kind": "list",
  "list": [
    {
      "command": {
        "command": "line",
        "hard": false,
        "literal": false,
        "soft": false
      },
      "id": 2,
      "kind": "command"
    },
    {
      "id": 3,
      "kind": "text",
      "text": "var i:Int=0;"
    }
  ]
}

== cmd_list.json ==

{
  "id": 1,
  "kind": "list",
  "list": [
    {
      "command": {
        "command": "line",
        "hard": false,
        "literal": false,
        "soft": false
      },
      "id": 2,
      "kind": "command"
    },
    {
      "id": 3,
      "kind": "text",
      "text": "var i:Int=0;"
    },
    {
      "command": {
        "command": "line",
        "hard": false,
        "literal": false,
        "soft": false
      },
      "id": 4,
      "kind": "command"
    }
  ]
}

== cmd_literalline.json ==

{
  "id": 1,
  "kind": "list",
  "list": [
    {
      "id": 2,
      "kind": "list",
      "list": [
        {
          "command": {
            "command": "line",
            "hard": false,
            "literal": true,
            "soft": false
          },
          "id": 3,
          "kind": "command"
        },
        {
          "command": {
            "command": "breakParent"
          },
          "id": 4,
          "kind": "command"
        }
      ]
    },
    {
      "id": 5,
      "kind": "text",
      "text": "var i:Int=0;"
    }
  ]
}

== cmd_markasroot.json ==

{
  "command": {
    "alignContents": {
      "id": 2,
      "kind": "list",
      "list": [
        {
          "command": {
            "command": "line",
            "hard": false,
            "literal": false,
            "soft": false
          },
          "id": 3,
          "kind": "command"
        },
        {
          "id": 4,
          "kind": "text",
          "text": "var i:Int=0;"
        }
      ]
    },
    "alignData": {
      "kind": "root"
    },
    "command": "align"
  },
  "id": 1,
  "kind": "command"
}

== cmd_innerroot.json ==

{
  "command": {
    "alignContents": {
      "id": 2,
      "kind": "list",
      "list": [
        {
          "command": {
            "command": "line",
            "hard": false,
            "literal": false,
            "soft": false
          },
          "id": 3,
          "kind": "command"
        },
        {
          "id": 4,
          "kind": "text",
          "text": "var i:Int=0;"
        }
      ]
    },
    "alignData": {
      "kind": "innerRoot"
    },
    "command": "align"
  },
  "id": 1,
  "kind": "command"
}

== cmd_recurse.json ==

{
  "id": 1,
  "kind": "list",
  "list": [
    {
      "id": 2,
      "kind": "text",
      "text": "var i:Int=0;"
    }
  ]
}

== cmd_recurse_in_field.json ==

{
  "id": 1,
  "kind": "list",
  "list": [
    {
      "id": 2,
      "kind": "text",
      "text": "var v:Int=f(a =  1);"
    }
  ]
}

== cmd_recurse_field.json ==

{
  "id": 1,
  "kind": "list",
  "list": [
    {
      "command": {
        "break": false,
        "command": "group",
        "expandedStates": null,
        "groupContents": {
          "id": 3,
          "kind": "list",
          "list": [
            {
              "id": 4,
              "kind": "text",
              "text": "var i:"
            }
          ]
        }
      },
      "id": 2,
      "kind": "command"
    },
    {
      "id": 5,
      "kind": "text",
      "text": "Int="
    },
    {
      "command": {
        "command": "indent",
        "indentContents": {
          "id": 7,
          "kind": "text",
          "text": "0"
        }
      },
      "id": 6,
      "kind": "command"
    },
    {
      "id": 8,
      "kind": "text",
      "text": ";def f(i"
    },
    {
      "command": {
        "command": "line",
        "hard": false,
        "literal": false,
        "soft": true
      },
      "id": 9,
      "kind": "command"
    },
    {
      "id": 10,
      "kind": "text",
      "text": ":"
    },
    {
      "command": {
        "command": "line",
        "hard": false,
        "literal": false,
        "soft": true
      },
      "id": 11,
      "kind": "command"
    },
    {
      "id": 12,
      "kind": "text",
      "text": "Int"
    },
    {
      "command": {
        "command": "line",
        "hard": false,
        "literal": false,
        "soft": false
      },
      "id": 13,
      "kind": "command"
    },
    {
      "id": 14,
      "kind": "text",
      "text": "):Int{i;}"
    }
  ]
}

== cmd_recurse_flatten.json ==

{
  "id": 1,
  "kind": "list",
  "list": [
    {
      "id": 2,
      "kind": "text",
      "text": "var i:Int="
    },
    {
      "command": {
        "command": "fill",
        "parts": {
          "id": 4,
          "kind": "list",
          "list": [
            {
              "command": {
                "break": false,
                "command": "group",
                "expandedStates": null,
                "groupContents": {
                  "id": 6,
                  "kind": "list",
                  "list": [
                    {
                      "id": 7,
                      "kind": "text",
                      "text": "AAAAAAAAAAAAAAAAAA("
                    },
                    {
                      "command": {
                        "command": "fill",
                        "parts": {
                          "id": 9,
                          "kind": "list",
                          "list": [
                            {
                              "id": 10,
                              "kind": "text",
                              "text": "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
                            },
                            {
                              "command": {
                                "command": "line",
                                "hard": false,
                                "literal": false,
                                "soft": true
                              },
                              "id": 11,
                              "kind": "command"
                            },
                            {
                              "id": 12,
                              "kind": "text",
                              "text": ".YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY"
                            },
                            {
                              "command": {
                                "command": "line",
                                "hard": false,
                                "literal": false,
                                "soft": true
                              },
                              "id": 13,
                              "kind": "command"
                            },
                            {
                              "id": 14,
                              "kind": "text",
                              "text": ".ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ"
                            }
                          ]
                        }
                      },
                      "id": 8,
                      "kind": "command"
                    },
                    {
                      "id": 15,
                      "kind": "text",
                      "text": ")"
                    },
                    {
                      "command": {
                        "command": "line",
                        "hard": false,
                        "literal": false,
                        "soft": false
                      },
                      "id": 16,
                      "kind": "command"
                    }
                  ]
                }
              },
              "id": 5,
              "kind": "command"
            },
            {
              "command": {
                "command": "line",
                "hard": false,
                "literal": false,
                "soft": true
              },
              "id": 17,
              "kind": "command"
            },
            {
              "id": 18,
              "kind": "text",
              "text": ".DDDDDDDDDDDDDDDD"
            },
            {
              "command": {
                "command": "line",
                "hard": false,
                "literal": false,
                "soft": true
              },
              "id": 19,
              "kind": "command"
            },
            {
              "id": 20,
              "kind": "text",
              "text": ".EEEEEEEEEEEEEEEE"
            },
            {
              "command": {
                "command": "line",
                "hard": false,
                "literal": false,
                "soft": true
              },
              "id": 21,
              "kind": "command"
            },
            {
              "id": 22,
              "kind": "text",
              "text": ".FFFFFFFFFFFFFFFF"
            },
            {
              "command": {
                "command": "line",
                "hard": false,
                "literal": false,
                "soft": true
              },
              "id": 23,
              "kind": "command"
            },
            {
              "id": 24,
              "kind": "text",
              "text": ".GGGGGGGGGGGGGGGG"
            }
          ]
        }
      },
      "id": 3,
      "kind": "command"
    },
    {
      "id": 25,
      "kind": "text",
      "text": ";"
    }
  ]
}

== cmd_softline.json ==

{
  "id": 1,
  "kind": "list",
  "list": [
    {
      "command": {
        "command": "line",
        "hard": false,
        "literal": false,
        "soft": true
      },
      "id": 2,
      "kind": "command"
    },
    {
      "id": 3,
      "kind": "text",
      "text": "var i:Int=0;"
    }
  ]
}

== cmd_trim.json ==

{
  "id": 1,
  "kind": "list",
  "list": [
    {
      "command": {
        "command": "trim"
      },
      "id": 2,
      "kind": "command"
    },
    {
      "id": 3,
      "kind": "text",
      "text": "var i:Int=0;"
    }
  ]
}

== cmd_whitespace_3.json ==

{
  "id": 1,
  "kind": "list",
  "list": [
    {
      "id": 2,
      "kind": "text",
      "text": "   var i:Int=0;"
    }
  ]
}

== cmd_whitespace_default.json ==

{
  "id": 1,
  "kind": "list",
  "list": [
    {
      "id": 2,
      "kind": "text",
      "text": " var i:Int=0;"
    }
  ]
}

Done.

== default_config.adb ==
var v1:Int=2;null var v2:Int=0;def f1(a:Int,b:Int=0):Int{print(a,b);

very_long_call(aaaaaaaaa,bbbbbbb,cccccccc,dddddddd,eeeeeee,fffffffff,ggggggggg,hhhhhhhh);

a+b+1;

n1,n2,n2=foo(a,b);}

main.adb: done
Done
