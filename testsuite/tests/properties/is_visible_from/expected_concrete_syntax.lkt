grammar FooGrammar {
    @main_rule main_rule <- list*(name)
    name <- Name(@Identifier)

}

@root_node class FooNode {

    @export fun prop (empty1 : Boolean, empty2 : Boolean): Boolean = {
        val arg1 = if empty1 then _ else node.children_env;
        val arg2 = if empty2 then _ else node.children_env;

        arg1.is_visible_from(arg2)
    }
}

class Scope : ASTList[Name] {
}

class Name : FooNode {
}

struct EnvAssoc {
    key : SymbolType
    value : FooNode
    dest_env : LexicalEnv
    metadata : Metadata
}
