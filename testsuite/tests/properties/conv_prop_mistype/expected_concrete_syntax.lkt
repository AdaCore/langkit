import lexer_example

@with_lexer(foo_lexer)
grammar foo_grammar {
    @main_rule main_rule <- Examples(
        RegularExample("example") PlusExample("+" "example")
    )
}

@abstract
class FooNode implements Node[FooNode] {
    lvar: LogicVar
}

class Examples: FooNode {
    @parse_field re: RegularExample
    @parse_field pe: PlusExample

    |" Helper to assign PlusExample/RegularExample nodes to the corresponding
    |" logic vars.
    fun domains(): Equation =
        %domain(node.re.lvar, [node.re]) and %domain(node.pe.lvar, [node.pe])

    @exported
    fun fail_bind_conv_prop(): Bool = (
        %eq(node.pe.lvar, node.re.lvar, conv_prop=PlusExample.conv_prop) and node.domains()
    ).solve()

    @exported
    fun fail_nprop_single(): Bool = (
        %propagate(node.pe.lvar, PlusExample.conv_prop, node.re.lvar) and node.domains()
    ).solve()

    @exported
    fun ok_nprop_multi(): Bool = (
        %propagate(node.pe.lvar, PlusExample.comb_prop, node.pe.lvar, node.re.lvar, node.pe.lvar) and node.domains()
    ).solve()

    @exported
    fun fail_nprop_multi_1(): Bool = (
        %propagate(node.pe.lvar, PlusExample.comb_prop, node.re.lvar, node.re.lvar, node.pe.lvar) and node.domains()
    ).solve()

    @exported
    fun fail_nprop_multi_2(): Bool = (
        %propagate(node.pe.lvar, PlusExample.comb_prop, node.pe.lvar, node.pe.lvar, node.pe.lvar) and node.domains()
    ).solve()

    @exported
    fun fail_nprop_multi_3(): Bool = (
        %propagate(node.pe.lvar, PlusExample.comb_prop, node.pe.lvar, node.re.lvar, node.re.lvar) and node.domains()
    ).solve()

    @exported
    fun ok_nprop_varargs(): Bool = (
        %propagate(node.pe.lvar, PlusExample.ncomb_prop, [node.pe.lvar, node.pe.lvar]) and node.domains()
    ).solve()

    @exported
    fun fail_nprop_varargs(): Bool = (
        %propagate(node.pe.lvar, PlusExample.ncomb_prop, [node.pe.lvar, node.re.lvar]) and node.domains()
    ).solve()
}

class PlusExample: FooNode {
    fun conv_prop(): Entity[PlusExample] = self

    fun comb_prop(@ignored re: Entity[RegularExample], pe: Entity[PlusExample]): Entity[PlusExample] =
        pe

    fun ncomb_prop(pe_list: Array[Entity[PlusExample]]): Entity[PlusExample] =
        pe_list?[0]
}

class RegularExample: FooNode {
}
