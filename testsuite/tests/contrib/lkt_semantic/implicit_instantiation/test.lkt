#
# Implicit instantiations 2
#

generic [T, U]
struct Pair {
    a: T
    b: U
}

# Support generics
@external generic [T]
fun convert_int(var: Int): T

@external generic [T]
fun identity(var: T): T

@external generic [T]
fun singleton(var: T): Array[T]

@external generic [T]
fun apply (fn: (T) -> T, v: T): T

# Test the built-in map function
fun test_map(ints: Array[Int]): Array[String] =
    ints.map((i) => convert_int[String](i))

# Test the built-in filtermap function
fun test_filtermap(ints: Array[Int]): Array[String] =
    ints.filtermap(
        (i) => convert_int[String](i),
        (i) => i = 0
    )

# Check that errors are handled correctly even for a call with a dotexpr prefix
@invalid fun test_handle_ce_error(arg: A): Int = arg.method_doesnt_exist()
# The method call should emit an error but not crash

# Check that conflicting actuals are correctly flagged
@external generic [T] 
fun mkPair(x: T): Pair[T, T]

@invalid fun test_conflicting_actuals(): Pair[Int, Bool] = mkPair(1)
