Resolving test.lkt
==================
Id   <RefId "Int" test.lkt:4:15-4:18>
     references <StructDecl prelude: "Int">

Id   <RefId "Array" test.lkt:4:21-4:26>
     references <GenericDecl prelude: "Array">

Id   <RefId "Int" test.lkt:4:27-4:30>
     references <StructDecl prelude: "Int">

Id   <RefId "Int" test.lkt:5:8-5:11>
     references <StructDecl prelude: "Int">

Id   <RefId "arr" test.lkt:5:14-5:17>
     references <FunDecl "arr" test.lkt:4:1-4:31>

Expr <RefId "arr" test.lkt:5:14-5:17>
     has type <FunctionType prelude: "(Int) -> Array[Int]">

Expr <NumLit test.lkt:5:18-5:20>
     has type <StructDecl prelude: "Int">

Expr <CallExpr test.lkt:5:14-5:21>
     has type <InstantiatedGenericType prelude: "Array[Int]">

Expr <NumLit test.lkt:5:22-5:23>
     has type <StructDecl prelude: "Int">

Expr <CallExpr test.lkt:5:14-5:24>
     has type <StructDecl prelude: "Int">

Id   <RefId "Int" test.lkt:7:30-7:33>
     references <StructDecl prelude: "Int">

Id   <RefId "arr" test.lkt:7:36-7:39>
     references <FunDecl "arr" test.lkt:4:1-4:31>

Expr <RefId "arr" test.lkt:7:36-7:39>
     has type <FunctionType prelude: "(Int) -> Array[Int]">

Expr <NumLit test.lkt:7:40-7:42>
     has type <StructDecl prelude: "Int">

Expr <CallExpr test.lkt:7:36-7:43>
     has type <InstantiatedGenericType prelude: "Array[Int]">

test.lkt:7:44: error: Mismatched types: expected `Int`, got a string literal
7 | @invalid val incorrect_call: Int = arr(12)("a")
  |                                            ^^^

Expr <CallExpr test.lkt:7:36-7:48>
     has type <StructDecl prelude: "Int">

Id   <RefId "Int" test.lkt:8:32-8:35>
     references <StructDecl prelude: "Int">

test.lkt:8:38: error: No value for parameter
8 | @invalid val incorrect_call_1: Int = arr(12)()
  |                                      ^^^^^^^^^

Id   <RefId "arr" test.lkt:8:38-8:41>
     references <FunDecl "arr" test.lkt:4:1-4:31>

Expr <RefId "arr" test.lkt:8:38-8:41>
     has type <FunctionType prelude: "(Int) -> Array[Int]">

Expr <NumLit test.lkt:8:42-8:44>
     has type <StructDecl prelude: "Int">

Expr <CallExpr test.lkt:8:38-8:45>
     has type <InstantiatedGenericType prelude: "Array[Int]">

Expr <CallExpr test.lkt:8:38-8:47>
     has type <StructDecl prelude: "Int">

Id   <RefId "Int" test.lkt:9:32-9:35>
     references <StructDecl prelude: "Int">

test.lkt:9:49: error: Unmatched actual
9 | @invalid val incorrect_call_2: Int = arr(12)(1, 2)
  |                                                 ^

Id   <RefId "arr" test.lkt:9:38-9:41>
     references <FunDecl "arr" test.lkt:4:1-4:31>

Expr <RefId "arr" test.lkt:9:38-9:41>
     has type <FunctionType prelude: "(Int) -> Array[Int]">

Expr <NumLit test.lkt:9:42-9:44>
     has type <StructDecl prelude: "Int">

Expr <CallExpr test.lkt:9:38-9:45>
     has type <InstantiatedGenericType prelude: "Array[Int]">

Expr <NumLit test.lkt:9:46-9:47>
     has type <StructDecl prelude: "Int">

Expr <NumLit test.lkt:9:49-9:50>
     has type <StructDecl prelude: "Int">

Expr <CallExpr test.lkt:9:38-9:51>
     has type <StructDecl prelude: "Int">

Id   <RefId "Int" test.lkt:11:21-11:24>
     references <StructDecl prelude: "Int">

Id   <RefId "Int" test.lkt:11:26-11:29>
     references <StructDecl prelude: "Int">

Id   <RefId "Int" test.lkt:11:34-11:37>
     references <StructDecl prelude: "Int">

Id   <RefId "Int" test.lkt:13:8-13:11>
     references <StructDecl prelude: "Int">

Id   <RefId "return_func" test.lkt:13:14-13:25>
     references <FunDecl "return_func" test.lkt:11:1-11:37>

Expr <RefId "return_func" test.lkt:13:14-13:25>
     has type <FunctionType prelude: "() -> (Int, Int) -> Int">

Expr <CallExpr test.lkt:13:14-13:27>
     has type <FunctionType prelude: "(Int, Int) -> Int">

Expr <NumLit test.lkt:13:28-13:29>
     has type <StructDecl prelude: "Int">

Expr <NumLit test.lkt:13:31-13:32>
     has type <StructDecl prelude: "Int">

Expr <CallExpr test.lkt:13:14-13:33>
     has type <StructDecl prelude: "Int">

Id   <RefId "Int" test.lkt:14:17-14:20>
     references <StructDecl prelude: "Int">

Id   <RefId "return_func" test.lkt:14:23-14:34>
     references <FunDecl "return_func" test.lkt:11:1-11:37>

Expr <RefId "return_func" test.lkt:14:23-14:34>
     has type <FunctionType prelude: "() -> (Int, Int) -> Int">

Expr <CallExpr test.lkt:14:23-14:36>
     has type <FunctionType prelude: "(Int, Int) -> Int">

Expr <NumLit test.lkt:14:37-14:38>
     has type <StructDecl prelude: "Int">

test.lkt:14:40: error: Mismatched types: expected `Int`, got a character literal
14 | @invalid val b: Int = return_func()(1, '2')
   |                                        ^^^

Expr <CallExpr test.lkt:14:23-14:44>
     has type <StructDecl prelude: "Int">

