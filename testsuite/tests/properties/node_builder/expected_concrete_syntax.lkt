import lexer_example

@with_lexer(foo_lexer)
grammar foo_grammar {
    @main_rule main_rule <- list_rule
    list_rule <- LiteralSequence(
        "(" Name(@Identifier) list+(list_item, ",") ")"
    )
    list_item <- Literal(@Number)
}

@abstract
class FooNode implements Node[FooNode] {
}

class Literal: FooNode implements TokenNode {
}

class LiteralSequence: FooNode {
    @parse_field name: Name
    @parse_field items: ASTList[Literal]

    @exported
    @lazy
    lf_copy_non_null: LiteralSequence = node.to_builder().build()

    @exported
    @lazy
    lf_copy_null: LiteralSequence = null[LiteralSequence].to_builder().build()

    @exported
    @lazy
    lf_user_field: SynthUserField =
        SynthUserField.builder(name=node.name.to_builder(), number=42b).build()

    @exported
    @lazy
    lf_non_nullable_null: SynthNonNullable =
        SynthNonNullable.builder(items=null[Literal].to_builder()).build()

    @exported
    @lazy
    lf_non_nullable_not_null: SynthNonNullable =
        SynthNonNullable.builder(items=node.items?[0].to_builder()).build()

    @exported
    @lazy
    lf_nullable_null: SynthNullable =
        SynthNullable.builder(items=null[Literal].to_builder()).build()

    @exported
    @lazy
    lf_nullable_not_null: SynthNullable =
        SynthNullable.builder(items=node.items?[0].to_builder()).build()

    @exported
    @lazy
    lf_parent_root: SynthParent = SynthParent.builder(
        f=SynthChild1.builder(
            f=SynthChild2.builder(f=node.items?[0].to_builder())
        )
    ).build(node)

    @exported
    @lazy
    lf_parent_child: SynthParent = SynthParent.builder(
        f=SynthChild1.builder(f=node.to_builder())
    ).build(node.items?[0])

    @exported
    @lazy
    lf_parent_null: SynthParent =
        SynthParent.builder(f=null[FooNode].to_builder()).build()

    @external()
    fun get_foreign_node(): FooNode

    @exported
    @lazy
    lf_parent_foreign: SynthParent =
        SynthParent.builder(f=null[FooNode].to_builder()).build(node.get_foreign_node())

    @exported
    @lazy
    lf_implicit_field2: SynthImplicitFieldParent =
        SynthImplicitFieldParent.builder(f=SynthImplicitField2.builder()).build()

    @exported
    @lazy
    lf_implicit_field3: SynthImplicitFieldParent =
        SynthImplicitFieldParent.builder(f=SynthImplicitField3.builder()).build()

    fun create_node_builder(): NodeBuilder[SynthNonNullable] =
        SynthNonNullable.builder(items=node.items?[0].to_builder())

    @exported
    @lazy
    lf_factored_node_builder: SynthNonNullable =
        node.create_node_builder().build()

    @lazy
    lf_node_builder: NodeBuilder[SynthNonNullable] =
        SynthNonNullable.builder(items=node.items?[0].to_builder())

    @exported
    @lazy
    lf_staged_node_builder: SynthNonNullable = node.lf_node_builder.build()
}

class Name: FooNode implements TokenNode {
}

@abstract
class SynthBaseChild: FooNode {
    @parse_field @nullable f: FooNode
}

@synthetic
class SynthChild1: SynthBaseChild {
}

@synthetic
class SynthChild2: SynthBaseChild {
}

@abstract
class SynthImplicitField1: FooNode {
}

@synthetic
class SynthImplicitField2: SynthImplicitField1 {
}

@synthetic
class SynthImplicitField3: SynthImplicitField1 {
}

@synthetic
class SynthImplicitFieldParent: FooNode {
    @parse_field f: SynthImplicitField1
}

@synthetic
class SynthNonNullable: FooNode {
    @parse_field items: Literal
}

@synthetic
class SynthNullable: FooNode {
    @parse_field @nullable items: Literal
}

@synthetic
class SynthParent: FooNode {
    @parse_field @nullable f: FooNode
}

@synthetic
class SynthUserField: FooNode {
    @parse_field name: Name
    number: BigInt

    @exported
    fun get_number(): BigInt = node.number
}
