@spacing("alphanumericals", "alphanumericals")
lexer foo_lexer {

    @text whitespace <- p"[ \n\r\t]+"
    @family("alphanumericals") @text def <- "def"
    @text var <- "var"
    @family("alphanumericals") @text error <- "error"
    @family("alphanumericals") @text example <- "example"
    @family("alphanumericals") @text null_tok <- "null"
    @text comma <- ","
    @text dot <- "."
    @text semicolon <- ";"
    @text l_par <- "("
    @text r_par <- ")"
    @text l_brace <- "{"
    @text r_brace <- "}"
    @text equal <- "="
    @text plus <- "+"
    @text minus <- "-"
    @text less_than <- "<"
    @family("alphanumericals") @text number <- p"[0-9]+"
    @family("alphanumericals") @symbol identifier <- p"[a-zA-Z_][a-zA-Z0-9_]*"
    @text string <- p"\"[^\"]*\""
    @newline_after @text comment <- p"#(.?)+"

}
grammar foo_grammar {
    @main_rule main_rule <- Example("example")

}

@root_node class FooNode {
}

class Example : FooNode {

    fun identity (b : Boolean): Boolean = b

    @export fun cond1 (b : Boolean): Int = if node.identity(b) then (1)
    else (2)

    @export fun cond2 (b1 : Boolean, b2 : Boolean): Int =
    if node.identity(b1) then (1)
    elif node.identity(b2) then (2)
    else (3)

    @export fun cond3 (b1 : Boolean, b2 : Boolean, b3 : Boolean): Int =
    if node.identity(b1) then (1)
    elif node.identity(b2) then (2)
    elif node.identity(b3) then (3)
    else (3)

    @export fun cond_node (b : Boolean): FooNode = if node.identity(b) then node
    else (null).as_bare_entity
}
