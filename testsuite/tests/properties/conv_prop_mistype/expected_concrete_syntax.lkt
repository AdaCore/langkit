import lexer_example

@with_lexer(foo_lexer)
grammar foo_grammar {
    @main_rule main_rule <- Examples(
        RegularExample("example") PlusExample("+" "example")
    )

}

@abstract class FooNode implements Node[FooNode] {
    lvar: LogicVar
}

class Examples : FooNode {
    @parse_field e1: RegularExample
    @parse_field e2: PlusExample

    @export fun do_solving(): Bool = (
        (
            %eq(node.e1.lvar, node.e2.lvar, conv_prop=BarePlusExample.conv_prop)
        ) and (%domain(node.e1.lvar, [node.e1]))
    ) and (%domain(node.e2.lvar, [node.e2])).solve()
}

class PlusExample : FooNode {

    fun conv_prop(): RegularExample = null
}

class RegularExample : FooNode {
}
