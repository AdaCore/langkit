import lexer_example

@with_lexer(foo_lexer)
grammar foo_grammar {
    @main_rule main_rule <- list+(decl)
    decl <- Decl(
        HasPlus("+") Name(@identifier) "(" ref_list ")"
    )
    ref_list <- list*(ref)
    ref <- Ref(Name(@identifier))
}

@abstract class FooNode implements Node[FooNode] {

    fun env_struct(): EnvStruct =
    EnvStruct(env=node.children_env().env_orphan())

    fun env_array(): Array[LexicalEnv[FooNode]] =
    [node.children_env().env_orphan()]
}

class Decl: FooNode {
    @parse_field has_plus: HasPlus
    @parse_field name: Name
    @parse_field items: ASTList[FooNode, Ref]

    @export fun test_env(other: Entity[FooNode]): Bool =
    node.children_env().env_orphan() == other.children_env().env_orphan()

    @export fun test_struct(other: Entity[FooNode]): Bool =
    node.env_struct() == other.env_struct()

    @export fun test_array(other: Entity[FooNode]): Bool =
    node.env_array() == other.env_array()

    env_spec {
        add_to_env_kv(node.name.symbol, node)
        add_env()
    }
}

@qualifier enum class HasPlus: FooNode {
}

class Name: FooNode implements TokenNode {
}

class Ref: FooNode {
    @parse_field name: Name
}

struct EnvStruct {
    env: LexicalEnv[FooNode]
}
