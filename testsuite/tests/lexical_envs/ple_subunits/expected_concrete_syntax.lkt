grammar None_grammar is
    defs <- list+(or(scope | var) @Semicolon)
    name <- or(Prefix(name @Dot id) | id)
    main_rule <- list*(scope)
    deps <- list+(Dep(@Plus name) @Semicolon)
    var <- Var(id @Equal name)
    scope <- Scope(name @LBrace deps defs @RBrace)
    id <- Id(@Identifier)

end

class FooNode is
end

class Dep : FooNode is
    parse field name : Name
end

"""
List of Dep.
"""
class ASTList[Dep] : FooNodeBaseList is
end

"""
List of FooNode.

This list node can contain one of the following nodes:

* ${node_name(T.Scope)}
* ${node_name(T.Var)}
"""
class ASTList[FooNode] : FooNodeBaseList is
end

"""
List of Scope.
"""
class ASTList[Scope] : FooNodeBaseList is
end

class Name : FooNode is

    public fun resolve (): Entity[FooNode]

    public fun suffix_symbol (): SymbolType

    public fun symbols (): Array[SymbolType]

    fun referenced_unit_or_error (or_error : Boolean): InternalUnit

    public fun referenced_unit (): InternalUnit = self.referenced_unit_or_error(false)
end

class Id : Name is

    fun resolve (): Entity[FooNode] = self.node_env.get(self, only_first=true)

    fun suffix_symbol (): SymbolType = self.symbol

    fun symbols (): Array[SymbolType] = self.symbol?[]
end

class Prefix : Name is
    parse field prefix : Name
    parse field suffix : Id

    fun resolve (): Entity[FooNode] =
        self.prefix.resolve.children_env.get(self.suffix.symbol, only_first=true)


    fun suffix_symbol (): SymbolType = self.suffix.symbol

    fun symbols (): Array[SymbolType] =
        self.prefix.symbols & self.suffix.symbols

end

class Scope : FooNode is
    parse field name : Name
    parse field deps : ASTList[Dep]
    parse field defs : ASTList[FooNode]
    field [internal]is_env_populated : Boolean

    fun initial_env (): LexicalEnv =
        match self.name do
            case p : Prefix => p.prefix.referenced_unit.root.to![ASTList[Scope]].filter(
                (scope) => scope.name.symbols == p.prefix.symbols
            ).at_or_raise(0).children_env
            case _ => self.children_env

        end

end

class Var : FooNode is
    parse field name : Id
    parse field value : Name
end
