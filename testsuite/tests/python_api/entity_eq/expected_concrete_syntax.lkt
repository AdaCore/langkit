grammar None_grammar {
    name <- Name(@Identifier)
    vars <- @LBrace list*(var) @RBrace
    main_rule <- list*(block)
    param <- Param(name)
    params <- @LPar list*(param) @RPar
    var <- BlockVar(name)
    block <- Block(params name vars)

}

class FooNode {
}

class DefNode : FooNode {

    public fun name (): SymbolType
}

class Block : DefNode {
    parse field params : ASTList[Param]
    parse field name_field : Name
    parse field vars : ASTList[BlockVar]

    fun name (): SymbolType = self.name_field.symbol

    public fun rebind (from_block : Entity[Block], to_block : Entity[Block]): Entity[Block] =
    {
        val rbdng = entity.info.rebindings.append_rebinding(
            from_block.params.children_env, to_block.children_env
        )
        val e_info = new EntityInfo(
            md=entity.info.md, from_rebound=false, rebindings=rbdng
        )

        new Entity[Block](info=e_info, node=self)
    }
}

class BlockVar : DefNode {
    parse field name_field : Name

    fun name (): SymbolType = self.name_field.symbol
}

class Param : DefNode {
    parse field name_field : Name

    fun name (): SymbolType = self.name_field.symbol
}

"""
List of Block.
"""
class ASTList[Block] : FooNodeBaseList {
}

"""
List of BlockVar.
"""
class ASTList[BlockVar] : FooNodeBaseList {
}

"""
List of Param.
"""
class ASTList[Param] : FooNodeBaseList {
}

class ASTList[Param] : ASTList[Param] {
}

class Name : FooNode {
}
