import lexer_example
grammar foo_grammar {
    @main_rule main_rule <- Sequence+(node)
    node <- or(example | null_node)
    example <- Example("example")
    null_node <- NullNode("null")

}

@abstract @has_abstract_list class FooNode implements Node {

    @export fun count (seq : Array[Example]): Int = seq.length()
}

class Example : FooNode {
}

## This list node can contain one of the following nodes:
##
## * ${node_name(T.Example)}
## * ${node_name(T.NullNode)}
class Sequence : ASTList[FooNode] {

    @export fun all_items (): Array[FooNode] = self.map((i) => i)

    @export fun example_items (): Array[Example] = self.filtermap(
        (i) => i.as[Example]!, (i) => i is Example
    )
}

class NullNode : FooNode {
}
