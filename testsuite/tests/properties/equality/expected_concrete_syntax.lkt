@spacing(alphanumericals, alphanumericals)
lexer foo_lexer {

    whitespace <- p"[ \n\r\t]+"

    family alphanumericals {
        def <- "def"
    }

    var <- "var"

    family alphanumericals {
        error <- "error"
        example <- "example"
        null_tok <- "null"
    }

    comma <- ","
    dot <- "."
    semicolon <- ";"
    l_par <- "("
    r_par <- ")"
    l_brace <- "{"
    r_brace <- "}"
    equal <- "="
    plus <- "+"
    minus <- "-"
    less_than <- "<"

    family alphanumericals {
        number <- p"[0-9]+"
        @symbol identifier <- p"[a-zA-Z_][a-zA-Z0-9_]*"
    }

    string <- p"\"[^\"]*\""
    @newline_after comment <- p"#(.?)+"
}
grammar foo_grammar {
    @main_rule main_rule <- list+(decl)
    decl <- Decl(
        HasPlus("+") Name(@identifier) "(" ref_list ")"
    )
    ref_list <- list*(ref)
    ref <- Ref(Name(@identifier))

}

@root_node class FooNode {

    fun env_struct (): EnvStruct = EnvStruct(env=node.children_env.env_orphan)

    fun env_array (): Array[LexicalEnv] = [node.children_env.env_orphan]
}

class Decl : FooNode {
    @parse_field has_plus : HasPlus
    @parse_field name : Name
    @parse_field items : ASTList[Ref]

    @export fun test_env (other : FooNode): Bool =
    node.children_env.env_orphan = other.children_env.env_orphan

    @export fun test_struct (other : FooNode): Bool =
    node.env_struct = other.env_struct

    @export fun test_array (other : FooNode): Bool =
    node.env_array = other.env_array
}

@qualifier class HasPlus : FooNode {
}

class Name : FooNode {
}

class Ref : FooNode {
    @parse_field name : Name
}

struct EnvAssoc {
    key : SymbolType
    value : FooNode
    dest_env : LexicalEnv
    metadata : Metadata
}

struct EnvStruct {
    env : LexicalEnv
}
