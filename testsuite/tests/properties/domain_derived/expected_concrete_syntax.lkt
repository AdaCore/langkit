@spacing(alphanumericals, alphanumericals)
lexer foo_lexer {

    whitespace <- p"[ \n\r\t]+"

    family alphanumericals {
        def <- "def"
    }

    var <- "var"

    family alphanumericals {
        error <- "error"
        example <- "example"
        null_tok <- "null"
    }

    comma <- ","
    dot <- "."
    semicolon <- ";"
    l_par <- "("
    r_par <- ")"
    l_brace <- "{"
    r_brace <- "}"
    equal <- "="
    plus <- "+"
    minus <- "-"
    less_than <- "<"

    family alphanumericals {
        number <- p"[0-9]+"
        @symbol() identifier <- p"[a-zA-Z_][a-zA-Z0-9_]*"
    }

    string <- p"\"[^\"]*\""
    @newline_after comment <- p"#(.?)+"
}
grammar foo_grammar {
    name <- Name(@identifier)
    @main_rule main_rule <- list+(or(Definition("def" name) | name), ",")

}

@root_node class FooNode {
}

class Definition : FooNode {
    @parse_field name : Name
}

class Name : FooNode {
    ref_var : LogicVar

    @export fun resolve (): Bool =
    %domain(node.ref_var, node.node_env.get(node).map((d) => d.to[Definition])).solve

    @export fun definition (): Definition =
    node.ref_var.get_value.to[Definition]
}

struct EnvAssoc {
    key : Symbol
    value : FooNode
    dest_env : LexicalEnv
    metadata : Metadata
}
