import lexer_example

@with_lexer(foo_lexer)
grammar foo_grammar {
    @main_rule scope <- Scope("{" list*(decl) "}")
    decl <- Decl(@identifier)
}

@abstract class FooNode implements Node[FooNode] {
}

class Decl: FooNode implements TokenNode {
    fun refd_env(): LexicalEnv[FooNode] = null[LexicalEnv[FooNode]]

    @exported fun lookup(name: Symbol): Array[Entity[FooNode]] =
    node.node_env().get(name)

    env_spec {
        add_to_env_kv(node.symbol, node)
    }
}

class Scope: FooNode {
    @parse_field decls: ASTList[FooNode, Decl]

    env_spec {
        add_env()
        reference([node.as[FooNode]], Decl.refd_env)
    }
}
