import lexer_example

@with_lexer(foo_lexer)
grammar foo_grammar {
    @main_rule main_rule <- list+(sequence)
    sequence <- Sequence("(" list*(Example(@example)) ")")

}

@abstract class FooNode implements Node[FooNode] {

    @export fun node_children(): Array[FooNode] =
    node.children.map((n) => n.as_bare_entity)

    @export fun given_node_children(n: FooNode): Array[FooNode] =
    n.children.map((n) => n.as_bare_entity)

    @export fun entity_children(): Array[FooNode] = self.children

    @export fun given_entity_children(n: FooNode): Array[FooNode] = n.children
}

class Example : FooNode implements TokenNode {
}

class Sequence : FooNode {
    @parse_field items: ASTList[FooNode, Example]
}
