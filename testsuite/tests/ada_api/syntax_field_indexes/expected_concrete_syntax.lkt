import lexer_example

@with_lexer(foo_lexer)
grammar foo_grammar {
    |" Parser main entry point
    @main_rule main_rule <- or(
        | A1B1(@Identifier("a1b1") main_rule main_rule)
        | A1B2(@Identifier("a1b2") main_rule)
        | A2B1(
            @Identifier("a2b1") main_rule main_rule main_rule
        )
        | A2B2(
            @Identifier("a2b2") main_rule main_rule main_rule
        )
        | null(FooNode)
    )
}

@abstract
class FooNode implements Node[FooNode] {
    @abstract @parse_field @nullable fld_1: FooNode
    @abstract @parse_field @nullable fld_2: FooNode
    @abstract @parse_field @nullable fld_3: FooNode
}

@abstract
class A1: FooNode {
    @parse_field @null_field fld_2: FooNode
    @parse_field fld_3: FooNode
    @abstract @parse_field @nullable only_on_a1: FooNode
}

class A1B1: A1 {
    @parse_field fld_1: FooNode
    @parse_field @null_field only_on_a1: FooNode
}

class A1B2: A1 {
    @parse_field @null_field fld_1: FooNode
    @parse_field @null_field only_on_a1: FooNode
}

@abstract
class A2: FooNode {
    @parse_field fld_1: FooNode
}

class A2B1: A2 {
    @parse_field fld_2: FooNode
    @parse_field fld_3: FooNode
}

class A2B2: A2 {
    @parse_field fld_3: FooNode
    @parse_field fld_2: FooNode
}
