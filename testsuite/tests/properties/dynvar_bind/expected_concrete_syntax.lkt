grammar None_grammar {
    decl <- Decl(Name(@Identifier) @LPar list+(ref) @RPar)
    main_rule <- list*(decl)
    ref <- Ref(Name(@Identifier))

}

class FooNode {
}

class Decl : FooNode {
    parse field name : Name
    parse field refs : ASTList[Ref]
}

"""
List of Decl.
"""
class ASTList[Decl] : FooNodeBaseList {
}

"""
List of Ref.
"""
class ASTList[Ref] : FooNodeBaseList {
}

class Name : FooNode {
}

class Ref : FooNode {
    parse field name : Name

    public fun resolve (): Entity[FooNode] = bind env=self.parent.parent.node_env in
        env.get(self.name.symbol)?[0]
    end
}
