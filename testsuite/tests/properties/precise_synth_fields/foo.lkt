import lexer_example

@with_lexer(foo_lexer)
grammar foo_grammar {
    @main_rule main_rule <- or(literal | name | holder | many_holder)
    literal <- Literal(@number)
    name <- Name(@identifier)
    holder <- ParsedHolder("(" name ")")
    many_holder <- ParsedManyHolder("(" HolderList+(holder, ",") ")")
}

class FooNode implements Node[FooNode] {
}

@abstract @has_abstract_list class AbstractHolder: FooNode {
    @parse_field f: Expr
}

class ParsedHolder: AbstractHolder {
}

class HolderList: ASTList[FooNode, AbstractHolder] {
}

@abstract class AbstractManyHolder: FooNode {
    @parse_field f: ASTList[FooNode, AbstractHolder]
}

class ParsedManyHolder: AbstractManyHolder {
    @exported @memoized fun synth(): SyntheticManyHolder =
        SyntheticManyHolder(f=node.f)
}

# Case of a field that only synthetic nodes can hold
@synthetic class SynthNode: FooNode {
    @parse_field f: Expr
}

# Case of a field that both synthetic and parsed nodes can hold
@synthetic class SynthHolder: AbstractHolder {
}

@synthetic class SyntheticManyHolder: AbstractManyHolder {
}

@abstract class Expr: FooNode {
    @exported @abstract fun synth(): FooNode
}

class Literal: Expr implements TokenNode {
    @memoized fun synth(): SynthNode = SynthNode(f=node)
    @exported @memoized fun holder(): SynthHolder = SynthHolder(f=node)
}

class Name: Expr implements TokenNode {
    @memoized fun synth(): SynthNode = SynthNode(f=node)
}
