Resolving test.lkt
==================
Id   <RefId "C" test.lkt:6:9-6:10>
     references <GenericFormalTypeDecl "C" test.lkt:5:10-5:11>

Id   <RefId "C" test.lkt:7:9-7:10>
     references <GenericFormalTypeDecl "C" test.lkt:5:10-5:11>

Id   <RefId "Int" test.lkt:11:34-11:37>
     references <StructDecl prelude: "Int">

Id   <RefId "T" test.lkt:11:40-11:41>
     references <GenericFormalTypeDecl "T" test.lkt:11:10-11:11>

Id   <RefId "T" test.lkt:12:31-12:32>
     references <GenericFormalTypeDecl "T" test.lkt:12:10-12:11>

Id   <RefId "T" test.lkt:12:35-12:36>
     references <GenericFormalTypeDecl "T" test.lkt:12:10-12:11>

Id   <RefId "T" test.lkt:13:32-13:33>
     references <GenericFormalTypeDecl "T" test.lkt:13:10-13:11>

Id   <RefId "Array" test.lkt:13:36-13:41>
     references <GenericDecl prelude: "Array">

Id   <RefId "T" test.lkt:13:42-13:43>
     references <GenericFormalTypeDecl "T" test.lkt:13:10-13:11>

Id   <RefId "T" test.lkt:14:29-14:30>
     references <GenericFormalTypeDecl "T" test.lkt:14:10-14:11>

Id   <RefId "T" test.lkt:14:35-14:36>
     references <GenericFormalTypeDecl "T" test.lkt:14:10-14:11>

Id   <RefId "T" test.lkt:14:41-14:42>
     references <GenericFormalTypeDecl "T" test.lkt:14:10-14:11>

Id   <RefId "T" test.lkt:14:45-14:46>
     references <GenericFormalTypeDecl "T" test.lkt:14:10-14:11>

Id   <RefId "Array" test.lkt:17:20-17:25>
     references <GenericDecl prelude: "Array">

Id   <RefId "Int" test.lkt:17:26-17:29>
     references <StructDecl prelude: "Int">

Id   <RefId "Array" test.lkt:17:33-17:38>
     references <GenericDecl prelude: "Array">

Id   <RefId "String" test.lkt:17:39-17:45>
     references <StructDecl prelude: "String">

Id   <RefId "ints" test.lkt:17:49-17:53>
     references <FunArgDecl "ints" test.lkt:17:14-17:30>

Expr <RefId "ints" test.lkt:17:49-17:53>
     has type <InstantiatedGenericType prelude: "Array[Int]">

Id   <RefId "map" test.lkt:17:54-17:57>
     references <GenericDecl prelude: "map">

Id   <RefId "convert_int" test.lkt:17:65-17:76>
     references <GenericDecl "convert_int" test.lkt:11:1-11:41>

Id   <RefId "String" test.lkt:17:77-17:83>
     references <StructDecl prelude: "String">

Expr <GenericInstantiation test.lkt:17:65-17:84>
     has type <FunctionType prelude: "(Int) -> String">

Id   <RefId "i" test.lkt:17:85-17:86>
     references <LambdaArgDecl "i" test.lkt:17:59-17:60>

Expr <RefId "i" test.lkt:17:85-17:86>
     has type <StructDecl prelude: "Int">

Expr <CallExpr test.lkt:17:65-17:87>
     has type <StructDecl prelude: "String">

Expr <LambdaExpr test.lkt:17:58-17:87>
     has type <FunctionType prelude: "(Int) -> String">

Expr <CallExpr test.lkt:17:49-17:88>
     has type <InstantiatedGenericType prelude: "Array[String]">

Id   <RefId "Array" test.lkt:20:26-20:31>
     references <GenericDecl prelude: "Array">

Id   <RefId "Int" test.lkt:20:32-20:35>
     references <StructDecl prelude: "Int">

Id   <RefId "Array" test.lkt:20:39-20:44>
     references <GenericDecl prelude: "Array">

Id   <RefId "String" test.lkt:20:45-20:51>
     references <StructDecl prelude: "String">

Id   <RefId "ints" test.lkt:21:5-21:9>
     references <FunArgDecl "ints" test.lkt:20:20-20:36>

Expr <RefId "ints" test.lkt:21:5-21:9>
     has type <InstantiatedGenericType prelude: "Array[Int]">

Id   <RefId "filtermap" test.lkt:21:10-21:19>
     references <GenericDecl prelude: "filtermap">

Id   <RefId "convert_int" test.lkt:22:16-22:27>
     references <GenericDecl "convert_int" test.lkt:11:1-11:41>

Id   <RefId "String" test.lkt:22:28-22:34>
     references <StructDecl prelude: "String">

Expr <GenericInstantiation test.lkt:22:16-22:35>
     has type <FunctionType prelude: "(Int) -> String">

Id   <RefId "i" test.lkt:22:36-22:37>
     references <LambdaArgDecl "i" test.lkt:22:10-22:11>

Expr <RefId "i" test.lkt:22:36-22:37>
     has type <StructDecl prelude: "Int">

Expr <CallExpr test.lkt:22:16-22:38>
     has type <StructDecl prelude: "String">

Expr <LambdaExpr test.lkt:22:9-22:38>
     has type <FunctionType prelude: "(Int) -> String">

Id   <RefId "i" test.lkt:23:16-23:17>
     references <LambdaArgDecl "i" test.lkt:23:10-23:11>

Expr <RefId "i" test.lkt:23:16-23:17>
     has type <StructDecl prelude: "Int">

Expr <NumLit test.lkt:23:20-23:21>
     has type <StructDecl prelude: "Int">

Expr <BinOp test.lkt:23:16-23:21>
     has type <EnumTypeDecl prelude: "Bool">

Expr <LambdaExpr test.lkt:23:9-23:21>
     has type <FunctionType prelude: "(Int) -> Bool">

Expr <CallExpr test.lkt:21:5-24:6>
     has type <InstantiatedGenericType prelude: "Array[String]">

test.lkt:27:41: error: Cannot find entity `A` in this scope
26 | @invalid fun test_handle_ce_error(arg : A): Int = arg.method_doesnt_exist()
   |                                         ^                                  

Id   <RefId "Int" test.lkt:27:45-27:48>
     references <StructDecl prelude: "Int">

Id   <RefId "arg" test.lkt:27:51-27:54>
     references <FunArgDecl "arg" test.lkt:27:35-27:42>

Id   <RefId "T" test.lkt:31:27-31:28>
     references <GenericFormalTypeDecl "T" test.lkt:31:10-31:11>

Id   <RefId "Pair" test.lkt:31:31-31:35>
     references <GenericDecl "Pair" test.lkt:5:1-8:2>

Id   <RefId "T" test.lkt:31:36-31:37>
     references <GenericFormalTypeDecl "T" test.lkt:31:10-31:11>

Id   <RefId "T" test.lkt:31:39-31:40>
     references <GenericFormalTypeDecl "T" test.lkt:31:10-31:11>

Id   <RefId "Pair" test.lkt:32:42-32:46>
     references <GenericDecl "Pair" test.lkt:5:1-8:2>

Id   <RefId "Int" test.lkt:32:47-32:50>
     references <StructDecl prelude: "Int">

Id   <RefId "Bool" test.lkt:32:52-32:56>
     references <EnumTypeDecl prelude: "Bool">

test.lkt:32:60: error: Instantiation error: conflicting actual types for formal `T`: `Int` and `Bool`
31 | @invalid fun test_conflicting_actuals(): Pair[Int, Bool] = mkPair(1)
   |                                                            ^^^^^^^^^

Id   <RefId "mkPair" test.lkt:32:60-32:66>
     references <GenericDecl "mkPair" test.lkt:31:1-31:41>

