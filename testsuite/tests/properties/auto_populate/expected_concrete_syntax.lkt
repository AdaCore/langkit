import lexer_example

@with_lexer(foo_lexer)
grammar foo_grammar {
    @main_rule main_rule <- list+(decl)
    decl <- Decl(Name(@identifier) "(" ref_list ")")
    ref_list <- list*(ref)
    ref <- Ref(Name(@identifier))

}

@abstract class FooNode implements Node[FooNode] {
}

class Decl : FooNode {
    @parse_field name: Name
    @parse_field items: ASTList[FooNode, Ref]
}

class Name : FooNode implements TokenNode {
}

class Ref : FooNode {
    @parse_field name: Name

    @export fun decl_wrapper(): Decl = self.decl()

    @export fun decl(): Decl =
    node.children_env().get_first(node.name).as[Decl]!
}
