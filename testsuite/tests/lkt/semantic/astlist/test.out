Resolving test.lkt
==================
Expr <Id "with_abstract_list" test.lkt:1:2-1:20>
     has_type None

Expr <SingleLineStringLit test.lkt:1:21-1:31>
     has_type None

Id   <RefId "Node" test.lkt:2:27-2:31>
     has_type None
     references <TraitDecl prelude: "Node[T]">

Id   <RefId "BaseNode" test.lkt:2:32-2:40>
     has_type None
     references <ClassDecl "BaseNode" test.lkt:2:1-3:2>

Id   <RefId "BaseNode" test.lkt:5:15-5:23>
     has_type None
     references <ClassDecl "BaseNode" test.lkt:2:1-3:2>

Id   <RefId "ASTList" test.lkt:7:18-7:25>
     has_type None
     references <ClassDecl prelude: "ASTList[T]">

Id   <RefId "BaseNode" test.lkt:7:26-7:34>
     has_type None
     references <ClassDecl "BaseNode" test.lkt:2:1-3:2>

Decl <FunDecl "f" test.lkt:8:5-8:59>
     has_type <FunctionType "() -> Array[Entity[BaseNode]]" test.lkt>

   Id   <RefId "Array" test.lkt:8:15-8:20>
        has_type None
        references <StructDecl prelude: "Array[T]">

   Id   <RefId "Entity" test.lkt:8:21-8:27>
        has_type None
        references <StructDecl prelude: "Entity[N]">

   Id   <RefId "BaseNode" test.lkt:8:28-8:36>
        has_type None
        references <ClassDecl "BaseNode" test.lkt:2:1-3:2>

   Expr <CallExpr test.lkt:8:41-8:59>
        has_type <StructDecl prelude: "Array[Entity[BaseNode]]">

      Expr <DotExpr test.lkt:8:41-8:49>
           has_type <FunctionType prelude: "((Entity[BaseNode]) -> Entity[BaseNode]) -> Array[Entity[BaseNode]]">

         Id   <RefId "self" test.lkt:8:41-8:45>
              has_type <StructDecl prelude: "Entity[Sequence]">
              references <SelfDecl "self" test.lkt:7:1-15:2>

         Id   <RefId "map" test.lkt:8:46-8:49>
              has_type <FunctionType prelude: "((Entity[BaseNode]) -> Entity[BaseNode]) -> Array[Entity[BaseNode]]">
              references <FunDecl prelude: "map[U]">

      Expr <LambdaExpr test.lkt:8:50-8:58>
           has_type <FunctionType prelude: "(Entity[BaseNode]) -> Entity[BaseNode]">

         Decl <LambdaParamDecl "i" test.lkt:8:51-8:52>
              has_type <StructDecl prelude: "Entity[BaseNode]">

         Id   <RefId "i" test.lkt:8:57-8:58>
              has_type <StructDecl prelude: "Entity[BaseNode]">
              references <LambdaParamDecl "i" test.lkt:8:51-8:52>

Decl <FunDecl "g" test.lkt:10:5-12:6>
     has_type <FunctionType "() -> Array[Entity[Child]]" test.lkt>

   Id   <RefId "Array" test.lkt:10:15-10:20>
        has_type None
        references <StructDecl prelude: "Array[T]">

   Id   <RefId "Entity" test.lkt:10:21-10:27>
        has_type None
        references <StructDecl prelude: "Entity[N]">

   Id   <RefId "Child" test.lkt:10:28-10:33>
        has_type None
        references <ClassDecl "Child" test.lkt:5:1-5:26>

   Expr <CallExpr test.lkt:10:38-12:6>
        has_type <StructDecl prelude: "Array[Entity[Child]]">

      Expr <DotExpr test.lkt:10:38-10:52>
           has_type <FunctionType prelude: "((Entity[BaseNode]) -> Entity[Child], (Entity[BaseNode]) -> Bool) -> Array[Entity[Child]]">

         Id   <RefId "self" test.lkt:10:38-10:42>
              has_type <StructDecl prelude: "Entity[Sequence]">
              references <SelfDecl "self" test.lkt:7:1-15:2>

         Id   <RefId "filtermap" test.lkt:10:43-10:52>
              has_type <FunctionType prelude: "((Entity[BaseNode]) -> Entity[Child], (Entity[BaseNode]) -> Bool) -> Array[Entity[Child]]">
              references <FunDecl prelude: "filtermap[U]">

      Expr <LambdaExpr test.lkt:11:9-11:28>
           has_type <FunctionType prelude: "(Entity[BaseNode]) -> Entity[Child]">

         Decl <LambdaParamDecl "i" test.lkt:11:10-11:11>
              has_type <StructDecl prelude: "Entity[BaseNode]">

         Expr <CastExpr test.lkt:11:16-11:28>
              has_type <StructDecl prelude: "Entity[Child]">

            Id   <RefId "i" test.lkt:11:16-11:17>
                 has_type <StructDecl prelude: "Entity[BaseNode]">
                 references <LambdaParamDecl "i" test.lkt:11:10-11:11>

            Id   <RefId "Child" test.lkt:11:22-11:27>
                 has_type None
                 references <ClassDecl "Child" test.lkt:5:1-5:26>

      Expr <LambdaExpr test.lkt:11:30-11:47>
           has_type <FunctionType prelude: "(Entity[BaseNode]) -> Bool">

         Decl <LambdaParamDecl "i" test.lkt:11:31-11:32>
              has_type <StructDecl prelude: "Entity[BaseNode]">

         Expr <Isa test.lkt:11:37-11:47>
              has_type <EnumTypeDecl prelude: "Bool">

            Id   <RefId "i" test.lkt:11:37-11:38>
                 has_type <StructDecl prelude: "Entity[BaseNode]">
                 references <LambdaParamDecl "i" test.lkt:11:31-11:32>

            Id   <RefId "Child" test.lkt:11:42-11:47>
                 has_type None
                 references <ClassDecl "Child" test.lkt:5:1-5:26>

Decl <FunDecl "h" test.lkt:14:5-14:43>
     has_type <FunctionType "() -> Entity[BaseNode]" test.lkt>

   Id   <RefId "Entity" test.lkt:14:14-14:20>
        has_type None
        references <StructDecl prelude: "Entity[N]">

   Id   <RefId "BaseNode" test.lkt:14:21-14:29>
        has_type None
        references <ClassDecl "BaseNode" test.lkt:2:1-3:2>

   Expr <CallExpr test.lkt:14:33-14:43>
        has_type <StructDecl prelude: "Entity[BaseNode]">

      Expr <DotExpr test.lkt:14:33-14:40>
           has_type <FunctionType prelude: "(Int) -> Entity[BaseNode]">

         Id   <RefId "self" test.lkt:14:33-14:37>
              has_type <StructDecl prelude: "Entity[Sequence]">
              references <SelfDecl "self" test.lkt:7:1-15:2>

         Id   <RefId "at" test.lkt:14:38-14:40>
              has_type <FunctionType prelude: "(Int) -> Entity[BaseNode]">
              references <FunDecl prelude: "at">

      Expr <NumLit test.lkt:14:41-14:42>
           has_type <StructDecl prelude: "Int">

Expr <Id "synthetic" test.lkt:17:2-17:11>
     has_type None

Id   <RefId "ASTList" test.lkt:18:19-18:26>
     has_type None
     references <ClassDecl prelude: "ASTList[T]">

Id   <RefId "BaseNode" test.lkt:18:27-18:35>
     has_type None
     references <ClassDecl "BaseNode" test.lkt:2:1-3:2>

Decl <ValDecl "synth_build" test.lkt:21:1-22:57>
     has_type <ClassDecl "SynthList" test.lkt:18:1-19:2>

   Id   <RefId "SynthList" test.lkt:21:19-21:28>
        has_type None
        references <ClassDecl "SynthList" test.lkt:18:1-19:2>

   Expr <CallExpr test.lkt:22:5-22:57>
        has_type <ClassDecl "SynthList" test.lkt:18:1-19:2>

      Expr <DotExpr test.lkt:22:5-22:55>
           has_type <FunctionType prelude: "(BaseNode) -> SynthList">

         Expr <CallExpr test.lkt:22:5-22:49>
              has_type <ClassDecl prelude: "NodeBuilder[SynthList]">

            Expr <DotExpr test.lkt:22:5-22:22>
                 has_type <FunctionType "(Array[NodeBuilder[BaseNode]]) -> NodeBuilder[SynthList]" test.lkt>

               Id   <RefId "SynthList" test.lkt:22:5-22:14>
                    has_type None
                    references <ClassDecl "SynthList" test.lkt:18:1-19:2>

               Id   <RefId "builder" test.lkt:22:15-22:22>
                    has_type <FunctionType "(Array[NodeBuilder[BaseNode]]) -> NodeBuilder[SynthList]" test.lkt>
                    references <FunctionType "(Array[NodeBuilder[BaseNode]]) -> NodeBuilder[SynthList]" test.lkt>

            Expr <ArrayLiteral test.lkt:22:23-22:48>
                 has_type <StructDecl prelude: "Array[NodeBuilder[BaseNode]]">

               Id   <RefId "NodeBuilder" test.lkt:22:27-22:38>
                    has_type None
                    references <ClassDecl prelude: "NodeBuilder[T]">

               Id   <RefId "BaseNode" test.lkt:22:39-22:47>
                    has_type None
                    references <ClassDecl "BaseNode" test.lkt:2:1-3:2>

         Id   <RefId "build" test.lkt:22:50-22:55>
              has_type <FunctionType prelude: "(BaseNode) -> SynthList">
              references <FunDecl prelude: "build">

Expr <Id "synthetic" test.lkt:24:2-24:11>
     has_type None

Id   <RefId "ASTList" test.lkt:25:28-25:35>
     has_type None
     references <ClassDecl prelude: "ASTList[T]">

Id   <RefId "BaseNode" test.lkt:25:36-25:44>
     has_type None
     references <ClassDecl "BaseNode" test.lkt:2:1-3:2>

Decl <FieldDecl "i" test.lkt:26:5-26:11>
     has_type <StructDecl prelude: "Int">

   Id   <RefId "Int" test.lkt:26:8-26:11>
        has_type None
        references <StructDecl prelude: "Int">

Decl <ValDecl "synth_build" test.lkt:29:1-30:57>
     has_type <ClassDecl "SynthList" test.lkt:18:1-19:2>

   Id   <RefId "SynthList" test.lkt:29:19-29:28>
        has_type None
        references <ClassDecl "SynthList" test.lkt:18:1-19:2>

   Expr <CallExpr test.lkt:30:5-30:57>
        has_type <ClassDecl "SynthList" test.lkt:18:1-19:2>

      Expr <DotExpr test.lkt:30:5-30:55>
           has_type <FunctionType prelude: "(BaseNode) -> SynthList">

         Expr <CallExpr test.lkt:30:5-30:49>
              has_type <ClassDecl prelude: "NodeBuilder[SynthList]">

            Expr <DotExpr test.lkt:30:5-30:22>
                 has_type <FunctionType "(Array[NodeBuilder[BaseNode]]) -> NodeBuilder[SynthList]" test.lkt>

               Id   <RefId "SynthList" test.lkt:30:5-30:14>
                    has_type None
                    references <ClassDecl "SynthList" test.lkt:18:1-19:2>

               Id   <RefId "builder" test.lkt:30:15-30:22>
                    has_type <FunctionType "(Array[NodeBuilder[BaseNode]]) -> NodeBuilder[SynthList]" test.lkt>
                    references <FunctionType "(Array[NodeBuilder[BaseNode]]) -> NodeBuilder[SynthList]" test.lkt>

            Expr <ArrayLiteral test.lkt:30:23-30:48>
                 has_type <StructDecl prelude: "Array[NodeBuilder[BaseNode]]">

               Id   <RefId "NodeBuilder" test.lkt:30:27-30:38>
                    has_type None
                    references <ClassDecl prelude: "NodeBuilder[T]">

               Id   <RefId "BaseNode" test.lkt:30:39-30:47>
                    has_type None
                    references <ClassDecl "BaseNode" test.lkt:2:1-3:2>

         Id   <RefId "build" test.lkt:30:50-30:55>
              has_type <FunctionType prelude: "(BaseNode) -> SynthList">
              references <FunDecl prelude: "build">

Decl <ValDecl "synth_build_list" test.lkt:32:1-33:74>
     has_type <ClassDecl "SynthListUserField" test.lkt:25:1-27:2>

   Id   <RefId "SynthListUserField" test.lkt:32:24-32:42>
        has_type None
        references <ClassDecl "SynthListUserField" test.lkt:25:1-27:2>

   Expr <CallExpr test.lkt:33:5-33:74>
        has_type <ClassDecl "SynthListUserField" test.lkt:25:1-27:2>

      Expr <DotExpr test.lkt:33:5-33:72>
           has_type <FunctionType prelude: "(BaseNode) -> SynthListUserField">

         Expr <CallExpr test.lkt:33:5-33:66>
              has_type <ClassDecl prelude: "NodeBuilder[SynthListUserField]">

            Expr <DotExpr test.lkt:33:5-33:31>
                 has_type <FunctionType "(Array[NodeBuilder[BaseNode]], Int) -> NodeBuilder[SynthListUserField]" test.lkt>

               Id   <RefId "SynthListUserField" test.lkt:33:5-33:23>
                    has_type None
                    references <ClassDecl "SynthListUserField" test.lkt:25:1-27:2>

               Id   <RefId "builder" test.lkt:33:24-33:31>
                    has_type <FunctionType "(Array[NodeBuilder[BaseNode]], Int) -> NodeBuilder[SynthListUserField]" test.lkt>
                    references <FunctionType "(Array[NodeBuilder[BaseNode]], Int) -> NodeBuilder[SynthListUserField]" test.lkt>

            Expr <ArrayLiteral test.lkt:33:32-33:57>
                 has_type <StructDecl prelude: "Array[NodeBuilder[BaseNode]]">

               Id   <RefId "NodeBuilder" test.lkt:33:36-33:47>
                    has_type None
                    references <ClassDecl prelude: "NodeBuilder[T]">

               Id   <RefId "BaseNode" test.lkt:33:48-33:56>
                    has_type None
                    references <ClassDecl "BaseNode" test.lkt:2:1-3:2>

            Id   <RefId "i" test.lkt:33:59-33:60>
                 has_type None
                 references <SynthParamDecl "[Synthetic parameter]" test.lkt:25:1-27:2>

            Expr <NumLit test.lkt:33:63-33:65>
                 has_type <StructDecl prelude: "Int">

         Id   <RefId "build" test.lkt:33:67-33:72>
              has_type <FunctionType prelude: "(BaseNode) -> SynthListUserField">
              references <FunDecl prelude: "build">

