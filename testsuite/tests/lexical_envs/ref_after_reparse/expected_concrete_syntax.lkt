grammar None_grammar {
    decl <- Decl(name)
    ref_list <- list+(ref)
    name <- Name(@Identifier)
    main_rule <- list*(block)
    decl_list <- ("(" list+(decl) ")")
    using_list <- ("(" list+(using) ")")
    using <- Using(name)
    ref <- Ref(name)
    block <- Block(
        name decl_list "{" using_list ref_list "}"
    )

}

@root_node class FooNode {
}

class Block : FooNode {
    @parse_field name : Name
    @parse_field decls : ASTList[Decl]
    @parse_field usings : ASTList[Using]
    @parse_field refs : ASTList[Ref]
}

class Decl : FooNode {
    @parse_field name : Name
}

class Name : FooNode {

    fun ambiant_entity (): FooNode = env.get(node)?(0)

    fun designated_env (): LexicalEnv =
    node.unit.root.node_env.get(node)?(0).children_env

    @export fun entity (): FooNode = {
        bind env = node.node_env;

        node.ambiant_entity
    }
}

class Ref : FooNode {
    @parse_field name : Name

    @export fun entity (): FooNode = node.as_entity.name.entity
}

class Using : FooNode {
    @parse_field name : Name
}

struct EnvAssoc {
    key : SymbolType
    value : FooNode
    dest_env : LexicalEnv
    metadata : Metadata
}
