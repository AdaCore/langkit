# Check that reference actions that try to add an entry to a foreign
# environment without the unsafe=True flag raise an error.

import lexer_example

@with_lexer(foo_lexer)
grammar foo_grammar {
    @main_rule main_rule <- list+(scope)
    scope <- Scope(
        "def" simple_identifier "{" list*(or(scope | ref_clause)) "}"
    )
    identifier <- or(
        | ScopedId(identifier "." simple_identifier)
        | simple_identifier
    )
    simple_identifier <- SimpleId(@Identifier)
    ref_clause <- RefClause("+" identifier)
}

@abstract
class FooNode implements Node[FooNode] {
}

@abstract
class Id: FooNode {
    @abstract
    fun resolve(base_env: LexicalEnv): FooNode
}

class ScopedId: Id {
    @parse_field scope: Id
    @parse_field name: SimpleId

    fun resolve(base_env: LexicalEnv): FooNode =
        node
        .scope
        .resolve(base_env)
        .children_env
        .get_first(node.name.symbol)
        .node
}

class SimpleId: Id implements TokenNode {
    fun resolve(base_env: LexicalEnv): FooNode =
        base_env.get_first(node.symbol).node
}

class RefClause: FooNode {
    @parse_field ref_id: Id

    env_spec {
        reference(
            [node.ref_id.as[FooNode]],
            FooNode.children_env,
            dest_env=node.ref_id.resolve(node.parent.children_env).children_env
        )
    }
}

class Scope: FooNode {
    @parse_field name: SimpleId
    @parse_field content: ASTList[FooNode]

    env_spec {
        add_to_env_kv(node.name.symbol, node)
        add_env()
    }
}
